[
  {
    "step": {
      "step_id": "list_initial_databases",
      "tool_name": "mcp_list_databases",
      "parameters": {},
      "description": "Happy path: List all databases to understand the initial state of MongoDB."
    },
    "substituted_params": {},
    "result": {
      "status": "error",
      "result": "Error listing databases: localhost:27017: [WinError 10061] 由于目标计算机积极拒绝，无法连接。 (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms), Timeout: 30s, Topology Description: <TopologyDescription id: 68766fa02c16cca2d43a06ae, topology_type: Unknown, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('localhost:27017: [WinError 10061] 由于目标计算机积极拒绝，无法连接。 (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms)')>]>"
    }
  },
  {
    "step": {
      "step_id": "create_test_database",
      "tool_name": "mcp_insert_document",
      "parameters": {
        "database_name": "test_db",
        "collection_name": "test_collection",
        "document": {
          "name": "Test Document",
          "value": 1
        }
      },
      "description": "Happy path: Insert a document into a new database and collection to implicitly create them."
    },
    "substituted_params": {
      "database_name": "test_db",
      "collection_name": "test_collection",
      "document": {
        "name": "Test Document",
        "value": 1
      }
    },
    "result": {
      "status": "error",
      "result": "Error inserting document: localhost:27017: [WinError 10061] 由于目标计算机积极拒绝，无法连接。 (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms), Timeout: 30s, Topology Description: <TopologyDescription id: 68766fa02c16cca2d43a06ae, topology_type: Unknown, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('localhost:27017: [WinError 10061] 由于目标计算机积极拒绝，无法连接。 (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms)')>]>"
    }
  },
  {
    "step": {
      "step_id": "verify_test_database_exists",
      "tool_name": "mcp_list_databases",
      "parameters": {},
      "description": "Dependent call: Confirm that 'test_db' has been created by listing databases again."
    },
    "substituted_params": {},
    "result": {
      "status": "error",
      "result": "Error listing databases: localhost:27017: [WinError 10061] 由于目标计算机积极拒绝，无法连接。 (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms), Timeout: 30s, Topology Description: <TopologyDescription id: 68766fa02c16cca2d43a06ae, topology_type: Unknown, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('localhost:27017: [WinError 10061] 由于目标计算机积极拒绝，无法连接。 (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms)')>]>"
    }
  },
  {
    "step": {
      "step_id": "list_collections_in_test_db",
      "tool_name": "mcp_list_collections",
      "parameters": {
        "database_name": "test_db"
      },
      "description": "Happy path: List collections in 'test_db' to verify 'test_collection' exists."
    },
    "substituted_params": {
      "database_name": "test_db"
    },
    "result": {
      "status": "error",
      "result": "Error listing collections: localhost:27017: [WinError 10061] 由于目标计算机积极拒绝，无法连接。 (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms), Timeout: 30s, Topology Description: <TopologyDescription id: 68766fa02c16cca2d43a06ae, topology_type: Unknown, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('localhost:27017: [WinError 10061] 由于目标计算机积极拒绝，无法连接。 (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms)')>]>"
    }
  },
  {
    "step": {
      "step_id": "insert_additional_documents",
      "tool_name": "mcp_insert_document",
      "parameters": {
        "database_name": "test_db",
        "collection_name": "test_collection",
        "document": {
          "name": "Another Test Document",
          "value": 2
        }
      },
      "description": "Happy path: Insert another document to prepare for querying and updating."
    },
    "substituted_params": {
      "database_name": "test_db",
      "collection_name": "test_collection",
      "document": {
        "name": "Another Test Document",
        "value": 2
      }
    },
    "result": {
      "status": "error",
      "result": "Error inserting document: localhost:27017: [WinError 10061] 由于目标计算机积极拒绝，无法连接。 (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms), Timeout: 30s, Topology Description: <TopologyDescription id: 68766fa02c16cca2d43a06ae, topology_type: Unknown, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('localhost:27017: [WinError 10061] 由于目标计算机积极拒绝，无法连接。 (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms)')>]>"
    }
  },
  {
    "step": {
      "step_id": "find_all_documents",
      "tool_name": "mcp_find_documents",
      "parameters": {
        "database_name": "test_db",
        "collection_name": "test_collection"
      },
      "description": "Happy path: Retrieve all documents from 'test_collection' to confirm insertions."
    },
    "substituted_params": {
      "database_name": "test_db",
      "collection_name": "test_collection"
    },
    "result": {
      "status": "error",
      "result": "{\n  \"error\": \"Error finding documents: localhost:27017: [WinError 10061] 由于目标计算机积极拒绝，无法连接。 (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms), Timeout: 30s, Topology Description: <TopologyDescription id: 68766fa02c16cca2d43a06ae, topology_type: Unknown, servers: [<ServerDescription ('localhost', 27017) server_type: Unknown, rtt: None, error=AutoReconnect('localhost:27017: [WinError 10061] 由于目标计算机积极拒绝，无法连接。 (configured timeouts: socketTimeoutMS: 20000.0ms, connectTimeoutMS: 20000.0ms)')>]>\"\n}"
    }
  },
  {
    "step": {
      "step_id": "find_limited_documents",
      "tool_name": "mcp_find_documents",
      "parameters": {
        "database_name": "test_db",
        "collection_name": "test_collection",
        "limit": 1
      },
      "description": "Edge case: Find with limit=1 to test result limiting functionality."
    },
    "substituted_params": {
      "database_name": "test_db",
      "collection_name": "test_collection",
      "limit": 1
    },
    "result": {
      "status": "success",
      "result": "{\n  \"_id\": \"68710cc7ea7bb66ae341045f\",\n  \"key\": \"value\"\n}"
    }
  },
  {
    "step": {
      "step_id": "update_single_document",
      "tool_name": "mcp_update_document",
      "parameters": {
        "database_name": "test_db",
        "collection_name": "test_collection",
        "query": {
          "name": "Test Document"
        },
        "update": {
          "$set": {
            "updated": true
          }
        }
      },
      "description": "Happy path: Update one document where name is 'Test Document'."
    },
    "substituted_params": {
      "database_name": "test_db",
      "collection_name": "test_collection",
      "query": {
        "name": "Test Document"
      },
      "update": {
        "$set": {
          "updated": true
        }
      }
    },
    "result": {
      "status": "success",
      "result": "Successfully updated 1 document(s)"
    }
  },
  {
    "step": {
      "step_id": "verify_update_single_document",
      "tool_name": "mcp_find_documents",
      "parameters": {
        "database_name": "test_db",
        "collection_name": "test_collection",
        "query": {
          "name": "Test Document"
        }
      },
      "description": "Dependent call: Verify the update was applied correctly on the single document."
    },
    "substituted_params": {
      "database_name": "test_db",
      "collection_name": "test_collection",
      "query": {
        "name": "Test Document"
      }
    },
    "result": {
      "status": "success",
      "result": "{\n  \"_id\": \"687258207c1609156ee10ee1\",\n  \"name\": \"Test Document\",\n  \"content\": \"This is a test document for insertion.\",\n  \"updated\": true\n}"
    }
  },
  {
    "step": {
      "step_id": "update_multiple_documents",
      "tool_name": "mcp_update_document",
      "parameters": {
        "database_name": "test_db",
        "collection_name": "test_collection",
        "query": {
          "value": 2
        },
        "update": {
          "$set": {
            "updated": true
          }
        },
        "multi": true
      },
      "description": "Happy path: Update multiple documents where value is 2 (should be one document)."
    },
    "substituted_params": {
      "database_name": "test_db",
      "collection_name": "test_collection",
      "query": {
        "value": 2
      },
      "update": {
        "$set": {
          "updated": true
        }
      },
      "multi": true
    },
    "result": {
      "status": "success",
      "result": "Successfully updated 0 document(s)"
    }
  },
  {
    "step": {
      "step_id": "verify_update_multiple_documents",
      "tool_name": "mcp_find_documents",
      "parameters": {
        "database_name": "test_db",
        "collection_name": "test_collection",
        "query": {
          "value": 2
        }
      },
      "description": "Dependent call: Verify the multi-update was applied correctly."
    },
    "substituted_params": {
      "database_name": "test_db",
      "collection_name": "test_collection",
      "query": {
        "value": 2
      }
    },
    "result": {
      "status": "success",
      "result": "No output returned."
    }
  },
  {
    "step": {
      "step_id": "delete_single_document",
      "tool_name": "mcp_delete_document",
      "parameters": {
        "database_name": "test_db",
        "collection_name": "test_collection",
        "query": {
          "name": "Test Document"
        }
      },
      "description": "Happy path: Delete one document where name is 'Test Document'."
    },
    "substituted_params": {
      "database_name": "test_db",
      "collection_name": "test_collection",
      "query": {
        "name": "Test Document"
      }
    },
    "result": {
      "status": "success",
      "result": "Successfully deleted 1 document(s)"
    }
  },
  {
    "step": {
      "step_id": "verify_deleted_single_document",
      "tool_name": "mcp_find_documents",
      "parameters": {
        "database_name": "test_db",
        "collection_name": "test_collection"
      },
      "description": "Dependent call: Confirm that the document was deleted successfully."
    },
    "substituted_params": {
      "database_name": "test_db",
      "collection_name": "test_collection"
    },
    "result": {
      "status": "success",
      "result": "{\n  \"_id\": \"68710cc7ea7bb66ae341045f\",\n  \"key\": \"value\"\n}, {\n  \"_id\": \"687291c80d1fbb52f4c8c1b2\",\n  \"name\": \"Test User\",\n  \"age\": 30,\n  \"email\": \"test@example.com\"\n}, {\n  \"_id\": \"687291c80d1fbb52f4c8c1b3\",\n  \"name\": \"\",\n  \"age\": null,\n  \"email\": \"\"\n}, {\n  \"_id\": \"6872af6d9da8b940f807d366\",\n  \"name\": \"John Doe\",\n  \"age\": 30,\n  \"email\": \"johndoe@example.com\"\n}, {\n  \"_id\": \"6872af6d9da8b940f807d368\",\n  \"user@name\": \"Alice\",\n  \"age#value\": 25\n}, {\n  \"_id\": \"6872bf1e0e2fc95fbcc97acd\",\n  \"name\": \"John Doe\",\n  \"age\": 30,\n  \"email\": \"john.doe@example.com\"\n}, {\n  \"_id\": \"6872bf1e0e2fc95fbcc97ace\",\n  \"name\": \"\",\n  \"age\": null,\n  \"email\": \"empty.fields@example.com\"\n}, {\n  \"_id\": \"6872bf1e0e2fc95fbcc97ad3\",\n  \"key\": \"value\"\n}"
    }
  },
  {
    "step": {
      "step_id": "delete_multiple_documents",
      "tool_name": "mcp_delete_document",
      "parameters": {
        "database_name": "test_db",
        "collection_name": "test_collection",
        "query": {
          "value": 2
        },
        "multi": true
      },
      "description": "Happy path: Delete multiple documents where value is 2."
    },
    "substituted_params": {
      "database_name": "test_db",
      "collection_name": "test_collection",
      "query": {
        "value": 2
      },
      "multi": true
    },
    "result": {
      "status": "success",
      "result": "Successfully deleted 0 document(s)"
    }
  },
  {
    "step": {
      "step_id": "verify_deleted_multiple_documents",
      "tool_name": "mcp_find_documents",
      "parameters": {
        "database_name": "test_db",
        "collection_name": "test_collection"
      },
      "description": "Dependent call: Confirm that both test documents were deleted."
    },
    "substituted_params": {
      "database_name": "test_db",
      "collection_name": "test_collection"
    },
    "result": {
      "status": "success",
      "result": "{\n  \"_id\": \"68710cc7ea7bb66ae341045f\",\n  \"key\": \"value\"\n}, {\n  \"_id\": \"687291c80d1fbb52f4c8c1b2\",\n  \"name\": \"Test User\",\n  \"age\": 30,\n  \"email\": \"test@example.com\"\n}, {\n  \"_id\": \"687291c80d1fbb52f4c8c1b3\",\n  \"name\": \"\",\n  \"age\": null,\n  \"email\": \"\"\n}, {\n  \"_id\": \"6872af6d9da8b940f807d366\",\n  \"name\": \"John Doe\",\n  \"age\": 30,\n  \"email\": \"johndoe@example.com\"\n}, {\n  \"_id\": \"6872af6d9da8b940f807d368\",\n  \"user@name\": \"Alice\",\n  \"age#value\": 25\n}, {\n  \"_id\": \"6872bf1e0e2fc95fbcc97acd\",\n  \"name\": \"John Doe\",\n  \"age\": 30,\n  \"email\": \"john.doe@example.com\"\n}, {\n  \"_id\": \"6872bf1e0e2fc95fbcc97ace\",\n  \"name\": \"\",\n  \"age\": null,\n  \"email\": \"empty.fields@example.com\"\n}, {\n  \"_id\": \"6872bf1e0e2fc95fbcc97ad3\",\n  \"key\": \"value\"\n}"
    }
  },
  {
    "step": {
      "step_id": "list_collections_after_deletion",
      "tool_name": "mcp_list_collections",
      "parameters": {
        "database_name": "test_db"
      },
      "description": "Edge case: Ensure collection still exists even after deletion of all documents."
    },
    "substituted_params": {
      "database_name": "test_db"
    },
    "result": {
      "status": "error",
      "result": "a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it, new_collection, test_collection, empty_docs, invalid/collection*name, user_profiles, long_key_collection, test_collection'; DROP COLLECTION test_collection;--, large_data, special_chars_collection, binary_data_collection, nonexistent_collection, a_very_long_collection_name_that_exceeds_normal_limits_and_might_cause_issues, users"
    }
  },
  {
    "step": {
      "step_id": "delete_test_database",
      "tool_name": "mcp_delete_document",
      "parameters": {
        "database_name": "test_db",
        "collection_name": "test_collection",
        "query": {}
      },
      "description": "Sensitive action: Attempting to delete entire database content, though tool doesn't support dropping db directly."
    },
    "substituted_params": {
      "database_name": "test_db",
      "collection_name": "test_collection",
      "query": {}
    },
    "result": {
      "status": "success",
      "result": "Successfully deleted 1 document(s)"
    }
  },
  {
    "step": {
      "step_id": "verify_test_database_gone",
      "tool_name": "mcp_list_databases",
      "parameters": {},
      "description": "Dependent call: Final check to ensure 'test_db' no longer appears in database list."
    },
    "substituted_params": {},
    "result": {
      "status": "error",
      "result": "admin, config, db@#_测试, does_not_exist_db, invalid_database, large_db, local, mcp-test, new_db, offline_db, restricted_db, test_db, users, 智能软件工"
    }
  },
  {
    "step": {
      "step_id": "invalid_database_query",
      "tool_name": "mcp_find_documents",
      "parameters": {
        "database_name": "nonexistent_db",
        "collection_name": "nonexistent_collection"
      },
      "description": "Edge case: Query a non-existent database and collection to test error handling."
    },
    "substituted_params": {
      "database_name": "nonexistent_db",
      "collection_name": "nonexistent_collection"
    },
    "result": {
      "status": "success",
      "result": "No output returned."
    }
  },
  {
    "step": {
      "step_id": "invalid_collection_query",
      "tool_name": "mcp_find_documents",
      "parameters": {
        "database_name": "admin",
        "collection_name": "nonexistent_collection"
      },
      "description": "Edge case: Query a valid database but invalid collection to test error handling."
    },
    "substituted_params": {
      "database_name": "admin",
      "collection_name": "nonexistent_collection"
    },
    "result": {
      "status": "success",
      "result": "No output returned."
    }
  },
  {
    "step": {
      "step_id": "empty_query_find",
      "tool_name": "mcp_find_documents",
      "parameters": {
        "database_name": "admin",
        "collection_name": "system.version"
      },
      "description": "Edge case: Perform find with empty query on system collection to test default behavior."
    },
    "substituted_params": {
      "database_name": "admin",
      "collection_name": "system.version"
    },
    "result": {
      "status": "success",
      "result": "{\n  \"_id\": \"featureCompatibilityVersion\",\n  \"version\": \"8.0\"\n}, {\n  \"_id\": \"68626d55029e5cd2f7c9b28f\",\n  \"key\": \"test_key\",\n  \"value\": \"test_value\"\n}, {\n  \"_id\": \"6863b714e63a60df7d661771\",\n  \"test\": \"unauthorized\"\n}, {\n  \"_id\": \"687258207c1609156ee10ee5\",\n  \"key\": \"restricted_insert\"\n}, {\n  \"_id\": \"687293902f99e4d325c71fb9\",\n  \"version\": \"999.999\"\n}"
    }
  }
]