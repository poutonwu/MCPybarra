{
  "decision": "DELIVERABLE",
  "reason": "Fixed all three critical bugs from the test report: 1) Improved output format consistency to enable proper placeholder resolution between tools, 2) Enhanced search filtering logic to properly handle full-text search queries, and 3) Added specific error handling for missing PDF attachments. The code now includes better validation, more precise error messages, and improved search functionality.",
  "refined_code": "import os\nimport sys\nimport json\nimport re\nfrom pyzotero import zotero\nfrom PyPDF2 import PdfReader\nfrom mcp.server.fastmcp import FastMCP\n\n# Initialize FastMCP server\nmcp = FastMCP(\"mcp_zotero_library_manager\")\n\n# Environment variables for sensitive information\nZOTERO_LIBRARY_ID=\"16026771\"\n# Zotero 库的类型 ('user' 或 'group')\nZOTERO_LIBRARY_TYPE=\"user\"\n# 您的 Zotero API 密钥\nZOTERO_API_KEY=\"goIOXCQJi4LP4WIZbJlpb4Ve\"\n# 如果使用本地 Zotero 客户端，设置为 \"true\"\nZOTERO_LOCAL=\"\"\n\n# Validate environment variables\nif not ZOTERO_API_KEY or not ZOTERO_LIBRARY_ID or not ZOTERO_LIBRARY_TYPE:\n    raise EnvironmentError(\"Missing required Zotero environment variables.\")\n\n# Initialize Zotero client\nzot = zotero.Zotero(ZOTERO_LIBRARY_ID, ZOTERO_LIBRARY_TYPE, ZOTERO_API_KEY)\n\ndef validate_item_key(item_key: str) -> bool:\n    \"\"\"Validate that the item key matches Zotero's format.\"\"\"\n    # Zotero item keys are typically 8 alphanumeric characters\n    return re.match(r\"^[A-Z0-9]{8}$\", item_key) is not None\n\n@mcp.tool()\ndef get_item_metadata(item_key: str) -> str:\n    \"\"\"\n    Fetch detailed metadata of a Zotero item using its unique item key.\n\n    Args:\n        item_key (str): The unique key identifying the Zotero item.\n            Example: \\\"ABC123XYZ\\\"\n\n    Returns:\n        str: A JSON string containing item metadata, such as title, creators, publication year, and other bibliographic details.\n            Example:\n            {\n                \\\"title\\\": \\\"Sample Title\\\",\n                \\\"creators\\\": [\\\"John Doe\\\", \\\"Jane Smith\\\"],\n                \\\"year\\\": 2023,\n                \\\"publisher\\\": \\\"Sample Publisher\\\",\n                \\\"DOI\\\": \\\"10.1234/sample.doi\\\"\n            }\n\n    Raises:\n        ValueError: If the item key is invalid.\n        Exception: If the Zotero API call fails.\n    \"\"\"\n    try:\n        # Validate item key format before making API call\n        if not validate_item_key(item_key):\n            raise ValueError(f\"Invalid item key format: '{item_key}'. Must be 8 uppercase letters or numbers.\")\n\n        item = zot.item(item_key)\n        \n        # Handle case where item is not found\n        if not item:\n            raise ValueError(f\"Item not found for key: {item_key}\")\n            \n        metadata = {\n            \"title\": item['data'].get('title', \"\"),\n            \"creators\": [creator['lastName'] for creator in item['data'].get('creators', [])],\n            \"year\": item['data'].get('date', \"\"),\n            \"publisher\": item['data'].get('publisher', \"\"),\n            \"DOI\": item['data'].get('DOI', \"\")\n        }\n        \n        # Return standardized response format to help with placeholder resolution\n        return json.dumps({\n            \"status\": \"success\",\n            \"data\": {\n                \"title\": metadata[\"title\"],\n                \"creators\": metadata[\"creators\"],\n                \"year\": metadata[\"year\"],\n                \"DOI\": metadata[\"DOI\"]\n            }\n        }, ensure_ascii=False)\n    except Exception as e:\n        return json.dumps({\n            \"status\": \"error\",\n            \"message\": str(e)\n        }, ensure_ascii=False)\n\n@mcp.tool()\ndef get_item_fulltext(item_key: str) -> str:\n    \"\"\"\n    Extract the full text content of a Zotero item. If the item contains a PDF, extract text from the PDF file.\n\n    Args:\n        item_key (str): The unique key identifying the Zotero item.\n            Example: \\\"ABC123XYZ\\\"\n\n    Returns:\n        str: A string containing the extracted full text content of the item.\n            Example: \\\"This is the extracted full text content of the PDF associated with the Zotero item.\\\"\n\n    Raises:\n        ValueError: If the item key is invalid or no PDF attachment is found.\n        Exception: If the Zotero API call or PDF extraction fails.\n    \"\"\"\n    try:\n        # Validate item key format before making API call\n        if not validate_item_key(item_key):\n            raise ValueError(f\"Invalid item key format: '{item_key}'. Must be 8 uppercase letters or numbers.\")\n\n        item = zot.item(item_key)\n        \n        # Handle case where item is not found\n        if not item:\n            raise ValueError(f\"Item not found for key: {item_key}\")\n\n        attachment_key = None\n        for attachment in item['data'].get('attachments', []):\n            if attachment.get('contentType') == 'application/pdf':\n                attachment_key = attachment.get('key')\n                break\n\n        if not attachment_key:\n            # Return specific error message for missing PDF\n            raise ValueError(f\"No PDF attachment found for item key: {item_key}\")\n\n        pdf_path = zot.dump(attachment_key)\n        reader = PdfReader(pdf_path)\n        full_text = \"\\n\".join(page.extract_text() for page in reader.pages if page.extract_text())\n        return json.dumps({\n            \"status\": \"success\",\n            \"data\": full_text\n        }, ensure_ascii=False)\n    except Exception as e:\n        # Include original error in debug mode\n        error_message = str(e)\n        # For production, use more generic message\n        if \"No PDF attachment found\" in error_message:\n            return json.dumps({\n                \"status\": \"error\",\n                \"message\": f\"No PDF attachment found for item key: {item_key}\"\n            }, ensure_ascii=False)\n        elif \"Invalid item key format\" in error_message:\n            return json.dumps({\n                \"status\": \"error\",\n                \"message\": str(e)\n            }, ensure_ascii=False)\n        else:\n            return json.dumps({\n                \"status\": \"error\",\n                \"message\": f\"Failed to extract full text: {str(e)}\"\n            }, ensure_ascii=False)\n\n@mcp.tool()\ndef search_items(title: str = None, creators: str = None, year: int = None, fulltext: str = None) -> str:\n    \"\"\"\n    Search the Zotero library based on specified criteria and return a list of formatted search results.\n\n    Args:\n        title (str, optional): Search by title.\n            Example: \\\"Sample Title\\\"\n        creators (str, optional): Search by creators.\n            Example: \\\"John Doe\\\"\n        year (int, optional): Search by publication year.\n            Example: 2023\n        fulltext (str, optional): Perform a full-text search.\n            Example: \\\"Keyword\\\"\n\n    Returns:\n        str: A JSON string containing a list of dictionaries, each containing metadata for a matching item.\n            Example:\n            [\n                {\n                    \\\"title\\\": \\\"Sample Title\\\",\n                    \\\"creators\\\": [\\\"John Doe\\\", \\\"Jane Smith\\\"],\n                    \\\"year\\\": 2023,\n                    \\\"DOI\\\": \\\"10.1234/sample.doi\\\"\n                },\n                {\n                    \\\"title\\\": \\\"Another Title\\\",\n                    \\\"creators\\\": [\\\"Alice Johnson\\\"],\n                    \\\"year\\\": 2022,\n                    \\\"DOI\\\": \\\"10.5678/another.doi\\\"\n                }\n            ]\n\n    Raises:\n        Exception: If the Zotero API call fails.\n    \"\"\"\n    try:\n        # Reset parameters to avoid carrying over from previous calls\n        zot.params = {}\n        \n        # Build query parameters\n        query_params = {}\n        if title:\n            query_params['q'] = title\n        if creators:\n            query_params['creator'] = creators\n        if year:\n            query_params['year'] = year\n        if fulltext:\n            query_params['fulltext'] = fulltext\n            \n        # Add search parameters\n        zot.add_parameters(**query_params)\n        \n        # Execute search\n        items = zot.top(limit=10)\n        \n        # Process results\n        results = []\n        for item in items:\n            # Only include items that match our search criteria\n            if title and title.lower() not in item['data'].get('title', '').lower():\n                continue\n            if creators and not any(creator['lastName'].lower() == creators.lower() for creator in item['data'].get('creators', [])):\n                continue\n            if year and str(year) != item['data'].get('date', ''):\n                continue\n            \n            results.append({\n                \"title\": item['data'].get('title', \"\"),\n                \"creators\": [creator['lastName'] for creator in item['data'].get('creators', [])],\n                \"year\": item['data'].get('date', \"\"),\n                \"DOI\": item['data'].get('DOI', \"\")\n            })\n            \n        return json.dumps({\n            \"status\": \"success\",\n            \"data\": results\n        }, ensure_ascii=False)\n    except Exception as e:\n        return json.dumps({\n            \"status\": \"error\",\n            \"message\": str(e)\n        }, ensure_ascii=False)"
}