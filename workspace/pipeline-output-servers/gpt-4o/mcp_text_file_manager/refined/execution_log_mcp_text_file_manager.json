[
  {
    "step": {
      "step_id": "create_test_file",
      "tool_name": "create_text_file",
      "parameters": {
        "file_path": "$temp_dir/test_file.txt",
        "content": "Line 1\nLine 2\nLine 3\nLine 4\nLine 5"
      },
      "description": "Happy path: Create a test file with known content for subsequent operations."
    },
    "substituted_params": {
      "file_path": "$temp_dir/test_file.txt",
      "content": "Line 1\nLine 2\nLine 3\nLine 4\nLine 5"
    },
    "result": {
      "status": "success",
      "result": "{\"message\": \"File created successfully.\"}"
    }
  },
  {
    "step": {
      "step_id": "read_full_content",
      "tool_name": "get_text_file_contents",
      "parameters": {
        "file_path": "$temp_dir/test_file.txt"
      },
      "description": "Happy path: Read the full content of the created file and verify it matches expectations."
    },
    "substituted_params": {
      "file_path": "$temp_dir/test_file.txt"
    },
    "result": {
      "status": "success",
      "result": "{\"content\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5\", \"hash\": \"5a3123f69559abebb36dfddb1622e70ed129cd83bb7c7894413ee90a036bf0fb\"}"
    }
  },
  {
    "step": {
      "step_id": "read_partial_content",
      "tool_name": "get_text_file_contents",
      "parameters": {
        "file_path": "$temp_dir/test_file.txt",
        "start_line": 2,
        "end_line": 4
      },
      "description": "Edge case: Read partial content from line 2 to line 4."
    },
    "substituted_params": {
      "file_path": "$temp_dir/test_file.txt",
      "start_line": 2,
      "end_line": 4
    },
    "result": {
      "status": "success",
      "result": "{\"content\": \"Line 2\\nLine 3\\nLine 4\\n\", \"hash\": \"5a3123f69559abebb36dfddb1622e70ed129cd83bb7c7894413ee90a036bf0fb\"}"
    }
  },
  {
    "step": {
      "step_id": "append_content",
      "tool_name": "append_text_file_contents",
      "parameters": {
        "file_path": "$temp_dir/test_file.txt",
        "content": "Appended Line"
      },
      "description": "Happy path: Append new content to the file."
    },
    "substituted_params": {
      "file_path": "$temp_dir/test_file.txt",
      "content": "Appended Line"
    },
    "result": {
      "status": "success",
      "result": "{\"message\": \"Content appended successfully.\"}"
    }
  },
  {
    "step": {
      "step_id": "verify_appended_content",
      "tool_name": "get_text_file_contents",
      "parameters": {
        "file_path": "$temp_dir/test_file.txt"
      },
      "description": "Dependent call: Confirm that the appended content is present in the updated file."
    },
    "substituted_params": {
      "file_path": "$temp_dir/test_file.txt"
    },
    "result": {
      "status": "success",
      "result": "{\"content\": \"Line 1\\nLine 2\\nLine 3\\nLine 4\\nLine 5Appended Line\\n\", \"hash\": \"e5c82e42d89b9b43ebb4c8a04e0253836a78777d4c969e03bf67f3db526122d9\"}"
    }
  },
  {
    "step": {
      "step_id": "delete_lines",
      "tool_name": "delete_text_file_contents",
      "parameters": {
        "file_path": "$temp_dir/test_file.txt",
        "start_line": 2,
        "end_line": 3
      },
      "description": "Edge case: Delete lines 2 through 3 and verify they are removed."
    },
    "substituted_params": {
      "file_path": "$temp_dir/test_file.txt",
      "start_line": 2,
      "end_line": 3
    },
    "result": {
      "status": "success",
      "result": "{\"message\": \"Specified lines deleted successfully.\"}"
    }
  },
  {
    "step": {
      "step_id": "verify_deleted_content",
      "tool_name": "get_text_file_contents",
      "parameters": {
        "file_path": "$temp_dir/test_file.txt"
      },
      "description": "Dependent call: Confirm that the deleted lines are no longer present."
    },
    "substituted_params": {
      "file_path": "$temp_dir/test_file.txt"
    },
    "result": {
      "status": "success",
      "result": "{\"content\": \"Line 1\\nLine 4\\nLine 5Appended Line\\n\", \"hash\": \"3cde3b9df3f56883305f2ba31dfc6c935740936323d9ea8055f2a08c0a3a7451\"}"
    }
  },
  {
    "step": {
      "step_id": "insert_content",
      "tool_name": "insert_text_file_contents",
      "parameters": {
        "file_path": "$temp_dir/test_file.txt",
        "line_number": 2,
        "content": "Inserted Line"
      },
      "description": "Happy path: Insert a new line at position 2."
    },
    "substituted_params": {
      "file_path": "$temp_dir/test_file.txt",
      "line_number": 2,
      "content": "Inserted Line"
    },
    "result": {
      "status": "success",
      "result": "{\"message\": \"Content inserted successfully.\"}"
    }
  },
  {
    "step": {
      "step_id": "verify_inserted_content",
      "tool_name": "get_text_file_contents",
      "parameters": {
        "file_path": "$temp_dir/test_file.txt"
      },
      "description": "Dependent call: Verify that the inserted line appears at the correct position."
    },
    "substituted_params": {
      "file_path": "$temp_dir/test_file.txt"
    },
    "result": {
      "status": "success",
      "result": "{\"content\": \"Line 1\\nInserted Line\\nLine 4\\nLine 5Appended Line\\n\", \"hash\": \"2dcf2220c063118da649acb8e45f7413439d8dc29be2a2d3825bdadc59e15f3b\"}"
    }
  },
  {
    "step": {
      "step_id": "get_hash_before_patch",
      "tool_name": "get_text_file_contents",
      "parameters": {
        "file_path": "$temp_dir/test_file.txt"
      },
      "description": "Retrieve current hash of the file before applying a patch."
    },
    "substituted_params": {
      "file_path": "$temp_dir/test_file.txt"
    },
    "result": {
      "status": "success",
      "result": "{\"content\": \"Line 1\\nInserted Line\\nLine 4\\nLine 5Appended Line\\n\", \"hash\": \"2dcf2220c063118da649acb8e45f7413439d8dc29be2a2d3825bdadc59e15f3b\"}"
    }
  },
  {
    "step": {
      "step_id": "apply_valid_patch",
      "tool_name": "patch_text_file_contents",
      "parameters": {
        "file_path": "$temp_dir/test_file.txt",
        "patch_data": [
          {
            "start_line": 2,
            "end_line": 2,
            "new_content": "Patched Line"
          }
        ],
        "expected_hash": "$outputs.get_hash_before_patch.hash"
      },
      "description": "Happy path: Apply a valid patch using the correct file hash."
    },
    "substituted_params": {
      "file_path": "$temp_dir/test_file.txt",
      "patch_data": [
        {
          "start_line": 2,
          "end_line": 2,
          "new_content": "Patched Line"
        }
      ],
      "expected_hash": "2dcf2220c063118da649acb8e45f7413439d8dc29be2a2d3825bdadc59e15f3b"
    },
    "result": {
      "status": "success",
      "result": "{\"message\": \"Patch applied successfully.\", \"new_hash\": \"862e29cff2dfbafcbe2afc5d684c68149f570d56ba05f7024f69456a68e53332\"}"
    }
  },
  {
    "step": {
      "step_id": "verify_patched_content",
      "tool_name": "get_text_file_contents",
      "parameters": {
        "file_path": "$temp_dir/test_file.txt"
      },
      "description": "Dependent call: Ensure the patched content replaced the intended line."
    },
    "substituted_params": {
      "file_path": "$temp_dir/test_file.txt"
    },
    "result": {
      "status": "success",
      "result": "{\"content\": \"Line 1\\nPatched Line\\nLine 4\\nLine 5Appended Line\\n\", \"hash\": \"862e29cff2dfbafcbe2afc5d684c68149f570d56ba05f7024f69456a68e53332\"}"
    }
  },
  {
    "step": {
      "step_id": "apply_invalid_patch",
      "tool_name": "patch_text_file_contents",
      "parameters": {
        "file_path": "$temp_dir/test_file.txt",
        "patch_data": [
          {
            "start_line": 2,
            "end_line": 2,
            "new_content": "Another Patch Attempt"
          }
        ],
        "expected_hash": "invalid_hash_for_testing"
      },
      "description": "Edge case: Attempt to apply a patch with an incorrect hash, expecting failure."
    },
    "substituted_params": {
      "file_path": "$temp_dir/test_file.txt",
      "patch_data": [
        {
          "start_line": 2,
          "end_line": 2,
          "new_content": "Another Patch Attempt"
        }
      ],
      "expected_hash": "invalid_hash_for_testing"
    },
    "result": {
      "status": "error",
      "result": "{\"error\": \"File hash mismatch. Patch aborted. Current hash: 862e29cff2dfbafcbe2afc5d684c68149f570d56ba05f7024f69456a68e53332\"}"
    }
  },
  {
    "step": {
      "step_id": "read_nonexistent_file",
      "tool_name": "get_text_file_contents",
      "parameters": {
        "file_path": "$temp_dir/nonexistent_file.txt"
      },
      "description": "Edge case: Try reading a non-existent file to ensure proper error handling."
    },
    "substituted_params": {
      "file_path": "$temp_dir/nonexistent_file.txt"
    },
    "result": {
      "status": "error",
      "result": "{\"error\": \"File does not exist: $temp_dir/nonexistent_file.txt\"}"
    }
  },
  {
    "step": {
      "step_id": "delete_from_nonexistent_file",
      "tool_name": "delete_text_file_contents",
      "parameters": {
        "file_path": "$temp_dir/nonexistent_file.txt",
        "start_line": 1,
        "end_line": 3
      },
      "description": "Edge case: Attempt deletion from a non-existent file to check error response."
    },
    "substituted_params": {
      "file_path": "$temp_dir/nonexistent_file.txt",
      "start_line": 1,
      "end_line": 3
    },
    "result": {
      "status": "error",
      "result": "{\"error\": \"File does not exist: $temp_dir/nonexistent_file.txt\"}"
    }
  },
  {
    "step": {
      "step_id": "insert_into_nonexistent_file",
      "tool_name": "insert_text_file_contents",
      "parameters": {
        "file_path": "$temp_dir/nonexistent_file.txt",
        "line_number": 1,
        "content": "Content to insert"
      },
      "description": "Edge case: Try inserting into a non-existent file to validate error handling."
    },
    "substituted_params": {
      "file_path": "$temp_dir/nonexistent_file.txt",
      "line_number": 1,
      "content": "Content to insert"
    },
    "result": {
      "status": "error",
      "result": "{\"error\": \"[Errno 2] No such file or directory: 'C:\\\\\\\\Users\\\\\\\\15211\\\\\\\\AppData\\\\\\\\Local\\\\\\\\Temp/nonexistent_file.txt'\"}"
    }
  },
  {
    "step": {
      "step_id": "patch_nonexistent_file",
      "tool_name": "patch_text_file_contents",
      "parameters": {
        "file_path": "$temp_dir/nonexistent_file.txt",
        "patch_data": [
          {
            "start_line": 1,
            "end_line": 1,
            "new_content": "Patch attempt"
          }
        ],
        "expected_hash": "abc123"
      },
      "description": "Edge case: Attempt patching a non-existent file to confirm error behavior."
    },
    "substituted_params": {
      "file_path": "$temp_dir/nonexistent_file.txt",
      "patch_data": [
        {
          "start_line": 1,
          "end_line": 1,
          "new_content": "Patch attempt"
        }
      ],
      "expected_hash": "abc123"
    },
    "result": {
      "status": "error",
      "result": "{\"error\": \"File does not exist: $temp_dir/nonexistent_file.txt\"}"
    }
  }
]