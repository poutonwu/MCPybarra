[
  {
    "step": {
      "step_id": "create_test_file",
      "tool_name": "create_text_file",
      "parameters": {
        "file_path": "$temp_dir/test_file.txt",
        "content": "Line 1\nLine 2\nLine 3\nLine 4\nLine 5"
      },
      "description": "Happy path: Create a test file with known content for subsequent tests."
    },
    "substituted_params": {
      "file_path": "$temp_dir/test_file.txt",
      "content": "Line 1\nLine 2\nLine 3\nLine 4\nLine 5"
    },
    "result": {
      "status": "error",
      "result": "{\"error\": \"[Errno 2] No such file or directory: '$temp_dir/test_file.txt'\"}"
    }
  },
  {
    "step": {
      "step_id": "read_full_file",
      "tool_name": "get_text_file_contents",
      "parameters": {
        "file_path": "$temp_dir/test_file.txt"
      },
      "description": "Happy path: Read the entire content of the created file to verify creation and basic read functionality."
    },
    "substituted_params": {
      "file_path": "$temp_dir/test_file.txt"
    },
    "result": {
      "status": "error",
      "result": "{\"error\": \"[Errno 2] No such file or directory: '$temp_dir/test_file.txt'\"}"
    }
  },
  {
    "step": {
      "step_id": "read_line_range",
      "tool_name": "get_text_file_contents",
      "parameters": {
        "file_path": "$temp_dir/test_file.txt",
        "start_line": 2,
        "end_line": 4
      },
      "description": "Happy path: Read a specific line range from the file to test partial reading functionality."
    },
    "substituted_params": {
      "file_path": "$temp_dir/test_file.txt",
      "start_line": 2,
      "end_line": 4
    },
    "result": {
      "status": "error",
      "result": "{\"error\": \"[Errno 2] No such file or directory: '$temp_dir/test_file.txt'\"}"
    }
  },
  {
    "step": {
      "step_id": "append_content",
      "tool_name": "append_text_file_contents",
      "parameters": {
        "file_path": "$temp_dir/test_file.txt",
        "content": "\nAppended Line"
      },
      "description": "Happy path: Append new content to the end of the file and prepare for future read/patch operations."
    },
    "substituted_params": {
      "file_path": "$temp_dir/test_file.txt",
      "content": "\nAppended Line"
    },
    "result": {
      "status": "error",
      "result": "{\"error\": \"[Errno 2] No such file or directory: '$temp_dir/test_file.txt'\"}"
    }
  },
  {
    "step": {
      "step_id": "read_after_append",
      "tool_name": "get_text_file_contents",
      "parameters": {
        "file_path": "$temp_dir/test_file.txt"
      },
      "description": "Dependent call: Verify that appending worked by reading the full file again."
    },
    "substituted_params": {
      "file_path": "$temp_dir/test_file.txt"
    },
    "result": {
      "status": "error",
      "result": "{\"error\": \"[Errno 2] No such file or directory: '$temp_dir/test_file.txt'\"}"
    }
  },
  {
    "step": {
      "step_id": "insert_content",
      "tool_name": "insert_text_file_contents",
      "parameters": {
        "file_path": "$temp_dir/test_file.txt",
        "line_number": 3,
        "content": "Inserted Line"
      },
      "description": "Happy path: Insert content at a specific position and prepare for patching or deletion."
    },
    "substituted_params": {
      "file_path": "$temp_dir/test_file.txt",
      "line_number": 3,
      "content": "Inserted Line"
    },
    "result": {
      "status": "error",
      "result": "{\"error\": \"[Errno 2] No such file or directory: '$temp_dir/test_file.txt'\"}"
    }
  },
  {
    "step": {
      "step_id": "read_after_insert",
      "tool_name": "get_text_file_contents",
      "parameters": {
        "file_path": "$temp_dir/test_file.txt"
      },
      "description": "Dependent call: Verify that insertion worked by reading the full file again."
    },
    "substituted_params": {
      "file_path": "$temp_dir/test_file.txt"
    },
    "result": {
      "status": "error",
      "result": "{\"error\": \"[Errno 2] No such file or directory: '$temp_dir/test_file.txt'\"}"
    }
  },
  {
    "step": {
      "step_id": "delete_lines",
      "tool_name": "delete_text_file_contents",
      "parameters": {
        "file_path": "$temp_dir/test_file.txt",
        "start_line": 2,
        "end_line": 4
      },
      "description": "Happy path: Delete a range of lines to test deletion logic and prepare for concurrency testing."
    },
    "substituted_params": {
      "file_path": "$temp_dir/test_file.txt",
      "start_line": 2,
      "end_line": 4
    },
    "result": {
      "status": "error",
      "result": "{\"error\": \"[Errno 2] No such file or directory: '$temp_dir/test_file.txt'\"}"
    }
  },
  {
    "step": {
      "step_id": "read_after_delete",
      "tool_name": "get_text_file_contents",
      "parameters": {
        "file_path": "$temp_dir/test_file.txt"
      },
      "description": "Dependent call: Confirm deletion was successful by reading the updated file."
    },
    "substituted_params": {
      "file_path": "$temp_dir/test_file.txt"
    },
    "result": {
      "status": "error",
      "result": "{\"error\": \"[Errno 2] No such file or directory: '$temp_dir/test_file.txt'\"}"
    }
  },
  {
    "step": {
      "step_id": "get_hash_for_patch",
      "tool_name": "get_text_file_contents",
      "parameters": {
        "file_path": "$temp_dir/test_file.txt"
      },
      "description": "Prepare hash for patch operation by reading current file hash."
    },
    "substituted_params": {
      "file_path": "$temp_dir/test_file.txt"
    },
    "result": {
      "status": "error",
      "result": "{\"error\": \"[Errno 2] No such file or directory: '$temp_dir/test_file.txt'\"}"
    }
  },
  {
    "step": {
      "step_id": "patch_content",
      "tool_name": "patch_text_file_contents",
      "parameters": {
        "file_path": "$temp_dir/test_file.txt",
        "patch_data": [
          {
            "start_line": 2,
            "end_line": 3,
            "new_content": "Patched Content"
          }
        ],
        "expected_hash": "$outputs.get_hash_for_patch.hash"
      },
      "description": "Happy path: Apply a patch using correct hash to ensure concurrent edit detection works properly."
    },
    "substituted_params": {
      "file_path": "$temp_dir/test_file.txt",
      "patch_data": [
        {
          "start_line": 2,
          "end_line": 3,
          "new_content": "Patched Content"
        }
      ],
      "expected_hash": null
    },
    "result": {
      "status": "error",
      "result": "A required parameter resolved to None, likely due to a failure in a dependency. Failed placeholder: '$outputs.get_hash_for_patch.hash'"
    }
  },
  {
    "step": {
      "step_id": "read_after_patch",
      "tool_name": "get_text_file_contents",
      "parameters": {
        "file_path": "$temp_dir/test_file.txt"
      },
      "description": "Dependent call: Verify patch was applied correctly by reading the final content."
    },
    "substituted_params": {
      "file_path": "$temp_dir/test_file.txt"
    },
    "result": {
      "status": "error",
      "result": "{\"error\": \"[Errno 2] No such file or directory: '$temp_dir/test_file.txt'\"}"
    }
  },
  {
    "step": {
      "step_id": "concurrent_edit_detection",
      "tool_name": "patch_text_file_contents",
      "parameters": {
        "file_path": "$temp_dir/test_file.txt",
        "patch_data": [
          {
            "start_line": 1,
            "end_line": 1,
            "new_content": "Conflict Attempt"
          }
        ],
        "expected_hash": "incorrect_hash_value"
      },
      "description": "Edge case: Test concurrency control by providing an incorrect hash, expecting patch rejection."
    },
    "substituted_params": {
      "file_path": "$temp_dir/test_file.txt",
      "patch_data": [
        {
          "start_line": 1,
          "end_line": 1,
          "new_content": "Conflict Attempt"
        }
      ],
      "expected_hash": "incorrect_hash_value"
    },
    "result": {
      "status": "error",
      "result": "{\"error\": \"[Errno 2] No such file or directory: '$temp_dir/test_file.txt'\"}"
    }
  },
  {
    "step": {
      "step_id": "read_invalid_file",
      "tool_name": "get_text_file_contents",
      "parameters": {
        "file_path": "$temp_dir/nonexistent_file.txt"
      },
      "description": "Edge case: Attempt to read a non-existent file to test error handling."
    },
    "substituted_params": {
      "file_path": "$temp_dir/nonexistent_file.txt"
    },
    "result": {
      "status": "error",
      "result": "{\"error\": \"[Errno 2] No such file or directory: '$temp_dir/nonexistent_file.txt'\"}"
    }
  },
  {
    "step": {
      "step_id": "delete_invalid_lines",
      "tool_name": "delete_text_file_contents",
      "parameters": {
        "file_path": "$temp_dir/test_file.txt",
        "start_line": 999,
        "end_line": 1000
      },
      "description": "Edge case: Attempt to delete out-of-range lines to test boundary condition handling."
    },
    "substituted_params": {
      "file_path": "$temp_dir/test_file.txt",
      "start_line": 999,
      "end_line": 1000
    },
    "result": {
      "status": "error",
      "result": "{\"error\": \"[Errno 2] No such file or directory: '$temp_dir/test_file.txt'\"}"
    }
  },
  {
    "step": {
      "step_id": "insert_at_invalid_position",
      "tool_name": "insert_text_file_contents",
      "parameters": {
        "file_path": "$temp_dir/test_file.txt",
        "line_number": 999,
        "content": "Out of bounds Insert"
      },
      "description": "Edge case: Attempt to insert at a line number beyond file length to test robustness."
    },
    "substituted_params": {
      "file_path": "$temp_dir/test_file.txt",
      "line_number": 999,
      "content": "Out of bounds Insert"
    },
    "result": {
      "status": "error",
      "result": "{\"error\": \"[Errno 2] No such file or directory: '$temp_dir/test_file.txt'\"}"
    }
  }
]