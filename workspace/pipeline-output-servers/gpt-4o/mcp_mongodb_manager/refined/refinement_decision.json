{
  "decision": "NEEDS_REFINEMENT",
  "reason": "Implemented two critical fixes: 1) Improved MongoDB connection handling with better error messages and validation, 2) Added proper validation and documentation for collection names. However, further testing is needed to verify if these changes resolve the connectivity issues, as the root cause might be related to the MongoDB server not running rather than just code issues.",
  "refined_code": "import os\nimport sys\nimport json\nimport re\nfrom pymongo import MongoClient\nfrom mcp.server.fastmcp import FastMCP\n\n# Initialize FastMCP server\nmcp = FastMCP(\"mcp_mongodb_manager\")\n\n# MongoDB connection setup\nMONGO_URI = os.environ.get(\"MONGO_URI\", \"mongodb://localhost:27017\")\ntry:\n    client = MongoClient(MONGO_URI, serverSelectionTimeoutMS=5000)\n    # Test connection immediately\n    client.admin.command('ping')\n    print(\"Successfully connected to MongoDB\")\nexcept Exception as e:\n    print(f\"Error connecting to MongoDB: {str(e)}\")\n    # Don't continue if we can't connect\n    raise RuntimeError(\"MongoDB connection failed - check if MongoDB is running\") from e\n\ndef validate_collection_name(collection_name: str):\n    \"\"\"\n    Validate that a collection name is valid according to MongoDB rules.\n    \n    Args:\n        collection_name (str): The name of the collection to validate.\n        \n    Raises:\n        ValueError: If the collection name is invalid.\n    \"\"\"\n    if not collection_name:\n        raise ValueError(\"Collection name cannot be empty\")\n    if len(collection_name) > 127:\n        raise ValueError(\"Collection name cannot exceed 127 characters\")\n    if re.search(r'[\\\\/\\.\\\"\\*\\?]', collection_name):\n        raise ValueError(f\"Invalid characters in collection name: '{collection_name}'. \"\n                         \"Collection names cannot contain slashes, dots, quotes, or special characters\")\n\n@mcp.tool()\ndef mcp_list_databases():\n    \"\"\"\n    Lists all available databases in the MongoDB server.\n\n    Returns:\n        str: A JSON string containing a list of database names.\n\n    Example:\n        >>> mcp_list_databases()\n        '[\\\"admin\\\", \\\"local\\\", \\\"my_database\\\"]'\n    \"\"\"\n    try:\n        databases = client.list_database_names()\n        return json.dumps(databases)\n    except Exception as e:\n        return json.dumps({\"error\": f\"Failed to list databases: {str(e)}. \"\n                          \"Check if MongoDB service is running and accessible.\"})\n\n@mcp.tool()\ndef mcp_list_collections(database_name: str):\n    \"\"\"\n    Lists all collections within a specified database.\n\n    Args:\n        database_name (str): The name of the database to query.\n\n    Returns:\n        str: A JSON string containing a list of collection names.\n\n    Example:\n        >>> mcp_list_collections(\"my_database\")\n        '[\\\"users\\\", \\\"orders\\\", \\\"products\\\"]'\n    \"\"\"\n    try:\n        db = client[database_name]\n        collections = db.list_collection_names()\n        return json.dumps(collections)\n    except Exception as e:\n        return json.dumps({\"error\": f\"Failed to list collections: {str(e)}. \"\n                          \"Check if database exists and MongoDB service is running.\"})\n\n@mcp.tool()\ndef mcp_insert_document(database_name: str, collection_name: str, document: dict):\n    \"\"\"\n    Inserts a new document into a specified MongoDB database and collection.\n\n    Args:\n        database_name (str): The name of the database.\n        collection_name (str): The name of the collection.\n        document (dict): The document to insert.\n\n    Returns:\n        str: A JSON string containing the ID of the inserted document.\n\n    Raises:\n        ValueError: If collection name is invalid\n\n    Example:\n        >>> mcp_insert_document(\"my_database\", \"users\", {\"name\": \"John\", \"age\": 30})\n        '{\"_id\": \"63a1b2c3d4e5f67890\"}'\n    \"\"\"\n    try:\n        validate_collection_name(collection_name)\n        db = client[database_name]\n        collection = db[collection_name]\n        result = collection.insert_one(document)\n        return json.dumps({\"_id\": str(result.inserted_id)})\n    except Exception as e:\n        return json.dumps({\"error\": f\"Insert operation failed: {str(e)}. \"\n                          \"Check collection name validity and MongoDB connection.\"})\n\n@mcp.tool()\ndef mcp_find_documents(database_name: str, collection_name: str, filter: dict = None, projection: dict = None, limit: int = 0):\n    \"\"\"\n    Queries documents in a specified MongoDB database and collection, with support for filtering, projection, and limiting the number of results.\n\n    Args:\n        database_name (str): The name of the database.\n        collection_name (str): The name of the collection.\n        filter (dict, optional): The filter criteria for the query.\n        projection (dict, optional): The fields to include or exclude.\n        limit (int, optional): The maximum number of documents to return.\n\n    Returns:\n        str: A JSON string containing a list of documents matching the query criteria.\n\n    Raises:\n        ValueError: If collection name is invalid\n\n    Example:\n        >>> mcp_find_documents(\"my_database\", \"users\", {\"age\": {\"$gte\": 25}}, {\"name\": 1, \"_id\": 0}, 10)\n        '[{\"name\": \"John\"}, {\"name\": \"Jane\"}]'\n    \"\"\"\n    try:\n        validate_collection_name(collection_name)\n        db = client[database_name]\n        collection = db[collection_name]\n        cursor = collection.find(filter or {}, projection).limit(limit)\n        documents = list(cursor)\n        return json.dumps(documents, default=str)\n    except Exception as e:\n        return json.dumps({\"error\": f\"Find operation failed: {str(e)}. \"\n                          \"Check collection name validity and MongoDB connection.\"})\n\n@mcp.tool()\ndef mcp_update_document(database_name: str, collection_name: str, filter: dict, update: dict, multi: bool = False):\n    \"\"\"\n    Updates documents in a specified MongoDB database and collection, with support for single or multiple document updates.\n\n    Args:\n        database_name (str): The name of the database.\n        collection_name (str): The name of the collection.\n        filter (dict): The filter criteria to match documents for updating.\n        update (dict): The update operations to apply.\n        multi (bool, optional): If true, updates all matching documents; otherwise, updates only the first match.\n\n    Returns:\n        str: A JSON string containing the count of documents updated.\n\n    Raises:\n        ValueError: If collection name is invalid\n\n    Example:\n        >>> mcp_update_document(\"my_database\", \"users\", {\"name\": \"John\"}, {\"$set\": {\"age\": 35}}, True)\n        '{\"updated_count\": 1}'\n    \"\"\"\n    try:\n        validate_collection_name(collection_name)\n        db = client[database_name]\n        collection = db[collection_name]\n        if multi:\n            result = collection.update_many(filter, update)\n        else:\n            result = collection.update_one(filter, update)\n        return json.dumps({\"updated_count\": result.modified_count})\n    except Exception as e:\n        return json.dumps({\"error\": f\"Update operation failed: {str(e)}. \"\n                          \"Check collection name validity and MongoDB connection.\"})\n\n@mcp.tool()\ndef mcp_delete_document(database_name: str, collection_name: str, filter: dict, multi: bool = False):\n    \"\"\"\n    Deletes documents in a specified MongoDB database and collection, with support for single or multiple document deletions.\n\n    Args:\n        database_name (str): The name of the database.\n        collection_name (str): The name of the collection.\n        filter (dict): The filter criteria to match documents for deletion.\n        multi (bool, optional): If true, deletes all matching documents; otherwise, deletes only the first match.\n\n    Returns:\n        str: A JSON string containing the count of documents deleted.\n\n    Raises:\n        ValueError: If collection name is invalid\n\n    Example:\n        >>> mcp_delete_document(\"my_database\", \"users\", {\"age\": {\"$lt\": 20}}, True)\n        '{\"deleted_count\": 2}'\n    \"\"\"\n    try:\n        validate_collection_name(collection_name)\n        db = client[database_name]\n        collection = db[collection_name]\n        if multi:\n            result = collection.delete_many(filter)\n        else:\n            result = collection.delete_one(filter)\n        return json.dumps({\"deleted_count\": result.deleted_count})\n    except Exception as e:\n        return json.dumps({\"error\": f\"Delete operation failed: {str(e)}. \"\n                          \"Check collection name validity and MongoDB connection.\"})\n\nif __name__ == \"__main__\":\n    # Reconfigure stdout to handle UTF-8 encoding\n    sys.stdout.reconfigure(encoding=\"utf-8\")\n    # Run the MCP server\n    mcp.run()"
}