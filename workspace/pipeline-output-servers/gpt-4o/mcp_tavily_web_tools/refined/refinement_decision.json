{
  "decision": "NEEDS_REFINEMENT",
  "reason": "Based on the test report and Tavily API research, several key fixes were implemented: (1) Added proper validation for parameters like query, search_depth, time_range; (2) Fixed schema mismatches by ensuring correct parameter handling; (3) Improved error handling to catch issues before reaching the API layer. However, further refinement is needed for dependent operation chaining and complete alignment with Tavily's API expectations.",
  "refined_code": "import sys\nimport httpx\nfrom mcp.server.fastmcp import FastMCP\nfrom pydantic import BaseModel, ValidationError, validator\nimport os\nimport json\n\n# Initialize FastMCP Server\nmcp = FastMCP(\"mcp_tavily_web_tools\")\n\n# Setup Proxy (optional)\nos.environ['HTTP_PROXY'] = 'http://127.0.0.1:7890'\nos.environ['HTTPS_PROXY'] = 'http://127.0.0.1:7890'\n\n# Load Tavily API Key from environment variables\nTAVILY_API_KEY=\"REDACTED_SECRET\"\nif not TAVILY_API_KEY:\n    raise ValueError(\"TAVILY_API_KEY environment variable is not set.\")\n\n# Base Model for Validation\nclass TavilyRequest(BaseModel):\n    query: str\n    search_depth: str = \"basic\"\n    include_domains: list[str] = []\n    exclude_domains: list[str] = []\n    max_results: int = 5\n    time_range: int = None\n    include_sources: list[str] = []\n    exclude_sources: list[str] = []\n\n    @validator('search_depth')\n    def validate_search_depth(cls, v):\n        if v not in [\"basic\", \"advanced\"]:\n            raise ValueError(\"search_depth must be either 'basic' or 'advanced'\")\n        return v\n\n    @validator('time_range')\n    def validate_time_range(cls, v):\n        if v is not None:\n            if v < 0:\n                raise ValueError(\"time_range cannot be negative\")\n            if v > 365:\n                raise ValueError(\"time_range cannot exceed 365 days\")\n        return v\n\n    @validator('max_results')\n    def validate_max_results(cls, v):\n        if v <= 0:\n            raise ValueError(\"max_results must be a positive integer\")\n        if v > 10:\n            raise ValueError(\"max_results cannot exceed 10\")\n        return v\n\n@mcp.tool()\nasync def tavily_web_search(query: str, search_depth: str = \"basic\", include_domains: list[str] = [], exclude_domains: list[str] = [], max_results: int = 5) -> str:\n    \"\"\"\n    Conduct a comprehensive web search using the Tavily API.\n\n    Args:\n        query (str): The search query for retrieving information.\n        search_depth (str, optional): The depth of the search, either 'basic' or 'advanced'. Defaults to 'basic'.\n        include_domains (list of str, optional): Domains to include in the search results.\n        exclude_domains (list of str, optional): Domains to exclude from the search results.\n        max_results (int, optional): Maximum number of search results to return. Defaults to 5.\n\n    Returns:\n        str: A JSON string containing the search results.\n\n    Raises:\n        ValidationError: If input parameters are invalid.\n        httpx.HTTPStatusError: If the API request fails.\n\n    Example:\n        tavily_web_search(query=\"Python documentation\", search_depth=\"basic\", max_results=3)\n    \"\"\"\n    try:\n        # Validate input\n        validated_data = TavilyRequest(\n            query=query,\n            search_depth=search_depth,\n            include_domains=include_domains,\n            exclude_domains=exclude_domains,\n            max_results=max_results\n        )\n\n        headers = {\n            \"Authorization\": f\"Bearer {TAVILY_API_KEY}\",\n            \"Content-Type\": \"application/json\"\n        }\n\n        async with httpx.AsyncClient() as client:\n            response = await client.post(\n                \"https://api.tavily.com/search\",\n                json={\n                    \"query\": validated_data.query,\n                    \"search_depth\": validated_data.search_depth,\n                    \"include_domains\": validated_data.include_domains,\n                    \"exclude_domains\": validated_data.exclude_domains,\n                    \"max_results\": validated_data.max_results\n                },\n                headers=headers\n            )\n            response.raise_for_status()\n            return json.dumps(response.json())\n\n    except ValidationError as e:\n        return json.dumps({\"error\": \"Validation Error\", \"details\": str(e)})\n\n    except httpx.HTTPStatusError as e:\n        return json.dumps({\"error\": \"HTTP Request Failed\", \"details\": str(e)})\n\n@mcp.tool()\nasync def tavily_answer_search(query: str, search_depth: str = \"advanced\", max_results: int = 5) -> str:\n    \"\"\"\n    Retrieve a direct answer to a query using the Tavily API.\n\n    Args:\n        query (str): The question or query to be answered.\n        search_depth (str, optional): The depth of the search, either 'basic' or 'advanced'. Defaults to 'advanced'.\n        max_results (int, optional): Maximum number of results to return. Defaults to 5.\n\n    Returns:\n        str: A JSON string containing the answer and supporting evidence.\n\n    Raises:\n        ValidationError: If input parameters are invalid.\n        httpx.HTTPStatusError: If the API request fails.\n\n    Example:\n        tavily_answer_search(query=\"What is Python?\", max_results=2)\n    \"\"\"\n    try:\n        # Validate input\n        validated_data = TavilyRequest(\n            query=query,\n            search_depth=search_depth,\n            max_results=max_results\n        )\n\n        headers = {\n            \"Authorization\": f\"Bearer {TAVILY_API_KEY}\",\n            \"Content-Type\": \"application/json\"\n        }\n\n        async with httpx.AsyncClient() as client:\n            response = await client.post(\n                \"https://api.tavily.com/search\",\n                json={\n                    \"query\": validated_data.query,\n                    \"search_depth\": validated_data.search_depth,\n                    \"max_results\": validated_data.max_results\n                },\n                headers=headers\n            )\n            response.raise_for_status()\n            return json.dumps(response.json())\n\n    except ValidationError as e:\n        return json.dumps({\"error\": \"Validation Error\", \"details\": str(e)})\n\n    except httpx.HTTPStatusError as e:\n        return json.dumps({\"error\": \"HTTP Request Failed\", \"details\": str(e)})\n\n@mcp.tool()\nasync def tavily_news_search(query: str, time_range: int = 30, include_sources: list[str] = [], exclude_sources: list[str] = [], max_results: int = 5) -> str:\n    \"\"\"\n    Search for recent news articles using the Tavily API.\n\n    Args:\n        query (str): The search query for retrieving news.\n        time_range (int, optional): The number of days to look back for news articles (maximum 365 days). Defaults to 30.\n        include_sources (list of str, optional): News sources to include in the search results.\n        exclude_sources (list of str, optional): News sources to exclude from the search results.\n        max_results (int, optional): Maximum number of news articles to return. Defaults to 5.\n\n    Returns:\n        str: A JSON string containing the news articles.\n\n    Raises:\n        ValidationError: If input parameters are invalid.\n        httpx.HTTPStatusError: If the API request fails.\n\n    Example:\n        tavily_news_search(query=\"AI advancements\", time_range=7, max_results=3)\n    \"\"\"\n    try:\n        # Validate input\n        validated_data = TavilyRequest(\n            query=query,\n            time_range=time_range,\n            include_sources=include_sources,\n            exclude_sources=exclude_sources,\n            max_results=max_results\n        )\n\n        headers = {\n            \"Authorization\": f\"Bearer {TAVILY_API_KEY}\",\n            \"Content-Type\": \"application/json\"\n        }\n\n        async with httpx.AsyncClient() as client:\n            response = await client.post(\n                \"https://api.tavily.com/search\",\n                json={\n                    \"query\": validated_data.query,\n                    \"time_range\": validated_data.time_range,\n                    \"include_sources\": validated_data.include_sources,\n                    \"exclude_sources\": validated_data.exclude_sources,\n                    \"max_results\": validated_data.max_results\n                },\n                headers=headers\n            )\n            response.raise_for_status()\n            return json.dumps(response.json())\n\n    except ValidationError as e:\n        return json.dumps({\"error\": \"Validation Error\", \"details\": str(e)})\n\n    except httpx.HTTPStatusError as e:\n        return json.dumps({\"error\": \"HTTP Request Failed\", \"details\": str(e)})\n\nif __name__ == \"__main__\":\n    sys.stdout.reconfigure(encoding='utf-8')\n    mcp.run()"
}