[
  {
    "step": {
      "step_id": "init_repo",
      "tool_name": "git_init",
      "parameters": {
        "repo_path": "/tmp/test_repo"
      },
      "description": "Happy path: Initialize a new Git repository at /tmp/test_repo."
    },
    "substituted_params": {
      "repo_path": "/tmp/test_repo"
    },
    "result": {
      "status": "success",
      "result": "{\"status\": \"success\", \"message\": \"Repository initialized at D:\\\\tmp\\\\test_repo\"}"
    }
  },
  {
    "step": {
      "step_id": "check_status_after_init",
      "tool_name": "git_status",
      "parameters": {
        "repo_path": "/tmp/test_repo"
      },
      "description": "Dependent call: Check the status of the newly initialized repository to confirm it's empty."
    },
    "substituted_params": {
      "repo_path": "/tmp/test_repo"
    },
    "result": {
      "status": "success",
      "result": "{\"status\": \"success\", \"data\": \"On branch master\\n\\nNo commits yet\\n\\nnothing to commit (create/copy files and use \\\"git add\\\" to track)\"}"
    }
  },
  {
    "step": {
      "step_id": "create_test_file",
      "tool_name": "git_add",
      "parameters": {
        "repo_path": "/tmp/test_repo",
        "file_path": "test.txt"
      },
      "description": "Edge case: Try adding a non-existent file to test error handling."
    },
    "substituted_params": {
      "repo_path": "/tmp/test_repo",
      "file_path": "test.txt"
    },
    "result": {
      "status": "error",
      "result": "{\"status\": \"error\", \"message\": \"Git command failed: Cmd('git') failed due to: exit code(128)\\n  cmdline: git add test.txt\\n  stderr: 'fatal: pathspec 'test.txt' did not match any files'\"}"
    }
  },
  {
    "step": {
      "step_id": "write_test_file",
      "tool_name": "git_add",
      "parameters": {
        "repo_path": "/tmp/test_repo",
        "file_path": "."
      },
      "description": "Happy path: Add all files (after creating one) to staging area."
    },
    "substituted_params": {
      "repo_path": "/tmp/test_repo",
      "file_path": "."
    },
    "result": {
      "status": "success",
      "result": "{\"status\": \"success\", \"message\": \"Added all changes to the staging area.\"}"
    }
  },
  {
    "step": {
      "step_id": "commit_changes",
      "tool_name": "git_commit",
      "parameters": {
        "repo_path": "/tmp/test_repo",
        "message": "Initial commit"
      },
      "description": "Dependent call: Commit the staged changes with a message."
    },
    "substituted_params": {
      "repo_path": "/tmp/test_repo",
      "message": "Initial commit"
    },
    "result": {
      "status": "success",
      "result": "{\"status\": \"success\", \"commit_hash\": \"e469d4606988af08cf4d5f65400318044aae90fc\"}"
    }
  },
  {
    "step": {
      "step_id": "check_log",
      "tool_name": "git_log",
      "parameters": {
        "repo_path": "/tmp/test_repo"
      },
      "description": "Dependent call: Verify the commit appears in the log."
    },
    "substituted_params": {
      "repo_path": "/tmp/test_repo"
    },
    "result": {
      "status": "success",
      "result": "{\"status\": \"success\", \"data\": [{\"hash\": \"e469d4606988af08cf4d5f65400318044aae90fc\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-09T17:17:24+08:00\", \"message\": \"Initial commit\"}]}"
    }
  },
  {
    "step": {
      "step_id": "create_branch",
      "tool_name": "git_create_branch",
      "parameters": {
        "repo_path": "/tmp/test_repo",
        "branch_name": "feature/test-branch"
      },
      "description": "Happy path: Create a new branch for testing."
    },
    "substituted_params": {
      "repo_path": "/tmp/test_repo",
      "branch_name": "feature/test-branch"
    },
    "result": {
      "status": "success",
      "result": "{\"status\": \"success\", \"message\": \"Branch 'feature/test-branch' created.\"}"
    }
  },
  {
    "step": {
      "step_id": "checkout_branch",
      "tool_name": "git_checkout",
      "parameters": {
        "repo_path": "/tmp/test_repo",
        "branch_name": "feature/test-branch"
      },
      "description": "Dependent call: Switch to the newly created branch."
    },
    "substituted_params": {
      "repo_path": "/tmp/test_repo",
      "branch_name": "feature/test-branch"
    },
    "result": {
      "status": "success",
      "result": "{\"status\": \"success\", \"message\": \"Switched to branch 'feature/test-branch'.\"}"
    }
  },
  {
    "step": {
      "step_id": "modify_and_add_file",
      "tool_name": "git_add",
      "parameters": {
        "repo_path": "/tmp/test_repo",
        "file_path": "test.txt"
      },
      "description": "Happy path: Modify and stage a file on the feature branch."
    },
    "substituted_params": {
      "repo_path": "/tmp/test_repo",
      "file_path": "test.txt"
    },
    "result": {
      "status": "error",
      "result": "{\"status\": \"error\", \"message\": \"Git command failed: Cmd('git') failed due to: exit code(128)\\n  cmdline: git add test.txt\\n  stderr: 'fatal: pathspec 'test.txt' did not match any files'\"}"
    }
  },
  {
    "step": {
      "step_id": "diff_staged",
      "tool_name": "git_diff_staged",
      "parameters": {
        "repo_path": "/tmp/test_repo"
      },
      "description": "Dependent call: Show staged changes before committing."
    },
    "substituted_params": {
      "repo_path": "/tmp/test_repo"
    },
    "result": {
      "status": "success",
      "result": "{\"status\": \"success\", \"data\": \"\"}"
    }
  },
  {
    "step": {
      "step_id": "commit_feature",
      "tool_name": "git_commit",
      "parameters": {
        "repo_path": "/tmp/test_repo",
        "message": "Add test.txt on feature branch"
      },
      "description": "Happy path: Commit changes made on the feature branch."
    },
    "substituted_params": {
      "repo_path": "/tmp/test_repo",
      "message": "Add test.txt on feature branch"
    },
    "result": {
      "status": "success",
      "result": "{\"status\": \"success\", \"commit_hash\": \"c63809fc64e6e487a1dd4d9b18c073995a651c9a\"}"
    }
  },
  {
    "step": {
      "step_id": "show_commit_details",
      "tool_name": "git_show",
      "parameters": {
        "repo_path": "/tmp/test_repo",
        "commit_hash": "$outputs.commit_feature.commit_hash"
      },
      "description": "Dependent call: View details of the latest commit using its hash."
    },
    "substituted_params": {
      "repo_path": "/tmp/test_repo",
      "commit_hash": "c63809fc64e6e487a1dd4d9b18c073995a651c9a"
    },
    "result": {
      "status": "success",
      "result": "{\"status\": \"success\", \"data\": {\"hash\": \"c63809fc64e6e487a1dd4d9b18c073995a651c9a\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-09T17:17:26+08:00\", \"message\": \"Add test.txt on feature branch\", \"diff\": \"commit c63809fc64e6e487a1dd4d9b18c073995a651c9a\\nAuthor: pouchine <1291980381@qq.com>\\nDate:   Wed Jul 9 17:17:26 2025 +0800\\n\\n    Add test.txt on feature branch\"}}"
    }
  },
  {
    "step": {
      "step_id": "checkout_main",
      "tool_name": "git_checkout",
      "parameters": {
        "repo_path": "/tmp/test_repo",
        "branch_name": "main"
      },
      "description": "Happy path: Return to the main branch after working on the feature branch."
    },
    "substituted_params": {
      "repo_path": "/tmp/test_repo",
      "branch_name": "main"
    },
    "result": {
      "status": "error",
      "result": "{\"status\": \"error\", \"message\": \"Branch 'main' not found.\"}"
    }
  },
  {
    "step": {
      "step_id": "diff_between_branches",
      "tool_name": "git_diff",
      "parameters": {
        "repo_path": "/tmp/test_repo",
        "base": "main",
        "compare": "feature/test-branch"
      },
      "description": "Dependent call: Compare differences between main and feature branch."
    },
    "substituted_params": {
      "repo_path": "/tmp/test_repo",
      "base": "main",
      "compare": "feature/test-branch"
    },
    "result": {
      "status": "error",
      "result": "{\"status\": \"error\", \"message\": \"Git command failed: Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff main feature/test-branch\\n  stderr: 'fatal: ambiguous argument 'main': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
    }
  },
  {
    "step": {
      "step_id": "reset_all",
      "tool_name": "git_reset",
      "parameters": {
        "repo_path": "/tmp/test_repo"
      },
      "description": "Happy path: Unstage all changes in preparation for clean state."
    },
    "substituted_params": {
      "repo_path": "/tmp/test_repo"
    },
    "result": {
      "status": "success",
      "result": "{\"status\": \"success\", \"message\": \"Unstaged all files.\"}"
    }
  },
  {
    "step": {
      "step_id": "status_after_reset",
      "tool_name": "git_status",
      "parameters": {
        "repo_path": "/tmp/test_repo"
      },
      "description": "Dependent call: Confirm that no changes are staged after reset."
    },
    "substituted_params": {
      "repo_path": "/tmp/test_repo"
    },
    "result": {
      "status": "success",
      "result": "{\"status\": \"success\", \"data\": \"On branch feature/test-branch\\nnothing to commit, working tree clean\"}"
    }
  },
  {
    "step": {
      "step_id": "unstage_specific_file",
      "tool_name": "git_reset",
      "parameters": {
        "repo_path": "/tmp/test_repo",
        "file_path": "test.txt"
      },
      "description": "Edge case: Attempt to unstage a specific file that is not staged."
    },
    "substituted_params": {
      "repo_path": "/tmp/test_repo",
      "file_path": "test.txt"
    },
    "result": {
      "status": "success",
      "result": "{\"status\": \"success\", \"message\": \"Unstaged 'test.txt'.\"}"
    }
  }
]