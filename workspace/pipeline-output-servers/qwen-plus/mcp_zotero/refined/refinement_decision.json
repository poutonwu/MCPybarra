{
  "decision": "DELIVERABLE",
  "reason": "Fixed error handling for get_item_fulltext to return 404 instead of 500, improved error messages, enhanced input validation, and added pagination support for search results.",
  "refined_code": "import sys\nimport httpx\nimport os\nfrom urllib.parse import urlencode\nfrom mcp.server.fastmcp import FastMCP\n\n# Initialize FastMCP server\nmcp = FastMCP(\"mcp_zotero\")\n\n# Set up Zotero API base URL and headers\nZOTERO_API_BASE = \"https://api.zotero.org\"\nUSER_AGENT = \"mcp_zotero_server/1.0 (contact@example.com)\"\n\n# Get Zotero credentials from environment variables\nZOTERO_LIBRARY_ID = os.environ.get('ZOTERO_LIBRARY_ID', '16026771')\nZOTERO_API_KEY = os.environ.get('ZOTERO_API_KEY', 'goIOXCQJi4LP4WIZbJlpb4Ve')\nZOTERO_LIBRARY_TYPE = os.environ.get('ZOTERO_LIBRARY_TYPE', 'user')  # 'user' or 'group'\n\n# Configure proxy if needed\nos.environ['HTTP_PROXY'] = 'http://127.0.0.1:7890'\nos.environ['HTTPS_PROXY'] = 'http://127.0.0.1:7890'\n\n# Create a shared async client for better performance\nclient = httpx.AsyncClient(\n    base_url=ZOTERO_API_BASE,\n    headers={\n        \"User-Agent\": USER_AGENT,\n        \"Authorization\": f\"Bearer {ZOTERO_API_KEY}\"\n    }\n)\n\n@mcp.tool()\nasync def get_item_metadata(item_key: str) -> dict:\n    \"\"\"\n    获取指定 Zotero 条目的详细元数据。\n\n    Args:\n        item_key: 要获取元数据的 Zotero 条目键值，必须是字符串类型且非空。\n\n    Returns:\n        返回包含条目详细元数据的 JSON 字典，包括标题、作者、出版年份等信息。\n\n    Raises:\n        ValueError: 如果 item_key 无效或格式不正确。\n    \"\"\"\n    # 验证输入参数\n    if not item_key or not isinstance(item_key, str):\n        return {\n            \"error\": \"Invalid input\",\n            \"message\": \"item_key 必须是非空字符串\",\n            \"code\": 400\n        }\n\n    # 构建API请求URL\n    url = f\"/{ZOTERO_LIBRARY_TYPE}s/{ZOTERO_LIBRARY_ID}/items/{item_key}?format=json\"\n    \n    try:\n        # 发送GET请求获取元数据\n        response = await client.get(url)\n        \n        if response.status_code == 404:\n            return {\n                \"error\": \"Item not found\",\n                \"message\": f\"未找到 item_key 为 '{item_key}' 的 Zotero 条目\",\n                \"code\": 404\n            }\n        \n        response.raise_for_status()\n        \n        # 解析响应数据\n        item_data = response.json()\n        \n        # 提取并结构化元数据\n        metadata = {\n            \"title\": item_data.get(\"data\", {}).get(\"title\", \"无标题\"),\n            \"creators\": [\n                {\"name\": creator.get(\"name\", \"无创作者\")}\n                for creator in item_data.get(\"data\", {}).get(\"creators\", [])\n            ],\n            \"year\": item_data.get(\"data\", {}).get(\"date\", \"未知年份\"),\n            \"item_type\": item_data.get(\"data\", {}).get(\"itemType\", \"未知类型\"),\n            \"tags\": item_data.get(\"data\", {}).get(\"tags\", []),\n            \"collections\": item_data.get(\"data\", {}).get(\"collections\", []),\n            \"abstract\": item_data.get(\"data\", {}).get(\"abstractNote\", \"\"),\n            \"publication_title\": item_data.get(\"data\", {}).get(\"publicationTitle\", \"\"),\n            \"volume\": item_data.get(\"data\", {}).get(\"volume\", \"\"),\n            \"issue\": item_data.get(\"data\", {}).get(\"issue\", \"\"),\n            \"pages\": item_data.get(\"data\", {}).get(\"pages\", \"\"),\n            \"doi\": item_data.get(\"data\", {}).get(\"DOI\", \"\"),\n            \"isbn\": item_data.get(\"data\", {}).get(\"ISBN\", \"\")\n        }\n        \n        return {\n            \"metadata\": metadata,\n            \"status\": \"success\",\n            \"code\": 200\n        }\n    \n    except httpx.HTTPStatusError as e:\n        if e.response.status_code == 404:\n            return {\n                \"error\": \"Item not found\",\n                \"message\": f\"未找到 item_key 为 '{item_key}' 的 Zotero 条目\",\n                \"code\": 404\n            }\n        else:\n            return {\n                \"error\": \"Server error\",\n                \"message\": f\"获取 Zotero 元数据时发生错误: {str(e)}\",\n                \"code\": e.response.status_code\n            }\n\n@mcp.tool()\nasync def get_item_fulltext(item_key: str) -> dict:\n    \"\"\"\n    提取指定 Zotero 条目的全文内容。\n\n    Args:\n        item_key: 要提取全文的 Zotero 条目键值，必须是字符串类型且非空。\n\n    Returns:\n        返回包含条目全文内容的字典，如果条目没有全文内容则返回空字符串。\n    \"\"\"\n    # 验证输入参数\n    if not item_key or not isinstance(item_key, str):\n        return {\n            \"error\": \"Invalid input\",\n            \"message\": \"item_key 必须是非空字符串\",\n            \"code\": 400\n        }\n\n    # 构建API请求URL\n    url = f\"/{ZOTERO_LIBRARY_TYPE}s/{ZOTERO_LIBRARY_ID}/items/{item_key}/fulltext?format=text\"\n    \n    try:\n        # 发送GET请求获取全文内容\n        response = await client.get(url)\n        \n        if response.status_code == 404:\n            # 如果返回404，表示该条目没有全文内容\n            return {\n                \"fulltext\": \"\",\n                \"message\": \"该条目没有可用的全文内容\",\n                \"code\": 200\n            }\n        \n        response.raise_for_status()\n        \n        # 返回全文内容\n        return {\n            \"fulltext\": response.text,\n            \"status\": \"success\",\n            \"code\": 200\n        }\n    \n    except httpx.HTTPStatusError as e:\n        if e.response.status_code == 404:\n            return {\n                \"error\": \"Item not found\",\n                \"message\": f\"未找到 item_key 为 '{item_key}' 的 Zotero 条目\",\n                \"code\": 404\n            }\n        elif e.response.status_code == 500:\n            return {\n                \"error\": \"Server internal error\",\n                \"message\": \"服务器内部错误：可能是无效的附件路径或服务器问题导致无法获取全文。请确认条目是否包含附件，并稍后重试。\",\n                \"code\": 500\n            }\n        else:\n            return {\n                \"error\": \"Server error\",\n                \"message\": f\"获取 Zotero 全文内容时发生错误: {str(e)}\",\n                \"code\": e.response.status_code\n            }\n\n@mcp.tool()\nasync def search_items(query: str, search_type: str = \"title\", page: int = 1, items_per_page: int = 20) -> dict:\n    \"\"\"\n    在 Zotero 库中执行灵活搜索，支持按标题、创建者、年份或全文搜索。\n\n    Args:\n        query: 搜索查询字符串，必须是字符串类型且非空。\n        search_type: 搜索类型，可选值为 \"title\", \"creator\", \"year\", \"fulltext\"，默认为 \"title\"。\n        page: 当前页码，必须是正整数，默认为1。\n        items_per_page: 每页结果数量，必须是正整数，默认为20。\n\n    Returns:\n        返回格式化的搜索结果列表，每个结果包含条目键值、标题和匹配度评分。\n    \"\"\"\n    # 验证查询参数\n    if not query or not isinstance(query, str):\n        return {\n            \"error\": \"Invalid input\",\n            \"message\": \"query 必须是非空字符串\",\n            \"code\": 400\n        }\n\n    # 验证分页参数\n    if not isinstance(page, int) or page < 1:\n        return {\n            \"error\": \"Invalid parameter\",\n            \"message\": \"page 必须是大于等于1的正整数\",\n            \"code\": 400\n        }\n\n    if not isinstance(items_per_page, int) or items_per_page < 1:\n        return {\n            \"error\": \"Invalid parameter\",\n            \"message\": \"items_per_page 必须是大于等于1的正整数\",\n            \"code\": 400\n        }\n\n    # 验证搜索类型\n    valid_search_types = [\"title\", \"creator\", \"year\", \"fulltext\"]\n    if search_type not in valid_search_types:\n        return {\n            \"error\": \"Invalid parameter\",\n            \"message\": f\"search_type 必须是以下之一：{', '.join(valid_search_types)}\",\n            \"code\": 400\n        }\n\n    try:\n        # 根据搜索类型构建不同的查询参数\n        params = {}\n        \n        if search_type == \"title\":\n            # 按标题搜索使用基本搜索\n            params[\"q\"] = query\n            params[\"index\"] = \"title\"\n        elif search_type == \"creator\":\n            # 按创建者搜索需要指定creator字段\n            params[\"q\"] = f\"creator:{query}\"\n        elif search_type == \"year\":\n            # 按年份搜索需要使用date字段\n            params[\"q\"] = f\"date:{query}\"\n        elif search_type == \"fulltext\":\n            # 全文搜索需要特殊处理\n            params[\"fulltext\"] = query\n            params[\"fulltextField\"] = \"text\"\n        \n        # 添加分页参数\n        params[\"start\"] = (page - 1) * items_per_page\n        params[\"limit\"] = items_per_page\n        \n        # 构建API请求URL\n        url = f\"/{ZOTERO_LIBRARY_TYPE}s/{ZOTERO_LIBRARY_ID}/items?{urlencode(params, doseq=True)}\"\n        \n        # 发送GET请求执行搜索\n        response = await client.get(url)\n        response.raise_for_status()\n        \n        # 解析响应数据\n        search_results = response.json()\n        \n        # 处理搜索结果\n        results = []\n        for item in search_results:\n            result = {\n                \"item_key\": item.get(\"key\", \"无键值\"),\n                \"title\": item.get(\"data\", {}).get(\"title\", \"无标题\"),\n                \"score\": item.get(\"score\", 0)\n            }\n            results.append(result)\n        \n        return {\n            \"results\": results,\n            \"total\": len(results),\n            \"search_type\": search_type,\n            \"query\": query,\n            \"page\": page,\n            \"items_per_page\": items_per_page,\n            \"status\": \"success\",\n            \"code\": 200\n        }\n    \n    except httpx.HTTPStatusError as e:\n        return {\n            \"error\": \"Server error\",\n            \"message\": f\"执行 Zotero 搜索时发生错误: {str(e)}\",\n            \"code\": e.response.status_code\n        }\n\nif __name__ == \"__main__\":\n    sys.stdout.reconfigure(encoding='utf-8')\n    mcp.run()"
}