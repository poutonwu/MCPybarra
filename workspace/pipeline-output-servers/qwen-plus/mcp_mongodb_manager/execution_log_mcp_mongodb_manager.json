[
  {
    "step": {
      "step_id": "list_all_databases",
      "tool_name": "mcp_list_databases",
      "parameters": {},
      "description": "List all available databases in the connected MongoDB instance."
    },
    "substituted_params": {},
    "result": {
      "status": "success",
      "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]}"
    }
  },
  {
    "step": {
      "step_id": "list_collections_in_nonexistent_db",
      "tool_name": "mcp_list_collections",
      "parameters": {
        "database_name": "nonexistent_db"
      },
      "description": "Attempt to list collections in a non-existent database to test error handling."
    },
    "substituted_params": {
      "database_name": "nonexistent_db"
    },
    "result": {
      "status": "success",
      "result": "{\"error\": \"Database 'nonexistent_db' does not exist.\"}"
    }
  },
  {
    "step": {
      "step_id": "insert_document_into_nonexistent_db",
      "tool_name": "mcp_insert_document",
      "parameters": {
        "database_name": "nonexistent_db",
        "collection_name": "users",
        "document": {
          "name": "John Doe",
          "age": 30
        }
      },
      "description": "Attempt to insert a document into a non-existent database to test error handling."
    },
    "substituted_params": {
      "database_name": "nonexistent_db",
      "collection_name": "users",
      "document": {
        "name": "John Doe",
        "age": 30
      }
    },
    "result": {
      "status": "success",
      "result": "{\"error\": \"Database 'nonexistent_db' does not exist.\"}"
    }
  },
  {
    "step": {
      "step_id": "find_documents_in_nonexistent_db",
      "tool_name": "mcp_find_documents",
      "parameters": {
        "database_name": "nonexistent_db",
        "collection_name": "users",
        "query": {
          "age": {
            "$gt": 25
          }
        }
      },
      "description": "Attempt to find documents in a non-existent database to test error handling."
    },
    "substituted_params": {
      "database_name": "nonexistent_db",
      "collection_name": "users",
      "query": {
        "age": {
          "$gt": 25
        }
      }
    },
    "result": {
      "status": "success",
      "result": "{\"error\": \"Database 'nonexistent_db' does not exist.\"}"
    }
  },
  {
    "step": {
      "step_id": "update_document_in_nonexistent_db",
      "tool_name": "mcp_update_document",
      "parameters": {
        "database_name": "nonexistent_db",
        "collection_name": "users",
        "filter_query": {
          "name": "John Doe"
        },
        "update_query": {
          "age": 31
        },
        "multi": true
      },
      "description": "Attempt to update documents in a non-existent database to test error handling."
    },
    "substituted_params": {
      "database_name": "nonexistent_db",
      "collection_name": "users",
      "filter_query": {
        "name": "John Doe"
      },
      "update_query": {
        "age": 31
      },
      "multi": true
    },
    "result": {
      "status": "success",
      "result": "{\"error\": \"Database 'nonexistent_db' does not exist.\"}"
    }
  },
  {
    "step": {
      "step_id": "delete_document_in_nonexistent_db",
      "tool_name": "mcp_delete_document",
      "parameters": {
        "database_name": "nonexistent_db",
        "collection_name": "users",
        "filter_query": {
          "name": "John Doe"
        },
        "multi": true
      },
      "description": "Attempt to delete documents from a non-existent database to test error handling."
    },
    "substituted_params": {
      "database_name": "nonexistent_db",
      "collection_name": "users",
      "filter_query": {
        "name": "John Doe"
      },
      "multi": true
    },
    "result": {
      "status": "success",
      "result": "{\"error\": \"Database 'nonexistent_db' does not exist.\"}"
    }
  },
  {
    "step": {
      "step_id": "create_test_database",
      "tool_name": "mcp_insert_document",
      "parameters": {
        "database_name": "test_db",
        "collection_name": "users",
        "document": {
          "name": "Test User",
          "age": 28
        }
      },
      "description": "Insert a document into a new collection to implicitly create a test database and collection."
    },
    "substituted_params": {
      "database_name": "test_db",
      "collection_name": "users",
      "document": {
        "name": "Test User",
        "age": 28
      }
    },
    "result": {
      "status": "success",
      "result": "{\"inserted_id\": \"686a9d4b70820f44d81a8d13\"}"
    }
  },
  {
    "step": {
      "step_id": "list_collections_in_test_db",
      "tool_name": "mcp_list_collections",
      "parameters": {
        "database_name": "test_db"
      },
      "description": "List collections in the newly created 'test_db' database."
    },
    "substituted_params": {
      "database_name": "test_db"
    },
    "result": {
      "status": "success",
      "result": "{\"collections\": [\"a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\", \"new_collection\", \"test_collection\", \"invalid/collection*name\", \"user_profiles\", \"long_key_collection\", \"large_data\", \"special_chars_collection\", \"binary_data_collection\", \"nonexistent_collection\", \"a_very_long_collection_name_that_exceeds_normal_limits_and_might_cause_issues\", \"users\"]}"
    }
  },
  {
    "step": {
      "step_id": "insert_multiple_documents",
      "tool_name": "mcp_insert_document",
      "parameters": {
        "database_name": "test_db",
        "collection_name": "users",
        "document": {
          "name": "Alice",
          "age": 22
        }
      },
      "description": "Insert another document into the 'users' collection of 'test_db'."
    },
    "substituted_params": {
      "database_name": "test_db",
      "collection_name": "users",
      "document": {
        "name": "Alice",
        "age": 22
      }
    },
    "result": {
      "status": "success",
      "result": "{\"inserted_id\": \"686a9d4b70820f44d81a8d14\"}"
    }
  },
  {
    "step": {
      "step_id": "find_documents_with_age_gt_25",
      "tool_name": "mcp_find_documents",
      "parameters": {
        "database_name": "test_db",
        "collection_name": "users",
        "query": {
          "age": {
            "$gt": 25
          }
        },
        "projection": {
          "name": 1
        },
        "limit": 1
      },
      "description": "Find documents where age is greater than 25 with a projection and limit."
    },
    "substituted_params": {
      "database_name": "test_db",
      "collection_name": "users",
      "query": {
        "age": {
          "$gt": 25
        }
      },
      "projection": {
        "name": 1
      },
      "limit": 1
    },
    "result": {
      "status": "success",
      "result": "{\"documents\": [{\"_id\": \"686a9d4b70820f44d81a8d13\", \"name\": \"Test User\"}]}"
    }
  },
  {
    "step": {
      "step_id": "update_user_age",
      "tool_name": "mcp_update_document",
      "parameters": {
        "database_name": "test_db",
        "collection_name": "users",
        "filter_query": {
          "name": "Test User"
        },
        "update_query": {
          "age": 30
        },
        "multi": false
      },
      "description": "Update the age of 'Test User' in the 'users' collection."
    },
    "substituted_params": {
      "database_name": "test_db",
      "collection_name": "users",
      "filter_query": {
        "name": "Test User"
      },
      "update_query": {
        "age": 30
      },
      "multi": false
    },
    "result": {
      "status": "success",
      "result": "{\"updated_count\": 1}"
    }
  },
  {
    "step": {
      "step_id": "verify_updated_document",
      "tool_name": "mcp_find_documents",
      "parameters": {
        "database_name": "test_db",
        "collection_name": "users",
        "query": {
          "name": "Test User"
        }
      },
      "description": "Verify that the document was updated correctly by finding it again."
    },
    "substituted_params": {
      "database_name": "test_db",
      "collection_name": "users",
      "query": {
        "name": "Test User"
      }
    },
    "result": {
      "status": "success",
      "result": "{\"documents\": [{\"_id\": \"686a9d4b70820f44d81a8d13\", \"name\": \"Test User\", \"age\": 30}]}"
    }
  },
  {
    "step": {
      "step_id": "delete_test_user",
      "tool_name": "mcp_delete_document",
      "parameters": {
        "database_name": "test_db",
        "collection_name": "users",
        "filter_query": {
          "name": "Test User"
        },
        "multi": false
      },
      "description": "Delete the 'Test User' document from the 'users' collection."
    },
    "substituted_params": {
      "database_name": "test_db",
      "collection_name": "users",
      "filter_query": {
        "name": "Test User"
      },
      "multi": false
    },
    "result": {
      "status": "success",
      "result": "{\"deleted_count\": 1}"
    }
  },
  {
    "step": {
      "step_id": "delete_entire_collection",
      "tool_name": "mcp_delete_document",
      "parameters": {
        "database_name": "test_db",
        "collection_name": "users",
        "filter_query": {},
        "multi": true
      },
      "description": "Delete all documents from the 'users' collection to clean up."
    },
    "substituted_params": {
      "database_name": "test_db",
      "collection_name": "users",
      "filter_query": {},
      "multi": true
    },
    "result": {
      "status": "success",
      "result": "{\"deleted_count\": 2}"
    }
  }
]