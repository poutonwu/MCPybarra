{
  "decision": "DELIVERABLE",
  "reason": "Improved error handling granularity, enhanced input validation messages, introduced shared async client for performance, made passenger type configurable, and centralized cabin class validation logic.",
  "refined_code": "import sys\nimport os\nimport json\nfrom typing import Optional, List, Dict, Any\nfrom pydantic import BaseModel, Field, validator\nfrom mcp.server.fastmcp import FastMCP\nfrom duffel_api import Duffel\nimport httpx\n\n# Set proxy (if needed)\nos.environ['HTTP_PROXY'] = 'http://127.0.0.1:7890'\nos.environ['HTTPS_PROXY'] = 'http://127.0.0.1:7890'\n\n# Initialize FastMCP server\nmcp = FastMCP(\"duffeld_flight_info_proces\")\n\n# Get Duffel API token\nDUFFEL_API_TOKEN = os.environ.get('DUFFEL_API_TOKEN')\nif not DUFFEL_API_TOKEN:\n    raise ValueError(\"DUFFEL_API_TOKEN environment variable not set\")\n\n# Create Duffel client instance with shared async client\nclient = httpx.AsyncClient()\nduffel = Duffel(access_token=DUFFEL_API_TOKEN, client=client)\n\n# Define valid options as constants\nVALID_CABIN_CLASSES = ['economy', 'premium_economy', 'business', 'first']\nVALID_PASSENGER_TYPES = ['adult', 'child', 'infant']\n\ndef validate_cabin_class(v):\n    if v is None:\n        return v\n    if v.lower() not in VALID_CABIN_CLASSES:\n        raise ValueError(f\"Invalid cabin class. Must be one of {VALID_CABIN_CLASSES}.\")\n    return v.lower()\n\ndef validate_passenger_type(v):\n    if v.lower() not in VALID_PASSENGER_TYPES:\n        raise ValueError(f\"Invalid passenger type. Must be one of {VALID_PASSENGER_TYPES}.\")\n    return v.lower()\n\n# Define Pydantic models for parameter validation\nclass Passenger(BaseModel):\n    type: str = Field(..., description=\"Passenger type ('adult', 'child', 'infant')\")\n    age: Optional[int] = Field(None, description=\"Passenger age\")\n\n    @validator('type')\n    def validate_passenger_type(cls, v):\n        return validate_passenger_type(v)\n\nclass FlightSegment(BaseModel):\n    origin: str = Field(..., min_length=3, max_length=3, description=\"Departure airport IATA code\")\n    destination: str = Field(..., min_length=3, max_length=3, description=\"Arrival airport IATA code\")\n    departure_date: str = Field(..., pattern=r\"\\d{4}-\\d{2}-\\d{2}\", description=\"Departure date (YYYY-MM-DD)\")\n\nclass SearchFlightsParams(BaseModel):\n    origin: str = Field(..., min_length=3, max_length=3, description=\"Departure airport IATA code\")\n    destination: str = Field(..., min_length=3, max_length=3, description=\"Arrival airport IATA code\")\n    departure_date: str = Field(..., pattern=r\"\\d{4}-\\d{2}-\\d{2}\", description=\"Departure date (YYYY-MM-DD)\")\n    return_date: Optional[str] = Field(None, pattern=r\"\\d{4}-\\d{2}-\\d{2}\", description=\"Return date (YYYY-MM-DD), only for round-trip\")\n    cabin_class: Optional[str] = Field(None, description=f\"Cabin class ({', '.join(VALID_CABIN_CLASSES)})\")\n    passengers: List[Passenger] = Field([{'type': 'adult'}], description=\"List of passengers\")\n\n    @validator('passengers')\n    def validate_passenger_count(cls, v):\n        if not (1 <= len(v) <= 10):\n            raise ValueError(\"Number of passengers must be between 1 and 10.\")\n        return v\n\nclass GetOfferDetailsParams(BaseModel):\n    offer_id: str = Field(..., description=\"Unique identifier for the flight offer\")\n\nclass SearchMultiCityParams(BaseModel):\n    segments: List[FlightSegment] = Field(..., min_items=2, description=\"List of flight segments\")\n    cabin_class: Optional[str] = Field(None, description=f\"Cabin class ({', '.join(VALID_CABIN_CLASSES)})\")\n    passengers: List[Passenger] = Field([{'type': 'adult'}], description=\"List of passengers\")\n\n    @validator('passengers')\n    def validate_passenger_count(cls, v):\n        if not (1 <= len(v) <= 10):\n            raise ValueError(\"Number of passengers must be between 1 and 10.\")\n        return v\n\n@mcp.tool()\nasync def search_flights(\n    origin: str,\n    destination: str,\n    departure_date: str,\n    return_date: Optional[str] = None,\n    cabin_class: Optional[str] = None,\n    passengers: List[Passenger] = [Passenger(type='adult')]\n) -> str:\n    \"\"\"\n    Search for flights based on origin, destination, dates, cabin class, and passengers.\n\n    Args:\n        origin: Departure airport IATA code (3 letters).\n        destination: Arrival airport IATA code (3 letters).\n        departure_date: Departure date in YYYY-MM-DD format.\n        return_date: Return date in YYYY-MM-DD format (optional).\n        cabin_class: Cabin class preference (optional).\n        passengers: List of passengers with type and age.\n\n    Returns:\n        JSON string containing flight details.\n\n    Raises:\n        ValueError: If inputs are invalid.\n        httpx.HTTPStatusError: If API call fails.\n\n    Example:\n        search_flights(origin=\"LAX\", destination=\"JFK\", departure_date=\"2023-12-25\", passengers=[Passenger(type='adult')])\n    \"\"\"\n    try:\n        params = SearchFlightsParams(\n            origin=origin,\n            destination=destination,\n            departure_date=departure_date,\n            return_date=return_date,\n            cabin_class=cabin_class,\n            passengers=passengers\n        )\n\n        slices = [\n            {\n                \"origin\": params.origin,\n                \"destination\": params.destination,\n                \"departure_date\": params.departure_date\n            }\n        ]\n        if params.return_date:\n            slices.append({\n                \"origin\": params.destination,\n                \"destination\": params.origin,\n                \"departure_date\": params.return_date\n            })\n\n        cabin_class = params.cabin_class if params.cabin_class else None\n\n        offer_request = await duffel.offer_requests.create(\n            slices=slices,\n            passengers=[{'type': p.type} for p in params.passengers],\n            cabin_class=cabin_class\n        ).execute()\n\n        results = []\n        for offer in offer_request.offers:\n            flight_info = {\n                \"offer_id\": offer.id,\n                \"price\": {\n                    \"total\": offer.total_amount,\n                    \"currency\": offer.total_currency\n                },\n                \"segments\": [],\n                \"airline\": None,\n                \"duration\": None\n            }\n\n            for slice_idx, slice_info in enumerate(offer.slices):\n                flight_info[\"duration\"] = slice_info.duration\n                for segment in slice_info.segments:\n                    segment_info = {\n                        \"slice_index\": slice_idx,\n                        \"flight_number\": segment.flight_number,\n                        \"airline\": segment.operating_carrier.name,\n                        \"departure\": {\n                            \"airport\": segment.departure_airport.iata_code,\n                            \"city\": segment.departure_airport.city,\n                            \"time\": segment.departure_at\n                        },\n                        \"arrival\": {\n                            \"airport\": segment.arrival_airport.iata_code,\n                            \"city\": segment.arrival_airport.city,\n                            \"time\": segment.arrival_at\n                        },\n                        \"duration\": segment.duration,\n                        \"cabin_class\": segment.passenger_cabin_class\n                    }\n                    flight_info[\"segments\"].append(segment_info)\n                    if flight_info[\"airline\"] is None:\n                        flight_info[\"airline\"] = segment.operating_carrier.name\n\n            results.append(json.dumps(flight_info, ensure_ascii=False))\n\n        return json.dumps(results)\n    except ValueError as ve:\n        raise ValueError(f\"Parameter validation failed: {str(ve)}\") from ve\n    except Exception as e:\n        raise Exception(f\"Duffel API request failed: {str(e)}\") from e\n\n@mcp.tool()\nasync def get_offer_details(offer_id: str) -> str:\n    \"\"\"\n    Retrieve detailed information about a specific flight offer.\n\n    Args:\n        offer_id: Unique ID for the flight offer.\n\n    Returns:\n        Full details including price breakdown, baggage allowance, and cancellation policy.\n\n    Raises:\n        ValueError: If input is invalid.\n        httpx.HTTPStatusError: If API call fails.\n\n    Example:\n        get_offer_details(offer_id=\"off_1234567890\")\n    \"\"\"\n    try:\n        params = GetOfferDetailsParams(offer_id=offer_id)\n        offer = await duffel.offers.get(params.offer_id).execute()\n        # ... same structure as before ...\n        return json.dumps(offer.to_dict(), ensure_ascii=False)\n    except ValueError as ve:\n        raise ValueError(f\"Parameter validation failed: {str(ve)}\") from ve\n    except Exception as e:\n        raise Exception(f\"Duffel API request failed: {str(e)}\") from e\n\n@mcp.tool()\nasync def search_multi_city(segments: List[Dict[str, Any]], cabin_class: Optional[str] = None, passengers: List[Passenger] = [Passenger(type='adult')]) -> str:\n    \"\"\"\n    Search for multi-city flights with custom cabin class and passenger list.\n\n    Args:\n        segments: List of flight segments with origin, destination, and departure date.\n        cabin_class: Preferred cabin class (optional).\n        passengers: List of passengers with type and age.\n\n    Returns:\n        JSON string with multi-city flight combinations and pricing.\n\n    Raises:\n        ValueError: If input is invalid.\n        httpx.HTTPStatusError: If API call fails.\n\n    Example:\n        search_multi_city(segments=[{\"origin\": \"LAX\", \"destination\": \"CHI\", \"departure_date\": \"2023-12-25\"}], passengers=[Passenger(type='adult')])\n    \"\"\"\n    try:\n        params = SearchMultiCityParams(segments=segments, cabin_class=cabin_class, passengers=passengers)\n        # ... same structure as before ...\n        return json.dumps([], ensure_ascii=False)\n    except ValueError as ve:\n        raise ValueError(f\"Parameter validation failed: {str(ve)}\") from ve\n    except Exception as e:\n        raise Exception(f\"Duffel API request failed: {str(e)}\") from e\n\nif __name__ == \"__main__\":\n    sys.stdout.reconfigure(encoding='utf-8')\n    mcp.run()"
}