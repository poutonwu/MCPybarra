[
  {
    "step": {
      "step_id": "create_test_file",
      "tool_name": "create_text_file",
      "parameters": {
        "file_path": "/tmp/test_mcp_file.txt",
        "content": "Line 0\nLine 1\nLine 2\nLine 3\nLine 4"
      },
      "description": "Happy path: Create a new test file with sample content."
    },
    "substituted_params": {
      "file_path": "/tmp/test_mcp_file.txt",
      "content": "Line 0\nLine 1\nLine 2\nLine 3\nLine 4"
    },
    "result": {
      "status": "success",
      "result": "File created successfully at /tmp/test_mcp_file.txt"
    }
  },
  {
    "step": {
      "step_id": "read_full_file",
      "tool_name": "get_text_file_contents",
      "parameters": {
        "file_paths": [
          "/tmp/test_mcp_file.txt"
        ]
      },
      "description": "Read the full content of the created file to verify creation and basic read functionality."
    },
    "substituted_params": {
      "file_paths": [
        "/tmp/test_mcp_file.txt"
      ]
    },
    "result": {
      "status": "success",
      "result": "{\n  \"/tmp/test_mcp_file.txt\": {\n    \"lines\": [\n      \"Line 0\",\n      \"Line 1\",\n      \"Line 2\",\n      \"Line 3\",\n      \"Line 4\"\n    ],\n    \"hash\": \"bc6c267916f79580f39ef61e2b75953128f9153ea8b5d59010e22f3e6f149a6c\"\n  }\n}"
    }
  },
  {
    "step": {
      "step_id": "append_to_file",
      "tool_name": "append_text_file_contents",
      "parameters": {
        "file_path": "/tmp/test_mcp_file.txt",
        "content": "\nAppended Line"
      },
      "description": "Append additional content to the end of the file."
    },
    "substituted_params": {
      "file_path": "/tmp/test_mcp_file.txt",
      "content": "\nAppended Line"
    },
    "result": {
      "status": "success",
      "result": "Content appended successfully to /tmp/test_mcp_file.txt"
    }
  },
  {
    "step": {
      "step_id": "read_after_append",
      "tool_name": "get_text_file_contents",
      "parameters": {
        "file_paths": [
          "/tmp/test_mcp_file.txt"
        ]
      },
      "description": "Verify that the append operation was successful by reading the entire file again."
    },
    "substituted_params": {
      "file_paths": [
        "/tmp/test_mcp_file.txt"
      ]
    },
    "result": {
      "status": "success",
      "result": "{\n  \"/tmp/test_mcp_file.txt\": {\n    \"lines\": [\n      \"Line 0\",\n      \"Line 1\",\n      \"Line 2\",\n      \"Line 3\",\n      \"Line 4\",\n      \"Appended Line\"\n    ],\n    \"hash\": \"7adfb61715ec5271f1c86c9bb6b06d2ff8871656bacf04216adb3d6d5d7b63a5\"\n  }\n}"
    }
  },
  {
    "step": {
      "step_id": "insert_into_file",
      "tool_name": "insert_text_file_contents",
      "parameters": {
        "file_path": "/tmp/test_mcp_file.txt",
        "content": "Inserted Line",
        "position": 2
      },
      "description": "Insert a line at position 2 in the file."
    },
    "substituted_params": {
      "file_path": "/tmp/test_mcp_file.txt",
      "content": "Inserted Line",
      "position": 2
    },
    "result": {
      "status": "success",
      "result": "Content inserted successfully at line 2 in /tmp/test_mcp_file.txt"
    }
  },
  {
    "step": {
      "step_id": "read_after_insert",
      "tool_name": "get_text_file_contents",
      "parameters": {
        "file_paths": [
          "/tmp/test_mcp_file.txt"
        ]
      },
      "description": "Verify that the insert operation was successful by reading the entire file again."
    },
    "substituted_params": {
      "file_paths": [
        "/tmp/test_mcp_file.txt"
      ]
    },
    "result": {
      "status": "success",
      "result": "{\n  \"/tmp/test_mcp_file.txt\": {\n    \"lines\": [\n      \"Line 0\",\n      \"Line 1\",\n      \"Inserted Line\",\n      \"Line 2\",\n      \"Line 3\",\n      \"Line 4\",\n      \"Appended Line\"\n    ],\n    \"hash\": \"396683e4ba2650346ed0ad934fdafd15c1f70a080c07396ced4c3e69bda7d147\"\n  }\n}"
    }
  },
  {
    "step": {
      "step_id": "delete_lines",
      "tool_name": "delete_text_file_contents",
      "parameters": {
        "file_path": "/tmp/test_mcp_file.txt",
        "start_line": 1,
        "end_line": 3
      },
      "description": "Delete lines from index 1 to 2 (inclusive start, exclusive end)."
    },
    "substituted_params": {
      "file_path": "/tmp/test_mcp_file.txt",
      "start_line": 1,
      "end_line": 3
    },
    "result": {
      "status": "success",
      "result": "Lines 1-3 deleted successfully from /tmp/test_mcp_file.txt"
    }
  },
  {
    "step": {
      "step_id": "read_after_delete",
      "tool_name": "get_text_file_contents",
      "parameters": {
        "file_paths": [
          "/tmp/test_mcp_file.txt"
        ]
      },
      "description": "Verify that the delete operation was successful by reading the entire file again."
    },
    "substituted_params": {
      "file_paths": [
        "/tmp/test_mcp_file.txt"
      ]
    },
    "result": {
      "status": "success",
      "result": "{\n  \"/tmp/test_mcp_file.txt\": {\n    \"lines\": [\n      \"Line 0\",\n      \"Line 2\",\n      \"Line 3\",\n      \"Line 4\",\n      \"Appended Line\"\n    ],\n    \"hash\": \"3a9750fc76c7dcdae0d89213a4296ea9ea44b09c399cafb06a5949149f3168f3\"\n  }\n}"
    }
  },
  {
    "step": {
      "step_id": "get_hash_before_patch",
      "tool_name": "get_text_file_contents",
      "parameters": {
        "file_paths": [
          "/tmp/test_mcp_file.txt"
        ]
      },
      "description": "Get current hash for patching verification."
    },
    "substituted_params": {
      "file_paths": [
        "/tmp/test_mcp_file.txt"
      ]
    },
    "result": {
      "status": "success",
      "result": "{\n  \"/tmp/test_mcp_file.txt\": {\n    \"lines\": [\n      \"Line 0\",\n      \"Line 2\",\n      \"Line 3\",\n      \"Line 4\",\n      \"Appended Line\"\n    ],\n    \"hash\": \"3a9750fc76c7dcdae0d89213a4296ea9ea44b09c399cafb06a5949149f3168f3\"\n  }\n}"
    }
  },
  {
    "step": {
      "step_id": "patch_file",
      "tool_name": "patch_text_file_contents",
      "parameters": {
        "file_path": "/tmp/test_mcp_file.txt",
        "content_patches": [
          {
            "position": 0,
            "new_content": "Patched Line 0"
          },
          {
            "position": 1,
            "new_content": "Patched Line 1"
          }
        ],
        "expected_hash": "$outputs.get_hash_before_patch[/tmp/test_mcp_file.txt].hash"
      },
      "description": "Apply patches using correct expected hash to ensure concurrency control works."
    },
    "substituted_params": {
      "file_path": "/tmp/test_mcp_file.txt",
      "content_patches": [
        {
          "position": 0,
          "new_content": "Patched Line 0"
        },
        {
          "position": 1,
          "new_content": "Patched Line 1"
        }
      ],
      "expected_hash": null
    },
    "result": {
      "status": "error",
      "result": "A required parameter resolved to None, likely due to a failure in a dependency. Failed placeholder: '$outputs.get_hash_before_patch[/tmp/test_mcp_file.txt].hash'"
    }
  },
  {
    "step": {
      "step_id": "read_after_patch",
      "tool_name": "get_text_file_contents",
      "parameters": {
        "file_paths": [
          "/tmp/test_mcp_file.txt"
        ]
      },
      "description": "Verify that the patch operation was successful by reading the entire file again."
    },
    "substituted_params": {
      "file_paths": [
        "/tmp/test_mcp_file.txt"
      ]
    },
    "result": {
      "status": "success",
      "result": "{\n  \"/tmp/test_mcp_file.txt\": {\n    \"lines\": [\n      \"Line 0\",\n      \"Line 2\",\n      \"Line 3\",\n      \"Line 4\",\n      \"Appended Line\"\n    ],\n    \"hash\": \"3a9750fc76c7dcdae0d89213a4296ea9ea44b09c399cafb06a5949149f3168f3\"\n  }\n}"
    }
  },
  {
    "step": {
      "step_id": "patch_with_wrong_hash",
      "tool_name": "patch_text_file_contents",
      "parameters": {
        "file_path": "/tmp/test_mcp_file.txt",
        "content_patches": [
          {
            "position": 0,
            "new_content": "Another Patch"
          }
        ],
        "expected_hash": "wrong_hash_123"
      },
      "description": "Attempt to apply patch with incorrect hash to test concurrency control failure handling."
    },
    "substituted_params": {
      "file_path": "/tmp/test_mcp_file.txt",
      "content_patches": [
        {
          "position": 0,
          "new_content": "Another Patch"
        }
      ],
      "expected_hash": "wrong_hash_123"
    },
    "result": {
      "status": "success",
      "result": "Hash mismatch: Current hash 3a9750fc76c7dcdae0d89213a4296ea9ea44b09c399cafb06a5949149f3168f3 does not match expected hash wrong_hash_123. Changes not applied."
    }
  },
  {
    "step": {
      "step_id": "read_partial_file",
      "tool_name": "get_text_file_contents",
      "parameters": {
        "file_paths": [
          "/tmp/test_mcp_file.txt"
        ],
        "start_line": 1,
        "end_line": 3
      },
      "description": "Read partial content (lines 1-2) to test range-based reading functionality."
    },
    "substituted_params": {
      "file_paths": [
        "/tmp/test_mcp_file.txt"
      ],
      "start_line": 1,
      "end_line": 3
    },
    "result": {
      "status": "success",
      "result": "{\n  \"/tmp/test_mcp_file.txt\": {\n    \"lines\": [\n      \"Line 2\",\n      \"Line 3\"\n    ],\n    \"hash\": \"3a9750fc76c7dcdae0d89213a4296ea9ea44b09c399cafb06a5949149f3168f3\"\n  }\n}"
    }
  },
  {
    "step": {
      "step_id": "attempt_read_nonexistent_file",
      "tool_name": "get_text_file_contents",
      "parameters": {
        "file_paths": [
          "/tmp/nonexistent_file.txt"
        ]
      },
      "description": "Try to read a non-existent file to test error handling."
    },
    "substituted_params": {
      "file_paths": [
        "/tmp/nonexistent_file.txt"
      ]
    },
    "result": {
      "status": "error",
      "result": "{\n  \"error\": \"File not found: /tmp/nonexistent_file.txt\"\n}"
    }
  },
  {
    "step": {
      "step_id": "delete_test_file",
      "tool_name": "create_text_file",
      "parameters": {
        "file_path": "/tmp/test_mcp_file.txt",
        "content": ""
      },
      "description": "Cleanup step: Delete or reset the test file by overwriting with empty content."
    },
    "substituted_params": {
      "file_path": "/tmp/test_mcp_file.txt",
      "content": ""
    },
    "result": {
      "status": "success",
      "result": "File created successfully at /tmp/test_mcp_file.txt"
    }
  }
]