Develop an automated academic paper search and query MCP server capable of implementing the following functions: search academic papers based on keywords and result quantity limits through the search_papers method, returning formatted paper lists from Semantic Scholar and Crossref including title, author, year, and DOI; retrieve detailed paper information including title, author, abstract, and publication venue through the fetch_paper_details method based on paper ID (such as DOI or Semantic Scholar ID) and specified source (Semantic Scholar or Crossref); search papers based on topic keywords, optional year range, and result quantity limits through the search_by_topic method, prioritizing Semantic Scholar with fallback to general search.
Develop an automated arXiv academic paper search, download, and reading MCP server capable of implementing the following functions: support searching arXiv papers based on user input query conditions and return matching paper lists through the search_papers method; download specified arXiv paper PDF files and store them locally for quick access through the download_paper method; list locally stored papers, supporting query and management of downloaded papers through the list_papers method; read specified paper content, providing access to paper text through the read_paper method.
Develop an automated DuckDuckGo search and web content scraping MCP server capable of implementing the following functions, exposed through the MCP tool interface: implement the DuckDuckGo_search method, capable of automatically retrieving relevant information on the DuckDuckGo search engine based on user input queries, and returning search results in a structured, easy-to-understand format; implement the fetch_content method, capable of automatically scraping and parsing the main text content of a webpage based on user input URL, returning it to the user after removing irrelevant elements.
Develop an automated duffeld flight information query MCP server capable of implementing the following functions: query flight information based on departure, destination, date, cabin class and other parameters through the search_flights method, supporting one-way, round-trip and multi-city flight queries, and returning results containing detailed information such as price, flight time, airline, etc.; obtain detailed information about specific flight offers through the get_offer_details method; handle multi-city flight queries specifically through the search_multi_city method, supporting complex itinerary planning.
Develop an automated Hugging Face resource management MCP server capable of implementing the following functions, exposed through the MCP tool interface: 1. Implement the search-models method, capable of automatically retrieving relevant models on Hugging Face Hub based on user input keywords, authors, tags, etc., and returning a structured model list. 2. Implement the get-model-info method, capable of automatically obtaining detailed information about a model based on user input model ID, including author, tags, downloads, description, etc. 3. Implement the search-datasets method, capable of automatically retrieving relevant datasets on Hugging Face Hub based on user input keywords, authors, tags, etc., and returning a structured dataset list. 4. Implement the get-dataset-info method, capable of automatically obtaining detailed information about a dataset based on user input dataset ID, including author, tags, downloads, description, etc. 5. Implement the search-spaces method, capable of automatically retrieving relevant Spaces on Hugging Face Hub based on user input keywords, authors, tags, SDK, etc., and returning a structured Spaces list. 6. Implement the get-space-info method, capable of automatically obtaining detailed information about a Space based on user input Space ID, including author, tags, SDK, description, etc. 7. Implement the get-paper-info method, capable of automatically obtaining detailed information about a paper based on user input arXiv paper ID, including title, author, abstract, and related implementations. 8. Implement the get-daily-papers method, capable of automatically obtaining Hugging Face daily featured paper list, containing title, author, abstract, etc. 9. Implement the search-collections method, capable of automatically retrieving relevant collections on Hugging Face Hub based on user input owner, items, keywords, etc., and returning a structured collection list. 10. Implement the get-collection-info method, capable of automatically obtaining detailed information about a collection based on user input collection namespace and ID, including title, owner, description, items, etc.
Develop an automated image format conversion MCP server capable of implementing the conversion of various image file formats (such as PNG, JPEG, BMP, GIF, etc.) through the convert_image method, supporting processing of RGBA images with transparency, automatically executing appropriate color space conversions, and saving the converted images to a specified directory, while providing complete error handling and conversion status feedback.
Develop a markdown conversion MCP server, requiring full use of the markitdown library, capable of converting various content formats (including HTTP webpages, HTTPS webpages, local files, and data URIs) into structured Markdown format through the convert_to_markdown method, supporting preservation of original content's heading hierarchy, lists, links, tables and other structural elements, while supporting multiple transport protocols for service access.
Develop an automated image search, download, and icon generation MCP server capable of implementing the following functions, exposed through the MCP tool interface: 1. Implement the search_images method, capable of automatically retrieving relevant images from mainstream image sources such as unsplash, pexels, or pixabay based on user input keywords, and returning structured results containing image links, authors, etc. 2. Implement the download_image method, capable of automatically downloading and saving images to a specified directory based on user input image URL and filename, returning saving status and path information. 3. Implement the generate_icon method, capable of automatically generating icon images of specified sizes based on user input icon description words and saving them to a specified directory; if cloud generation service is not configured, simulate generation with local sample icons.
Develop an automated Word document processing MCP server capable of implementing document creation (create_document), opening (open_document), saving (save_document), saving as (save_as_document), and creating document copies (create_document_copy); supporting paragraph addition (add_paragraph), heading addition (add_heading), table addition (add_table), and page break addition (add_page_break); capable of retrieving document information (get_document_info), searching text (search_text), finding and replacing (find_and_replace, search_and_replace), deleting paragraphs (delete_paragraph), and deleting specified text (delete_text); supporting table operations including row addition (add_table_row), row deletion (delete_table_row), cell editing (edit_table_cell), cell merging (merge_table_cells), and table splitting (split_table); and capable of setting page margins (set_page_margins), replacing section content based on headings (replace_section), and editing section content based on keywords (edit_section_by_keyword).
Develop an automated file retrieval processing MCP server based on ctypes loading everything.dll file, capable of implementing high-speed search of Windows files and folders, supporting multiple search syntaxes (such as wildcards, regex, path, size, time, attributes, etc.), returning detailed file information based on user input query conditions, while supporting advanced features such as result sorting, size limits, case sensitivity, whole word matching, and regex matching.
Develop an automated Git repository management MCP server capable of implementing the following functions: initialize repositories using git_init, view status using git_status, add files to staging area using git_add, view unstaged and staged differences using git_diff_unstaged and git_diff_staged respectively, compare branches or commits using git_diff, commit changes using git_commit, unstage changes using git_reset, view commit history using git_log, create branches using git_create_branch, switch branches using git_checkout, and display detailed commit content using git_show.
Develop an automated PDF file processing MCP server capable of implementing the following functions: 1. Merge multiple PDF files into one file through the merge-pdfs method; 2. Extract specific pages from PDF files and save them as new files through the extract-pages method; 3. Search for PDF files matching specific patterns in specified directories through the search-pdfs method; 4. Merge PDF files according to specified order patterns through the merge-pdfs-ordered method, supporting exact and fuzzy matching; 5. Analyze a target PDF file's content and find related PDF files through the find-related-pdfs method, capable of recognizing filename patterns and content associations.
Develop an automated data exploration and analysis MCP server capable of implementing the following functions: load CSV file data and store it in memory through the load_csv method, supporting simultaneous operation of multiple datasets; execute Python data analysis scripts through the run_script method, supporting mainstream data analysis libraries such as pandas, numpy, scipy, sklearn, and statsmodels, capable of executing various statistical analyses and data operations, and supporting saving processing results to memory for subsequent operations; also supporting exploration-data prompts, automatically analyzing data structure, generating data exploration plans, and executing data visualizations with deep insights to provide comprehensive data analysis functionality.
Develop an MCP server using financialdatasets API for financial market data query and analysis, capable of implementing the following functions: retrieve specified company's financial statements through the get_income_statements method, supporting stock code, reporting period (such as annual, quarterly, TTM), and return quantity limits; retrieve company balance sheets through the get_balance_sheets method, supporting the same parameter settings; extract company cash flow statements through the get_cash_flows method, providing structured cash flow data; query historical price data of specified stocks through the get_stock_prices method, supporting custom time ranges; obtain latest financial news related to companies or markets through the get_market_news method; retrieve company profiles through the get_company_profile method, including industry and location information; obtain analyst forecast data through the get_analyst_estimates method, such as target prices and earnings forecasts; retrieve company dividend history through the get_dividend_history method; query stock split history through the get_splits_history method; obtain company historical financial report data through the get_earnings_history method, such as earnings per share; retrieve company financial ratios through the get_financial_ratios method, such as price-earnings ratio and debt-to-equity ratio; obtain company equity structure data through the get_ownership_data method, such as institutional shareholding percentage.
Develop an automated Web search processing MCP server through Tavily API implementing the following functions: conduct comprehensive web searches through the tavily_web_search method, supporting basic or advanced search depths, precisely controlling search scope through including or excluding specific domains, and returning structured webpage content; directly generate answers with supporting evidence based on query content through the tavily_answer_search method, suitable for questions requiring specific answers, using advanced search depth by default; specifically search recent news articles through the tavily_news_search method, supporting query time effectiveness limitations (up to 365 days), and specifying included or excluded news sources, particularly suitable for current events and trend reporting. All tools support result quantity limits and return retrieval results in a clear format including titles, URLs, and content summaries.
Develop an automated text file processing MCP server capable of implementing the following functions: read the contents of multiple text files through the get_text_file_contents method, supporting reading by line range and returning file hash values for concurrent control; create new text files and write content through the create_text_file method; append content to existing text files through the append_text_file_contents method; delete specific range of content in text files through the delete_text_file_contents method; insert content at specified positions in text files through the insert_text_file_contents method; apply precise modifications to files through the patch_text_file_contents method, supporting hash value verification to avoid conflicts.
Develop an automated MongoDB database management MCP server capable of implementing the following functions: list all available databases through the mcp_list_databases method; list all collections in a specified database through the mcp_list_collections method; insert new documents into specified databases and collections through the mcp_insert_document method; query documents meeting conditions in specified databases and collections through the mcp_find_documents method, supporting projection and result quantity limits; update documents in specified databases and collections through the mcp_update_document method, supporting single document or multi-document updates; delete documents in specified databases and collections through the mcp_delete_document method, supporting single document or batch deletion modes.
Develop an automated SSH remote management MCP server capable of implementing the following functions: automatically establish SSH connections using the connect method, supporting password or key authentication, and automatically managing sessions; automatically disconnect specified SSH sessions and release resources using the disconnect method; automatically list all currently active SSH session information using the list_sessions method; automatically execute commands in specified SSH sessions using the execute method, supporting standard input and timeout settings, and returning standard output, error output, and exit status; automatically upload local files to specified paths on remote SSH servers using the upload method; automatically download files from remote SSH servers to specified local paths using the download method.
Develop an automated MySQL database management MCP server capable of implementing the following functions: list all available MySQL data tables through the list_resources method and provide access to them as resources; read the complete data content of specified tables through the read_resource method, returning all records in the table in row and column format (limited to a maximum of 100 records); execute custom SQL query statements through the execute_sql tool, supporting various SQL operations (such as SELECT, SHOW, INSERT, UPDATE, etc.), and returning structured results according to query type, including affected row counts or query result sets.
Develop an automated Word document processing MCP server capable of implementing the following functions: create new Word documents and set metadata through the create_document method; extract full text content through the get_document_text method; add paragraph text through the add_paragraph method; add headings of various levels through the add_heading method; create custom text styles through the create_custom_style method; format specified text areas through the format_text method; set document password protection through the protect_document method; add document footnotes through the add_footnote_to_document method; retrieve specific paragraph text through the get_paragraph_text_from_document method; search for specified text in documents through the find_text_in_document method. Also supporting advanced formatting functions such as tables, images, page separations, headers and footers, as well as extended functions such as document protection, copyright management, and PDF conversion.
Develop an MCP server integrated with OpenCV, providing image processing and computer vision functionality, capable of implementing the following functions: basic image operations through methods such as save_image_tool for saving image files, resize_image_tool for adjusting image dimensions, crop_image_tool for cropping image areas, and get_image_stats_tool for retrieving image statistics; advanced image processing through methods such as apply_filter_tool for applying image filters, detect_edges_tool for detecting image edges, apply_threshold_tool for threshold segmentation, detect_contours_tool for detecting image contours, and find_shapes_tool for finding image shapes.
Develop an automated local Outlook management MCP server capable of implementing the following functions using win32: list all available Outlook mail folders through the list_folders method; retrieve email title lists within specified days (supporting specified folders) and cache email information through the list_recent_emails method; search emails by contact or keyword within specified time periods and folders, returning matching email title lists through the search_emails method; retrieve detailed content of previously listed emails, including body and attachment information, through the get_email_by_number method; reply to emails with specified numbers and send reply content through the reply_to_email_by_number method; create and send new emails, supporting subject, body, recipients, and carbon copies through the compose_email method.
Develop an automated screenshot MCP server capable of implementing the following functions: capture current screen content and return it as an image object through the take_screenshot method; capture screen and return directly displayable image content through the take_screenshot_image method; save screenshots to user-specified local file paths, supporting custom filenames, through the take_screenshot_path method.
Develop an automated image retrieval processing MCP server capable of implementing automatic searching of images on the Unsplash platform based on keywords, pagination, sorting, color, and image orientation through the search_photos method, returning result lists containing detailed information such as image ID, description, multi-size image URLs, width, and height.
Develop an automated academic literature management MCP server capable of implementing access to and operation of Zotero literature libraries, providing the following functions: retrieve detailed metadata of specified Zotero entries through the get_item_metadata method, supporting precise queries through item keys; extract full text content of Zotero entries through the get_item_fulltext method; implement flexible searches in Zotero libraries through the search_items method, supporting searches by title, creator, year, or full text, and returning formatted search result lists.

