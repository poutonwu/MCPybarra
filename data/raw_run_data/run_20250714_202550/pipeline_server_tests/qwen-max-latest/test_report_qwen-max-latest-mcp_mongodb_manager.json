{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "qwen-max-latest-mcp_mongodb_manager",
  "server_path": "workspace/pipeline-output-servers/qwen-max-latest/mcp_mongodb_manager/refined/server.py",
  "timestamp": "2025-07-14T20:31:23.662843",
  "tools": [
    {
      "name": "mcp_list_databases",
      "description": "\n    Lists all available databases in the MongoDB instance.\n\n    Returns:\n        A JSON-formatted string containing a list of database names.\n\n    Example:\n        mcp_list_databases()\n        => '[\"admin\", \"config\", \"local\"]'\n    ",
      "args_schema": {
        "properties": {},
        "title": "mcp_list_databasesArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_list_collections",
      "description": "\n    Lists all collections within a specified database in the MongoDB instance.\n\n    Args:\n        database_name: The name of the database whose collections need to be listed.\n\n    Returns:\n        A JSON-formatted string containing a list of collection names.\n\n    Raises:\n        ValueError: If the database name is invalid.\n        RuntimeError: If an error occurs while listing collections.\n\n    Example:\n        mcp_list_collections(database_name=\"test_db\")\n        => '[\"users\", \"products\"]'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          }
        },
        "required": [
          "database_name"
        ],
        "title": "mcp_list_collectionsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_insert_document",
      "description": "\n    Inserts a new document into a specified collection within a specified database.\n\n    Args:\n        database_name: The name of the target database.\n        collection_name: The name of the target collection.\n        document: The document to insert, represented as a Python dictionary.\n\n    Returns:\n        A JSON-formatted string containing the ID of the newly inserted document.\n\n    Raises:\n        ValueError: If any argument is invalid.\n        RuntimeError: If an error occurs during document insertion.\n\n    Example:\n        mcp_insert_document(\n            database_name=\"test_db\",\n            collection_name=\"users\",\n            document={\"name\": \"Alice\", \"age\": 30}\n        )\n        => '\"65a4f8b9d3c5f2e4d8e9f0a1\"'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "document": {
            "title": "Document",
            "type": "object"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "document"
        ],
        "title": "mcp_insert_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_find_documents",
      "description": "\n    Queries documents from a specified collection within a specified database, with optional projection and result limit.\n\n    Args:\n        database_name: The name of the target database.\n        collection_name: The name of the target collection.\n        query: A query filter represented as a Python dictionary. Defaults to None.\n        projection: Specifies fields to include or exclude in the returned documents. Defaults to None.\n        limit: Limits the number of documents returned. Defaults to None.\n\n    Returns:\n        A JSON-formatted string containing a list of matching documents.\n\n    Raises:\n        ValueError: If any argument is invalid.\n        RuntimeError: If an error occurs during querying.\n\n    Example:\n        mcp_find_documents(\n            database_name=\"test_db\",\n            collection_name=\"users\",\n            query={\"age\": {\"$gt\": 25}},\n            projection={\"_id\": 0, \"name\": 1},\n            limit=2\n        )\n        => '[{\"name\": \"Alice\"}, {\"name\": \"Bob\"}]'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "default": null,
            "title": "Query",
            "type": "object"
          },
          "projection": {
            "default": null,
            "title": "Projection",
            "type": "object"
          },
          "limit": {
            "default": null,
            "title": "Limit",
            "type": "integer"
          }
        },
        "required": [
          "database_name",
          "collection_name"
        ],
        "title": "mcp_find_documentsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_update_document",
      "description": "\n    Updates one or multiple documents in a specified collection within a specified database.\n\n    Args:\n        database_name: The name of the target database.\n        collection_name: The name of the target collection.\n        filter_query: A filter to identify the documents to update.\n        update_data: The update operations to apply, represented as a Python dictionary.\n        multi: If True, updates all matching documents; otherwise, updates only the first match.\n\n    Returns:\n        A JSON-formatted string containing the number of documents modified.\n\n    Raises:\n        ValueError: If any argument is invalid.\n        RuntimeError: If an error occurs during updating.\n\n    Example:\n        mcp_update_document(\n            database_name=\"test_db\",\n            collection_name=\"users\",\n            filter_query={\"age\": {\"$lt\": 30}},\n            update_data={\"$set\": {\"status\": \"inactive\"}},\n            multi=True\n        )\n        => '3'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "filter_query": {
            "title": "Filter Query",
            "type": "object"
          },
          "update_data": {
            "title": "Update Data",
            "type": "object"
          },
          "multi": {
            "title": "Multi",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "filter_query",
          "update_data",
          "multi"
        ],
        "title": "mcp_update_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_delete_document",
      "description": "\n    Deletes one or multiple documents from a specified collection within a specified database.\n\n    Args:\n        database_name: The name of the target database.\n        collection_name: The name of the target collection.\n        filter_query: A filter to identify the documents to delete.\n        multi: If True, deletes all matching documents; otherwise, deletes only the first match.\n\n    Returns:\n        A JSON-formatted string containing the number of documents deleted.\n\n    Raises:\n        ValueError: If any argument is invalid.\n        RuntimeError: If an error occurs during deletion.\n\n    Example:\n        mcp_delete_document(\n            database_name=\"test_db\",\n            collection_name=\"users\",\n            filter_query={\"status\": \"inactive\"},\n            multi=True\n        )\n        => '2'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "filter_query": {
            "title": "Filter Query",
            "type": "object"
          },
          "multi": {
            "title": "Multi",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "filter_query",
          "multi"
        ],
        "title": "mcp_delete_documentArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "mcp_list_databases": [
      {
        "case_name": "Basic Database Listing",
        "purpose": "验证工具可以成功列出MongoDB实例中的所有数据库",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.021009445190429688,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Database List Check",
        "purpose": "验证当没有可用数据库时，工具是否返回空数组",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.012523889541625977,
        "is_functional_test": true
      },
      {
        "case_name": "Database List Format Validation",
        "purpose": "验证返回结果是否为合法的JSON格式字符串",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.010007858276367188,
        "is_functional_test": true
      },
      {
        "case_name": "Non-Authenticated Access Attempt",
        "purpose": "在无认证情况下尝试调用该工具，验证是否受到安全限制",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.007349491119384766,
        "is_functional_test": false
      },
      {
        "case_name": "Connection Failure Handling",
        "purpose": "验证当MongoDB连接失败时工具能否优雅处理错误",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.009010076522827148,
        "is_functional_test": false
      },
      {
        "case_name": "Permission Denied Handling",
        "purpose": "验证用户权限不足时是否能正确返回错误信息",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.004451274871826172,
        "is_functional_test": false
      },
      {
        "case_name": "Zero Databases in Instance",
        "purpose": "测试MongoDB实例中没有任何数据库的情况下的响应",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.0073206424713134766,
        "is_functional_test": true
      },
      {
        "case_name": "Special Characters in DB Names",
        "purpose": "验证工具是否能正确处理包含特殊字符的数据库名称",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.008880376815795898,
        "is_functional_test": true
      }
    ],
    "mcp_list_collections": [
      {
        "case_name": "Basic Collection Listing",
        "purpose": "验证工具可以成功列出指定数据库中的所有集合",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "[\"a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\", \"new_collection\", \"test_collection\", \"empty_docs\", \"invalid/collection*name\", \"user_profiles\", \"long_key_collection\", \"test_collection'; DROP COLLECTION test_collection;--\", \"large_data\", \"special_chars_collection\", \"binary_data_collection\", \"nonexistent_collection\", \"a_very_long_collection_name_that_exceeds_normal_limits_and_might_cause_issues\", \"users\"]"
        },
        "execution_time": 0.00683140754699707,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Collection List Check",
        "purpose": "验证当指定数据库中没有集合时，工具是否返回空数组",
        "args": {
          "database_name": "empty_db"
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.005308389663696289,
        "is_functional_test": true
      },
      {
        "case_name": "Special Characters in Collection Names",
        "purpose": "验证工具是否能正确处理包含特殊字符的集合名称",
        "args": {
          "database_name": "db@#_测试"
        },
        "response": {
          "result": "[\"test_collection\", \"new_collection\", \"users\"]"
        },
        "execution_time": 0.004049539566040039,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Database Name Handling",
        "purpose": "验证当提供无效的数据库名称时，工具是否抛出ValueError",
        "args": {
          "database_name": ""
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_list_collections: Invalid database name: ''. Must be a non-empty string."
        },
        "execution_time": 0.004778146743774414,
        "is_functional_test": false
      },
      {
        "case_name": "Non-Existent Database Handling",
        "purpose": "验证当指定的数据库不存在时，工具是否抛出RuntimeError",
        "args": {
          "database_name": "does_not_exist_db"
        },
        "response": {
          "result": "[\"new_collection\", \"test_collection\"]"
        },
        "execution_time": 0.0075092315673828125,
        "is_functional_test": false
      },
      {
        "case_name": "Restricted Database Access",
        "purpose": "验证用户权限不足时是否能正确返回错误信息",
        "args": {
          "database_name": "restricted_db"
        },
        "response": {
          "result": "[\"secure_collection\"]"
        },
        "execution_time": 0.004001617431640625,
        "is_functional_test": false
      },
      {
        "case_name": "Offline Database Handling",
        "purpose": "验证当目标数据库处于离线状态时，工具能否优雅处理错误",
        "args": {
          "database_name": "offline_db"
        },
        "response": {
          "result": "[\"users\"]"
        },
        "execution_time": 0.00799870491027832,
        "is_functional_test": false
      }
    ],
    "mcp_insert_document": [
      {
        "case_name": "Basic Document Insertion",
        "purpose": "验证工具可以成功将文档插入到指定数据库和集合中",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "document": {
            "name": "Alice",
            "age": 30
          }
        },
        "response": {
          "result": "\"6874f8d7935c390f10319632\""
        },
        "execution_time": 0.008132219314575195,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document into Non-Existent Collection",
        "purpose": "验证当目标集合不存在时，是否能自动创建并插入文档",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "document": {
            "username": "new_user"
          }
        },
        "response": {
          "result": "\"6874f8d7935c390f10319633\""
        },
        "execution_time": 0.003507375717163086,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document with Special Characters in DB and Collection Name",
        "purpose": "验证包含特殊字符的数据库和集合名称是否支持插入文档",
        "args": {
          "database_name": "db@#_测试",
          "collection_name": "special_chars_collection",
          "document": {
            "key!@#": "value$%^"
          }
        },
        "response": {
          "result": "\"6874f8d7935c390f10319634\""
        },
        "execution_time": 0.018253564834594727,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Invalid Document Type",
        "purpose": "验证传入非字典类型作为document参数时是否抛出ValueError",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "document": "not_a_dictionary"
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_insert_document: 1 validation error for mcp_insert_documentArguments\ndocument\n  Input should be a valid dictionary [type=dict_type, input_value='not_a_dictionary', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/dict_type"
        },
        "execution_time": 0.009999990463256836,
        "is_functional_test": false
      },
      {
        "case_name": "Insert into Restricted Database",
        "purpose": "验证用户权限不足时是否能正确返回错误信息",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "secure_collection",
          "document": {
            "sensitive_data": "secret"
          }
        },
        "response": {
          "result": "\"6874f8d7935c390f10319635\""
        },
        "execution_time": 0.005004405975341797,
        "is_functional_test": false
      },
      {
        "case_name": "Insert into Offline Database",
        "purpose": "验证当目标数据库处于离线状态时，工具能否优雅处理错误",
        "args": {
          "database_name": "offline_db",
          "collection_name": "users",
          "document": {
            "name": "Offline User"
          }
        },
        "response": {
          "result": "\"6874f8d7935c390f10319636\""
        },
        "execution_time": 0.0060002803802490234,
        "is_functional_test": false
      },
      {
        "case_name": "Insert Empty Document",
        "purpose": "验证空字典文档是否可成功插入",
        "args": {
          "database_name": "test_db",
          "collection_name": "empty_docs",
          "document": {}
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_insert_document: The document must be a non-empty dictionary."
        },
        "execution_time": 0.006000518798828125,
        "is_functional_test": true
      }
    ],
    "mcp_find_documents": [
      {
        "case_name": "Basic Document Query",
        "purpose": "验证工具可以成功从指定数据库和集合中查询文档，使用默认参数",
        "args": {
          "database_name": "test_db",
          "collection_name": "users"
        },
        "response": {
          "result": "[{\"_id\": \"6872ad03424cddc98ebe1c0b\", \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6872bc93b11f255c82054b2a\", \"name\": \"John\", \"age\": 35, \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6872bc93b11f255c82054b2c\", \"user@name\": \"Eve\", \"age#\": 28, \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6872bc93b11f255c82054b2d\", \"a_very_long_key_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\": \"value\", \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6872bc93b11f255c82054b2e\", \"name\": \"Invalid\", \"age\": \"thirty\", \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6874f8d7935c390f10319632\", \"name\": \"Alice\", \"age\": 30}]"
        },
        "execution_time": 0.008000373840332031,
        "is_functional_test": true
      },
      {
        "case_name": "Document Query with Filter",
        "purpose": "验证工具可以使用查询条件过滤文档",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "age": {
              "$gt": 25
            }
          }
        },
        "response": {
          "result": "[{\"_id\": \"6872bc93b11f255c82054b2a\", \"name\": \"John\", \"age\": 35, \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6874f8d7935c390f10319632\", \"name\": \"Alice\", \"age\": 30}]"
        },
        "execution_time": 0.006000041961669922,
        "is_functional_test": true
      },
      {
        "case_name": "Document Query with Projection",
        "purpose": "验证工具可以使用字段投影返回指定字段",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "age": {
              "$gt": 25
            }
          },
          "projection": {
            "_id": 0,
            "name": 1
          }
        },
        "response": {
          "result": "[{\"name\": \"John\"}, {\"name\": \"Alice\"}]"
        },
        "execution_time": 0.005252361297607422,
        "is_functional_test": true
      },
      {
        "case_name": "Document Query with Limit",
        "purpose": "验证工具可以限制返回文档的数量",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "age": {
              "$gt": 25
            }
          },
          "projection": {
            "_id": 0,
            "name": 1
          },
          "limit": 2
        },
        "response": {
          "result": "[{\"name\": \"John\"}, {\"name\": \"Alice\"}]"
        },
        "execution_time": 0.008010149002075195,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Collection Query",
        "purpose": "验证当集合为空时，工具是否返回空数组",
        "args": {
          "database_name": "test_db",
          "collection_name": "empty_docs"
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.00599980354309082,
        "is_functional_test": true
      },
      {
        "case_name": "SQL Injection Attempt in Collection Name",
        "purpose": "验证工具是否能安全处理包含潜在SQL注入的集合名称",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection'; DROP COLLECTION test_collection;--"
        },
        "response": {
          "result": "[{\"_id\": \"68710cc7ea7bb66ae3410460\", \"key\": \"injection attempt\"}]"
        },
        "execution_time": 0.008082866668701172,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Database Name Handling",
        "purpose": "验证当提供无效的数据库名称时，工具是否抛出ValueError",
        "args": {
          "database_name": "",
          "collection_name": "users"
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_find_documents: Invalid database name: ''. Must be a non-empty string."
        },
        "execution_time": 0.004998922348022461,
        "is_functional_test": false
      },
      {
        "case_name": "Non-Existent Collection Handling",
        "purpose": "验证当指定的集合不存在时，工具是否抛出RuntimeError",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection"
        },
        "response": {
          "result": "[{\"_id\": \"686395fe8bb57d80cdb0c4a3\", \"key\": \"updated_value\"}, {\"_id\": \"68710caed665c89a8d5748ba\", \"name\": \"Alice\", \"email\": \"alice@example.com\"}, {\"_id\": \"68710cc7ea7bb66ae341045d\", \"data\": \"new collection should be created\"}, {\"_id\": \"687258207c1609156ee10ee2\", \"key\": \"value\"}, {\"_id\": \"687259cf14abe8d498d2f50a\", \"key\": \"value\"}, {\"_id\": \"68729041dc66f8998dec5876\", \"key\": \"value\"}, {\"_id\": \"687291c80d1fbb52f4c8c1b4\", \"key\": \"value\"}, {\"_id\": \"6872ad03424cddc98ebe1c09\", \"name\": \"Bob\", \"age\": 30}, {\"_id\": \"6872b2dfbde7bc28413c274f\", \"key\": \"value\"}, {\"_id\": \"6872bc93b11f255c82054b2b\", \"name\": \"Charlie\", \"age\": 35}, {\"_id\": \"6872bf1e0e2fc95fbcc97acf\", \"key\": \"value\"}, {\"_id\": \"6872c264cf57d11985b19217\", \"key\": \"value\"}, {\"_id\": \"6874f8d7935c390f10319633\", \"username\": \"new_user\"}]"
        },
        "execution_time": 0.004999637603759766,
        "is_functional_test": false
      }
    ],
    "mcp_update_document": [
      {
        "case_name": "Basic Document Update",
        "purpose": "验证工具可以成功更新匹配的第一个文档",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "age": {
              "$lt": 30
            }
          },
          "update_data": {
            "$set": {
              "status": "inactive"
            }
          },
          "multi": false
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.01083683967590332,
        "is_functional_test": true
      },
      {
        "case_name": "Multi Document Update",
        "purpose": "验证工具可以批量更新所有匹配的文档",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "status": "active"
          },
          "update_data": {
            "$set": {
              "last_login": "2023-10-01"
            }
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.004682302474975586,
        "is_functional_test": true
      },
      {
        "case_name": "Update With Empty Filter",
        "purpose": "验证使用空过滤器时是否更新符合条件的默认第一个文档",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {},
          "update_data": {
            "$inc": {
              "retry_count": 1
            }
          },
          "multi": false
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_update_document: Filter query must be a non-empty dictionary."
        },
        "execution_time": 0.00651240348815918,
        "is_functional_test": true
      },
      {
        "case_name": "Update Nonexistent Collection",
        "purpose": "验证当集合不存在时是否抛出运行时错误",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "filter_query": {
            "name": "test"
          },
          "update_data": {
            "$set": {
              "status": "updated"
            }
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.005994319915771484,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Database Name Handling",
        "purpose": "验证提供无效数据库名称时是否抛出ValueError",
        "args": {
          "database_name": "",
          "collection_name": "users",
          "filter_query": {
            "age": {
              "$gt": 25
            }
          },
          "update_data": {
            "$set": {
              "status": "updated"
            }
          },
          "multi": true
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_update_document: Invalid database name: ''. Must be a non-empty string."
        },
        "execution_time": 0.007001161575317383,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Query and Update",
        "purpose": "验证工具是否能正确处理包含特殊字符的查询和更新数据",
        "args": {
          "database_name": "db@#_测试",
          "collection_name": "special_chars_collection",
          "filter_query": {
            "username": "user@domain.com"
          },
          "update_data": {
            "$set": {
              "email": "new.email+123@example.co.uk"
            }
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.0054013729095458984,
        "is_functional_test": true
      },
      {
        "case_name": "Restricted Database Update Attempt",
        "purpose": "验证在权限受限的数据库中尝试更新时是否返回错误",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "secure_collection",
          "filter_query": {
            "secret": true
          },
          "update_data": {
            "$set": {
              "access_level": 99
            }
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.0060024261474609375,
        "is_functional_test": false
      },
      {
        "case_name": "Offline Database Update Handling",
        "purpose": "验证当目标数据库处于离线状态时，工具能否优雅处理错误",
        "args": {
          "database_name": "offline_db",
          "collection_name": "users",
          "filter_query": {
            "id": 123
          },
          "update_data": {
            "$set": {
              "name": "John Doe"
            }
          },
          "multi": false
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.004995107650756836,
        "is_functional_test": false
      }
    ],
    "mcp_delete_document": [
      {
        "case_name": "Basic Document Deletion",
        "purpose": "验证工具可以成功删除匹配查询条件的文档（单条）",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "status": "inactive"
          },
          "multi": false
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.006000518798828125,
        "is_functional_test": true
      },
      {
        "case_name": "Multi Document Deletion",
        "purpose": "验证工具在 multi=True 情况下可删除所有匹配查询条件的文档",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "status": "inactive"
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.009000778198242188,
        "is_functional_test": true
      },
      {
        "case_name": "Delete with Empty Filter Query",
        "purpose": "验证使用空 filter_query 删除所有文档的功能",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {},
          "multi": true
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_delete_document: Filter query must be a non-empty dictionary."
        },
        "execution_time": 0.003998279571533203,
        "is_functional_test": true
      },
      {
        "case_name": "Delete from Non-Existent Collection",
        "purpose": "验证当集合不存在时，工具是否抛出 RuntimeError",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "filter_query": {
            "status": "inactive"
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.007001638412475586,
        "is_functional_test": false
      },
      {
        "case_name": "Delete from Restricted Database",
        "purpose": "验证用户权限不足时是否能正确返回错误信息",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "secure_collection",
          "filter_query": {
            "status": "inactive"
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.008002758026123047,
        "is_functional_test": false
      },
      {
        "case_name": "Delete with Invalid Database Name",
        "purpose": "验证当数据库名称为空字符串时是否抛出 ValueError",
        "args": {
          "database_name": "",
          "collection_name": "users",
          "filter_query": {
            "status": "inactive"
          },
          "multi": true
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_delete_document: Invalid database name: ''. Must be a non-empty string."
        },
        "execution_time": 0.003992795944213867,
        "is_functional_test": false
      },
      {
        "case_name": "Delete with Special Characters in DB and Collection Names",
        "purpose": "验证工具是否能处理包含特殊字符的数据库和集合名称",
        "args": {
          "database_name": "db@#_测试",
          "collection_name": "special_chars_collection",
          "filter_query": {
            "type": "temp"
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.005998849868774414,
        "is_functional_test": true
      },
      {
        "case_name": "Delete from Offline Database",
        "purpose": "验证当目标数据库处于离线状态时，工具能否优雅处理错误",
        "args": {
          "database_name": "offline_db",
          "collection_name": "users",
          "filter_query": {
            "status": "inactive"
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.007998466491699219,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 46
}