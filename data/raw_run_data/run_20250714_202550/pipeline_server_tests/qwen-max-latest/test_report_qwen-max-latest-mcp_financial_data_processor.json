{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "qwen-max-latest-mcp_financial_data_processor",
  "server_path": "workspace/pipeline-output-servers/qwen-max-latest/mcp_financial_data_processor/refined/server.py",
  "timestamp": "2025-07-14T20:27:19.579396",
  "tools": [
    {
      "name": "get_income_statements",
      "description": "\n    Fetches income statements for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n        report_period: The reporting period (e.g., 'annual', 'quarterly', 'ttm').\n        limit: The maximum number of results to return.\n\n    Returns:\n        A JSON-formatted string containing the income statement data.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_income_statements(stock_code=\"NVDA\", report_period=\"annual\", limit=10)\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          },
          "report_period": {
            "title": "Report Period",
            "type": "string"
          },
          "limit": {
            "title": "Limit",
            "type": "integer"
          }
        },
        "required": [
          "stock_code",
          "report_period",
          "limit"
        ],
        "title": "get_income_statementsArguments",
        "type": "object"
      }
    },
    {
      "name": "get_balance_sheets",
      "description": "\n    Retrieves balance sheets for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n        report_period: The reporting period (e.g., 'annual', 'quarterly', 'ttm').\n        limit: The maximum number of results to return.\n\n    Returns:\n        A JSON-formatted string containing the balance sheet data.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_balance_sheets(stock_code=\"NVDA\", report_period=\"annual\", limit=10)\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          },
          "report_period": {
            "title": "Report Period",
            "type": "string"
          },
          "limit": {
            "title": "Limit",
            "type": "integer"
          }
        },
        "required": [
          "stock_code",
          "report_period",
          "limit"
        ],
        "title": "get_balance_sheetsArguments",
        "type": "object"
      }
    },
    {
      "name": "get_cash_flows",
      "description": "\n    Extracts cash flow statements for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n        report_period: The reporting period (e.g., 'annual', 'quarterly', 'ttm').\n        limit: The maximum number of results to return.\n\n    Returns:\n        A JSON-formatted string containing the cash flow statement data.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_cash_flows(stock_code=\"NVDA\", report_period=\"annual\", limit=10)\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          },
          "report_period": {
            "title": "Report Period",
            "type": "string"
          },
          "limit": {
            "title": "Limit",
            "type": "integer"
          }
        },
        "required": [
          "stock_code",
          "report_period",
          "limit"
        ],
        "title": "get_cash_flowsArguments",
        "type": "object"
      }
    },
    {
      "name": "get_stock_prices",
      "description": "\n    Queries historical stock price data for a specified stock using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n        start_date: The start date of the historical data range (format: YYYY-MM-DD).\n        end_date: The end date of the historical data range (format: YYYY-MM-DD).\n\n    Returns:\n        A JSON-formatted string containing historical stock prices.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_stock_prices(stock_code=\"NVDA\", start_date=\"2023-01-01\", end_date=\"2023-12-31\")\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          },
          "start_date": {
            "title": "Start Date",
            "type": "string"
          },
          "end_date": {
            "title": "End Date",
            "type": "string"
          }
        },
        "required": [
          "stock_code",
          "start_date",
          "end_date"
        ],
        "title": "get_stock_pricesArguments",
        "type": "object"
      }
    },
    {
      "name": "get_market_news",
      "description": "\n    Fetches the latest financial news related to a company or market using the financialdatasets API.\n\n    Args:\n        company_name: The name of the company (e.g., 'NVIDIA').\n\n    Returns:\n        A JSON-formatted string containing the latest financial news articles.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_market_news(company_name=\"NVIDIA\")\n    ",
      "args_schema": {
        "properties": {
          "company_name": {
            "title": "Company Name",
            "type": "string"
          }
        },
        "required": [
          "company_name"
        ],
        "title": "get_market_newsArguments",
        "type": "object"
      }
    },
    {
      "name": "get_company_profile",
      "description": "\n    Retrieves a company profile including industry and location information using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n\n    Returns:\n        A JSON-formatted string containing the company's profile.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_company_profile(stock_code=\"NVDA\")\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          }
        },
        "required": [
          "stock_code"
        ],
        "title": "get_company_profileArguments",
        "type": "object"
      }
    },
    {
      "name": "get_analyst_estimates",
      "description": "\n    Gets analyst estimates such as target prices and earnings forecasts for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n\n    Returns:\n        A JSON-formatted string containing analyst estimates.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_analyst_estimates(stock_code=\"NVDA\")\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          }
        },
        "required": [
          "stock_code"
        ],
        "title": "get_analyst_estimatesArguments",
        "type": "object"
      }
    },
    {
      "name": "get_dividend_history",
      "description": "\n    Retrieves dividend history records for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n\n    Returns:\n        A JSON-formatted string containing the dividend history.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_dividend_history(stock_code=\"NVDA\")\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          }
        },
        "required": [
          "stock_code"
        ],
        "title": "get_dividend_historyArguments",
        "type": "object"
      }
    },
    {
      "name": "get_splits_history",
      "description": "\n    Queries stock split history for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n\n    Returns:\n        A JSON-formatted string containing the stock split history.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_splits_history(stock_code=\"NVDA\")\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          }
        },
        "required": [
          "stock_code"
        ],
        "title": "get_splits_historyArguments",
        "type": "object"
      }
    },
    {
      "name": "get_earnings_history",
      "description": "\n    Fetches historical earnings data, such as EPS, for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n\n    Returns:\n        A JSON-formatted string containing historical earnings data.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_earnings_history(stock_code=\"NVDA\")\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          }
        },
        "required": [
          "stock_code"
        ],
        "title": "get_earnings_historyArguments",
        "type": "object"
      }
    },
    {
      "name": "get_financial_ratios",
      "description": "\n    Gets financial ratios such as P/E and debt-to-equity for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n\n    Returns:\n        A JSON-formatted string containing financial ratios.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_financial_ratios(stock_code=\"NVDA\")\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          }
        },
        "required": [
          "stock_code"
        ],
        "title": "get_financial_ratiosArguments",
        "type": "object"
      }
    },
    {
      "name": "get_ownership_data",
      "description": "\n    Retrieves ownership structure data, such as institutional holding percentages, for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n\n    Returns:\n        A JSON-formatted string containing ownership structure data.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_ownership_data(stock_code=\"NVDA\")\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          }
        },
        "required": [
          "stock_code"
        ],
        "title": "get_ownership_dataArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "get_company_profile": [
      {
        "case_name": "Basic Company Profile Retrieval",
        "purpose": "验证工具能够成功检索一个有效股票代码的公司简介信息。",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_company_profile: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.622176170349121,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "测试当提供无效的股票代码格式时，工具是否能正确抛出错误。",
        "args": {
          "stock_code": "12345"
        },
        "response": {
          "error": "ToolException: Error executing tool get_company_profile: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.9730696678161621,
        "is_functional_test": false
      },
      {
        "case_name": "Empty Stock Code Input",
        "purpose": "测试当股票代码为空字符串时，工具是否能正确处理并抛出异常。",
        "args": {
          "stock_code": ""
        },
        "response": {
          "error": "ToolException: Error executing tool get_company_profile: Unexpected error fetching company profile: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.2600853443145752,
        "is_functional_test": false
      },
      {
        "case_name": "Non-existent Stock Code",
        "purpose": "测试当提供的股票代码在API中不存在时，工具是否能优雅地处理失败情况。",
        "args": {
          "stock_code": "XYZABC"
        },
        "response": {
          "error": "ToolException: Error executing tool get_company_profile: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.0740492343902588,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Stock Code",
        "purpose": "测试包含特殊字符的股票代码输入，验证工具是否能正确识别为非法输入。",
        "args": {
          "stock_code": "NV#DA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_company_profile: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.9701361656188965,
        "is_functional_test": false
      },
      {
        "case_name": "Maximum Length Stock Code",
        "purpose": "测试最大长度的股票代码输入，确保边界条件被正确处理。",
        "args": {
          "stock_code": "MAXLENSTOCKCODE1234567890"
        },
        "response": {
          "error": "ToolException: Error executing tool get_company_profile: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.6870954036712646,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - SQL Injection Attempt",
        "purpose": "尝试注入SQL语句作为股票代码，验证工具是否对输入进行正确校验和过滤。",
        "args": {
          "stock_code": "NVDA'; DROP TABLE companies;--"
        },
        "response": {
          "error": "ToolException: Error executing tool get_company_profile: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.5226812362670898,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Command Injection Attempt",
        "purpose": "尝试注入系统命令作为股票代码，验证工具是否对输入进行安全过滤。",
        "args": {
          "stock_code": "NVDA; rm -rf /tmp/test;"
        },
        "response": {
          "error": "ToolException: Error executing tool get_company_profile: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.8393535614013672,
        "is_functional_test": false
      }
    ],
    "get_income_statements": [
      {
        "case_name": "Basic Income Statement Retrieval",
        "purpose": "验证工具能够成功检索一个有效股票代码的年度收入报表数据。",
        "args": {
          "stock_code": "NVDA",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "result": "{\"income_statements\": [{\"ticker\": \"NVDA\", \"report_period\": \"2025-01-26\", \"fiscal_period\": \"2025-FY\", \"period\": \"annual\", \"currency\": \"USD\", \"revenue\": 130497000000.0, \"cost_of_revenue\": 32639000000.0, \"gross_profit\": 97858000000.0, \"operating_expense\": 16405000000.0, \"selling_general_and_administrative_expenses\": 3491000000.0, \"research_and_development\": 12914000000.0, \"operating_income\": 81453000000.0, \"interest_expense\": 247000000.0, \"ebit\": 84273000000.0, \"income_tax_expense\": 11146000000.0, \"net_income_discontinued_operations\": 0.0, \"net_income_non_controlling_interests\": 0.0, \"net_income\": 72880000000.0, \"net_income_common_stock\": 72880000000.0, \"preferred_dividends_impact\": 0.0, \"consolidated_income\": 72880000000.0, \"earnings_per_share\": 2.97, \"earnings_per_share_diluted\": 2.94, \"dividends_per_common_share\": 0.034, \"weighted_average_shares\": 24555000000.0, \"weighted_average_shares_diluted\": 24804000000.0}, {\"ticker\": \"NVDA\", \"report_period\": \"2024-01-28\", \"fiscal_period\": \"2024-FY\", \"period\": \"annual\", \"currency\": \"USD\", \"revenue\": 60922000000.0, \"cost_of_revenue\": 16621000000.0, \"gross_profit\": 44301000000.0, \"operating_expense\": 11329000000.0, \"selling_general_and_administrative_expenses\": 2654000000.0, \"research_and_development\": 8675000000.0, \"operating_income\": 32972000000.0, \"interest_expense\": 257000000.0, \"ebit\": 34075000000.0, \"income_tax_expense\": 4058000000.0, \"net_income_discontinued_operations\": 0.0, \"net_income_non_controlling_interests\": 0.0, \"net_income\"...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计8956字符，剩余7456字符"
        },
        "execution_time": 2.299607992172241,
        "is_functional_test": true
      },
      {
        "case_name": "Quarterly Report Retrieval",
        "purpose": "测试季度报告周期参数是否能正确获取季度收入报表数据。",
        "args": {
          "stock_code": "AAPL",
          "report_period": "quarterly",
          "limit": 5
        },
        "response": {
          "result": "{\"income_statements\": [{\"ticker\": \"AAPL\", \"report_period\": \"2025-03-29\", \"fiscal_period\": \"2025-Q2\", \"period\": \"quarterly\", \"currency\": \"USD\", \"revenue\": 95359000000.0, \"cost_of_revenue\": 50492000000.0, \"gross_profit\": 44867000000.0, \"operating_expense\": 15278000000.0, \"selling_general_and_administrative_expenses\": 6728000000.0, \"research_and_development\": 8550000000.0, \"operating_income\": 29589000000.0, \"interest_expense\": 0.0, \"ebit\": 29310000000.0, \"income_tax_expense\": 4530000000.0, \"net_income_discontinued_operations\": 0.0, \"net_income_non_controlling_interests\": 0.0, \"net_income\": 24780000000.0, \"net_income_common_stock\": 24780000000.0, \"preferred_dividends_impact\": 0.0, \"consolidated_income\": 24780000000.0, \"earnings_per_share\": 1.65, \"earnings_per_share_diluted\": 1.65, \"dividends_per_common_share\": 0.25, \"weighted_average_shares\": 14994082000.0, \"weighted_average_shares_diluted\": 15056133000.0}, {\"ticker\": \"AAPL\", \"report_period\": \"2024-12-28\", \"fiscal_period\": \"2025-Q1\", \"period\": \"quarterly\", \"currency\": \"USD\", \"revenue\": 124300000000.0, \"cost_of_revenue\": 66025000000.0, \"gross_profit\": 58275000000.0, \"operating_expense\": 15443000000.0, \"selling_general_and_administrative_expenses\": 7175000000.0, \"research_and_development\": 8268000000.0, \"operating_income\": 42832000000.0, \"interest_expense\": 0.0, \"ebit\": 42584000000.0, \"income_tax_expense\": 6254000000.0, \"net_income_discontinued_operations\": 0.0, \"net_income_non_controlling_interests\": 0.0, \"net_income\": 36330000000...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计4492字符，剩余2992字符"
        },
        "execution_time": 1.97269868850708,
        "is_functional_test": true
      },
      {
        "case_name": "TTM Report Retrieval",
        "purpose": "测试TTM（Trailing Twelve Months）报告周期参数是否能正确获取数据。",
        "args": {
          "stock_code": "TSLA",
          "report_period": "ttm",
          "limit": 1
        },
        "response": {
          "result": "{\"income_statements\": [{\"ticker\": \"TSLA\", \"report_period\": \"2025-03-31\", \"fiscal_period\": \"2025-Q1\", \"period\": \"ttm\", \"currency\": \"USD\", \"revenue\": 95724000000.0, \"cost_of_revenue\": 78817000000.0, \"gross_profit\": 16907000000.0, \"operating_expense\": 10603000000.0, \"selling_general_and_administrative_expenses\": 5027000000.0, \"research_and_development\": 4798000000.0, \"operating_income\": 6304000000.0, \"interest_expense\": 365000000.0, \"ebit\": 8333000000.0, \"income_tax_expense\": 1597000000.0, \"net_income_discontinued_operations\": 0.0, \"net_income_non_controlling_interests\": 58000000.0, \"net_income\": 6371000000.0, \"net_income_common_stock\": 6371000000.0, \"preferred_dividends_impact\": 0.0, \"consolidated_income\": 6429000000.0, \"earnings_per_share\": 1.99, \"earnings_per_share_diluted\": 1.82, \"dividends_per_common_share\": 0.0, \"weighted_average_shares\": 3218000000.0, \"weighted_average_shares_diluted\": 3218000000.0}]}"
        },
        "execution_time": 1.475865125656128,
        "is_functional_test": true
      },
      {
        "case_name": "Minimum Limit Value Test",
        "purpose": "测试最小限制值为1时，工具是否能正确返回一条记录。",
        "args": {
          "stock_code": "AMZN",
          "report_period": "annual",
          "limit": 1
        },
        "response": {
          "error": "ToolException: Error executing tool get_income_statements: HTTP error occurred: 401 - {\"error\":\"Invalid API key\",\"message\":\"Please provide a valid API key from https://financialdatasets.ai\"}"
        },
        "execution_time": 1.1802411079406738,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - SQL Injection Attempt in Stock Code",
        "purpose": "尝试注入SQL语句作为股票代码，验证工具是否对输入进行安全过滤。",
        "args": {
          "stock_code": "NVDA'; DROP TABLE income_statements;--",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "error": "ToolException: Error executing tool get_income_statements: HTTP error occurred: 400 - {\"error\":\"Invalid TICKER\",\"message\":\"Please provide a valid TICKER.\"}"
        },
        "execution_time": 1.2696197032928467,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "测试当提供无效的股票代码格式时，工具是否能正确抛出错误。",
        "args": {
          "stock_code": "12345",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "error": "ToolException: Error executing tool get_income_statements: HTTP error occurred: 400 - {\"error\":\"Invalid TICKER\",\"message\":\"Please provide a valid TICKER.\"}"
        },
        "execution_time": 1.2640259265899658,
        "is_functional_test": false
      },
      {
        "case_name": "Empty Stock Code Input",
        "purpose": "测试当股票代码为空字符串时，工具是否能正确处理并抛出异常。",
        "args": {
          "stock_code": "",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "error": "ToolException: Error executing tool get_income_statements: Unexpected error fetching income statements: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.4704601764678955,
        "is_functional_test": false
      },
      {
        "case_name": "Maximum Length Stock Code",
        "purpose": "测试最大长度的股票代码输入，确保边界条件被正确处理。",
        "args": {
          "stock_code": "MAXLENSTOCKCODE1234567890",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "error": "ToolException: Error executing tool get_income_statements: HTTP error occurred: 400 - {\"error\":\"Invalid TICKER\",\"message\":\"Please provide a valid TICKER.\"}"
        },
        "execution_time": 1.0128490924835205,
        "is_functional_test": false
      }
    ],
    "get_balance_sheets": [
      {
        "case_name": "Basic Balance Sheet Retrieval",
        "purpose": "验证工具能够成功检索一个有效股票代码的年度资产负债表数据。",
        "args": {
          "stock_code": "NVDA",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "result": "{\"balance_sheets\": [{\"ticker\": \"NVDA\", \"report_period\": \"2025-01-26\", \"fiscal_period\": \"2025-FY\", \"period\": \"annual\", \"currency\": \"USD\", \"total_assets\": 111601000000.0, \"current_assets\": 80126000000.0, \"cash_and_equivalents\": 8589000000.0, \"inventory\": 10080000000.0, \"current_investments\": 34621000000.0, \"trade_and_non_trade_receivables\": 23065000000.0, \"non_current_assets\": 31475000000.0, \"property_plant_and_equipment\": 8076000000.0, \"goodwill_and_intangible_assets\": 5995000000.0, \"investments\": 34621000000.0, \"non_current_investments\": 0.0, \"tax_assets\": 10979000000.0, \"total_liabilities\": 32274000000.0, \"current_liabilities\": 18047000000.0, \"current_debt\": 0.0, \"trade_and_non_trade_payables\": 6310000000.0, \"deferred_revenue\": 0.0, \"deposit_liabilities\": 0.0, \"non_current_liabilities\": 14227000000.0, \"non_current_debt\": 9982000000.0, \"tax_liabilities\": 0.0, \"shareholders_equity\": 79327000000.0, \"retained_earnings\": 68038000000.0, \"accumulated_other_comprehensive_income\": 28000000.0, \"outstanding_shares\": 24490000000.0, \"total_debt\": 9982000000.0}, {\"ticker\": \"NVDA\", \"report_period\": \"2024-01-28\", \"fiscal_period\": \"2024-FY\", \"period\": \"annual\", \"currency\": \"USD\", \"total_assets\": 65728000000.0, \"current_assets\": 44345000000.0, \"cash_and_equivalents\": 7280000000.0, \"inventory\": 5282000000.0, \"current_investments\": 18704000000.0, \"trade_and_non_trade_receivables\": 9999000000.0, \"non_current_assets\": 21383000000.0, \"property_plant_and_equipment\": 5260000000.0, \"goodwill_and_inta...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计10395字符，剩余8895字符"
        },
        "execution_time": 2.480290651321411,
        "is_functional_test": true
      },
      {
        "case_name": "Quarterly Report Retrieval",
        "purpose": "测试季度报告周期参数是否能正确获取季度资产负债表数据。",
        "args": {
          "stock_code": "AAPL",
          "report_period": "quarterly",
          "limit": 5
        },
        "response": {
          "result": "{\"balance_sheets\": [{\"ticker\": \"AAPL\", \"report_period\": \"2025-03-29\", \"fiscal_period\": \"2025-Q2\", \"period\": \"quarterly\", \"currency\": \"USD\", \"total_assets\": 331233000000.0, \"current_assets\": 118674000000.0, \"cash_and_equivalents\": 28162000000.0, \"inventory\": 6269000000.0, \"current_investments\": 20336000000.0, \"trade_and_non_trade_receivables\": 49798000000.0, \"non_current_assets\": 212559000000.0, \"property_plant_and_equipment\": 46876000000.0, \"goodwill_and_intangible_assets\": 0.0, \"investments\": 104760000000.0, \"non_current_investments\": 84424000000.0, \"tax_assets\": 0.0, \"total_liabilities\": 264437000000.0, \"current_liabilities\": 144571000000.0, \"current_debt\": 19620000000.0, \"trade_and_non_trade_payables\": 54126000000.0, \"deferred_revenue\": 8976000000.0, \"deposit_liabilities\": 0.0, \"non_current_liabilities\": 119866000000.0, \"non_current_debt\": 78566000000.0, \"tax_liabilities\": 0.0, \"shareholders_equity\": 66796000000.0, \"retained_earnings\": -15552000000.0, \"accumulated_other_comprehensive_income\": -6363000000.0, \"outstanding_shares\": 15022073000.0, \"total_debt\": 98186000000.0}, {\"ticker\": \"AAPL\", \"report_period\": \"2024-12-28\", \"fiscal_period\": \"2025-Q1\", \"period\": \"quarterly\", \"currency\": \"USD\", \"total_assets\": 344085000000.0, \"current_assets\": 133240000000.0, \"cash_and_equivalents\": 30299000000.0, \"inventory\": 6911000000.0, \"current_investments\": 23476000000.0, \"trade_and_non_trade_receivables\": 59306000000.0, \"non_current_assets\": 210845000000.0, \"property_plant_and_equipment...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计5385字符，剩余3885字符"
        },
        "execution_time": 2.0933613777160645,
        "is_functional_test": true
      },
      {
        "case_name": "TTM Report Retrieval",
        "purpose": "测试TTM（Trailing Twelve Months）报告周期参数是否能正确获取资产负债表数据。",
        "args": {
          "stock_code": "TSLA",
          "report_period": "ttm",
          "limit": 1
        },
        "response": {
          "result": "{\"balance_sheets\": [{\"ticker\": \"TSLA\", \"report_period\": \"2025-03-31\", \"fiscal_period\": \"2025-Q1\", \"period\": \"ttm\", \"currency\": \"USD\", \"total_assets\": 125111000000.0, \"current_assets\": 59389000000.0, \"cash_and_equivalents\": 16352000000.0, \"inventory\": 13706000000.0, \"current_investments\": 20644000000.0, \"trade_and_non_trade_receivables\": 3782000000.0, \"non_current_assets\": 65722000000.0, \"property_plant_and_equipment\": 52750000000.0, \"goodwill_and_intangible_assets\": 392000000.0, \"investments\": 21595000000.0, \"non_current_investments\": 951000000.0, \"tax_assets\": 6687000000.0, \"total_liabilities\": 49693000000.0, \"current_liabilities\": 29753000000.0, \"current_debt\": 2237000000.0, \"trade_and_non_trade_payables\": 13471000000.0, \"deferred_revenue\": 6853000000.0, \"deposit_liabilities\": 0.0, \"non_current_liabilities\": 19940000000.0, \"non_current_debt\": 5292000000.0, \"tax_liabilities\": 0.0, \"shareholders_equity\": 74653000000.0, \"retained_earnings\": 35618000000.0, \"accumulated_other_comprehensive_income\": -424000000.0, \"outstanding_shares\": 3216517037.0, \"total_debt\": 7529000000.0}]}"
        },
        "execution_time": 1.3652212619781494,
        "is_functional_test": true
      },
      {
        "case_name": "Minimum Limit Value Test",
        "purpose": "测试最小限制值为1时，工具是否能正确返回一条资产负债表记录。",
        "args": {
          "stock_code": "AMZN",
          "report_period": "annual",
          "limit": 1
        },
        "response": {
          "error": "ToolException: Error executing tool get_balance_sheets: HTTP error occurred: 401 - {\"error\":\"Invalid API key\",\"message\":\"Please provide a valid API key from https://financialdatasets.ai\"}"
        },
        "execution_time": 1.3507521152496338,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - SQL Injection Attempt in Stock Code",
        "purpose": "尝试注入SQL语句作为股票代码，验证工具是否对输入进行安全过滤。",
        "args": {
          "stock_code": "NVDA'; DROP TABLE balance_sheets;--",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "error": "ToolException: Error executing tool get_balance_sheets: HTTP error occurred: 400 - {\"error\":\"Invalid TICKER\",\"message\":\"Please provide a valid TICKER.\"}"
        },
        "execution_time": 1.1777045726776123,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "测试当提供无效的股票代码格式时，工具是否能正确抛出错误。",
        "args": {
          "stock_code": "12345",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "error": "ToolException: Error executing tool get_balance_sheets: HTTP error occurred: 400 - {\"error\":\"Invalid TICKER\",\"message\":\"Please provide a valid TICKER.\"}"
        },
        "execution_time": 1.186567783355713,
        "is_functional_test": false
      },
      {
        "case_name": "Empty Stock Code Input",
        "purpose": "测试当股票代码为空字符串时，工具是否能正确处理并抛出异常。",
        "args": {
          "stock_code": "",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "error": "ToolException: Error executing tool get_balance_sheets: Unexpected error fetching balance sheets: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.37066006660461426,
        "is_functional_test": false
      },
      {
        "case_name": "Maximum Length Stock Code",
        "purpose": "测试最大长度的股票代码输入，确保边界条件被正确处理。",
        "args": {
          "stock_code": "MAXLENSTOCKCODE1234567890",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "error": "ToolException: Error executing tool get_balance_sheets: HTTP error occurred: 400 - {\"error\":\"Invalid TICKER\",\"message\":\"Please provide a valid TICKER.\"}"
        },
        "execution_time": 1.1764450073242188,
        "is_functional_test": false
      }
    ],
    "get_cash_flows": [
      {
        "case_name": "Basic Cash Flow Retrieval",
        "purpose": "验证工具能够成功检索一个有效股票代码的年度现金流量表数据。",
        "args": {
          "stock_code": "NVDA",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "error": "ToolException: Error executing tool get_cash_flows: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.7120256423950195,
        "is_functional_test": true
      },
      {
        "case_name": "Quarterly Report Retrieval",
        "purpose": "测试季度报告周期参数是否能正确获取季度现金流量表数据。",
        "args": {
          "stock_code": "AAPL",
          "report_period": "quarterly",
          "limit": 5
        },
        "response": {
          "error": "ToolException: Error executing tool get_cash_flows: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.4368720054626465,
        "is_functional_test": true
      },
      {
        "case_name": "TTM Report Retrieval",
        "purpose": "测试TTM（Trailing Twelve Months）报告周期参数是否能正确获取数据。",
        "args": {
          "stock_code": "TSLA",
          "report_period": "ttm",
          "limit": 1
        },
        "response": {
          "error": "ToolException: Error executing tool get_cash_flows: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.7796156406402588,
        "is_functional_test": true
      },
      {
        "case_name": "Minimum Limit Value Test",
        "purpose": "测试最小限制值为1时，工具是否能正确返回一条记录。",
        "args": {
          "stock_code": "AMZN",
          "report_period": "annual",
          "limit": 1
        },
        "response": {
          "error": "ToolException: Error executing tool get_cash_flows: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.87744140625,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - SQL Injection Attempt in Stock Code",
        "purpose": "尝试注入SQL语句作为股票代码，验证工具是否对输入进行安全过滤。",
        "args": {
          "stock_code": "NVDA'; DROP TABLE cash_flows;--",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "error": "ToolException: Error executing tool get_cash_flows: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.020437240600586,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "测试当提供无效的股票代码格式时，工具是否能正确抛出错误。",
        "args": {
          "stock_code": "12345",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "error": "ToolException: Error executing tool get_cash_flows: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.1130540370941162,
        "is_functional_test": false
      },
      {
        "case_name": "Empty Stock Code Input",
        "purpose": "测试当股票代码为空字符串时，工具是否能正确处理并抛出异常。",
        "args": {
          "stock_code": "",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "error": "ToolException: Error executing tool get_cash_flows: Unexpected error fetching cash flows: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.3206057548522949,
        "is_functional_test": false
      },
      {
        "case_name": "Maximum Length Stock Code",
        "purpose": "测试最大长度的股票代码输入，确保边界条件被正确处理。",
        "args": {
          "stock_code": "MAXLENSTOCKCODE1234567890",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "error": "ToolException: Error executing tool get_cash_flows: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7687780857086182,
        "is_functional_test": false
      }
    ],
    "get_financial_ratios": [
      {
        "case_name": "Basic Financial Ratios Retrieval",
        "purpose": "验证工具能够成功检索一个有效股票代码的财务比率数据。",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_financial_ratios: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.8588149547576904,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "测试当提供无效的股票代码格式时，工具是否能正确抛出错误。",
        "args": {
          "stock_code": "12345"
        },
        "response": {
          "error": "ToolException: Error executing tool get_financial_ratios: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.1651804447174072,
        "is_functional_test": false
      },
      {
        "case_name": "Empty Stock Code Input",
        "purpose": "测试当股票代码为空字符串时，工具是否能正确处理并抛出异常。",
        "args": {
          "stock_code": ""
        },
        "response": {
          "error": "ToolException: Error executing tool get_financial_ratios: Unexpected error fetching financial ratios: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.3047044277191162,
        "is_functional_test": false
      },
      {
        "case_name": "Non-existent Stock Code",
        "purpose": "测试当提供的股票代码在API中不存在时，工具是否能优雅地处理失败情况。",
        "args": {
          "stock_code": "XYZABC"
        },
        "response": {
          "error": "ToolException: Error executing tool get_financial_ratios: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.8215112686157227,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Stock Code",
        "purpose": "测试包含特殊字符的股票代码输入，验证工具是否能正确识别为非法输入。",
        "args": {
          "stock_code": "NV#DA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_financial_ratios: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.9151158332824707,
        "is_functional_test": false
      },
      {
        "case_name": "Maximum Length Stock Code",
        "purpose": "测试最大长度的股票代码输入，确保边界条件被正确处理。",
        "args": {
          "stock_code": "MAXLENSTOCKCODE1234567890"
        },
        "response": {
          "error": "ToolException: Error executing tool get_financial_ratios: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.1503934860229492,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - SQL Injection Attempt",
        "purpose": "尝试注入SQL语句作为股票代码，验证工具是否对输入进行正确校验和过滤。",
        "args": {
          "stock_code": "NVDA'; DROP TABLE financial_ratios;--"
        },
        "response": {
          "error": "ToolException: Error executing tool get_financial_ratios: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.6907463073730469,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Command Injection Attempt",
        "purpose": "尝试注入系统命令作为股票代码，验证工具是否对输入进行安全过滤。",
        "args": {
          "stock_code": "NVDA; rm -rf /tmp/test;"
        },
        "response": {
          "error": "ToolException: Error executing tool get_financial_ratios: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.8721232414245605,
        "is_functional_test": false
      }
    ],
    "get_earnings_history": [
      {
        "case_name": "Basic Earnings History Retrieval",
        "purpose": "验证工具能够成功检索一个有效股票代码的历史每股收益（EPS）数据。",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_earnings_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.920727014541626,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "测试当提供无效的股票代码格式时，工具是否能正确抛出错误。",
        "args": {
          "stock_code": "12345"
        },
        "response": {
          "error": "ToolException: Error executing tool get_earnings_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.1869583129882812,
        "is_functional_test": false
      },
      {
        "case_name": "Empty Stock Code Input",
        "purpose": "测试当股票代码为空字符串时，工具是否能正确处理并抛出异常。",
        "args": {
          "stock_code": ""
        },
        "response": {
          "error": "ToolException: Error executing tool get_earnings_history: Unexpected error fetching earnings history: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.19540143013000488,
        "is_functional_test": false
      },
      {
        "case_name": "Non-existent Stock Code",
        "purpose": "测试当提供的股票代码在API中不存在时，工具是否能优雅地处理失败情况。",
        "args": {
          "stock_code": "XYZABC"
        },
        "response": {
          "error": "ToolException: Error executing tool get_earnings_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.256457805633545,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Stock Code",
        "purpose": "测试包含特殊字符的股票代码输入，验证工具是否能正确识别为非法输入。",
        "args": {
          "stock_code": "NV#DA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_earnings_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7962491512298584,
        "is_functional_test": false
      },
      {
        "case_name": "Maximum Length Stock Code",
        "purpose": "测试最大长度的股票代码输入，确保边界条件被正确处理。",
        "args": {
          "stock_code": "MAXLENSTOCKCODE1234567890"
        },
        "response": {
          "error": "ToolException: Error executing tool get_earnings_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.8210995197296143,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - SQL Injection Attempt",
        "purpose": "尝试注入SQL语句作为股票代码，验证工具是否对输入进行正确校验和过滤。",
        "args": {
          "stock_code": "NVDA'; DROP TABLE earnings;--"
        },
        "response": {
          "error": "ToolException: Error executing tool get_earnings_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.8757429122924805,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Command Injection Attempt",
        "purpose": "尝试注入系统命令作为股票代码，验证工具是否对输入进行安全过滤。",
        "args": {
          "stock_code": "NVDA; rm -rf /tmp/test;"
        },
        "response": {
          "error": "ToolException: Error executing tool get_earnings_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.1790060997009277,
        "is_functional_test": false
      }
    ],
    "get_analyst_estimates": [
      {
        "case_name": "Basic Analyst Estimates Retrieval",
        "purpose": "验证工具能够成功检索一个有效股票代码的分析师预测数据。",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_analyst_estimates: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.9347317218780518,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "测试当提供无效的股票代码格式时，工具是否能正确抛出错误。",
        "args": {
          "stock_code": "12345"
        },
        "response": {
          "error": "ToolException: Error executing tool get_analyst_estimates: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.38486742973327637,
        "is_functional_test": false
      },
      {
        "case_name": "Empty Stock Code Input",
        "purpose": "测试当股票代码为空字符串时，工具是否能正确处理并抛出异常。",
        "args": {
          "stock_code": ""
        },
        "response": {
          "error": "ToolException: Error executing tool get_analyst_estimates: Unexpected error fetching analyst estimates: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.008013010025024414,
        "is_functional_test": false
      },
      {
        "case_name": "Non-existent Stock Code",
        "purpose": "测试当提供的股票代码在API中不存在时，工具是否能优雅地处理失败情况。",
        "args": {
          "stock_code": "XYZABC"
        },
        "response": {
          "error": "ToolException: Error executing tool get_analyst_estimates: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3766820430755615,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Stock Code",
        "purpose": "测试包含特殊字符的股票代码输入，验证工具是否能正确识别为非法输入。",
        "args": {
          "stock_code": "NV#DA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_analyst_estimates: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.37518978118896484,
        "is_functional_test": false
      },
      {
        "case_name": "Maximum Length Stock Code",
        "purpose": "测试最大长度的股票代码输入，确保边界条件被正确处理。",
        "args": {
          "stock_code": "MAXLENSTOCKCODE1234567890"
        },
        "response": {
          "error": "ToolException: Error executing tool get_analyst_estimates: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7883062362670898,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - SQL Injection Attempt",
        "purpose": "尝试注入SQL语句作为股票代码，验证工具是否对输入进行正确校验和过滤。",
        "args": {
          "stock_code": "NVDA'; DROP TABLE analyst_estimates;--"
        },
        "response": {
          "error": "ToolException: Error executing tool get_analyst_estimates: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3698997497558594,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Command Injection Attempt",
        "purpose": "尝试注入系统命令作为股票代码，验证工具是否对输入进行安全过滤。",
        "args": {
          "stock_code": "NVDA; rm -rf /tmp/test;"
        },
        "response": {
          "error": "ToolException: Error executing tool get_analyst_estimates: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.37294673919677734,
        "is_functional_test": false
      }
    ],
    "get_stock_prices": [
      {
        "case_name": "Basic Stock Price Retrieval",
        "purpose": "验证工具能够成功检索一个有效股票代码和日期范围的历史股价数据。",
        "args": {
          "stock_code": "NVDA",
          "start_date": "2023-01-01",
          "end_date": "2023-12-31"
        },
        "response": {
          "error": "ToolException: Error executing tool get_stock_prices: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.43198823928833,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - SQL Injection Attempt in Stock Code",
        "purpose": "尝试注入SQL语句作为股票代码，验证工具是否对输入进行安全过滤。",
        "args": {
          "stock_code": "NVDA'; DROP TABLE stock_prices;--",
          "start_date": "2023-01-01",
          "end_date": "2023-12-31"
        },
        "response": {
          "error": "ToolException: Error executing tool get_stock_prices: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.794877290725708,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Date Format",
        "purpose": "测试当提供非法日期格式时，工具是否能正确抛出错误。",
        "args": {
          "stock_code": "NVDA",
          "start_date": "2023/01/01",
          "end_date": "2023-12-31"
        },
        "response": {
          "error": "ToolException: Error executing tool get_stock_prices: Unexpected error fetching stock prices: 'start_date' and 'end_date' must be in format YYYY-MM-DD."
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": false
      },
      {
        "case_name": "Start Date After End Date",
        "purpose": "测试开始日期晚于结束日期的情况，验证工具是否能正确处理逻辑错误。",
        "args": {
          "stock_code": "NVDA",
          "start_date": "2023-12-31",
          "end_date": "2023-01-01"
        },
        "response": {
          "error": "ToolException: Error executing tool get_stock_prices: Unexpected error fetching stock prices: 'start_date' must be before or equal to 'end_date'."
        },
        "execution_time": 0.0072727203369140625,
        "is_functional_test": false
      },
      {
        "case_name": "Empty Date Input",
        "purpose": "测试日期参数为空字符串时，工具是否能正确处理并抛出异常。",
        "args": {
          "stock_code": "NVDA",
          "start_date": "",
          "end_date": "2023-12-31"
        },
        "response": {
          "error": "ToolException: Error executing tool get_stock_prices: Unexpected error fetching stock prices: 'start_date' and 'end_date' must be in format YYYY-MM-DD."
        },
        "execution_time": 0.0035724639892578125,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Stock Code",
        "purpose": "测试包含特殊字符的股票代码输入，验证工具是否能正确识别为非法输入。",
        "args": {
          "stock_code": "NV#DA",
          "start_date": "2023-01-01",
          "end_date": "2023-12-31"
        },
        "response": {
          "error": "ToolException: Error executing tool get_stock_prices: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3792436122894287,
        "is_functional_test": false
      },
      {
        "case_name": "Maximum Length Stock Code",
        "purpose": "测试最大长度的股票代码输入，确保边界条件被正确处理。",
        "args": {
          "stock_code": "MAXLENSTOCKCODE1234567890",
          "start_date": "2023-01-01",
          "end_date": "2023-12-31"
        },
        "response": {
          "error": "ToolException: Error executing tool get_stock_prices: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7833917140960693,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Command Injection Attempt",
        "purpose": "尝试注入系统命令作为股票代码，验证工具是否对输入进行安全过滤。",
        "args": {
          "stock_code": "NVDA; rm -rf /tmp/test;",
          "start_date": "2023-01-01",
          "end_date": "2023-12-31"
        },
        "response": {
          "error": "ToolException: Error executing tool get_stock_prices: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7978894710540771,
        "is_functional_test": false
      }
    ],
    "get_dividend_history": [
      {
        "case_name": "Basic Dividend History Retrieval",
        "purpose": "验证工具能够成功检索一个有效股票代码的股息历史记录。",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_dividend_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 2.751128673553467,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Stock Code Input",
        "purpose": "测试当股票代码为空字符串时，工具是否能正确处理并抛出异常。",
        "args": {
          "stock_code": ""
        },
        "response": {
          "error": "ToolException: Error executing tool get_dividend_history: Unexpected error fetching dividend history: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.0050013065338134766,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "测试当提供无效的股票代码格式时，工具是否能正确抛出错误。",
        "args": {
          "stock_code": "12345"
        },
        "response": {
          "error": "ToolException: Error executing tool get_dividend_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7881166934967041,
        "is_functional_test": false
      },
      {
        "case_name": "Non-existent Stock Code",
        "purpose": "测试当提供的股票代码在API中不存在时，工具是否能优雅地处理失败情况。",
        "args": {
          "stock_code": "XYZABC"
        },
        "response": {
          "error": "ToolException: Error executing tool get_dividend_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7839398384094238,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Stock Code",
        "purpose": "测试包含特殊字符的股票代码输入，验证工具是否能正确识别为非法输入。",
        "args": {
          "stock_code": "NV#DA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_dividend_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3771047592163086,
        "is_functional_test": false
      },
      {
        "case_name": "Maximum Length Stock Code",
        "purpose": "测试最大长度的股票代码输入，确保边界条件被正确处理。",
        "args": {
          "stock_code": "MAXLENSTOCKCODE1234567890"
        },
        "response": {
          "error": "ToolException: Error executing tool get_dividend_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7937171459197998,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - SQL Injection Attempt",
        "purpose": "尝试注入SQL语句作为股票代码，验证工具是否对输入进行正确校验和过滤。",
        "args": {
          "stock_code": "NVDA'; DROP TABLE dividends;--"
        },
        "response": {
          "error": "ToolException: Error executing tool get_dividend_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.36944580078125,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Command Injection Attempt",
        "purpose": "尝试注入系统命令作为股票代码，验证工具是否对输入进行安全过滤。",
        "args": {
          "stock_code": "NVDA; rm -rf /tmp/test;"
        },
        "response": {
          "error": "ToolException: Error executing tool get_dividend_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3756394386291504,
        "is_functional_test": false
      }
    ],
    "get_splits_history": [
      {
        "case_name": "Basic Splits History Retrieval",
        "purpose": "验证工具能够成功检索一个有效股票代码的股票拆分历史数据。",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_splits_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.3322596549987793,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "测试当提供无效的股票代码格式时，工具是否能正确抛出错误。",
        "args": {
          "stock_code": "12345"
        },
        "response": {
          "error": "ToolException: Error executing tool get_splits_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.784721851348877,
        "is_functional_test": false
      },
      {
        "case_name": "Empty Stock Code Input",
        "purpose": "测试当股票代码为空字符串时，工具是否能正确处理并抛出异常。",
        "args": {
          "stock_code": ""
        },
        "response": {
          "error": "ToolException: Error executing tool get_splits_history: Unexpected error fetching splits history: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": false
      },
      {
        "case_name": "Non-existent Stock Code",
        "purpose": "测试当提供的股票代码在API中不存在时，工具是否能优雅地处理失败情况。",
        "args": {
          "stock_code": "XYZABC"
        },
        "response": {
          "error": "ToolException: Error executing tool get_splits_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7878003120422363,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Stock Code",
        "purpose": "测试包含特殊字符的股票代码输入，验证工具是否能正确识别为非法输入。",
        "args": {
          "stock_code": "NV#DA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_splits_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7811830043792725,
        "is_functional_test": false
      },
      {
        "case_name": "Maximum Length Stock Code",
        "purpose": "测试最大长度的股票代码输入，确保边界条件被正确处理。",
        "args": {
          "stock_code": "MAXLENSTOCKCODE1234567890"
        },
        "response": {
          "error": "ToolException: Error executing tool get_splits_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3649477958679199,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - SQL Injection Attempt",
        "purpose": "尝试注入SQL语句作为股票代码，验证工具是否对输入进行正确校验和过滤。",
        "args": {
          "stock_code": "NVDA'; DROP TABLE splits;--"
        },
        "response": {
          "error": "ToolException: Error executing tool get_splits_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3686397075653076,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Command Injection Attempt",
        "purpose": "尝试注入系统命令作为股票代码，验证工具是否对输入进行安全过滤。",
        "args": {
          "stock_code": "NVDA; rm -rf /tmp/test;"
        },
        "response": {
          "error": "ToolException: Error executing tool get_splits_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3656291961669922,
        "is_functional_test": false
      }
    ],
    "get_ownership_data": [
      {
        "case_name": "Basic Ownership Data Retrieval",
        "purpose": "验证工具能够成功检索一个有效股票代码的所有权结构数据。",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_ownership_data: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.3985481262207031,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "测试当提供无效的股票代码格式时，工具是否能正确抛出错误。",
        "args": {
          "stock_code": "12345"
        },
        "response": {
          "error": "ToolException: Error executing tool get_ownership_data: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7873942852020264,
        "is_functional_test": false
      },
      {
        "case_name": "Empty Stock Code Input",
        "purpose": "测试当股票代码为空字符串时，工具是否能正确处理并抛出异常。",
        "args": {
          "stock_code": ""
        },
        "response": {
          "error": "ToolException: Error executing tool get_ownership_data: Unexpected error fetching ownership data: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.003002643585205078,
        "is_functional_test": false
      },
      {
        "case_name": "Non-existent Stock Code",
        "purpose": "测试当提供的股票代码在API中不存在时，工具是否能优雅地处理失败情况。",
        "args": {
          "stock_code": "XYZABC"
        },
        "response": {
          "error": "ToolException: Error executing tool get_ownership_data: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.8262629508972168,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Stock Code",
        "purpose": "测试包含特殊字符的股票代码输入，验证工具是否能正确识别为非法输入。",
        "args": {
          "stock_code": "NV#DA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_ownership_data: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.37595438957214355,
        "is_functional_test": false
      },
      {
        "case_name": "Maximum Length Stock Code",
        "purpose": "测试最大长度的股票代码输入，确保边界条件被正确处理。",
        "args": {
          "stock_code": "MAXLENSTOCKCODE1234567890"
        },
        "response": {
          "error": "ToolException: Error executing tool get_ownership_data: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.37624382972717285,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - SQL Injection Attempt",
        "purpose": "尝试注入SQL语句作为股票代码，验证工具是否对输入进行正确校验和过滤。",
        "args": {
          "stock_code": "NVDA'; DROP TABLE companies;--"
        },
        "response": {
          "error": "ToolException: Error executing tool get_ownership_data: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3777732849121094,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Command Injection Attempt",
        "purpose": "尝试注入系统命令作为股票代码，验证工具是否对输入进行安全过滤。",
        "args": {
          "stock_code": "NVDA; rm -rf /tmp/test;"
        },
        "response": {
          "error": "ToolException: Error executing tool get_ownership_data: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.8038384914398193,
        "is_functional_test": false
      }
    ],
    "get_market_news": [
      {
        "case_name": "Basic Market News Retrieval",
        "purpose": "验证工具能够成功检索一个有效公司名称的最新市场新闻。",
        "args": {
          "company_name": "NVIDIA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_market_news: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.3825440406799316,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Company Name Input",
        "purpose": "测试当公司名称为空字符串时，工具是否能正确处理并抛出异常。",
        "args": {
          "company_name": ""
        },
        "response": {
          "error": "ToolException: Error executing tool get_market_news: Unexpected error fetching market news: 'company_name' must be a non-empty string."
        },
        "execution_time": 0.004407167434692383,
        "is_functional_test": false
      },
      {
        "case_name": "Non-existent Company Name",
        "purpose": "测试当提供的公司名称在API中不存在时，工具是否能优雅地处理失败情况。",
        "args": {
          "company_name": "XYZABC"
        },
        "response": {
          "error": "ToolException: Error executing tool get_market_news: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7861356735229492,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Company Name",
        "purpose": "测试包含特殊字符的公司名称输入，验证工具是否能正确识别为非法输入。",
        "args": {
          "company_name": "NV#DA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_market_news: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7941150665283203,
        "is_functional_test": false
      },
      {
        "case_name": "Maximum Length Company Name",
        "purpose": "测试最大长度的公司名称输入，确保边界条件被正确处理。",
        "args": {
          "company_name": "MAXLENCOMPANYNAME1234567890"
        },
        "response": {
          "error": "ToolException: Error executing tool get_market_news: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3708329200744629,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - SQL Injection Attempt",
        "purpose": "尝试注入SQL语句作为公司名称，验证工具是否对输入进行正确校验和过滤。",
        "args": {
          "company_name": "NVIDIA'; DROP TABLE companies;--"
        },
        "response": {
          "error": "ToolException: Error executing tool get_market_news: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.37839818000793457,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Command Injection Attempt",
        "purpose": "尝试注入系统命令作为公司名称，验证工具是否对输入进行安全过滤。",
        "args": {
          "company_name": "NVIDIA; rm -rf /tmp/test;"
        },
        "response": {
          "error": "ToolException: Error executing tool get_market_news: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.370741605758667,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid API Key Handling",
        "purpose": "测试当API密钥无效或缺失时，工具是否能正确返回错误信息。",
        "args": {
          "company_name": "APPLE"
        },
        "response": {
          "error": "ToolException: Error executing tool get_market_news: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.37900757789611816,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 96
}