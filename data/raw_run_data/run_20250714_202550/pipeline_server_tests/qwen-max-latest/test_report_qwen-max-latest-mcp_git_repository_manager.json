{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "qwen-max-latest-mcp_git_repository_manager",
  "server_path": "workspace/pipeline-output-servers/qwen-max-latest/mcp_git_repository_manager/refined/server.py",
  "timestamp": "2025-07-14T20:34:13.466223",
  "tools": [
    {
      "name": "git_init",
      "description": "\n            Initializes a new Git repository in the specified directory.\n\n            Args:\n                repo_path (str): The path where the new Git repository should be initialized.\n\n            Returns:\n                A string confirming the successful initialization of the Git repository.\n\n            Example:\n                git_init(repo_path=\"/path/to/new/repo\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_initArguments",
        "type": "object"
      }
    },
    {
      "name": "git_status",
      "description": "\n            Checks the status of the working tree in the specified Git repository.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n\n            Returns:\n                A string containing the status information of the repository.\n\n            Example:\n                git_status(repo_path=\"/path/to/existing/repo\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          }
        },
        "title": "git_statusArguments",
        "type": "object"
      }
    },
    {
      "name": "git_add",
      "description": "\n            Adds files to the staging area of the specified Git repository.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                file_pattern (str): The pattern or specific file(s) to add to the staging area.\n\n            Returns:\n                A string confirming the successful addition of files to the staging area.\n\n            Example:\n                git_add(repo_path=\"/path/to/existing/repo\", file_pattern=\"*.py\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "file_pattern": {
            "default": "*",
            "title": "File Pattern",
            "type": "string"
          }
        },
        "title": "git_addArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_unstaged",
      "description": "\n            Shows changes in the working tree not yet staged for the next commit.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n\n            Returns:\n                A string containing the diff of unstaged changes.\n\n            Example:\n                git_diff_unstaged(repo_path=\"/path/to/existing/repo\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          }
        },
        "title": "git_diff_unstagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_staged",
      "description": "\n            Shows changes between the staging area and the latest commit.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n\n            Returns:\n                A string containing the diff of staged changes.\n\n            Example:\n                git_diff_staged(repo_path=\"/path/to/existing/repo\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          }
        },
        "title": "git_diff_stagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff",
      "description": "\n            Compares differences between two branches or commits.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                source_ref (str): The source branch or commit hash.\n                target_ref (str): The target branch or commit hash.\n\n            Returns:\n                A string containing the diff between the specified references.\n\n            Example:\n                git_diff(repo_path=\"/path/to/existing/repo\", source_ref=\"main\", target_ref=\"feature-branch\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "source_ref": {
            "default": "main",
            "title": "Source Ref",
            "type": "string"
          },
          "target_ref": {
            "default": "feature-branch",
            "title": "Target Ref",
            "type": "string"
          }
        },
        "title": "git_diffArguments",
        "type": "object"
      }
    },
    {
      "name": "git_commit",
      "description": "\n            Records changes to the repository by creating a new commit.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                message (str): The commit message describing the changes.\n\n            Returns:\n                A string confirming the successful creation of a new commit.\n\n            Example:\n                git_commit(repo_path=\"/path/to/existing/repo\", message=\"Add new feature\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "message": {
            "default": "Commit changes",
            "title": "Message",
            "type": "string"
          }
        },
        "title": "git_commitArguments",
        "type": "object"
      }
    },
    {
      "name": "git_reset",
      "description": "\n            Removes files from the staging area without altering the working directory.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                file_pattern (str): The pattern or specific file(s) to unstage.\n\n            Returns:\n                A string confirming the successful unstaging of files.\n\n            Example:\n                git_reset(repo_path=\"/path/to/existing/repo\", file_pattern=\"*.py\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "file_pattern": {
            "default": "*",
            "title": "File Pattern",
            "type": "string"
          }
        },
        "title": "git_resetArguments",
        "type": "object"
      }
    },
    {
      "name": "git_log",
      "description": "\n            Displays the commit history of the specified Git repository.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n\n            Returns:\n                A string containing the commit history.\n\n            Example:\n                git_log(repo_path=\"/path/to/existing/repo\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          }
        },
        "title": "git_logArguments",
        "type": "object"
      }
    },
    {
      "name": "git_create_branch",
      "description": "\n            Creates a new branch in the specified Git repository.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                branch_name (str): The name of the new branch to create.\n\n            Returns:\n                A string confirming the successful creation of the new branch.\n\n            Example:\n                git_create_branch(repo_path=\"/path/to/existing/repo\", branch_name=\"new-feature\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "branch_name": {
            "default": "new-feature",
            "title": "Branch Name",
            "type": "string"
          }
        },
        "title": "git_create_branchArguments",
        "type": "object"
      }
    },
    {
      "name": "git_checkout",
      "description": "\n            Switches the current working branch to the specified branch.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                branch_name (str): The name of the branch to switch to.\n\n            Returns:\n                A string confirming the successful checkout of the specified branch.\n\n            Example:\n                git_checkout(repo_path=\"/path/to/existing/repo\", branch_name=\"feature-branch\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "branch_name": {
            "default": "feature-branch",
            "title": "Branch Name",
            "type": "string"
          }
        },
        "title": "git_checkoutArguments",
        "type": "object"
      }
    },
    {
      "name": "git_show",
      "description": "\n            Displays detailed information about a specific commit.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                commit_hash (str): The hash of the commit to display details for.\n\n            Returns:\n                A string containing the detailed information about the specified commit.\n\n            Example:\n                git_show(repo_path=\"/path/to/existing/repo\", commit_hash=\"a1b2c3d4\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "commit_hash": {
            "default": "a1b2c3d4",
            "title": "Commit Hash",
            "type": "string"
          }
        },
        "title": "git_showArguments",
        "type": "object"
      }
    },
    {
      "name": "text_write_file",
      "description": "\n            Writes content to a specified file. If the file exists, it will be overwritten.\n\n            Args:\n                file_path (str): The path to the file that will be created or overwritten.\n                content (str): The content to write into the file.\n\n            Returns:\n                A success message indicating the file was written.\n\n            Raises:\n                ValueError: If any of the inputs are invalid.\n\n            Example:\n                text_write_file(file_path=\"/tmp/test.txt\", content=\"Hello World\")\n            ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "content"
        ],
        "title": "text_write_fileArguments",
        "type": "object"
      }
    },
    {
      "name": "text_append_to_file",
      "description": "\n            Appends content to a specified file. If the file does not exist, it will be created.\n\n            Args:\n                file_path (str): The path to the file that will be appended to.\n                content (str): The content to append to the file.\n\n            Returns:\n                A success message indicating the file was appended to.\n\n            Raises:\n                ValueError: If any of the inputs are invalid.\n\n            Example:\n                text_append_to_file(file_path=\"/tmp/test.txt\", content=\"\nAdditional line\")\n            ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "content"
        ],
        "title": "text_append_to_fileArguments",
        "type": "object"
      }
    },
    {
      "name": "text_extract_regex",
      "description": "\n            Extracts the first match of a regular expression pattern from the given text.\n\n            Args:\n                text (str): The text to search within.\n                pattern (str): The regular expression pattern to search for.\n\n            Returns:\n                A string containing the matched group, or an error if no match is found.\n\n            Raises:\n                ValueError: If any of the inputs are invalid or no match is found.\n\n            Example:\n                text_extract_regex(text=\"Commit: a1b2c3d4\", pattern=\"commit (\\w+)\")\n            ",
      "args_schema": {
        "properties": {
          "text": {
            "title": "Text",
            "type": "string"
          },
          "pattern": {
            "title": "Pattern",
            "type": "string"
          }
        },
        "required": [
          "text",
          "pattern"
        ],
        "title": "text_extract_regexArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "git_init": [
      {
        "case_name": "Initialize Git Repository in New Directory",
        "purpose": "验证git_init工具可以在指定的新目录中成功初始化一个新的Git仓库。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Initialized Git repository at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.1314220428466797,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository in Existing Directory",
        "purpose": "验证git_init工具可以在已存在的目录中初始化Git仓库而不报错。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Initialized Git repository at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\"}"
        },
        "execution_time": 0.1255784034729004,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository with Nested Path",
        "purpose": "验证git_init工具可以处理嵌套路径并正确创建多层目录结构下的Git仓库。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir1\\newdir2\\git_repo_nested"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Initialized Git repository at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\newdir1\\\\newdir2\\\\git_repo_nested\"}"
        },
        "execution_time": 0.18838953971862793,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository with Special Characters in Path",
        "purpose": "验证git_init工具能够处理包含特殊字符的路径名，确保路径解析无误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@chars!_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Initialized Git repository at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@chars!_repo\"}"
        },
        "execution_time": 0.15051794052124023,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Initialize Git Repository in Read-Only Directory",
        "purpose": "测试git_init在只读目录下是否能正确处理权限问题并返回适当的错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Initialized Git repository at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly\"}"
        },
        "execution_time": 0.13402223587036133,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository in Long Path Directory",
        "purpose": "验证git_init能否处理超长路径并成功初始化Git仓库。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir1\\newdir2\\deep_nested_directory_structure\\long_path_git_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Initialized Git repository at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\newdir1\\\\newdir2\\\\deep_nested_directory_structure\\\\long_path_git_repo\"}"
        },
        "execution_time": 0.1659553050994873,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository with Empty Path Parameter",
        "purpose": "测试当提供空字符串作为repo_path参数时，工具是否能优雅地处理错误。",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"repo_path must be a non-empty string.\"}"
        },
        "execution_time": 0.003000497817993164,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository with Invalid Drive Path",
        "purpose": "测试git_init在无效或不可访问的磁盘路径上是否能安全处理错误。",
        "args": {
          "repo_path": "Z:\\invalid_drive\\git_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"[WinError 3] \\u7cfb\\u7edf\\u627e\\u4e0d\\u5230\\u6307\\u5b9a\\u7684\\u8def\\u5f84\\u3002: 'Z:\\\\\\\\'\"}"
        },
        "execution_time": 0.00400090217590332,
        "is_functional_test": false
      }
    ],
    "text_write_file": [
      {
        "case_name": "Write Content to New File",
        "purpose": "验证text_write_file工具可以成功在指定的新文件路径中写入内容。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "content": "This is a test content for new file."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Wrote content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\"}"
        },
        "execution_time": 0.00500035285949707,
        "is_functional_test": true
      },
      {
        "case_name": "Overwrite Existing File Content",
        "purpose": "验证text_write_file工具可以覆盖已有文件的内容而不报错。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_test_file.txt",
          "content": "This is the overwritten content."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Wrote content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_test_file.txt\"}"
        },
        "execution_time": 0.00700068473815918,
        "is_functional_test": true
      },
      {
        "case_name": "Write to File in Nested Directory",
        "purpose": "验证text_write_file工具可以在嵌套目录结构下正确创建并写入文件。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir1\\newdir2\\nested_test_file.txt",
          "content": "Content written into nested directory file."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Wrote content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\newdir1\\\\newdir2\\\\nested_test_file.txt\"}"
        },
        "execution_time": 0.004998207092285156,
        "is_functional_test": true
      },
      {
        "case_name": "Write Content with Special Characters",
        "purpose": "验证text_write_file工具能够处理包含特殊字符的文本内容，确保内容写入无误。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_content_file.txt",
          "content": "Special chars like @, #, $, %, &, \" are handled correctly."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Wrote content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special_content_file.txt\"}"
        },
        "execution_time": 0.004999876022338867,
        "is_functional_test": true
      },
      {
        "case_name": "Write to File with Special Characters in Path",
        "purpose": "验证text_write_file工具可以处理包含特殊字符的文件路径，并成功写入文件。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@path!_test_file.txt",
          "content": "File path contains special characters but should still be written."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Wrote content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@path!_test_file.txt\"}"
        },
        "execution_time": 0.006999015808105469,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Write to Read-Only File",
        "purpose": "测试text_write_file在只读文件路径上是否能正确处理权限问题并返回适当的错误信息。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly\\readonly_file.txt",
          "content": "Trying to write to a read-only location."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Wrote content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly\\\\readonly_file.txt\"}"
        },
        "execution_time": 0.010000228881835938,
        "is_functional_test": false
      },
      {
        "case_name": "Write Empty Content to File",
        "purpose": "验证text_write_file工具可以接受空字符串作为内容参数，清空目标文件内容。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_file.txt",
          "content": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"content must be a non-empty string.\"}"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": true
      },
      {
        "case_name": "Write with Empty File Path",
        "purpose": "测试当提供空字符串作为file_path参数时，工具是否能优雅地处理错误。",
        "args": {
          "file_path": "",
          "content": "Test content"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"file_path must be a non-empty string.\"}"
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": false
      },
      {
        "case_name": "Write with Null File Path",
        "purpose": "测试当提供null作为file_path参数时，工具是否抛出类型或验证错误。",
        "args": {
          "file_path": null,
          "content": "Test content"
        },
        "response": {
          "error": "ToolException: Error executing tool text_write_file: 1 validation error for text_write_fileArguments\nfile_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.006001472473144531,
        "is_functional_test": false
      },
      {
        "case_name": "Write to Invalid Drive Path",
        "purpose": "测试text_write_file在无效或不可访问的磁盘路径上是否能安全处理错误。",
        "args": {
          "file_path": "Z:\\invalid_drive\\test_output.txt",
          "content": "Testing invalid drive write."
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"[Errno 2] No such file or directory: 'Z:\\\\\\\\invalid_drive\\\\\\\\test_output.txt'\"}"
        },
        "execution_time": 0.004983186721801758,
        "is_functional_test": false
      },
      {
        "case_name": "Write to File with Non-Existent Parent Directory",
        "purpose": "验证text_write_file是否能在父目录不存在的情况下自动创建目录并写入文件。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_dir\\test_output.txt",
          "content": "Writing to file in non-existent directory."
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"[Errno 2] No such file or directory: 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\nonexistent_dir\\\\\\\\test_output.txt'\"}"
        },
        "execution_time": 0.0029997825622558594,
        "is_functional_test": true
      }
    ],
    "git_status": [
      {
        "case_name": "Check Status of Initialized Git Repository",
        "purpose": "验证git_status工具可以正确获取已初始化的Git仓库的状态信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"On branch master\\n\\nNo commits yet\\n\\nnothing to commit (create/copy files and use \\\"git add\\\" to track)\"}"
        },
        "execution_time": 0.15899968147277832,
        "is_functional_test": true
      },
      {
        "case_name": "Check Status with Default Repo Path",
        "purpose": "验证当未指定repo_path参数时，git_status是否使用最近一次初始化的仓库路径并返回状态信息。",
        "args": {},
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"On branch master\\n\\nNo commits yet\\n\\nnothing to commit (create/copy files and use \\\"git add\\\" to track)\"}"
        },
        "execution_time": 0.16042828559875488,
        "is_functional_test": true
      },
      {
        "case_name": "Check Status of Nested Git Repository",
        "purpose": "验证git_status工具能够处理嵌套路径下的Git仓库并正确返回其状态。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir1\\newdir2\\git_repo_nested"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"On branch master\\n\\nNo commits yet\\n\\nnothing to commit (create/copy files and use \\\"git add\\\" to track)\"}"
        },
        "execution_time": 0.14787936210632324,
        "is_functional_test": true
      },
      {
        "case_name": "Check Status in Long Path Git Repository",
        "purpose": "验证git_status能否处理超长路径下的Git仓库并成功获取状态信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir1\\newdir2\\deep_nested_directory_structure\\long_path_git_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"On branch master\\n\\nNo commits yet\\n\\nnothing to commit (create/copy files and use \\\"git add\\\" to track)\"}"
        },
        "execution_time": 0.18291664123535156,
        "is_functional_test": true
      },
      {
        "case_name": "Check Status with Special Characters in Repo Path",
        "purpose": "验证git_status工具能够处理包含特殊字符的仓库路径名，并返回正确的状态信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@chars!_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"On branch master\\n\\nNo commits yet\\n\\nnothing to commit (create/copy files and use \\\"git add\\\" to track)\"}"
        },
        "execution_time": 0.18728303909301758,
        "is_functional_test": true
      },
      {
        "case_name": "Check Status in Read-Only Git Repository",
        "purpose": "测试git_status在只读目录下是否能安全访问Git仓库并返回状态信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"On branch master\\n\\nNo commits yet\\n\\nUntracked files:\\n  (use \\\"git add <file>...\\\" to include in what will be committed)\\n\\treadonly_file.txt\\n\\treadonly_screenshot.png\\n\\nnothing added to commit but untracked files present (use \\\"git add\\\" to track)\"}"
        },
        "execution_time": 0.170027494430542,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to Check Status with Empty Repo Path",
        "purpose": "测试当提供空字符串作为repo_path参数时，git_status是否能优雅地处理错误。",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"On branch master\\n\\nNo commits yet\\n\\nnothing to commit (create/copy files and use \\\"git add\\\" to track)\"}"
        },
        "execution_time": 0.18926382064819336,
        "is_functional_test": false
      },
      {
        "case_name": "Check Status with Invalid Drive Path",
        "purpose": "测试git_status在无效或不可访问的磁盘路径上是否能安全处理错误并返回适当的提示信息。",
        "args": {
          "repo_path": "Z:\\invalid_drive\\git_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Z:\\\\invalid_drive\\\\git_repo\"}"
        },
        "execution_time": 0.005001544952392578,
        "is_functional_test": false
      }
    ],
    "git_add": [
      {
        "case_name": "Add Specific File to Staging Area",
        "purpose": "验证git_add工具可以成功将指定的单个文件添加到Git仓库的暂存区。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "file_pattern": "existing_test_file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"[WinError 2] \\u7cfb\\u7edf\\u627e\\u4e0d\\u5230\\u6307\\u5b9a\\u7684\\u6587\\u4ef6\\u3002: 'existing_test_file.txt'\"}"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": true
      },
      {
        "case_name": "Add All Files Using Default Pattern",
        "purpose": "验证git_add工具在未指定file_pattern时默认添加所有文件到暂存区。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Added * to staging area.\"}"
        },
        "execution_time": 0.009000778198242188,
        "is_functional_test": true
      },
      {
        "case_name": "Add Files with Wildcard Pattern",
        "purpose": "验证git_add工具支持通配符模式（如*.txt）添加符合条件的文件。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "file_pattern": "*.txt"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Added *.txt to staging area.\"}"
        },
        "execution_time": 0.010000228881835938,
        "is_functional_test": true
      },
      {
        "case_name": "Add Files in Nested Repository",
        "purpose": "验证git_add工具可以在嵌套路径下的Git仓库中正常工作。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir1\\newdir2\\git_repo_nested",
          "file_pattern": "*"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Added * to staging area.\"}"
        },
        "execution_time": 0.007161855697631836,
        "is_functional_test": true
      },
      {
        "case_name": "Add File with Special Characters in Path",
        "purpose": "验证git_add工具能处理包含特殊字符的路径并正确添加文件。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@chars!_repo",
          "file_pattern": "special_content_file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"[WinError 2] \\u7cfb\\u7edf\\u627e\\u4e0d\\u5230\\u6307\\u5b9a\\u7684\\u6587\\u4ef6\\u3002: 'special_content_file.txt'\"}"
        },
        "execution_time": 0.00800466537475586,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Add in Read-Only Repository",
        "purpose": "测试git_add在只读Git仓库目录下是否能正确处理权限问题并返回适当的错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly",
          "file_pattern": "*"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Added * to staging area.\"}"
        },
        "execution_time": 0.030002593994140625,
        "is_functional_test": false
      },
      {
        "case_name": "Add Non-Existent File Pattern",
        "purpose": "测试git_add在匹配不到任何文件时是否能优雅地处理并返回适当提示。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "file_pattern": "*.xyz"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Added *.xyz to staging area.\"}"
        },
        "execution_time": 0.004995822906494141,
        "is_functional_test": false
      },
      {
        "case_name": "Add with Empty Repo Path",
        "purpose": "测试当提供空字符串作为repo_path参数时，git_add是否能优雅地处理错误。",
        "args": {
          "repo_path": "",
          "file_pattern": "*"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Added * to staging area.\"}"
        },
        "execution_time": 0.007002353668212891,
        "is_functional_test": false
      }
    ],
    "git_diff_unstaged": [
      {
        "case_name": "Show Unstaged Changes in Initialized Repository",
        "purpose": "验证git_diff_unstaged工具在已初始化的Git仓库中能正确显示未暂存的修改。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\"}"
        },
        "execution_time": 0.19496655464172363,
        "is_functional_test": true
      },
      {
        "case_name": "Show Unstaged Changes with Default Repo Path",
        "purpose": "验证当不提供repo_path参数时，git_diff_unstaged使用默认仓库路径并成功返回结果。",
        "args": {},
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\"}"
        },
        "execution_time": 0.17299938201904297,
        "is_functional_test": true
      },
      {
        "case_name": "Show Unstaged Changes in Nested Git Repository",
        "purpose": "验证git_diff_unstaged工具能在嵌套路径下的Git仓库中正常工作。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir1\\newdir2\\git_repo_nested"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\"}"
        },
        "execution_time": 0.1266779899597168,
        "is_functional_test": true
      },
      {
        "case_name": "Show Unstaged Changes in Long Path Repository",
        "purpose": "验证git_diff_unstaged工具在超长路径的Git仓库中仍能正常运行。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir1\\newdir2\\deep_nested_directory_structure\\long_path_git_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\"}"
        },
        "execution_time": 0.18026113510131836,
        "is_functional_test": true
      },
      {
        "case_name": "Show Unstaged Changes in Repository with Special Characters in Path",
        "purpose": "验证git_diff_unstaged能否处理包含特殊字符的仓库路径。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@chars!_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\"}"
        },
        "execution_time": 0.13753318786621094,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Show Unstaged Changes in Non-Git Directory",
        "purpose": "测试git_diff_unstaged在非Git目录下是否能正确识别并返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\"}"
        },
        "execution_time": 0.14165782928466797,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Changes in Read-Only Repository",
        "purpose": "测试git_diff_unstaged在只读Git仓库中是否能安全处理权限问题并返回适当信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\"}"
        },
        "execution_time": 0.1686396598815918,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Changes with Invalid Drive Path",
        "purpose": "测试git_diff_unstaged在无效或不可访问的磁盘路径上是否能安全处理错误。",
        "args": {
          "repo_path": "Z:\\invalid_drive\\git_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Z:\\\\invalid_drive\\\\git_repo\"}"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": false
      }
    ],
    "git_commit": [
      {
        "case_name": "Commit Changes in Initialized Repository",
        "purpose": "验证git_commit工具可以在已初始化的Git仓库中成功创建一个新的提交。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "message": "Initial commit"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Created new commit: 687cf7a3fa57dc37d7ce2639fda9fb0debc49f7b\"}"
        },
        "execution_time": 0.274216890335083,
        "is_functional_test": true
      },
      {
        "case_name": "Commit with Default Repo Path and Custom Message",
        "purpose": "验证当未指定repo_path时，git_commit使用之前初始化的默认仓库路径并用自定义消息提交。",
        "args": {
          "repo_path": null,
          "message": "Default repo path commit"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: 1 validation error for git_commitArguments\nrepo_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": true
      },
      {
        "case_name": "Commit with Empty Message",
        "purpose": "测试当提供空字符串作为commit message参数时，是否使用默认消息进行提交。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "message": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"message must be a non-empty string.\"}"
        },
        "execution_time": 0.004001140594482422,
        "is_functional_test": true
      },
      {
        "case_name": "Commit in Nested Git Repository",
        "purpose": "验证git_commit工具可以在嵌套目录结构下的Git仓库中正常工作。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir1\\newdir2\\git_repo_nested",
          "message": "Nested directory commit"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Created new commit: 32763d9b94951dbe60a3331ff5d921605fe2a6b0\"}"
        },
        "execution_time": 0.26987314224243164,
        "is_functional_test": true
      },
      {
        "case_name": "Commit in Read-Only Repository",
        "purpose": "测试git_commit在只读Git仓库中是否能正确处理权限问题并返回适当的错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly",
          "message": "Attempt to commit in read-only repository"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Created new commit: 0eca175b9b83c0301e7473c55018d75f03038a1f\"}"
        },
        "execution_time": 0.26128172874450684,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Special Characters in Message",
        "purpose": "验证git_commit可以处理包含特殊字符的提交消息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "message": "Commit message with special chars: @, #, $, %"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Created new commit: 66e3bacc93c5816789589322469dd985962a3f41\"}"
        },
        "execution_time": 0.2880103588104248,
        "is_functional_test": true
      },
      {
        "case_name": "Commit in Non-Existent Repository",
        "purpose": "测试git_commit在不存在的仓库路径下是否能安全地处理错误并返回适当提示。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_repo",
          "message": "Commit attempt in non-existent repository"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_repo\"}"
        },
        "execution_time": 0.0030002593994140625,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Long Message",
        "purpose": "验证git_commit能否处理超长提交消息并成功创建提交。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "message": "This is a very long commit message that exceeds the typical length limits for commit messages. It should still be accepted by the tool and properly recorded in the Git repository."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Created new commit: 3e0d0ca9b8857f020ad6304e5d207858b07f2607\"}"
        },
        "execution_time": 0.35158443450927734,
        "is_functional_test": true
      }
    ],
    "git_diff_staged": [
      {
        "case_name": "Show Staged Changes in Valid Git Repository",
        "purpose": "验证git_diff_staged工具在存在暂存更改的Git仓库中能正确返回差异信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\"}"
        },
        "execution_time": 0.17052698135375977,
        "is_functional_test": true
      },
      {
        "case_name": "Show Staged Changes Using Default Repo Path",
        "purpose": "验证git_diff_staged工具在未提供repo_path参数时使用默认路径并成功执行。",
        "args": {},
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff HEAD\\n  stderr: 'fatal: ambiguous argument 'HEAD': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.15358281135559082,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Show Staged Changes in Non-Git Directory",
        "purpose": "测试git_diff_staged在非Git目录下是否能优雅地处理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff HEAD\\n  stderr: 'fatal: ambiguous argument 'HEAD': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.13078904151916504,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes with Special Characters in Path",
        "purpose": "验证git_diff_staged能够处理包含特殊字符的仓库路径。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@chars!_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff HEAD\\n  stderr: 'fatal: ambiguous argument 'HEAD': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.13518309593200684,
        "is_functional_test": true
      },
      {
        "case_name": "Show Staged Changes in Nested Git Repository",
        "purpose": "验证git_diff_staged可以在嵌套路径下的Git仓库中正常工作。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir1\\newdir2\\git_repo_nested"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\"}"
        },
        "execution_time": 0.15610980987548828,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Access Read-Only Git Repository",
        "purpose": "测试git_diff_staged在只读Git仓库路径上是否能安全处理权限问题。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\"}"
        },
        "execution_time": 0.16445517539978027,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes in Long Path Git Repository",
        "purpose": "验证git_diff_staged能否处理超长路径下的Git仓库并显示暂存差异。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir1\\newdir2\\deep_nested_directory_structure\\long_path_git_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff HEAD\\n  stderr: 'fatal: ambiguous argument 'HEAD': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.12999963760375977,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Use Empty Path Parameter",
        "purpose": "测试当提供空字符串作为repo_path参数时，工具是否能返回适当的错误信息。",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff HEAD\\n  stderr: 'fatal: ambiguous argument 'HEAD': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.1615133285522461,
        "is_functional_test": false
      }
    ],
    "git_log": [
      {
        "case_name": "Display Commit History for Initialized Repository",
        "purpose": "验证git_log工具能够成功显示已初始化Git仓库的提交历史。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.0049664974212646484,
        "is_functional_test": true
      },
      {
        "case_name": "Display Commit History with Default Repository Path",
        "purpose": "验证当未提供repo_path参数时，git_log是否使用之前初始化的默认仓库路径并正确显示提交历史。",
        "args": {},
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\newdir1\\\\newdir2\\\\deep_nested_directory_structure\\\\long_path_git_repo\"}"
        },
        "execution_time": 0.005789518356323242,
        "is_functional_test": true
      },
      {
        "case_name": "Display Commit History from Nested Git Repository",
        "purpose": "验证git_log能否从嵌套目录结构下的Git仓库中读取提交历史。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir1\\newdir2\\git_repo_nested"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\newdir1\\\\newdir2\\\\git_repo_nested\"}"
        },
        "execution_time": 0.00783085823059082,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Read Commit History from Non-Git Directory",
        "purpose": "测试git_log在非Git仓库目录下是否能优雅地返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git log\\n  stderr: 'fatal: your current branch 'master' does not have any commits yet'\"}"
        },
        "execution_time": 0.1981046199798584,
        "is_functional_test": false
      },
      {
        "case_name": "Read Commit History from Repository with Special Characters in Path",
        "purpose": "验证git_log能否处理包含特殊字符的仓库路径，并正确显示提交历史。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@chars!_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@chars!_repo\"}"
        },
        "execution_time": 0.006000041961669922,
        "is_functional_test": true
      },
      {
        "case_name": "Read Commit History from Long Path Repository",
        "purpose": "验证git_log能否处理超长路径的Git仓库并成功读取提交历史。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir1\\newdir2\\deep_nested_directory_structure\\long_path_git_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\newdir1\\\\newdir2\\\\deep_nested_directory_structure\\\\long_path_git_repo\"}"
        },
        "execution_time": 0.004000663757324219,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Read Commit History with Empty Path",
        "purpose": "测试当提供空字符串作为repo_path参数时，git_log是否能正确抛出参数验证错误。",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\newdir1\\\\newdir2\\\\deep_nested_directory_structure\\\\long_path_git_repo\"}"
        },
        "execution_time": 0.007000446319580078,
        "is_functional_test": false
      },
      {
        "case_name": "Read Commit History from Invalid Drive Path",
        "purpose": "测试git_log在无效或不可访问的磁盘路径上是否能安全处理错误并返回适当提示。",
        "args": {
          "repo_path": "Z:\\invalid_drive\\git_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Z:\\\\invalid_drive\\\\git_repo\"}"
        },
        "execution_time": 0.008002042770385742,
        "is_functional_test": false
      }
    ],
    "git_create_branch": [
      {
        "case_name": "Create New Git Branch with Default Repository",
        "purpose": "验证在未指定repo_path时，git_create_branch工具能够使用之前初始化的仓库创建新分支。",
        "args": {
          "branch_name": "new-feature"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\newdir1\\\\newdir2\\\\deep_nested_directory_structure\\\\long_path_git_repo\"}"
        },
        "execution_time": 0.01100015640258789,
        "is_functional_test": true
      },
      {
        "case_name": "Create New Git Branch in Specified Repository",
        "purpose": "验证git_create_branch工具能够在指定路径的Git仓库中成功创建新分支。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "branch_name": "develop"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.00450587272644043,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Create Branch with Empty Branch Name",
        "purpose": "测试当提供空字符串作为branch_name参数时，工具是否能优雅地处理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "branch_name": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"branch_name must be a non-empty string.\"}"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to Create Branch in Non-Existent Repository",
        "purpose": "验证git_create_branch工具在指定路径不存在Git仓库时能否正确返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_repo",
          "branch_name": "feature-bugfix"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_repo\"}"
        },
        "execution_time": 0.00800466537475586,
        "is_functional_test": false
      },
      {
        "case_name": "Create Git Branch with Special Characters in Name",
        "purpose": "验证git_create_branch工具可以处理包含特殊字符的分支名称。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "branch_name": "feature@release!1.0"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.00800013542175293,
        "is_functional_test": true
      },
      {
        "case_name": "Create Git Branch in Read-Only Repository",
        "purpose": "测试git_create_branch工具在只读仓库目录下是否能正确处理权限问题并返回适当的错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly",
          "branch_name": "read-only-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly\"}"
        },
        "execution_time": 0.0029952526092529297,
        "is_functional_test": false
      },
      {
        "case_name": "Create Long Named Branch",
        "purpose": "验证git_create_branch能否处理超长分支名称。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "branch_name": "very_long_branch_name_that_tests_the_limit_of_branch_naming_in_git_systems"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.0029959678649902344,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Create Branch with Null Repository Path",
        "purpose": "测试当提供null作为repo_path参数时，工具是否抛出类型或验证错误。",
        "args": {
          "repo_path": null,
          "branch_name": "feature-null-path"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: 1 validation error for git_create_branchArguments\nrepo_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.01100468635559082,
        "is_functional_test": false
      }
    ],
    "git_checkout": [
      {
        "case_name": "Checkout Existing Branch in Initialized Repository",
        "purpose": "验证git_checkout工具可以成功切换到指定的已有分支。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(1)\\n  cmdline: git checkout feature-branch\\n  stderr: 'error: pathspec 'feature-branch' did not match any file(s) known to git'\"}"
        },
        "execution_time": 0.1700000762939453,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout with Default Branch Name",
        "purpose": "验证当使用默认branch_name参数时，git_checkout能否正确切换到默认分支（如存在）。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(1)\\n  cmdline: git checkout feature-branch\\n  stderr: 'error: pathspec 'feature-branch' did not match any file(s) known to git'\"}"
        },
        "execution_time": 0.13699913024902344,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout Non-Existent Branch",
        "purpose": "测试尝试切换到不存在的分支时是否能返回适当的错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "nonexistent-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(1)\\n  cmdline: git checkout nonexistent-branch\\n  stderr: 'error: pathspec 'nonexistent-branch' did not match any file(s) known to git'\"}"
        },
        "execution_time": 0.16944336891174316,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout Without Specifying Repo Path",
        "purpose": "验证git_checkout在未提供repo_path参数时是否能使用最近一次初始化的仓库路径。",
        "args": {
          "branch_name": "feature-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\newdir1\\\\newdir2\\\\deep_nested_directory_structure\\\\long_path_git_repo\"}"
        },
        "execution_time": 0.0029997825622558594,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout with Special Characters in Branch Name",
        "purpose": "验证git_checkout能否处理包含特殊字符的分支名。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "bug/fix@2025"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(1)\\n  cmdline: git checkout bug/fix@2025\\n  stderr: 'error: pathspec 'bug/fix@2025' did not match any file(s) known to git'\"}"
        },
        "execution_time": 0.13170623779296875,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout in Read-Only Repository",
        "purpose": "测试在只读权限的Git仓库中执行checkout操作是否会失败并返回适当错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly\"}"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout with Empty Branch Name",
        "purpose": "测试当提供空字符串作为branch_name参数时，工具是否能优雅地处理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"branch_name must be a non-empty string.\"}"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout with Invalid Repo Path",
        "purpose": "测试在无效或不可访问的仓库路径上执行checkout操作是否能安全地处理错误。",
        "args": {
          "repo_path": "Z:\\invalid_drive\\.git",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Z:\\\\invalid_drive\\\\.git\"}"
        },
        "execution_time": 0.005000591278076172,
        "is_functional_test": false
      }
    ],
    "git_diff": [
      {
        "case_name": "Basic Diff Between Two Branches",
        "purpose": "验证git_diff工具能够比较两个已存在的分支之间的差异。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source_ref": "main",
          "target_ref": "feature-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff main..feature-branch\\n  stderr: 'fatal: ambiguous argument 'main..feature-branch': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.13452625274658203,
        "is_functional_test": true
      },
      {
        "case_name": "Diff Between Two Commits",
        "purpose": "验证git_diff工具可以比较两个具体的commit哈希之间的差异。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source_ref": "abc1234",
          "target_ref": "def5678"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff abc1234..def5678\\n  stderr: 'fatal: ambiguous argument 'abc1234..def5678': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.175612211227417,
        "is_functional_test": true
      },
      {
        "case_name": "Use Default Repo Path with Main and Feature Branch",
        "purpose": "验证当repo_path为None时，使用默认仓库并比较main和feature-branch的diff是否成功。",
        "args": {
          "repo_path": null,
          "source_ref": "main",
          "target_ref": "feature-branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: 1 validation error for git_diffArguments\nrepo_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": true
      },
      {
        "case_name": "Compare Same Branch or Commit",
        "purpose": "测试比较同一分支或提交时是否返回空diff或适当结果。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source_ref": "main",
          "target_ref": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff main..main\\n  stderr: 'fatal: ambiguous argument 'main..main': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.18065619468688965,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Diff with Nonexistent Source Ref",
        "purpose": "测试当source_ref不存在时，git_diff是否能优雅地处理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source_ref": "nonexistent-branch",
          "target_ref": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff nonexistent-branch..main\\n  stderr: 'fatal: ambiguous argument 'nonexistent-branch..main': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.19761943817138672,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt Diff with Nonexistent Target Ref",
        "purpose": "测试当target_ref不存在时，git_diff是否能优雅地处理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source_ref": "main",
          "target_ref": "nonexistent-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff main..nonexistent-branch\\n  stderr: 'fatal: ambiguous argument 'main..nonexistent-branch': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.16121363639831543,
        "is_functional_test": false
      },
      {
        "case_name": "Diff in Repository with Special Characters in Path",
        "purpose": "验证git_diff在包含特殊字符的路径仓库中能否正常工作。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@chars!_repo",
          "source_ref": "main",
          "target_ref": "feature-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@chars!_repo\"}"
        },
        "execution_time": 0.003998756408691406,
        "is_functional_test": true
      },
      {
        "case_name": "Diff with Very Long Commit Hash",
        "purpose": "测试git_diff是否能正确处理超长commit hash字符串。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source_ref": "abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890",
          "target_ref": "1234567890abcdef1234567890abcdef12345678"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890..1234567890abcdef1234567890abcdef12345678\\n  stderr: 'fatal: ambiguous argument 'abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890..1234567890abcdef1234567890abcdef12345678': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.1676197052001953,
        "is_functional_test": true
      }
    ],
    "git_reset": [
      {
        "case_name": "Unstage Specific File Pattern in Initialized Repo",
        "purpose": "验证git_reset工具可以成功从已初始化的Git仓库中取消暂存匹配特定模式的文件。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_pattern": "*.csv"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Unstaged *.csv.\"}"
        },
        "execution_time": 0.17528676986694336,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage All Files Using Default File Pattern",
        "purpose": "验证git_reset工具在未指定file_pattern时默认取消暂存所有文件。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Unstaged *.\"}"
        },
        "execution_time": 0.14100098609924316,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage Files in Non-Initialized Repo Using Default Repo Path",
        "purpose": "验证git_reset工具在未指定repo_path且未初始化仓库时是否能正确处理默认路径并返回错误。",
        "args": {
          "file_pattern": "*.csv"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\newdir1\\\\newdir2\\\\deep_nested_directory_structure\\\\long_path_git_repo\"}"
        },
        "execution_time": 0.0029990673065185547,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage Files with Invalid Repo Path",
        "purpose": "测试git_reset在提供无效或不存在的repo_path时是否能安全处理错误。",
        "args": {
          "repo_path": "Z:\\invalid_drive\\repo",
          "file_pattern": "*.csv"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Z:\\\\invalid_drive\\\\repo\"}"
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage Files with Special Characters in File Pattern",
        "purpose": "验证git_reset工具可以处理包含特殊字符的文件模式，确保模式解析无误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_pattern": "*special@chars!*.csv"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Unstaged *special@chars!*.csv.\"}"
        },
        "execution_time": 0.1944866180419922,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage Files from Read-Only Git Repository",
        "purpose": "测试git_reset在只读Git仓库路径下是否能正确处理权限问题并返回适当的错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly",
          "file_pattern": "*.csv"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly\"}"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage Files Using Empty File Pattern",
        "purpose": "测试当提供空字符串作为file_pattern参数时，工具是否能优雅地处理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_pattern": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"file_pattern must be a non-empty string.\"}"
        },
        "execution_time": 0.005009651184082031,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage Files with Long Path and Pattern",
        "purpose": "验证git_reset能否处理超长路径和文件模式组合并成功取消暂存文件。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir1\\newdir2\\deep_nested_directory_structure\\long_path_git_repo",
          "file_pattern": "*test*.csv"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\newdir1\\\\newdir2\\\\deep_nested_directory_structure\\\\long_path_git_repo\"}"
        },
        "execution_time": 0.006992816925048828,
        "is_functional_test": true
      }
    ],
    "text_append_to_file": [
      {
        "case_name": "Append Content to Existing File",
        "purpose": "验证text_append_to_file工具可以成功将内容追加到一个已存在的文件中。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_test_file.txt",
          "content": "\nAdditional line for append test."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Appended content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_test_file.txt\"}"
        },
        "execution_time": 0.005000591278076172,
        "is_functional_test": true
      },
      {
        "case_name": "Append Content to Nonexistent File",
        "purpose": "验证当目标文件不存在时，text_append_to_file工具能够自动创建文件并正确写入内容。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_append_file.txt",
          "content": "First line in new file via append."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Appended content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_append_file.txt\"}"
        },
        "execution_time": 0.004999637603759766,
        "is_functional_test": true
      },
      {
        "case_name": "Append Empty Content to File",
        "purpose": "验证text_append_to_file工具是否允许追加空字符串内容（应成功）。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_file.txt",
          "content": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"content must be a non-empty string.\"}"
        },
        "execution_time": 0.008002996444702148,
        "is_functional_test": true
      },
      {
        "case_name": "Append with Special Characters in Content",
        "purpose": "验证text_append_to_file工具可以处理包含特殊字符的内容，并正确追加到文件。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_content_file.txt",
          "content": "\nSpecial chars like @, #, $, %, &, \" should be appended correctly."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Appended content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special_content_file.txt\"}"
        },
        "execution_time": 0.009998321533203125,
        "is_functional_test": true
      },
      {
        "case_name": "Append to File in Nested Directory",
        "purpose": "验证text_append_to_file工具可以在嵌套目录结构下的已有文件中追加内容。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir1\\newdir2\\nested_test_file.txt",
          "content": "\nAppending additional content into nested directory file."
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"[Errno 2] No such file or directory: 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\newdir1\\\\\\\\newdir2\\\\\\\\nested_test_file.txt'\"}"
        },
        "execution_time": 0.007006168365478516,
        "is_functional_test": true
      },
      {
        "case_name": "Append to File with Special Characters in Path",
        "purpose": "验证text_append_to_file工具可以处理包含特殊字符的文件路径，并成功追加内容。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@path!_append_file.txt",
          "content": "\nFile path contains special characters but should still allow appending."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Appended content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@path!_append_file.txt\"}"
        },
        "execution_time": 0.005985260009765625,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Append with Empty File Path",
        "purpose": "测试当提供空字符串作为file_path参数时，工具是否能优雅地处理错误。",
        "args": {
          "file_path": "",
          "content": "Trying to append with empty path."
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"file_path must be a non-empty string.\"}"
        },
        "execution_time": 0.006840705871582031,
        "is_functional_test": false
      },
      {
        "case_name": "Append to Read-Only File",
        "purpose": "测试text_append_to_file在只读文件路径上是否能正确处理权限问题并返回适当的错误信息。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly\\readonly_file.txt",
          "content": "\nAttempting to append to a read-only file."
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"[Errno 2] No such file or directory: 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\readonly\\\\\\\\readonly_file.txt'\"}"
        },
        "execution_time": 0.004996299743652344,
        "is_functional_test": false
      }
    ],
    "git_show": [
      {
        "case_name": "Show Commit Details with Valid Repo and Hash",
        "purpose": "验证git_show工具在提供有效仓库路径和提交哈希时，能成功显示指定提交的详细信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git show a1b2c3d4\\n  stderr: 'fatal: ambiguous argument 'a1b2c3d4': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.131866455078125,
        "is_functional_test": true
      },
      {
        "case_name": "Show Commit Using Default Repo Path",
        "purpose": "验证git_show工具在未指定repo_path参数时，是否使用默认（之前初始化过的）仓库路径并成功显示提交信息。",
        "args": {
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\newdir1\\\\newdir2\\\\deep_nested_directory_structure\\\\long_path_git_repo\"}"
        },
        "execution_time": 0.004010677337646484,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Show with Invalid Commit Hash",
        "purpose": "测试git_show工具在提供无效的commit_hash参数时是否能返回适当的错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "invalidhash123"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git show invalidhash123\\n  stderr: 'fatal: ambiguous argument 'invalidhash123': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.12461566925048828,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit in Repository with Special Characters in Path",
        "purpose": "验证git_show工具能否处理包含特殊字符的仓库路径，并正确显示提交详情。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@chars!_repo",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@chars!_repo\"}"
        },
        "execution_time": 0.003722667694091797,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Show Commit on Read-Only Git Repository",
        "purpose": "测试git_show在只读Git仓库目录下是否能正确读取提交信息或返回适当错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly\"}"
        },
        "execution_time": 0.0050089359283447266,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit in Deeply Nested Repository Path",
        "purpose": "验证git_show能否处理超长嵌套路径下的Git仓库并成功显示提交信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir1\\newdir2\\deep_nested_directory_structure\\long_path_git_repo",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\newdir1\\\\newdir2\\\\deep_nested_directory_structure\\\\long_path_git_repo\"}"
        },
        "execution_time": 0.0049970149993896484,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Show Commit with Empty Commit Hash",
        "purpose": "测试当提供空字符串作为commit_hash参数时，工具是否能优雅地处理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"commit_hash must be a non-empty string.\"}"
        },
        "execution_time": 0.003000497817993164,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit with Null Commit Hash",
        "purpose": "测试当提供null作为commit_hash参数时，工具是否抛出类型或验证错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": null
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: 1 validation error for git_showArguments\ncommit_hash\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": false
      }
    ],
    "text_extract_regex": [
      {
        "case_name": "Extract First Match from Text",
        "purpose": "验证text_extract_regex工具可以正确提取文本中符合正则表达式的第一个匹配项。",
        "args": {
          "text": "Commit: a1b2c3d4",
          "pattern": "commit (\\w+)"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"No match found for pattern 'commit (\\\\w+)' in the provided text.\"}"
        },
        "execution_time": 0.005007266998291016,
        "is_functional_test": true
      },
      {
        "case_name": "Extract Email Address from String",
        "purpose": "验证text_extract_regex工具能够从一段文本中提取出电子邮件地址。",
        "args": {
          "text": "Contact us at support@example.com for assistance.",
          "pattern": "[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"no such group\"}"
        },
        "execution_time": 0.006998538970947266,
        "is_functional_test": true
      },
      {
        "case_name": "Extract Version Number from Log",
        "purpose": "验证text_extract_regex工具能从日志字符串中提取版本号信息。",
        "args": {
          "text": "Application version is v2.4.7-beta",
          "pattern": "v\\d+\\.\\d+\\.\\d+[a-zA-Z0-9.-]*"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"no such group\"}"
        },
        "execution_time": 0.005510807037353516,
        "is_functional_test": true
      },
      {
        "case_name": "Extract IPv4 Address from Network Info",
        "purpose": "验证text_extract_regex工具能从网络信息中提取IPv4地址。",
        "args": {
          "text": "IP Address: 192.168.1.100",
          "pattern": "\\b(?:\\d{1,3}\\.){3}\\d{1,3}\\b"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"no such group\"}"
        },
        "execution_time": 0.005002737045288086,
        "is_functional_test": true
      },
      {
        "case_name": "Extract with Invalid Regular Expression Pattern",
        "purpose": "测试当提供非法正则表达式模式时，工具是否能抛出适当的错误。",
        "args": {
          "text": "Some text to match",
          "pattern": "*invalid regex pattern"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"nothing to repeat at position 0\"}"
        },
        "execution_time": 0.0059926509857177734,
        "is_functional_test": false
      },
      {
        "case_name": "Extract with Empty Text Input",
        "purpose": "测试当提供空文本输入时，工具是否能优雅地处理并返回错误。",
        "args": {
          "text": "",
          "pattern": "\\d+"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"text must be a non-empty string.\"}"
        },
        "execution_time": 0.008171319961547852,
        "is_functional_test": false
      },
      {
        "case_name": "Extract with No Match Found",
        "purpose": "测试当没有匹配项时，工具是否能正确抛出ValueError。",
        "args": {
          "text": "No digits here",
          "pattern": "\\d+"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"No match found for pattern '\\\\d+' in the provided text.\"}"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      },
      {
        "case_name": "Extract with Special Characters in Text",
        "purpose": "验证text_extract_regex工具能否正确处理包含特殊字符的文本中的正则表达式匹配。",
        "args": {
          "text": "This is a test string with special chars: @#$$%^&*()",
          "pattern": "@#\\$\\$%\\^&\\*\\(\\)"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"no such group\"}"
        },
        "execution_time": 0.004999876022338867,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 123
}