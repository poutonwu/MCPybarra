{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "qwen-plus-mcp_git_repo_manager",
  "server_path": "workspace/pipeline-output-servers/qwen-plus/mcp_git_repo_manager/refined/server.py",
  "timestamp": "2025-07-13T03:13:16.918480",
  "tools": [
    {
      "name": "write_to_temp_file",
      "description": "\n    将内容写入指定文件路径。\n\n    Args:\n        file_path: 要写入的文件路径 (必填)。\n        content: 要写入的内容 (必填)。\n        skip_dependent_steps: 如果当前步骤失败，是否跳过依赖步骤 (可选，默认False)。\n\n    Returns:\n        包含操作结果的字典，包括成功或失败的状态及消息。\n\n    Raises:\n        ValueError: 如果提供的路径无效。\n        IOError: 如果文件写入失败。\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          },
          "skip_dependent_steps": {
            "default": false,
            "title": "Skip Dependent Steps",
            "type": "boolean"
          }
        },
        "required": [
          "file_path",
          "content"
        ],
        "title": "write_to_temp_fileArguments",
        "type": "object"
      }
    },
    {
      "name": "git_init",
      "description": "\n    初始化一个新的Git仓库。\n\n    Args:\n        repo_path: 新仓库的文件路径 (必填)。\n\n    Returns:\n        包含初始化状态的字典，包括仓库路径和初始化成功状态。\n\n    Raises:\n        ValueError: 如果提供的路径无效或已存在。\n        GitCommandError: 如果Git命令执行失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_initArguments",
        "type": "object"
      }
    },
    {
      "name": "git_status",
      "description": "\n    获取仓库当前状态。\n\n    Args:\n        repo_path: 仓库路径 (必填)。\n        skip_dependent_steps: 如果当前步骤失败，是否跳过依赖步骤 (可选，默认False)。\n\n    Returns:\n        包含仓库状态信息的字典，如当前分支、修改文件列表等。\n\n    Raises:\n        ValueError: 如果提供的路径无效。\n        GitCommandError: 如果Git命令执行失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "skip_dependent_steps": {
            "default": false,
            "title": "Skip Dependent Steps",
            "type": "boolean"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_statusArguments",
        "type": "object"
      }
    },
    {
      "name": "git_add",
      "description": "\n    将文件添加到暂存区。\n\n    Args:\n        repo_path: 仓库路径 (必填)。\n        file_path: 要添加的文件路径 (必填)。\n        skip_dependent_steps: 如果当前步骤失败，是否跳过依赖步骤 (可选，默认False)。\n\n    Returns:\n        包含操作结果的字典，包括成功或失败的状态及消息。\n\n    Raises:\n        ValueError: 如果提供的路径无效。\n        GitCommandError: 如果Git命令执行失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "skip_dependent_steps": {
            "default": false,
            "title": "Skip Dependent Steps",
            "type": "boolean"
          }
        },
        "required": [
          "repo_path",
          "file_path"
        ],
        "title": "git_addArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_unstaged",
      "description": "\n    查看未暂存的差异。\n\n    Args:\n        repo_path: 仓库路径 (必填)。\n        skip_dependent_steps: 如果当前步骤失败，是否跳过依赖步骤 (可选，默认False)。\n\n    Returns:\n        包含未暂存差异内容的字符串。\n\n    Raises:\n        ValueError: 如果提供的路径无效。\n        GitCommandError: 如果Git命令执行失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "skip_dependent_steps": {
            "default": false,
            "title": "Skip Dependent Steps",
            "type": "boolean"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_diff_unstagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_staged",
      "description": "\n    查看已暂存的差异。\n\n    Args:\n        repo_path: 仓库路径 (必填)。\n        skip_dependent_steps: 如果当前步骤失败，是否跳过依赖步骤 (可选，默认False)。\n\n    Returns:\n        包含已暂存差异内容的字符串。\n\n    Raises:\n        ValueError: 如果提供的路径无效。\n        GitCommandError: 如果Git命令执行失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "skip_dependent_steps": {
            "default": false,
            "title": "Skip Dependent Steps",
            "type": "boolean"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_diff_stagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff",
      "description": "\n    比较分支或提交。\n\n    Args:\n        repo_path: 仓库路径 (必填)。\n        commit1: 第一个比较的提交哈希或分支名 (必填)。\n        commit2: 第二个比较的提交哈希或分支名 (必填)。\n        skip_dependent_steps: 如果当前步骤失败，是否跳过依赖步骤 (可选，默认False)。\n\n    Returns:\n        包含两个提交之间差异内容的字符串。\n\n    Raises:\n        ValueError: 如果提供的路径或提交信息无效。\n        GitCommandError: 如果Git命令执行失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "commit1": {
            "title": "Commit1",
            "type": "string"
          },
          "commit2": {
            "title": "Commit2",
            "type": "string"
          },
          "skip_dependent_steps": {
            "default": false,
            "title": "Skip Dependent Steps",
            "type": "boolean"
          }
        },
        "required": [
          "repo_path",
          "commit1",
          "commit2"
        ],
        "title": "git_diffArguments",
        "type": "object"
      }
    },
    {
      "name": "git_commit",
      "description": "\n    提交更改。\n\n    Args:\n        repo_path: 仓库路径 (必填)。\n        message: 提交信息 (必填)。\n        skip_dependent_steps: 如果当前步骤失败，是否跳过依赖步骤 (可选，默认False)。\n\n    Returns:\n        包含提交结果的字典，包括提交哈希和消息。\n\n    Raises:\n        ValueError: 如果提供的路径或提交信息无效。\n        GitCommandError: 如果Git命令执行失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "message": {
            "title": "Message",
            "type": "string"
          },
          "skip_dependent_steps": {
            "default": false,
            "title": "Skip Dependent Steps",
            "type": "boolean"
          }
        },
        "required": [
          "repo_path",
          "message"
        ],
        "title": "git_commitArguments",
        "type": "object"
      }
    },
    {
      "name": "git_reset",
      "description": "\n    取消暂存文件。\n\n    Args:\n        repo_path: 仓库路径 (必填)。\n        file_path: 要取消暂存的文件路径 (必填)。\n        skip_dependent_steps: 如果当前步骤失败，是否跳过依赖步骤 (可选，默认False)。\n\n    Returns:\n        包含操作结果的字典，包括成功或失败的状态及消息。\n\n    Raises:\n        ValueError: 如果提供的路径或文件信息无效。\n        GitCommandError: 如果Git命令执行失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "skip_dependent_steps": {
            "default": false,
            "title": "Skip Dependent Steps",
            "type": "boolean"
          }
        },
        "required": [
          "repo_path",
          "file_path"
        ],
        "title": "git_resetArguments",
        "type": "object"
      }
    },
    {
      "name": "git_log",
      "description": "\n    查看提交历史。\n\n    Args:\n        repo_path: 仓库路径 (必填)。\n        skip_dependent_steps: 如果当前步骤失败，是否跳过依赖步骤 (可选，默认False)。\n\n    Returns:\n        包含提交历史的列表，每个条目包含提交哈希、作者、日期和消息。\n\n    Raises:\n        ValueError: 如果提供的路径无效。\n        GitCommandError: 如果Git命令执行失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "skip_dependent_steps": {
            "default": false,
            "title": "Skip Dependent Steps",
            "type": "boolean"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_logArguments",
        "type": "object"
      }
    },
    {
      "name": "git_create_branch",
      "description": "\n    创建新分支。\n\n    Args:\n        repo_path: 仓库路径 (必填)。\n        branch_name: 新分支名称 (必填)。\n        skip_dependent_steps: 如果当前步骤失败，是否跳过依赖步骤 (可选，默认False)。\n\n    Returns:\n        包含操作结果的字典，包括成功或失败的状态及消息。\n\n    Raises:\n        ValueError: 如果提供的路径或分支名称无效。\n        GitCommandError: 如果Git命令执行失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          },
          "skip_dependent_steps": {
            "default": false,
            "title": "Skip Dependent Steps",
            "type": "boolean"
          }
        },
        "required": [
          "repo_path",
          "branch_name"
        ],
        "title": "git_create_branchArguments",
        "type": "object"
      }
    },
    {
      "name": "git_checkout",
      "description": "\n    切换分支。\n\n    Args:\n        repo_path: 仓库路径 (必填)。\n        branch_name: 要切换到的分支名称 (必填)。\n        skip_dependent_steps: 如果当前步骤失败，是否跳过依赖步骤 (可选，默认False)。\n\n    Returns:\n        包含操作结果的字典，包括成功或失败的状态及消息。\n\n    Raises:\n        ValueError: 如果提供的路径或分支名称无效。\n        GitCommandError: 如果Git命令执行失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          },
          "skip_dependent_steps": {
            "default": false,
            "title": "Skip Dependent Steps",
            "type": "boolean"
          }
        },
        "required": [
          "repo_path",
          "branch_name"
        ],
        "title": "git_checkoutArguments",
        "type": "object"
      }
    },
    {
      "name": "git_show",
      "description": "\n    显示提交的详细内容。\n\n    Args:\n        repo_path: 仓库路径 (必填)。\n        commit_hash: 要显示的提交哈希 (必填)。\n        skip_dependent_steps: 如果当前步骤失败，是否跳过依赖步骤 (可选，默认False)。\n\n    Returns:\n        包含提交详细信息的字符串，包括元数据和差异内容。\n\n    Raises:\n        ValueError: 如果提供的路径或提交哈希无效。\n        GitCommandError: 如果Git命令执行失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "commit_hash": {
            "title": "Commit Hash",
            "type": "string"
          },
          "skip_dependent_steps": {
            "default": false,
            "title": "Skip Dependent Steps",
            "type": "boolean"
          }
        },
        "required": [
          "repo_path",
          "commit_hash"
        ],
        "title": "git_showArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "write_to_temp_file": [
      {
        "case_name": "Basic Write to File",
        "purpose": "验证工具可以将内容写入指定文件路径的基本功能。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt",
          "content": "This is a test content written by write_to_temp_file tool."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u6587\\u4ef6\\u5199\\u5165\\u6210\\u529f\", \"data\": {\"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\test_output.txt\", \"content_length\": 58}}"
        },
        "execution_time": 0.004999637603759766,
        "is_functional_test": true
      },
      {
        "case_name": "Write with Skip Dependent Steps True",
        "purpose": "验证当 skip_dependent_steps 设置为 True 时，是否能正常写入文件。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_skip_dependent.txt",
          "content": "Skipped dependent steps test content.",
          "skip_dependent_steps": true
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u6587\\u4ef6\\u5199\\u5165\\u6210\\u529f\", \"data\": {\"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\test_skip_dependent.txt\", \"content_length\": 37}}"
        },
        "execution_time": 0.005510568618774414,
        "is_functional_test": true
      },
      {
        "case_name": "Write Empty Content",
        "purpose": "测试写入空内容是否被允许并成功执行。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content.txt",
          "content": ""
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u6587\\u4ef6\\u5199\\u5165\\u6210\\u529f\", \"data\": {\"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content.txt\", \"content_length\": 0}}"
        },
        "execution_time": 0.006005287170410156,
        "is_functional_test": true
      },
      {
        "case_name": "Write to Nonexistent Directory",
        "purpose": "验证写入不存在的目录路径时是否抛出 ValueError。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir\\invalid_path.txt",
          "content": "This should fail due to invalid path."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u6587\\u4ef6\\u5199\\u5165\\u6210\\u529f\", \"data\": {\"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\nonexistent_dir\\\\invalid_path.txt\", \"content_length\": 37}}"
        },
        "execution_time": 0.005533456802368164,
        "is_functional_test": false
      },
      {
        "case_name": "Write to Read-Only File",
        "purpose": "验证尝试写入只读文件时是否抛出 IOError。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\rule1.pdf",
          "content": "Trying to overwrite a read-only file."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u6587\\u4ef6\\u5199\\u5165\\u6210\\u529f\", \"data\": {\"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\rule1.pdf\", \"content_length\": 37}}"
        },
        "execution_time": 0.004000663757324219,
        "is_functional_test": false
      },
      {
        "case_name": "Write with Special Characters in Path",
        "purpose": "测试包含特殊字符的文件路径是否被正确处理。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\screenshot_@test#123_output.txt",
          "content": "Content written to a file with special characters in the name."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u6587\\u4ef6\\u5199\\u5165\\u6210\\u529f\", \"data\": {\"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\screenshot_@test#123_output.txt\", \"content_length\": 62}}"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": true
      },
      {
        "case_name": "Write to Hidden File",
        "purpose": "验证写入隐藏文件（系统属性）时的行为是否安全且可控。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_file.txt",
          "content": "Writing to a hidden file."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u6587\\u4ef6\\u5199\\u5165\\u6210\\u529f\", \"data\": {\"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.hidden_file.txt\", \"content_length\": 25}}"
        },
        "execution_time": 0.005005836486816406,
        "is_functional_test": false
      }
    ],
    "git_init": [
      {
        "case_name": "Basic Git Init",
        "purpose": "验证工具可以初始化一个新的Git仓库的基本功能。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u4ed3\\u5e93\\u521d\\u59cb\\u5316\\u6210\\u529f\", \"data\": {\"repo_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\", \"initialized\": true}}"
        },
        "execution_time": 0.3255901336669922,
        "is_functional_test": true
      },
      {
        "case_name": "Git Init with Special Characters in Path",
        "purpose": "测试包含特殊字符的仓库路径是否被正确处理。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\git_repo_@test#123"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u4ed3\\u5e93\\u521d\\u59cb\\u5316\\u6210\\u529f\", \"data\": {\"repo_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\git_repo_@test#123\", \"initialized\": true}}"
        },
        "execution_time": 0.28474974632263184,
        "is_functional_test": true
      },
      {
        "case_name": "Git Init on Existing Directory",
        "purpose": "验证尝试在已存在的目录上初始化仓库是否会抛出 ValueError。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u8def\\u5f84\\u5df2\\u5b58\\u5728: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\"}"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      },
      {
        "case_name": "Git Init with Invalid Path",
        "purpose": "验证使用无效路径时是否会抛出 ValueError。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir\\invalid_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u4ed3\\u5e93\\u521d\\u59cb\\u5316\\u6210\\u529f\", \"data\": {\"repo_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\nonexistent_dir\\\\invalid_repo\", \"initialized\": true}}"
        },
        "execution_time": 0.2217082977294922,
        "is_functional_test": false
      },
      {
        "case_name": "Git Init on Read-Only Directory",
        "purpose": "验证尝试在只读目录中初始化仓库是否会抛出权限错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u8def\\u5f84\\u5df2\\u5b58\\u5728: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.hidden_file.txt\"}"
        },
        "execution_time": 0.003954172134399414,
        "is_functional_test": false
      },
      {
        "case_name": "Git Init with Hidden Path",
        "purpose": "验证在隐藏路径下初始化仓库是否被允许并成功执行。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u4ed3\\u5e93\\u521d\\u59cb\\u5316\\u6210\\u529f\", \"data\": {\"repo_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.hidden_repo\", \"initialized\": true}}"
        },
        "execution_time": 0.253140926361084,
        "is_functional_test": true
      },
      {
        "case_name": "Git Init Empty Path",
        "purpose": "验证空路径参数是否引发 ValueError。",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u5fc5\\u987b\\u63d0\\u4f9b\\u6709\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84\"}"
        },
        "execution_time": 0.008036136627197266,
        "is_functional_test": false
      },
      {
        "case_name": "Git Init Path Length Boundary",
        "purpose": "测试最大长度路径是否能被正常处理。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z\\max_depth_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u4ed3\\u5e93\\u521d\\u59cb\\u5316\\u6210\\u529f\", \"data\": {\"repo_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\\\\\a\\\\b\\\\c\\\\d\\\\e\\\\f\\\\g\\\\h\\\\i\\\\j\\\\k\\\\l\\\\m\\\\n\\\\o\\\\p\\\\q\\\\r\\\\s\\\\t\\\\u\\\\v\\\\w\\\\x\\\\y\\\\z\\\\max_depth_repo\", \"initialized\": true}}"
        },
        "execution_time": 0.24512839317321777,
        "is_functional_test": true
      }
    ],
    "git_status": [
      {
        "case_name": "Basic Git Status",
        "purpose": "验证工具可以获取当前仓库状态的基本功能。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"UnexpectedError\", \"message\": \"\\u672a\\u77e5\\u9519\\u8bef: Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 1.0798683166503906,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status with Skip Dependent Steps True",
        "purpose": "验证当 skip_dependent_steps 设置为 True 时，是否能正常获取仓库状态。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "skip_dependent_steps": true
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"DependencySkipped\", \"message\": \"\\u8df3\\u8fc7\\u4f9d\\u8d56\\u6b65\\u9aa4: Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.9171319007873535,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status on Empty Repository",
        "purpose": "测试在一个刚初始化、没有任何提交的仓库中获取状态的行为。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"UnexpectedError\", \"message\": \"\\u672a\\u77e5\\u9519\\u8bef: Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 1.2136924266815186,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status on Nonexistent Path",
        "purpose": "验证尝试对不存在的路径执行git status是否会抛出 ValueError。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir\\invalid_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"UnexpectedError\", \"message\": \"\\u672a\\u77e5\\u9519\\u8bef: Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 4.3637306690216064,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status with Special Characters in Path",
        "purpose": "测试包含特殊字符的仓库路径是否被正确处理。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\git_repo_@test#123"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"UnexpectedError\", \"message\": \"\\u672a\\u77e5\\u9519\\u8bef: Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 3.675252914428711,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status on Read-Only Repository",
        "purpose": "验证尝试对只读仓库执行git status是否会抛出权限错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"UnexpectedError\", \"message\": \"\\u672a\\u77e5\\u9519\\u8bef: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.hidden_file.txt\"}"
        },
        "execution_time": 0.48354578018188477,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status with Hidden Path",
        "purpose": "验证在隐藏路径下执行git status是否被允许并成功执行。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"UnexpectedError\", \"message\": \"\\u672a\\u77e5\\u9519\\u8bef: Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 6.318858623504639,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status Empty Path",
        "purpose": "验证空路径参数是否引发 ValueError。",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: \"}"
        },
        "execution_time": 0.47027087211608887,
        "is_functional_test": false
      }
    ],
    "git_add": [
      {
        "case_name": "Basic Git Add",
        "purpose": "验证工具可以将文件添加到Git暂存区的基本功能。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u6587\\u4ef6\\u4e0d\\u5b58\\u5728: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\test_output.txt\"}"
        },
        "execution_time": 0.2980670928955078,
        "is_functional_test": true
      },
      {
        "case_name": "Git Add with Skip Dependent Steps True",
        "purpose": "验证当 skip_dependent_steps 设置为 True 时，是否能正常将文件添加到暂存区。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content.txt",
          "skip_dependent_steps": true
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"DependencySkipped\", \"message\": \"\\u8df3\\u8fc7\\u4f9d\\u8d56\\u6b65\\u9aa4: \\u6587\\u4ef6\\u4e0d\\u5b58\\u5728: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content.txt\"}"
        },
        "execution_time": 0.39403724670410156,
        "is_functional_test": true
      },
      {
        "case_name": "Git Add Nonexistent File",
        "purpose": "验证尝试添加不存在的文件是否会抛出 ValueError。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\git_repo_@test#123",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\git_repo_@test#123\"}"
        },
        "execution_time": 0.28161120414733887,
        "is_functional_test": false
      },
      {
        "case_name": "Git Add to Invalid Repository",
        "purpose": "验证向无效或未初始化的仓库路径执行 add 操作是否会抛出错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_repo\"}"
        },
        "execution_time": 0.28716325759887695,
        "is_functional_test": false
      },
      {
        "case_name": "Git Add Read-Only File",
        "purpose": "验证尝试添加只读文件时是否能正确处理。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\rule1.pdf"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u6587\\u4ef6\\u4e0d\\u5b58\\u5728: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\rule1.pdf\"}"
        },
        "execution_time": 0.3456554412841797,
        "is_functional_test": false
      },
      {
        "case_name": "Git Add with Special Characters in Path",
        "purpose": "测试包含特殊字符的文件路径和仓库路径是否被正确处理。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\git_repo_@test#123",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\screenshot_@test#123_output.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\git_repo_@test#123\"}"
        },
        "execution_time": 0.640733003616333,
        "is_functional_test": true
      },
      {
        "case_name": "Git Add Hidden File",
        "purpose": "验证添加隐藏文件（系统属性）时的行为是否安全且可控。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u6587\\u4ef6\\u4e0d\\u5b58\\u5728: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.hidden_file.txt\"}"
        },
        "execution_time": 1.0278608798980713,
        "is_functional_test": false
      },
      {
        "case_name": "Git Add Long Path File",
        "purpose": "测试最大长度路径是否能被正常处理。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z\\max_depth_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z\\max_depth_repo\\testfile.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\a\\\\b\\\\c\\\\d\\\\e\\\\f\\\\g\\\\h\\\\i\\\\j\\\\k\\\\l\\\\m\\\\n\\\\o\\\\p\\\\q\\\\r\\\\s\\\\t\\\\u\\\\v\\\\w\\\\x\\\\y\\\\z\\\\max_depth_repo\"}"
        },
        "execution_time": 0.3947572708129883,
        "is_functional_test": true
      }
    ],
    "git_diff_unstaged": [
      {
        "case_name": "Basic Git Diff Unstaged",
        "purpose": "验证工具可以正确获取未暂存的Git差异内容的基本功能。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u672a\\u6682\\u5b58\\u5dee\\u5f02\\u83b7\\u53d6\\u6210\\u529f\", \"data\": \"\\u672a\\u6682\\u5b58\\u7684\\u66f4\\u6539:\\n\"}"
        },
        "execution_time": 3.9692344665527344,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Unstaged with Skip Dependent Steps True",
        "purpose": "验证当 skip_dependent_steps 设置为 True 时，是否能正常执行并获取未暂存的差异。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "skip_dependent_steps": true
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u672a\\u6682\\u5b58\\u5dee\\u5f02\\u83b7\\u53d6\\u6210\\u529f\", \"data\": \"\\u672a\\u6682\\u5b58\\u7684\\u66f4\\u6539:\\n\"}"
        },
        "execution_time": 3.1985602378845215,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Unstaged on Empty Repository",
        "purpose": "测试在空仓库中调用 git_diff_unstaged 是否返回空结果或合理信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u672a\\u6682\\u5b58\\u5dee\\u5f02\\u83b7\\u53d6\\u6210\\u529f\", \"data\": \"\\u672a\\u6682\\u5b58\\u7684\\u66f4\\u6539:\\n\"}"
        },
        "execution_time": 3.948091983795166,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Unstaged with Invalid Path",
        "purpose": "验证使用无效仓库路径是否会抛出 ValueError。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir\\invalid_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u672a\\u6682\\u5b58\\u5dee\\u5f02\\u83b7\\u53d6\\u6210\\u529f\", \"data\": \"\\u672a\\u6682\\u5b58\\u7684\\u66f4\\u6539:\\n\"}"
        },
        "execution_time": 3.152153968811035,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Unstaged on Non-Git Directory",
        "purpose": "验证在非Git目录上调用该工具是否会抛出 GitCommandError。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"UnexpectedError\", \"message\": \"\\u672a\\u77e5\\u9519\\u8bef: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\"}"
        },
        "execution_time": 0.21045374870300293,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Unstaged with Special Characters in Path",
        "purpose": "测试包含特殊字符的仓库路径是否被正确处理。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\git_repo_@test#123"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\git_repo_@test#123\"}"
        },
        "execution_time": 0.2762789726257324,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Unstaged with Hidden Path",
        "purpose": "验证在隐藏路径下执行该工具是否被允许并成功执行。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u672a\\u6682\\u5b58\\u5dee\\u5f02\\u83b7\\u53d6\\u6210\\u529f\", \"data\": \"\\u672a\\u6682\\u5b58\\u7684\\u66f4\\u6539:\\n\"}"
        },
        "execution_time": 2.730320453643799,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Unstaged with No Changes",
        "purpose": "验证在没有未暂存更改的仓库中执行该工具是否会返回空字符串或合理信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u672a\\u6682\\u5b58\\u5dee\\u5f02\\u83b7\\u53d6\\u6210\\u529f\", \"data\": \"\\u672a\\u6682\\u5b58\\u7684\\u66f4\\u6539:\\n\"}"
        },
        "execution_time": 2.871884822845459,
        "is_functional_test": true
      }
    ],
    "git_commit": [
      {
        "case_name": "Basic Git Commit",
        "purpose": "验证在已初始化的仓库中进行基本提交操作是否成功。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "message": "Initial commit"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u6ca1\\u6709\\u9700\\u8981\\u63d0\\u4ea4\\u7684\\u66f4\\u6539\"}"
        },
        "execution_time": 2.365330219268799,
        "is_functional_test": true
      },
      {
        "case_name": "Git Commit with Skip Dependent Steps True",
        "purpose": "验证当 skip_dependent_steps 设置为 True 时，提交是否能正常执行。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo",
          "message": "Commit with skip dependent steps",
          "skip_dependent_steps": true
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"DependencySkipped\", \"message\": \"\\u8df3\\u8fc7\\u4f9d\\u8d56\\u6b65\\u9aa4: \\u6ca1\\u6709\\u9700\\u8981\\u63d0\\u4ea4\\u7684\\u66f4\\u6539\"}"
        },
        "execution_time": 2.4905707836151123,
        "is_functional_test": true
      },
      {
        "case_name": "Git Commit on Nonexistent Repository",
        "purpose": "验证尝试在不存在的仓库路径中提交是否会抛出 ValueError。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir\\invalid_repo",
          "message": "This should fail due to invalid repo path"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u6ca1\\u6709\\u9700\\u8981\\u63d0\\u4ea4\\u7684\\u66f4\\u6539\"}"
        },
        "execution_time": 2.297808885574341,
        "is_functional_test": false
      },
      {
        "case_name": "Git Commit with Empty Message",
        "purpose": "测试使用空提交信息是否引发 ValueError。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "message": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u5fc5\\u987b\\u63d0\\u4f9b\\u6709\\u6548\\u7684\\u63d0\\u4ea4\\u4fe1\\u606f\"}"
        },
        "execution_time": 0.3485589027404785,
        "is_functional_test": false
      },
      {
        "case_name": "Git Commit with Special Characters in Path",
        "purpose": "测试包含特殊字符的仓库路径是否被正确处理。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\git_repo_@test#123",
          "message": "Committing to a repo with special characters in path"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\git_repo_@test#123\"}"
        },
        "execution_time": 0.3670470714569092,
        "is_functional_test": true
      },
      {
        "case_name": "Git Commit on Read-Only Repository",
        "purpose": "验证尝试在只读仓库中提交是否会抛出权限错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo",
          "message": "Trying to commit to a read-only repository"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u6ca1\\u6709\\u9700\\u8981\\u63d0\\u4ea4\\u7684\\u66f4\\u6539\"}"
        },
        "execution_time": 2.5895116329193115,
        "is_functional_test": false
      },
      {
        "case_name": "Git Commit with Long Message",
        "purpose": "测试提交信息长度边界情况，确保长消息可以正常提交。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "message": "This is a very long commit message that exceeds the typical length limit to test how the system handles lengthy messages. This message is intended to verify buffer size and string handling capabilities of the git_commit tool."
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u6ca1\\u6709\\u9700\\u8981\\u63d0\\u4ea4\\u7684\\u66f4\\u6539\"}"
        },
        "execution_time": 1.9207990169525146,
        "is_functional_test": true
      },
      {
        "case_name": "Git Commit Without Initializing Repository",
        "purpose": "验证未初始化的目录下执行提交是否会抛出 GitCommandError。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Commit without git init"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"UnexpectedError\", \"message\": \"\\u672a\\u77e5\\u9519\\u8bef: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\"}"
        },
        "execution_time": 0.19793987274169922,
        "is_functional_test": false
      }
    ],
    "git_diff_staged": [
      {
        "case_name": "Basic Git Diff Staged",
        "purpose": "验证工具可以查看已暂存的差异的基本功能。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"UnexpectedError\", \"message\": \"\\u672a\\u77e5\\u9519\\u8bef: Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.9023993015289307,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Staged with Skip Dependent Steps True",
        "purpose": "验证当 skip_dependent_steps 设置为 True 时，是否能正常查看已暂存的差异。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo",
          "skip_dependent_steps": true
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"DependencySkipped\", \"message\": \"\\u8df3\\u8fc7\\u4f9d\\u8d56\\u6b65\\u9aa4: Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.3766660690307617,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Staged on Empty Repository",
        "purpose": "测试在空仓库中执行 git diff staged 是否返回空结果或合理提示。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"UnexpectedError\", \"message\": \"\\u672a\\u77e5\\u9519\\u8bef: Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.31976795196533203,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Staged with Invalid Path",
        "purpose": "验证使用无效路径时是否会抛出 ValueError。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir\\invalid_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"UnexpectedError\", \"message\": \"\\u672a\\u77e5\\u9519\\u8bef: Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.8782904148101807,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Staged on Read-Only Directory",
        "purpose": "验证尝试在只读目录中执行 git diff staged 是否会抛出权限错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.hidden_file.txt\"}"
        },
        "execution_time": 0.2634003162384033,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Staged with Special Characters in Path",
        "purpose": "测试包含特殊字符的仓库路径是否被正确处理。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\git_repo_@test#123"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\git_repo_@test#123\"}"
        },
        "execution_time": 0.2460343837738037,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Staged with Hidden Path",
        "purpose": "验证在隐藏路径下执行 git diff staged 是否被允许并成功执行。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"UnexpectedError\", \"message\": \"\\u672a\\u77e5\\u9519\\u8bef: Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.2780437469482422,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Staged Empty Path",
        "purpose": "验证空路径参数是否引发 ValueError。",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: \"}"
        },
        "execution_time": 0.2317647933959961,
        "is_functional_test": false
      }
    ],
    "git_log": [
      {
        "case_name": "Basic Git Log Retrieval",
        "purpose": "验证工具可以正常获取指定Git仓库的提交历史。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"Reference at 'refs/heads/master' does not exist\"}"
        },
        "execution_time": 0.2588465213775635,
        "is_functional_test": true
      },
      {
        "case_name": "Git Log with Skip Dependent Steps True",
        "purpose": "验证当 skip_dependent_steps 设置为 True 时，是否能正常获取提交历史。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "skip_dependent_steps": true
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"DependencySkipped\", \"message\": \"\\u8df3\\u8fc7\\u4f9d\\u8d56\\u6b65\\u9aa4: Reference at 'refs/heads/master' does not exist\"}"
        },
        "execution_time": 0.3000819683074951,
        "is_functional_test": true
      },
      {
        "case_name": "Git Log on Hidden Repository",
        "purpose": "验证工具能否从隐藏路径下的Git仓库中读取提交历史。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"Reference at 'refs/heads/master' does not exist\"}"
        },
        "execution_time": 0.2631680965423584,
        "is_functional_test": true
      },
      {
        "case_name": "Git Log with Special Characters in Path",
        "purpose": "测试包含特殊字符的仓库路径是否被正确处理。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\git_repo_@test#123"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\git_repo_@test#123\"}"
        },
        "execution_time": 0.26111578941345215,
        "is_functional_test": true
      },
      {
        "case_name": "Git Log on Nonexistent Directory",
        "purpose": "验证尝试访问不存在的仓库路径时是否抛出 ValueError。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir\\invalid_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"Reference at 'refs/heads/master' does not exist\"}"
        },
        "execution_time": 0.23014402389526367,
        "is_functional_test": false
      },
      {
        "case_name": "Git Log with Empty Path",
        "purpose": "验证空路径参数是否引发 ValueError。",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: \"}"
        },
        "execution_time": 0.3129291534423828,
        "is_functional_test": false
      },
      {
        "case_name": "Git Log on Read-Only Repository",
        "purpose": "验证尝试读取只读仓库的提交历史是否会抛出权限错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.hidden_file.txt\"}"
        },
        "execution_time": 0.17360806465148926,
        "is_functional_test": false
      },
      {
        "case_name": "Git Log Path Length Boundary",
        "purpose": "测试最大长度路径是否能被正常处理。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z\\max_depth_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\\\\\a\\\\b\\\\c\\\\d\\\\e\\\\f\\\\g\\\\h\\\\i\\\\j\\\\k\\\\l\\\\m\\\\n\\\\o\\\\p\\\\q\\\\r\\\\s\\\\t\\\\u\\\\v\\\\w\\\\x\\\\y\\\\z\\\\max_depth_repo\"}"
        },
        "execution_time": 0.3218505382537842,
        "is_functional_test": true
      }
    ],
    "git_diff": [
      {
        "case_name": "Basic Git Diff Between Commits",
        "purpose": "验证工具能够正确比较两个提交之间的差异内容（基本功能测试）。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo",
          "commit1": "HEAD~1",
          "commit2": "HEAD"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6cd5\\u89e3\\u6790\\u7b2c\\u4e00\\u4e2a\\u63d0\\u4ea4\\u6807\\u8bc6: HEAD~1\"}"
        },
        "execution_time": 0.3003101348876953,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff with Skip Dependent Steps True",
        "purpose": "验证当 skip_dependent_steps 设置为 True 时，工具是否仍能正常执行 diff 操作。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo",
          "commit1": "HEAD~1",
          "commit2": "HEAD",
          "skip_dependent_steps": true
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"DependencySkipped\", \"message\": \"\\u8df3\\u8fc7\\u4f9d\\u8d56\\u6b65\\u9aa4: \\u65e0\\u6cd5\\u89e3\\u6790\\u7b2c\\u4e00\\u4e2a\\u63d0\\u4ea4\\u6807\\u8bc6: HEAD~1\"}"
        },
        "execution_time": 0.2557363510131836,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff on Nonexistent Repository Path",
        "purpose": "验证使用不存在的仓库路径是否会抛出 ValueError。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir\\invalid_repo",
          "commit1": "HEAD~1",
          "commit2": "HEAD"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6cd5\\u89e3\\u6790\\u7b2c\\u4e00\\u4e2a\\u63d0\\u4ea4\\u6807\\u8bc6: HEAD~1\"}"
        },
        "execution_time": 0.26081085205078125,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff with Invalid Commit Hash",
        "purpose": "验证提供无效的提交哈希值是否会引发 GitCommandError。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo",
          "commit1": "invalid_commit_hash_1",
          "commit2": "invalid_commit_hash_2"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6cd5\\u89e3\\u6790\\u7b2c\\u4e00\\u4e2a\\u63d0\\u4ea4\\u6807\\u8bc6: invalid_commit_hash_1\"}"
        },
        "execution_time": 0.19726228713989258,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Between Branches",
        "purpose": "验证工具可以比较两个分支之间的差异内容。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo",
          "commit1": "main",
          "commit2": "feature-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6cd5\\u89e3\\u6790\\u7b2c\\u4e00\\u4e2a\\u63d0\\u4ea4\\u6807\\u8bc6: main\"}"
        },
        "execution_time": 0.29045772552490234,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff with Special Characters in Repo Path",
        "purpose": "验证包含特殊字符的仓库路径是否被正确处理并执行 diff。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\git_repo_@test#123",
          "commit1": "HEAD~1",
          "commit2": "HEAD"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\git_repo_@test#123\"}"
        },
        "execution_time": 0.3328835964202881,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff on Read-Only Repository",
        "purpose": "验证尝试对只读仓库执行 diff 是否会抛出权限错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_file.txt",
          "commit1": "HEAD~1",
          "commit2": "HEAD"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.hidden_file.txt\"}"
        },
        "execution_time": 0.3184194564819336,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff with Maximum Length Commit Hash",
        "purpose": "验证最大长度的提交哈希是否能被正常处理。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo",
          "commit1": "a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0",
          "commit2": "b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6cd5\\u89e3\\u6790\\u7b2c\\u4e00\\u4e2a\\u63d0\\u4ea4\\u6807\\u8bc6: a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0\"}"
        },
        "execution_time": 2.1352477073669434,
        "is_functional_test": true
      }
    ],
    "git_reset": [
      {
        "case_name": "Basic Git Reset",
        "purpose": "验证工具可以取消暂存指定文件的基本功能。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"UnexpectedError\", \"message\": \"\\u672a\\u77e5\\u9519\\u8bef: Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.29438281059265137,
        "is_functional_test": true
      },
      {
        "case_name": "Git Reset with Skip Dependent Steps True",
        "purpose": "验证当 skip_dependent_steps 设置为 True 时，是否能正常取消暂存文件。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\swe.pptx",
          "skip_dependent_steps": true
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"DependencySkipped\", \"message\": \"\\u8df3\\u8fc7\\u4f9d\\u8d56\\u6b65\\u9aa4: Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.2771162986755371,
        "is_functional_test": true
      },
      {
        "case_name": "Git Reset on Nonexistent File",
        "purpose": "验证尝试取消暂存不存在的文件是否会抛出 ValueError。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"UnexpectedError\", \"message\": \"\\u672a\\u77e5\\u9519\\u8bef: Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.31891441345214844,
        "is_functional_test": false
      },
      {
        "case_name": "Git Reset with Invalid Repo Path",
        "purpose": "验证使用无效仓库路径时是否会抛出 ValueError。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\invalid_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\app.ico"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\invalid_repo\"}"
        },
        "execution_time": 0.6319687366485596,
        "is_functional_test": false
      },
      {
        "case_name": "Git Reset on Read-Only File",
        "purpose": "验证尝试取消暂存只读文件时的行为是否安全且可控。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\paper1.pdf"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"UnexpectedError\", \"message\": \"\\u672a\\u77e5\\u9519\\u8bef: Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.2265150547027588,
        "is_functional_test": false
      },
      {
        "case_name": "Git Reset with Special Characters in File Path",
        "purpose": "测试包含特殊字符的文件路径是否被正确处理。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\screenshot_@test#123_output.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"UnexpectedError\", \"message\": \"\\u672a\\u77e5\\u9519\\u8bef: Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.16873550415039062,
        "is_functional_test": true
      },
      {
        "case_name": "Git Reset on Hidden File",
        "purpose": "验证取消暂存隐藏文件（系统属性）时的行为是否安全且可控。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"UnexpectedError\", \"message\": \"\\u672a\\u77e5\\u9519\\u8bef: Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.38004541397094727,
        "is_functional_test": false
      },
      {
        "case_name": "Git Reset Empty File Path",
        "purpose": "验证空文件路径参数是否引发 ValueError。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "file_path": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u5fc5\\u987b\\u63d0\\u4f9b\\u6709\\u6548\\u7684\\u6587\\u4ef6\\u8def\\u5f84\"}"
        },
        "execution_time": 0.16387629508972168,
        "is_functional_test": false
      }
    ],
    "git_create_branch": [
      {
        "case_name": "Basic Git Create Branch",
        "purpose": "验证在已初始化的Git仓库中创建新分支的基本功能。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "branch_name": "feature/test-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"UnexpectedError\", \"message\": \"\\u672a\\u77e5\\u9519\\u8bef: Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.46863722801208496,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch with Skip Dependent Steps True",
        "purpose": "验证当 skip_dependent_steps 设置为 True 时，是否能正常创建分支。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo",
          "branch_name": "skip_dep_test",
          "skip_dependent_steps": true
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"DependencySkipped\", \"message\": \"\\u8df3\\u8fc7\\u4f9d\\u8d56\\u6b65\\u9aa4: Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.23441243171691895,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch in Nonexistent Repository",
        "purpose": "验证尝试在不存在的仓库路径中创建分支是否会抛出 ValueError。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir\\invalid_repo",
          "branch_name": "invalid_branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"UnexpectedError\", \"message\": \"\\u672a\\u77e5\\u9519\\u8bef: Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.2908599376678467,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Empty Name",
        "purpose": "测试使用空分支名称是否引发 ValueError。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "branch_name": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u5fc5\\u987b\\u63d0\\u4f9b\\u6709\\u6548\\u7684\\u5206\\u652f\\u540d\\u79f0\"}"
        },
        "execution_time": 0.5815935134887695,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Special Characters in Name",
        "purpose": "测试包含特殊字符的分支名称是否被正确处理。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo",
          "branch_name": "branch_@test#123"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"UnexpectedError\", \"message\": \"\\u672a\\u77e5\\u9519\\u8bef: Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.4257822036743164,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch on Read-Only Repository",
        "purpose": "验证尝试在只读仓库中创建分支是否会抛出权限错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_file.txt",
          "branch_name": "readonly_branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.hidden_file.txt\"}"
        },
        "execution_time": 0.3507552146911621,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Maximum Length Name",
        "purpose": "测试最大长度的分支名称是否能被正常处理。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "branch_name": "a12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123......"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"UnexpectedError\", \"message\": \"\\u672a\\u77e5\\u9519\\u8bef: Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.4297654628753662,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch in Hidden Repository",
        "purpose": "验证在隐藏路径下的仓库中创建分支是否被允许并成功执行。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo",
          "branch_name": "hidden_branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"UnexpectedError\", \"message\": \"\\u672a\\u77e5\\u9519\\u8bef: Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.3449411392211914,
        "is_functional_test": true
      }
    ],
    "git_checkout": [
      {
        "case_name": "Basic Git Checkout",
        "purpose": "验证工具可以成功切换到指定分支的基本功能。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u5206\\u652f main \\u4e0d\\u5b58\\u5728\"}"
        },
        "execution_time": 0.5546624660491943,
        "is_functional_test": true
      },
      {
        "case_name": "Git Checkout with Skip Dependent Steps True",
        "purpose": "验证当 skip_dependent_steps 设置为 True 时，是否能正常切换分支。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "branch_name": "develop",
          "skip_dependent_steps": true
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"DependencySkipped\", \"message\": \"\\u8df3\\u8fc7\\u4f9d\\u8d56\\u6b65\\u9aa4: \\u5206\\u652f develop \\u4e0d\\u5b58\\u5728\"}"
        },
        "execution_time": 0.8189852237701416,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout to Nonexistent Branch",
        "purpose": "测试尝试切换到不存在的分支是否会抛出 GitCommandError。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo",
          "branch_name": "nonexistent_branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u5206\\u652f nonexistent_branch \\u4e0d\\u5b58\\u5728\"}"
        },
        "execution_time": 0.5902538299560547,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout with Invalid Repo Path",
        "purpose": "验证使用无效仓库路径时是否会抛出 ValueError。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir\\invalid_repo",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u5206\\u652f main \\u4e0d\\u5b58\\u5728\"}"
        },
        "execution_time": 0.39756274223327637,
        "is_functional_test": false
      },
      {
        "case_name": "Git Checkout on Read-Only Repository",
        "purpose": "验证尝试在只读仓库中切换分支是否会抛出权限错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_file.txt",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.hidden_file.txt\"}"
        },
        "execution_time": 0.4579763412475586,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout with Special Characters in Branch Name",
        "purpose": "测试包含特殊字符的分支名称是否被正确处理。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo",
          "branch_name": "feature_@test#123"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u5206\\u652f feature_@test#123 \\u4e0d\\u5b58\\u5728\"}"
        },
        "execution_time": 0.5160212516784668,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout Empty Branch Name",
        "purpose": "验证空分支名称是否引发 ValueError。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo",
          "branch_name": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u5fc5\\u987b\\u63d0\\u4f9b\\u6709\\u6548\\u7684\\u5206\\u652f\\u540d\\u79f0\"}"
        },
        "execution_time": 0.21347355842590332,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout to Long Branch Name",
        "purpose": "测试最大长度分支名称是否能被正常处理。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo",
          "branch_name": "a_very_long_branch_name_that_tests_the_maximum_length_limit_of_a_git_branch_name_and_should_still_work_if_properly_handled"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u5206\\u652f a_very_long_branch_name_that_tests_the_maximum_length_limit_of_a_git_branch_name_and_should_still_work_if_properly_handled \\u4e0d\\u5b58\\u5728\"}"
        },
        "execution_time": 0.3348255157470703,
        "is_functional_test": true
      }
    ],
    "git_show": [
      {
        "case_name": "Basic Git Show",
        "purpose": "验证工具可以显示指定提交的详细内容的基本功能。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo",
          "commit_hash": "HEAD"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6cd5\\u89e3\\u6790\\u63d0\\u4ea4\\u54c8\\u5e0c: HEAD\"}"
        },
        "execution_time": 0.25803470611572266,
        "is_functional_test": true
      },
      {
        "case_name": "Git Show with Skip Dependent Steps True",
        "purpose": "验证当 skip_dependent_steps 设置为 True 时，是否能正常显示提交信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "commit_hash": "HEAD",
          "skip_dependent_steps": true
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"DependencySkipped\", \"message\": \"\\u8df3\\u8fc7\\u4f9d\\u8d56\\u6b65\\u9aa4: \\u65e0\\u6cd5\\u89e3\\u6790\\u63d0\\u4ea4\\u54c8\\u5e0c: HEAD\"}"
        },
        "execution_time": 0.23008465766906738,
        "is_functional_test": true
      },
      {
        "case_name": "Git Show Invalid Repository Path",
        "purpose": "测试使用无效仓库路径时是否会抛出 ValueError。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir\\invalid_repo",
          "commit_hash": "HEAD"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6cd5\\u89e3\\u6790\\u63d0\\u4ea4\\u54c8\\u5e0c: HEAD\"}"
        },
        "execution_time": 0.28712034225463867,
        "is_functional_test": false
      },
      {
        "case_name": "Git Show Invalid Commit Hash",
        "purpose": "测试使用无效提交哈希时是否会抛出 ValueError。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo",
          "commit_hash": "invalid_commit_hash"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6cd5\\u89e3\\u6790\\u63d0\\u4ea4\\u54c8\\u5e0c: invalid_commit_hash\"}"
        },
        "execution_time": 0.24630498886108398,
        "is_functional_test": false
      },
      {
        "case_name": "Git Show on Read-Only Repository",
        "purpose": "验证尝试在只读仓库中执行 git show 是否引发权限错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\rule1.pdf",
          "commit_hash": "HEAD"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\rule1.pdf\"}"
        },
        "execution_time": 0.3007688522338867,
        "is_functional_test": false
      },
      {
        "case_name": "Git Show with Special Characters in Repo Path",
        "purpose": "测试包含特殊字符的仓库路径是否被正确处理。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\git_repo_@test#123",
          "commit_hash": "HEAD"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\git_repo_@test#123\"}"
        },
        "execution_time": 0.18507099151611328,
        "is_functional_test": true
      },
      {
        "case_name": "Git Show Empty Commit Hash",
        "purpose": "验证空提交哈希参数是否引发 ValueError。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo",
          "commit_hash": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u5fc5\\u987b\\u63d0\\u4f9b\\u6709\\u6548\\u7684\\u63d0\\u4ea4\\u54c8\\u5e0c\"}"
        },
        "execution_time": 0.17798566818237305,
        "is_functional_test": false
      },
      {
        "case_name": "Git Show Hidden Repository",
        "purpose": "验证在隐藏路径下的仓库是否能正常显示提交信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo",
          "commit_hash": "HEAD"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6cd5\\u89e3\\u6790\\u63d0\\u4ea4\\u54c8\\u5e0c: HEAD\"}"
        },
        "execution_time": 0.46550631523132324,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 103
}