{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "qwen-plus-mcp_mongodb_manager",
  "server_path": "workspace/pipeline-output-servers/qwen-plus/mcp_mongodb_manager/refined/server.py",
  "timestamp": "2025-07-13T03:07:59.852075",
  "tools": [
    {
      "name": "mcp_list_databases",
      "description": "\n    Lists all available databases in the connected MongoDB instance.\n\n    Returns:\n        A JSON string containing a list of database names.\n\n    Example:\n        mcp_list_databases()\n        # Returns: {\"databases\": [\"admin\", \"config\", \"local\"]}\n    ",
      "args_schema": {
        "properties": {},
        "title": "mcp_list_databasesArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_list_collections",
      "description": "\n    Lists all collections within a specified database.\n\n    Args:\n        database_name: Name of the database.\n\n    Returns:\n        A JSON string containing a list of collection names within the specified database.\n\n    Example:\n        mcp_list_collections(database_name=\"test_db\")\n        # Returns: {\"collections\": [\"users\", \"products\"]}\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          }
        },
        "required": [
          "database_name"
        ],
        "title": "mcp_list_collectionsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_insert_document",
      "description": "\n    Inserts a new document into a specified database and collection.\n\n    Args:\n        database_name: Name of the database.\n        collection_name: Name of the collection.\n        document: Document data to insert.\n\n    Returns:\n        A JSON string containing the inserted document ID.\n\n    Example:\n        mcp_insert_document(database_name=\"test_db\", collection_name=\"users\", document={\"name\": \"John Doe\", \"age\": 30})\n        # Returns: {\"inserted_id\": \"60c72b2f54b9a1b4e3d5f8a1\"}\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "document": {
            "title": "Document",
            "type": "object"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "document"
        ],
        "title": "mcp_insert_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_find_documents",
      "description": "\n    Finds documents matching a query within a specified database and collection.\n\n    Args:\n        database_name: Name of the database.\n        collection_name: Name of the collection.\n        query: Query criteria.\n        projection: Fields to include or exclude (optional).\n        limit: Maximum number of results to return (optional).\n\n    Returns:\n        A JSON string containing a list of matching documents.\n\n    Example:\n        mcp_find_documents(database_name=\"test_db\", collection_name=\"users\", query={\"age\": {\"$gt\": 25}}, projection={\"name\": 1}, limit=10)\n        # Returns: {\"documents\": [{\"_id\": \"60c72b2f54b9a1b4e3d5f8a1\", \"name\": \"John Doe\"}]}\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "title": "Query",
            "type": "object"
          },
          "projection": {
            "default": null,
            "title": "Projection",
            "type": "object"
          },
          "limit": {
            "default": null,
            "title": "Limit",
            "type": "integer"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "query"
        ],
        "title": "mcp_find_documentsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_update_document",
      "description": "\n    Updates one or more documents within a specified database and collection.\n\n    Args:\n        database_name: Name of the database.\n        collection_name: Name of the collection.\n        filter_query: Criteria to select documents for update.\n        update_query: Update operations.\n        multi: If True, updates all matching documents; otherwise, only the first match.\n\n    Returns:\n        A JSON string containing the number of documents updated.\n\n    Example:\n        mcp_update_document(database_name=\"test_db\", collection_name=\"users\", filter_query={\"name\": \"John Doe\"}, update_query={\"age\": 31}, multi=True)\n        # Returns: {\"updated_count\": 5}\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "filter_query": {
            "title": "Filter Query",
            "type": "object"
          },
          "update_query": {
            "title": "Update Query",
            "type": "object"
          },
          "multi": {
            "default": false,
            "title": "Multi",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "filter_query",
          "update_query"
        ],
        "title": "mcp_update_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_delete_document",
      "description": "\n    Deletes one or more documents within a specified database and collection.\n\n    Args:\n        database_name: Name of the database.\n        collection_name: Name of the collection.\n        filter_query: Criteria to select documents for deletion.\n        multi: If True, deletes all matching documents; otherwise, only the first match.\n\n    Returns:\n        A JSON string containing the number of documents deleted.\n\n    Example:\n        mcp_delete_document(database_name=\"test_db\", collection_name=\"users\", filter_query={\"name\": \"John Doe\"}, multi=True)\n        # Returns: {\"deleted_count\": 5}\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "filter_query": {
            "title": "Filter Query",
            "type": "object"
          },
          "multi": {
            "default": false,
            "title": "Multi",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "filter_query"
        ],
        "title": "mcp_delete_documentArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "mcp_list_databases": [
      {
        "case_name": "List Databases Successfully",
        "purpose": "验证工具可以成功列出MongoDB实例中的所有数据库，使用默认参数进行基本功能测试。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]}"
        },
        "execution_time": 0.006000518798828125,
        "is_functional_test": true
      },
      {
        "case_name": "Verify Expected Database Names",
        "purpose": "确认返回的数据库列表包含已知的标准数据库名称如admin、config和local，确保数据准确性。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]}"
        },
        "execution_time": 0.005999565124511719,
        "is_functional_test": true
      },
      {
        "case_name": "Check Empty Database Scenario",
        "purpose": "模拟MongoDB实例中无用户数据库的情况，验证工具是否能正确返回仅含系统数据库的结果。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]}"
        },
        "execution_time": 0.008636236190795898,
        "is_functional_test": true
      },
      {
        "case_name": "Test Unauthorized Access Handling",
        "purpose": "在未授权访问MongoDB的情况下，验证工具是否安全地处理权限不足的错误。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]}"
        },
        "execution_time": 0.008156776428222656,
        "is_functional_test": false
      },
      {
        "case_name": "Handle MongoDB Connection Failure",
        "purpose": "模拟MongoDB连接失败场景，验证工具是否能够优雅地处理连接异常并返回明确错误信息。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]}"
        },
        "execution_time": 0.006406307220458984,
        "is_functional_test": false
      },
      {
        "case_name": "Test with Long Database Names",
        "purpose": "验证工具是否能正确处理包含长名称的数据库，确保边界条件下的兼容性。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]}"
        },
        "execution_time": 0.00673985481262207,
        "is_functional_test": false
      },
      {
        "case_name": "Ensure No Parameters Required",
        "purpose": "确认工具确实不需要任何参数输入，防止因误传参数导致功能异常。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]}"
        },
        "execution_time": 0.004472494125366211,
        "is_functional_test": true
      },
      {
        "case_name": "Test Response Format Consistency",
        "purpose": "验证返回结果始终为符合JSON格式的有效字符串，保证接口调用的一致性和稳定性。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]}"
        },
        "execution_time": 0.007949113845825195,
        "is_functional_test": true
      }
    ],
    "mcp_list_collections": [
      {
        "case_name": "List Collections Successfully",
        "purpose": "验证工具可以成功列出指定数据库中的所有集合，使用默认测试数据库进行基本功能测试。",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "{\"collections\": [\"a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\", \"new_collection\", \"test_collection\", \"empty_docs\", \"invalid/collection*name\", \"user_profiles\", \"long_key_collection\", \"test_collection'; DROP COLLECTION test_collection;--\", \"large_data\", \"special_chars_collection\", \"binary_data_collection\", \"nonexistent_collection\", \"a_very_long_collection_name_that_exceeds_normal_limits_and_might_cause_issues\", \"users\"]}"
        },
        "execution_time": 0.006028890609741211,
        "is_functional_test": true
      },
      {
        "case_name": "Verify Expected Collection Names",
        "purpose": "确认返回的集合列表包含已知的标准集合名称如users、products，确保数据准确性。",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "{\"collections\": [\"a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\", \"new_collection\", \"test_collection\", \"empty_docs\", \"invalid/collection*name\", \"user_profiles\", \"long_key_collection\", \"test_collection'; DROP COLLECTION test_collection;--\", \"large_data\", \"special_chars_collection\", \"binary_data_collection\", \"nonexistent_collection\", \"a_very_long_collection_name_that_exceeds_normal_limits_and_might_cause_issues\", \"users\"]}"
        },
        "execution_time": 0.004910469055175781,
        "is_functional_test": true
      },
      {
        "case_name": "Check Empty Collection Scenario",
        "purpose": "模拟数据库中无集合的情况，验证工具是否能正确返回空集合数组。",
        "args": {
          "database_name": "empty_db"
        },
        "response": {
          "result": "{\"error\": \"Database 'empty_db' does not exist.\"}"
        },
        "execution_time": 0.002999544143676758,
        "is_functional_test": true
      },
      {
        "case_name": "Test Unauthorized Access Handling",
        "purpose": "在未授权访问数据库的情况下，验证工具是否安全地处理权限不足的错误。",
        "args": {
          "database_name": "restricted_db"
        },
        "response": {
          "result": "{\"collections\": [\"secure_collection\"]}"
        },
        "execution_time": 0.0029997825622558594,
        "is_functional_test": false
      },
      {
        "case_name": "Handle Database Connection Failure",
        "purpose": "模拟数据库连接失败场景，验证工具是否能够优雅地处理连接异常并返回明确错误信息。",
        "args": {
          "database_name": "offline_db"
        },
        "response": {
          "result": "{\"collections\": [\"users\"]}"
        },
        "execution_time": 0.004001140594482422,
        "is_functional_test": false
      },
      {
        "case_name": "Test with Invalid Database Name",
        "purpose": "验证工具是否能正确处理无效或格式错误的数据库名称输入。",
        "args": {
          "database_name": "invalid_database!"
        },
        "response": {
          "result": "{\"error\": \"Database 'invalid_database!' does not exist.\"}"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": false
      },
      {
        "case_name": "Test with Long Database Name",
        "purpose": "验证工具是否能正确处理包含长名称的数据库，确保边界条件下的兼容性。",
        "args": {
          "database_name": "very_long_database_name_1234567890abcdefghijklmnopqrstuvwxyz"
        },
        "response": {
          "result": "{\"error\": \"Database 'very_long_database_name_1234567890abcdefghijklmnopqrstuvwxyz' does not exist.\"}"
        },
        "execution_time": 0.007001161575317383,
        "is_functional_test": false
      },
      {
        "case_name": "Test Response Format Consistency",
        "purpose": "验证返回结果始终为符合JSON格式的有效字符串，保证接口调用的一致性和稳定性。",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "{\"collections\": [\"a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\", \"new_collection\", \"test_collection\", \"empty_docs\", \"invalid/collection*name\", \"user_profiles\", \"long_key_collection\", \"test_collection'; DROP COLLECTION test_collection;--\", \"large_data\", \"special_chars_collection\", \"binary_data_collection\", \"nonexistent_collection\", \"a_very_long_collection_name_that_exceeds_normal_limits_and_might_cause_issues\", \"users\"]}"
        },
        "execution_time": 0.005211353302001953,
        "is_functional_test": true
      }
    ],
    "mcp_insert_document": [
      {
        "case_name": "Insert Document Successfully",
        "purpose": "验证工具可以成功向指定数据库和集合中插入文档，使用默认参数进行基本功能测试。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "document": {
            "name": "John Doe",
            "age": 30
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"6872b2dfbde7bc28413c274d\"}"
        },
        "execution_time": 0.004999637603759766,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document with Special Characters in Database Name",
        "purpose": "验证工具是否能正确处理包含特殊字符的数据库名称，并成功插入文档。",
        "args": {
          "database_name": "db@#_测试",
          "collection_name": "users",
          "document": {
            "username": "special_user"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"6872b2dfbde7bc28413c274e\"}"
        },
        "execution_time": 0.00500035285949707,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document into Non-Existent Collection",
        "purpose": "验证当目标集合不存在时，工具是否能够自动创建集合并成功插入文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "document": {
            "key": "value"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"6872b2dfbde7bc28413c274f\"}"
        },
        "execution_time": 0.008003711700439453,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document with Long Field Names",
        "purpose": "验证工具是否能处理文档中字段名过长的情况，确保边界条件下的兼容性。",
        "args": {
          "database_name": "test_db",
          "collection_name": "long_key_collection",
          "document": {
            "a_very_long_field_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it": "test_value"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"6872b2dfbde7bc28413c2750\"}"
        },
        "execution_time": 0.00799870491027832,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document with Invalid Database Name",
        "purpose": "验证工具是否能安全地拒绝无效或格式错误的数据库名称输入，并返回明确错误信息。",
        "args": {
          "database_name": "invalid_database!",
          "collection_name": "users",
          "document": {
            "name": "Test User"
          }
        },
        "response": {
          "result": "{\"error\": \"Database 'invalid_database!' does not exist.\"}"
        },
        "execution_time": 0.008042097091674805,
        "is_functional_test": false
      },
      {
        "case_name": "Insert Document into Restricted Database",
        "purpose": "在未授权访问数据库的情况下，验证工具是否安全地处理权限不足的错误。",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "secure_collection",
          "document": {
            "data": "sensitive_info"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"6872b2dfbde7bc28413c2751\"}"
        },
        "execution_time": 0.0049664974212646484,
        "is_functional_test": false
      }
    ],
    "mcp_find_documents": [
      {
        "case_name": "Basic Document Search with Valid Query",
        "purpose": "验证工具可以使用有效的数据库、集合和查询条件检索文档，确保基本功能正常工作。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "age": {
              "$gt": 25
            }
          }
        },
        "response": {
          "result": "{\"documents\": [{\"_id\": \"6872b2dfbde7bc28413c274d\", \"name\": \"John Doe\", \"age\": 30}]}"
        },
        "execution_time": 0.00500035285949707,
        "is_functional_test": true
      },
      {
        "case_name": "Document Search with Projection",
        "purpose": "验证工具在指定投影字段时能正确返回部分字段数据。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "age": {
              "$lt": 30
            }
          },
          "projection": {
            "name": 1,
            "_id": 0
          }
        },
        "response": {
          "result": "{\"error\": \"'_id'\"}"
        },
        "execution_time": 0.005002260208129883,
        "is_functional_test": true
      },
      {
        "case_name": "Limit Control Test",
        "purpose": "验证工具在指定limit参数时是否限制返回结果数量。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {},
          "limit": 5
        },
        "response": {
          "result": "{\"documents\": [{\"_id\": \"6872ad03424cddc98ebe1c08\", \"name\": \"Alice\", \"age\": 25}, {\"_id\": \"6872ad03424cddc98ebe1c0b\"}, {\"_id\": \"6872b2dfbde7bc28413c274d\", \"name\": \"John Doe\", \"age\": 30}]}"
        },
        "execution_time": 0.007011890411376953,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Result Handling",
        "purpose": "验证当没有匹配文档时，工具是否优雅地返回空列表。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "age": {
              "$gt": 100
            }
          }
        },
        "response": {
          "result": "{\"documents\": []}"
        },
        "execution_time": 0.0049970149993896484,
        "is_functional_test": true
      },
      {
        "case_name": "SQL Injection Attempt in Collection Name",
        "purpose": "测试工具是否对特殊字符或潜在注入攻击进行安全过滤。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection'; DROP COLLECTION test_collection;--",
          "query": {}
        },
        "response": {
          "result": "{\"documents\": [{\"_id\": \"68710cc7ea7bb66ae3410460\", \"key\": \"injection attempt\"}]}"
        },
        "execution_time": 0.005514383316040039,
        "is_functional_test": false
      },
      {
        "case_name": "Unauthorized Access to Restricted Database",
        "purpose": "验证未授权访问受限数据库时是否返回适当错误或拒绝访问。",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "secure_collection",
          "query": {}
        },
        "response": {
          "result": "{\"documents\": [{\"_id\": \"6872af6d9da8b940f807d369\", \"secret_key\": \"top_secret_value\"}, {\"_id\": \"6872b2dfbde7bc28413c2751\", \"data\": \"sensitive_info\"}]}"
        },
        "execution_time": 0.004503488540649414,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Database Name Handling",
        "purpose": "测试工具是否能正确处理无效数据库名称的情况。",
        "args": {
          "database_name": "invalid_database!",
          "collection_name": "users",
          "query": {}
        },
        "response": {
          "result": "{\"error\": \"Database 'invalid_database!' does not exist.\"}"
        },
        "execution_time": 0.005527973175048828,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Query Field",
        "purpose": "验证工具是否能够处理包含特殊字符的查询字段。",
        "args": {
          "database_name": "test_db",
          "collection_name": "special_chars_collection",
          "query": {
            "user/name": "John Doe"
          }
        },
        "response": {
          "result": "{\"documents\": []}"
        },
        "execution_time": 0.007331132888793945,
        "is_functional_test": true
      }
    ],
    "mcp_update_document": [
      {
        "case_name": "Update Single Document Successfully",
        "purpose": "验证工具可以成功更新匹配filter_query的第一个文档，使用默认multi=False进行基本功能测试。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "name": "John Doe"
          },
          "update_query": {
            "age": 31
          },
          "multi": false
        },
        "response": {
          "result": "{\"updated_count\": 1}"
        },
        "execution_time": 0.005000114440917969,
        "is_functional_test": true
      },
      {
        "case_name": "Update Multiple Documents Successfully",
        "purpose": "验证工具在multi=True时能正确更新所有匹配filter_query的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "status": "active"
          },
          "update_query": {
            "$set": {
              "status": "inactive"
            }
          },
          "multi": true
        },
        "response": {
          "result": "{\"updated_count\": 0}"
        },
        "execution_time": 0.004999399185180664,
        "is_functional_test": true
      },
      {
        "case_name": "Update with Empty Filter Query",
        "purpose": "验证工具在空filter_query下不会更新任何文档，并返回合理的响应。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {},
          "update_query": {
            "$inc": {
              "version": 1
            }
          },
          "multi": true
        },
        "response": {
          "result": "{\"error\": \"The dollar ($) prefixed field '$inc' in '$inc' is not allowed in the context of an update's replacement document. Consider using an aggregation pipeline with $replaceWith., full error: {'index': 0, 'code': 52, 'errmsg': \\\"The dollar ($) prefixed field '$inc' in '$inc' is not allowed in the context of an update's replacement document. Consider using an aggregation pipeline with $replaceWith.\\\"}\"}"
        },
        "execution_time": 0.011782407760620117,
        "is_functional_test": true
      },
      {
        "case_name": "Update Nonexistent Database",
        "purpose": "验证工具在数据库不存在时能否优雅处理错误并返回明确提示。",
        "args": {
          "database_name": "does_not_exist_db",
          "collection_name": "users",
          "filter_query": {
            "name": "John Doe"
          },
          "update_query": {
            "age": 32
          },
          "multi": false
        },
        "response": {
          "result": "{\"error\": \"Collection 'users' does not exist in database 'does_not_exist_db'.\"}"
        },
        "execution_time": 0.008031606674194336,
        "is_functional_test": false
      },
      {
        "case_name": "Update Nonexistent Collection",
        "purpose": "验证工具在集合不存在时是否能够安全地处理错误而不抛出异常。",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "filter_query": {
            "name": "John Doe"
          },
          "update_query": {
            "age": 32
          },
          "multi": false
        },
        "response": {
          "result": "{\"updated_count\": 0}"
        },
        "execution_time": 0.003960609436035156,
        "is_functional_test": false
      },
      {
        "case_name": "Update with Special Characters in Field Names",
        "purpose": "验证工具是否能正确处理包含特殊字符的字段名更新操作。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "user#id": "12345"
          },
          "update_query": {
            "$set": {
              "profile!score": 98.6
            }
          },
          "multi": true
        },
        "response": {
          "result": "{\"updated_count\": 0}"
        },
        "execution_time": 0.008519411087036133,
        "is_functional_test": true
      },
      {
        "case_name": "Update with Long Update Query",
        "purpose": "验证工具是否能处理长字段名和嵌套结构的复杂更新查询。",
        "args": {
          "database_name": "test_db",
          "collection_name": "long_key_collection",
          "filter_query": {
            "key_001": "value_001"
          },
          "update_query": {
            "$set": {
              "very_long_field_name_that_may_exceed_typical_limits_and_require_proper_handling": "new_value"
            }
          },
          "multi": true
        },
        "response": {
          "result": "{\"updated_count\": 0}"
        },
        "execution_time": 0.007136106491088867,
        "is_functional_test": true
      },
      {
        "case_name": "Update with Invalid JSON Structure",
        "purpose": "模拟非法JSON输入，验证工具是否能安全拒绝格式错误的参数。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": "invalid_json",
          "update_query": "invalid_json",
          "multi": true
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_update_document: 2 validation errors for mcp_update_documentArguments\nfilter_query\n  Input should be a valid dictionary [type=dict_type, input_value='invalid_json', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/dict_type\nupdate_query\n  Input should be a valid dictionary [type=dict_type, input_value='invalid_json', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/dict_type"
        },
        "execution_time": 0.0050771236419677734,
        "is_functional_test": false
      }
    ],
    "mcp_delete_document": [
      {
        "case_name": "Delete Single Document Successfully",
        "purpose": "验证工具可以成功删除指定数据库和集合中匹配的第一个文档（multi=False）。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "name": "John Doe"
          },
          "multi": false
        },
        "response": {
          "result": "{\"deleted_count\": 1}"
        },
        "execution_time": 0.004961729049682617,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Multiple Documents Successfully",
        "purpose": "验证工具在multi=True时能正确删除所有符合查询条件的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "status": "inactive"
          },
          "multi": true
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.0060422420501708984,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Without Multi Parameter Uses Default",
        "purpose": "验证当未指定multi参数时，默认只删除第一个匹配项。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "age": 30
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.0060350894927978516,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Delete on Nonexistent Collection",
        "purpose": "测试尝试从不存在的集合中删除文档时的行为，预期返回删除计数为0。",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "filter_query": {
            "name": "John Doe"
          },
          "multi": true
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.009000778198242188,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt Delete with Invalid Database Name",
        "purpose": "验证工具能否安全处理无效或格式错误的数据库名称输入。",
        "args": {
          "database_name": "invalid/database*name",
          "collection_name": "users",
          "filter_query": {
            "name": "John Doe"
          },
          "multi": false
        },
        "response": {
          "result": "{\"error\": \"Database 'invalid/database*name' does not exist.\"}"
        },
        "execution_time": 0.004587888717651367,
        "is_functional_test": false
      },
      {
        "case_name": "Test SQL Injection in Collection Name",
        "purpose": "验证工具是否能安全地处理包含恶意SQL注入字符的集合名，防止执行非法操作。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection'; DROP COLLECTION test_collection;--",
          "filter_query": {
            "name": "Malicious"
          },
          "multi": false
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.0050542354583740234,
        "is_functional_test": false
      },
      {
        "case_name": "Delete Using Special Characters in Filter Query",
        "purpose": "验证工具是否支持在filter_query中使用特殊字符进行筛选。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "username": "user@domain.com"
          },
          "multi": true
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.00802159309387207,
        "is_functional_test": true
      },
      {
        "case_name": "Delete from Empty Collection",
        "purpose": "验证工具在目标集合为空时能否正确处理删除请求，预期返回deleted_count为0。",
        "args": {
          "database_name": "test_db",
          "collection_name": "empty_docs",
          "filter_query": {
            "name": "NonExistentUser"
          },
          "multi": true
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.003838062286376953,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 46
}