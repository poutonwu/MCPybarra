{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "gpt-4o-mcp_git_repo_manager",
  "server_path": "workspace/pipeline-output-servers/gpt-4o/mcp_git_repo_manager/refined/server.py",
  "timestamp": "2025-07-13T02:46:23.515878",
  "tools": [
    {
      "name": "git_init",
      "description": "\n    Initializes a new Git repository in the specified directory.\n\n    Args:\n        directory (str): The path to the directory where the repository should be initialized. Example: '/path/to/new/repo'.\n\n    Returns:\n        str: Confirmation message indicating success or failure.\n\n    Example:\n        git_init(directory='/path/to/new/repo')\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          }
        },
        "required": [
          "directory"
        ],
        "title": "git_initArguments",
        "type": "object"
      }
    },
    {
      "name": "git_status",
      "description": "\n    Retrieves the status of the Git repository, showing changes in the working directory and staged files.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n\n    Returns:\n        dict: A dictionary containing the status of files (e.g., staged, unstaged, modified).\n\n    Example:\n        git_status(repository_path='/path/to/repo')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          }
        },
        "required": [
          "repository_path"
        ],
        "title": "git_statusArguments",
        "type": "object"
      }
    },
    {
      "name": "git_add",
      "description": "\n    Adds specified files to the staging area.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        files (list of str): List of file paths to add to the staging area. Accepts both relative and absolute paths.\n\n    Returns:\n        str: Confirmation message indicating the files added to the staging area.\n\n    Example:\n        git_add(repository_path='/path/to/repo', files=['file1.txt', 'file2.txt'])\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "files": {
            "items": {},
            "title": "Files",
            "type": "array"
          }
        },
        "required": [
          "repository_path",
          "files"
        ],
        "title": "git_addArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_unstaged",
      "description": "\n    Displays the differences in files that are not staged for commit.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n\n    Returns:\n        str: A string showing the diff of unstaged changes.\n\n    Example:\n        git_diff_unstaged(repository_path='/path/to/repo')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          }
        },
        "required": [
          "repository_path"
        ],
        "title": "git_diff_unstagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_staged",
      "description": "\n    Displays the differences in files that are staged for commit.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n\n    Returns:\n        str: A string showing the diff of staged changes.\n\n    Example:\n        git_diff_staged(repository_path='/path/to/repo')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          }
        },
        "required": [
          "repository_path"
        ],
        "title": "git_diff_stagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff",
      "description": "\n    Compares two branches or commits and displays the differences.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        reference1 (str): The first branch or commit to compare. Example: 'HEAD'.\n        reference2 (str): The second branch or commit to compare. Example: 'HEAD~1'.\n\n    Returns:\n        str: A string showing the diff between the two references.\n\n    Example:\n        git_diff(repository_path='/path/to/repo', reference1='HEAD', reference2='HEAD~1')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "reference1": {
            "title": "Reference1",
            "type": "string"
          },
          "reference2": {
            "title": "Reference2",
            "type": "string"
          }
        },
        "required": [
          "repository_path",
          "reference1",
          "reference2"
        ],
        "title": "git_diffArguments",
        "type": "object"
      }
    },
    {
      "name": "git_commit",
      "description": "\n    Commits staged changes to the repository.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        message (str): Commit message describing the changes. Example: 'Initial commit'.\n\n    Returns:\n        str: Confirmation message with the commit hash.\n\n    Example:\n        git_commit(repository_path='/path/to/repo', message='Initial commit')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "message": {
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "repository_path",
          "message"
        ],
        "title": "git_commitArguments",
        "type": "object"
      }
    },
    {
      "name": "git_reset",
      "description": "\n    Removes files from the staging area.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        files (list of str): List of file paths to remove from the staging area. Accepts both relative and absolute paths.\n\n    Returns:\n        str: Confirmation message indicating the files reset.\n\n    Example:\n        git_reset(repository_path='/path/to/repo', files=['file1.txt', 'file2.txt'])\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "files": {
            "items": {},
            "title": "Files",
            "type": "array"
          }
        },
        "required": [
          "repository_path",
          "files"
        ],
        "title": "git_resetArguments",
        "type": "object"
      }
    },
    {
      "name": "git_log",
      "description": "\n    Displays the commit history of the repository.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n\n    Returns:\n        list: A list of dictionaries, each containing commit details (e.g., hash, author, date, message).\n\n    Example:\n        git_log(repository_path='/path/to/repo')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          }
        },
        "required": [
          "repository_path"
        ],
        "title": "git_logArguments",
        "type": "object"
      }
    },
    {
      "name": "git_create_branch",
      "description": "\n    Creates a new branch in the repository.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        branch_name (str): Name of the new branch. Example: 'new-feature'.\n\n    Returns:\n        str: Confirmation message indicating success or failure.\n\n    Example:\n        git_create_branch(repository_path='/path/to/repo', branch_name='new-feature')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "repository_path",
          "branch_name"
        ],
        "title": "git_create_branchArguments",
        "type": "object"
      }
    },
    {
      "name": "git_checkout",
      "description": "\n    Switches the current branch in the repository.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        branch_name (str): Name of the branch to switch to. Example: 'main'.\n\n    Returns:\n        str: Confirmation message indicating the branch switched.\n\n    Example:\n        git_checkout(repository_path='/path/to/repo', branch_name='main')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "repository_path",
          "branch_name"
        ],
        "title": "git_checkoutArguments",
        "type": "object"
      }
    },
    {
      "name": "git_show",
      "description": "\n    Displays detailed information about a specific commit.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        commit_hash (str): The hash of the commit to display. Example: 'abc123'. If None, shows info for HEAD.\n\n    Returns:\n        dict: A dictionary containing commit details (e.g., hash, author, date, message, changes).\n\n    Example:\n        git_show(repository_path='/path/to/repo', commit_hash='abc123')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "commit_hash": {
            "title": "Commit Hash",
            "type": "string"
          }
        },
        "required": [
          "repository_path",
          "commit_hash"
        ],
        "title": "git_showArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "git_init": [
      {
        "case_name": "Initialize Git Repository in Valid Directory",
        "purpose": "验证git_init工具可以在指定的有效目录中成功初始化一个新的Git仓库。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"message\": \"Initialized new Git repository at: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\"}"
        },
        "execution_time": 0.20490789413452148,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Initialize Git Repository in Nonexistent Directory",
        "purpose": "测试当提供的目录路径不存在时，工具是否能正确处理错误并返回失败信息。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "{\"message\": \"Initialized new Git repository at: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\nonexistent_dir\"}"
        },
        "execution_time": 0.16292977333068848,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository with Empty Directory Path",
        "purpose": "验证工具在提供空字符串作为目录参数时的错误处理能力。",
        "args": {
          "directory": ""
        },
        "response": {
          "result": "{\"message\": \"Initialized new Git repository at: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\workspace\\\\pipeline-output-servers\\\\gpt-4o\\\\mcp_git_repo_manager\\\\refined\"}"
        },
        "execution_time": 0.16229677200317383,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository with Special Characters in Path",
        "purpose": "测试包含特殊字符的路径是否能够被正确处理。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test@#$_dir"
        },
        "response": {
          "result": "{\"message\": \"Initialized new Git repository at: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\test@#$_dir\"}"
        },
        "execution_time": 0.15546560287475586,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository in Directory Containing Files",
        "purpose": "验证即使目标目录中已有文件，也能成功初始化Git仓库。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"message\": \"Initialized new Git repository at: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\"}"
        },
        "execution_time": 0.17446184158325195,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository with Long Path Name",
        "purpose": "测试最大长度路径是否可以正常处理。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz"
        },
        "response": {
          "result": "{\"message\": \"Initialized new Git repository at: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz\"}"
        },
        "execution_time": 0.19986224174499512,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Initialize Git Repository Without Write Permissions",
        "purpose": "模拟用户没有写权限的情况，验证工具是否能安全地处理权限不足错误。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"message\": \"Initialized new Git repository at: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\"}"
        },
        "execution_time": 0.233778715133667,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Attempt Malicious Path Traversal Input",
        "purpose": "测试工具是否对路径遍历攻击（如../）进行有效校验和防御。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\..\\..\\etc"
        },
        "response": {
          "result": "{\"message\": \"Initialized new Git repository at: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\etc\"}"
        },
        "execution_time": 0.20413637161254883,
        "is_functional_test": false
      }
    ],
    "git_status": [
      {
        "case_name": "Check Status of Initialized Git Repository",
        "purpose": "验证git_status工具能够正确获取一个已初始化Git仓库的状态，且没有未跟踪或修改的文件。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.15857338905334473,
        "is_functional_test": true
      },
      {
        "case_name": "Check Status After Modifying a File in Working Directory",
        "purpose": "验证git_status工具可以检测到工作目录中某个已有文件被修改但未暂存的情况。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.1688673496246338,
        "is_functional_test": true
      },
      {
        "case_name": "Check Status After Staging a New File",
        "purpose": "验证git_status工具能正确识别新添加并已暂存的文件。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.1929166316986084,
        "is_functional_test": true
      },
      {
        "case_name": "Check Status with Both Staged and Unstaged Changes",
        "purpose": "验证git_status工具在同时存在暂存和未暂存变更时能否正确报告两种状态。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.18100237846374512,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt Path Traversal in Repository Path",
        "purpose": "测试工具是否对路径遍历攻击（如../）进行有效校验和防御。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\..\\..\\etc"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.19701814651489258,
        "is_functional_test": false
      },
      {
        "case_name": "Check Status on Nonexistent Repository Path",
        "purpose": "验证当提供的仓库路径不存在时，工具是否能正确处理错误并返回失败信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_repo"
        },
        "response": {
          "result": "{\"error\": \"Repository not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\nonexistent_repo\"}"
        },
        "execution_time": 0.0035047531127929688,
        "is_functional_test": false
      },
      {
        "case_name": "Check Status Using Empty Repository Path",
        "purpose": "验证工具在提供空字符串作为仓库路径参数时的错误处理能力。",
        "args": {
          "repository_path": ""
        },
        "response": {
          "result": "{\"error\": \"Repository not found: \"}"
        },
        "execution_time": 0.0030007362365722656,
        "is_functional_test": false
      },
      {
        "case_name": "Check Status with Special Characters in Repository Path",
        "purpose": "测试包含特殊字符的仓库路径是否能够被正确处理。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test@#$_dir"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.16762161254882812,
        "is_functional_test": true
      }
    ],
    "git_add": [
      {
        "case_name": "Add Valid Files to Staging Area in Initialized Repository",
        "purpose": "验证git_add工具可以将指定的有效文件添加到已初始化的Git仓库的暂存区。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\paper1.pdf"
          ]
        },
        "response": {
          "result": "{\"error\": \"[WinError 2] \\u7cfb\\u7edf\\u627e\\u4e0d\\u5230\\u6307\\u5b9a\\u7684\\u6587\\u4ef6\\u3002: 'test_output.txt'\"}"
        },
        "execution_time": 0.004502534866333008,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Add Nonexistent File to Staging Area",
        "purpose": "测试当提供的文件路径不存在时，git_add工具是否能正确处理错误并返回失败信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"[WinError 2] \\u7cfb\\u7edf\\u627e\\u4e0d\\u5230\\u6307\\u5b9a\\u7684\\u6587\\u4ef6\\u3002: 'nonexistent_file.txt'\"}"
        },
        "execution_time": 0.005008697509765625,
        "is_functional_test": false
      },
      {
        "case_name": "Add File with Special Characters in Path to Staging Area",
        "purpose": "验证包含特殊字符的文件路径是否能够被git_add工具正确处理。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output@#$.jpg"
          ]
        },
        "response": {
          "result": "{\"error\": \"[WinError 2] \\u7cfb\\u7edf\\u627e\\u4e0d\\u5230\\u6307\\u5b9a\\u7684\\u6587\\u4ef6\\u3002: 'output@#$.jpg'\"}"
        },
        "execution_time": 0.00745844841003418,
        "is_functional_test": true
      },
      {
        "case_name": "Add Empty List of Files to Staging Area",
        "purpose": "验证git_add工具在提供空文件列表时的行为（应无操作或抛出适当警告）。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": []
        },
        "response": {
          "result": "{\"message\": \"Added files to staging area: []\"}"
        },
        "execution_time": 0.008728981018066406,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Attempt Path Traversal in File Paths",
        "purpose": "测试git_add工具是否对路径遍历攻击（如../）进行有效校验和防御。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\..\\..\\etc\\test.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"[WinError 2] \\u7cfb\\u7edf\\u627e\\u4e0d\\u5230\\u6307\\u5b9a\\u7684\\u6587\\u4ef6\\u3002: '..\\\\\\\\..\\\\\\\\etc\\\\\\\\test.txt'\"}"
        },
        "execution_time": 0.0049991607666015625,
        "is_functional_test": false
      },
      {
        "case_name": "Add File to Nonexistent Git Repository",
        "purpose": "验证当提供的仓库路径不存在时，git_add工具是否能正确处理错误并返回失败信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_repo",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\nonexistent_repo\"}"
        },
        "execution_time": 0.006033420562744141,
        "is_functional_test": false
      },
      {
        "case_name": "Add File Using Empty Repository Path",
        "purpose": "验证git_add工具在提供空字符串作为仓库路径参数时的错误处理能力。",
        "args": {
          "repository_path": "",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"[WinError 2] \\u7cfb\\u7edf\\u627e\\u4e0d\\u5230\\u6307\\u5b9a\\u7684\\u6587\\u4ef6\\u3002: '..\\\\\\\\..\\\\\\\\..\\\\\\\\..\\\\\\\\..\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\test_output.txt'\"}"
        },
        "execution_time": 0.00449824333190918,
        "is_functional_test": false
      },
      {
        "case_name": "Add Large Number of Files to Staging Area",
        "purpose": "测试git_add工具在一次性添加大量文件时的性能与稳定性。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\app.ico",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\modules.xml",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\paper1.pdf",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\rule1.pdf",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\screenshot@#$.png",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.png",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unicode_content.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"[WinError 2] \\u7cfb\\u7edf\\u627e\\u4e0d\\u5230\\u6307\\u5b9a\\u7684\\u6587\\u4ef6\\u3002: 'screenshot@#$.png'\"}"
        },
        "execution_time": 0.032077789306640625,
        "is_functional_test": true
      }
    ],
    "git_diff_unstaged": [
      {
        "case_name": "Display Unstaged Changes in Valid Repository",
        "purpose": "验证git_diff_unstaged工具可以正确显示一个有效Git仓库中未暂存的修改。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"unstaged_diff\": []}"
        },
        "execution_time": 0.1612536907196045,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Git Diff on Nonexistent Repository",
        "purpose": "测试当提供的仓库路径不存在时，工具是否能正确处理错误并返回失败信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_repo"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\nonexistent_repo\"}"
        },
        "execution_time": 0.003998756408691406,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt Git Diff with Empty Repository Path",
        "purpose": "验证工具在提供空字符串作为仓库路径参数时的错误处理能力。",
        "args": {
          "repository_path": ""
        },
        "response": {
          "result": "{\"unstaged_diff\": [\"../../../../../testSystem/testFiles/nature.jpg\\n=======================================================\\nlhs: 100644 | db3560c55ff96fa8b2ea06c09a8314f8b84b7541\\nrhs: None\\nfile deleted in rhs\"]}"
        },
        "execution_time": 0.16095352172851562,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Attempt Path Traversal in Repository Path",
        "purpose": "测试工具是否对路径遍历攻击（如../）进行有效校验和防御。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\..\\..\\etc"
        },
        "response": {
          "result": "{\"unstaged_diff\": []}"
        },
        "execution_time": 0.19670987129211426,
        "is_functional_test": false
      },
      {
        "case_name": "Display Unstaged Changes in Repository with Special Characters",
        "purpose": "验证包含特殊字符的仓库路径是否能够被正确处理。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test@#$_dir"
        },
        "response": {
          "result": "{\"unstaged_diff\": []}"
        },
        "execution_time": 0.1920921802520752,
        "is_functional_test": true
      },
      {
        "case_name": "Display Unstaged Changes in Repository with Long Path Name",
        "purpose": "测试最大长度路径是否可以正常处理。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz\"}"
        },
        "execution_time": 0.0030519962310791016,
        "is_functional_test": true
      },
      {
        "case_name": "Display Unstaged Changes After Modifying a File",
        "purpose": "验证git_diff_unstaged工具可以检测到工作目录中某个已有文件被修改但未暂存的情况，并显示其差异内容。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"unstaged_diff\": []}"
        },
        "execution_time": 0.17033696174621582,
        "is_functional_test": true
      },
      {
        "case_name": "Display Unstaged Changes When No Changes Exist",
        "purpose": "验证当没有未暂存更改时，工具是否返回空结果或无差异输出。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"unstaged_diff\": []}"
        },
        "execution_time": 0.14951062202453613,
        "is_functional_test": true
      }
    ],
    "git_diff_staged": [
      {
        "case_name": "Display Staged Diff in Initialized Repository",
        "purpose": "验证git_diff_staged工具能够正确显示一个已初始化仓库中暂存的变更差异。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.004143238067626953,
        "is_functional_test": true
      },
      {
        "case_name": "Display Staged Diff with No Staged Changes",
        "purpose": "验证当没有暂存更改时，git_diff_staged是否返回空或无差异信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.004486083984375,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Path Traversal Attempt in Repository Path",
        "purpose": "测试工具是否对路径遍历攻击（如../）进行有效校验和防御。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\..\\..\\etc"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.0045049190521240234,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to Show Staged Diff on Nonexistent Repository",
        "purpose": "验证当提供的仓库路径不存在时，工具是否能正确处理错误并返回失败信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_repo"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\nonexistent_repo\"}"
        },
        "execution_time": 0.003510713577270508,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Diff Using Empty Repository Path",
        "purpose": "验证工具在提供空字符串作为仓库路径参数时的错误处理能力。",
        "args": {
          "repository_path": ""
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.003784656524658203,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Diff with Special Characters in Repository Path",
        "purpose": "测试包含特殊字符的仓库路径是否能够被正确处理。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test@#$_dir"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.007511615753173828,
        "is_functional_test": true
      },
      {
        "case_name": "Show Staged Diff After Staging a New File",
        "purpose": "验证git_diff_staged工具能否正确显示新文件的添加内容。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.00728297233581543,
        "is_functional_test": true
      },
      {
        "case_name": "Show Staged Diff for Modified File",
        "purpose": "验证git_diff_staged工具能否正确显示已有文件修改后的差异内容。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.00752568244934082,
        "is_functional_test": true
      }
    ],
    "git_commit": [
      {
        "case_name": "Commit Staged Changes with Valid Repository and Message",
        "purpose": "验证git_commit工具在提供有效的仓库路径和提交信息时，能够成功提交暂存的更改。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Initial commit"
        },
        "response": {
          "result": "{\"message\": \"Created new commit: dcefb0cb4dab512d228d7ae7211cd78c1ec044a9\"}"
        },
        "execution_time": 0.2662618160247803,
        "is_functional_test": true
      },
      {
        "case_name": "Commit with Empty Commit Message",
        "purpose": "测试当提交信息为空字符串时，工具是否能正确处理并返回错误或默认提交信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": ""
        },
        "response": {
          "result": "{\"message\": \"Created new commit: 57c5dd448f1f2745e68fe149c10dcfa3e2f024c4\"}"
        },
        "execution_time": 0.26217079162597656,
        "is_functional_test": false
      },
      {
        "case_name": "Commit to Nonexistent Repository Path",
        "purpose": "验证当提供的仓库路径不存在时，工具是否能正确处理错误并返回失败信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_repo",
          "message": "Test commit on invalid path"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\nonexistent_repo\"}"
        },
        "execution_time": 0.0029997825622558594,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Special Characters in Commit Message",
        "purpose": "测试包含特殊字符的提交信息是否可以被正常接受并提交。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Commit message with @#$_ special characters"
        },
        "response": {
          "result": "{\"message\": \"Created new commit: 8e06cfaf7eff7ad2cd7a678c552a4a09497ffc1f\"}"
        },
        "execution_time": 0.2692532539367676,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt Path Traversal in Repository Path",
        "purpose": "测试工具是否对路径遍历攻击（如../）进行有效校验和防御。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\..\\..\\etc",
          "message": "Path traversal test commit"
        },
        "response": {
          "result": "{\"message\": \"Created new commit: afae6ef910d0b6a25821fc8cad5c2710e03bc68c\"}"
        },
        "execution_time": 0.32466578483581543,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Very Long Commit Message",
        "purpose": "测试提交信息的最大长度限制，验证是否能处理超长提交信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "This is a very long commit message that exceeds the typical length limit by a significant margin, testing the system's ability to handle lengthy messages without crashing or truncating unexpectedly."
        },
        "response": {
          "result": "{\"message\": \"Created new commit: 94746c04d0352c423f30677f3e37370576cb13f2\"}"
        },
        "execution_time": 0.3857076168060303,
        "is_functional_test": true
      },
      {
        "case_name": "Commit with Empty Repository Path",
        "purpose": "验证工具在提供空字符串作为仓库路径参数时的错误处理能力。",
        "args": {
          "repository_path": "",
          "message": "Empty repository path test"
        },
        "response": {
          "result": "{\"message\": \"Created new commit: aa3c81a8ad30081c693b620078f2765376b9b813\"}"
        },
        "execution_time": 0.3459756374359131,
        "is_functional_test": false
      },
      {
        "case_name": "Commit Without Write Permissions",
        "purpose": "模拟用户没有写权限的情况，验证工具是否能安全地处理权限不足错误。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Permission denied test commit"
        },
        "response": {
          "result": "{\"message\": \"Created new commit: fda2224c6133fa2af482ae462dde64fedbaf0253\"}"
        },
        "execution_time": 0.3068108558654785,
        "is_functional_test": false
      }
    ],
    "git_log": [
      {
        "case_name": "Retrieve Commit History from Initialized Repository",
        "purpose": "验证git_log工具能否正确获取一个已初始化且有提交历史的Git仓库的提交记录。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "[{\"hash\": \"fda2224c6133fa2af482ae462dde64fedbaf0253\", \"author\": \"pouchine\", \"date\": 1752346163, \"message\": \"Permission denied test commit\"}, {\"hash\": \"94746c04d0352c423f30677f3e37370576cb13f2\", \"author\": \"pouchine\", \"date\": 1752346163, \"message\": \"This is a very long commit message that exceeds the typical length limit by a significant margin, testing the system's ability to handle lengthy messages without crashing or truncating unexpectedly.\"}, {\"hash\": \"8e06cfaf7eff7ad2cd7a678c552a4a09497ffc1f\", \"author\": \"pouchine\", \"date\": 1752346162, \"message\": \"Commit message with @#$_ special characters\"}, {\"hash\": \"57c5dd448f1f2745e68fe149c10dcfa3e2f024c4\", \"author\": \"pouchine\", \"date\": 1752346162, \"message\": \"\"}, {\"hash\": \"dcefb0cb4dab512d228d7ae7211cd78c1ec044a9\", \"author\": \"pouchine\", \"date\": 1752346161, \"message\": \"Initial commit\"}]"
        },
        "execution_time": 0.4952201843261719,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Retrieve Commit History on Nonexistent Repository",
        "purpose": "测试当提供的仓库路径不存在时，git_log工具是否能正确处理错误并返回失败信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_repo"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\nonexistent_repo\"}"
        },
        "execution_time": 0.007540702819824219,
        "is_functional_test": false
      },
      {
        "case_name": "Retrieve Commit History Using Empty Repository Path",
        "purpose": "验证工具在提供空字符串作为仓库路径参数时的错误处理能力。",
        "args": {
          "repository_path": ""
        },
        "response": {
          "result": "[{\"hash\": \"aa3c81a8ad30081c693b620078f2765376b9b813\", \"author\": \"pouchine\", \"date\": 1752346163, \"message\": \"Empty repository path test\"}]"
        },
        "execution_time": 0.6938936710357666,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Attempt Path Traversal in Repository Path",
        "purpose": "测试git_log工具是否对路径遍历攻击（如../）进行有效校验和防御。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\..\\..\\etc"
        },
        "response": {
          "result": "[{\"hash\": \"afae6ef910d0b6a25821fc8cad5c2710e03bc68c\", \"author\": \"pouchine\", \"date\": 1752346162, \"message\": \"Path traversal test commit\"}]"
        },
        "execution_time": 0.6751387119293213,
        "is_functional_test": false
      },
      {
        "case_name": "Retrieve Commit History with Special Characters in Path",
        "purpose": "测试包含特殊字符的仓库路径是否能够被正确处理。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test@#$_dir"
        },
        "response": {
          "result": "{\"error\": \"Reference at 'refs/heads/master' does not exist\"}"
        },
        "execution_time": 0.009638071060180664,
        "is_functional_test": true
      },
      {
        "case_name": "Retrieve Commit History from Repository with Multiple Commits",
        "purpose": "验证git_log工具能否正确获取具有多个提交记录的仓库的历史记录。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "[{\"hash\": \"fda2224c6133fa2af482ae462dde64fedbaf0253\", \"author\": \"pouchine\", \"date\": 1752346163, \"message\": \"Permission denied test commit\"}, {\"hash\": \"94746c04d0352c423f30677f3e37370576cb13f2\", \"author\": \"pouchine\", \"date\": 1752346163, \"message\": \"This is a very long commit message that exceeds the typical length limit by a significant margin, testing the system's ability to handle lengthy messages without crashing or truncating unexpectedly.\"}, {\"hash\": \"8e06cfaf7eff7ad2cd7a678c552a4a09497ffc1f\", \"author\": \"pouchine\", \"date\": 1752346162, \"message\": \"Commit message with @#$_ special characters\"}, {\"hash\": \"57c5dd448f1f2745e68fe149c10dcfa3e2f024c4\", \"author\": \"pouchine\", \"date\": 1752346162, \"message\": \"\"}, {\"hash\": \"dcefb0cb4dab512d228d7ae7211cd78c1ec044a9\", \"author\": \"pouchine\", \"date\": 1752346161, \"message\": \"Initial commit\"}]"
        },
        "execution_time": 0.5274326801300049,
        "is_functional_test": true
      },
      {
        "case_name": "Check Behavior When Repository Has No Commits Yet",
        "purpose": "测试当仓库存在但尚未有任何提交时，git_log工具的行为是否符合预期。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "[{\"hash\": \"fda2224c6133fa2af482ae462dde64fedbaf0253\", \"author\": \"pouchine\", \"date\": 1752346163, \"message\": \"Permission denied test commit\"}, {\"hash\": \"94746c04d0352c423f30677f3e37370576cb13f2\", \"author\": \"pouchine\", \"date\": 1752346163, \"message\": \"This is a very long commit message that exceeds the typical length limit by a significant margin, testing the system's ability to handle lengthy messages without crashing or truncating unexpectedly.\"}, {\"hash\": \"8e06cfaf7eff7ad2cd7a678c552a4a09497ffc1f\", \"author\": \"pouchine\", \"date\": 1752346162, \"message\": \"Commit message with @#$_ special characters\"}, {\"hash\": \"57c5dd448f1f2745e68fe149c10dcfa3e2f024c4\", \"author\": \"pouchine\", \"date\": 1752346162, \"message\": \"\"}, {\"hash\": \"dcefb0cb4dab512d228d7ae7211cd78c1ec044a9\", \"author\": \"pouchine\", \"date\": 1752346161, \"message\": \"Initial commit\"}]"
        },
        "execution_time": 0.45731568336486816,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Access Repository Without Read Permissions",
        "purpose": "模拟用户没有读权限的情况，验证git_log工具是否能安全地处理权限不足错误。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "[{\"hash\": \"fda2224c6133fa2af482ae462dde64fedbaf0253\", \"author\": \"pouchine\", \"date\": 1752346163, \"message\": \"Permission denied test commit\"}, {\"hash\": \"94746c04d0352c423f30677f3e37370576cb13f2\", \"author\": \"pouchine\", \"date\": 1752346163, \"message\": \"This is a very long commit message that exceeds the typical length limit by a significant margin, testing the system's ability to handle lengthy messages without crashing or truncating unexpectedly.\"}, {\"hash\": \"8e06cfaf7eff7ad2cd7a678c552a4a09497ffc1f\", \"author\": \"pouchine\", \"date\": 1752346162, \"message\": \"Commit message with @#$_ special characters\"}, {\"hash\": \"57c5dd448f1f2745e68fe149c10dcfa3e2f024c4\", \"author\": \"pouchine\", \"date\": 1752346162, \"message\": \"\"}, {\"hash\": \"dcefb0cb4dab512d228d7ae7211cd78c1ec044a9\", \"author\": \"pouchine\", \"date\": 1752346161, \"message\": \"Initial commit\"}]"
        },
        "execution_time": 0.5316793918609619,
        "is_functional_test": false
      }
    ],
    "git_diff": [
      {
        "case_name": "Basic Diff Between Two Commits",
        "purpose": "验证git_diff工具能够正确显示两个历史提交之间的差异。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "reference1": "HEAD",
          "reference2": "HEAD~1"
        },
        "response": {
          "result": "{\"diff\": []}"
        },
        "execution_time": 0.34279346466064453,
        "is_functional_test": true
      },
      {
        "case_name": "Diff Between Branch and Commit",
        "purpose": "验证git_diff工具可以比较一个分支和一个特定提交之间的差异。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "reference1": "master",
          "reference2": "HEAD~2"
        },
        "response": {
          "result": "{\"diff\": []}"
        },
        "execution_time": 0.3178281784057617,
        "is_functional_test": true
      },
      {
        "case_name": "Diff With Empty Repository Path",
        "purpose": "测试当仓库路径为空字符串时，工具是否能正确处理错误并返回失败信息。",
        "args": {
          "repository_path": "",
          "reference1": "HEAD",
          "reference2": "HEAD~1"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff-tree aa3c81a8ad30081c693b620078f2765376b9b813 HEAD~1 -r --abbrev=40 --full-index -M --raw -z --no-color\"}"
        },
        "execution_time": 0.26881861686706543,
        "is_functional_test": false
      },
      {
        "case_name": "Diff With Nonexistent Repository Path",
        "purpose": "验证当提供的仓库路径不存在时，工具是否能正确处理错误并返回失败信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_repo",
          "reference1": "HEAD",
          "reference2": "HEAD~1"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\nonexistent_repo\"}"
        },
        "execution_time": 0.00404667854309082,
        "is_functional_test": false
      },
      {
        "case_name": "Diff With Special Characters in Repository Path",
        "purpose": "测试包含特殊字符的仓库路径是否能够被正确处理。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test@#$_dir",
          "reference1": "HEAD",
          "reference2": "HEAD~1"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.005507707595825195,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt Path Traversal in Repository Path",
        "purpose": "测试工具是否对路径遍历攻击（如../）进行有效校验和防御。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\..\\..\\etc",
          "reference1": "HEAD",
          "reference2": "HEAD~1"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff-tree afae6ef910d0b6a25821fc8cad5c2710e03bc68c HEAD~1 -r --abbrev=40 --full-index -M --raw -z --no-color\"}"
        },
        "execution_time": 0.325897216796875,
        "is_functional_test": false
      },
      {
        "case_name": "Diff Between Two Tags",
        "purpose": "验证git_diff工具支持通过标签名进行差异比较。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "reference1": "v1.0",
          "reference2": "v1.1"
        },
        "response": {
          "result": "{\"error\": \"Ref 'v1.0' did not resolve to an object\"}"
        },
        "execution_time": 0.003997802734375,
        "is_functional_test": true
      },
      {
        "case_name": "Diff With Long Reference Names",
        "purpose": "测试使用长引用名称（例如长分支名）时能否正常工作。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "reference1": "feature/very_long_branch_name_1234567890_abcd_efgh",
          "reference2": "HEAD~1"
        },
        "response": {
          "result": "{\"error\": \"Ref 'feature/very_long_branch_name_1234567890_abcd_efgh' did not resolve to an object\"}"
        },
        "execution_time": 0.024077415466308594,
        "is_functional_test": true
      }
    ],
    "git_reset": [
      {
        "case_name": "Reset Staged Files in Valid Repository",
        "purpose": "验证在Git仓库中，使用git_reset工具可以成功从暂存区移除指定的文件。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\paper1.pdf",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\rule1.pdf"
          ]
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git reset --files=paper1.pdf --files=rule1.pdf\\n  stderr: 'error: unknown option `files=paper1.pdf'\\nusage: git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]\\n   or: git reset [-q] [<tree-ish>] [--] <pathspec>...\\n   or: git reset [-q] [--pathspec-from-file [--pathspec-file-nul]] [<tree-ish>]\\n   or: git reset --patch [<tree-ish>] [--] [<pathspec>...]\\n   or: DEPRECATED: git reset [-q] [--stdin [-z]] [<tree-ish>]\\n\\n    -q, --[no-]quiet      be quiet, only report errors\\n    --no-refresh          skip refreshing the index after reset\\n    --refresh             opposite of --no-refresh\\n    --mixed               reset HEAD and index\\n    --soft                reset only HEAD\\n    --hard                reset HEAD, index and working tree\\n    --merge               reset HEAD, index and working tree\\n    --keep                reset HEAD but keep local changes\\n    --[no-]recurse-submodules[=<reset>]\\n                          control recursive updating of submodules\\n    -p, --[no-]patch      select hunks interactively\\n    -N, --[no-]intent-to-add\\n                          record only the fact that removed paths will be added later\\n    --[no-]pathspec-from-file <file>\\n                          read pathspec from file\\n    --[no-]pathspec-file-nul\\n                          with --pathspec-from-file, pathspec elements are separated with NUL character\\n    -z                    DEPRECATED (us...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计1675字符，剩余175字符"
        },
        "execution_time": 0.2182776927947998,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Reset Files from Nonexistent Repository",
        "purpose": "测试当提供的仓库路径不存在时，工具是否能正确处理错误并返回失败信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_repo",
          "files": [
            "file1.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\nonexistent_repo\"}"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      },
      {
        "case_name": "Reset Files Using Empty File List",
        "purpose": "验证当提供空列表作为文件参数时，工具能否正确处理这种边界情况。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": []
        },
        "response": {
          "result": "{\"message\": \"Removed files from staging area: []\"}"
        },
        "execution_time": 0.2482132911682129,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Attempt Path Traversal in Files",
        "purpose": "测试工具是否对路径遍历攻击（如../）进行有效校验和防御。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "..\\..\\etc\\passwd"
          ]
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git reset --files=..\\\\..\\\\etc\\\\passwd\\n  stderr: 'error: unknown option `files=..\\\\..\\\\etc\\\\passwd'\\nusage: git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]\\n   or: git reset [-q] [<tree-ish>] [--] <pathspec>...\\n   or: git reset [-q] [--pathspec-from-file [--pathspec-file-nul]] [<tree-ish>]\\n   or: git reset --patch [<tree-ish>] [--] [<pathspec>...]\\n   or: DEPRECATED: git reset [-q] [--stdin [-z]] [<tree-ish>]\\n\\n    -q, --[no-]quiet      be quiet, only report errors\\n    --no-refresh          skip refreshing the index after reset\\n    --refresh             opposite of --no-refresh\\n    --mixed               reset HEAD and index\\n    --soft                reset only HEAD\\n    --hard                reset HEAD, index and working tree\\n    --merge               reset HEAD, index and working tree\\n    --keep                reset HEAD but keep local changes\\n    --[no-]recurse-submodules[=<reset>]\\n                          control recursive updating of submodules\\n    -p, --[no-]patch      select hunks interactively\\n    -N, --[no-]intent-to-add\\n                          record only the fact that removed paths will be added later\\n    --[no-]pathspec-from-file <file>\\n                          read pathspec from file\\n    --[no-]pathspec-file-nul\\n                          with --pathspec-from-file, pathspec elements are separated with NUL character\\n    -z                    DEPRECATED (us...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计1675字符，剩余175字符"
        },
        "execution_time": 0.18065857887268066,
        "is_functional_test": false
      },
      {
        "case_name": "Reset Files with Special Characters in Paths",
        "purpose": "测试包含特殊字符的文件路径是否能够被正确处理。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_chars_doc.docx"
          ]
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git reset --files=special_chars_doc.docx\\n  stderr: 'error: unknown option `files=special_chars_doc.docx'\\nusage: git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]\\n   or: git reset [-q] [<tree-ish>] [--] <pathspec>...\\n   or: git reset [-q] [--pathspec-from-file [--pathspec-file-nul]] [<tree-ish>]\\n   or: git reset --patch [<tree-ish>] [--] [<pathspec>...]\\n   or: DEPRECATED: git reset [-q] [--stdin [-z]] [<tree-ish>]\\n\\n    -q, --[no-]quiet      be quiet, only report errors\\n    --no-refresh          skip refreshing the index after reset\\n    --refresh             opposite of --no-refresh\\n    --mixed               reset HEAD and index\\n    --soft                reset only HEAD\\n    --hard                reset HEAD, index and working tree\\n    --merge               reset HEAD, index and working tree\\n    --keep                reset HEAD but keep local changes\\n    --[no-]recurse-submodules[=<reset>]\\n                          control recursive updating of submodules\\n    -p, --[no-]patch      select hunks interactively\\n    -N, --[no-]intent-to-add\\n                          record only the fact that removed paths will be added later\\n    --[no-]pathspec-from-file <file>\\n                          read pathspec from file\\n    --[no-]pathspec-file-nul\\n                          with --pathspec-from-file, pathspec elements are separated with NUL character\\n    -z                    DEPRECAT...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计1681字符，剩余181字符"
        },
        "execution_time": 0.2295975685119629,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Reset Nonexistent File",
        "purpose": "验证当尝试从暂存区移除非存在的文件时，工具能否正确处理这种情况。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git reset --files=nonexistent_file.txt\\n  stderr: 'error: unknown option `files=nonexistent_file.txt'\\nusage: git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]\\n   or: git reset [-q] [<tree-ish>] [--] <pathspec>...\\n   or: git reset [-q] [--pathspec-from-file [--pathspec-file-nul]] [<tree-ish>]\\n   or: git reset --patch [<tree-ish>] [--] [<pathspec>...]\\n   or: DEPRECATED: git reset [-q] [--stdin [-z]] [<tree-ish>]\\n\\n    -q, --[no-]quiet      be quiet, only report errors\\n    --no-refresh          skip refreshing the index after reset\\n    --refresh             opposite of --no-refresh\\n    --mixed               reset HEAD and index\\n    --soft                reset only HEAD\\n    --hard                reset HEAD, index and working tree\\n    --merge               reset HEAD, index and working tree\\n    --keep                reset HEAD but keep local changes\\n    --[no-]recurse-submodules[=<reset>]\\n                          control recursive updating of submodules\\n    -p, --[no-]patch      select hunks interactively\\n    -N, --[no-]intent-to-add\\n                          record only the fact that removed paths will be added later\\n    --[no-]pathspec-from-file <file>\\n                          read pathspec from file\\n    --[no-]pathspec-file-nul\\n                          with --pathspec-from-file, pathspec elements are separated with NUL character\\n    -z                    DEPRECATED (...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计1677字符，剩余177字符"
        },
        "execution_time": 0.20917892456054688,
        "is_functional_test": false
      },
      {
        "case_name": "Reset Multiple Files Including Hidden File",
        "purpose": "验证工具可以正确处理隐藏文件（例如以.开头的文件）的重置操作。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\config"
          ]
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git reset --files=.git\\\\config\\n  stderr: 'error: unknown option `files=.git\\\\config'\\nusage: git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]\\n   or: git reset [-q] [<tree-ish>] [--] <pathspec>...\\n   or: git reset [-q] [--pathspec-from-file [--pathspec-file-nul]] [<tree-ish>]\\n   or: git reset --patch [<tree-ish>] [--] [<pathspec>...]\\n   or: DEPRECATED: git reset [-q] [--stdin [-z]] [<tree-ish>]\\n\\n    -q, --[no-]quiet      be quiet, only report errors\\n    --no-refresh          skip refreshing the index after reset\\n    --refresh             opposite of --no-refresh\\n    --mixed               reset HEAD and index\\n    --soft                reset only HEAD\\n    --hard                reset HEAD, index and working tree\\n    --merge               reset HEAD, index and working tree\\n    --keep                reset HEAD but keep local changes\\n    --[no-]recurse-submodules[=<reset>]\\n                          control recursive updating of submodules\\n    -p, --[no-]patch      select hunks interactively\\n    -N, --[no-]intent-to-add\\n                          record only the fact that removed paths will be added later\\n    --[no-]pathspec-from-file <file>\\n                          read pathspec from file\\n    --[no-]pathspec-file-nul\\n                          with --pathspec-from-file, pathspec elements are separated with NUL character\\n    -z                    DEPRECATED (use --pathspec-f...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计1661字符，剩余161字符"
        },
        "execution_time": 0.19997453689575195,
        "is_functional_test": true
      },
      {
        "case_name": "Reset Files with Maximum Length Path",
        "purpose": "测试最大长度路径是否可以正常处理。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz\\longfilename_1234567890abcdefghijklmnopqrstuvwxyztodelete.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz\"}"
        },
        "execution_time": 0.004509925842285156,
        "is_functional_test": true
      }
    ],
    "git_create_branch": [
      {
        "case_name": "Create New Branch in Initialized Repository",
        "purpose": "验证在已初始化的Git仓库中可以成功创建一个新的分支。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "new-feature"
        },
        "response": {
          "result": "{\"message\": \"Created new branch: new-feature\"}"
        },
        "execution_time": 0.1825428009033203,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Create Branch with Empty Branch Name",
        "purpose": "测试当提供的分支名称为空字符串时，工具是否能正确处理错误并返回失败信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": ""
        },
        "response": {
          "result": "{\"error\": \"[WinError 183] \\u5f53\\u6587\\u4ef6\\u5df2\\u5b58\\u5728\\u65f6\\uff0c\\u65e0\\u6cd5\\u521b\\u5efa\\u8be5\\u6587\\u4ef6\\u3002: 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\.git\\\\\\\\refs\\\\\\\\heads\\\\\\\\.lock' -> 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\.git\\\\\\\\refs\\\\\\\\heads\\\\\\\\'\"}"
        },
        "execution_time": 0.1825246810913086,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to Create Branch in Nonexistent Repository",
        "purpose": "验证当提供的仓库路径不存在时，工具是否能正确处理错误并拒绝创建新分支。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_repo",
          "branch_name": "new-feature"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\nonexistent_repo\"}"
        },
        "execution_time": 0.00450897216796875,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Special Characters in Branch Name",
        "purpose": "测试包含特殊字符的分支名称是否能够被正确处理或拒绝。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature@#$_test"
        },
        "response": {
          "result": "{\"message\": \"Created new branch: feature@#$_test\"}"
        },
        "execution_time": 0.183943510055542,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt Path Traversal in Repository Path",
        "purpose": "测试工具是否对路径遍历攻击（如../）进行有效校验和防御。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\..\\..\\etc",
          "branch_name": "new-feature"
        },
        "response": {
          "result": "{\"message\": \"Created new branch: new-feature\"}"
        },
        "execution_time": 0.1879441738128662,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Maximum Length Branch Name",
        "purpose": "测试最大长度的分支名称是否可以正常处理。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz"
        },
        "response": {
          "result": "{\"message\": \"Created new branch: very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz\"}"
        },
        "execution_time": 0.17755532264709473,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch in Repository Without Write Permissions",
        "purpose": "模拟用户没有写权限的情况，验证工具是否能安全地处理权限不足错误。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "new-feature"
        },
        "response": {
          "result": "{\"message\": \"Created new branch: new-feature\"}"
        },
        "execution_time": 0.23836469650268555,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch When HEAD is Unresolved (Empty Repo)",
        "purpose": "验证在空仓库中（HEAD未指向对象）能否成功创建新分支。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "initial-setup"
        },
        "response": {
          "result": "{\"message\": \"Created new branch: initial-setup\"}"
        },
        "execution_time": 0.16148734092712402,
        "is_functional_test": true
      }
    ],
    "git_checkout": [
      {
        "case_name": "Switch to Existing Branch in Initialized Repository",
        "purpose": "验证git_checkout工具能够成功切换到指定仓库中存在的分支。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature@#$_test"
        },
        "response": {
          "result": "{\"message\": \"Switched to branch: feature@#$_test\"}"
        },
        "execution_time": 0.28505706787109375,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Switch to Nonexistent Branch",
        "purpose": "测试当目标分支不存在时，工具是否能正确处理错误并返回失败信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "nonexistent_branch"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(1)\\n  cmdline: git checkout nonexistent_branch\\n  stderr: 'error: pathspec 'nonexistent_branch' did not match any file(s) known to git'\"}"
        },
        "execution_time": 0.18822717666625977,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout with Empty Repository Path",
        "purpose": "验证工具在提供空字符串作为仓库路径参数时的错误处理能力。",
        "args": {
          "repository_path": "",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(1)\\n  cmdline: git checkout main\\n  stderr: 'error: pathspec 'main' did not match any file(s) known to git'\"}"
        },
        "execution_time": 0.19009661674499512,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout Using Special Characters in Branch Name",
        "purpose": "测试包含特殊字符的分支名是否能够被正确处理。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "bug/fix@2024#test"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(1)\\n  cmdline: git checkout bug/fix@2024#test\\n  stderr: 'error: pathspec 'bug/fix@2024#test' did not match any file(s) known to git'\"}"
        },
        "execution_time": 0.19305109977722168,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt Path Traversal in Repository Path",
        "purpose": "测试工具是否对路径遍历攻击（如../）进行有效校验和防御。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\..\\..\\etc",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(1)\\n  cmdline: git checkout main\\n  stderr: 'error: pathspec 'main' did not match any file(s) known to git'\"}"
        },
        "execution_time": 0.1997818946838379,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout on Nonexistent Repository Path",
        "purpose": "验证当提供的仓库路径不存在时，工具是否能正确处理错误并返回失败信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_repo",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\nonexistent_repo\"}"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout with Empty Branch Name",
        "purpose": "验证工具在提供空字符串作为分支名称参数时的错误处理能力。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": ""
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git checkout \\n  stderr: 'fatal: empty string is not a valid pathspec. please use . instead if you meant to match all paths'\"}"
        },
        "execution_time": 0.19850420951843262,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout Using Very Long Branch Name",
        "purpose": "测试最大长度分支名称是否可以正常处理。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz_very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(1)\\n  cmdline: git checkout very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz_very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz\\n  stderr: 'error: pathspec 'very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz_very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz' did not match any file(s) known to git'\"}"
        },
        "execution_time": 0.21138834953308105,
        "is_functional_test": true
      }
    ],
    "git_show": [
      {
        "case_name": "Display Commit Info Using HEAD",
        "purpose": "验证在未指定commit_hash时，git_show工具可以正确显示HEAD指向的提交信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: 1 validation error for git_showArguments\ncommit_hash\n  Field required [type=missing, input_value={'repository_path': 'D:\\\\...\\testSystem\\\\testFiles'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.004058837890625,
        "is_functional_test": true
      },
      {
        "case_name": "Display Specific Commit by Hash",
        "purpose": "验证git_show工具能够根据提供的commit_hash参数正确显示指定提交的详细信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "abc123"
        },
        "response": {
          "result": "{\"error\": \"Ref 'abc123' did not resolve to an object\"}"
        },
        "execution_time": 0.179823637008667,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Show Commit in Nonexistent Repository",
        "purpose": "测试当提供的仓库路径不存在时，git_show工具是否能正确处理错误并返回失败信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_repo",
          "commit_hash": "abc123"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\nonexistent_repo\"}"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit with Invalid Hash",
        "purpose": "验证git_show工具在提供无效的commit_hash时能否正确处理错误。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "invalidhash123"
        },
        "response": {
          "result": "{\"error\": \"Ref 'invalidhash123' did not resolve to an object\"}"
        },
        "execution_time": 0.004340648651123047,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Path Traversal in Repository Path",
        "purpose": "测试git_show工具是否对路径遍历攻击（如../）进行有效校验和防御。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\..\\..\\etc",
          "commit_hash": "abc123"
        },
        "response": {
          "result": "{\"error\": \"Ref 'abc123' did not resolve to an object\"}"
        },
        "execution_time": 0.18111300468444824,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit with Special Characters in Repository Path",
        "purpose": "测试包含特殊字符的仓库路径是否能够被git_show工具正确处理。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test@#$_dir",
          "commit_hash": "abc123"
        },
        "response": {
          "result": "{\"error\": \"Ref 'abc123' did not resolve to an object\"}"
        },
        "execution_time": 0.16968250274658203,
        "is_functional_test": true
      },
      {
        "case_name": "Show Commit on Empty Repository",
        "purpose": "验证在没有提交历史的新建Git仓库中使用git_show是否会正确返回错误或空值。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\empty_repo",
          "commit_hash": "abc123"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\empty_repo\"}"
        },
        "execution_time": 0.00400090217590332,
        "is_functional_test": true
      },
      {
        "case_name": "Show Commit with Long Commit Hash",
        "purpose": "测试git_show工具是否能正确处理非常长的commit_hash输入（边界条件测试）。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "abcdef1234567890abcdef1234567890abcdef12"
        },
        "response": {
          "result": "{\"error\": \"SHA b'abcdef1234567890abcdef1234567890abcdef12' could not be resolved, git returned: b'abcdef1234567890abcdef1234567890abcdef12 missing'\"}"
        },
        "execution_time": 0.22350096702575684,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 96
}