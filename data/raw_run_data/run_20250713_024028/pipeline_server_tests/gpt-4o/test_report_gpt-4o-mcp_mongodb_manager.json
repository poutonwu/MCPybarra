{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "gpt-4o-mcp_mongodb_manager",
  "server_path": "workspace/pipeline-output-servers/gpt-4o/mcp_mongodb_manager/refined/server.py",
  "timestamp": "2025-07-13T02:43:10.316457",
  "tools": [
    {
      "name": "mcp_list_databases",
      "description": "\n    Lists all available databases in the MongoDB server.\n\n    Returns:\n        str: A JSON string containing a list of database names.\n\n    Example:\n        >>> mcp_list_databases()\n        '[\"admin\", \"local\", \"my_database\"]'\n    ",
      "args_schema": {
        "properties": {},
        "title": "mcp_list_databasesArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_list_collections",
      "description": "\n    Lists all collections within a specified database.\n\n    Args:\n        database_name (str): The name of the database to query.\n\n    Returns:\n        str: A JSON string containing a list of collection names.\n\n    Example:\n        >>> mcp_list_collections(\"my_database\")\n        '[\"users\", \"orders\", \"products\"]'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          }
        },
        "required": [
          "database_name"
        ],
        "title": "mcp_list_collectionsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_insert_document",
      "description": "\n    Inserts a new document into a specified MongoDB database and collection.\n\n    Args:\n        database_name (str): The name of the database.\n        collection_name (str): The name of the collection.\n        document (dict): The document to insert.\n\n    Returns:\n        str: A JSON string containing the ID of the inserted document.\n\n    Example:\n        >>> mcp_insert_document(\"my_database\", \"users\", {\"name\": \"John\", \"age\": 30})\n        '{\"_id\": \"63a1b2c3d4e5f67890\"}'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "document": {
            "title": "Document",
            "type": "object"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "document"
        ],
        "title": "mcp_insert_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_find_documents",
      "description": "\n    Queries documents in a specified MongoDB database and collection, with support for filtering, projection, and limiting the number of results.\n\n    Args:\n        database_name (str): The name of the database.\n        collection_name (str): The name of the collection.\n        filter (dict, optional): The filter criteria for the query.\n        projection (dict, optional): The fields to include or exclude.\n        limit (int, optional): The maximum number of documents to return.\n\n    Returns:\n        str: A JSON string containing a list of documents matching the query criteria.\n\n    Example:\n        >>> mcp_find_documents(\"my_database\", \"users\", {\"age\": {\"$gte\": 25}}, {\"name\": 1, \"_id\": 0}, 10)\n        '[{\"name\": \"John\"}, {\"name\": \"Jane\"}]'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "filter": {
            "default": null,
            "title": "Filter",
            "type": "object"
          },
          "projection": {
            "default": null,
            "title": "Projection",
            "type": "object"
          },
          "limit": {
            "default": 0,
            "title": "Limit",
            "type": "integer"
          }
        },
        "required": [
          "database_name",
          "collection_name"
        ],
        "title": "mcp_find_documentsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_update_document",
      "description": "\n    Updates documents in a specified MongoDB database and collection, with support for single or multiple document updates.\n\n    Args:\n        database_name (str): The name of the database.\n        collection_name (str): The name of the collection.\n        filter (dict): The filter criteria to match documents for updating.\n        update (dict): The update operations to apply.\n        multi (bool, optional): If true, updates all matching documents; otherwise, updates only the first match.\n\n    Returns:\n        str: A JSON string containing the count of documents updated.\n\n    Example:\n        >>> mcp_update_document(\"my_database\", \"users\", {\"name\": \"John\"}, {\"$set\": {\"age\": 35}}, True)\n        '{\"updated_count\": 1}'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "filter": {
            "title": "Filter",
            "type": "object"
          },
          "update": {
            "title": "Update",
            "type": "object"
          },
          "multi": {
            "default": false,
            "title": "Multi",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "filter",
          "update"
        ],
        "title": "mcp_update_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_delete_document",
      "description": "\n    Deletes documents in a specified MongoDB database and collection, with support for single or multiple document deletions.\n\n    Args:\n        database_name (str): The name of the database.\n        collection_name (str): The name of the collection.\n        filter (dict): The filter criteria to match documents for deletion.\n        multi (bool, optional): If true, deletes all matching documents; otherwise, deletes only the first match.\n\n    Returns:\n        str: A JSON string containing the count of documents deleted.\n\n    Example:\n        >>> mcp_delete_document(\"my_database\", \"users\", {\"age\": {\"$lt\": 20}}, True)\n        '{\"deleted_count\": 2}'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "filter": {
            "title": "Filter",
            "type": "object"
          },
          "multi": {
            "default": false,
            "title": "Multi",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "filter"
        ],
        "title": "mcp_delete_documentArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "mcp_list_databases": [
      {
        "case_name": "List Databases Successfully",
        "purpose": "验证工具能够成功列出 MongoDB 中的所有数据库（基本功能测试）。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.004998922348022461,
        "is_functional_test": true
      },
      {
        "case_name": "Verify Database List Contains Expected Databases",
        "purpose": "确认返回的数据库列表中包含预期的数据库名称，如 'admin'、'local' 等。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.004515647888183594,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Database List",
        "purpose": "验证当 MongoDB 中没有用户创建的数据库时，工具是否正确返回默认数据库或空列表。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.0050008296966552734,
        "is_functional_test": true
      },
      {
        "case_name": "No Unauthorized Access to Sensitive Data",
        "purpose": "确保该工具不会泄露敏感信息，如系统凭据或其他非数据库相关信息。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.006012439727783203,
        "is_functional_test": false
      },
      {
        "case_name": "Handle Connection Failure Gracefully",
        "purpose": "验证当 MongoDB 服务不可用时，工具能优雅地处理连接失败错误。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.004456996917724609,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Parameters Handling",
        "purpose": "验证工具在接收到非法参数时能否正确拒绝并返回错误信息。",
        "args": {
          "invalid_param": "test"
        },
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.004996776580810547,
        "is_functional_test": false
      },
      {
        "case_name": "Database Name with Special Characters",
        "purpose": "验证 MongoDB 中存在包含特殊字符的数据库名时，工具是否能正确返回。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.004507780075073242,
        "is_functional_test": true
      },
      {
        "case_name": "Large Number of Databases",
        "purpose": "模拟 MongoDB 中存在大量数据库的情况，验证工具是否能正常处理和返回结果。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.0040018558502197266,
        "is_functional_test": true
      }
    ],
    "mcp_list_collections": [
      {
        "case_name": "List Collections Successfully",
        "purpose": "验证工具能够成功列出指定数据库中的所有集合（基本功能测试）。",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "[\"a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\", \"new_collection\", \"test_collection\", \"empty_docs\", \"invalid/collection*name\", \"user_profiles\", \"long_key_collection\", \"test_collection'; DROP COLLECTION test_collection;--\", \"large_data\", \"special_chars_collection\", \"binary_data_collection\", \"nonexistent_collection\", \"a_very_long_collection_name_that_exceeds_normal_limits_and_might_cause_issues\", \"users\"]"
        },
        "execution_time": 0.0055043697357177734,
        "is_functional_test": true
      },
      {
        "case_name": "Verify Collection List Contains Expected Collections",
        "purpose": "确认返回的集合列表中包含预期的集合名称，如 'users', 'orders' 等。",
        "args": {
          "database_name": "mcp-test"
        },
        "response": {
          "result": "[\"users\", \"user_profiles\", \"\\u7528\\u6237\\u4fe1\\u606f\", \"test\"]"
        },
        "execution_time": 0.005000114440917969,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Collection List",
        "purpose": "验证当指定数据库中没有集合时，工具是否正确返回空数组。",
        "args": {
          "database_name": "does_not_exist_db"
        },
        "response": {
          "result": "[\"new_collection\", \"test_collection\"]"
        },
        "execution_time": 0.006301164627075195,
        "is_functional_test": true
      },
      {
        "case_name": "Database Name with Special Characters",
        "purpose": "验证数据库名包含特殊字符或Unicode字符时，工具能否正确处理并返回集合列表。",
        "args": {
          "database_name": "db@#_\\u6d4b\\u8bd5"
        },
        "response": {
          "result": "{\"error\": \"database names cannot contain the character '\\\\\\\\'\"}"
        },
        "execution_time": 0.009685754776000977,
        "is_functional_test": true
      },
      {
        "case_name": "Unauthorized Access to Sensitive Data",
        "purpose": "确保该工具不会泄露敏感信息，如系统凭据或其他非集合相关信息。",
        "args": {
          "database_name": "admin"
        },
        "response": {
          "result": "[\"system.version\", \"system_logs\"]"
        },
        "execution_time": 0.00807499885559082,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Database Name Handling",
        "purpose": "验证工具在接收到非法数据库名称时能否正确拒绝并返回错误信息。",
        "args": {
          "database_name": ""
        },
        "response": {
          "result": "{\"error\": \"database name cannot be the empty string\"}"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": false
      },
      {
        "case_name": "Handle Nonexistent Database Gracefully",
        "purpose": "验证当指定数据库不存在时，工具是否能优雅地处理并返回空数组或明确错误。",
        "args": {
          "database_name": "nonexistent_db"
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.0050885677337646484,
        "is_functional_test": false
      },
      {
        "case_name": "Large Number of Collections in Database",
        "purpose": "模拟数据库中存在大量集合的情况，验证工具是否能正常处理和返回结果。",
        "args": {
          "database_name": "large_db"
        },
        "response": {
          "result": "[\"large_collection\"]"
        },
        "execution_time": 0.008041143417358398,
        "is_functional_test": true
      }
    ],
    "mcp_insert_document": [
      {
        "case_name": "Insert Document Successfully",
        "purpose": "验证工具能够成功将文档插入到指定的数据库和集合中（基本功能测试）。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "document": {
            "name": "Alice",
            "age": 25
          }
        },
        "response": {
          "result": "{\"_id\": \"6872ad03424cddc98ebe1c08\"}"
        },
        "execution_time": 0.00529789924621582,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document into Nonexistent Collection",
        "purpose": "验证当目标集合不存在时，工具是否能自动创建集合并插入文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "document": {
            "name": "Bob",
            "age": 30
          }
        },
        "response": {
          "result": "{\"_id\": \"6872ad03424cddc98ebe1c09\"}"
        },
        "execution_time": 0.00500178337097168,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document with Special Characters in Database Name",
        "purpose": "验证数据库名包含特殊字符或Unicode字符时，工具能否正确处理插入操作。",
        "args": {
          "database_name": "db@#_\\u6d4b\\u8bd5",
          "collection_name": "users",
          "document": {
            "name": "Charlie",
            "age": 35
          }
        },
        "response": {
          "result": "{\"error\": \"database names cannot contain the character '\\\\\\\\'\"}"
        },
        "execution_time": 0.00551605224609375,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document with Invalid Database Name",
        "purpose": "验证工具在接收到非法数据库名称时能否拒绝插入并返回错误信息。",
        "args": {
          "database_name": "",
          "collection_name": "users",
          "document": {
            "name": "David",
            "age": 40
          }
        },
        "response": {
          "result": "{\"error\": \"database name cannot be the empty string\"}"
        },
        "execution_time": 0.0065097808837890625,
        "is_functional_test": false
      },
      {
        "case_name": "Insert Document into Unauthorized Database",
        "purpose": "确保该工具不能向系统敏感数据库如 'admin' 插入文档，防止权限滥用。",
        "args": {
          "database_name": "admin",
          "collection_name": "system_logs",
          "document": {
            "action": "insert",
            "user": "test_user"
          }
        },
        "response": {
          "result": "{\"_id\": \"6872ad03424cddc98ebe1c0a\"}"
        },
        "execution_time": 0.007510185241699219,
        "is_functional_test": false
      },
      {
        "case_name": "Insert Empty Document",
        "purpose": "验证工具是否允许插入空文档，并确认其行为是否符合预期。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "document": {}
        },
        "response": {
          "result": "{\"_id\": \"6872ad03424cddc98ebe1c0b\"}"
        },
        "execution_time": 0.005508899688720703,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document with Binary Data",
        "purpose": "验证工具是否支持插入包含二进制数据的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "binary_data_collection",
          "document": {
            "file": {
              "$binary": {
                "base64": "SGVsbG8gd29ybGQ=",
                "subType": "00"
              }
            }
          }
        },
        "response": {
          "result": "{\"_id\": \"6872ad03424cddc98ebe1c0c\"}"
        },
        "execution_time": 0.008533716201782227,
        "is_functional_test": true
      },
      {
        "case_name": "Handle Connection Failure Gracefully During Insert",
        "purpose": "验证当 MongoDB 服务不可用时，工具能否优雅地处理连接失败错误。",
        "args": {
          "database_name": "offline_db",
          "collection_name": "users",
          "document": {
            "name": "Eve",
            "age": 50
          }
        },
        "response": {
          "result": "{\"_id\": \"6872ad03424cddc98ebe1c0d\"}"
        },
        "execution_time": 0.018510818481445312,
        "is_functional_test": false
      }
    ],
    "mcp_find_documents": [
      {
        "case_name": "Basic Document Query Without Filter",
        "purpose": "验证在指定数据库和集合中不使用过滤条件时能否成功查询文档（基本功能测试）。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users"
        },
        "response": {
          "result": "[{\"_id\": \"6872ad03424cddc98ebe1c08\", \"name\": \"Alice\", \"age\": 25}, {\"_id\": \"6872ad03424cddc98ebe1c0b\"}]"
        },
        "execution_time": 0.009527921676635742,
        "is_functional_test": true
      },
      {
        "case_name": "Query With Simple Filter",
        "purpose": "验证使用简单过滤条件（如 age > 25）是否能正确返回匹配文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "age": {
              "$gte": 25
            }
          }
        },
        "response": {
          "result": "[{\"_id\": \"6872ad03424cddc98ebe1c08\", \"name\": \"Alice\", \"age\": 25}]"
        },
        "execution_time": 0.006001710891723633,
        "is_functional_test": true
      },
      {
        "case_name": "Query With Field Projection",
        "purpose": "验证使用字段投影功能是否能正确返回指定字段（如仅返回 name 字段）。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "age": {
              "$gte": 25
            }
          },
          "projection": {
            "name": 1,
            "_id": 0
          }
        },
        "response": {
          "result": "[{\"name\": \"Alice\"}]"
        },
        "execution_time": 0.01001286506652832,
        "is_functional_test": true
      },
      {
        "case_name": "Query With Limit",
        "purpose": "验证使用 limit 参数是否能正确限制返回的文档数量。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "age": {
              "$gte": 25
            }
          },
          "limit": 5
        },
        "response": {
          "result": "[{\"_id\": \"6872ad03424cddc98ebe1c08\", \"name\": \"Alice\", \"age\": 25}]"
        },
        "execution_time": 0.00500941276550293,
        "is_functional_test": true
      },
      {
        "case_name": "Query Nonexistent Collection",
        "purpose": "验证当指定集合不存在时，工具是否优雅地返回空结果。",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection"
        },
        "response": {
          "result": "[{\"_id\": \"686395fe8bb57d80cdb0c4a3\", \"key\": \"updated_value\"}, {\"_id\": \"68710caed665c89a8d5748ba\", \"name\": \"Alice\", \"email\": \"alice@example.com\"}, {\"_id\": \"68710cc7ea7bb66ae341045d\", \"data\": \"new collection should be created\"}, {\"_id\": \"687258207c1609156ee10ee2\", \"key\": \"value\"}, {\"_id\": \"687259cf14abe8d498d2f50a\", \"key\": \"value\"}, {\"_id\": \"68729041dc66f8998dec5876\", \"key\": \"value\"}, {\"_id\": \"687291c80d1fbb52f4c8c1b4\", \"key\": \"value\"}, {\"_id\": \"6872ad03424cddc98ebe1c09\", \"name\": \"Bob\", \"age\": 30}]"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": false
      },
      {
        "case_name": "Query With Invalid Filter",
        "purpose": "验证使用非法过滤条件（如非字典结构）时是否能正确拒绝并返回错误。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": "invalid_filter_string"
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_find_documents: 1 validation error for mcp_find_documentsArguments\nfilter\n  Input should be a valid dictionary [type=dict_type, input_value='invalid_filter_string', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/dict_type"
        },
        "execution_time": 0.0072405338287353516,
        "is_functional_test": false
      },
      {
        "case_name": "Query With Special Characters in Database Name",
        "purpose": "验证数据库名包含特殊字符时是否能正确处理。",
        "args": {
          "database_name": "db@#_\\u6d4b\\u8bd5",
          "collection_name": "users"
        },
        "response": {
          "result": "{\"error\": \"database names cannot contain the character '\\\\\\\\'\"}"
        },
        "execution_time": 0.005507230758666992,
        "is_functional_test": true
      },
      {
        "case_name": "Query With Large Limit Value",
        "purpose": "验证使用极大 limit 值是否能正确返回指定数量的文档。",
        "args": {
          "database_name": "large_db",
          "collection_name": "large_collection",
          "limit": 1000
        },
        "response": {
          "result": "[{\"_id\": \"68616ca7c9e50bdcecfe6e7e\", \"content\": \"A very long string that exceeds normal document size limits and may cause performance issues.\", \"metadata\": {\"tags\": [\"large\", \"document\", \"performance\"], \"size\": \"huge\"}, \"data\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {\"_id\": \"687259cf14abe8d498d2f50c\", \"data\": \"a_very_long_string_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\"}]"
        },
        "execution_time": 0.007360696792602539,
        "is_functional_test": true
      }
    ],
    "mcp_update_document": [
      {
        "case_name": "Update Single Document Successfully",
        "purpose": "验证工具能够成功更新匹配条件的第一个文档（基本功能测试）。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "name": "John"
          },
          "update": {
            "$set": {
              "age": 35
            }
          },
          "multi": false
        },
        "response": {
          "result": "{\"updated_count\": 0}"
        },
        "execution_time": 0.00501561164855957,
        "is_functional_test": true
      },
      {
        "case_name": "Update Multiple Documents Successfully",
        "purpose": "验证工具在 multi=True 时能正确更新所有匹配的文档（基本功能测试）。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "status": "active"
          },
          "update": {
            "$inc": {
              "login_count": 1
            }
          },
          "multi": true
        },
        "response": {
          "result": "{\"updated_count\": 0}"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": true
      },
      {
        "case_name": "Update Document with Special Characters in Database and Collection Name",
        "purpose": "验证数据库名和集合名包含特殊字符时，工具是否能正确处理并更新文档。",
        "args": {
          "database_name": "db@#_\\u6d4b\\u8bd5",
          "collection_name": "special_chars_collection",
          "filter": {
            "key": "value_with_@#"
          },
          "update": {
            "$set": {
              "updated": true
            }
          },
          "multi": false
        },
        "response": {
          "result": "{\"error\": \"database names cannot contain the character '\\\\\\\\'\"}"
        },
        "execution_time": 0.006534099578857422,
        "is_functional_test": true
      },
      {
        "case_name": "Unauthorized Access Attempt to Update Sensitive System Collection",
        "purpose": "确保工具不能更新系统级或敏感集合如 'admin.system.users'，防止权限泄露。",
        "args": {
          "database_name": "admin",
          "collection_name": "system.users",
          "filter": {
            "username": "root"
          },
          "update": {
            "$set": {
              "password": "hacked"
            }
          },
          "multi": false
        },
        "response": {
          "result": "{\"updated_count\": 0}"
        },
        "execution_time": 0.006511688232421875,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Database Name Handling",
        "purpose": "验证工具在接收到非法数据库名称时能否拒绝操作并返回错误信息。",
        "args": {
          "database_name": "",
          "collection_name": "users",
          "filter": {
            "name": "John"
          },
          "update": {
            "$set": {
              "age": 35
            }
          },
          "multi": false
        },
        "response": {
          "result": "{\"error\": \"database name cannot be the empty string\"}"
        },
        "execution_time": 0.007005214691162109,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Collection Name Handling",
        "purpose": "验证工具在接收到非法集合名称时能否拒绝操作并返回错误信息。",
        "args": {
          "database_name": "test_db",
          "collection_name": "",
          "filter": {
            "name": "John"
          },
          "update": {
            "$set": {
              "age": 35
            }
          },
          "multi": false
        },
        "response": {
          "result": "{\"error\": \"collection names cannot be empty\"}"
        },
        "execution_time": 0.007517337799072266,
        "is_functional_test": false
      },
      {
        "case_name": "Nonexistent Database or Collection Handling",
        "purpose": "验证当指定数据库或集合不存在时，工具是否能优雅地处理并返回0个更新。",
        "args": {
          "database_name": "nonexistent_db",
          "collection_name": "nonexistent_collection",
          "filter": {
            "name": "John"
          },
          "update": {
            "$set": {
              "age": 35
            }
          },
          "multi": false
        },
        "response": {
          "result": "{\"updated_count\": 0}"
        },
        "execution_time": 0.003995656967163086,
        "is_functional_test": false
      },
      {
        "case_name": "Update with Invalid Filter or Update Structure",
        "purpose": "验证工具在 filter 或 update 参数格式不合法时能否正确拒绝并返回错误。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": "invalid_filter_string",
          "update": {
            "$set": "invalid_update_value"
          },
          "multi": false
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_update_document: 1 validation error for mcp_update_documentArguments\nfilter\n  Input should be a valid dictionary [type=dict_type, input_value='invalid_filter_string', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/dict_type"
        },
        "execution_time": 0.00400543212890625,
        "is_functional_test": false
      }
    ],
    "mcp_delete_document": [
      {
        "case_name": "Delete Single Document Successfully",
        "purpose": "验证工具能够成功删除匹配条件的第一个文档（基本功能测试）。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "age": {
              "$lt": 20
            }
          },
          "multi": false
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.005000114440917969,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Multiple Documents Successfully",
        "purpose": "验证工具在 multi=True 模式下能删除所有匹配的文档（基本功能测试）。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "status": "inactive"
          },
          "multi": true
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.004506826400756836,
        "is_functional_test": true
      },
      {
        "case_name": "Delete With Empty Filter",
        "purpose": "验证使用空过滤器时是否能正确删除集合中的文档，根据 multi 参数决定行为。",
        "args": {
          "database_name": "test_db",
          "collection_name": "empty_docs",
          "filter": {},
          "multi": true
        },
        "response": {
          "result": "{\"deleted_count\": 2}"
        },
        "execution_time": 0.004512310028076172,
        "is_functional_test": true
      },
      {
        "case_name": "Delete From Nonexistent Collection",
        "purpose": "验证当指定集合不存在时，工具是否能优雅处理并返回零删除计数。",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "filter": {
            "name": "test"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.004512786865234375,
        "is_functional_test": false
      },
      {
        "case_name": "Delete With Invalid Database Name",
        "purpose": "验证工具在数据库名称非法时能否拒绝操作并返回错误信息。",
        "args": {
          "database_name": "",
          "collection_name": "users",
          "filter": {
            "name": "test"
          }
        },
        "response": {
          "result": "{\"error\": \"database name cannot be the empty string\"}"
        },
        "execution_time": 0.007505178451538086,
        "is_functional_test": false
      },
      {
        "case_name": "Delete With Special Characters in Filter",
        "purpose": "验证包含特殊字符的 filter 是否能被正确处理。",
        "args": {
          "database_name": "test_db",
          "collection_name": "special_chars_collection",
          "filter": {
            "username": "user@domain.com"
          },
          "multi": true
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.005009174346923828,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Sensitive Data Without Leaking Info",
        "purpose": "确保删除操作不会泄露敏感信息或系统内部结构。",
        "args": {
          "database_name": "admin",
          "collection_name": "system.version",
          "filter": {}
        },
        "response": {
          "result": "{\"error\": \"removing FeatureCompatibilityVersion document is not allowed, full error: {'index': 0, 'code': 40670, 'errmsg': 'removing FeatureCompatibilityVersion document is not allowed'}\"}"
        },
        "execution_time": 0.007515430450439453,
        "is_functional_test": false
      },
      {
        "case_name": "Handle Connection Failure During Delete",
        "purpose": "验证 MongoDB 服务不可用时，工具能否优雅地处理连接失败错误。",
        "args": {
          "database_name": "unreachable_db",
          "collection_name": "users",
          "filter": {
            "name": "test"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.0075206756591796875,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 48
}