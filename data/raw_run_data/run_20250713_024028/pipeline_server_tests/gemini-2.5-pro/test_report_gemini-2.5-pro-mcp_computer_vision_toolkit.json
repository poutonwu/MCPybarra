{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "gemini-2.5-pro-mcp_computer_vision_toolkit",
  "server_path": "workspace/pipeline-output-servers/gemini-2.5-pro/mcp_computer_vision_toolkit/refined/server.py",
  "timestamp": "2025-07-13T02:55:48.696645",
  "tools": [
    {
      "name": "save_image",
      "description": "Saves an image from a source path to a destination path.\n    This function is useful for creating copies or changing the format of an image file.\n\n    Args:\n        source_path (str): The full path to the existing image file.\n        destination_path (str): The full path where the new image file will be saved.\n\n    Returns:\n        str: A JSON string with a confirmation message indicating the path where the image was successfully saved, or an error message.\n\n    Example:\n        save_image(source_path=\"input/logo.png\", destination_path=\"output/logo_copy.jpg\")\n    ",
      "args_schema": {
        "properties": {
          "source_path": {
            "title": "Source Path",
            "type": "string"
          },
          "destination_path": {
            "title": "Destination Path",
            "type": "string"
          }
        },
        "required": [
          "source_path",
          "destination_path"
        ],
        "title": "save_imageArguments",
        "type": "object"
      }
    },
    {
      "name": "resize_image",
      "description": "Changes the dimensions of an image to a specified width and height.\n\n    Args:\n        input_path (str): The path to the source image file.\n        output_path (str): The path to save the resized image file.\n        width (int): The target width for the resized image in pixels.\n        height (int): The target height for the resized image in pixels.\n\n    Returns:\n        str: A JSON string with a confirmation message indicating the path of the newly created resized image, or an error message.\n\n    Example:\n        resize_image(input_path=\"input/photo.jpg\", output_path=\"output/photo_resized.jpg\", width=800, height=600)\n    ",
      "args_schema": {
        "properties": {
          "input_path": {
            "title": "Input Path",
            "type": "string"
          },
          "output_path": {
            "title": "Output Path",
            "type": "string"
          },
          "width": {
            "title": "Width",
            "type": "integer"
          },
          "height": {
            "title": "Height",
            "type": "integer"
          }
        },
        "required": [
          "input_path",
          "output_path",
          "width",
          "height"
        ],
        "title": "resize_imageArguments",
        "type": "object"
      }
    },
    {
      "name": "crop_image",
      "description": "Extracts a rectangular region from an image.\n\n    Args:\n        input_path (str): The path to the source image file.\n        output_path (str): The path to save the cropped image file.\n        x (int): The x-coordinate of the top-left corner of the crop area.\n        y (int): The y-coordinate of the top-left corner of the crop area.\n        width (int): The width of the crop rectangle.\n        height (int): The height of the crop rectangle.\n\n    Returns:\n        str: A JSON string with a confirmation message indicating the path of the newly created cropped image, or an error message.\n\n    Example:\n        crop_image(input_path=\"input/scenery.png\", output_path=\"output/scenery_cropped.png\", x=100, y=150, width=300, height=200)\n    ",
      "args_schema": {
        "properties": {
          "input_path": {
            "title": "Input Path",
            "type": "string"
          },
          "output_path": {
            "title": "Output Path",
            "type": "string"
          },
          "x": {
            "title": "X",
            "type": "integer"
          },
          "y": {
            "title": "Y",
            "type": "integer"
          },
          "width": {
            "title": "Width",
            "type": "integer"
          },
          "height": {
            "title": "Height",
            "type": "integer"
          }
        },
        "required": [
          "input_path",
          "output_path",
          "x",
          "y",
          "width",
          "height"
        ],
        "title": "crop_imageArguments",
        "type": "object"
      }
    },
    {
      "name": "get_image_stats",
      "description": "Retrieves basic statistical information about an image, such as its\n    dimensions and number of color channels.\n\n    Args:\n        input_path (str): The path to the image file to be analyzed.\n\n    Returns:\n        str: A JSON string containing the image's statistics: {'width': int, 'height': int, 'channels': int}, or an error message.\n\n    Example:\n        get_image_stats(input_path=\"input/image.jpg\")\n    ",
      "args_schema": {
        "properties": {
          "input_path": {
            "title": "Input Path",
            "type": "string"
          }
        },
        "required": [
          "input_path"
        ],
        "title": "get_image_statsArguments",
        "type": "object"
      }
    },
    {
      "name": "apply_filter",
      "description": "Applies a pre-defined filter to an image. Supported filters are 'blur',\n    'grayscale', and 'sharpen'.\n\n    Args:\n        input_path (str): The path to the source image file.\n        output_path (str): The path to save the filtered image file.\n        filter_type (str): The type of filter to apply. Must be one of 'blur', 'grayscale', or 'sharpen'.\n\n    Returns:\n        str: A JSON string with a confirmation message indicating the path of the newly created filtered image, or an error message.\n\n    Example:\n        apply_filter(input_path=\"input/portrait.jpg\", output_path=\"output/portrait_blurred.jpg\", filter_type=\"blur\")\n    ",
      "args_schema": {
        "properties": {
          "input_path": {
            "title": "Input Path",
            "type": "string"
          },
          "output_path": {
            "title": "Output Path",
            "type": "string"
          },
          "filter_type": {
            "title": "Filter Type",
            "type": "string"
          }
        },
        "required": [
          "input_path",
          "output_path",
          "filter_type"
        ],
        "title": "apply_filterArguments",
        "type": "object"
      }
    },
    {
      "name": "detect_edges",
      "description": "Detects and highlights edges in an image using the Canny edge detection algorithm.\n\n    Args:\n        input_path (str): The path to the source image file.\n        output_path (str): The path to save the resulting edge-detected image.\n        threshold1 (float): The first (lower) threshold for the hysteresis procedure.\n        threshold2 (float): The second (higher) threshold for the hysteresis procedure.\n\n    Returns:\n        str: A JSON string with a confirmation message indicating the path of the newly created edge-map image, or an error message.\n\n    Example:\n        detect_edges(input_path=\"input/building.jpg\", output_path=\"output/building_edges.jpg\", threshold1=100.0, threshold2=200.0)\n    ",
      "args_schema": {
        "properties": {
          "input_path": {
            "title": "Input Path",
            "type": "string"
          },
          "output_path": {
            "title": "Output Path",
            "type": "string"
          },
          "threshold1": {
            "title": "Threshold1",
            "type": "number"
          },
          "threshold2": {
            "title": "Threshold2",
            "type": "number"
          }
        },
        "required": [
          "input_path",
          "output_path",
          "threshold1",
          "threshold2"
        ],
        "title": "detect_edgesArguments",
        "type": "object"
      }
    },
    {
      "name": "apply_threshold",
      "description": "Applies a fixed-level binary threshold to a grayscale image.\n\n    Args:\n        input_path (str): The path to the source image file (will be converted to grayscale).\n        output_path (str): The path to save the thresholded image.\n        threshold_value (float): The pixel intensity value used as the threshold.\n        max_value (float): The value assigned to pixels that exceed the threshold (e.g., 255 for white).\n\n    Returns:\n        str: A JSON string with a confirmation message indicating the path of the newly created thresholded image, or an error message.\n\n    Example:\n        apply_threshold(input_path=\"input/text.png\", output_path=\"output/text_binary.png\", threshold_value=127.0, max_value=255.0)\n    ",
      "args_schema": {
        "properties": {
          "input_path": {
            "title": "Input Path",
            "type": "string"
          },
          "output_path": {
            "title": "Output Path",
            "type": "string"
          },
          "threshold_value": {
            "title": "Threshold Value",
            "type": "number"
          },
          "max_value": {
            "title": "Max Value",
            "type": "number"
          }
        },
        "required": [
          "input_path",
          "output_path",
          "threshold_value",
          "max_value"
        ],
        "title": "apply_thresholdArguments",
        "type": "object"
      }
    },
    {
      "name": "detect_contours",
      "description": "Finds the contours of objects in a binary image and draws them onto a new image.\n\n    Args:\n        input_path (str): The path to the source image file.\n        output_path (str): The path to save the image with contours drawn on it.\n\n    Returns:\n        str: A JSON string with a confirmation message and the number of contours found, or an error message.\n\n    Example:\n        detect_contours(input_path=\"input/shapes.png\", output_path=\"output/shapes_contours.png\")\n    ",
      "args_schema": {
        "properties": {
          "input_path": {
            "title": "Input Path",
            "type": "string"
          },
          "output_path": {
            "title": "Output Path",
            "type": "string"
          }
        },
        "required": [
          "input_path",
          "output_path"
        ],
        "title": "detect_contoursArguments",
        "type": "object"
      }
    },
    {
      "name": "find_shapes",
      "description": "A simplified shape detection tool that identifies and counts circles and rectangles in an image.\n\n    Args:\n        input_path (str): The path to the source image file.\n        output_path (str): The path to save the image with detected shapes drawn on it.\n\n    Returns:\n        str: A JSON string with a message and counts of detected circles and rectangles, or an error message.\n\n    Example:\n        find_shapes(input_path=\"input/geometry.jpg\", output_path=\"output/geometry_detected.jpg\")\n    ",
      "args_schema": {
        "properties": {
          "input_path": {
            "title": "Input Path",
            "type": "string"
          },
          "output_path": {
            "title": "Output Path",
            "type": "string"
          }
        },
        "required": [
          "input_path",
          "output_path"
        ],
        "title": "find_shapesArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "save_image": [
      {
        "case_name": "Basic Image Save",
        "purpose": "验证工具能够成功复制一个图像文件到指定的目标路径。",
        "args": {
          "source_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png",
          "destination_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\hit_copy.png"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\hit.png\"}"
        },
        "execution_time": 0.006002187728881836,
        "is_functional_test": true
      },
      {
        "case_name": "Image Format Conversion",
        "purpose": "验证工具可以将图像从一种格式转换为另一种格式并保存。",
        "args": {
          "source_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.png",
          "destination_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\xue.jpg"
        },
        "response": {
          "result": "{\"message\": \"Image successfully saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\xue.jpg\"}"
        },
        "execution_time": 0.16475844383239746,
        "is_functional_test": true
      },
      {
        "case_name": "Save to Non-Existent Directory",
        "purpose": "测试工具在目标目录不存在时是否能自动创建目录并保存文件。",
        "args": {
          "source_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\app.ico",
          "destination_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir\\app_copy.ico"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\app.ico\"}"
        },
        "execution_time": 0.004999399185180664,
        "is_functional_test": true
      },
      {
        "case_name": "Overwrite Existing File",
        "purpose": "验证工具是否可以覆盖已存在的目标文件。",
        "args": {
          "source_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "destination_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\hit_copy.png"
        },
        "response": {
          "result": "{\"message\": \"Image successfully saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\hit_copy.png\"}"
        },
        "execution_time": 0.28656005859375,
        "is_functional_test": true
      },
      {
        "case_name": "Source Path Not Exist",
        "purpose": "测试当源路径文件不存在时的错误处理情况。",
        "args": {
          "source_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.png",
          "destination_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\error_test.png"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.png\"}"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Source Format",
        "purpose": "测试非图像文件作为源输入时的行为。",
        "args": {
          "source_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx",
          "destination_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\invalid_format.jpg"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\metadata_doc.docx\"}"
        },
        "execution_time": 0.006371498107910156,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Paths",
        "purpose": "测试路径中包含特殊字符时的兼容性。",
        "args": {
          "source_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\refs\\heads\\feature@#$_test",
          "destination_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\special@#$_copy.png"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\refs\\\\heads\\\\feature@#$_test\"}"
        },
        "execution_time": 0.007004261016845703,
        "is_functional_test": true
      },
      {
        "case_name": "Long Path Boundary Test",
        "purpose": "测试极长路径名称的处理能力，确保符合系统限制。",
        "args": {
          "source_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\refs\\heads\\very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz",
          "destination_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\very_long_destination_path_abcdefghijklmnopqrstuvwxyz1234567890_filename.png"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\refs\\\\heads\\\\very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz\"}"
        },
        "execution_time": 0.007013797760009766,
        "is_functional_test": true
      }
    ],
    "get_image_stats": [
      {
        "case_name": "Basic Image Stats",
        "purpose": "验证工具能够正确获取图像的基本统计信息，包括宽度、高度和通道数。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\hit.png\"}"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": true
      },
      {
        "case_name": "Image Stats for JPEG Format",
        "purpose": "验证工具能正确读取JPEG格式图像的统计信息。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg"
        },
        "response": {
          "result": "{\"width\": 3568, \"height\": 2416, \"channels\": 3}"
        },
        "execution_time": 0.0567014217376709,
        "is_functional_test": true
      },
      {
        "case_name": "Image Stats for ICO Format",
        "purpose": "验证工具是否支持ICO格式图像的统计信息提取。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\app.ico"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\app.ico\"}"
        },
        "execution_time": 0.0065000057220458984,
        "is_functional_test": true
      },
      {
        "case_name": "Input Path Not Exist",
        "purpose": "测试当输入路径不存在时，工具是否返回明确的错误提示。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.png"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.png\"}"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid File Format",
        "purpose": "测试非图像文件作为输入时，工具是否能正确处理并返回错误信息。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\metadata_doc.docx\"}"
        },
        "execution_time": 0.005039691925048828,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Input Path",
        "purpose": "验证工具对包含特殊字符的路径的兼容性。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\refs\\heads\\feature@#$_test"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\refs\\\\heads\\\\feature@#$_test\"}"
        },
        "execution_time": 0.005997657775878906,
        "is_functional_test": true
      },
      {
        "case_name": "Long Path Boundary Test",
        "purpose": "测试极长路径名称的处理能力，确保符合系统限制。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\refs\\heads\\very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\refs\\\\heads\\\\very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz\"}"
        },
        "execution_time": 0.004004001617431641,
        "is_functional_test": true
      },
      {
        "case_name": "Read from Locked or Inaccessible File",
        "purpose": "测试工具尝试访问被锁定或权限受限的文件时的行为。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\index"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\index\"}"
        },
        "execution_time": 0.004000663757324219,
        "is_functional_test": false
      }
    ],
    "resize_image": [
      {
        "case_name": "Basic Image Resize",
        "purpose": "验证工具能够成功调整图像尺寸并保存到指定的目标路径。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\hit_resized.png",
          "width": 800,
          "height": 600
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\hit.png\"}"
        },
        "execution_time": 0.004004240036010742,
        "is_functional_test": true
      },
      {
        "case_name": "Resize and Convert Format",
        "purpose": "验证工具在调整图像尺寸的同时可以将图像保存为不同格式。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\xue_resized.jpg",
          "width": 1024,
          "height": 768
        },
        "response": {
          "result": "{\"message\": \"Image resized and saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\xue_resized.jpg\"}"
        },
        "execution_time": 0.14002084732055664,
        "is_functional_test": true
      },
      {
        "case_name": "Resize to Non-Existent Directory",
        "purpose": "测试工具在目标目录不存在时是否能自动创建目录并保存调整后的图像。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\app.ico",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir\\app_resized.ico",
          "width": 32,
          "height": 32
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\app.ico\"}"
        },
        "execution_time": 0.0038230419158935547,
        "is_functional_test": true
      },
      {
        "case_name": "Overwrite Existing Resized File",
        "purpose": "验证工具是否可以覆盖已存在的调整尺寸后的目标文件。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\hit_resized.png",
          "width": 640,
          "height": 480
        },
        "response": {
          "result": "{\"message\": \"Image resized and saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\hit_resized.png\"}"
        },
        "execution_time": 0.07052302360534668,
        "is_functional_test": true
      },
      {
        "case_name": "Input File Not Exist",
        "purpose": "测试当源图像文件不存在时的错误处理情况。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\error_test_resized.png",
          "width": 800,
          "height": 600
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.png\"}"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Input File Format",
        "purpose": "测试非图像文件作为输入时，工具是否能正确返回错误信息。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\invalid_resized.png",
          "width": 800,
          "height": 600
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\metadata_doc.docx\"}"
        },
        "execution_time": 0.004002809524536133,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Paths",
        "purpose": "测试路径中包含特殊字符时的兼容性。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\refs\\heads\\feature@#$_test",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\special@#$_resized.png",
          "width": 100,
          "height": 100
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\refs\\\\heads\\\\feature@#$_test\"}"
        },
        "execution_time": 0.007002592086791992,
        "is_functional_test": true
      },
      {
        "case_name": "Resize with Zero Dimensions",
        "purpose": "测试将宽度或高度设置为0时的行为，确保工具正确处理无效尺寸。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\zero_dim_resized.png",
          "width": 0,
          "height": 0
        },
        "response": {
          "result": "{\"error\": \"Width and height must be positive integers.\"}"
        },
        "execution_time": 0.004002094268798828,
        "is_functional_test": false
      }
    ],
    "crop_image": [
      {
        "case_name": "Basic Image Crop",
        "purpose": "验证工具能够成功裁剪图像并保存到指定路径。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\hit_cropped.png",
          "x": 50,
          "y": 50,
          "width": 200,
          "height": 150
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\hit.png\"}"
        },
        "execution_time": 0.004999876022338867,
        "is_functional_test": true
      },
      {
        "case_name": "Crop with Zero Coordinates",
        "purpose": "测试从图像左上角(0,0)开始的裁剪操作是否有效。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\xue_cropped_zero.png",
          "x": 0,
          "y": 0,
          "width": 300,
          "height": 200
        },
        "response": {
          "result": "{\"message\": \"Image cropped and saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\xue_cropped_zero.png\"}"
        },
        "execution_time": 0.06100153923034668,
        "is_functional_test": true
      },
      {
        "case_name": "Full Image Crop",
        "purpose": "验证当裁剪区域等于整个图像尺寸时的操作是否正常。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\xue_full_cropped.png",
          "x": 0,
          "y": 0,
          "width": 3568,
          "height": 2416
        },
        "response": {
          "result": "{\"message\": \"Image cropped and saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\xue_full_cropped.png\"}"
        },
        "execution_time": 0.30803775787353516,
        "is_functional_test": true
      },
      {
        "case_name": "Crop to Non-Existent Directory",
        "purpose": "测试目标目录不存在时，工具是否能自动创建目录并保存裁剪后的图像。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir\\hit_cropped.png",
          "x": 100,
          "y": 100,
          "width": 200,
          "height": 150
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\hit.png\"}"
        },
        "execution_time": 0.004001617431640625,
        "is_functional_test": true
      },
      {
        "case_name": "Overwrite Existing Cropped File",
        "purpose": "验证工具是否可以覆盖已存在的裁剪输出文件。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\hit_cropped.png",
          "x": 100,
          "y": 100,
          "width": 200,
          "height": 150
        },
        "response": {
          "result": "{\"message\": \"Image cropped and saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\hit_cropped.png\"}"
        },
        "execution_time": 0.0558316707611084,
        "is_functional_test": true
      },
      {
        "case_name": "Input Path Not Exist",
        "purpose": "测试源图像路径不存在时的错误处理情况。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\error_cropped.png",
          "x": 100,
          "y": 100,
          "width": 200,
          "height": 150
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.png\"}"
        },
        "execution_time": 0.005000114440917969,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Input Format",
        "purpose": "测试非图像文件作为输入路径时的行为。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\invalid_cropped.png",
          "x": 100,
          "y": 100,
          "width": 200,
          "height": 150
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\metadata_doc.docx\"}"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Paths",
        "purpose": "测试路径中包含特殊字符时的兼容性。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\refs\\heads\\feature@#$_test",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\special@#$_cropped.png",
          "x": 50,
          "y": 50,
          "width": 200,
          "height": 150
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\refs\\\\heads\\\\feature@#$_test\"}"
        },
        "execution_time": 0.00400090217590332,
        "is_functional_test": true
      }
    ],
    "apply_filter": [
      {
        "case_name": "Apply Blur Filter Successfully",
        "purpose": "验证工具能够成功对图像应用blur滤镜并保存结果。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\xue_blur.jpg",
          "filter_type": "blur"
        },
        "response": {
          "result": "{\"message\": \"Filter 'blur' applied and image saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\xue_blur.jpg\"}"
        },
        "execution_time": 0.08354878425598145,
        "is_functional_test": true
      },
      {
        "case_name": "Apply Grayscale Filter Successfully",
        "purpose": "验证工具能够成功对图像应用grayscale滤镜并保存结果。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\hit_grayscale.png",
          "filter_type": "grayscale"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\hit.png\"}"
        },
        "execution_time": 0.004001140594482422,
        "is_functional_test": true
      },
      {
        "case_name": "Apply Sharpen Filter Successfully",
        "purpose": "验证工具能够成功对图像应用sharpen滤镜并保存结果。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\xue_sharpen.png",
          "filter_type": "sharpen"
        },
        "response": {
          "result": "{\"message\": \"Filter 'sharpen' applied and image saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\xue_sharpen.png\"}"
        },
        "execution_time": 0.34528493881225586,
        "is_functional_test": true
      },
      {
        "case_name": "Overwrite Existing Output File",
        "purpose": "验证工具是否可以覆盖已存在的输出文件。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\xue_sharpen.png",
          "filter_type": "sharpen"
        },
        "response": {
          "result": "{\"message\": \"Filter 'sharpen' applied and image saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\xue_sharpen.png\"}"
        },
        "execution_time": 0.27435827255249023,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Filter Type",
        "purpose": "测试传入不支持的filter_type参数时是否返回错误信息。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\invalid_filter.png",
          "filter_type": "invert"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\hit.png\"}"
        },
        "execution_time": 0.0035135746002197266,
        "is_functional_test": false
      },
      {
        "case_name": "Input File Not Found",
        "purpose": "测试输入文件不存在时的行为。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\error_output.jpg",
          "filter_type": "blur"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.jpg\"}"
        },
        "execution_time": 0.004001617431640625,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Paths",
        "purpose": "测试路径中包含特殊字符时是否能正常处理。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\refs\\heads\\feature@#$_test",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\special@#$_filtered.png",
          "filter_type": "grayscale"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\refs\\\\heads\\\\feature@#$_test\"}"
        },
        "execution_time": 0.005003213882446289,
        "is_functional_test": true
      },
      {
        "case_name": "Long Path Boundary Test",
        "purpose": "测试极长路径名称的处理能力，确保符合系统限制。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\refs\\heads\\very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\very_long_destination_path_abcdefghijklmnopqrstuvwxyz1234567890_filtered.png",
          "filter_type": "sharpen"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\refs\\\\heads\\\\very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz\"}"
        },
        "execution_time": 0.007996082305908203,
        "is_functional_test": true
      }
    ],
    "detect_edges": [
      {
        "case_name": "Basic Edge Detection",
        "purpose": "验证工具能够使用默认阈值成功检测图像边缘并保存结果文件。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\hit_edges.jpg",
          "threshold1": 100.0,
          "threshold2": 200.0
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\hit.png\"}"
        },
        "execution_time": 0.005154609680175781,
        "is_functional_test": true
      },
      {
        "case_name": "Edge Detection with Custom Thresholds",
        "purpose": "验证工具在指定非默认阈值时能正确执行边缘检测。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\xue_edges.jpg",
          "threshold1": 50.0,
          "threshold2": 150.0
        },
        "response": {
          "result": "{\"message\": \"Edge detection complete. Image saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\xue_edges.jpg\"}"
        },
        "execution_time": 0.11277318000793457,
        "is_functional_test": true
      },
      {
        "case_name": "Input File Not Found",
        "purpose": "测试当输入图像路径不存在时的错误处理能力。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\error_edges.jpg",
          "threshold1": 100.0,
          "threshold2": 200.0
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.jpg\"}"
        },
        "execution_time": 0.0043849945068359375,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Input Format",
        "purpose": "测试非图像文件作为输入时是否返回明确错误信息。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\invalid_edge.jpg",
          "threshold1": 100.0,
          "threshold2": 200.0
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\metadata_doc.docx\"}"
        },
        "execution_time": 0.006536245346069336,
        "is_functional_test": false
      },
      {
        "case_name": "Write to Non-Existent Output Directory",
        "purpose": "验证工具是否能在目标目录不存在的情况下自动创建目录并保存输出文件。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\newdir\\hit_edges.jpg",
          "threshold1": 100.0,
          "threshold2": 200.0
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\hit.png\"}"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": true
      },
      {
        "case_name": "Overwrite Existing Output File",
        "purpose": "测试工具是否允许覆盖已存在的输出文件。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\xue_edges.jpg",
          "threshold1": 100.0,
          "threshold2": 200.0
        },
        "response": {
          "result": "{\"message\": \"Edge detection complete. Image saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\xue_edges.jpg\"}"
        },
        "execution_time": 0.10192370414733887,
        "is_functional_test": true
      },
      {
        "case_name": "Special Characters in Paths",
        "purpose": "测试包含特殊字符的输入和输出路径是否被正确处理。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\refs\\heads\\feature@#$_test",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\special@#$_edges.jpg",
          "threshold1": 100.0,
          "threshold2": 200.0
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\refs\\\\heads\\\\feature@#$_test\"}"
        },
        "execution_time": 0.003881692886352539,
        "is_functional_test": true
      },
      {
        "case_name": "Extreme Path Length Boundary Test",
        "purpose": "测试极长路径名称是否能被正确处理，确保符合系统限制。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\refs\\heads\\very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\very_long_destination_path_abcdefghijklmnopqrstuvwxyz1234567890_edge.jpg",
          "threshold1": 100.0,
          "threshold2": 200.0
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\refs\\\\heads\\\\very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz\"}"
        },
        "execution_time": 0.004460334777832031,
        "is_functional_test": true
      }
    ],
    "apply_threshold": [
      {
        "case_name": "Basic Threshold Application",
        "purpose": "验证工具能够对灰度图像应用基本的二值化阈值处理。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\hit_thresholded.png",
          "threshold_value": 127.0,
          "max_value": 255.0
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\hit.png\"}"
        },
        "execution_time": 0.005036115646362305,
        "is_functional_test": true
      },
      {
        "case_name": "Threshold with JPEG Input",
        "purpose": "验证工具能够正确处理JPEG格式的输入图像并进行阈值处理。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\xue_thresholded.png",
          "threshold_value": 127.0,
          "max_value": 255.0
        },
        "response": {
          "result": "{\"message\": \"Threshold applied. Image saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\xue_thresholded.png\"}"
        },
        "execution_time": 0.10079693794250488,
        "is_functional_test": true
      },
      {
        "case_name": "Custom Max Value Threshold",
        "purpose": "验证工具支持自定义最大输出像素值，例如将超过阈值的像素设为100。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\hit_thresholded_custom_max.png",
          "threshold_value": 127.0,
          "max_value": 100.0
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\hit.png\"}"
        },
        "execution_time": 0.008996725082397461,
        "is_functional_test": true
      },
      {
        "case_name": "Low Threshold Value",
        "purpose": "验证工具使用较低的阈值（如10）时是否能正确生成输出图像。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\xue_low_threshold.png",
          "threshold_value": 10.0,
          "max_value": 255.0
        },
        "response": {
          "result": "{\"message\": \"Threshold applied. Image saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\xue_low_threshold.png\"}"
        },
        "execution_time": 0.1601269245147705,
        "is_functional_test": true
      },
      {
        "case_name": "High Threshold Value",
        "purpose": "验证工具在高阈值（如250）下是否仍能正确执行阈值处理。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\hit_high_threshold.png",
          "threshold_value": 250.0,
          "max_value": 255.0
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\hit.png\"}"
        },
        "execution_time": 0.004003286361694336,
        "is_functional_test": true
      },
      {
        "case_name": "Input Path Not Exist",
        "purpose": "测试当输入图像路径不存在时，工具是否返回明确的错误提示。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\error_threshold.png",
          "threshold_value": 127.0,
          "max_value": 255.0
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.png\"}"
        },
        "execution_time": 0.004998207092285156,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid File Format",
        "purpose": "测试非图像文件作为输入时，工具是否能正确拒绝处理并返回错误信息。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\invalid_threshold_output.png",
          "threshold_value": 127.0,
          "max_value": 255.0
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\metadata_doc.docx\"}"
        },
        "execution_time": 0.009006023406982422,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Paths",
        "purpose": "测试路径中包含特殊字符时的兼容性。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\refs\\heads\\feature@#$_test",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\special@#$_threshold.png",
          "threshold_value": 127.0,
          "max_value": 255.0
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\refs\\\\heads\\\\feature@#$_test\"}"
        },
        "execution_time": 0.008171796798706055,
        "is_functional_test": true
      }
    ],
    "detect_contours": [
      {
        "case_name": "Basic Contour Detection",
        "purpose": "验证工具能够正确读取二值图像并检测轮廓，输出包含轮廓的图像文件。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\xue_contours.png"
        },
        "response": {
          "result": "{\"message\": \"Contours detected and drawn. Image saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\xue_contours.png\", \"contours_found\": 2282}"
        },
        "execution_time": 0.4165382385253906,
        "is_functional_test": true
      },
      {
        "case_name": "Contour Detection on JPEG Format",
        "purpose": "测试工具是否支持JPEG格式的图像进行轮廓检测。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\xue_jpeg_contours.png"
        },
        "response": {
          "result": "{\"message\": \"Contours detected and drawn. Image saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\xue_jpeg_contours.png\", \"contours_found\": 2282}"
        },
        "execution_time": 0.3217954635620117,
        "is_functional_test": true
      },
      {
        "case_name": "Input Path Not Exist",
        "purpose": "测试当输入路径不存在时，工具是否返回明确的错误提示。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\error_test_contour.png"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.png\"}"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Input File Format",
        "purpose": "测试非图像文件作为输入时，工具是否能正确处理并返回错误信息。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\invalid_format_contour.png"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\metadata_doc.docx\"}"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": false
      },
      {
        "case_name": "Output Directory Does Not Exist",
        "purpose": "测试目标目录不存在时，工具是否能自动创建目录并保存轮廓图像。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_output_dir\\xue_contours.png"
        },
        "response": {
          "result": "{\"message\": \"Contours detected and drawn. Image saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_output_dir\\\\xue_contours.png\", \"contours_found\": 2282}"
        },
        "execution_time": 0.3830704689025879,
        "is_functional_test": true
      },
      {
        "case_name": "Overwrite Existing Output File",
        "purpose": "验证工具是否可以覆盖已存在的输出图像文件。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\xue_contours.png"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\hit.png\"}"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": true
      },
      {
        "case_name": "Special Characters in Paths",
        "purpose": "测试路径中包含特殊字符时的兼容性。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\refs\\heads\\feature@#$_test",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\special@#$_contours.png"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\refs\\\\heads\\\\feature@#$_test\"}"
        },
        "execution_time": 0.009625434875488281,
        "is_functional_test": true
      },
      {
        "case_name": "Long Path Boundary Test",
        "purpose": "测试极长路径名称的处理能力，确保符合系统限制。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\refs\\heads\\very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\very_long_destination_path_abcdefghijklmnopqrstuvwxyz1234567890_contours.png"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\refs\\\\heads\\\\very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz\"}"
        },
        "execution_time": 0.006076812744140625,
        "is_functional_test": true
      }
    ],
    "find_shapes": [
      {
        "case_name": "Basic Shape Detection",
        "purpose": "验证工具能够成功检测并统计图像中的圆形和矩形数量。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\xue_shapes_detected.jpg"
        },
        "response": {
          "error": "Tool call 'find_shapes' was cancelled."
        },
        "execution_time": 50.01318287849426,
        "is_functional_test": true
      },
      {
        "case_name": "Detect Shapes in PNG Format",
        "purpose": "验证工具支持PNG格式图像的形状检测功能。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\hit_shapes_detected.png"
        },
        "response": {
          "error": "Tool call 'find_shapes' was cancelled."
        },
        "execution_time": 50.01149654388428,
        "is_functional_test": true
      },
      {
        "case_name": "No Shapes Detected",
        "purpose": "验证当图像中无明显几何形状时，工具是否返回空计数。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\app.ico",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\no_shapes_detected.jpg"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\app.ico\"}"
        },
        "execution_time": 3.2351584434509277,
        "is_functional_test": true
      },
      {
        "case_name": "Overwrite Existing Output File",
        "purpose": "验证工具在输出路径已存在文件时是否能覆盖写入。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\xue_shapes_detected.jpg"
        },
        "response": {
          "error": "Tool call 'find_shapes' was cancelled."
        },
        "execution_time": 50.01395082473755,
        "is_functional_test": true
      },
      {
        "case_name": "Input Path Not Exist",
        "purpose": "测试当输入路径不存在时，工具是否返回明确的错误信息。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\error_output.png"
        },
        "response": {
          "error": "Tool call 'find_shapes' was cancelled."
        },
        "execution_time": 50.008679151535034,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Input Format",
        "purpose": "测试非图像文件作为输入时，工具是否正确处理并返回错误信息。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\invalid_format_output.png"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\metadata_doc.docx\"}"
        },
        "execution_time": 3.560276508331299,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Paths",
        "purpose": "验证工具对包含特殊字符的路径的兼容性。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\refs\\heads\\feature@#$_test",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\special@#$_output.png"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\refs\\\\heads\\\\feature@#$_test\"}"
        },
        "execution_time": 0.007010936737060547,
        "is_functional_test": true
      },
      {
        "case_name": "Long Path Boundary Test",
        "purpose": "测试极长路径名称的处理能力，确保符合系统限制。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\refs\\heads\\very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\very_long_destination_path_abcdefghijklmnopqrstuvwxyz1234567890_output.png"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\refs\\\\heads\\\\very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz\"}"
        },
        "execution_time": 0.006000041961669922,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 72
}