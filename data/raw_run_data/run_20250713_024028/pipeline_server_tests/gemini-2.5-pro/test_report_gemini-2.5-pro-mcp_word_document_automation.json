{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "gemini-2.5-pro-mcp_word_document_automation",
  "server_path": "workspace/pipeline-output-servers/gemini-2.5-pro/mcp_word_document_automation/refined/server.py",
  "timestamp": "2025-07-13T02:46:27.517441",
  "tools": [
    {
      "name": "create_document",
      "description": "\n    Creates a new, empty Word document (.docx) and sets its core metadata properties.\n\n    Args:\n        file_path (str): The full path where the new Word document will be saved (e.g., \"C:/docs/mydocument.docx\").\n        title (str, optional): The title of the document.\n        author (str, optional): The author's name.\n        subject (str, optional): The subject of the document.\n        keywords (str, optional): Comma-separated keywords for the document.\n\n    Returns:\n        dict: A dictionary confirming the action, e.g., {\"status\": \"success\", \"file_path\": \"C:/docs/mydocument.docx\"}.\n\n    Example:\n        create_document(file_path=\"mydocument.docx\", title=\"My Doc\", author=\"John Doe\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "title": {
            "default": null,
            "title": "Title",
            "type": "string"
          },
          "author": {
            "default": null,
            "title": "Author",
            "type": "string"
          },
          "subject": {
            "default": null,
            "title": "Subject",
            "type": "string"
          },
          "keywords": {
            "default": null,
            "title": "Keywords",
            "type": "string"
          }
        },
        "required": [
          "file_path"
        ],
        "title": "create_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "get_document_text",
      "description": "\n    Extracts and returns all text content from an existing Word document.\n\n    Args:\n        file_path (str): The path to the Word document to be read.\n\n    Returns:\n        str: The complete text content of the document, with paragraphs separated by newline characters.\n\n    Example:\n        get_document_text(file_path=\"mydocument.docx\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          }
        },
        "required": [
          "file_path"
        ],
        "title": "get_document_textArguments",
        "type": "object"
      }
    },
    {
      "name": "add_paragraph",
      "description": "\n    Adds a new paragraph of text to the end of a specified Word document.\n\n    Args:\n        file_path (str): The path to the Word document.\n        text (str): The text content to be added as a new paragraph.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        add_paragraph(file_path=\"mydocument.docx\", text=\"This is a new paragraph.\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "text": {
            "title": "Text",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "text"
        ],
        "title": "add_paragraphArguments",
        "type": "object"
      }
    },
    {
      "name": "add_heading",
      "description": "\n    Adds a heading to the end of a Word document with a specified level.\n\n    Args:\n        file_path (str): The path to the Word document.\n        text (str): The text of the heading.\n        level (int): The heading level, from 0 (Title) to 9. Level 1 is a main heading.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        add_heading(file_path=\"mydocument.docx\", text=\"Chapter 1\", level=1)\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "text": {
            "title": "Text",
            "type": "string"
          },
          "level": {
            "title": "Level",
            "type": "integer"
          }
        },
        "required": [
          "file_path",
          "text",
          "level"
        ],
        "title": "add_headingArguments",
        "type": "object"
      }
    },
    {
      "name": "create_custom_style",
      "description": "\n    Creates a new custom paragraph style within the document.\n\n    Args:\n        file_path (str): The path to the Word document.\n        style_name (str): The name for the new custom style.\n        font_name (str, optional): The font name (e.g., \"Calibri\", \"Times New Roman\").\n        font_size_pt (int, optional): The font size in points (e.g., 12).\n        bold (bool, optional): Whether the text should be bold. Defaults to False.\n        italic (bool, optional): Whether the text should be italic. Defaults to False.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        create_custom_style(file_path=\"mydocument.docx\", style_name=\"MyStyle\", font_name=\"Arial\", font_size_pt=14, bold=True)\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "style_name": {
            "title": "Style Name",
            "type": "string"
          },
          "font_name": {
            "default": "Calibri",
            "title": "Font Name",
            "type": "string"
          },
          "font_size_pt": {
            "default": 12,
            "title": "Font Size Pt",
            "type": "integer"
          },
          "bold": {
            "default": false,
            "title": "Bold",
            "type": "boolean"
          },
          "italic": {
            "default": false,
            "title": "Italic",
            "type": "boolean"
          }
        },
        "required": [
          "file_path",
          "style_name"
        ],
        "title": "create_custom_styleArguments",
        "type": "object"
      }
    },
    {
      "name": "format_text",
      "description": "\n    Finds the first occurrence of a specific text string in the document and applies bold and/or italic formatting to it.\n    This is a simplified implementation. It formats the entire run containing the text, not just the text itself.\n\n    Args:\n        file_path (str): The path to the Word document.\n        search_text (str): The text to find and format.\n        bold (bool, optional): Apply bold formatting. Defaults to False.\n        italic (bool, optional): Apply italic formatting. Defaults to False.\n\n    Returns:\n        dict: A dictionary indicating success or failure.\n\n    Example:\n        format_text(file_path=\"mydocument.docx\", search_text=\"important\", bold=True)\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "search_text": {
            "title": "Search Text",
            "type": "string"
          },
          "bold": {
            "default": false,
            "title": "Bold",
            "type": "boolean"
          },
          "italic": {
            "default": false,
            "title": "Italic",
            "type": "boolean"
          }
        },
        "required": [
          "file_path",
          "search_text"
        ],
        "title": "format_textArguments",
        "type": "object"
      }
    },
    {
      "name": "protect_document",
      "description": "\n    Sets write protection on a Word document. Note: This is not supported by the current library.\n\n    Args:\n        file_path (str): The path to the Word document.\n        password (str): The password required to disable protection.\n\n    Returns:\n        dict: A dictionary confirming the attempt.\n\n    Example:\n        protect_document(file_path=\"mydocument.docx\", password=\"password123\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "password"
        ],
        "title": "protect_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "add_footnote_to_document",
      "description": "\n    Adds a footnote to a specific paragraph. Note: This is not directly supported by the current library.\n\n    Args:\n        file_path (str): The path to the Word document.\n        paragraph_index (int): The 0-based index of the paragraph for the footnote.\n        footnote_text (str): The text content of the footnote.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        add_footnote_to_document(file_path=\"mydocument.docx\", paragraph_index=0, footnote_text=\"This is a footnote.\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "paragraph_index": {
            "title": "Paragraph Index",
            "type": "integer"
          },
          "footnote_text": {
            "title": "Footnote Text",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "paragraph_index",
          "footnote_text"
        ],
        "title": "add_footnote_to_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "get_paragraph_text_from_document",
      "description": "\n    Retrieves the text from a single, specific paragraph based on its index.\n\n    Args:\n        file_path (str): The path to the Word document.\n        paragraph_index (int): The 0-based index of the paragraph to retrieve.\n\n    Returns:\n        str: The text content of the specified paragraph or an error message.\n\n    Example:\n        get_paragraph_text_from_document(file_path=\"mydocument.docx\", paragraph_index=0)\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "paragraph_index": {
            "title": "Paragraph Index",
            "type": "integer"
          }
        },
        "required": [
          "file_path",
          "paragraph_index"
        ],
        "title": "get_paragraph_text_from_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "find_text_in_document",
      "description": "\n    Searches the document for a text string and returns the indices of all paragraphs containing the text.\n\n    Args:\n        file_path (str): The path to the Word document.\n        search_text (str): The text to search for.\n\n    Returns:\n        list: A list of integer indices for each paragraph where the text was found, or a list containing an error dictionary.\n\n    Example:\n        find_text_in_document(file_path=\"mydocument.docx\", search_text=\"hello\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "search_text": {
            "title": "Search Text",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "search_text"
        ],
        "title": "find_text_in_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "add_table",
      "description": "\n    Adds a table with a specified number of rows and columns to the end of the document.\n\n    Args:\n        file_path (str): The path to the Word document.\n        rows (int): The number of rows in the table.\n        cols (int): The number of columns in the table.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        add_table(file_path=\"mydocument.docx\", rows=3, cols=4)\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "rows": {
            "title": "Rows",
            "type": "integer"
          },
          "cols": {
            "title": "Cols",
            "type": "integer"
          }
        },
        "required": [
          "file_path",
          "rows",
          "cols"
        ],
        "title": "add_tableArguments",
        "type": "object"
      }
    },
    {
      "name": "add_image",
      "description": "\n    Adds an image from a local path to the end of the document.\n\n    Args:\n        doc_file_path (str): The path to the Word document.\n        image_file_path (str): The path to the image file to be inserted.\n        width_inches (float, optional): The width of the image in inches.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        add_image(doc_file_path=\"mydocument.docx\", image_file_path=\"myimage.png\", width_inches=2.5)\n    ",
      "args_schema": {
        "properties": {
          "doc_file_path": {
            "title": "Doc File Path",
            "type": "string"
          },
          "image_file_path": {
            "title": "Image File Path",
            "type": "string"
          },
          "width_inches": {
            "default": null,
            "title": "Width Inches",
            "type": "number"
          }
        },
        "required": [
          "doc_file_path",
          "image_file_path"
        ],
        "title": "add_imageArguments",
        "type": "object"
      }
    },
    {
      "name": "add_page_break",
      "description": "\n    Inserts a page break at the end of the document.\n\n    Args:\n        file_path (str): The path to the Word document.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        add_page_break(file_path=\"mydocument.docx\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          }
        },
        "required": [
          "file_path"
        ],
        "title": "add_page_breakArguments",
        "type": "object"
      }
    },
    {
      "name": "add_footer",
      "description": "\n    Adds or replaces the footer for the default section of the document.\n\n    Args:\n        file_path (str): The path to the Word document.\n        footer_text (str): The text to place in the footer.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        add_footer(file_path=\"mydocument.docx\", footer_text=\"Copyright 2024\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "footer_text": {
            "title": "Footer Text",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "footer_text"
        ],
        "title": "add_footerArguments",
        "type": "object"
      }
    },
    {
      "name": "add_header",
      "description": "\n    Adds or replaces the header for the default section of the document.\n\n    Args:\n        file_path (str): The path to the Word document.\n        header_text (str): The text to place in the header.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        add_header(file_path=\"mydocument.docx\", header_text=\"My Document Header\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "header_text": {
            "title": "Header Text",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "header_text"
        ],
        "title": "add_headerArguments",
        "type": "object"
      }
    },
    {
      "name": "convert_to_pdf",
      "description": "\n    Converts a Word document to a PDF file.\n\n    Args:\n        docx_path (str): The path to the source Word document.\n        pdf_path (str): The path where the output PDF file will be saved.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        convert_to_pdf(docx_path=\"mydocument.docx\", pdf_path=\"mydocument.pdf\")\n    ",
      "args_schema": {
        "properties": {
          "docx_path": {
            "title": "Docx Path",
            "type": "string"
          },
          "pdf_path": {
            "title": "Pdf Path",
            "type": "string"
          }
        },
        "required": [
          "docx_path",
          "pdf_path"
        ],
        "title": "convert_to_pdfArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "create_document": [
      {
        "case_name": "Create document with minimal required parameters",
        "purpose": "验证仅使用必填参数file_path时，工具是否能成功创建一个空文档",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\test_output.docx\"\n}"
        },
        "execution_time": 0.02405095100402832,
        "is_functional_test": true
      },
      {
        "case_name": "Create document with all metadata fields",
        "purpose": "验证提供所有可选元数据字段（title, author, subject, keywords）时，工具是否能正确设置这些属性并生成文档",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx",
          "title": "Test Document Title",
          "author": "Jane Smith",
          "subject": "Testing Metadata",
          "keywords": "test,metadata,automation"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\metadata_doc.docx\"\n}"
        },
        "execution_time": 0.023653745651245117,
        "is_functional_test": true
      },
      {
        "case_name": "Create document with empty optional fields",
        "purpose": "验证当可选字段为空字符串时工具的行为",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_metadata_doc.docx",
          "title": "",
          "author": "",
          "subject": "",
          "keywords": ""
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_metadata_doc.docx\"\n}"
        },
        "execution_time": 0.02435159683227539,
        "is_functional_test": true
      },
      {
        "case_name": "Create document in restricted directory",
        "purpose": "验证尝试在受限制的系统目录中创建文件时的安全行为",
        "args": {
          "file_path": "C:\\Windows\\test_restricted.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"[Errno 13] Permission denied: 'C:\\\\\\\\Windows\\\\\\\\test_restricted.docx'\"\n}"
        },
        "execution_time": 0.02059459686279297,
        "is_functional_test": false
      },
      {
        "case_name": "Missing file_path parameter",
        "purpose": "验证未提供必填参数file_path时的错误处理",
        "args": {
          "title": "Error Test Doc"
        },
        "response": {
          "error": "ToolException: Error executing tool create_document: 1 validation error for create_documentArguments\nfile_path\n  Field required [type=missing, input_value={'title': 'Error Test Doc'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.0029964447021484375,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid file_path format",
        "purpose": "验证提供无效文件路径格式时的错误处理",
        "args": {
          "file_path": "invalid/<path>:name.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"[Errno 22] Invalid argument: 'invalid/<path>:name.docx'\"\n}"
        },
        "execution_time": 0.012619733810424805,
        "is_functional_test": false
      },
      {
        "case_name": "Create document with special characters in metadata",
        "purpose": "验证包含特殊字符的元数据字段是否能被正确处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_chars_doc.docx",
          "title": "Title@#$.!<>",
          "author": "Author©®™",
          "subject": "Subject\nWith Line Break",
          "keywords": "测试,тест,test"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special_chars_doc.docx\"\n}"
        },
        "execution_time": 0.024022579193115234,
        "is_functional_test": true
      }
    ],
    "get_document_text": [
      {
        "case_name": "Extract text from empty document",
        "purpose": "验证从一个空的Word文档中提取文本时工具是否能正确返回空字符串",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.010414600372314453,
        "is_functional_test": true
      },
      {
        "case_name": "Extract text from document with metadata",
        "purpose": "验证包含元数据的Word文档能否被正确读取文本内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.013080358505249023,
        "is_functional_test": true
      },
      {
        "case_name": "Extract text from document with special characters",
        "purpose": "验证包含特殊字符的文档能否被正确提取文本",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_chars_doc.docx"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.013523101806640625,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to read non-existent file",
        "purpose": "验证尝试读取不存在的文件时的错误处理机制",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.docx"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.docx\"}"
        },
        "execution_time": 0.004027843475341797,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to read non-document file",
        "purpose": "验证尝试读取非Word文档（如图片或PDF）时的错误处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"File path must point to a .docx file.\"}"
        },
        "execution_time": 0.005682229995727539,
        "is_functional_test": false
      },
      {
        "case_name": "Read document in restricted directory",
        "purpose": "验证尝试从受限制的系统目录中读取文档的安全行为",
        "args": {
          "file_path": "C:\\Windows\\system32\\drivers\\etc\\networkservice.ini"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"The specified file does not exist: C:\\\\Windows\\\\system32\\\\drivers\\\\etc\\\\networkservice.ini\"}"
        },
        "execution_time": 0.004004478454589844,
        "is_functional_test": false
      },
      {
        "case_name": "Read document with very long file path",
        "purpose": "验证工具在超长文件路径下的兼容性与稳定性",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz\\.git\\hooks\\applypatch-msg.sample"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz\\\\.git\\\\hooks\\\\applypatch-msg.sample\"}"
        },
        "execution_time": 0.0030012130737304688,
        "is_functional_test": true
      },
      {
        "case_name": "Unicode content extraction test",
        "purpose": "验证工具是否能够正确提取包含Unicode字符的文档内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unicode_content.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"File path must point to a .docx file.\"}"
        },
        "execution_time": 0.007822036743164062,
        "is_functional_test": true
      }
    ],
    "add_paragraph": [
      {
        "case_name": "Add paragraph to empty document",
        "purpose": "验证向一个空文档中添加段落的基本功能是否正常工作",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "text": "This is a new paragraph added to an empty document."
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Paragraph added.\"\n}"
        },
        "execution_time": 0.03152656555175781,
        "is_functional_test": true
      },
      {
        "case_name": "Add paragraph to document with metadata",
        "purpose": "验证向包含元数据的文档中添加段落时，原有内容和新段落是否共存且不被覆盖",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx",
          "text": "This is a new paragraph added to a document with metadata."
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Paragraph added.\"\n}"
        },
        "execution_time": 0.02402639389038086,
        "is_functional_test": true
      },
      {
        "case_name": "Add special characters in paragraph",
        "purpose": "验证工具是否能正确处理并写入包含特殊字符的文本段落",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "text": "Special chars: @#$.!<> ©®™ \nNew line and multilingual: 测试,тест,test"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Paragraph added.\"\n}"
        },
        "execution_time": 0.024572134017944336,
        "is_functional_test": true
      },
      {
        "case_name": "Add paragraph to non-existent file",
        "purpose": "验证尝试向不存在的文件中添加段落时的错误处理机制",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.docx",
          "text": "This should not be added."
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.docx\"\n}"
        },
        "execution_time": 0.0035142898559570312,
        "is_functional_test": false
      },
      {
        "case_name": "Add paragraph with missing text parameter",
        "purpose": "验证未提供必填参数text时的错误处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool add_paragraph: 1 validation error for add_paragraphArguments\ntext\n  Field required [type=missing, input_value={'file_path': 'D:\\\\devWor...iles\\\\test_output.docx'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.0029990673065185547,
        "is_functional_test": false
      },
      {
        "case_name": "Add empty paragraph",
        "purpose": "验证添加空字符串作为段落内容时的行为",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "text": ""
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Paragraph added.\"\n}"
        },
        "execution_time": 0.022595882415771484,
        "is_functional_test": true
      },
      {
        "case_name": "Add paragraph to restricted directory file",
        "purpose": "验证尝试在受限制的系统目录中的Word文档中添加段落时的安全行为",
        "args": {
          "file_path": "C:\\Windows\\test_restricted.docx",
          "text": "This should not be allowed."
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: C:\\\\Windows\\\\test_restricted.docx\"\n}"
        },
        "execution_time": 0.004513263702392578,
        "is_functional_test": false
      }
    ],
    "get_paragraph_text_from_document": [
      {
        "case_name": "Basic paragraph retrieval from empty document",
        "purpose": "验证从一个空文档中获取第一个段落时是否能正确返回空字符串",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "paragraph_index": 0
        },
        "response": {
          "result": "Introduction"
        },
        "execution_time": 0.010573387145996094,
        "is_functional_test": true
      },
      {
        "case_name": "Retrieve paragraph with valid index from metadata document",
        "purpose": "验证从包含元数据的文档中获取指定索引段落内容的功能",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx",
          "paragraph_index": 0
        },
        "response": {
          "result": "This is a new paragraph added to a document with metadata."
        },
        "execution_time": 0.013028621673583984,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to retrieve paragraph from non-document file",
        "purpose": "验证尝试从非Word文档（如PNG图片）中提取段落文本时的错误处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png",
          "paragraph_index": 0
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"File path must point to a .docx file.\"}"
        },
        "execution_time": 0.0020067691802978516,
        "is_functional_test": false
      },
      {
        "case_name": "Negative paragraph index handling",
        "purpose": "验证使用负数段落索引时工具的错误处理机制",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "paragraph_index": -1
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Paragraph index must be a non-negative integer.\"}"
        },
        "execution_time": 0.011710882186889648,
        "is_functional_test": false
      },
      {
        "case_name": "Exceeding paragraph index in document",
        "purpose": "验证当请求的段落索引超出文档实际段落数量时的错误处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "paragraph_index": 999
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Paragraph index out of bounds.\"}"
        },
        "execution_time": 0.028339147567749023,
        "is_functional_test": false
      },
      {
        "case_name": "Read paragraph from document with special characters",
        "purpose": "验证从包含特殊字符的文档中读取特定段落内容的能力",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_chars_doc.docx",
          "paragraph_index": 0
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Paragraph index out of bounds.\"}"
        },
        "execution_time": 0.011090278625488281,
        "is_functional_test": true
      },
      {
        "case_name": "Access paragraph from restricted system directory",
        "purpose": "验证尝试从受限制的系统目录中访问文档段落的安全行为",
        "args": {
          "file_path": "C:\\Windows\\system32\\drivers\\etc\\networkservice.ini",
          "paragraph_index": 0
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"The specified file does not exist: C:\\\\Windows\\\\system32\\\\drivers\\\\etc\\\\networkservice.ini\"}"
        },
        "execution_time": 0.0049877166748046875,
        "is_functional_test": false
      },
      {
        "case_name": "Unicode paragraph content extraction",
        "purpose": "验证工具能否正确提取包含Unicode字符的段落内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_chars_doc.docx",
          "paragraph_index": 0
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Paragraph index out of bounds.\"}"
        },
        "execution_time": 0.010157108306884766,
        "is_functional_test": true
      }
    ],
    "add_heading": [
      {
        "case_name": "Add heading to empty document with default level",
        "purpose": "验证向一个空文档中添加标题的基本功能，使用默认级别（level=1）",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "text": "Main Heading",
          "level": 1
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Heading added.\"\n}"
        },
        "execution_time": 0.020076751708984375,
        "is_functional_test": true
      },
      {
        "case_name": "Add heading with level 0 (Title)",
        "purpose": "验证添加级别为0的标题（即文档标题）的功能",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx",
          "text": "Document Title",
          "level": 0
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Heading added.\"\n}"
        },
        "execution_time": 0.03160595893859863,
        "is_functional_test": true
      },
      {
        "case_name": "Add heading with maximum allowed level (9)",
        "purpose": "验证添加最大允许级别的标题（level=9）的功能",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_chars_doc.docx",
          "text": "Sub-sub-sub-heading",
          "level": 9
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Heading added.\"\n}"
        },
        "execution_time": 0.02102065086364746,
        "is_functional_test": true
      },
      {
        "case_name": "Add heading with special characters in text",
        "purpose": "验证标题文本包含特殊字符时是否能正确处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_metadata_doc.docx",
          "text": "Heading@#$.!<>©®™",
          "level": 2
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Heading added.\"\n}"
        },
        "execution_time": 0.024356842041015625,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to add heading to non-document file",
        "purpose": "验证尝试向非Word文档文件添加标题时的错误处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png",
          "text": "Invalid File",
          "level": 1
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"File path must point to a .docx file.\"\n}"
        },
        "execution_time": 0.003197908401489258,
        "is_functional_test": false
      },
      {
        "case_name": "Add heading to restricted directory file",
        "purpose": "验证尝试在受限制目录中的文档添加标题的安全行为",
        "args": {
          "file_path": "C:\\Windows\\test_restricted.docx",
          "text": "Restricted Heading",
          "level": 1
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: C:\\\\Windows\\\\test_restricted.docx\"\n}"
        },
        "execution_time": 0.0030007362365722656,
        "is_functional_test": false
      },
      {
        "case_name": "Add heading with invalid level (negative)",
        "purpose": "验证提供无效负数级别的标题添加请求时的错误处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "text": "Negative Level Heading",
          "level": -1
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Heading level must be an integer between 0 and 9.\"\n}"
        },
        "execution_time": 0.0030014514923095703,
        "is_functional_test": false
      },
      {
        "case_name": "Add heading with invalid level (exceeds max)",
        "purpose": "验证提供超过最大允许值的级别（>9）时的错误处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "text": "Too High Level Heading",
          "level": 10
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Heading level must be an integer between 0 and 9.\"\n}"
        },
        "execution_time": 0.006009340286254883,
        "is_functional_test": false
      }
    ],
    "create_custom_style": [
      {
        "case_name": "Create custom style with minimal required parameters",
        "purpose": "验证仅使用必填参数file_path和style_name时，工具是否能成功创建自定义段落样式",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "style_name": "MinimalStyle"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Style 'MinimalStyle' created.\"\n}"
        },
        "execution_time": 0.02079010009765625,
        "is_functional_test": true
      },
      {
        "case_name": "Create custom style with all optional parameters",
        "purpose": "验证提供所有可选参数（font_name, font_size_pt, bold, italic）时，工具是否能正确应用这些样式设置",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx",
          "style_name": "FullFeatureStyle",
          "font_name": "Times New Roman",
          "font_size_pt": 14,
          "bold": true,
          "italic": true
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Style 'FullFeatureStyle' created.\"\n}"
        },
        "execution_time": 0.024590015411376953,
        "is_functional_test": true
      },
      {
        "case_name": "Create custom style using default values",
        "purpose": "验证未指定可选参数时，工具是否使用默认值（font_name=Calibri, font_size_pt=12, bold=False, italic=False）",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_chars_doc.docx",
          "style_name": "DefaultStyle"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Style 'DefaultStyle' created.\"\n}"
        },
        "execution_time": 0.0337824821472168,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to create style in restricted directory",
        "purpose": "验证尝试在受限制的系统目录中创建样式时的安全行为",
        "args": {
          "file_path": "C:\\Windows\\system32\\test_restricted.docx",
          "style_name": "RestrictedStyle"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: C:\\\\Windows\\\\system32\\\\test_restricted.docx\"\n}"
        },
        "execution_time": 0.003280162811279297,
        "is_functional_test": false
      },
      {
        "case_name": "Missing required file_path parameter",
        "purpose": "验证未提供必填参数file_path时的错误处理",
        "args": {
          "style_name": "NoFilePathStyle"
        },
        "response": {
          "error": "ToolException: Error executing tool create_custom_style: 1 validation error for create_custom_styleArguments\nfile_path\n  Field required [type=missing, input_value={'style_name': 'NoFilePathStyle'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.005003452301025391,
        "is_functional_test": false
      },
      {
        "case_name": "Missing required style_name parameter",
        "purpose": "验证未提供必填参数style_name时的错误处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool create_custom_style: 1 validation error for create_custom_styleArguments\nstyle_name\n  Field required [type=missing, input_value={'file_path': 'D:\\\\devWor...iles\\\\test_output.docx'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.0030052661895751953,
        "is_functional_test": false
      },
      {
        "case_name": "Create style with special characters in style name",
        "purpose": "验证包含特殊字符的样式名称是否能被正确处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "style_name": "Style@#$.!<>©®™"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Style 'Style@#$.!<>©®™' created.\"\n}"
        },
        "execution_time": 0.02250218391418457,
        "is_functional_test": true
      },
      {
        "case_name": "Create style with invalid font size value",
        "purpose": "验证提供无效字体大小值（如负数）时的边界条件处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "style_name": "InvalidFontSizeStyle",
          "font_size_pt": -10
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"value must be in range 0 to 18446744073709551615 inclusive, got -127000\"\n}"
        },
        "execution_time": 0.014511823654174805,
        "is_functional_test": false
      }
    ],
    "format_text": [
      {
        "case_name": "Format first occurrence with bold",
        "purpose": "验证在文档中找到指定文本并应用粗体格式的基本功能",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "search_text": "important",
          "bold": true
        },
        "response": {
          "result": "{\n  \"status\": \"not_found\",\n  \"message\": \"Text not found.\"\n}"
        },
        "execution_time": 0.012509346008300781,
        "is_functional_test": true
      },
      {
        "case_name": "Format first occurrence with italic",
        "purpose": "验证在文档中找到指定文本并应用斜体格式的基本功能",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "search_text": "important",
          "italic": true
        },
        "response": {
          "result": "{\n  \"status\": \"not_found\",\n  \"message\": \"Text not found.\"\n}"
        },
        "execution_time": 0.01804184913635254,
        "is_functional_test": true
      },
      {
        "case_name": "Apply both bold and italic formatting",
        "purpose": "验证同时启用粗体和斜体格式是否正常工作",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "search_text": "important",
          "bold": true,
          "italic": true
        },
        "response": {
          "result": "{\n  \"status\": \"not_found\",\n  \"message\": \"Text not found.\"\n}"
        },
        "execution_time": 0.012615203857421875,
        "is_functional_test": true
      },
      {
        "case_name": "No formatting applied",
        "purpose": "验证当不设置任何格式时工具是否能安全处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "search_text": "important"
        },
        "response": {
          "result": "{\n  \"status\": \"not_found\",\n  \"message\": \"Text not found.\"\n}"
        },
        "execution_time": 0.013514518737792969,
        "is_functional_test": true
      },
      {
        "case_name": "Format text in document with metadata",
        "purpose": "验证包含元数据的文档中能否正确格式化文本",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx",
          "search_text": "Testing Metadata",
          "bold": true
        },
        "response": {
          "result": "{\n  \"status\": \"not_found\",\n  \"message\": \"Text not found.\"\n}"
        },
        "execution_time": 0.02788853645324707,
        "is_functional_test": true
      },
      {
        "case_name": "Format special characters",
        "purpose": "验证特殊字符是否可以被正确格式化",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_chars_doc.docx",
          "search_text": "Title@#$.!<>",
          "bold": true
        },
        "response": {
          "result": "{\n  \"status\": \"not_found\",\n  \"message\": \"Text not found.\"\n}"
        },
        "execution_time": 0.013515710830688477,
        "is_functional_test": true
      },
      {
        "case_name": "Format non-existent text",
        "purpose": "验证尝试格式化不存在的文本时工具的行为",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "search_text": "nonexistenttext",
          "bold": true
        },
        "response": {
          "result": "{\n  \"status\": \"not_found\",\n  \"message\": \"Text not found.\"\n}"
        },
        "execution_time": 0.017540931701660156,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to format in restricted directory",
        "purpose": "验证尝试在受限制的系统目录中进行格式化操作的安全行为",
        "args": {
          "file_path": "C:\\Windows\\system32\\drivers\\etc\\networkservice.ini",
          "search_text": "important",
          "bold": true
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: C:\\\\Windows\\\\system32\\\\drivers\\\\etc\\\\networkservice.ini\"\n}"
        },
        "execution_time": 0.004502773284912109,
        "is_functional_test": false
      }
    ],
    "find_text_in_document": [
      {
        "case_name": "Basic text search in empty document",
        "purpose": "验证在空文档中搜索文本时返回空列表",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "search_text": "hello"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.0105133056640625,
        "is_functional_test": true
      },
      {
        "case_name": "Search for existing text in metadata document",
        "purpose": "验证在包含元数据的文档中搜索已知文本是否能正确返回段落索引",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx",
          "search_text": "Testing Metadata"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.015213966369628906,
        "is_functional_test": true
      },
      {
        "case_name": "Search with special characters in text",
        "purpose": "验证工具能否处理包含特殊字符的搜索文本",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_chars_doc.docx",
          "search_text": "Title@#$.!<>"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.013742685317993164,
        "is_functional_test": true
      },
      {
        "case_name": "Unicode text search in document",
        "purpose": "验证工具支持使用Unicode字符进行搜索",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_chars_doc.docx",
          "search_text": "测试"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.030864238739013672,
        "is_functional_test": true
      },
      {
        "case_name": "Search in non-existent document",
        "purpose": "验证尝试在不存在的文档中搜索时的错误处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.docx",
          "search_text": "test"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.docx\"\n}"
        },
        "execution_time": 0.003000974655151367,
        "is_functional_test": false
      },
      {
        "case_name": "Search with invalid file type",
        "purpose": "验证尝试在非Word文档中搜索时的错误处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png",
          "search_text": "image"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"File path must point to a .docx file.\"\n}"
        },
        "execution_time": 0.004518985748291016,
        "is_functional_test": false
      },
      {
        "case_name": "Search in restricted system directory",
        "purpose": "验证尝试在受限制的系统目录中搜索文档的安全行为",
        "args": {
          "file_path": "C:\\Windows\\system32\\drivers\\etc\\networkservice.ini",
          "search_text": "config"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: C:\\\\Windows\\\\system32\\\\drivers\\\\etc\\\\networkservice.ini\"\n}"
        },
        "execution_time": 0.0045032501220703125,
        "is_functional_test": false
      },
      {
        "case_name": "Empty search text returns all paragraphs",
        "purpose": "验证当搜索文本为空字符串时，返回所有段落索引（如果设计如此）",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx",
          "search_text": ""
        },
        "response": [
          "0",
          "1"
        ],
        "execution_time": 0.012809276580810547,
        "is_functional_test": true
      }
    ],
    "add_table": [
      {
        "case_name": "Add table with minimal required parameters",
        "purpose": "验证在现有文档末尾添加一个默认大小的表格的基本功能是否正常工作",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "rows": 2,
          "cols": 2
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Table added.\"\n}"
        },
        "execution_time": 0.024113178253173828,
        "is_functional_test": true
      },
      {
        "case_name": "Add large table with maximum allowed rows and columns",
        "purpose": "测试工具处理大表格（极限值）的能力，确保不会导致程序崩溃或性能问题",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "rows": 100,
          "cols": 100
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Table added.\"\n}"
        },
        "execution_time": 0.06184577941894531,
        "is_functional_test": true
      },
      {
        "case_name": "Add table to document with metadata",
        "purpose": "验证在包含元数据的文档中添加表格时，元数据和表格内容是否都能正确保留",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx",
          "rows": 3,
          "cols": 4
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Table added.\"\n}"
        },
        "execution_time": 0.024686098098754883,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to add table to non-writable directory",
        "purpose": "验证尝试向受限制目录中的文件添加表格时的安全行为",
        "args": {
          "file_path": "C:\\Windows\\test_restricted.docx",
          "rows": 2,
          "cols": 2
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: C:\\\\Windows\\\\test_restricted.docx\"\n}"
        },
        "execution_time": 0.002997159957885742,
        "is_functional_test": false
      },
      {
        "case_name": "Missing required file_path parameter",
        "purpose": "验证未提供必填参数file_path时的错误处理机制",
        "args": {
          "rows": 3,
          "cols": 4
        },
        "response": {
          "error": "ToolException: Error executing tool add_table: 1 validation error for add_tableArguments\nfile_path\n  Field required [type=missing, input_value={'rows': 3, 'cols': 4}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.006018400192260742,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid row or column values",
        "purpose": "验证提供无效行数或列数（如负数、零）时的错误处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "rows": -1,
          "cols": 0
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Rows and columns must be positive integers.\"\n}"
        },
        "execution_time": 0.0030002593994140625,
        "is_functional_test": false
      },
      {
        "case_name": "Add table to a non-document file",
        "purpose": "验证尝试在非Word文档（如图片）中添加表格时的错误处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png",
          "rows": 2,
          "cols": 2
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"File path must point to a .docx file.\"\n}"
        },
        "execution_time": 0.0031604766845703125,
        "is_functional_test": false
      },
      {
        "case_name": "Add table with special characters in content",
        "purpose": "验证工具能否正确处理包含特殊字符的表格内容（需结合后续插入文本操作）",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_chars_doc.docx",
          "rows": 2,
          "cols": 2
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Table added.\"\n}"
        },
        "execution_time": 0.04689598083496094,
        "is_functional_test": true
      }
    ],
    "add_image": [
      {
        "case_name": "Add image with minimal required parameters",
        "purpose": "验证仅使用必填参数doc_file_path和image_file_path时，工具是否能成功将图片添加到文档末尾",
        "args": {
          "doc_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "image_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"An unexpected error occurred: \"\n}"
        },
        "execution_time": 0.06554317474365234,
        "is_functional_test": true
      },
      {
        "case_name": "Add image with specified width",
        "purpose": "验证提供可选参数width_inches时，工具是否能正确设置图片宽度并插入到文档中",
        "args": {
          "doc_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx",
          "image_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.png",
          "width_inches": 3.5
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Image added.\"\n}"
        },
        "execution_time": 0.3222959041595459,
        "is_functional_test": true
      },
      {
        "case_name": "Add image to document with special characters",
        "purpose": "验证在包含特殊字符的文档中插入图片时工具的行为",
        "args": {
          "doc_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_chars_doc.docx",
          "image_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\app.ico"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"An unexpected error occurred: \"\n}"
        },
        "execution_time": 0.012506484985351562,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to add non-image file",
        "purpose": "验证尝试插入非图片文件（如PDF）时的错误处理",
        "args": {
          "doc_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "image_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\paper1.pdf"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"An unexpected error occurred: \"\n}"
        },
        "execution_time": 0.0248565673828125,
        "is_functional_test": false
      },
      {
        "case_name": "Add image to non-existent document",
        "purpose": "验证尝试向不存在的文档中插入图片时的错误处理",
        "args": {
          "doc_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.docx",
          "image_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.docx\"\n}"
        },
        "execution_time": 0.003977298736572266,
        "is_functional_test": false
      },
      {
        "case_name": "Add image with invalid width value",
        "purpose": "验证提供负数或非法width_inches值时的错误处理",
        "args": {
          "doc_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "image_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "width_inches": -1
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"value must be in range 0 to 27273042316900 inclusive, got -914400\"\n}"
        },
        "execution_time": 0.0325474739074707,
        "is_functional_test": false
      },
      {
        "case_name": "Add image to restricted directory document",
        "purpose": "验证尝试向受权限限制的目录中的文档插入图片时的安全行为",
        "args": {
          "doc_file_path": "C:\\Windows\\system32\\drivers\\etc\\networkservice.docx",
          "image_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: C:\\\\Windows\\\\system32\\\\drivers\\\\etc\\\\networkservice.docx\"\n}"
        },
        "execution_time": 0.0029959678649902344,
        "is_functional_test": false
      },
      {
        "case_name": "Add image with very long file paths",
        "purpose": "验证工具在超长文件路径下的兼容性与稳定性",
        "args": {
          "doc_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz\\.git\\hooks\\applypatch-msg.sample.docx",
          "image_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz\\.git\\hooks\\applypatch-msg.sample.png"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz\\\\.git\\\\hooks\\\\applypatch-msg.sample.docx\"\n}"
        },
        "execution_time": 0.0030002593994140625,
        "is_functional_test": true
      }
    ],
    "add_page_break": [
      {
        "case_name": "Add page break to an empty document",
        "purpose": "验证在空文档末尾插入分页符是否成功",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Page break added.\"\n}"
        },
        "execution_time": 0.07465648651123047,
        "is_functional_test": true
      },
      {
        "case_name": "Add page break to a document with metadata",
        "purpose": "验证在包含元数据的文档末尾插入分页符是否成功",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Page break added.\"\n}"
        },
        "execution_time": 0.3280599117279053,
        "is_functional_test": true
      },
      {
        "case_name": "Add page break to a document with special characters",
        "purpose": "验证在包含特殊字符内容的文档末尾插入分页符是否成功",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_chars_doc.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Page break added.\"\n}"
        },
        "execution_time": 0.01801323890686035,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to add page break to non-existent file",
        "purpose": "验证尝试向不存在的文件添加分页符时的错误处理机制",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.docx\"\n}"
        },
        "execution_time": 0.002508878707885742,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to add page break to non-document file",
        "purpose": "验证尝试向非Word文档（如图片或PDF）添加分页符时的错误处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"File path must point to a .docx file.\"\n}"
        },
        "execution_time": 0.0020003318786621094,
        "is_functional_test": false
      },
      {
        "case_name": "Add page break in restricted directory",
        "purpose": "验证尝试在受限制的系统目录中对文件添加分页符的安全行为",
        "args": {
          "file_path": "C:\\Windows\\system32\\drivers\\etc\\networkservice.ini"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: C:\\\\Windows\\\\system32\\\\drivers\\\\etc\\\\networkservice.ini\"\n}"
        },
        "execution_time": 0.0030019283294677734,
        "is_functional_test": false
      },
      {
        "case_name": "Add page break with very long file path",
        "purpose": "验证工具在超长文件路径下对添加分页符操作的兼容性与稳定性",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz\\.git\\hooks\\applypatch-msg.sample"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz\\\\.git\\\\hooks\\\\applypatch-msg.sample\"\n}"
        },
        "execution_time": 0.0025103092193603516,
        "is_functional_test": true
      },
      {
        "case_name": "Add page break with missing required parameter",
        "purpose": "验证未提供必填参数file_path时调用add_page_break的错误处理",
        "args": {},
        "response": {
          "error": "ToolException: Error executing tool add_page_break: 1 validation error for add_page_breakArguments\nfile_path\n  Field required [type=missing, input_value={}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.005328178405761719,
        "is_functional_test": false
      }
    ],
    "add_footer": [
      {
        "case_name": "Add footer to empty document",
        "purpose": "验证向一个空文档中添加页脚时工具是否能正确执行",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "footer_text": "Confidential - Internal Use Only"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Footer updated.\"\n}"
        },
        "execution_time": 0.04157280921936035,
        "is_functional_test": true
      },
      {
        "case_name": "Replace existing footer in metadata document",
        "purpose": "验证当文档已有页脚时，工具是否能够正确替换原有页脚内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx",
          "footer_text": "Revised Footer Text 2024"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Footer updated.\"\n}"
        },
        "execution_time": 0.31532764434814453,
        "is_functional_test": true
      },
      {
        "case_name": "Add footer with special characters",
        "purpose": "验证页脚文本包含特殊字符（如版权符号、换行符等）时能否被正确处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_chars_doc.docx",
          "footer_text": "© All rights reserved\n Confidential Document"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Footer updated.\"\n}"
        },
        "execution_time": 0.019995927810668945,
        "is_functional_test": true
      },
      {
        "case_name": "Add empty footer to clear existing footer",
        "purpose": "验证通过提供空字符串作为footer_text参数来清除现有页脚的功能",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx",
          "footer_text": ""
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Footer updated.\"\n}"
        },
        "execution_time": 0.34392213821411133,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to add footer to non-writable file",
        "purpose": "验证尝试向只读或受保护文件添加页脚时的错误处理机制",
        "args": {
          "file_path": "C:\\Windows\\system32\\drivers\\etc\\networkservice.ini",
          "footer_text": "Test Footer"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: C:\\\\Windows\\\\system32\\\\drivers\\\\etc\\\\networkservice.ini\"\n}"
        },
        "execution_time": 0.002518892288208008,
        "is_functional_test": false
      },
      {
        "case_name": "Missing required parameters",
        "purpose": "验证未提供必填参数时的错误处理机制",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool add_footer: 1 validation error for add_footerArguments\nfooter_text\n  Field required [type=missing, input_value={'file_path': 'D:\\\\devWor...iles\\\\test_output.docx'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.0026640892028808594,
        "is_functional_test": false
      },
      {
        "case_name": "Add footer to very long file path document",
        "purpose": "验证在超长文件路径下添加页脚功能的兼容性与稳定性",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz\\.git\\hooks\\applypatch-msg.sample",
          "footer_text": "Footer for long path test"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz\\\\.git\\\\hooks\\\\applypatch-msg.sample\"\n}"
        },
        "execution_time": 0.0052258968353271484,
        "is_functional_test": true
      },
      {
        "case_name": "Add Unicode footer text",
        "purpose": "验证添加包含Unicode字符的页脚文本是否能被正确处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_chars_doc.docx",
          "footer_text": "页脚内容 - Текст подвала - Footer Content"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Footer updated.\"\n}"
        },
        "execution_time": 0.025775671005249023,
        "is_functional_test": true
      }
    ],
    "add_header": [
      {
        "case_name": "Add header to empty document",
        "purpose": "验证向一个空文档添加页眉功能是否正常工作",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "header_text": "Test Header"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Header updated.\"\n}"
        },
        "execution_time": 0.06286072731018066,
        "is_functional_test": true
      },
      {
        "case_name": "Replace existing header in metadata document",
        "purpose": "验证在已有页眉的文档中替换页眉内容的功能是否正常",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx",
          "header_text": "New Header Content"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Header updated.\"\n}"
        },
        "execution_time": 0.3762168884277344,
        "is_functional_test": true
      },
      {
        "case_name": "Add special characters in header text",
        "purpose": "验证包含特殊字符和多语言文本的页眉能否被正确添加",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_chars_doc.docx",
          "header_text": "Header with ©®™ <b>Bold</b> and 日本語"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Header updated.\"\n}"
        },
        "execution_time": 0.028598546981811523,
        "is_functional_test": true
      },
      {
        "case_name": "Add header to non-existent file",
        "purpose": "验证尝试向不存在的文件添加页眉时的错误处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.docx",
          "header_text": "Test Header"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.docx\"\n}"
        },
        "execution_time": 0.004517078399658203,
        "is_functional_test": false
      },
      {
        "case_name": "Add empty header to document",
        "purpose": "验证添加空页眉字符串时的行为",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "header_text": ""
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Header updated.\"\n}"
        },
        "execution_time": 0.070281982421875,
        "is_functional_test": true
      },
      {
        "case_name": "Add header to restricted system path",
        "purpose": "验证尝试在受限制的系统目录中的文档添加页眉时的安全行为",
        "args": {
          "file_path": "C:\\Windows\\system32\\drivers\\etc\\networkservice.ini",
          "header_text": "Restricted Path Test"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: C:\\\\Windows\\\\system32\\\\drivers\\\\etc\\\\networkservice.ini\"\n}"
        },
        "execution_time": 0.0019991397857666016,
        "is_functional_test": false
      },
      {
        "case_name": "Missing required parameters",
        "purpose": "验证未提供必填参数时的错误处理机制",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool add_header: 1 validation error for add_headerArguments\nheader_text\n  Field required [type=missing, input_value={'file_path': 'D:\\\\devWor...iles\\\\test_output.docx'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": false
      }
    ],
    "convert_to_pdf": [
      {
        "case_name": "Convert valid DOCX to PDF with standard paths",
        "purpose": "验证使用有效且常见的文件路径时，工具能否成功将Word文档转换为PDF",
        "args": {
          "docx_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "pdf_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\converted_output.pdf"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\converted_output.pdf\"\n}"
        },
        "execution_time": 0.29415321350097656,
        "is_functional_test": true
      },
      {
        "case_name": "Convert DOCX with metadata to PDF",
        "purpose": "验证包含元数据的DOCX文件是否能正确转换为PDF",
        "args": {
          "docx_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx",
          "pdf_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_converted.pdf"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\metadata_converted.pdf\"\n}"
        },
        "execution_time": 0.03988814353942871,
        "is_functional_test": true
      },
      {
        "case_name": "Convert DOCX with special characters in content to PDF",
        "purpose": "验证包含特殊字符内容的DOCX文件是否能正确转换为PDF",
        "args": {
          "docx_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_chars_doc.docx",
          "pdf_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_chars_converted.pdf"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special_chars_converted.pdf\"\n}"
        },
        "execution_time": 0.02450847625732422,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt conversion with missing docx_path parameter",
        "purpose": "验证未提供必填参数docx_path时的错误处理机制",
        "args": {
          "pdf_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\missing_input.pdf"
        },
        "response": {
          "error": "ToolException: Error executing tool convert_to_pdf: 1 validation error for convert_to_pdfArguments\ndocx_path\n  Field required [type=missing, input_value={'pdf_path': 'D:\\\\devWork...les\\\\missing_input.pdf'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.002998828887939453,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt conversion with invalid file paths",
        "purpose": "验证提供无效文件路径（如含非法字符）时的错误处理机制",
        "args": {
          "docx_path": "invalid/<path>:name.docx",
          "pdf_path": "invalid/<path>:name.pdf"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\workspace\\\\pipeline-output-servers\\\\gemini-2.5-pro\\\\mcp_word_document_automation\\\\refined\\\\invalid\\\\<path>:name.docx\"\n}"
        },
        "execution_time": 0.007000446319580078,
        "is_functional_test": false
      },
      {
        "case_name": "Convert DOCX and save PDF in restricted directory",
        "purpose": "验证尝试在受限制的系统目录中保存PDF时的安全行为",
        "args": {
          "docx_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "pdf_path": "C:\\Windows\\converted_restricted.pdf"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"An unexpected error occurred during PDF conversion: [Errno 13] Permission denied: 'C:\\\\\\\\Windows\\\\\\\\converted_restricted.pdf'\"\n}"
        },
        "execution_time": 0.22781014442443848,
        "is_functional_test": false
      },
      {
        "case_name": "Convert very large file path lengths",
        "purpose": "验证超长文件路径下的工具稳定性与兼容性",
        "args": {
          "docx_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz\\.git\\hooks\\applypatch-msg.sample.docx",
          "pdf_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz\\.git\\hooks\\applypatch-msg.sample.pdf"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz\\\\.git\\\\hooks\\\\applypatch-msg.sample.docx\"\n}"
        },
        "execution_time": 0.0039975643157958984,
        "is_functional_test": true
      },
      {
        "case_name": "Convert non-existent DOCX file",
        "purpose": "验证尝试转换不存在的DOCX文件时的错误处理机制",
        "args": {
          "docx_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.docx",
          "pdf_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_output.pdf"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.docx\"\n}"
        },
        "execution_time": 0.0030045509338378906,
        "is_functional_test": false
      }
    ],
    "protect_document": [
      {
        "case_name": "Protect document with valid file and password",
        "purpose": "验证使用有效文件路径和密码设置写保护时工具的基本功能行为（尽管当前库不支持）",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "password": "secure123"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Feature not supported by the current environment. 'python-docx' does not support password protection.\"\n}"
        },
        "execution_time": 0.0040187835693359375,
        "is_functional_test": true
      },
      {
        "case_name": "Protect document with empty password",
        "purpose": "验证空密码是否被正确处理，即使不被支持也应返回明确提示",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx",
          "password": ""
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Feature not supported by the current environment. 'python-docx' does not support password protection.\"\n}"
        },
        "execution_time": 0.0029997825622558594,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to protect non-existent file",
        "purpose": "验证尝试对不存在的文档设置保护时的错误处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.docx",
          "password": "password123"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Feature not supported by the current environment. 'python-docx' does not support password protection.\"\n}"
        },
        "execution_time": 0.0020003318786621094,
        "is_functional_test": false
      },
      {
        "case_name": "Protect document in restricted directory",
        "purpose": "验证尝试在受限制目录中修改文档保护状态的安全行为",
        "args": {
          "file_path": "C:\\Windows\\system32\\drivers\\etc\\networkservice.ini",
          "password": "adminPass"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Feature not supported by the current environment. 'python-docx' does not support password protection.\"\n}"
        },
        "execution_time": 0.002001047134399414,
        "is_functional_test": false
      },
      {
        "case_name": "Missing password parameter",
        "purpose": "验证未提供必填参数password时的错误处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool protect_document: 1 validation error for protect_documentArguments\npassword\n  Field required [type=missing, input_value={'file_path': 'D:\\\\devWor...iles\\\\test_output.docx'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.002112865447998047,
        "is_functional_test": false
      },
      {
        "case_name": "Special characters in password",
        "purpose": "验证包含特殊字符的密码是否能被安全处理或返回合理提示",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_chars_doc.docx",
          "password": "P@ssw0rd!#$."
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Feature not supported by the current environment. 'python-docx' does not support password protection.\"\n}"
        },
        "execution_time": 0.0019986629486083984,
        "is_functional_test": true
      },
      {
        "case_name": "Very long password input",
        "purpose": "验证超长密码输入时的边界处理情况",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "password": "A_very_long_password_that_exceeds_normal_length_requirements_and_may_cause_buffer_overflow_issues_in_poorly_handled_systems_1234567890"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Feature not supported by the current environment. 'python-docx' does not support password protection.\"\n}"
        },
        "execution_time": 0.0040013790130615234,
        "is_functional_test": true
      },
      {
        "case_name": "Protect non-document file type",
        "purpose": "验证尝试对非Word文档（如PDF、图片等）设置保护时的安全处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png",
          "password": "imageprotect"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Feature not supported by the current environment. 'python-docx' does not support password protection.\"\n}"
        },
        "execution_time": 0.0030002593994140625,
        "is_functional_test": false
      }
    ],
    "add_footnote_to_document": [
      {
        "case_name": "Add footnote to first paragraph of existing document",
        "purpose": "验证向现有文档的第一个段落添加脚注的基本功能是否正常工作",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "paragraph_index": 0,
          "footnote_text": "This is a basic footnote."
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Failed to add footnote due to library limitations. 'python-docx' does not have a direct API for footnotes.\"\n}"
        },
        "execution_time": 0.003439188003540039,
        "is_functional_test": true
      },
      {
        "case_name": "Add footnote to last paragraph of metadata document",
        "purpose": "验证向包含元数据的文档最后一个段落添加脚注的功能是否正常",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx",
          "paragraph_index": 0,
          "footnote_text": "Metadata document footnote"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Failed to add footnote due to library limitations. 'python-docx' does not have a direct API for footnotes.\"\n}"
        },
        "execution_time": 0.0053441524505615234,
        "is_functional_test": true
      },
      {
        "case_name": "Add footnote with special characters in text",
        "purpose": "验证脚注文本中包含特殊字符时能否正确处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "paragraph_index": 0,
          "footnote_text": "Special chars: @#$.!<>©®™测试тест"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Failed to add footnote due to library limitations. 'python-docx' does not have a direct API for footnotes.\"\n}"
        },
        "execution_time": 0.008594036102294922,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to add footnote to non-existent file",
        "purpose": "验证尝试向不存在的文件添加脚注时的错误处理机制",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.docx",
          "paragraph_index": 0,
          "footnote_text": "This should fail"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Failed to add footnote due to library limitations. 'python-docx' does not have a direct API for footnotes.\"\n}"
        },
        "execution_time": 0.008007287979125977,
        "is_functional_test": false
      },
      {
        "case_name": "Add footnote to invalid paragraph index",
        "purpose": "验证提供超出范围的段落索引时的错误处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "paragraph_index": 999,
          "footnote_text": "This should fail"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Failed to add footnote due to library limitations. 'python-docx' does not have a direct API for footnotes.\"\n}"
        },
        "execution_time": 0.006696462631225586,
        "is_functional_test": false
      },
      {
        "case_name": "Add empty footnote text",
        "purpose": "验证添加空脚注文本的行为",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "paragraph_index": 0,
          "footnote_text": ""
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Failed to add footnote due to library limitations. 'python-docx' does not have a direct API for footnotes.\"\n}"
        },
        "execution_time": 0.0059969425201416016,
        "is_functional_test": true
      },
      {
        "case_name": "Add footnote to document in restricted directory",
        "purpose": "验证尝试在受限制的系统目录中添加脚注的安全行为",
        "args": {
          "file_path": "C:\\Windows\\system32\\drivers\\etc\\networkservice.ini",
          "paragraph_index": 0,
          "footnote_text": "Security test footnote"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Failed to add footnote due to library limitations. 'python-docx' does not have a direct API for footnotes.\"\n}"
        },
        "execution_time": 0.007625579833984375,
        "is_functional_test": false
      },
      {
        "case_name": "Add footnote with very long text",
        "purpose": "验证添加非常长的脚注文本时工具的稳定性和兼容性",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "paragraph_index": 0,
          "footnote_text": "A very long footnote text: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Failed to add footnote due to library limitations. 'python-docx' does not have a direct API for footnotes.\"\n}"
        },
        "execution_time": 0.006750345230102539,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 125
}