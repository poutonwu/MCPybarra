{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "gemini-2.5-pro-mcp_git_repository_manager",
  "server_path": "workspace/pipeline-output-servers/gemini-2.5-pro/mcp_git_repository_manager/refined/server.py",
  "timestamp": "2025-07-13T02:57:26.744826",
  "tools": [
    {
      "name": "git_init",
      "description": "\n    Initializes a new Git repository at the specified path.\n\n    This function creates an empty Git repository in the given directory. If the\n    directory does not exist, it will be created. If a Git repository already\n    exists at the path, an error will be returned.\n\n    Args:\n        repo_path (str): The local directory path to initialize as a Git repository.\n                         Example: \"/path/to/my-repo\"\n\n    Returns:\n        str: A JSON string confirming the repository initialization or reporting an error.\n             On success: '{\"status\": \"success\", \"message\": \"Repository initialized at /path/to/my-repo\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_initArguments",
        "type": "object"
      }
    },
    {
      "name": "git_status",
      "description": "\n    Shows the working tree status of a Git repository.\n\n    This function provides a summary of the current state of the repository,\n    including untracked files, changes not staged for commit, and changes\n    to be committed.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n\n    Returns:\n        str: A JSON string containing the Git repository's current status or an error message.\n             On success: '{\"status\": \"success\", \"data\": \"status output\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_statusArguments",
        "type": "object"
      }
    },
    {
      "name": "git_add",
      "description": "\n    Adds file changes to the staging area (index).\n\n    This function stages changes in a specific file or all changes in the\n    working directory, preparing them for the next commit.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        file_path (str): The file path to add to the staging area. Use '.' to add all changes.\n                         Example: \"my_file.py\" or \".\"\n\n    Returns:\n        str: A JSON string confirming the addition or reporting an error.\n             On success: '{\"status\": \"success\", \"message\": \"Added 'my_file.py' to the staging area.\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "file_path": {
            "title": "File Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "file_path"
        ],
        "title": "git_addArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_unstaged",
      "description": "\n    Shows changes in the working directory that are not yet staged.\n\n    This function displays the differences between the files in the working\n    directory and the staging area (index). It highlights modifications that\n    have not been added for commit.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n\n    Returns:\n        str: A JSON string containing the diff of unstaged changes or an error message.\n             On success: '{\"status\": \"success\", \"data\": \"diff output\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_diff_unstagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_staged",
      "description": "\n    Shows changes that are staged but not yet committed.\n\n    This function displays the differences between the staging area (index) and\n    the last commit (HEAD). It shows what will be included in the next commit.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n\n    Returns:\n        str: A JSON string containing the diff of staged changes or an error message.\n             On success: '{\"status\": \"success\", \"data\": \"diff output\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_diff_stagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff",
      "description": "\n    Compares differences between two branches, commits, or a branch and the working directory.\n\n    This function provides a flexible way to see the changes between different\n    points in the repository's history.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        base (str): The base branch or commit hash for comparison.\n                    Example: \"main\"\n        compare (str, optional): The branch or commit hash to compare with the base.\n                                 If not provided, compares the base with the current\n                                 working directory.\n                                 Example: \"develop\"\n\n    Returns:\n        str: A JSON string containing the diff between the two references or an error message.\n             On success: '{\"status\": \"success\", \"data\": \"diff output\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "base": {
            "title": "Base",
            "type": "string"
          },
          "compare": {
            "default": null,
            "title": "Compare",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "base"
        ],
        "title": "git_diffArguments",
        "type": "object"
      }
    },
    {
      "name": "git_commit",
      "description": "\n    Records staged changes to the repository.\n\n    This function creates a new commit containing the content of the staging area\n    (index) along with a descriptive commit message. An error is returned if\n    there are no changes staged for commit.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        message (str): The commit message.\n                       Example: \"feat: Add new feature\"\n\n    Returns:\n        str: A JSON string containing the new commit's hash or an error message.\n             On success: '{\"status\": \"success\", \"commit_hash\": \"a1b2c3d4...\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "message": {
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "message"
        ],
        "title": "git_commitArguments",
        "type": "object"
      }
    },
    {
      "name": "git_reset",
      "description": "\n    Unstages files from the staging area (index).\n\n    This function removes files from the staging area, effectively undoing a\n    'git add' command. It does not modify the working directory.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        file_path (str, optional): The specific file path to remove from the staging area.\n                                   If not provided, all files are unstaged.\n                                   Example: \"my_file.py\"\n\n    Returns:\n        str: A JSON string confirming the reset or reporting an error.\n             On success: '{\"status\": \"success\", \"message\": \"Unstaged 'my_file.py'.\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "file_path": {
            "default": null,
            "title": "File Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_resetArguments",
        "type": "object"
      }
    },
    {
      "name": "git_log",
      "description": "\n    Shows the commit history of the current branch.\n\n    This function retrieves a list of the most recent commits, providing details\n    such as commit hash, author, date, and message for each.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        max_count (int, optional): The maximum number of log entries to show.\n                                   Defaults to 10. Example: 5\n\n    Returns:\n        str: A JSON string containing the formatted commit history log or an error message.\n             On success: '{\"status\": \"success\", \"data\": [{\"hash\": ..., \"author\": ..., \"date\": ..., \"message\": ...}]}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "max_count": {
            "default": 10,
            "title": "Max Count",
            "type": "integer"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_logArguments",
        "type": "object"
      }
    },
    {
      "name": "git_create_branch",
      "description": "\n    Creates a new branch in the repository.\n\n    The new branch is created pointing to the current HEAD commit. This function\n    does not switch to the new branch.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        branch_name (str): The name of the new branch to create.\n                           Example: \"feature/new-branch\"\n\n    Returns:\n        str: A JSON string confirming the branch creation or reporting an error.\n             On success: '{\"status\": \"success\", \"message\": \"Branch 'feature/new-branch' created.\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Branch 'feature/new-branch' already exists.\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "branch_name"
        ],
        "title": "git_create_branchArguments",
        "type": "object"
      }
    },
    {
      "name": "git_checkout",
      "description": "\n    Switches to a specified branch, updating the working directory.\n\n    This function changes the current active branch to the one specified. The\n    files in the working directory will be updated to match the version in\n    the new branch.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        branch_name (str): The name of the branch to switch to.\n                           Example: \"main\"\n\n    Returns:\n        str: A JSON string confirming the branch switch or reporting an error.\n             On success: '{\"status\": \"success\", \"message\": \"Switched to branch 'main'.\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Branch 'main' not found.\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "branch_name"
        ],
        "title": "git_checkoutArguments",
        "type": "object"
      }
    },
    {
      "name": "git_show",
      "description": "\n    Shows details and changes of a specific commit.\n\n    This function provides metadata (author, date, message) and the patch\n    (diff) for a given commit hash.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        commit_hash (str): The hash of the commit to view details for. Can be a short hash.\n                           Example: \"a1b2c3d4\"\n\n    Returns:\n        str: A JSON string containing detailed information about the specified commit or an error message.\n             On success: '{\"status\": \"success\", \"data\": {\"hash\": ..., \"author\": ..., \"date\": ..., \"message\": ..., \"diff\": ...}}'\n             On failure: '{\"status\": \"error\", \"message\": \"Commit with hash 'a1b2c3d4' not found.\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "commit_hash": {
            "title": "Commit Hash",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "commit_hash"
        ],
        "title": "git_showArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "git_init": [
      {
        "case_name": "Initialize Git Repo in New Directory",
        "purpose": "验证工具能够在指定路径初始化一个新的Git仓库，路径不存在时自动创建并成功初始化。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_project"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Repository initialized at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_project\"}"
        },
        "execution_time": 0.19015288352966309,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repo in Existing Non-Git Directory",
        "purpose": "验证工具在已有但非Git目录中正确初始化Git仓库。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Repository initialized at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\"}"
        },
        "execution_time": 0.16375970840454102,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Initialize Git in Already Initialized Repo",
        "purpose": "验证工具在已经存在Git仓库的路径上返回错误信息，防止重复初始化。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Repository initialized at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\"}"
        },
        "execution_time": 0.1847853660583496,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Initialization with Invalid Path Characters",
        "purpose": "测试工具对包含非法字符的路径是否进行有效拒绝。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid<dir>"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"[WinError 123] \\u6587\\u4ef6\\u540d\\u3001\\u76ee\\u5f55\\u540d\\u6216\\u5377\\u6807\\u8bed\\u6cd5\\u4e0d\\u6b63\\u786e\\u3002: 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\invalid<dir>'\"}"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git in Deeply Nested Directory",
        "purpose": "测试工具处理深层嵌套路径的能力，验证边界条件下的正常行为。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Repository initialized at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\a\\\\b\\\\c\\\\d\\\\e\\\\f\\\\g\\\\h\\\\i\\\\j\\\\k\\\\l\\\\m\\\\n\\\\o\\\\p\\\\q\\\\r\\\\s\\\\t\\\\u\\\\v\\\\w\\\\x\\\\y\\\\z\"}"
        },
        "execution_time": 0.19562840461730957,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git with Special Unicode Characters in Path",
        "purpose": "测试工具对包含Unicode特殊字符路径的支持情况。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\测试路径_特殊字符!@#$%^&*()_+{}[]|\"';:<>?/"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"[WinError 123] \\u6587\\u4ef6\\u540d\\u3001\\u76ee\\u5f55\\u540d\\u6216\\u5377\\u6807\\u8bed\\u6cd5\\u4e0d\\u6b63\\u786e\\u3002: 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\\\u6d4b\\u8bd5\\u8def\\u5f84_\\u7279\\u6b8a\\u5b57\\u7b26!@#$%^&*()_+{}[]|\\\"\\\\';:<>?'\"}"
        },
        "execution_time": 0.005001544952392578,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Initialization Without Write Permissions",
        "purpose": "模拟无写权限情况下工具能否优雅地报错（需手动设置权限）。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Repository initialized at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\"}"
        },
        "execution_time": 0.2077007293701172,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git in Very Long Path",
        "purpose": "测试工具处理超长路径长度限制（Windows MAX_PATH = 260）的情况。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Repository initialized at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"}"
        },
        "execution_time": 0.18166446685791016,
        "is_functional_test": true
      }
    ],
    "git_status": [
      {
        "case_name": "Basic Git Status in Initialized Repo",
        "purpose": "验证工具能正确获取已初始化Git仓库的工作树状态。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"On branch feature@#$_test\\nUntracked files:\\n  (use \\\"git add <file>...\\\" to include in what will be committed)\\n\\ta/\\n\\taaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/\\n\\tapp.ico\\n\\thit.png\\n\\tmetadata_doc.docx\\n\\tmodules.xml\\n\\tmulti_merged_output.zip\\n\\tnew_project/\\n\\tnonname.html\\n\\toutput/\\n\\tpaper1.pdf\\n\\tpresent.html\\n\\tre2.doc\\n\\treadonly_dir/\\n\\trule1.pdf\\n\\tspecial_chars_doc.docx\\n\\tswe.pptx\\n\\ttest_output.docx\\n\\txue.jpg\\n\\txue.png\\n\\nnothing added to commit but untracked files present (use \\\"git add\\\" to track)\"}"
        },
        "execution_time": 0.19709110260009766,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status in Non-Git Directory",
        "purpose": "验证工具在未初始化的目录中返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"On branch master\\n\\nNo commits yet\\n\\nUntracked files:\\n  (use \\\"git add <file>...\\\" to include in what will be committed)\\n\\thit_copy.png\\n\\thit_cropped.png\\n\\thit_resized.png\\n\\txue.jpg\\n\\txue_cropped_zero.png\\n\\txue_full_cropped.png\\n\\txue_resized.jpg\\n\\nnothing added to commit but untracked files present (use \\\"git add\\\" to track)\"}"
        },
        "execution_time": 0.16927623748779297,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status with Invalid Path Characters",
        "purpose": "测试工具是否拒绝包含非法字符的路径。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid<dir>"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid<dir>\"}"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status on Read-Only Directory",
        "purpose": "验证工具在无写权限目录下能否优雅地报错。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"On branch master\\n\\nNo commits yet\\n\\nnothing to commit (create/copy files and use \\\"git add\\\" to track)\"}"
        },
        "execution_time": 0.17569470405578613,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status for Deeply Nested Repository",
        "purpose": "测试工具处理深层嵌套路径的能力并获取Git状态。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"On branch master\\n\\nNo commits yet\\n\\nnothing to commit (create/copy files and use \\\"git add\\\" to track)\"}"
        },
        "execution_time": 0.17876100540161133,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status with Special Unicode Characters",
        "purpose": "测试工具对包含Unicode特殊字符路径的支持情况。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\测试路径_特殊字符!@#$%^&*()_+{}[]|\"';:<>?/\\.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\\\u6d4b\\u8bd5\\u8def\\u5f84_\\u7279\\u6b8a\\u5b57\\u7b26!@#$%^&*()_+{}[]|\\\"';:<>?/\\\\.git\"}"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status on Very Long Path Repository",
        "purpose": "测试工具处理超长路径长度限制下的Git状态查询能力。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"On branch master\\n\\nNo commits yet\\n\\nnothing to commit (create/copy files and use \\\"git add\\\" to track)\"}"
        },
        "execution_time": 0.17939376831054688,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status on Symlinked or Nested Git Directory",
        "purpose": "测试工具是否能识别嵌套或符号链接的.git目录状态。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"On branch master\\n\\nNo commits yet\\n\\nUntracked files:\\n  (use \\\"git add <file>...\\\" to include in what will be committed)\\n\\tHEAD\\n\\tORIG_HEAD\\n\\tconfig\\n\\tdescription\\n\\thooks/\\n\\tindex\\n\\tinfo/\\n\\tlogs/\\n\\tmalicious.docx\\n\\tobjects/\\n\\trefs/\\n\\nnothing added to commit but untracked files present (use \\\"git add\\\" to track)\"}"
        },
        "execution_time": 0.15259385108947754,
        "is_functional_test": true
      }
    ],
    "git_add": [
      {
        "case_name": "Add Single File to Staging Area",
        "purpose": "验证工具能成功将指定的单个文件添加到Git暂存区。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\app.ico"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Added 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\app.ico' to the staging area.\"}"
        },
        "execution_time": 0.18521523475646973,
        "is_functional_test": true
      },
      {
        "case_name": "Add All Files Using Dot Parameter",
        "purpose": "验证使用'.'参数时，工具能正确将所有更改添加到暂存区。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "file_path": "."
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Git command failed: Cmd('git') failed due to: exit code(128)\\n  cmdline: git add .\\n  stderr: 'error: 'a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z/' does not have a commit checked out\\nfatal: adding files failed'\"}"
        },
        "execution_time": 0.1644120216369629,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Add with Invalid File Path",
        "purpose": "测试工具对无效或非法文件路径的处理能力，并返回适当的错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "file_path": "invalid<file>.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Git command failed: Cmd('git') failed due to: exit code(128)\\n  cmdline: git add invalid<file>.txt\\n  stderr: 'fatal: pathspec 'invalid<file>.txt' did not match any files'\"}"
        },
        "execution_time": 0.21035170555114746,
        "is_functional_test": false
      },
      {
        "case_name": "Add File in Read-Only Repository",
        "purpose": "验证在只读仓库目录中执行add操作时是否能优雅地报错。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\.git",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\xue.jpg"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Git command failed: Cmd('git') failed due to: exit code(128)\\n  cmdline: git add D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\\\\xue.jpg\\n  stderr: 'fatal: pathspec 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\\\\xue.jpg' did not match any files'\"}"
        },
        "execution_time": 0.17008018493652344,
        "is_functional_test": false
      },
      {
        "case_name": "Add File to Non-Git Directory",
        "purpose": "测试工具是否检测到目标路径不是Git仓库并返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "file_path": "hit_copy.png"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Added 'hit_copy.png' to the staging area.\"}"
        },
        "execution_time": 0.5029549598693848,
        "is_functional_test": false
      },
      {
        "case_name": "Add File in Deeply Nested Git Repository",
        "purpose": "验证工具能否在深层嵌套的Git仓库中正确添加文件。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z\\.git",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z\\.git\\HEAD"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Added 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\a\\\\b\\\\c\\\\d\\\\e\\\\f\\\\g\\\\h\\\\i\\\\j\\\\k\\\\l\\\\m\\\\n\\\\o\\\\p\\\\q\\\\r\\\\s\\\\t\\\\u\\\\v\\\\w\\\\x\\\\y\\\\z\\\\.git\\\\HEAD' to the staging area.\"}"
        },
        "execution_time": 0.2229597568511963,
        "is_functional_test": true
      },
      {
        "case_name": "Add File with Special Unicode Characters in Path",
        "purpose": "测试工具对包含特殊Unicode字符的路径中的文件添加支持情况。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\测试路径_特殊字符!@#$%^&*()_+{}[]|\"';:<>?/\\.git",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\测试路径_特殊字符!@#$%^&*()_+{}[]|\"';:<>?/\\special_chars_doc.docx"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\\\u6d4b\\u8bd5\\u8def\\u5f84_\\u7279\\u6b8a\\u5b57\\u7b26!@#$%^&*()_+{}[]|\\\"';:<>?/\\\\.git\"}"
        },
        "execution_time": 0.003960847854614258,
        "is_functional_test": false
      },
      {
        "case_name": "Add Very Large Number of Files Using Dot",
        "purpose": "测试工具在暂存大量文件时的行为和性能表现。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "file_path": "."
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Git command failed: Cmd('git') failed due to: exit code(128)\\n  cmdline: git add .\\n  stderr: 'error: 'a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z/' does not have a commit checked out\\nfatal: adding files failed'\"}"
        },
        "execution_time": 0.2161874771118164,
        "is_functional_test": true
      }
    ],
    "git_diff_unstaged": [
      {
        "case_name": "Basic Git Diff Unstaged in Initialized Repo",
        "purpose": "验证工具能正确获取已初始化Git仓库中未暂存的修改差异。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"\"}"
        },
        "execution_time": 0.21264243125915527,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Unstaged with No Changes",
        "purpose": "验证在没有未暂存更改的情况下，工具返回空或无差异信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"\"}"
        },
        "execution_time": 0.20613598823547363,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Unstaged in Non-Git Directory",
        "purpose": "验证工具在未初始化的目录中调用时是否返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\"}"
        },
        "execution_time": 0.003631114959716797,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Unstaged with Invalid Path Characters",
        "purpose": "测试工具是否拒绝包含非法字符的路径。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid<dir>"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid<dir>\"}"
        },
        "execution_time": 0.004743814468383789,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Unstaged on Read-Only Directory",
        "purpose": "验证工具在无写权限目录下能否优雅地报错。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"\"}"
        },
        "execution_time": 0.1730051040649414,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Unstaged for Deeply Nested Repository",
        "purpose": "测试工具处理深层嵌套路径并获取未暂存差异的能力。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"\"}"
        },
        "execution_time": 0.1637134552001953,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Unstaged with Special Unicode Characters",
        "purpose": "测试工具对包含Unicode特殊字符路径的支持情况。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\测试路径_特殊字符!@#$%^&*()_+{}[]|\"';:<>?/\\.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\\\u6d4b\\u8bd5\\u8def\\u5f84_\\u7279\\u6b8a\\u5b57\\u7b26!@#$%^&*()_+{}[]|\\\"';:<>?/\\\\.git\"}"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Unstaged on Very Long Path Repository",
        "purpose": "测试工具处理超长路径长度限制下的未暂存差异查询能力。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"\"}"
        },
        "execution_time": 0.1704578399658203,
        "is_functional_test": true
      }
    ],
    "git_diff_staged": [
      {
        "case_name": "Basic Staged Changes Diff in Initialized Repo",
        "purpose": "验证工具能正确显示已初始化Git仓库中暂存区的差异。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"diff --git a/app.ico b/app.ico\\nnew file mode 100644\\nindex 0000000..a5b2226\\nBinary files /dev/null and b/app.ico differ\"}"
        },
        "execution_time": 0.1753242015838623,
        "is_functional_test": true
      },
      {
        "case_name": "Staged Diff in Non-Git Directory",
        "purpose": "验证工具在未初始化的目录中尝试获取暂存差异时返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Invalid Git repository: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\"}"
        },
        "execution_time": 0.0040056705474853516,
        "is_functional_test": false
      },
      {
        "case_name": "Staged Diff with Invalid Path Characters",
        "purpose": "测试工具是否拒绝包含非法字符的路径并返回错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid<dir>"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid<dir>\"}"
        },
        "execution_time": 0.0045070648193359375,
        "is_functional_test": false
      },
      {
        "case_name": "Staged Diff on Read-Only Directory",
        "purpose": "验证工具在无写权限目录下能否优雅地报错。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\"}"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": false
      },
      {
        "case_name": "Staged Diff for Deeply Nested Repository",
        "purpose": "测试工具处理深层嵌套路径的能力并获取暂存差异。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z\\.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\a\\\\b\\\\c\\\\d\\\\e\\\\f\\\\g\\\\h\\\\i\\\\j\\\\k\\\\l\\\\m\\\\n\\\\o\\\\p\\\\q\\\\r\\\\s\\\\t\\\\u\\\\v\\\\w\\\\x\\\\y\\\\z\\\\.git\"}"
        },
        "execution_time": 0.008987665176391602,
        "is_functional_test": true
      },
      {
        "case_name": "Staged Diff with Special Unicode Characters",
        "purpose": "测试工具对包含Unicode特殊字符路径的支持情况。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\测试路径_特殊字符!@#$%^&*()_+{}[]|\"';:<>?/\\.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\\\u6d4b\\u8bd5\\u8def\\u5f84_\\u7279\\u6b8a\\u5b57\\u7b26!@#$%^&*()_+{}[]|\\\"';:<>?/\\\\.git\"}"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": false
      },
      {
        "case_name": "Staged Diff on Very Long Path Repository",
        "purpose": "测试工具处理超长路径长度限制下的暂存差异查询能力。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\\.git\"}"
        },
        "execution_time": 0.007001161575317383,
        "is_functional_test": true
      },
      {
        "case_name": "Staged Diff on Symlinked or Nested Git Directory",
        "purpose": "测试工具是否能识别嵌套或符号链接的.git目录中的暂存差异。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"\"}"
        },
        "execution_time": 0.20237207412719727,
        "is_functional_test": true
      }
    ],
    "git_commit": [
      {
        "case_name": "Commit Staged Changes with Valid Message",
        "purpose": "验证在已有Git仓库中，使用有效提交信息成功提交暂存区更改。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "message": "feat: Add new feature"
        },
        "response": {
          "result": "{\"status\": \"success\", \"commit_hash\": \"45cea58d1e303ea16e8ea2ae02a1513d82fb32af\"}"
        },
        "execution_time": 0.29729652404785156,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Commit Without Staged Changes",
        "purpose": "验证当没有暂存任何更改时尝试提交会返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_project\\.git",
          "message": "chore: Empty commit attempt"
        },
        "response": {
          "result": "{\"status\": \"success\", \"commit_hash\": \"a4e44b75757625ad57c4b117b1352c6b0abcea03\"}"
        },
        "execution_time": 0.3119630813598633,
        "is_functional_test": true
      },
      {
        "case_name": "Commit with Empty Message",
        "purpose": "测试工具是否拒绝空的提交信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "message": ""
        },
        "response": {
          "result": "{\"status\": \"success\", \"commit_hash\": \"382ae6e2488cf0294fc8ee6620e33b1dbe1de54c\"}"
        },
        "execution_time": 0.36376047134399414,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Special Characters in Message",
        "purpose": "验证提交信息支持特殊字符和Unicode字符。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "message": "fix: Resolve issue #42 & update config! 日本語メッセージ"
        },
        "response": {
          "result": "{\"status\": \"success\", \"commit_hash\": \"92dbee8b8e6a0b6c4f322a7851ef1e40b197a636\"}"
        },
        "execution_time": 0.31842684745788574,
        "is_functional_test": true
      },
      {
        "case_name": "Commit to Non-Git Directory",
        "purpose": "验证尝试向未初始化为Git仓库的目录提交是否会返回错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "message": "docs: Update documentation"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Invalid Git repository: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\"}"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Invalid Repository Path",
        "purpose": "测试工具是否能正确处理非法仓库路径的情况。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid<dir>",
          "message": "style: Format code"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid<dir>\"}"
        },
        "execution_time": 0.005003452301025391,
        "is_functional_test": false
      },
      {
        "case_name": "Commit in Read-Only Repository",
        "purpose": "验证在无写权限的Git仓库中提交是否会优雅地报错。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\.git",
          "message": "perf: Improve performance"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\\\\.git\"}"
        },
        "execution_time": 0.006520271301269531,
        "is_functional_test": false
      },
      {
        "case_name": "Commit in Deeply Nested Git Repository",
        "purpose": "验证深层嵌套路径下的Git仓库是否可以正常提交。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z\\.git",
          "message": "ci: Configure CI pipeline"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\a\\\\b\\\\c\\\\d\\\\e\\\\f\\\\g\\\\h\\\\i\\\\j\\\\k\\\\l\\\\m\\\\n\\\\o\\\\p\\\\q\\\\r\\\\s\\\\t\\\\u\\\\v\\\\w\\\\x\\\\y\\\\z\\\\.git\"}"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": true
      }
    ],
    "git_diff": [
      {
        "case_name": "Basic Diff Between Two Branches",
        "purpose": "验证工具能够正确比较两个分支之间的差异。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "base": "master",
          "compare": "feature@#$_test"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"diff --git a/app.ico b/app.ico\\nnew file mode 100644\\nindex 0000000..a5b2226\\nBinary files /dev/null and b/app.ico differ\"}"
        },
        "execution_time": 0.1889197826385498,
        "is_functional_test": true
      },
      {
        "case_name": "Diff Between Branch and Working Directory",
        "purpose": "验证当未提供 compare 参数时，工具能自动将 base 分支与当前工作目录进行比较。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "base": "master"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"diff --git a/app.ico b/app.ico\\nnew file mode 100644\\nindex 0000000..a5b2226\\nBinary files /dev/null and b/app.ico differ\"}"
        },
        "execution_time": 0.3003420829772949,
        "is_functional_test": true
      },
      {
        "case_name": "Diff With Invalid Repository Path",
        "purpose": "测试工具是否在提供的仓库路径无效时返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_repo",
          "base": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_repo\"}"
        },
        "execution_time": 0.011516094207763672,
        "is_functional_test": false
      },
      {
        "case_name": "Diff Between Nonexistent Branches",
        "purpose": "验证工具在尝试比较不存在的分支时能否优雅地报错。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "base": "nonexistent_branch",
          "compare": "another_nonexistent"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Git command failed: Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff nonexistent_branch another_nonexistent\\n  stderr: 'fatal: ambiguous argument 'nonexistent_branch': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.15253853797912598,
        "is_functional_test": false
      },
      {
        "case_name": "Diff With Special Characters in Branch Names",
        "purpose": "测试工具是否支持包含特殊字符的分支名称之间的差异比较。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "base": "feature@#$_test",
          "compare": "bugfix/!@#$%^&*"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"\"}"
        },
        "execution_time": 0.20194149017333984,
        "is_functional_test": true
      },
      {
        "case_name": "Diff on Read-Only Repository Directory",
        "purpose": "验证工具在无写权限目录下执行 diff 操作时的行为。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\.git",
          "base": "master"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\\\\.git\"}"
        },
        "execution_time": 0.0060007572174072266,
        "is_functional_test": false
      },
      {
        "case_name": "Diff Between Long Commit Hash Strings",
        "purpose": "测试工具是否能处理较长的 commit hash 字符串进行精确比较。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "base": "a5b2226638e1261d27b580631c4014916ac86bee",
          "compare": "ae41d43be77f0d370281d9f64c7816372725058e"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Git command failed: Cmd('git') failed due to: exit code(129)\\n  cmdline: git diff a5b2226638e1261d27b580631c4014916ac86bee ae41d43be77f0d370281d9f64c7816372725058e\\n  stderr: 'usage: git diff [<options>] [<commit>] [--] [<path>...]\\n   or: git diff [<options>] --cached [--merge-base] [<commit>] [--] [<path>...]\\n   or: git diff [<options>] [--merge-base] <commit> [<commit>...] <commit> [--] [<path>...]\\n   or: git diff [<options>] <commit>...<commit> [--] [<path>...]\\n   or: git diff [<options>] <blob> <blob>\\n   or: git diff [<options>] --no-index [--] <path> <path>\\n\\ncommon diff options:\\n  -z            output diff-raw with lines terminated with NUL.\\n  -p            output patch format.\\n  -u            synonym for -p.\\n  --patch-with-raw\\n                output both a patch and the diff-raw format.\\n  --stat        show diffstat instead of patch.\\n  --numstat     show numeric diffstat instead of patch.\\n  --patch-with-stat\\n                output a patch and prepend its diffstat.\\n  --name-only   show only names of changed files.\\n  --name-status show names and status of changed files.\\n  --full-index  show full object name on index lines.\\n  --abbrev=<n>  abbreviate object names in diff-tree header and diff-raw.\\n  -R            swap input file pairs.\\n  -B            detect complete rewrites.\\n  -M            detect renames.\\n  -C            detect copies.\\n  --find-copies-harder\\n                try unchanged files as candidate for cop...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计1831字符，剩余331字符"
        },
        "execution_time": 0.14914822578430176,
        "is_functional_test": true
      },
      {
        "case_name": "Diff Between Deeply Nested Git Directory",
        "purpose": "测试工具在深层嵌套路径下的 diff 功能是否正常。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z\\.git",
          "base": "master"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\a\\\\b\\\\c\\\\d\\\\e\\\\f\\\\g\\\\h\\\\i\\\\j\\\\k\\\\l\\\\m\\\\n\\\\o\\\\p\\\\q\\\\r\\\\s\\\\t\\\\u\\\\v\\\\w\\\\x\\\\y\\\\z\\\\.git\"}"
        },
        "execution_time": 0.004632234573364258,
        "is_functional_test": true
      }
    ],
    "git_log": [
      {
        "case_name": "Basic Git Log in Initialized Repo with Default Count",
        "purpose": "验证工具在已初始化的Git仓库中，默认获取最近10条提交记录的基本功能。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": [{\"hash\": \"92dbee8b8e6a0b6c4f322a7851ef1e40b197a636\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T03:00:25+08:00\", \"message\": \"fix: Resolve issue #42 & update config! \\u65e5\\u672c\\u8a9e\\u30e1\\u30c3\\u30bb\\u30fc\\u30b8\"}, {\"hash\": \"382ae6e2488cf0294fc8ee6620e33b1dbe1de54c\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T03:00:24+08:00\", \"message\": \"\"}, {\"hash\": \"45cea58d1e303ea16e8ea2ae02a1513d82fb32af\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T03:00:24+08:00\", \"message\": \"feat: Add new feature\"}, {\"hash\": \"fda2224c6133fa2af482ae462dde64fedbaf0253\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T02:49:23+08:00\", \"message\": \"Permission denied test commit\"}, {\"hash\": \"94746c04d0352c423f30677f3e37370576cb13f2\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T02:49:23+08:00\", \"message\": \"This is a very long commit message that exceeds the typical length limit by a significant margin, testing the system's ability to handle lengthy messages without crashing or truncating unexpectedly.\"}, {\"hash\": \"8e06cfaf7eff7ad2cd7a678c552a4a09497ffc1f\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T02:49:22+08:00\", \"message\": \"Commit message with @#$_ special characters\"}, {\"hash\": \"57c5dd448f1f2745e68fe149c10dcfa3e2f024c4\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T02:49:22+08:00\", \"message\": \"\"}, {\"hash\": \"dcefb0cb4dab512d228d7ae7211cd78c1ec044a9\", \"...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计1608字符，剩余108字符"
        },
        "execution_time": 1.8019638061523438,
        "is_functional_test": true
      },
      {
        "case_name": "Git Log with Custom Max Count",
        "purpose": "验证工具在指定max_count参数时，能正确返回相应数量的提交记录。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "max_count": 5
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": [{\"hash\": \"92dbee8b8e6a0b6c4f322a7851ef1e40b197a636\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T03:00:25+08:00\", \"message\": \"fix: Resolve issue #42 & update config! \\u65e5\\u672c\\u8a9e\\u30e1\\u30c3\\u30bb\\u30fc\\u30b8\"}, {\"hash\": \"382ae6e2488cf0294fc8ee6620e33b1dbe1de54c\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T03:00:24+08:00\", \"message\": \"\"}, {\"hash\": \"45cea58d1e303ea16e8ea2ae02a1513d82fb32af\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T03:00:24+08:00\", \"message\": \"feat: Add new feature\"}, {\"hash\": \"fda2224c6133fa2af482ae462dde64fedbaf0253\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T02:49:23+08:00\", \"message\": \"Permission denied test commit\"}, {\"hash\": \"94746c04d0352c423f30677f3e37370576cb13f2\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T02:49:23+08:00\", \"message\": \"This is a very long commit message that exceeds the typical length limit by a significant margin, testing the system's ability to handle lengthy messages without crashing or truncating unexpectedly.\"}]}"
        },
        "execution_time": 1.9497740268707275,
        "is_functional_test": true
      },
      {
        "case_name": "Git Log in Non-Git Directory",
        "purpose": "验证工具在非Git目录中执行时能否正确返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\"}"
        },
        "execution_time": 0.12695574760437012,
        "is_functional_test": true
      },
      {
        "case_name": "Git Log with Invalid Path Characters",
        "purpose": "测试工具是否拒绝包含非法字符的路径并返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid<dir>"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid<dir>\"}"
        },
        "execution_time": 0.11012148857116699,
        "is_functional_test": false
      },
      {
        "case_name": "Git Log on Read-Only Directory",
        "purpose": "验证工具在无写权限目录下是否能正确处理权限问题并返回日志或错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\"}"
        },
        "execution_time": 0.11404633522033691,
        "is_functional_test": false
      },
      {
        "case_name": "Git Log for Deeply Nested Repository",
        "purpose": "测试工具在深层嵌套路径中能否正确获取提交历史。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z\\.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\a\\\\b\\\\c\\\\d\\\\e\\\\f\\\\g\\\\h\\\\i\\\\j\\\\k\\\\l\\\\m\\\\n\\\\o\\\\p\\\\q\\\\r\\\\s\\\\t\\\\u\\\\v\\\\w\\\\x\\\\y\\\\z\\\\.git\"}"
        },
        "execution_time": 0.07366609573364258,
        "is_functional_test": true
      },
      {
        "case_name": "Git Log with Special Unicode Characters in Path",
        "purpose": "测试工具是否能处理包含Unicode特殊字符的路径并正确返回错误或日志。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\测试路径_特殊字符!@#$%^&*()_+{}[]|\"';:<>?/\\.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\\\u6d4b\\u8bd5\\u8def\\u5f84_\\u7279\\u6b8a\\u5b57\\u7b26!@#$%^&*()_+{}[]|\\\"';:<>?/\\\\.git\"}"
        },
        "execution_time": 0.10280942916870117,
        "is_functional_test": false
      },
      {
        "case_name": "Git Log on Very Long Path Repository",
        "purpose": "测试工具在超长路径长度限制下是否能正常获取提交日志。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\\.git\"}"
        },
        "execution_time": 0.10909414291381836,
        "is_functional_test": true
      }
    ],
    "git_reset": [
      {
        "case_name": "Unstage Specific File from Staging Area",
        "purpose": "验证工具能够成功从暂存区移除指定文件。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Unstaged 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\hit.png'.\"}"
        },
        "execution_time": 0.3080873489379883,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage All Files When No File Path Provided",
        "purpose": "验证当未提供文件路径时，工具能够成功从暂存区移除所有文件。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Unstaged all files.\"}"
        },
        "execution_time": 0.3066387176513672,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Unstage File in Non-Git Directory",
        "purpose": "验证工具在非Git目录中尝试取消暂存文件时能否优雅地报错。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\hit_copy.png"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\"}"
        },
        "execution_time": 0.021510839462280273,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage File with Invalid Path Characters",
        "purpose": "测试工具是否拒绝包含非法字符的路径。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid<dir>",
          "file_path": "invalid<file>.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid<dir>\"}"
        },
        "execution_time": 0.010999441146850586,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage File in Read-Only Git Repository",
        "purpose": "验证工具在只读Git仓库中取消暂存文件时能否正确处理。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\.git",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\xue.jpg"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\\\\.git\"}"
        },
        "execution_time": 0.049217939376831055,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage File with Special Unicode Characters in Path",
        "purpose": "测试工具是否支持包含Unicode特殊字符的文件路径。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\测试路径_特殊字符!@#$%^&*()_+{}[]|\"';:<>?/\\.git",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\测试路径_特殊字符!@#$%^&*()_+{}[]|\"';:<>?/\\special_chars_doc.docx"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\\\u6d4b\\u8bd5\\u8def\\u5f84_\\u7279\\u6b8a\\u5b57\\u7b26!@#$%^&*()_+{}[]|\\\"';:<>?/\\\\.git\"}"
        },
        "execution_time": 0.016013622283935547,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage File in Deeply Nested Git Repository",
        "purpose": "测试工具是否能处理深层嵌套路径下的取消暂存操作。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z\\.git",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z\\test_output.docx"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\a\\\\b\\\\c\\\\d\\\\e\\\\f\\\\g\\\\h\\\\i\\\\j\\\\k\\\\l\\\\m\\\\n\\\\o\\\\p\\\\q\\\\r\\\\s\\\\t\\\\u\\\\v\\\\w\\\\x\\\\y\\\\z\\\\.git\"}"
        },
        "execution_time": 0.004999637603759766,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage File in Very Long Path Git Repository",
        "purpose": "测试工具是否能处理超长路径下的取消暂存操作。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\.git",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\swe.pptx"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\\.git\"}"
        },
        "execution_time": 0.01851367950439453,
        "is_functional_test": true
      }
    ],
    "git_create_branch": [
      {
        "case_name": "Create Branch in Initialized Git Repository",
        "purpose": "验证工具能够在已初始化的Git仓库中成功创建新分支，且不切换到该分支。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "feature/test-branch"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Branch 'feature/test-branch' created.\"}"
        },
        "execution_time": 0.23409533500671387,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Create Branch in Non-Git Directory",
        "purpose": "验证工具在非Git目录中尝试创建分支时返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "branch_name": "feature/invalid-repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\"}"
        },
        "execution_time": 0.006985664367675781,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Create Already Existing Branch",
        "purpose": "验证工具在目标分支名已经存在的情况下返回明确的错误提示。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "master"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Branch 'master' already exists.\"}"
        },
        "execution_time": 0.007999658584594727,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch with Invalid Name Characters",
        "purpose": "测试工具是否拒绝包含非法字符的分支名称。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "feature/<invalid-name>"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"An unexpected error occurred: Lock at 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\.git\\\\\\\\refs\\\\\\\\heads\\\\\\\\feature\\\\\\\\<invalid-name>.lock' could not be obtained\"}"
        },
        "execution_time": 0.21326112747192383,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch Using Unicode Special Characters in Name",
        "purpose": "测试工具是否支持或正确处理包含Unicode特殊字符的分支名称。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "feature/测试分支_中文"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Branch 'feature/\\u6d4b\\u8bd5\\u5206\\u652f_\\u4e2d\\u6587' created.\"}"
        },
        "execution_time": 0.2169191837310791,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch on Read-Only Repository",
        "purpose": "模拟无写权限情况下工具能否优雅地报错（需手动设置权限）。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "branch_name": "feature/readonly-check"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\"}"
        },
        "execution_time": 0.005998134613037109,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch in Deeply Nested Repository Path",
        "purpose": "测试工具处理深层嵌套路径并创建分支的能力。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z\\.git",
          "branch_name": "nested-feature"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\a\\\\b\\\\c\\\\d\\\\e\\\\f\\\\g\\\\h\\\\i\\\\j\\\\k\\\\l\\\\m\\\\n\\\\o\\\\p\\\\q\\\\r\\\\s\\\\t\\\\u\\\\v\\\\w\\\\x\\\\y\\\\z\\\\.git\"}"
        },
        "execution_time": 0.007009029388427734,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch with Very Long Name",
        "purpose": "测试工具对超长分支名称的处理能力，验证边界条件。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz_very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Branch 'very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz_very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz' created.\"}"
        },
        "execution_time": 0.23008394241333008,
        "is_functional_test": true
      }
    ],
    "git_checkout": [
      {
        "case_name": "Checkout to Existing Branch Successfully",
        "purpose": "验证工具能够成功切换到一个已存在的Git分支并更新工作目录。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "feature@#$_test"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Switched to branch 'feature@#$_test'.\"}"
        },
        "execution_time": 0.22283649444580078,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Checkout to Nonexistent Branch",
        "purpose": "测试工具在尝试切换到不存在的分支时是否返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "nonexistent_branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Branch 'nonexistent_branch' not found.\"}"
        },
        "execution_time": 0.004990816116333008,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout with Invalid Repository Path",
        "purpose": "验证工具在提供无效或不存在的仓库路径时能否优雅地报错。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_repo_path",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_repo_path\"}"
        },
        "execution_time": 0.005012035369873047,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout Using Special Unicode Characters in Branch Name",
        "purpose": "测试工具是否支持包含特殊Unicode字符的分支名称进行切换。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "测试分支_中文"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Branch '\\u6d4b\\u8bd5\\u5206\\u652f_\\u4e2d\\u6587' not found.\"}"
        },
        "execution_time": 0.009864091873168945,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout on Read-Only Repository Directory",
        "purpose": "验证工具在无法写入的只读目录中执行checkout操作时是否能正确处理。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "branch_name": "master"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\"}"
        },
        "execution_time": 0.005695343017578125,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout to Very Long Branch Name",
        "purpose": "测试工具对超长分支名称的支持情况（边界条件）。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz_very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Switched to branch 'very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz_very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz'.\"}"
        },
        "execution_time": 0.2138516902923584,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout Using Nested Branch Path",
        "purpose": "验证工具是否支持嵌套分支路径（如 feature/test-branch）。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "feature\\test-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Branch 'feature\\\\test-branch' not found.\"}"
        },
        "execution_time": 0.003998517990112305,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout with Invalid Characters in Branch Name",
        "purpose": "测试工具是否拒绝包含非法字符的分支名。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "invalid<branch>"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Branch 'invalid<branch>' not found.\"}"
        },
        "execution_time": 0.003998279571533203,
        "is_functional_test": false
      }
    ],
    "git_show": [
      {
        "case_name": "Show Details for Valid Commit",
        "purpose": "验证工具能正确显示指定有效提交哈希的详细信息和差异内容。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"An unexpected error occurred: Ref 'a1b2c3d4' did not resolve to an object\"}"
        },
        "execution_time": 0.654942512512207,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Show Details for Invalid Commit Hash",
        "purpose": "测试工具是否在提供无效或不存在的提交哈希时返回清晰的错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "commit_hash": "invalidhash123"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"An unexpected error occurred: Ref 'invalidhash123' did not resolve to an object\"}"
        },
        "execution_time": 0.21198725700378418,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit Details with Short Hash",
        "purpose": "验证工具是否支持使用短提交哈希（部分匹配）来展示提交详情。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "commit_hash": "a1b2c3"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"An unexpected error occurred: Ref 'a1b2c3' did not resolve to an object\"}"
        },
        "execution_time": 0.7571568489074707,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Access Git Repo Without Read Permissions",
        "purpose": "模拟无读取权限情况下，工具能否优雅地拒绝访问并报错。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\.git",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\\\\.git\"}"
        },
        "execution_time": 0.26023411750793457,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit in Deeply Nested Repository Path",
        "purpose": "测试工具处理深层嵌套路径下Git提交详情查询的能力。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z\\.git",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\a\\\\b\\\\c\\\\d\\\\e\\\\f\\\\g\\\\h\\\\i\\\\j\\\\k\\\\l\\\\m\\\\n\\\\o\\\\p\\\\q\\\\r\\\\s\\\\t\\\\u\\\\v\\\\w\\\\x\\\\y\\\\z\\\\.git\"}"
        },
        "execution_time": 0.17513632774353027,
        "is_functional_test": true
      },
      {
        "case_name": "Show Commit in Repository with Special Unicode Characters in Path",
        "purpose": "测试工具对包含Unicode特殊字符的仓库路径的支持情况。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\测试路径_特殊字符!@#$%^&*()_+{}[]|\"';:<>?/\\.git",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\\\u6d4b\\u8bd5\\u8def\\u5f84_\\u7279\\u6b8a\\u5b57\\u7b26!@#$%^&*()_+{}[]|\\\"';:<>?/\\\\.git\"}"
        },
        "execution_time": 0.15261268615722656,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit in Very Long Path Repository",
        "purpose": "测试工具在超长路径长度限制下能否正常获取提交详情。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\.git",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\\\.git\"}"
        },
        "execution_time": 0.19388556480407715,
        "is_functional_test": true
      },
      {
        "case_name": "Show Commit on Symlinked or Nested Git Directory",
        "purpose": "测试工具是否能识别嵌套或符号链接.git目录中的提交详情。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\.git",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\.git\"}"
        },
        "execution_time": 0.1611771583557129,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 96
}