{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "gemini-2.5-pro-mcp_mongodb_database_manager",
  "server_path": "workspace/pipeline-output-servers/gemini-2.5-pro/mcp_mongodb_database_manager/refined/server.py",
  "timestamp": "2025-07-13T02:53:32.793590",
  "tools": [
    {
      "name": "mcp_list_databases",
      "description": "\n    Lists the names of all available databases on the MongoDB server.\n\n    Returns:\n        A JSON string representing a list of database names.\n        Example: '[\"admin\", \"config\", \"local\", \"mydatabase\"]'\n    ",
      "args_schema": {
        "properties": {},
        "title": "mcp_list_databasesArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_list_collections",
      "description": "\n    Lists the names of all collections within a specified database.\n\n    Args:\n        database_name (str): The name of the database to inspect.\n\n    Returns:\n        A JSON string representing a list of collection names.\n        Example: '[\"users\", \"products\", \"orders\"]'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          }
        },
        "required": [
          "database_name"
        ],
        "title": "mcp_list_collectionsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_insert_document",
      "description": "\n    Inserts a new document into a specified collection.\n\n    Args:\n        database_name (str): The name of the target database.\n        collection_name (str): The name of the target collection.\n        document (dict): The document to be inserted.\n\n    Returns:\n        A JSON string containing the string representation of the newly inserted document's _id.\n        Example: '{\"inserted_id\": \"64c9a3e6e7e4a4c4de54d7e1\"}'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "document": {
            "title": "Document",
            "type": "object"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "document"
        ],
        "title": "mcp_insert_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_find_documents",
      "description": "\n    Finds documents matching a specific query within a collection.\n\n    Args:\n        database_name (str): The name of the database to query.\n        collection_name (str): The name of the collection to query.\n        query (dict): The MongoDB query filter. Use {} to match all documents.\n        projection (dict, optional): The projection specification. Defaults to None.\n        limit (int, optional): The maximum number of documents to return. Defaults to 100.\n\n    Returns:\n        A JSON string representing a list of documents that match the query.\n        Example: '[{\"_id\": \"64c9a3e6e7e4a4c4de54d7e1\", \"name\": \"John Doe\"}]'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "title": "Query",
            "type": "object"
          },
          "projection": {
            "default": null,
            "title": "Projection",
            "type": "object"
          },
          "limit": {
            "default": 100,
            "title": "Limit",
            "type": "integer"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "query"
        ],
        "title": "mcp_find_documentsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_update_document",
      "description": "\n    Updates one or more documents that match a specified filter.\n\n    Args:\n        database_name (str): The name of the database for the update.\n        collection_name (str): The name of the collection for the update.\n        query (dict): The filter to select the document(s) to update.\n        update (dict): The update operations to be applied (e.g., using '$set').\n        update_many (bool, optional): If True, updates all matching documents. Defaults to False.\n\n    Returns:\n        A JSON string with the count of matched and modified documents.\n        Example: '{\"matched_count\": 1, \"modified_count\": 1}'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "title": "Query",
            "type": "object"
          },
          "update": {
            "title": "Update",
            "type": "object"
          },
          "update_many": {
            "default": false,
            "title": "Update Many",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "query",
          "update"
        ],
        "title": "mcp_update_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_delete_document",
      "description": "\n    Deletes one or more documents that match a specified filter.\n\n    Args:\n        database_name (str): The name of the database from which to delete.\n        collection_name (str): The name of the collection from which to delete.\n        query (dict): The filter to select the document(s) for deletion.\n        delete_many (bool, optional): If True, deletes all matching documents. Defaults to False.\n\n    Returns:\n        A JSON string containing the number of documents deleted.\n        Example: '{\"deleted_count\": 1}'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "title": "Query",
            "type": "object"
          },
          "delete_many": {
            "default": false,
            "title": "Delete Many",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "query"
        ],
        "title": "mcp_delete_documentArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "mcp_list_databases": [
      {
        "case_name": "List All Databases Successfully",
        "purpose": "验证工具能够成功列出MongoDB服务器上的所有数据库名称。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.005673646926879883,
        "is_functional_test": true
      },
      {
        "case_name": "Verify Default Database Existence",
        "purpose": "确认默认数据库（如admin、local等）是否存在于返回结果中。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.0030002593994140625,
        "is_functional_test": true
      },
      {
        "case_name": "Check Empty Database List",
        "purpose": "验证当MongoDB服务器上没有用户创建的数据库时，工具是否能正确返回系统默认数据库列表。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.00400090217590332,
        "is_functional_test": true
      },
      {
        "case_name": "Test Tool Output Format",
        "purpose": "验证工具返回的数据格式是否为合法的JSON数组字符串。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Unauthorized Access",
        "purpose": "验证在无权限访问MongoDB服务器的情况下，工具是否会安全地处理错误并返回适当提示。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.00599980354309082,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - MongoDB Server Not Running",
        "purpose": "测试当MongoDB服务不可用时，工具是否能优雅地处理连接失败的情况。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid Connection String",
        "purpose": "验证当配置的MongoDB连接字符串无效时，工具能否正确报错。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.009003162384033203,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Test - Large Number of Databases",
        "purpose": "模拟存在大量数据库的情况，验证工具是否能正确处理和返回大数据量的结果。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.003995656967163086,
        "is_functional_test": false
      }
    ],
    "mcp_list_collections": [
      {
        "case_name": "List Collections Successfully",
        "purpose": "验证工具能够成功列出指定数据库中的所有集合名称。",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "[\"a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\", \"new_collection\", \"test_collection\", \"empty_docs\", \"invalid/collection*name\", \"user_profiles\", \"long_key_collection\", \"test_collection'; DROP COLLECTION test_collection;--\", \"large_data\", \"special_chars_collection\", \"binary_data_collection\", \"nonexistent_collection\", \"a_very_long_collection_name_that_exceeds_normal_limits_and_might_cause_issues\", \"users\"]"
        },
        "execution_time": 0.011027812957763672,
        "is_functional_test": true
      },
      {
        "case_name": "Verify System Collection Exclusion",
        "purpose": "确认返回结果中不包含系统默认集合（如system.indexes等）。",
        "args": {
          "database_name": "admin"
        },
        "response": {
          "result": "[\"system.version\", \"system_logs\"]"
        },
        "execution_time": 0.004994869232177734,
        "is_functional_test": true
      },
      {
        "case_name": "Check Empty Collection List",
        "purpose": "验证当指定数据库中没有用户创建的集合时，工具是否能正确返回空数组。",
        "args": {
          "database_name": "empty_db"
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.006003141403198242,
        "is_functional_test": true
      },
      {
        "case_name": "Test Tool Output Format",
        "purpose": "验证工具返回的数据格式是否为合法的JSON数组字符串。",
        "args": {
          "database_name": "mcp-test"
        },
        "response": {
          "result": "[\"users\", \"user_profiles\", \"\\u7528\\u6237\\u4fe1\\u606f\", \"test\"]"
        },
        "execution_time": 0.012012004852294922,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Unauthorized Access to Database",
        "purpose": "验证在无权限访问特定数据库的情况下，工具是否会安全地处理错误并返回适当提示。",
        "args": {
          "database_name": "restricted_db"
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.0055010318756103516,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid Database Name",
        "purpose": "测试当提供无效或不存在的数据库名称时，工具是否能优雅地处理错误。",
        "args": {
          "database_name": "invalid_database"
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.007004737854003906,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Test - Special Characters in Database Name",
        "purpose": "验证工具能否正确处理包含特殊字符的数据库名称。",
        "args": {
          "database_name": "db@#_\\u6d4b\\u8bd5"
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_list_collections: An unexpected error occurred while listing collections: database names cannot contain the character '\\\\'"
        },
        "execution_time": 0.002377748489379883,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Test - Large Number of Collections",
        "purpose": "模拟存在大量集合的情况，验证工具是否能正确处理和返回大数据量的结果。",
        "args": {
          "database_name": "large_db"
        },
        "response": {
          "result": "[\"large_collection\"]"
        },
        "execution_time": 0.004007816314697266,
        "is_functional_test": false
      }
    ],
    "mcp_insert_document": [
      {
        "case_name": "Insert Document Successfully",
        "purpose": "验证工具能够成功将文档插入到指定的数据库和集合中。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "document": {
            "name": "John Doe",
            "age": 30,
            "email": "johndoe@example.com"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"6872af6d9da8b940f807d366\"}"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document into Non-Existent Collection",
        "purpose": "测试当目标集合不存在时，工具是否能自动创建集合并插入文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "new_collection",
          "document": {
            "title": "Test Document",
            "content": "This is a test document."
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"6872af6d9da8b940f807d367\"}"
        },
        "execution_time": 0.005001068115234375,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document with Special Characters in Keys",
        "purpose": "验证工具能否正确处理包含特殊字符的文档键名。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "document": {
            "user@name": "Alice",
            "age#value": 25
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"6872af6d9da8b940f807d368\"}"
        },
        "execution_time": 0.007013559341430664,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Unauthorized Insert Attempt",
        "purpose": "验证在无权限操作特定数据库的情况下，工具是否会安全地处理错误并返回适当提示。",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "secure_collection",
          "document": {
            "secret_key": "top_secret_value"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"6872af6d9da8b940f807d369\"}"
        },
        "execution_time": 0.024074316024780273,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid Database Name",
        "purpose": "测试当提供无效或不存在的数据库名称时，工具是否能优雅地处理错误。",
        "args": {
          "database_name": "invalid_database",
          "collection_name": "test_collection",
          "document": {
            "key": "value"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"6872af6d9da8b940f807d36a\"}"
        },
        "execution_time": 0.01950979232788086,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Missing Required Parameters",
        "purpose": "验证工具在缺少必要参数（如database_name、collection_name）时是否能正确报错。",
        "args": {
          "document": {
            "key": "value"
          }
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_insert_document: 2 validation errors for mcp_insert_documentArguments\ndatabase_name\n  Field required [type=missing, input_value={'document': {'key': 'value'}}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing\ncollection_name\n  Field required [type=missing, input_value={'document': {'key': 'value'}}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Test - Insert Document with Long Key Names",
        "purpose": "验证工具能否正确处理具有极长键名的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "long_key_collection",
          "document": {
            "a_very_long_key_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it": "value"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"6872af6d9da8b940f807d36b\"}"
        },
        "execution_time": 0.004999876022338867,
        "is_functional_test": true
      }
    ],
    "mcp_find_documents": [
      {
        "case_name": "Basic Document Search with Default Parameters",
        "purpose": "验证使用默认参数时能否成功从指定集合中检索文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {}
        },
        "response": {
          "result": "[{\"_id\": \"6872ad03424cddc98ebe1c08\", \"name\": \"Alice\", \"age\": 25}, {\"_id\": \"6872ad03424cddc98ebe1c0b\"}]"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": true
      },
      {
        "case_name": "Document Search with Specific Query",
        "purpose": "验证工具能否根据指定查询条件正确返回匹配文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "name": "John Doe"
          }
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.00400090217590332,
        "is_functional_test": true
      },
      {
        "case_name": "Document Search with Projection",
        "purpose": "验证工具能否正确应用字段投影来限制返回的字段。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {},
          "projection": {
            "name": 1,
            "_id": 0
          }
        },
        "response": {
          "result": "[{\"name\": \"Alice\"}, {}]"
        },
        "execution_time": 0.0070018768310546875,
        "is_functional_test": true
      },
      {
        "case_name": "Document Search with Limit",
        "purpose": "验证工具能否正确限制返回的文档数量。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {},
          "limit": 5
        },
        "response": {
          "result": "[{\"_id\": \"6872ad03424cddc98ebe1c08\", \"name\": \"Alice\", \"age\": 25}, {\"_id\": \"6872ad03424cddc98ebe1c0b\"}]"
        },
        "execution_time": 0.005997419357299805,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Unauthorized Access to Collection",
        "purpose": "验证在无权限访问特定集合的情况下，工具是否能安全地处理错误并返回适当提示。",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "sensitive_data",
          "query": {}
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.00668787956237793,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid Database Name",
        "purpose": "测试当提供无效或不存在的数据库名称时，工具是否能优雅地处理错误。",
        "args": {
          "database_name": "invalid_database",
          "collection_name": "users",
          "query": {}
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.0049991607666015625,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid Collection Name",
        "purpose": "测试当提供无效或不存在的集合名称时，工具是否能正确报错。",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "query": {}
        },
        "response": {
          "result": "[{\"_id\": \"686395fe8bb57d80cdb0c4a3\", \"key\": \"updated_value\"}, {\"_id\": \"68710caed665c89a8d5748ba\", \"name\": \"Alice\", \"email\": \"alice@example.com\"}, {\"_id\": \"68710cc7ea7bb66ae341045d\", \"data\": \"new collection should be created\"}, {\"_id\": \"687258207c1609156ee10ee2\", \"key\": \"value\"}, {\"_id\": \"687259cf14abe8d498d2f50a\", \"key\": \"value\"}, {\"_id\": \"68729041dc66f8998dec5876\", \"key\": \"value\"}, {\"_id\": \"687291c80d1fbb52f4c8c1b4\", \"key\": \"value\"}, {\"_id\": \"6872ad03424cddc98ebe1c09\", \"name\": \"Bob\", \"age\": 30}]"
        },
        "execution_time": 0.007605791091918945,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Test - Special Characters in Query",
        "purpose": "验证工具能否正确处理包含特殊字符的查询条件。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "username": "user@domain.com"
          }
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.004000663757324219,
        "is_functional_test": false
      }
    ],
    "mcp_update_document": [
      {
        "case_name": "Basic Document Update Success",
        "purpose": "验证使用有效参数能够成功更新单个匹配文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "username": "john_doe"
          },
          "update": {
            "$set": {
              "email": "john_new@example.com"
            }
          }
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.005509376525878906,
        "is_functional_test": true
      },
      {
        "case_name": "Update Multiple Documents",
        "purpose": "验证设置 update_many=True 时可以更新所有匹配的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "user_profiles",
          "query": {
            "status": "inactive"
          },
          "update": {
            "$set": {
              "status": "active"
            }
          },
          "update_many": true
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.004998445510864258,
        "is_functional_test": true
      },
      {
        "case_name": "No Matching Document Found",
        "purpose": "验证当查询条件不匹配任何文档时，工具正确返回0匹配和修改计数。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "username": "nonexistent_user"
          },
          "update": {
            "$set": {
              "email": "new_email@example.com"
            }
          }
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.009001016616821289,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Unauthorized Database Access",
        "purpose": "验证在无权限访问目标数据库的情况下是否能安全处理错误并返回提示。",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "sensitive_data",
          "query": {
            "id": 1
          },
          "update": {
            "$set": {
              "data": "modified"
            }
          }
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.008458852767944336,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid Database Name",
        "purpose": "测试提供无效或不存在的数据库名称时能否优雅地处理错误。",
        "args": {
          "database_name": "invalid_database",
          "collection_name": "users",
          "query": {
            "username": "john_doe"
          },
          "update": {
            "$set": {
              "email": "john_new@example.com"
            }
          }
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.004523515701293945,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid Collection Name",
        "purpose": "测试提供无效或不存在的集合名称时能否优雅地处理错误。",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "query": {
            "username": "john_doe"
          },
          "update": {
            "$set": {
              "email": "john_new@example.com"
            }
          }
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.006002902984619141,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Test - Special Characters in Query",
        "purpose": "验证工具能否正确处理包含特殊字符的查询条件。",
        "args": {
          "database_name": "test_db",
          "collection_name": "special_chars_collection",
          "query": {
            "key@#_value": "test\\escape\"quote"
          },
          "update": {
            "$set": {
              "updated": true
            }
          }
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.005499124526977539,
        "is_functional_test": false
      }
    ],
    "mcp_delete_document": [
      {
        "case_name": "Basic Document Deletion",
        "purpose": "验证在指定查询条件下能正确删除单个文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "name": "John Doe"
          },
          "delete_many": false
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.0069942474365234375,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Multiple Documents Matching Query",
        "purpose": "验证当 delete_many=True 时，所有匹配查询条件的文档都会被删除。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "status": "inactive"
          },
          "delete_many": true
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.005000591278076172,
        "is_functional_test": true
      },
      {
        "case_name": "Delete with Default Delete Many Value",
        "purpose": "验证使用默认参数 delete_many=False 时仅删除一个匹配文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "user_profiles",
          "query": {
            "age": {
              "$lt": 18
            }
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.006000041961669922,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Non-Existent Document",
        "purpose": "验证尝试删除不存在的文档时工具返回 deleted_count=0。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "name": "Non Existent User"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.008053302764892578,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Unauthorized Access to Database",
        "purpose": "验证无权限访问目标数据库时是否安全处理错误并返回提示信息。",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "sensitive_data",
          "query": {
            "role": "admin"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.00600123405456543,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid Database Name",
        "purpose": "验证提供无效数据库名称时能否正确报错。",
        "args": {
          "database_name": "invalid/db*name",
          "collection_name": "users",
          "query": {
            "name": "Test User"
          }
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_delete_document: An unexpected error occurred during document deletion: database names cannot contain the character '/'"
        },
        "execution_time": 0.007737636566162109,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Test - Special Characters in Query",
        "purpose": "验证查询中包含特殊字符（如正则表达式）时能否正确执行删除。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "email": {
              "$regex": "@example\\.com$"
            }
          },
          "delete_many": true
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.006520748138427734,
        "is_functional_test": true
      },
      {
        "case_name": "Boundary Test - Large Query Object",
        "purpose": "验证使用非常大的查询对象时能否正常处理。",
        "args": {
          "database_name": "large_db",
          "collection_name": "large_collection",
          "query": {
            "metadata": {
              "a": 1,
              "b": 2,
              "c": 3,
              "d": 4,
              "e": 5,
              "f": 6,
              "g": 7,
              "h": 8,
              "i": 9,
              "j": 10,
              "k": 11,
              "l": 12,
              "m": 13,
              "n": 14,
              "o": 15
            }
          },
          "delete_many": true
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.006499290466308594,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 46
}