{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "deepseek-v3-mcp_git_repository_manager",
  "server_path": "workspace/pipeline-output-servers/deepseek-v3/mcp_git_repository_manager/refined/server.py",
  "timestamp": "2025-07-16T10:22:21.360045",
  "tools": [
    {
      "name": "git_init",
      "description": "\n    Initialize a new Git repository in the specified directory.\n\n    Args:\n        directory: The path where the Git repository will be initialized.\n\n    Returns:\n        A string indicating the success or failure of the initialization.\n\n    Raises:\n        ValueError: If the directory is invalid.\n        GitCommandError: If Git initialization fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          }
        },
        "required": [
          "directory"
        ],
        "title": "git_initArguments",
        "type": "object"
      }
    },
    {
      "name": "text_write",
      "description": "\n    Write content to a specified file.\n\n    Args:\n        file_path: The path to the file that should be created or overwritten.\n        content: The content to write into the file.\n\n    Returns:\n        A confirmation message indicating success or an error message.\n\n    Raises:\n        ValueError: If the file path is invalid.\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "content"
        ],
        "title": "text_writeArguments",
        "type": "object"
      }
    },
    {
      "name": "git_status",
      "description": "\n    Display the current state of the Git repository.\n\n    Args:\n        directory: The path to the Git repository.\n\n    Returns:\n        A string containing the status information.\n\n    Raises:\n        ValueError: If the directory is invalid.\n        GitCommandError: If Git status fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          }
        },
        "required": [
          "directory"
        ],
        "title": "git_statusArguments",
        "type": "object"
      }
    },
    {
      "name": "git_add",
      "description": "\n    Add specified files to the Git staging area.\n\n    Args:\n        directory: The path to the Git repository.\n        files: A list of file paths to add to the staging area.\n\n    Returns:\n        A string confirming the files were added or an error message.\n\n    Raises:\n        ValueError: If the directory or files are invalid.\n        GitCommandError: If Git add fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "files": {
            "items": {
              "type": "string"
            },
            "title": "Files",
            "type": "array"
          }
        },
        "required": [
          "directory",
          "files"
        ],
        "title": "git_addArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_unstaged",
      "description": "\n    Show the differences between the working directory and the last commit (unstaged changes).\n\n    Args:\n        directory: The path to the Git repository.\n\n    Returns:\n        A string detailing the unstaged differences.\n\n    Raises:\n        ValueError: If the directory is invalid.\n        GitCommandError: If Git diff fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          }
        },
        "required": [
          "directory"
        ],
        "title": "git_diff_unstagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_staged",
      "description": "\n    Show the differences between the staging area and the last commit (staged changes).\n\n    Args:\n        directory: The path to the Git repository.\n\n    Returns:\n        A string detailing the staged differences.\n\n    Raises:\n        ValueError: If the directory is invalid.\n        GitCommandError: If Git diff fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          }
        },
        "required": [
          "directory"
        ],
        "title": "git_diff_stagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff",
      "description": "\n    Compare differences between branches, commits, or files.\n\n    Args:\n        directory: The path to the Git repository.\n        source: The source branch, commit, or file.\n        target: The target branch, commit, or file.\n\n    Returns:\n        A string detailing the differences.\n\n    Raises:\n        ValueError: If the directory, source, or target is invalid.\n        GitCommandError: If Git diff fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "source": {
            "title": "Source",
            "type": "string"
          },
          "target": {
            "title": "Target",
            "type": "string"
          }
        },
        "required": [
          "directory",
          "source",
          "target"
        ],
        "title": "git_diffArguments",
        "type": "object"
      }
    },
    {
      "name": "git_commit",
      "description": "\n    Commit the staged changes to the repository with a message.\n\n    Args:\n        directory: The path to the Git repository.\n        message: The commit message.\n\n    Returns:\n        A string confirming the commit or an error message.\n\n    Raises:\n        ValueError: If the directory or message is invalid.\n        GitCommandError: If Git commit fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "message": {
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "directory",
          "message"
        ],
        "title": "git_commitArguments",
        "type": "object"
      }
    },
    {
      "name": "git_reset",
      "description": "\n    Unstage files from the staging area.\n\n    Args:\n        directory: The path to the Git repository.\n        files: A list of file paths to unstage.\n\n    Returns:\n        A string confirming the reset or an error message.\n\n    Raises:\n        ValueError: If the directory or files are invalid.\n        GitCommandError: If Git reset fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "files": {
            "items": {
              "type": "string"
            },
            "title": "Files",
            "type": "array"
          }
        },
        "required": [
          "directory",
          "files"
        ],
        "title": "git_resetArguments",
        "type": "object"
      }
    },
    {
      "name": "git_log",
      "description": "\n    Display the commit history of the repository.\n\n    Args:\n        directory: The path to the Git repository.\n\n    Returns:\n        A string containing the commit history.\n\n    Raises:\n        ValueError: If the directory is invalid.\n        GitCommandError: If Git log fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          }
        },
        "required": [
          "directory"
        ],
        "title": "git_logArguments",
        "type": "object"
      }
    },
    {
      "name": "git_create_branch",
      "description": "\n    Create a new branch in the repository.\n\n    Args:\n        directory: The path to the Git repository.\n        branch_name: The name of the new branch.\n\n    Returns:\n        A string confirming the branch creation or an error message.\n\n    Raises:\n        ValueError: If the directory or branch name is invalid.\n        GitCommandError: If Git branch creation fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "directory",
          "branch_name"
        ],
        "title": "git_create_branchArguments",
        "type": "object"
      }
    },
    {
      "name": "git_checkout",
      "description": "\n    Switch to a specified branch or commit.\n\n    Args:\n        directory: The path to the Git repository.\n        target: The branch name or commit hash to switch to.\n\n    Returns:\n        A string confirming the checkout or an error message.\n\n    Raises:\n        ValueError: If the directory or target is invalid.\n        GitCommandError: If Git checkout fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "target": {
            "title": "Target",
            "type": "string"
          }
        },
        "required": [
          "directory",
          "target"
        ],
        "title": "git_checkoutArguments",
        "type": "object"
      }
    },
    {
      "name": "git_show",
      "description": "\n    Display detailed information about a specific commit.\n\n    Args:\n        directory: The path to the Git repository.\n        commit_hash: The hash of the commit to display.\n\n    Returns:\n        A string containing the commit details.\n\n    Raises:\n        ValueError: If the directory or commit hash is invalid.\n        GitCommandError: If Git show fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "commit_hash": {
            "title": "Commit Hash",
            "type": "string"
          }
        },
        "required": [
          "directory",
          "commit_hash"
        ],
        "title": "git_showArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "git_init": [
      {
        "case_name": "Initialize Git Repository in Valid Directory",
        "purpose": "验证工具能够在指定的有效目录中成功初始化一个新的 Git 仓库。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Git repository initialized successfully in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.1731407642364502,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository in Empty Directory",
        "purpose": "验证工具在空目录中也能正确初始化 Git 仓库。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\emptyDir"
        },
        "response": {
          "result": "Git repository initialized successfully in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\emptyDir"
        },
        "execution_time": 0.2567272186279297,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Git Initialization with Invalid Directory Path",
        "purpose": "测试当提供的目录路径无效时，工具是否抛出 ValueError 异常。",
        "args": {
          "directory": "D:\\invalid\\nonexistent\\path"
        },
        "response": {
          "result": "Git repository initialized successfully in D:\\invalid\\nonexistent\\path"
        },
        "execution_time": 0.42999267578125,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository in Read-only Directory",
        "purpose": "测试在只读目录中初始化 Git 仓库是否会引发 GitCommandError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonlyDir"
        },
        "response": {
          "result": "Git repository initialized successfully in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonlyDir"
        },
        "execution_time": 0.3448171615600586,
        "is_functional_test": false
      },
      {
        "case_name": "Git Init with Special Characters in Directory Name",
        "purpose": "验证工具是否能处理包含特殊字符的目录名。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\special@#&()Dir"
        },
        "response": {
          "result": "Git repository initialized successfully in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\special@#&()Dir"
        },
        "execution_time": 0.21410894393920898,
        "is_functional_test": true
      },
      {
        "case_name": "Git Init on Already Initialized Git Repository",
        "purpose": "测试在一个已经存在 .git 子目录的目录中再次执行 git init 是否失败并抛出异常。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\alreadyGitRepo"
        },
        "response": {
          "result": "Git repository initialized successfully in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\alreadyGitRepo"
        },
        "execution_time": 0.23284006118774414,
        "is_functional_test": false
      },
      {
        "case_name": "Git Init on Network or Shared Directory",
        "purpose": "测试工具是否能在网络共享或受限访问的目录中初始化 Git 仓库。",
        "args": {
          "directory": "\\\\network\\shared\\path\\to\\repo"
        },
        "response": {
          "error": "ToolException: Error executing tool git_init: [WinError 53] 找不到网络路径。: '\\\\\\\\network\\\\shared\\\\'"
        },
        "execution_time": 7.280142307281494,
        "is_functional_test": false
      }
    ],
    "text_write": [
      {
        "case_name": "Write Text to New File in Valid Directory",
        "purpose": "验证工具能够成功在指定的有效目录中创建并写入新文件。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_output.txt",
          "content": "This is a test content for new file."
        },
        "response": {
          "result": "Successfully wrote content to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_output.txt"
        },
        "execution_time": 0.0039975643157958984,
        "is_functional_test": true
      },
      {
        "case_name": "Overwrite Existing File with New Content",
        "purpose": "验证工具能正确覆盖已有文件的内容而不报错。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "content": "This is overwritten content."
        },
        "response": {
          "result": "Successfully wrote content to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
        },
        "execution_time": 0.003000974655151367,
        "is_functional_test": true
      },
      {
        "case_name": "Write Empty Content to File",
        "purpose": "测试工具是否允许写入空内容到文件中。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_output.txt",
          "content": ""
        },
        "response": {
          "result": "Successfully wrote content to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_output.txt"
        },
        "execution_time": 0.0050547122955322266,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Write to Read-only File",
        "purpose": "测试当目标文件为只读时，工具是否抛出异常或失败。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_test.png",
          "content": "This should fail due to read-only target."
        },
        "response": {
          "result": "Successfully wrote content to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_test.png"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      },
      {
        "case_name": "Write Content to File with Special Characters in Path",
        "purpose": "验证工具能否处理包含特殊字符的路径名。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\special@#&()Dir\\special_chars_file.txt",
          "content": "Content written to path with special characters."
        },
        "response": {
          "result": "Successfully wrote content to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\special@#&()Dir\\special_chars_file.txt"
        },
        "execution_time": 0.0070497989654541016,
        "is_functional_test": true
      },
      {
        "case_name": "Write Content to Nonexistent Directory",
        "purpose": "测试当目标目录不存在时，工具是否抛出 ValueError 异常。",
        "args": {
          "file_path": "D:\\invalid\\nonexistent\\path\\test_output.txt",
          "content": "This should fail because the directory does not exist."
        },
        "response": {
          "result": "Successfully wrote content to D:\\invalid\\nonexistent\\path\\test_output.txt"
        },
        "execution_time": 0.004013538360595703,
        "is_functional_test": false
      },
      {
        "case_name": "Write Unicode Content to File",
        "purpose": "测试工具是否支持写入 Unicode 字符内容。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unicode_output.txt",
          "content": "你好，世界！ This is a mixed language test content. 🌍"
        },
        "response": {
          "result": "Successfully wrote content to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unicode_output.txt"
        },
        "execution_time": 0.007506370544433594,
        "is_functional_test": true
      }
    ],
    "git_status": [
      {
        "case_name": "Get Git Status in Initialized Repository",
        "purpose": "验证工具能够成功获取已初始化 Git 仓库的状态信息。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\t20250507-151716.png\n\t20250509-154554.mp4\n\t68078d40e08a19b806665fee_1745325376_auto_driving_system.csv\n\tapp.ico\n\tcheck_structure_copy.docx\n\tconcurrent_copy_1.docx\n\tconcurrent_download.txt\n\tconcurrent_save_1.docx\n\tcropped_xue.jpg\n\tcs.csv\n\tcustom_screenshot.png\n\tdefault_location_copy.docx\n\tdownloaded_largefile.iso\n\tdownloaded_special_chars.txt\n\tdownloaded_testfile.txt\n\tedge_custom_threshold.png\n\tedge_readonly_output.png\n\tempty_content_output.txt\n\texisting_file.txt\n\tfullscreen_app_screenshot.png\n\tfuzzy_merge_output.pdf\n\thit.png\n\ticon_A_green_triangle.png\n\tincludeempty.csv\n\tinspector.zip\n\tinvalid_data_output.png\n\tlarge_image_output.png\n\tmain_monitor_screenshot.png\n\tmodules.xml\n\tnew_test_output.txt\n\tnonname.html\n\tpaper1.pdf\n\tpresent.html\n\tre2.doc\n\treadonly_test.png\n\tsample1.pdf\n\tsaved_document.docx\n\tsaved_document_copy.docx\n\tscreenshot.png\n\tscreenshot_@#&().png\n\tsharpened_output.png\n\tspecial_filtered_output.png\n\tspreadsheet.csv\n\tswe.pptx\n\ttest_output.png\n\ttest_output.txt\n\tthresholded_adaptive_output.png\n\ttmp.csv\n\tunicode_content.txt\n\tunicode_output.txt\n\twhole_framework.pdf\n\txue.jpg\n\t~$onname.html\n\t~$resent.html\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.2447352409362793,
        "is_functional_test": true
      },
      {
        "case_name": "Get Git Status in Empty Repository",
        "purpose": "验证工具在空的 Git 仓库中也能正确返回状态信息。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\emptyDir"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)"
        },
        "execution_time": 0.25121092796325684,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status with Invalid Directory Path",
        "purpose": "测试当提供的目录路径无效时，工具是否抛出 ValueError 异常。",
        "args": {
          "directory": "D:\\invalid\\nonexistent\\path"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\ttest_output.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.2772383689880371,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status on Read-only Directory",
        "purpose": "测试在只读目录中获取 Git 状态是否会引发 GitCommandError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonlyDir"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)"
        },
        "execution_time": 0.23064422607421875,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status with Special Characters in Directory Name",
        "purpose": "验证工具是否能处理包含特殊字符的目录名并正常返回 Git 状态。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\special@#&()Dir"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tspecial_chars_file.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.26244115829467773,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status on Non-Git Directory",
        "purpose": "测试在一个未初始化为 Git 仓库的普通目录中执行 git status 是否失败并抛出异常。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonGitRepo"
        },
        "response": {
          "result": "Error getting Git status: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonGitRepo"
        },
        "execution_time": 0.00987696647644043,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status on Network or Shared Directory",
        "purpose": "测试工具是否能在网络共享或受限访问的目录中获取 Git 状态。",
        "args": {
          "directory": "\\\\network\\shared\\path\\to\\repo"
        },
        "response": {
          "result": "Error getting Git status: Directory does not exist: \\\\network\\shared\\path\\to\\repo"
        },
        "execution_time": 7.248937606811523,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status on Large Repository",
        "purpose": "验证工具能否在大型 Git 仓库中正常获取状态信息。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\largeGitRepo"
        },
        "response": {
          "result": "Error getting Git status: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\largeGitRepo"
        },
        "execution_time": 0.0038661956787109375,
        "is_functional_test": true
      }
    ],
    "git_add": [
      {
        "case_name": "Add Valid Files to Git Staging Area",
        "purpose": "验证工具可以成功将指定的有效文件添加到 Git 暂存区。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_output.txt",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
          ]
        },
        "response": {
          "result": "Added files to staging area: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_output.txt, D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
        },
        "execution_time": 0.0065765380859375,
        "is_functional_test": true
      },
      {
        "case_name": "Add Single File with Special Characters in Path",
        "purpose": "验证工具是否能处理包含特殊字符的文件路径并将其添加至暂存区。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\special@#&()Dir",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\special@#&()Dir\\special_chars_file.txt"
          ]
        },
        "response": {
          "result": "Error adding files to Git: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\special@#&()Dir"
        },
        "execution_time": 0.003000974655151367,
        "is_functional_test": true
      },
      {
        "case_name": "Add Nonexistent File to Staging Area",
        "purpose": "测试当提供的文件路径不存在时，工具是否抛出 ValueError 异常。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt"
          ]
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: [WinError 2] 系统找不到指定的文件。: 'nonexistent_file.txt'"
        },
        "execution_time": 0.003009319305419922,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt Add Without Any Files",
        "purpose": "测试空文件列表是否会触发参数验证错误。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": []
        },
        "response": {
          "result": "Added files to staging area: "
        },
        "execution_time": 0.006512165069580078,
        "is_functional_test": false
      },
      {
        "case_name": "Add File to Invalid Git Directory",
        "purpose": "测试在无效或未初始化的 Git 目录中执行 git add 是否失败并抛出异常。",
        "args": {
          "directory": "D:\\invalid\\nonexistent\\path",
          "files": [
            "D:\\invalid\\nonexistent\\path\\file.txt"
          ]
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: [WinError 2] 系统找不到指定的文件。: 'file.txt'"
        },
        "execution_time": 0.0066144466400146484,
        "is_functional_test": false
      },
      {
        "case_name": "Add Read-only File to Staging Area",
        "purpose": "测试尝试将只读文件添加到 Git 暂存区是否会引发 GitCommandError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_test.png"
          ]
        },
        "response": {
          "result": "Added files to staging area: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_test.png"
        },
        "execution_time": 0.005504608154296875,
        "is_functional_test": false
      },
      {
        "case_name": "Add Large Number of Files",
        "purpose": "测试工具能否处理一次性添加大量文件的情况。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\20250507-151716.png",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\20250509-154554.mp4",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\app.ico",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\check_structure_copy.docx",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\concurrent_copy_1.docx"
          ]
        },
        "response": {
          "result": "Added files to staging area: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\20250507-151716.png, D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\20250509-154554.mp4, D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\app.ico, D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\check_structure_copy.docx, D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\concurrent_copy_1.docx"
        },
        "execution_time": 0.15600943565368652,
        "is_functional_test": true
      },
      {
        "case_name": "Add File with Unicode Path and Name",
        "purpose": "验证工具是否支持将带有 Unicode 路径和文件名的文件添加到暂存区。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\你好世界.txt"
          ]
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: [WinError 2] 系统找不到指定的文件。: '你好世界.txt'"
        },
        "execution_time": 0.006787538528442383,
        "is_functional_test": true
      }
    ],
    "git_diff_unstaged": [
      {
        "case_name": "Show Unstaged Changes in Valid Git Repository",
        "purpose": "验证工具能够正确显示有效 Git 仓库中工作目录与最近一次提交之间的差异（未暂存更改）。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.28662872314453125,
        "is_functional_test": true
      },
      {
        "case_name": "Show Unstaged Changes in Empty Git Repository",
        "purpose": "验证在空的 Git 仓库中运行 git_diff_unstaged 是否返回空结果或无差异信息。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\emptyDir"
        },
        "response": {
          "result": "Error getting unstaged differences: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\emptyDir"
        },
        "execution_time": 0.0045108795166015625,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Show Unstaged Changes with Invalid Directory Path",
        "purpose": "测试当提供的目录路径无效时，工具是否抛出 ValueError 异常。",
        "args": {
          "directory": "D:\\invalid\\nonexistent\\path"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.17307138442993164,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Changes in Read-only Git Directory",
        "purpose": "测试在只读目录中执行 git_diff_unstaged 是否引发 GitCommandError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonlyDir"
        },
        "response": {
          "result": "Error getting unstaged differences: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonlyDir"
        },
        "execution_time": 0.0030982494354248047,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Changes with Special Characters in Directory Name",
        "purpose": "验证工具是否能处理包含特殊字符的目录名并正常显示 unstaged 差异。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\special@#&()Dir"
        },
        "response": {
          "result": "Error getting unstaged differences: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\special@#&()Dir"
        },
        "execution_time": 0.0030007362365722656,
        "is_functional_test": true
      },
      {
        "case_name": "Show Unstaged Changes on Non-Git Directory",
        "purpose": "测试在一个不是 Git 仓库的目录中执行 git_diff_unstaged 是否抛出异常。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonGitDir"
        },
        "response": {
          "result": "Error getting unstaged differences: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonGitDir"
        },
        "execution_time": 0.0030524730682373047,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Changes in Network or Shared Directory",
        "purpose": "测试工具是否能在网络共享或受限访问的目录中显示 unstaged 差异。",
        "args": {
          "directory": "\\\\network\\shared\\path\\to\\repo"
        },
        "response": {
          "result": "Error getting unstaged differences: Directory does not exist: \\\\network\\shared\\path\\to\\repo"
        },
        "execution_time": 7.283222198486328,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Changes in Already Staged and Modified File",
        "purpose": "验证工具能否正确识别已被修改但未添加到暂存区的文件差异。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.18572258949279785,
        "is_functional_test": true
      }
    ],
    "git_diff_staged": [
      {
        "case_name": "Show Staged Changes in Initialized Git Repository",
        "purpose": "验证工具能够在已初始化的 Git 仓库中正确显示暂存区与上次提交之间的差异。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "diff --git a/20250507-151716.png b/20250507-151716.png\nnew file mode 100644\nindex 0000000..fa61b0d\nBinary files /dev/null and b/20250507-151716.png differ\ndiff --git a/20250509-154554.mp4 b/20250509-154554.mp4\nnew file mode 100644\nindex 0000000..8ee557e\nBinary files /dev/null and b/20250509-154554.mp4 differ\ndiff --git a/app.ico b/app.ico\nnew file mode 100644\nindex 0000000..a5b2226\nBinary files /dev/null and b/app.ico differ\ndiff --git a/check_structure_copy.docx b/check_structure_copy.docx\nnew file mode 100644\nindex 0000000..2e0aaf5\n--- /dev/null\n+++ b/check_structure_copy.docx\n@@ -0,0 +1,9 @@\n+empty_replacementTempty_replacementhempty_replacementiempty_replacementsempty_replacement empty_replacementiempty_replacementsempty_replacement empty_replacementaempty_replacement empty_replacementrempty_replacementeempty_replacementpempty_replacementlempty_replacementaempty_replacementcempty_replacementeempty_replacementdempty_replacement!empty_replacement@empty_replacement#empty_replacement$empty_replacement%empty_replacement^empty_replacement&empty_replacement*empty_replacement(empty_replacement)empty_replacement empty_replacementpempty_replacementaempty_replacementrempty_replacementaempty_replacementgempty_replacementrempty_replacementaempty_replacementpempty_replacementhempty_replacement empty_replacementwempty_replacementiempty_replacementtempty_replacementhempty_replacement empty...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计16119字符，剩余14719字符"
        },
        "execution_time": 2.9771289825439453,
        "is_functional_test": true
      },
      {
        "case_name": "Show Staged Changes in Empty Git Repository",
        "purpose": "验证在空的 Git 仓库中执行 git_diff_staged 是否返回空结果或无更改提示。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\emptyDir"
        },
        "response": {
          "result": "Error getting staged differences: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\emptyDir"
        },
        "execution_time": 0.0050046443939208984,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Show Staged Changes with Invalid Directory Path",
        "purpose": "测试当提供的目录路径无效时，工具是否抛出 ValueError 异常。",
        "args": {
          "directory": "D:\\invalid\\nonexistent\\path"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.1778872013092041,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes in Read-only Git Repository",
        "purpose": "测试在只读 Git 仓库中执行 git_diff_staged 是否引发 GitCommandError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonlyDir"
        },
        "response": {
          "result": "Error getting staged differences: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonlyDir"
        },
        "execution_time": 0.002999544143676758,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes with Special Characters in Directory Name",
        "purpose": "验证工具是否能处理包含特殊字符的 Git 仓库路径名。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\special@#&()Dir"
        },
        "response": {
          "result": "Error getting staged differences: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\special@#&()Dir"
        },
        "execution_time": 0.003019571304321289,
        "is_functional_test": true
      },
      {
        "case_name": "Show Staged Changes in Already Initialized Git Repository",
        "purpose": "测试在一个已经存在 .git 子目录的目录中执行 git_diff_staged 是否能正常工作。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\alreadyGitRepo"
        },
        "response": {
          "result": "Error getting staged differences: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\alreadyGitRepo"
        },
        "execution_time": 0.0029997825622558594,
        "is_functional_test": true
      },
      {
        "case_name": "Show Staged Changes on Network or Shared Directory",
        "purpose": "测试工具是否能在网络共享或受限访问的目录中执行 git_diff_staged。",
        "args": {
          "directory": "\\\\network\\shared\\path\\to\\repo"
        },
        "response": {
          "result": "Error getting staged differences: Directory does not exist: \\\\network\\shared\\path\\to\\repo"
        },
        "execution_time": 7.2700958251953125,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes in a Directory Containing Unicode Path",
        "purpose": "测试工具是否支持包含 Unicode 字符的路径名。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\你好世界\\testRepo"
        },
        "response": {
          "result": "Error getting staged differences: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\你好世界\\testRepo"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": true
      }
    ],
    "git_commit": [
      {
        "case_name": "Commit Staged Changes with Valid Message and Directory",
        "purpose": "验证在有效目录中提交已暂存更改时，工具能够成功执行 git commit 并返回确认信息。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Initial commit"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Ref '--cached' did not resolve to an object"
        },
        "execution_time": 0.0050201416015625,
        "is_functional_test": true
      },
      {
        "case_name": "Commit with Empty Commit Message",
        "purpose": "测试当提供的提交消息为空时，工具是否抛出 ValueError 异常。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Ref '--cached' did not resolve to an object"
        },
        "execution_time": 0.0040035247802734375,
        "is_functional_test": false
      },
      {
        "case_name": "Commit in Non-Git Initialized Directory",
        "purpose": "测试在一个未初始化 Git 仓库的目录中尝试提交是否会引发 GitCommandError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\emptyDir",
          "message": "This should fail because no git repo initialized."
        },
        "response": {
          "result": "Error committing changes: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\emptyDir"
        },
        "execution_time": 0.004506111145019531,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Special Characters in Message",
        "purpose": "验证工具是否能处理包含特殊字符的提交消息。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Commit message with special characters: @#&(){}[]<>|"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Ref '--cached' did not resolve to an object"
        },
        "execution_time": 0.004518747329711914,
        "is_functional_test": true
      },
      {
        "case_name": "Commit in Read-only Git Repository",
        "purpose": "测试在只读 Git 仓库目录中提交是否会引发 GitCommandError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonlyDir",
          "message": "This should fail due to read-only repository."
        },
        "response": {
          "result": "Error committing changes: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonlyDir"
        },
        "execution_time": 0.0030002593994140625,
        "is_functional_test": false
      },
      {
        "case_name": "Commit in Directory with Special Characters",
        "purpose": "验证工具能否在路径包含特殊字符的 Git 仓库中成功提交。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\special@#&()Dir",
          "message": "Commit from directory with special characters"
        },
        "response": {
          "result": "Error committing changes: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\special@#&()Dir"
        },
        "execution_time": 0.004022359848022461,
        "is_functional_test": true
      },
      {
        "case_name": "Commit with Long Message",
        "purpose": "测试提交消息长度极大时工具的行为。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "A very long commit message that exceeds normal length limits. This is a test to see how the tool handles excessively long messages for git commit operations."
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Ref '--cached' did not resolve to an object"
        },
        "execution_time": 0.005000591278076172,
        "is_functional_test": true
      },
      {
        "case_name": "Commit with Invalid Directory Path",
        "purpose": "测试当提供的目录路径无效时，工具是否抛出 ValueError 或 GitCommandError。",
        "args": {
          "directory": "D:\\invalid\\nonexistent\\path",
          "message": "This should fail due to invalid directory path."
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Ref '--cached' did not resolve to an object"
        },
        "execution_time": 0.004014015197753906,
        "is_functional_test": false
      }
    ],
    "git_log": [
      {
        "case_name": "Display Commit History in Valid Git Repository",
        "purpose": "验证工具能够成功显示一个有效 Git 仓库的提交历史。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Error getting commit history: Cmd('git') failed due to: exit code(128)\n  cmdline: git log\n  stderr: 'fatal: your current branch 'master' does not have any commits yet'"
        },
        "execution_time": 0.1132662296295166,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Display Commit History in Non-Git Directory",
        "purpose": "测试当提供的目录不是一个 Git 仓库时，工具是否抛出 GitCommandError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\emptyDir"
        },
        "response": {
          "result": "Error getting commit history: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\emptyDir"
        },
        "execution_time": 0.0030052661895751953,
        "is_functional_test": false
      },
      {
        "case_name": "Display Commit History with Special Characters in Path",
        "purpose": "验证工具能否处理包含特殊字符的 Git 路径并正确显示提交历史。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\special@#&()Dir"
        },
        "response": {
          "result": "Error getting commit history: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\special@#&()Dir"
        },
        "execution_time": 0.004001140594482422,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Access Read-only Git Repository",
        "purpose": "测试在只读目录中访问 Git 提交历史是否会引发 GitCommandError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonlyDir"
        },
        "response": {
          "result": "Error getting commit history: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonlyDir"
        },
        "execution_time": 0.003105640411376953,
        "is_functional_test": false
      },
      {
        "case_name": "Display Commit History in Already Initialized Git Repo",
        "purpose": "验证工具能够在已存在的 Git 仓库中正常显示提交历史。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\alreadyGitRepo"
        },
        "response": {
          "result": "Error getting commit history: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\alreadyGitRepo"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": true
      },
      {
        "case_name": "Access Git Log from Network or Shared Directory",
        "purpose": "测试工具是否能在网络共享或受限访问的目录中获取 Git 提交历史。",
        "args": {
          "directory": "\\\\network\\shared\\path\\to\\repo"
        },
        "response": {
          "result": "Error getting commit history: Directory does not exist: \\\\network\\shared\\path\\to\\repo"
        },
        "execution_time": 7.272037982940674,
        "is_functional_test": false
      },
      {
        "case_name": "Display Commit History in Directory with .git Subdirectory",
        "purpose": "验证工具能否在存在 .git 子目录的有效路径中显示提交历史。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "response": {
          "result": "Error getting commit history: Cmd('git') failed due to: exit code(128)\n  cmdline: git log\n  stderr: 'fatal: your current branch 'master' does not have any commits yet'"
        },
        "execution_time": 0.18455052375793457,
        "is_functional_test": true
      },
      {
        "case_name": "Display Commit History with Long and Complex File Names",
        "purpose": "测试工具是否能处理带有长文件名和复杂结构的 Git 仓库提交历史。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Error getting commit history: Cmd('git') failed due to: exit code(128)\n  cmdline: git log\n  stderr: 'fatal: your current branch 'master' does not have any commits yet'"
        },
        "execution_time": 0.1772480010986328,
        "is_functional_test": true
      }
    ],
    "git_diff": [
      {
        "case_name": "Compare Two Valid Branches in Initialized Repository",
        "purpose": "验证工具能够正确比较两个有效分支之间的差异。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source": "main",
          "target": "feature_branch"
        },
        "response": {
          "result": "Error comparing differences: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff main feature_branch\n  stderr: 'fatal: ambiguous argument 'main': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.1986985206604004,
        "is_functional_test": true
      },
      {
        "case_name": "Compare Differences Between Commit and Branch",
        "purpose": "测试工具能否正确比较一个提交和一个分支之间的差异。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source": "abc1234",
          "target": "main"
        },
        "response": {
          "result": "Error comparing differences: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff abc1234 main\n  stderr: 'fatal: ambiguous argument 'abc1234': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.17990803718566895,
        "is_functional_test": true
      },
      {
        "case_name": "Compare Two Specific Files in Same Directory",
        "purpose": "验证工具是否支持文件级比较，并能返回具体差异内容。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source": "file1.txt",
          "target": "file2.txt"
        },
        "response": {
          "result": "Error comparing differences: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff file1.txt file2.txt\n  stderr: 'fatal: ambiguous argument 'file1.txt': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.21268844604492188,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Git Diff with Invalid Directory Path",
        "purpose": "测试当提供的目录路径无效时，工具是否抛出 ValueError 异常。",
        "args": {
          "directory": "D:\\invalid\\nonexistent\\path",
          "source": "main",
          "target": "feature_branch"
        },
        "response": {
          "result": "Error comparing differences: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff main feature_branch\n  stderr: 'fatal: ambiguous argument 'main': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.2539975643157959,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff on Read-only Repository Directory",
        "purpose": "测试在只读目录中执行 git diff 是否引发 GitCommandError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonlyDir",
          "source": "main",
          "target": "feature_branch"
        },
        "response": {
          "result": "Error comparing differences: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonlyDir"
        },
        "execution_time": 0.004508018493652344,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff with Special Characters in Branch Names",
        "purpose": "验证工具是否能处理包含特殊字符的分支名进行比较。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source": "bugfix/issue#42",
          "target": "release/v1.0"
        },
        "response": {
          "result": "Error comparing differences: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff bugfix/issue#42 release/v1.0\n  stderr: 'fatal: ambiguous argument 'bugfix/issue#42': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.20009922981262207,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Using Long Branch or Commit Hash",
        "purpose": "测试工具是否能处理长 commit hash 或极长分支名称的比较。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source": "aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd",
          "target": "main"
        },
        "response": {
          "result": "Error comparing differences: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd main\n  stderr: 'fatal: bad object aaaaaaaaaabbbbbbbbbbccccccccccdddddddddd'"
        },
        "execution_time": 0.181060791015625,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Between Binary Files",
        "purpose": "验证工具是否能安全处理二进制文件之间的差异比较。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source": "hit.png",
          "target": "20250507-151716.png"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.1485273838043213,
        "is_functional_test": true
      }
    ],
    "git_reset": [
      {
        "case_name": "Unstage Single File from Staging Area",
        "purpose": "验证工具能够成功从暂存区取消暂存单个文件。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\sample1.pdf"
          ]
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 'IndexFile' object has no attribute 'unstage'"
        },
        "execution_time": 0.00492405891418457,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage Multiple Files from Staging Area",
        "purpose": "验证工具支持从暂存区同时取消暂存多个文件。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\paper1.pdf",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\cs.csv"
          ]
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 'IndexFile' object has no attribute 'unstage'"
        },
        "execution_time": 0.004152059555053711,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage File in Read-only Git Repository",
        "purpose": "测试在只读 Git 仓库中取消暂存文件是否会引发 GitCommandError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonlyDir",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonlyDir\\testfile.txt"
          ]
        },
        "response": {
          "result": "Error unstaging files: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonlyDir"
        },
        "execution_time": 0.004021167755126953,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt Unstage with Invalid Directory Path",
        "purpose": "测试当提供的 Git 仓库路径无效时，工具是否抛出 ValueError 异常。",
        "args": {
          "directory": "D:\\invalid\\nonexistent\\path",
          "files": [
            "file.txt"
          ]
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 'IndexFile' object has no attribute 'unstage'"
        },
        "execution_time": 0.004004001617431641,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage Nonexistent File",
        "purpose": "验证工具在尝试取消暂存不存在的文件时是否抛出 GitCommandError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.txt"
          ]
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 'IndexFile' object has no attribute 'unstage'"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage File with Special Characters in Path",
        "purpose": "验证工具是否能处理包含特殊字符的文件路径。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\special@#&()Dir",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\special@#&()Dir\\special_file.txt"
          ]
        },
        "response": {
          "result": "Error unstaging files: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\special@#&()Dir"
        },
        "execution_time": 0.0039904117584228516,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage File in Network or Shared Directory",
        "purpose": "测试工具是否能在网络共享或受限访问的目录中取消暂存文件。",
        "args": {
          "directory": "\\\\network\\shared\\path\\to\\repo",
          "files": [
            "\\\\network\\shared\\path\\to\\repo\\file.txt"
          ]
        },
        "response": {
          "result": "Error unstaging files: Directory does not exist: \\\\network\\shared\\path\\to\\repo"
        },
        "execution_time": 7.26776909828186,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage Zero Files (Empty Files List)",
        "purpose": "验证工具在提供空文件列表时是否抛出 ValueError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": []
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 'IndexFile' object has no attribute 'unstage'"
        },
        "execution_time": 0.004998683929443359,
        "is_functional_test": false
      }
    ],
    "git_create_branch": [
      {
        "case_name": "Create Git Branch in Initialized Repository",
        "purpose": "验证工具能够在已初始化的 Git 仓库中成功创建新分支。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/test-branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Ref 'HEAD' did not resolve to an object"
        },
        "execution_time": 0.008058786392211914,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Create Git Branch with Empty Name",
        "purpose": "测试当提供空分支名时，工具是否抛出 ValueError 异常。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Ref 'HEAD' did not resolve to an object"
        },
        "execution_time": 0.0055086612701416016,
        "is_functional_test": false
      },
      {
        "case_name": "Create Git Branch with Special Characters in Name",
        "purpose": "验证工具是否支持在分支名中使用特殊字符。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "bugfix/issue#42@2025"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Ref 'HEAD' did not resolve to an object"
        },
        "execution_time": 0.006300926208496094,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Create Git Branch in Non-Git Directory",
        "purpose": "测试在一个未初始化为 Git 仓库的目录中尝试创建分支是否会失败并抛出 GitCommandError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\emptyDir",
          "branch_name": "new-branch"
        },
        "response": {
          "result": "Error creating branch: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\emptyDir"
        },
        "execution_time": 0.005512714385986328,
        "is_functional_test": false
      },
      {
        "case_name": "Create Git Branch in Read-only Repository",
        "purpose": "验证在只读 Git 仓库中创建分支是否会失败并抛出异常。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonlyDir",
          "branch_name": "readonly-branch"
        },
        "response": {
          "result": "Error creating branch: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonlyDir"
        },
        "execution_time": 0.0065174102783203125,
        "is_functional_test": false
      },
      {
        "case_name": "Create Git Branch with Maximum Length Name",
        "purpose": "测试 Git 是否允许创建最大长度（例如 255 字符）的分支名称。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "a12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890......"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Ref 'HEAD' did not resolve to an object"
        },
        "execution_time": 0.00900888442993164,
        "is_functional_test": false
      },
      {
        "case_name": "Create Git Branch in Network or Shared Directory",
        "purpose": "测试工具是否能在网络共享或受限访问的目录中创建分支。",
        "args": {
          "directory": "\\\\network\\shared\\path\\to\\repo",
          "branch_name": "network-branch"
        },
        "response": {
          "result": "Error creating branch: Directory does not exist: \\\\network\\shared\\path\\to\\repo"
        },
        "execution_time": 7.247253656387329,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt Create Git Branch with Invalid Directory Path",
        "purpose": "测试当提供的目录路径无效时，工具是否抛出 ValueError 异常。",
        "args": {
          "directory": "D:\\invalid\\nonexistent\\path",
          "branch_name": "new-branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Ref 'HEAD' did not resolve to an object"
        },
        "execution_time": 0.003788471221923828,
        "is_functional_test": false
      }
    ],
    "git_checkout": [
      {
        "case_name": "Checkout to Valid Branch in Initialized Repository",
        "purpose": "验证在已初始化的 Git 仓库中切换到一个有效的分支。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "target": "main"
        },
        "response": {
          "result": "Error checking out: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout main\n  stderr: 'error: pathspec 'main' did not match any file(s) known to git'"
        },
        "execution_time": 0.1069481372833252,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout to Specific Commit Hash",
        "purpose": "验证工具能够切换到指定的提交哈希。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "target": "a1b2c3d4e5f67890abcdef1234567890abcdef12"
        },
        "response": {
          "result": "Error checking out: Cmd('git') failed due to: exit code(128)\n  cmdline: git checkout a1b2c3d4e5f67890abcdef1234567890abcdef12\n  stderr: 'fatal: unable to read tree (a1b2c3d4e5f67890abcdef1234567890abcdef12)'"
        },
        "execution_time": 0.15500783920288086,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout with Invalid Directory Path",
        "purpose": "测试当提供的目录路径无效时，工具是否抛出 ValueError 异常。",
        "args": {
          "directory": "D:\\invalid\\nonexistent\\path",
          "target": "main"
        },
        "response": {
          "result": "Error checking out: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout main\n  stderr: 'error: pathspec 'main' did not match any file(s) known to git'"
        },
        "execution_time": 0.16552948951721191,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout to Non-existent Branch or Commit",
        "purpose": "验证工具在尝试切换到不存在的分支或提交时是否抛出 GitCommandError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "target": "nonexistent-branch"
        },
        "response": {
          "result": "Error checking out: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout nonexistent-branch\n  stderr: 'error: pathspec 'nonexistent-branch' did not match any file(s) known to git'"
        },
        "execution_time": 0.24479889869689941,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout in Read-only Git Repository",
        "purpose": "测试在只读 Git 仓库中执行 checkout 是否失败并抛出异常。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonlyDir",
          "target": "main"
        },
        "response": {
          "result": "Error checking out: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonlyDir"
        },
        "execution_time": 0.0035042762756347656,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout with Special Characters in Target Name",
        "purpose": "验证工具是否能处理包含特殊字符的目标分支名。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "target": "feature@#&()branch"
        },
        "response": {
          "result": "Error checking out: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout feature@#&()branch\n  stderr: 'error: pathspec 'feature@#&()branch' did not match any file(s) known to git'"
        },
        "execution_time": 0.27053117752075195,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout Using Empty Target",
        "purpose": "测试使用空字符串作为目标分支或提交是否会引发参数验证错误。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "target": ""
        },
        "response": {
          "result": "Error checking out: Cmd('git') failed due to: exit code(128)\n  cmdline: git checkout \n  stderr: 'fatal: empty string is not a valid pathspec. please use . instead if you meant to match all paths'"
        },
        "execution_time": 0.2872593402862549,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout in a Network or Shared Directory",
        "purpose": "测试工具是否能在网络共享或受限访问的目录中执行 checkout 操作。",
        "args": {
          "directory": "\\\\network\\shared\\path\\to\\repo",
          "target": "main"
        },
        "response": {
          "result": "Error checking out: Directory does not exist: \\\\network\\shared\\path\\to\\repo"
        },
        "execution_time": 0.0035216808319091797,
        "is_functional_test": false
      }
    ],
    "git_show": [
      {
        "case_name": "Display Valid Commit Details in Initialized Repository",
        "purpose": "验证工具能够正确显示指定提交的详细信息，使用有效的仓库目录和合法的commit hash。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "a5b2226638e1261d27b580631c4014916ac86bee"
        },
        "response": {
          "error": "Tool execution timed out after 50.0 seconds."
        },
        "execution_time": 50.0,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Git Show with Invalid Directory",
        "purpose": "测试当提供的目录路径无效时，工具是否抛出 ValueError 异常。",
        "args": {
          "directory": "D:\\invalid\\nonexistent\\path",
          "commit_hash": "a5b2226638e1261d27b580631c4014916ac86bee"
        },
        "response": {
          "error": "McpError: Connection closed"
        },
        "execution_time": 0.08339691162109375,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt Git Show with Invalid Commit Hash",
        "purpose": "测试当提供的commit hash无效时，工具是否抛出 GitCommandError 异常。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "invalid_commit_hash_123"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0007193088531494141,
        "is_functional_test": false
      },
      {
        "case_name": "Git Show on Read-only Repository Directory",
        "purpose": "测试在只读目录中执行 git show 是否失败并抛出 GitCommandError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonlyDir",
          "commit_hash": "a5b2226638e1261d27b580631c4014916ac86bee"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0010004043579101562,
        "is_functional_test": false
      },
      {
        "case_name": "Git Show with Special Characters in Directory Path",
        "purpose": "验证工具是否能处理包含特殊字符的目录路径并成功显示提交信息。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\special@#&()Dir",
          "commit_hash": "a5b2226638e1261d27b580631c4014916ac86bee"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0010008811950683594,
        "is_functional_test": true
      },
      {
        "case_name": "Git Show with Empty Commit Hash",
        "purpose": "测试当commit hash为空字符串时，工具是否抛出 ValueError 异常。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": ""
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.00099945068359375,
        "is_functional_test": false
      },
      {
        "case_name": "Git Show on Network or Shared Directory",
        "purpose": "测试工具是否能在网络共享或受限访问的目录中显示提交信息。",
        "args": {
          "directory": "\\\\network\\shared\\path\\to\\repo",
          "commit_hash": "a5b2226638e1261d27b580631c4014916ac86bee"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0009999275207519531,
        "is_functional_test": false
      },
      {
        "case_name": "Git Show with Unicode Directory Path",
        "purpose": "测试工具是否支持使用包含 Unicode 字符的目录路径执行 git show。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\你好世界",
          "commit_hash": "a5b2226638e1261d27b580631c4014916ac86bee"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0015044212341308594,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 102
}