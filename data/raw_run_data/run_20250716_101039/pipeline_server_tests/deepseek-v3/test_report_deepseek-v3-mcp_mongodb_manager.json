{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "deepseek-v3-mcp_mongodb_manager",
  "server_path": "workspace/pipeline-output-servers/deepseek-v3/mcp_mongodb_manager/refined/server.py",
  "timestamp": "2025-07-16T10:17:13.076707",
  "tools": [
    {
      "name": "mcp_health_check",
      "description": "\n    Checks if the MongoDB server is reachable and responsive.\n\n    Returns:\n        A string indicating the health status of the MongoDB connection.\n    ",
      "args_schema": {
        "properties": {},
        "title": "mcp_health_checkArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_list_databases",
      "description": "\n    Lists all available databases in the MongoDB instance.\n\n    Returns:\n        A list of strings, where each string represents a database name.\n    ",
      "args_schema": {
        "properties": {},
        "title": "mcp_list_databasesArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_list_collections",
      "description": "\n    Lists all collections in a specified MongoDB database.\n\n    Args:\n        database_name: The name of the database to query.\n\n    Returns:\n        A list of strings, where each string represents a collection name in the specified database.\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          }
        },
        "required": [
          "database_name"
        ],
        "title": "mcp_list_collectionsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_insert_document",
      "description": "\n    Inserts a new document into a specified MongoDB collection.\n\n    Args:\n        database_name: The name of the database.\n        collection_name: The name of the collection.\n        document: The document to insert.\n\n    Returns:\n        A string indicating the success or failure of the insertion, including the inserted document's ID if successful.\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "document": {
            "title": "Document",
            "type": "object"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "document"
        ],
        "title": "mcp_insert_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_find_documents",
      "description": "\n    Queries documents in a specified MongoDB collection, with support for projection and result limiting.\n\n    Args:\n        database_name: The name of the database.\n        collection_name: The name of the collection.\n        query: The query criteria. Defaults to {} (all documents).\n        projection: The fields to include/exclude in the results. Defaults to None (all fields).\n        limit: The maximum number of documents to return. Defaults to 0 (no limit).\n\n    Returns:\n        A list of dictionaries, where each dictionary represents a matching document.\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Query"
          },
          "projection": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Projection"
          },
          "limit": {
            "default": 0,
            "title": "Limit",
            "type": "integer"
          }
        },
        "required": [
          "database_name",
          "collection_name"
        ],
        "title": "mcp_find_documentsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_update_document",
      "description": "\n    Updates documents in a specified MongoDB collection, supporting single or multiple updates.\n\n    Args:\n        database_name: The name of the database.\n        collection_name: The name of the collection.\n        query: The query criteria to select documents to update.\n        update: The update operations to apply.\n        multi: Whether to update multiple documents. Defaults to False.\n\n    Returns:\n        A string indicating the success or failure of the update, including the number of documents modified.\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "title": "Query",
            "type": "object"
          },
          "update": {
            "title": "Update",
            "type": "object"
          },
          "multi": {
            "default": false,
            "title": "Multi",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "query",
          "update"
        ],
        "title": "mcp_update_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_delete_document",
      "description": "\n    Deletes documents from a specified MongoDB collection, supporting single or batch deletion.\n\n    Args:\n        database_name: The name of the database.\n        collection_name: The name of the collection.\n        query: The query criteria to select documents to delete.\n        multi: Whether to delete multiple documents. Defaults to False.\n\n    Returns:\n        A string indicating the success or failure of the deletion, including the number of documents deleted.\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "title": "Query",
            "type": "object"
          },
          "multi": {
            "default": false,
            "title": "Multi",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "query"
        ],
        "title": "mcp_delete_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_drop_database",
      "description": "\n    Drops (deletes) an entire database.\n\n    Args:\n        database_name: The name of the database to drop.\n\n    Returns:\n        A string indicating whether the database was successfully dropped.\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          }
        },
        "required": [
          "database_name"
        ],
        "title": "mcp_drop_databaseArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_drop_collection",
      "description": "\n    Drops (deletes) a specific collection from a database.\n\n    Args:\n        database_name: The name of the database.\n        collection_name: The name of the collection to drop.\n\n    Returns:\n        A string indicating whether the collection was successfully dropped.\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          }
        },
        "required": [
          "database_name",
          "collection_name"
        ],
        "title": "mcp_drop_collectionArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "mcp_health_check": [
      {
        "case_name": "MongoDB连接健康检查成功",
        "purpose": "验证mcp_health_check工具在默认配置下是否能正确检测MongoDB服务器的健康状态。",
        "args": {},
        "response": {
          "result": "MongoDB connection is healthy"
        },
        "execution_time": 0.0020012855529785156,
        "is_functional_test": true
      },
      {
        "case_name": "MongoDB服务不可达时返回错误信息",
        "purpose": "测试当MongoDB服务未运行或网络不通时，工具是否能正确处理异常并返回错误信息。",
        "args": {},
        "response": {
          "result": "MongoDB connection is healthy"
        },
        "execution_time": 0.002514362335205078,
        "is_functional_test": false
      },
      {
        "case_name": "MongoDB连接超时处理",
        "purpose": "模拟连接超时场景，确保工具不会无限等待并能优雅地处理超时情况。",
        "args": {},
        "response": {
          "result": "MongoDB connection is healthy"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": false
      },
      {
        "case_name": "MongoDB认证失败时的安全响应",
        "purpose": "测试工具在MongoDB连接需要认证但未提供凭证时，是否拒绝非法访问并返回安全错误。",
        "args": {},
        "response": {
          "result": "MongoDB connection is healthy"
        },
        "execution_time": 0.0019998550415039062,
        "is_functional_test": false
      },
      {
        "case_name": "长时间运行后MongoDB连接稳定性检查",
        "purpose": "验证工具在系统长时间运行后仍能保持对MongoDB健康状态的准确检测。",
        "args": {},
        "response": {
          "result": "MongoDB connection is healthy"
        },
        "execution_time": 0.002505064010620117,
        "is_functional_test": true
      },
      {
        "case_name": "高并发请求下的健康检查稳定性",
        "purpose": "测试工具在高并发调用情况下是否仍能稳定响应并正确返回MongoDB健康状态。",
        "args": {},
        "response": {
          "result": "MongoDB connection is healthy"
        },
        "execution_time": 0.0025148391723632812,
        "is_functional_test": true
      },
      {
        "case_name": "MongoDB服务重启后的连接恢复能力",
        "purpose": "验证MongoDB服务短暂中断并恢复后，工具是否能够重新建立连接并正确报告健康状态。",
        "args": {},
        "response": {
          "result": "MongoDB connection is healthy"
        },
        "execution_time": 0.002000093460083008,
        "is_functional_test": true
      },
      {
        "case_name": "极端网络延迟下的健康检查行为",
        "purpose": "模拟极端网络延迟环境，测试工具是否能够正确识别连接状态并避免误判。",
        "args": {},
        "response": {
          "result": "MongoDB connection is healthy"
        },
        "execution_time": 0.001999378204345703,
        "is_functional_test": false
      }
    ],
    "mcp_list_databases": [
      {
        "case_name": "成功列出所有数据库",
        "purpose": "验证mcp_list_databases工具在MongoDB连接正常的情况下是否能正确列出所有可用数据库。",
        "args": {},
        "response": [
          "admin",
          "config",
          "db@#_测试",
          "does_not_exist_db",
          "invalid_database",
          "large_db",
          "local",
          "mcp-test",
          "new_db",
          "offline_db",
          "restricted_db",
          "users",
          "智能软件工"
        ],
        "execution_time": 0.004288434982299805,
        "is_functional_test": true
      },
      {
        "case_name": "MongoDB服务不可达时返回错误信息",
        "purpose": "测试当MongoDB服务未运行或网络不通时，mcp_list_databases是否能正确处理异常并返回错误信息。",
        "args": {},
        "response": [
          "admin",
          "config",
          "db@#_测试",
          "does_not_exist_db",
          "invalid_database",
          "large_db",
          "local",
          "mcp-test",
          "new_db",
          "offline_db",
          "restricted_db",
          "users",
          "智能软件工"
        ],
        "execution_time": 0.0029993057250976562,
        "is_functional_test": false
      },
      {
        "case_name": "MongoDB连接超时处理",
        "purpose": "模拟连接超时场景，确保mcp_list_databases不会无限等待并能优雅地处理超时情况。",
        "args": {},
        "response": [
          "admin",
          "config",
          "db@#_测试",
          "does_not_exist_db",
          "invalid_database",
          "large_db",
          "local",
          "mcp-test",
          "new_db",
          "offline_db",
          "restricted_db",
          "users",
          "智能软件工"
        ],
        "execution_time": 0.0030012130737304688,
        "is_functional_test": false
      },
      {
        "case_name": "MongoDB认证失败时的安全响应",
        "purpose": "测试mcp_list_databases在MongoDB连接需要认证但未提供凭证时，是否拒绝非法访问并返回安全错误。",
        "args": {},
        "response": [
          "admin",
          "config",
          "db@#_测试",
          "does_not_exist_db",
          "invalid_database",
          "large_db",
          "local",
          "mcp-test",
          "new_db",
          "offline_db",
          "restricted_db",
          "users",
          "智能软件工"
        ],
        "execution_time": 0.0030558109283447266,
        "is_functional_test": false
      },
      {
        "case_name": "长时间运行后数据库列表获取稳定性",
        "purpose": "验证工具在系统长时间运行后仍能准确获取MongoDB中的数据库列表。",
        "args": {},
        "response": [
          "admin",
          "config",
          "db@#_测试",
          "does_not_exist_db",
          "invalid_database",
          "large_db",
          "local",
          "mcp-test",
          "new_db",
          "offline_db",
          "restricted_db",
          "users",
          "智能软件工"
        ],
        "execution_time": 0.0030040740966796875,
        "is_functional_test": true
      },
      {
        "case_name": "高并发请求下数据库列表获取的稳定性",
        "purpose": "测试mcp_list_databases在高并发调用情况下是否仍能稳定响应并正确返回数据库列表。",
        "args": {},
        "response": [
          "admin",
          "config",
          "db@#_测试",
          "does_not_exist_db",
          "invalid_database",
          "large_db",
          "local",
          "mcp-test",
          "new_db",
          "offline_db",
          "restricted_db",
          "users",
          "智能软件工"
        ],
        "execution_time": 0.002999544143676758,
        "is_functional_test": true
      },
      {
        "case_name": "MongoDB服务重启后的连接恢复能力",
        "purpose": "验证MongoDB服务短暂中断并恢复后，工具是否能够重新建立连接并正确获取数据库列表。",
        "args": {},
        "response": [
          "admin",
          "config",
          "db@#_测试",
          "does_not_exist_db",
          "invalid_database",
          "large_db",
          "local",
          "mcp-test",
          "new_db",
          "offline_db",
          "restricted_db",
          "users",
          "智能软件工"
        ],
        "execution_time": 0.0030002593994140625,
        "is_functional_test": true
      },
      {
        "case_name": "极端网络延迟下的数据库列表获取行为",
        "purpose": "模拟极端网络延迟环境，测试mcp_list_databases是否能够正确识别连接状态并避免误判。",
        "args": {},
        "response": [
          "admin",
          "config",
          "db@#_测试",
          "does_not_exist_db",
          "invalid_database",
          "large_db",
          "local",
          "mcp-test",
          "new_db",
          "offline_db",
          "restricted_db",
          "users",
          "智能软件工"
        ],
        "execution_time": 0.003117084503173828,
        "is_functional_test": false
      }
    ],
    "mcp_list_collections": [
      {
        "case_name": "成功列出指定数据库中的集合",
        "purpose": "验证mcp_list_collections工具在MongoDB连接正常且指定有效数据库时是否能正确列出所有集合。",
        "args": {
          "database_name": "mcp-test"
        },
        "response": [
          "users",
          "user_profiles",
          "用户信息",
          "test"
        ],
        "execution_time": 0.00474238395690918,
        "is_functional_test": true
      },
      {
        "case_name": "尝试访问不存在的数据库时返回空列表",
        "purpose": "测试当提供的数据库名称不存在时，mcp_list_collections是否能正确处理并返回空列表。",
        "args": {
          "database_name": "does_not_exist_db"
        },
        "response": [
          "users",
          "new_collection",
          "test_collection"
        ],
        "execution_time": 0.002999544143676758,
        "is_functional_test": true
      },
      {
        "case_name": "MongoDB服务不可达时返回错误信息",
        "purpose": "测试当MongoDB服务未运行或网络不通时，mcp_list_collections是否能正确处理异常并返回错误信息。",
        "args": {
          "database_name": "mcp-test"
        },
        "response": [
          "users",
          "user_profiles",
          "用户信息",
          "test"
        ],
        "execution_time": 0.008517742156982422,
        "is_functional_test": false
      },
      {
        "case_name": "MongoDB连接超时处理",
        "purpose": "模拟连接超时场景，确保mcp_list_collections不会无限等待并能优雅地处理超时情况。",
        "args": {
          "database_name": "mcp-test"
        },
        "response": [
          "users",
          "user_profiles",
          "用户信息",
          "test"
        ],
        "execution_time": 0.00810861587524414,
        "is_functional_test": false
      },
      {
        "case_name": "MongoDB认证失败时的安全响应",
        "purpose": "测试mcp_list_collections在MongoDB连接需要认证但未提供凭证时，是否拒绝非法访问并返回安全错误。",
        "args": {
          "database_name": "mcp-test"
        },
        "response": [
          "users",
          "user_profiles",
          "用户信息",
          "test"
        ],
        "execution_time": 0.004011869430541992,
        "is_functional_test": false
      },
      {
        "case_name": "长时间运行后集合列表获取稳定性",
        "purpose": "验证工具在系统长时间运行后仍能准确获取MongoDB中指定数据库的集合列表。",
        "args": {
          "database_name": "mcp-test"
        },
        "response": [
          "users",
          "user_profiles",
          "用户信息",
          "test"
        ],
        "execution_time": 0.0030078887939453125,
        "is_functional_test": true
      },
      {
        "case_name": "高并发请求下集合列表获取的稳定性",
        "purpose": "测试mcp_list_collections在高并发调用情况下是否仍能稳定响应并正确返回集合列表。",
        "args": {
          "database_name": "mcp-test"
        },
        "response": [
          "users",
          "user_profiles",
          "用户信息",
          "test"
        ],
        "execution_time": 0.004999876022338867,
        "is_functional_test": true
      },
      {
        "case_name": "使用特殊字符命名的数据库名称处理",
        "purpose": "验证工具能否正确处理包含特殊字符的数据库名称，并返回对应的集合列表。",
        "args": {
          "database_name": "db@#_测试"
        },
        "response": [
          "test_collection",
          "special_chars_collection",
          "new_collection",
          "users"
        ],
        "execution_time": 0.005021810531616211,
        "is_functional_test": true
      }
    ],
    "mcp_insert_document": [
      {
        "case_name": "成功插入文档到指定集合",
        "purpose": "验证mcp_insert_document工具在提供有效数据库名、集合名和文档时是否能正确插入文档并返回ID。",
        "args": {
          "database_name": "mcp-test",
          "collection_name": "test_collection",
          "document": {
            "name": "测试文档",
            "content": "这是一个用于测试的文档内容"
          }
        },
        "response": {
          "result": "Document inserted successfully with ID: 68770c0823c3d7d1c5a358ed"
        },
        "execution_time": 0.018543720245361328,
        "is_functional_test": true
      },
      {
        "case_name": "插入文档时数据库不存在",
        "purpose": "测试当目标数据库不存在时，mcp_insert_document是否能够自动创建数据库并成功插入文档。",
        "args": {
          "database_name": "does_not_exist_db",
          "collection_name": "new_collection",
          "document": {
            "title": "新文档",
            "data": "这是新数据库中的文档"
          }
        },
        "response": {
          "result": "Document inserted successfully with ID: 68770c0823c3d7d1c5a358ee"
        },
        "execution_time": 0.0060007572174072266,
        "is_functional_test": true
      },
      {
        "case_name": "插入文档时集合名称包含特殊字符",
        "purpose": "验证mcp_insert_document是否能处理集合名中包含特殊字符的情况（如下划线、中文等）。",
        "args": {
          "database_name": "mcp-test",
          "collection_name": "集合_测试",
          "document": {
            "字段1": "值1",
            "字段2": "值2"
          }
        },
        "response": {
          "result": "Document inserted successfully with ID: 68770c0823c3d7d1c5a358ef"
        },
        "execution_time": 0.014887809753417969,
        "is_functional_test": true
      },
      {
        "case_name": "尝试插入空文档对象",
        "purpose": "测试当提供的document参数为空对象时，工具是否能正确处理并返回错误信息。",
        "args": {
          "database_name": "mcp-test",
          "collection_name": "test_collection",
          "document": {}
        },
        "response": {
          "result": "Document inserted successfully with ID: 68770c0823c3d7d1c5a358f0"
        },
        "execution_time": 0.0020008087158203125,
        "is_functional_test": false
      },
      {
        "case_name": "使用无效数据库名称插入文档",
        "purpose": "测试当提供非法或不支持的数据库名称时，工具是否能拒绝操作并返回错误。",
        "args": {
          "database_name": "invalid/database*name",
          "collection_name": "test_collection",
          "document": {
            "name": "非法数据库名测试"
          }
        },
        "response": {
          "result": "Error inserting document: database names cannot contain the character '/'"
        },
        "execution_time": 0.003528594970703125,
        "is_functional_test": false
      },
      {
        "case_name": "插入文档时MongoDB服务不可达",
        "purpose": "模拟MongoDB服务未运行或网络不通的情况下，测试工具是否能正确捕获异常并返回错误信息。",
        "args": {
          "database_name": "offline_db",
          "collection_name": "test_collection",
          "document": {
            "name": "离线插入测试"
          }
        },
        "response": {
          "result": "Document inserted successfully with ID: 68770c0823c3d7d1c5a358f1"
        },
        "execution_time": 0.015013933181762695,
        "is_functional_test": false
      },
      {
        "case_name": "安全测试：无权限数据库插入尝试",
        "purpose": "测试用户对受限数据库进行插入操作时，工具是否能正确阻止非法访问并返回权限错误。",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "secure_collection",
          "document": {
            "secret_key": "confidential_data"
          }
        },
        "response": {
          "result": "Document inserted successfully with ID: 68770c0823c3d7d1c5a358f2"
        },
        "execution_time": 0.0050389766693115234,
        "is_functional_test": false
      }
    ],
    "mcp_find_documents": [
      {
        "case_name": "基本查询所有文档",
        "purpose": "验证mcp_find_documents在提供有效数据库和集合名称时，能够正确返回全部文档。",
        "args": {
          "database_name": "mcp-test",
          "collection_name": "test_collection"
        },
        "response": [
          "{\n  \"_id\": \"68770c0823c3d7d1c5a358ed\",\n  \"name\": \"测试文档\",\n  \"content\": \"这是一个用于测试的文档内容\"\n}",
          "{\n  \"_id\": \"68770c0823c3d7d1c5a358f0\"\n}"
        ],
        "execution_time": 0.007000923156738281,
        "is_functional_test": true
      },
      {
        "case_name": "带查询条件的文档检索",
        "purpose": "测试工具是否能根据指定查询条件正确筛选文档。",
        "args": {
          "database_name": "mcp-test",
          "collection_name": "test_collection",
          "query": {
            "status": "active"
          }
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.004176139831542969,
        "is_functional_test": true
      },
      {
        "case_name": "使用投影限制返回字段",
        "purpose": "验证工具是否支持通过projection参数控制返回的字段。",
        "args": {
          "database_name": "mcp-test",
          "collection_name": "test_collection",
          "projection": {
            "name": 1,
            "_id": 0
          }
        },
        "response": [
          "{\n  \"name\": \"测试文档\"\n}",
          "{}"
        ],
        "execution_time": 0.003000020980834961,
        "is_functional_test": true
      },
      {
        "case_name": "限制返回文档数量",
        "purpose": "测试limit参数是否能正确限制返回的文档数量。",
        "args": {
          "database_name": "mcp-test",
          "collection_name": "test_collection",
          "limit": 5
        },
        "response": [
          "{\n  \"_id\": \"68770c0823c3d7d1c5a358ed\",\n  \"name\": \"测试文档\",\n  \"content\": \"这是一个用于测试的文档内容\"\n}",
          "{\n  \"_id\": \"68770c0823c3d7d1c5a358f0\"\n}"
        ],
        "execution_time": 0.002717256546020508,
        "is_functional_test": true
      },
      {
        "case_name": "组合查询、投影与限制",
        "purpose": "验证工具在同时使用query、projection和limit参数时是否能正常工作。",
        "args": {
          "database_name": "mcp-test",
          "collection_name": "test_collection",
          "query": {
            "category": "technology"
          },
          "projection": {
            "title": 1,
            "_id": 0
          },
          "limit": 3
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": true
      },
      {
        "case_name": "非法数据库名的安全访问控制",
        "purpose": "测试当用户提供潜在危险的数据库名称（如包含特殊字符）时，工具是否进行安全处理。",
        "args": {
          "database_name": "db@#_测试",
          "collection_name": "test_collection"
        },
        "response": {
          "result": "{\n  \"_id\": \"68750c3c7f9826ac764c5a77\",\n  \"key\": \"value\"\n}"
        },
        "execution_time": 0.0050127506256103516,
        "is_functional_test": false
      },
      {
        "case_name": "无效集合名的错误处理",
        "purpose": "验证工具在提供不存在或无效的集合名称时是否能正确处理异常。",
        "args": {
          "database_name": "mcp-test",
          "collection_name": "invalid_collection"
        },
        "response": {
          "result": "{\n  \"error\": \"Collection 'invalid_collection' does not exist in database 'mcp-test'\"\n}"
        },
        "execution_time": 0.003003358840942383,
        "is_functional_test": false
      },
      {
        "case_name": "查询条件格式错误的处理",
        "purpose": "测试工具在提供非对象类型的查询条件时是否能正确抛出错误或拒绝执行。",
        "args": {
          "database_name": "mcp-test",
          "collection_name": "test_collection",
          "query": "malformed_query_string"
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_find_documents: 1 validation error for mcp_find_documentsArguments\nquery\n  Input should be a valid dictionary [type=dict_type, input_value='malformed_query_string', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/dict_type"
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": false
      }
    ],
    "mcp_update_document": [
      {
        "case_name": "基本单文档更新测试",
        "purpose": "验证工具在正常参数下能否成功更新单个文档，并返回正确修改数量。",
        "args": {
          "database_name": "mcp-test",
          "collection_name": "test_collection",
          "query": {
            "name": "Alice"
          },
          "update": {
            "$set": {
              "age": 30
            }
          },
          "multi": false
        },
        "response": {
          "result": "Successfully updated 0 document(s)"
        },
        "execution_time": 0.005873680114746094,
        "is_functional_test": true
      },
      {
        "case_name": "多文档更新测试",
        "purpose": "验证当multi参数为True时，工具是否能正确更新多个匹配文档。",
        "args": {
          "database_name": "mcp-test",
          "collection_name": "test_collection",
          "query": {
            "status": "pending"
          },
          "update": {
            "$set": {
              "status": "processed"
            }
          },
          "multi": true
        },
        "response": {
          "result": "Successfully updated 0 document(s)"
        },
        "execution_time": 0.004998683929443359,
        "is_functional_test": true
      },
      {
        "case_name": "数据库名称为空导致错误",
        "purpose": "测试当数据库名称为空字符串时，工具是否能正确识别并返回错误信息。",
        "args": {
          "database_name": "",
          "collection_name": "test_collection",
          "query": {
            "name": "Alice"
          },
          "update": {
            "$set": {
              "age": 30
            }
          },
          "multi": false
        },
        "response": {
          "result": "Error updating document: database name cannot be the empty string"
        },
        "execution_time": 0.002532482147216797,
        "is_functional_test": false
      },
      {
        "case_name": "非法字符的数据库名处理",
        "purpose": "测试包含特殊字符的数据库名称是否被正确处理或拒绝，防止注入攻击。",
        "args": {
          "database_name": "db; DROP DATABASE",
          "collection_name": "test_collection",
          "query": {
            "name": "Alice"
          },
          "update": {
            "$set": {
              "age": 30
            }
          },
          "multi": false
        },
        "response": {
          "result": "Error updating document: database names cannot contain the character ' '"
        },
        "execution_time": 0.003008127212524414,
        "is_functional_test": false
      },
      {
        "case_name": "不存在的集合更新行为",
        "purpose": "验证工具在尝试更新一个不存在的集合时的行为是否符合预期（如自动创建集合或返回错误）。",
        "args": {
          "database_name": "mcp-test",
          "collection_name": "nonexistent_collection",
          "query": {
            "key": "value"
          },
          "update": {
            "$set": {
              "new_key": "new_value"
            }
          },
          "multi": false
        },
        "response": {
          "result": "Successfully updated 0 document(s)"
        },
        "execution_time": 0.0029985904693603516,
        "is_functional_test": true
      },
      {
        "case_name": "空查询条件更新测试",
        "purpose": "测试空查询条件是否会触发对整个集合的更新（取决于MongoDB驱动行为）。",
        "args": {
          "database_name": "mcp-test",
          "collection_name": "test_collection",
          "query": {},
          "update": {
            "$inc": {
              "counter": 1
            }
          },
          "multi": true
        },
        "response": {
          "result": "Successfully updated 2 document(s)"
        },
        "execution_time": 0.0032362937927246094,
        "is_functional_test": true
      },
      {
        "case_name": "非法JSON结构更新内容测试",
        "purpose": "测试非法JSON格式的update参数是否会被工具正确拒绝，防止注入或解析错误。",
        "args": {
          "database_name": "mcp-test",
          "collection_name": "test_collection",
          "query": {
            "name": "Alice"
          },
          "update": {
            "$set": "malformed_update_data"
          },
          "multi": false
        },
        "response": {
          "result": "Error updating document: Modifiers operate on fields but we found type string instead. For example: {$mod: {<field>: ...}} not {$set: \"malformed_update_data\"}, full error: {'index': 0, 'code': 9, 'errmsg': 'Modifiers operate on fields but we found type string instead. For example: {$mod: {<field>: ...}} not {$set: \"malformed_update_data\"}'}"
        },
        "execution_time": 0.008986234664916992,
        "is_functional_test": false
      }
    ],
    "mcp_delete_document": [
      {
        "case_name": "成功删除单个文档",
        "purpose": "验证在指定查询条件下，工具能够正确删除一个匹配的文档。",
        "args": {
          "database_name": "mcp-test",
          "collection_name": "test_collection",
          "query": {
            "_id": 1
          },
          "multi": false
        },
        "response": {
          "result": "Successfully deleted 0 document(s)"
        },
        "execution_time": 0.00400090217590332,
        "is_functional_test": true
      },
      {
        "case_name": "成功批量删除多个文档",
        "purpose": "验证当multi参数为True时，工具能够正确删除所有匹配的文档。",
        "args": {
          "database_name": "mcp-test",
          "collection_name": "test_collection",
          "query": {
            "status": "inactive"
          },
          "multi": true
        },
        "response": {
          "result": "Successfully deleted 0 document(s)"
        },
        "execution_time": 0.0025053024291992188,
        "is_functional_test": true
      },
      {
        "case_name": "使用默认multi参数删除单个文档",
        "purpose": "验证当不显式设置multi参数时，默认行为是仅删除一个文档。",
        "args": {
          "database_name": "mcp-test",
          "collection_name": "test_collection",
          "query": {
            "name": "test_doc"
          }
        },
        "response": {
          "result": "Successfully deleted 0 document(s)"
        },
        "execution_time": 0.0035097599029541016,
        "is_functional_test": true
      },
      {
        "case_name": "尝试删除不存在数据库中的文档",
        "purpose": "测试工具在指定数据库不存在时是否能正确处理错误并返回提示信息。",
        "args": {
          "database_name": "nonexistent_db",
          "collection_name": "test_collection",
          "query": {
            "_id": 1
          }
        },
        "response": {
          "result": "Successfully deleted 0 document(s)"
        },
        "execution_time": 0.0030150413513183594,
        "is_functional_test": false
      },
      {
        "case_name": "尝试删除不存在集合中的文档",
        "purpose": "测试工具在指定集合不存在时是否能正确处理错误并返回提示信息。",
        "args": {
          "database_name": "mcp-test",
          "collection_name": "nonexistent_collection",
          "query": {
            "_id": 1
          }
        },
        "response": {
          "result": "Successfully deleted 0 document(s)"
        },
        "execution_time": 0.0025048255920410156,
        "is_functional_test": false
      },
      {
        "case_name": "使用特殊字符作为查询条件进行删除",
        "purpose": "验证工具能否处理包含特殊字符的查询条件并安全执行删除操作。",
        "args": {
          "database_name": "mcp-test",
          "collection_name": "test_collection",
          "query": {
            "tag": "special@#_测试"
          },
          "multi": true
        },
        "response": {
          "result": "Successfully deleted 0 document(s)"
        },
        "execution_time": 0.0026679039001464844,
        "is_functional_test": true
      },
      {
        "case_name": "删除空查询条件匹配的所有文档",
        "purpose": "验证当查询条件为空对象时，工具是否支持删除整个集合的数据。",
        "args": {
          "database_name": "mcp-test",
          "collection_name": "test_collection",
          "query": {},
          "multi": true
        },
        "response": {
          "result": "Successfully deleted 2 document(s)"
        },
        "execution_time": 0.0030040740966796875,
        "is_functional_test": true
      },
      {
        "case_name": "尝试使用无效查询格式进行删除",
        "purpose": "测试工具在传入非法查询结构时是否能正确拒绝请求并返回错误信息。",
        "args": {
          "database_name": "mcp-test",
          "collection_name": "test_collection",
          "query": "invalid_query_format"
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_delete_document: 1 validation error for mcp_delete_documentArguments\nquery\n  Input should be a valid dictionary [type=dict_type, input_value='invalid_query_format', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/dict_type"
        },
        "execution_time": 0.0010001659393310547,
        "is_functional_test": false
      }
    ],
    "mcp_drop_collection": [
      {
        "case_name": "成功删除指定集合",
        "purpose": "验证mcp_drop_collection工具在数据库和集合存在的情况下能否正确删除集合。",
        "args": {
          "database_name": "mcp-test",
          "collection_name": "test_collection"
        },
        "response": {
          "result": "Collection 'test_collection' has been dropped successfully from database 'mcp-test'"
        },
        "execution_time": 0.0040166378021240234,
        "is_functional_test": true
      },
      {
        "case_name": "尝试删除不存在的集合",
        "purpose": "测试当指定的集合不存在时，工具是否能优雅处理并返回错误信息。",
        "args": {
          "database_name": "mcp-test",
          "collection_name": "nonexistent_collection"
        },
        "response": {
          "result": "Collection 'nonexistent_collection' does not exist in database 'mcp-test'"
        },
        "execution_time": 0.003509998321533203,
        "is_functional_test": false
      },
      {
        "case_name": "使用空数据库名称调用工具",
        "purpose": "验证工具是否能够检测并拒绝空数据库名称输入。",
        "args": {
          "database_name": "",
          "collection_name": "test_collection"
        },
        "response": {
          "result": "Database '' does not exist"
        },
        "execution_time": 0.00400090217590332,
        "is_functional_test": false
      },
      {
        "case_name": "使用空集合名称调用工具",
        "purpose": "验证工具是否能够检测并拒绝空集合名称输入。",
        "args": {
          "database_name": "mcp-test",
          "collection_name": ""
        },
        "response": {
          "result": "Collection '' does not exist in database 'mcp-test'"
        },
        "execution_time": 0.0034074783325195312,
        "is_functional_test": false
      },
      {
        "case_name": "删除包含特殊字符的集合",
        "purpose": "测试工具是否支持删除名称中包含特殊字符的集合。",
        "args": {
          "database_name": "db@#_测试",
          "collection_name": "collection#123!@_智能"
        },
        "response": {
          "result": "Collection 'collection#123!@_智能' does not exist in database 'db@#_测试'"
        },
        "execution_time": 0.004005908966064453,
        "is_functional_test": true
      },
      {
        "case_name": "尝试删除受限制数据库中的集合",
        "purpose": "验证工具对受限或只读数据库中的集合删除操作是否安全处理。",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "locked_collection"
        },
        "response": {
          "result": "Collection 'locked_collection' does not exist in database 'restricted_db'"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": false
      },
      {
        "case_name": "在MongoDB服务不可达时尝试删除集合",
        "purpose": "模拟MongoDB服务未运行或连接失败情况下，测试工具是否能正确处理异常并返回错误信息。",
        "args": {
          "database_name": "mcp-test",
          "collection_name": "test_collection"
        },
        "response": {
          "result": "Collection 'test_collection' does not exist in database 'mcp-test'"
        },
        "execution_time": 0.0030143260955810547,
        "is_functional_test": false
      },
      {
        "case_name": "删除集合时遭遇连接超时",
        "purpose": "模拟网络延迟或连接超时场景，确保工具不会无限等待并能正确处理超时情况。",
        "args": {
          "database_name": "mcp-test",
          "collection_name": "test_collection"
        },
        "response": {
          "result": "Collection 'test_collection' does not exist in database 'mcp-test'"
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": false
      }
    ],
    "mcp_drop_database": [
      {
        "case_name": "成功删除存在的数据库",
        "purpose": "验证mcp_drop_database工具能够正确删除一个已存在的数据库。",
        "args": {
          "database_name": "new_db"
        },
        "response": {
          "result": "Database 'new_db' has been dropped successfully"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": true
      },
      {
        "case_name": "尝试删除不存在的数据库",
        "purpose": "测试当指定要删除的数据库不存在时，工具是否能优雅处理并返回错误信息。",
        "args": {
          "database_name": "does_not_exist_db"
        },
        "response": {
          "result": "Database 'does_not_exist_db' has been dropped successfully"
        },
        "execution_time": 0.003164529800415039,
        "is_functional_test": false
      },
      {
        "case_name": "尝试删除保留系统数据库(admin)",
        "purpose": "测试工具是否阻止用户删除MongoDB中的系统关键数据库如admin。",
        "args": {
          "database_name": "admin"
        },
        "response": {
          "result": "Error dropping database: Dropping the 'admin' database is prohibited., full error: {'ok': 0.0, 'errmsg': \"Dropping the 'admin' database is prohibited.\", 'code': 20, 'codeName': 'IllegalOperation'}"
        },
        "execution_time": 0.004000663757324219,
        "is_functional_test": false
      },
      {
        "case_name": "尝试删除带有特殊字符的数据库名",
        "purpose": "验证工具是否能够处理包含特殊字符的数据库名称，并正确删除对应的数据库。",
        "args": {
          "database_name": "db@#_测试"
        },
        "response": {
          "result": "Database 'db@#_测试' has been dropped successfully"
        },
        "execution_time": 0.0030002593994140625,
        "is_functional_test": true
      },
      {
        "case_name": "使用空字符串作为数据库名进行删除",
        "purpose": "测试当提供空字符串作为数据库名称时，工具是否能正确识别参数错误并返回提示。",
        "args": {
          "database_name": ""
        },
        "response": {
          "result": "Database '' does not exist"
        },
        "execution_time": 0.002078533172607422,
        "is_functional_test": false
      },
      {
        "case_name": "尝试删除具有限制访问权限的数据库",
        "purpose": "测试工具在没有足够权限的情况下尝试删除受限制数据库时的安全响应。",
        "args": {
          "database_name": "restricted_db"
        },
        "response": {
          "result": "Database 'restricted_db' has been dropped successfully"
        },
        "execution_time": 0.002000570297241211,
        "is_functional_test": false
      },
      {
        "case_name": "删除大容量数据库以验证性能表现",
        "purpose": "测试工具删除一个数据量较大的数据库时的性能和稳定性。",
        "args": {
          "database_name": "large_db"
        },
        "response": {
          "result": "Database 'large_db' has been dropped successfully"
        },
        "execution_time": 0.0029985904693603516,
        "is_functional_test": true
      },
      {
        "case_name": "尝试删除脱机状态下的数据库",
        "purpose": "测试工具在目标数据库处于脱机状态时是否能正确识别并返回错误信息。",
        "args": {
          "database_name": "offline_db"
        },
        "response": {
          "result": "Database 'offline_db' has been dropped successfully"
        },
        "execution_time": 0.0030562877655029297,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 70
}