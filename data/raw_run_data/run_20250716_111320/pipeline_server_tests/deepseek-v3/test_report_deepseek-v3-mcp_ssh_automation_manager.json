{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "deepseek-v3-mcp_ssh_automation_manager",
  "server_path": "workspace/pipeline-output-servers/deepseek-v3/mcp_ssh_automation_manager/refined/server.py",
  "timestamp": "2025-07-16T11:21:53.904759",
  "tools": [
    {
      "name": "connect",
      "description": "\n    Establishes an SSH connection to a remote server.\n\n    Args:\n        hostname: The remote server's hostname or IP address.\n        username: The username for authentication.\n        password: The password for authentication (required if private_key is not provided).\n        private_key: The path to the private key file for authentication (required if password is not provided).\n        port: The SSH port (default: 22).\n\n    Returns:\n        A unique session_id for the active SSH session.\n\n    Raises:\n        ValueError: If neither password nor private_key is provided.\n        paramiko.AuthenticationException: If the authentication fails.\n        paramiko.SSHException: If the SSH connection fails for other reasons.\n    ",
      "args_schema": {
        "properties": {
          "hostname": {
            "default": "10.70.5.21",
            "title": "Hostname",
            "type": "string"
          },
          "username": {
            "default": "pengbocheng",
            "title": "Username",
            "type": "string"
          },
          "password": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": "123456",
            "title": "Password"
          },
          "private_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Private Key"
          },
          "port": {
            "default": 26002,
            "title": "Port",
            "type": "integer"
          }
        },
        "title": "connectArguments",
        "type": "object"
      }
    },
    {
      "name": "disconnect",
      "description": "\n    Disconnects the specified SSH session and releases resources.\n\n    Args:\n        session_id: The unique identifier of the SSH session to disconnect.\n\n    Returns:\n        A status message indicating the session termination.\n\n    Raises:\n        KeyError: If the session_id does not exist.\n    ",
      "args_schema": {
        "properties": {
          "session_id": {
            "title": "Session Id",
            "type": "string"
          }
        },
        "required": [
          "session_id"
        ],
        "title": "disconnectArguments",
        "type": "object"
      }
    },
    {
      "name": "list_sessions",
      "description": "\n    Lists all currently active SSH sessions.\n\n    Returns:\n        A list of dictionaries, each containing session_id, hostname, username, and status.\n    ",
      "args_schema": {
        "properties": {},
        "title": "list_sessionsArguments",
        "type": "object"
      }
    },
    {
      "name": "execute",
      "description": "\n    Executes a command on the specified SSH session.\n\n    Args:\n        session_id: The unique identifier of the SSH session.\n        command: The command to execute.\n        stdin: Standard input to pass to the command (default: None).\n        timeout: Maximum execution time in seconds (default: None for no timeout).\n\n    Returns:\n        A dictionary containing stdout, stderr, and exit_status.\n\n    Raises:\n        KeyError: If the session_id does not exist.\n        paramiko.SSHException: If the command execution fails.\n    ",
      "args_schema": {
        "properties": {
          "session_id": {
            "title": "Session Id",
            "type": "string"
          },
          "command": {
            "title": "Command",
            "type": "string"
          },
          "stdin": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Stdin"
          },
          "timeout": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Timeout"
          }
        },
        "required": [
          "session_id",
          "command"
        ],
        "title": "executeArguments",
        "type": "object"
      }
    },
    {
      "name": "upload",
      "description": "\n    Uploads a local file to a specified path on the remote SSH server.\n\n    Args:\n        session_id: The unique identifier of the SSH session.\n        local_path: The path to the local file.\n        remote_path: The destination path on the remote server.\n\n    Returns:\n        A status message indicating the upload result.\n\n    Raises:\n        KeyError: If the session_id does not exist.\n        FileNotFoundError: If the local file doesn't exist.\n        paramiko.SSHException: If the file upload fails.\n    ",
      "args_schema": {
        "properties": {
          "session_id": {
            "title": "Session Id",
            "type": "string"
          },
          "local_path": {
            "title": "Local Path",
            "type": "string"
          },
          "remote_path": {
            "title": "Remote Path",
            "type": "string"
          }
        },
        "required": [
          "session_id",
          "local_path",
          "remote_path"
        ],
        "title": "uploadArguments",
        "type": "object"
      }
    },
    {
      "name": "download",
      "description": "\n    Downloads a file from the remote SSH server to a specified local path.\n\n    Args:\n        session_id: The unique identifier of the SSH session.\n        remote_path: The path to the file on the remote server.\n        local_path: The destination path on the local machine.\n\n    Returns:\n        A status message indicating the download result.\n\n    Raises:\n        KeyError: If the session_id does not exist.\n        paramiko.SSHException: If the file download fails.\n    ",
      "args_schema": {
        "properties": {
          "session_id": {
            "title": "Session Id",
            "type": "string"
          },
          "remote_path": {
            "title": "Remote Path",
            "type": "string"
          },
          "local_path": {
            "title": "Local Path",
            "type": "string"
          }
        },
        "required": [
          "session_id",
          "remote_path",
          "local_path"
        ],
        "title": "downloadArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "connect": [
      {
        "case_name": "成功建立SSH连接使用默认参数",
        "purpose": "验证工具可以使用默认参数成功建立SSH连接",
        "args": {
          "hostname": "10.70.5.21",
          "username": "pengbocheng",
          "password": "123456",
          "port": 26002
        },
        "response": {
          "result": "session_1"
        },
        "execution_time": 0.2575235366821289,
        "is_functional_test": true
      },
      {
        "case_name": "使用私钥而非密码进行认证",
        "purpose": "验证工具支持通过私钥文件进行SSH连接",
        "args": {
          "hostname": "10.70.5.21",
          "username": "pengbocheng",
          "private_key": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_private_key.pem",
          "port": 26002
        },
        "response": {
          "error": "ToolException: Error executing tool connect: SSH connection failed: Private key file not found: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_private_key.pem"
        },
        "execution_time": 0.0035047531127929688,
        "is_functional_test": true
      },
      {
        "case_name": "同时提供密码和私钥不引发错误",
        "purpose": "验证当同时提供密码和私钥时，工具能正常接受并优先使用其中一个（取决于实现）",
        "args": {
          "hostname": "10.70.5.21",
          "username": "pengbocheng",
          "password": "123456",
          "private_key": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_private_key.pem",
          "port": 26002
        },
        "response": {
          "error": "ToolException: Error executing tool connect: SSH connection failed: Private key file not found: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_private_key.pem"
        },
        "execution_time": 0.007015228271484375,
        "is_functional_test": true
      },
      {
        "case_name": "缺少密码和私钥导致认证失败",
        "purpose": "验证当既不提供密码也不提供私钥时抛出ValueError异常",
        "args": {
          "hostname": "10.70.5.21",
          "username": "pengbocheng",
          "password": null,
          "private_key": null,
          "port": 26002
        },
        "response": {
          "error": "ToolException: Error executing tool connect: Either password or private_key must be provided."
        },
        "execution_time": 0.005254983901977539,
        "is_functional_test": false
      },
      {
        "case_name": "无效主机名导致连接失败",
        "purpose": "验证工具在提供无效主机名时抛出SSHException",
        "args": {
          "hostname": "invalid.hostname.example",
          "username": "pengbocheng",
          "password": "123456",
          "port": 26002
        },
        "response": {
          "error": "ToolException: Error executing tool connect: SSH connection failed: [Errno 11001] getaddrinfo failed"
        },
        "execution_time": 0.06303691864013672,
        "is_functional_test": false
      },
      {
        "case_name": "错误端口导致连接失败",
        "purpose": "验证工具在指定错误端口时无法建立连接",
        "args": {
          "hostname": "10.70.5.21",
          "username": "pengbocheng",
          "password": "123456",
          "port": 9999
        },
        "response": {
          "error": "ToolException: Error executing tool connect: SSH connection failed: [Errno None] Unable to connect to port 9999 on 10.70.5.21"
        },
        "execution_time": 2.0478951930999756,
        "is_functional_test": false
      },
      {
        "case_name": "特殊字符在主机名中的处理",
        "purpose": "验证工具是否能正确处理包含特殊字符的主机名",
        "args": {
          "hostname": "host!with@special#chars.com",
          "username": "pengbocheng",
          "password": "123456"
        },
        "response": {
          "error": "ToolException: Error executing tool connect: SSH connection failed: [Errno 11003] getaddrinfo failed"
        },
        "execution_time": 0.006506681442260742,
        "is_functional_test": false
      },
      {
        "case_name": "尝试使用不存在的私钥文件",
        "purpose": "验证工具在提供的私钥文件不存在时的行为",
        "args": {
          "hostname": "10.70.5.21",
          "username": "pengbocheng",
          "private_key": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_key.pem",
          "port": 26002
        },
        "response": {
          "error": "ToolException: Error executing tool connect: SSH connection failed: Private key file not found: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_key.pem"
        },
        "execution_time": 0.004001617431640625,
        "is_functional_test": false
      }
    ],
    "list_sessions": [
      {
        "case_name": "成功列出所有活动SSH会话",
        "purpose": "验证list_sessions工具可以成功返回当前所有活动的SSH会话信息",
        "args": {},
        "response": {
          "result": "{\n  \"session_id\": \"session_1\",\n  \"hostname\": \"10.70.5.21\",\n  \"username\": \"pengbocheng\",\n  \"status\": \"active\"\n}"
        },
        "execution_time": 0.003997802734375,
        "is_functional_test": true
      },
      {
        "case_name": "在无活动会话时返回空列表",
        "purpose": "验证当没有活动SSH会话时，工具返回一个空列表而不是错误",
        "args": {},
        "response": {
          "result": "{\n  \"session_id\": \"session_1\",\n  \"hostname\": \"10.70.5.21\",\n  \"username\": \"pengbocheng\",\n  \"status\": \"active\"\n}"
        },
        "execution_time": 0.005153179168701172,
        "is_functional_test": true
      },
      {
        "case_name": "并发访问时的安全性测试",
        "purpose": "验证多个用户同时调用list_sessions不会导致敏感信息泄露或系统异常",
        "args": {},
        "response": {
          "result": "{\n  \"session_id\": \"session_1\",\n  \"hostname\": \"10.70.5.21\",\n  \"username\": \"pengbocheng\",\n  \"status\": \"active\"\n}"
        },
        "execution_time": 0.007514238357543945,
        "is_functional_test": false
      },
      {
        "case_name": "权限不足时拒绝访问",
        "purpose": "验证非授权用户调用list_sessions时被拒绝访问并返回适当错误",
        "args": {},
        "response": {
          "result": "{\n  \"session_id\": \"session_1\",\n  \"hostname\": \"10.70.5.21\",\n  \"username\": \"pengbocheng\",\n  \"status\": \"active\"\n}"
        },
        "execution_time": 0.0030024051666259766,
        "is_functional_test": false
      },
      {
        "case_name": "无效参数类型导致错误",
        "purpose": "验证提供非法参数类型（如int代替dict）时工具能正确抛出参数验证错误",
        "args": {
          "invalid_arg": 123
        },
        "response": {
          "result": "{\n  \"session_id\": \"session_1\",\n  \"hostname\": \"10.70.5.21\",\n  \"username\": \"pengbocheng\",\n  \"status\": \"active\"\n}"
        },
        "execution_time": 0.003007173538208008,
        "is_functional_test": false
      },
      {
        "case_name": "特殊字符在会话ID中的处理",
        "purpose": "验证工具能否正确处理包含特殊字符的session_id字段",
        "args": {},
        "response": {
          "result": "{\n  \"session_id\": \"session_1\",\n  \"hostname\": \"10.70.5.21\",\n  \"username\": \"pengbocheng\",\n  \"status\": \"active\"\n}"
        },
        "execution_time": 0.004001140594482422,
        "is_functional_test": false
      }
    ],
    "execute": [
      {
        "case_name": "使用有效会话ID执行简单命令",
        "purpose": "验证execute工具可以使用有效的session_id成功执行一个简单的命令，如'echo Hello World'",
        "args": {
          "session_id": "session_1",
          "command": "echo Hello World"
        },
        "response": {
          "result": "{\n  \"stdout\": \"Hello World\",\n  \"stderr\": \"\",\n  \"exit_status\": 0\n}"
        },
        "execution_time": 0.01062321662902832,
        "is_functional_test": true
      },
      {
        "case_name": "传递标准输入执行命令",
        "purpose": "验证execute工具能够通过stdin参数向命令传递输入内容",
        "args": {
          "session_id": "session_1",
          "command": "cat",
          "stdin": "This is standard input content."
        },
        "response": {
          "result": "{\n  \"stdout\": \"This is standard input content.\",\n  \"stderr\": \"\",\n  \"exit_status\": 0\n}"
        },
        "execution_time": 0.05049777030944824,
        "is_functional_test": true
      },
      {
        "case_name": "指定超时限制执行长时间命令",
        "purpose": "验证execute工具在指定timeout参数后能正确中断长时间运行的命令",
        "args": {
          "session_id": "session_1",
          "command": "sleep 10 || echo Command interrupted",
          "timeout": 5
        },
        "response": {
          "error": "ToolException: Error executing tool execute: Command execution failed: "
        },
        "execution_time": 5.055740594863892,
        "is_functional_test": true
      },
      {
        "case_name": "使用不存在的会话ID执行命令",
        "purpose": "验证当提供的session_id不存在时，execute工具是否抛出KeyError",
        "args": {
          "session_id": "nonexistent_session",
          "command": "ls"
        },
        "response": {
          "error": "ToolException: Error executing tool execute: 'Session nonexistent_session not found.'"
        },
        "execution_time": 0.01601099967956543,
        "is_functional_test": false
      },
      {
        "case_name": "执行非法或高风险命令",
        "purpose": "验证execute工具能否安全处理潜在危险命令（例如rm -rf /），但仅用于测试目的且不实际执行）",
        "args": {
          "session_id": "session_1",
          "command": "echo This is a test for dangerous command"
        },
        "response": {
          "result": "{\n  \"stdout\": \"This is a test for dangerous command\",\n  \"stderr\": \"\",\n  \"exit_status\": 0\n}"
        },
        "execution_time": 0.03366422653198242,
        "is_functional_test": false
      },
      {
        "case_name": "命令中包含特殊字符",
        "purpose": "验证execute工具是否能正确处理包含特殊字符的命令字符串",
        "args": {
          "session_id": "session_1",
          "command": "echo Special chars: !@#$%^&*()_+{}[]|\\\"';:/?~`"
        },
        "response": {
          "result": "{\n  \"stdout\": \"\",\n  \"stderr\": \"bash: -c: line 1: syntax error near unexpected token `_+{}[]'\\nbash: -c: line 1: `echo Special chars: !@#$%^&*()_+{}[]|\\\\\\\"';:/?~`'\",\n  \"exit_status\": 2\n}"
        },
        "execution_time": 0.04847550392150879,
        "is_functional_test": true
      },
      {
        "case_name": "执行不存在的命令",
        "purpose": "验证当执行的命令不存在时，execute工具是否能返回适当的错误信息",
        "args": {
          "session_id": "session_1",
          "command": "this_command_does_not_exist"
        },
        "response": {
          "result": "{\n  \"stdout\": \"\",\n  \"stderr\": \"bash: line 1: this_command_does_not_exist: command not found\",\n  \"exit_status\": 127\n}"
        },
        "execution_time": 0.04744601249694824,
        "is_functional_test": false
      },
      {
        "case_name": "执行带有空格和引号的复杂命令",
        "purpose": "验证execute工具能否正确解析并执行带有空格和引号的复杂命令字符串",
        "args": {
          "session_id": "session_1",
          "command": "echo \"Hello, this is a quoted string with spaces.\""
        },
        "response": {
          "result": "{\n  \"stdout\": \"Hello, this is a quoted string with spaces.\",\n  \"stderr\": \"\",\n  \"exit_status\": 0\n}"
        },
        "execution_time": 0.04761457443237305,
        "is_functional_test": true
      }
    ],
    "upload": [
      {
        "case_name": "成功上传本地文件到远程服务器",
        "purpose": "验证使用有效session_id和正确路径时，upload工具能够成功将本地文件上传至远程SSH服务器",
        "args": {
          "session_id": "session_1",
          "local_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt",
          "remote_path": "/home/pengbocheng/uploaded_test_output.txt"
        },
        "response": {
          "result": "File D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt uploaded to /home/pengbocheng/uploaded_test_output.txt successfully."
        },
        "execution_time": 0.021234512329101562,
        "is_functional_test": true
      },
      {
        "case_name": "尝试上传不存在的本地文件应抛出异常",
        "purpose": "验证当指定的local_path文件不存在时，upload工具能正确抛出FileNotFoundError",
        "args": {
          "session_id": "session_1",
          "local_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt",
          "remote_path": "/home/pengbocheng/uploaded_nonexistent_file.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool upload: Local file not found: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt"
        },
        "execution_time": 0.00400090217590332,
        "is_functional_test": false
      },
      {
        "case_name": "使用无效的session_id上传文件失败",
        "purpose": "验证当提供的session_id无效或不存在时，upload工具能正确抛出KeyError",
        "args": {
          "session_id": "invalid_session",
          "local_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt",
          "remote_path": "/home/pengbocheng/uploaded_with_invalid_session.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool upload: 'Session invalid_session not found.'"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": false
      },
      {
        "case_name": "上传至无写权限目录导致失败",
        "purpose": "验证当远程路径没有写权限时，upload工具是否能正确处理并返回错误信息",
        "args": {
          "session_id": "session_1",
          "local_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt",
          "remote_path": "/root/restricted_upload.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool upload: File upload failed: [Errno 13] Permission denied"
        },
        "execution_time": 0.04593682289123535,
        "is_functional_test": false
      },
      {
        "case_name": "上传带有特殊字符的文件名",
        "purpose": "验证upload工具能否正确处理包含特殊字符的本地文件路径",
        "args": {
          "session_id": "session_1",
          "local_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\@special#dir\\special_test.txt",
          "remote_path": "/home/pengbocheng/uploaded_special!@#.txt"
        },
        "response": {
          "result": "File D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\@special#dir\\special_test.txt uploaded to /home/pengbocheng/uploaded_special!@#.txt successfully."
        },
        "execution_time": 0.057851314544677734,
        "is_functional_test": true
      },
      {
        "case_name": "上传大文件测试性能与稳定性",
        "purpose": "验证upload工具在处理大文件（如视频）时的行为和性能表现",
        "args": {
          "session_id": "session_1",
          "local_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\20250509-154554.mp4",
          "remote_path": "/home/pengbocheng/uploaded_large_video.mp4"
        },
        "response": {
          "result": "File D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\20250509-154554.mp4 uploaded to /home/pengbocheng/uploaded_large_video.mp4 successfully."
        },
        "execution_time": 0.13126850128173828,
        "is_functional_test": true
      },
      {
        "case_name": "并发上传多个文件测试线程安全性",
        "purpose": "验证多个用户/线程同时调用upload工具时不会发生冲突或数据混乱",
        "args": {
          "session_id": "session_1",
          "local_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\concurrent_copy_{}.docx",
          "remote_path": "/home/pengbocheng/concurrent_upload.docx"
        },
        "response": {
          "result": "File D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\concurrent_copy_{}.docx uploaded to /home/pengbocheng/concurrent_upload.docx successfully."
        },
        "execution_time": 0.05681562423706055,
        "is_functional_test": false
      },
      {
        "case_name": "上传文件至不存在的远程目录",
        "purpose": "验证当remote_path中的目标目录不存在时，upload工具是否会自动创建或正确报错",
        "args": {
          "session_id": "session_1",
          "local_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt",
          "remote_path": "/home/pengbocheng/nonexistent_dir/uploaded_file.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool upload: File upload failed: [Errno 2] No such file"
        },
        "execution_time": 0.051629066467285156,
        "is_functional_test": false
      }
    ],
    "download": [
      {
        "case_name": "成功下载远程文件使用有效会话和路径",
        "purpose": "验证download工具可以使用有效的session_id、remote_path和local_path成功下载文件",
        "args": {
          "session_id": "session_1",
          "remote_path": "/home/pengbocheng/testfile.txt",
          "local_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\downloaded_testfile.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool download: File download failed: [Errno 2] No such file"
        },
        "execution_time": 0.015061616897583008,
        "is_functional_test": true
      },
      {
        "case_name": "尝试使用无效session_id下载文件",
        "purpose": "验证当提供不存在的session_id时，download工具抛出KeyError异常",
        "args": {
          "session_id": "invalid_session",
          "remote_path": "/home/pengbocheng/testfile.txt",
          "local_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\downloaded_testfile.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool download: 'Session invalid_session not found.'"
        },
        "execution_time": 0.005106449127197266,
        "is_functional_test": false
      },
      {
        "case_name": "下载权限不足的远程文件",
        "purpose": "验证当用户对远程文件没有读取权限时，download工具能否正确处理错误",
        "args": {
          "session_id": "session_1",
          "remote_path": "/etc/shadow",
          "local_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\downloaded_shadow.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool download: File download failed: [Errno 13] Permission denied"
        },
        "execution_time": 0.049059391021728516,
        "is_functional_test": false
      },
      {
        "case_name": "下载不存在的远程文件",
        "purpose": "验证当指定的remote_path不存在时，download工具是否能正确抛出SSHException",
        "args": {
          "session_id": "session_1",
          "remote_path": "/home/pengbocheng/nonexistent_file.txt",
          "local_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\downloaded_nonexistent.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool download: File download failed: [Errno 2] No such file"
        },
        "execution_time": 0.05369210243225098,
        "is_functional_test": false
      },
      {
        "case_name": "尝试写入只读本地目录",
        "purpose": "验证当指定的local_path无写权限时，download工具是否能优雅地处理IO错误",
        "args": {
          "session_id": "session_1",
          "remote_path": "/home/pengbocheng/testfile.txt",
          "local_path": "C:\\Windows\\system32\\downloaded_testfile.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool download: File download failed: [Errno 13] Permission denied: 'C:\\\\Windows\\\\system32\\\\downloaded_testfile.txt'"
        },
        "execution_time": 0.05342292785644531,
        "is_functional_test": false
      },
      {
        "case_name": "使用特殊字符在remote_path中下载文件",
        "purpose": "验证download工具能否正确处理包含特殊字符的remote_path",
        "args": {
          "session_id": "session_1",
          "remote_path": "/home/pengbocheng/!@#test_output.png",
          "local_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_copied_download.png"
        },
        "response": {
          "error": "ToolException: Error executing tool download: File download failed: [Errno 2] No such file"
        },
        "execution_time": 0.05301213264465332,
        "is_functional_test": true
      },
      {
        "case_name": "下载非常大的文件以测试性能边界",
        "purpose": "验证download工具在处理大文件传输时的行为（如内存泄漏或超时）",
        "args": {
          "session_id": "session_1",
          "remote_path": "/var/log/large_log_file.log",
          "local_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\large_downloaded_file.log"
        },
        "response": {
          "error": "ToolException: Error executing tool download: File download failed: [Errno 2] No such file"
        },
        "execution_time": 0.05163836479187012,
        "is_functional_test": false
      },
      {
        "case_name": "尝试通过download进行路径穿越攻击",
        "purpose": "验证工具是否对remote_path中的../进行安全限制，防止任意文件访问",
        "args": {
          "session_id": "session_1",
          "remote_path": "/home/pengbocheng/../root/secret.txt",
          "local_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\attempted_secret_download.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool download: File download failed: [Errno 2] No such file"
        },
        "execution_time": 0.05052661895751953,
        "is_functional_test": false
      }
    ],
    "disconnect": [
      {
        "case_name": "成功断开已存在的SSH会话",
        "purpose": "验证工具能够使用有效的session_id成功断开指定的SSH会话",
        "args": {
          "session_id": "session_1"
        },
        "response": {
          "result": "Session session_1 disconnected successfully."
        },
        "execution_time": 0.00450587272644043,
        "is_functional_test": true
      },
      {
        "case_name": "尝试断开不存在的SSH会话",
        "purpose": "验证当提供的session_id不存在时，工具抛出KeyError异常",
        "args": {
          "session_id": "nonexistent_session"
        },
        "response": {
          "error": "ToolException: Error executing tool disconnect: 'Session nonexistent_session not found.'"
        },
        "execution_time": 0.006006479263305664,
        "is_functional_test": false
      },
      {
        "case_name": "断开会话后再次尝试断开同一会话",
        "purpose": "验证同一个session_id在第一次成功断开后，第二次调用disconnect时抛出KeyError",
        "args": {
          "session_id": "session_1"
        },
        "response": {
          "error": "ToolException: Error executing tool disconnect: 'Session session_1 not found.'"
        },
        "execution_time": 0.004036664962768555,
        "is_functional_test": false
      },
      {
        "case_name": "提供空字符串作为session_id",
        "purpose": "验证当session_id为空字符串时，工具是否能正确处理并返回错误信息",
        "args": {
          "session_id": ""
        },
        "response": {
          "error": "ToolException: Error executing tool disconnect: 'Session  not found.'"
        },
        "execution_time": 0.009005308151245117,
        "is_functional_test": false
      },
      {
        "case_name": "提供null作为session_id",
        "purpose": "验证当session_id为null时，工具是否能正确抛出参数验证错误",
        "args": {
          "session_id": null
        },
        "response": {
          "error": "ToolException: Error executing tool disconnect: 1 validation error for disconnectArguments\nsession_id\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.004334211349487305,
        "is_functional_test": false
      },
      {
        "case_name": "提供特殊字符的session_id",
        "purpose": "验证工具能否正确处理包含特殊字符的session_id（如包含!@#$%^&*等）",
        "args": {
          "session_id": "session_!@#"
        },
        "response": {
          "error": "ToolException: Error executing tool disconnect: 'Session session_!@# not found.'"
        },
        "execution_time": 0.00551152229309082,
        "is_functional_test": false
      },
      {
        "case_name": "并发调用disconnect多个会话",
        "purpose": "验证多线程/并发环境下同时断开多个SSH会话是否正常",
        "args": {
          "session_id": "session_1"
        },
        "response": {
          "error": "ToolException: Error executing tool disconnect: 'Session session_1 not found.'"
        },
        "execution_time": 0.007004261016845703,
        "is_functional_test": false
      },
      {
        "case_name": "非授权用户调用disconnect",
        "purpose": "验证未授权用户是否无法调用disconnect工具并返回适当的权限拒绝信息",
        "args": {
          "session_id": "session_1"
        },
        "response": {
          "error": "ToolException: Error executing tool disconnect: 'Session session_1 not found.'"
        },
        "execution_time": 0.003386974334716797,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 46
}