{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "deepseek-v3-mcp_git_repository_manager",
  "server_path": "workspace/pipeline-output-servers/deepseek-v3/mcp_git_repository_manager/refined/server.py",
  "timestamp": "2025-07-16T11:25:09.027564",
  "tools": [
    {
      "name": "git_init",
      "description": "\n    Initialize a new Git repository in the specified directory.\n\n    Args:\n        directory: The path where the Git repository will be initialized.\n\n    Returns:\n        A string indicating the success or failure of the initialization.\n\n    Raises:\n        ValueError: If the directory is invalid.\n        GitCommandError: If Git initialization fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          }
        },
        "required": [
          "directory"
        ],
        "title": "git_initArguments",
        "type": "object"
      }
    },
    {
      "name": "text_write",
      "description": "\n    Write content to a specified file.\n\n    Args:\n        file_path: The path to the file that should be created or overwritten.\n        content: The content to write into the file.\n\n    Returns:\n        A confirmation message indicating success or an error message.\n\n    Raises:\n        ValueError: If the file path is invalid.\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "content"
        ],
        "title": "text_writeArguments",
        "type": "object"
      }
    },
    {
      "name": "git_status",
      "description": "\n    Display the current state of the Git repository.\n\n    Args:\n        directory: The path to the Git repository.\n\n    Returns:\n        A string containing the status information.\n\n    Raises:\n        ValueError: If the directory is invalid.\n        GitCommandError: If Git status fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          }
        },
        "required": [
          "directory"
        ],
        "title": "git_statusArguments",
        "type": "object"
      }
    },
    {
      "name": "git_add",
      "description": "\n    Add specified files to the Git staging area.\n\n    Args:\n        directory: The path to the Git repository.\n        files: A list of file paths to add to the staging area.\n\n    Returns:\n        A string confirming the files were added or an error message.\n\n    Raises:\n        ValueError: If the directory or files are invalid.\n        GitCommandError: If Git add fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "files": {
            "items": {
              "type": "string"
            },
            "title": "Files",
            "type": "array"
          }
        },
        "required": [
          "directory",
          "files"
        ],
        "title": "git_addArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_unstaged",
      "description": "\n    Show the differences between the working directory and the last commit (unstaged changes).\n\n    Args:\n        directory: The path to the Git repository.\n\n    Returns:\n        A string detailing the unstaged differences.\n\n    Raises:\n        ValueError: If the directory is invalid.\n        GitCommandError: If Git diff fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          }
        },
        "required": [
          "directory"
        ],
        "title": "git_diff_unstagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_staged",
      "description": "\n    Show the differences between the staging area and the last commit (staged changes).\n\n    Args:\n        directory: The path to the Git repository.\n\n    Returns:\n        A string detailing the staged differences.\n\n    Raises:\n        ValueError: If the directory is invalid.\n        GitCommandError: If Git diff fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          }
        },
        "required": [
          "directory"
        ],
        "title": "git_diff_stagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff",
      "description": "\n    Compare differences between branches, commits, or files.\n\n    Args:\n        directory: The path to the Git repository.\n        source: The source branch, commit, or file.\n        target: The target branch, commit, or file.\n\n    Returns:\n        A string detailing the differences.\n\n    Raises:\n        ValueError: If the directory, source, or target is invalid.\n        GitCommandError: If Git diff fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "source": {
            "title": "Source",
            "type": "string"
          },
          "target": {
            "title": "Target",
            "type": "string"
          }
        },
        "required": [
          "directory",
          "source",
          "target"
        ],
        "title": "git_diffArguments",
        "type": "object"
      }
    },
    {
      "name": "git_commit",
      "description": "\n    Commit the staged changes to the repository with a message.\n\n    Args:\n        directory: The path to the Git repository.\n        message: The commit message.\n\n    Returns:\n        A string confirming the commit or an error message.\n\n    Raises:\n        ValueError: If the directory or message is invalid.\n        GitCommandError: If Git commit fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "message": {
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "directory",
          "message"
        ],
        "title": "git_commitArguments",
        "type": "object"
      }
    },
    {
      "name": "git_reset",
      "description": "\n    Unstage files from the staging area.\n\n    Args:\n        directory: The path to the Git repository.\n        files: A list of file paths to unstage.\n\n    Returns:\n        A string confirming the reset or an error message.\n\n    Raises:\n        ValueError: If the directory or files are invalid.\n        GitCommandError: If Git reset fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "files": {
            "items": {
              "type": "string"
            },
            "title": "Files",
            "type": "array"
          }
        },
        "required": [
          "directory",
          "files"
        ],
        "title": "git_resetArguments",
        "type": "object"
      }
    },
    {
      "name": "git_log",
      "description": "\n    Display the commit history of the repository.\n\n    Args:\n        directory: The path to the Git repository.\n\n    Returns:\n        A string containing the commit history.\n\n    Raises:\n        ValueError: If the directory is invalid.\n        GitCommandError: If Git log fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          }
        },
        "required": [
          "directory"
        ],
        "title": "git_logArguments",
        "type": "object"
      }
    },
    {
      "name": "git_create_branch",
      "description": "\n    Create a new branch in the repository.\n\n    Args:\n        directory: The path to the Git repository.\n        branch_name: The name of the new branch.\n\n    Returns:\n        A string confirming the branch creation or an error message.\n\n    Raises:\n        ValueError: If the directory or branch name is invalid.\n        GitCommandError: If Git branch creation fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "directory",
          "branch_name"
        ],
        "title": "git_create_branchArguments",
        "type": "object"
      }
    },
    {
      "name": "git_checkout",
      "description": "\n    Switch to a specified branch or commit.\n\n    Args:\n        directory: The path to the Git repository.\n        target: The branch name or commit hash to switch to.\n\n    Returns:\n        A string confirming the checkout or an error message.\n\n    Raises:\n        ValueError: If the directory or target is invalid.\n        GitCommandError: If Git checkout fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "target": {
            "title": "Target",
            "type": "string"
          }
        },
        "required": [
          "directory",
          "target"
        ],
        "title": "git_checkoutArguments",
        "type": "object"
      }
    },
    {
      "name": "git_show",
      "description": "\n    Display detailed information about a specific commit.\n\n    Args:\n        directory: The path to the Git repository.\n        commit_hash: The hash of the commit to display.\n\n    Returns:\n        A string containing the commit details.\n\n    Raises:\n        ValueError: If the directory or commit hash is invalid.\n        GitCommandError: If Git show fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "commit_hash": {
            "title": "Commit Hash",
            "type": "string"
          }
        },
        "required": [
          "directory",
          "commit_hash"
        ],
        "title": "git_showArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "git_init": [
      {
        "case_name": "Initialize Git Repository in Valid Directory",
        "purpose": "验证工具可以在有效目录中成功初始化一个新的 Git 仓库",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Git repository initialized successfully in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.13883590698242188,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Git Initialization in Nonexistent Directory",
        "purpose": "测试当指定的目录不存在时，是否抛出 ValueError 异常",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "Git repository initialized successfully in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "execution_time": 0.2751486301422119,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository with Special Characters in Path",
        "purpose": "验证工具能否处理包含特殊字符的路径中的 Git 初始化",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\@special#dir"
        },
        "response": {
          "result": "Git repository initialized successfully in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\@special#dir"
        },
        "execution_time": 0.34552454948425293,
        "is_functional_test": true
      },
      {
        "case_name": "Git Initialization in Read-Only Directory",
        "purpose": "测试在只读目录中初始化 Git 是否触发 GitCommandError",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_icons"
        },
        "response": {
          "result": "Git repository initialized successfully in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_icons"
        },
        "execution_time": 0.26740503311157227,
        "is_functional_test": false
      },
      {
        "case_name": "Git Init Without Write Permissions",
        "purpose": "模拟尝试在没有写权限的目录中初始化 Git 仓库以验证安全行为",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unauthorized_access_test.docx"
        },
        "response": {
          "result": "Error initializing Git repository: Path is not a directory: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unauthorized_access_test.docx"
        },
        "execution_time": 0.004511833190917969,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git in Very Long Path Directory",
        "purpose": "测试在超长路径目录中初始化 Git 是否成功",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_very_long_directory_name_very_long_directory_name"
        },
        "response": {
          "result": "Git repository initialized successfully in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_very_long_directory_name_very_long_directory_name"
        },
        "execution_time": 0.18715977668762207,
        "is_functional_test": true
      },
      {
        "case_name": "Git Init on File Instead of Directory",
        "purpose": "测试将文件而非目录作为参数传入时是否抛出 ValueError",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\paper1.pdf"
        },
        "response": {
          "result": "Error initializing Git repository: Path is not a directory: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\paper1.pdf"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": false
      },
      {
        "case_name": "Git Initialization in Already Initialized Repository",
        "purpose": "测试在已经存在 .git 文件夹的目录中再次初始化 Git 的行为",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Git repository initialized successfully in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.1799628734588623,
        "is_functional_test": true
      }
    ],
    "text_write": [
      {
        "case_name": "Write Content to New File",
        "purpose": "验证工具可以成功将内容写入一个新创建的文件",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_output.txt",
          "content": "This is a test content written by text_write tool."
        },
        "response": {
          "result": "Successfully wrote content to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_output.txt"
        },
        "execution_time": 0.0055086612701416016,
        "is_functional_test": true
      },
      {
        "case_name": "Overwrite Existing File with New Content",
        "purpose": "验证工具能够覆盖已存在的文件中的内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "content": "This is overwritten content."
        },
        "response": {
          "result": "Successfully wrote content to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": true
      },
      {
        "case_name": "Write Empty Content to File",
        "purpose": "测试向文件中写入空内容是否被正确处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_output.txt",
          "content": ""
        },
        "response": {
          "result": "Successfully wrote content to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_output.txt"
        },
        "execution_time": 0.007529497146606445,
        "is_functional_test": true
      },
      {
        "case_name": "Write to File in Nonexistent Directory",
        "purpose": "测试尝试写入到不存在的目录中的文件是否会抛出 ValueError",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir\\test_output.txt",
          "content": "This should fail because the directory does not exist."
        },
        "response": {
          "result": "Successfully wrote content to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir\\test_output.txt"
        },
        "execution_time": 0.007567644119262695,
        "is_functional_test": false
      },
      {
        "case_name": "Write to File with Special Characters in Path",
        "purpose": "验证工具能否处理包含特殊字符的文件路径",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\@special#dir\\!@#test_output.txt",
          "content": "Special characters in path are handled correctly."
        },
        "response": {
          "result": "Successfully wrote content to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\@special#dir\\!@#test_output.txt"
        },
        "execution_time": 0.003996849060058594,
        "is_functional_test": true
      },
      {
        "case_name": "Write to Read-Only File",
        "purpose": "测试尝试写入只读文件是否会触发错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_icons\\icon_A_green_triangle.png",
          "content": "Trying to write to a read-only file."
        },
        "response": {
          "result": "Successfully wrote content to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_icons\\icon_A_green_triangle.png"
        },
        "execution_time": 0.005112171173095703,
        "is_functional_test": false
      },
      {
        "case_name": "Write to File Without Write Permissions",
        "purpose": "模拟尝试写入没有写权限的目标路径以验证安全行为",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unauthorized_access_test.docx",
          "content": "Access denied test content."
        },
        "response": {
          "result": "Successfully wrote content to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unauthorized_access_test.docx"
        },
        "execution_time": 0.007075309753417969,
        "is_functional_test": false
      }
    ],
    "git_status": [
      {
        "case_name": "Check Git Status in Initialized Repository",
        "purpose": "验证工具可以成功显示已初始化 Git 仓库的状态信息",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\t20250507-151716.png\n\t20250509-154554.mp4\n\t2507.10550v1.pdf\n\t68078d40e08a19b806665fee_1745325376_auto_driving_system.csv\n\t@special#dir/\n\tadaptive_thresholded.png\n\tapp.ico\n\tattempted_secret_download.txt\n\tbmp_thresholded.png\n\tconcurrent_copy_{}.docx\n\tcopied_document.docx\n\tcs.csv\n\tcustom.png\n\tcustom_icons/\n\tcustom_papers/\n\tcustom_thresholded.png\n\tdefault_saved_document.docx\n\tdownloaded_nonexistent.txt\n\tdownloaded_shadow.txt\n\tdownloaded_testfile.txt\n\tedge_detected_custom.png\n\tedge_extreme_thresholds.png\n\tempty_content_output.txt\n\tempty_data_output.png\n\texisting_file.txt\n\texpected_dir_copied.docx\n\thit.jpeg\n\thit.png\n\tincludeempty.csv\n\tinspector.zip\n\tlarge_downloaded_file.log\n\tmerged_output.pdf\n\tmin_kernel_blur.png\n\tmodules.xml\n\tnew_output.txt\n\tnonexistent_dir/\n\tnonname.html\n\tpaper1.pdf\n\tpresent.html\n\tre2.doc\n\tsample1.pdf\n\tsaved_document.docx\n\tsaved_in_expected_dir.docx\n\tscreenshot.png\n\tsharpened_output.jpg\n\tsingle_output.pdf\n\tspecial_copied_download.png\n\tspreadsheet.csv\n\tswe.pptx\n\ttest_output.png\n\ttest_output.txt\n\ttmp.csv\n\tunauthorized_access_test.docx\n\tvery_long_directory_name_very_long_directory_name_very_long_directory_name/\n\twhole_framework.pdf\n\txue.bmp\n\txue.jpg\n\txue.png\n\t~$odules.xml\n\t~$paper1.pdf\n\nnothing added to commit but untracked files present (use \"git add\" ...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计1409字符，剩余9字符"
        },
        "execution_time": 0.16958165168762207,
        "is_functional_test": true
      },
      {
        "case_name": "Check Git Status in Nonexistent Directory",
        "purpose": "测试尝试在不存在的目录中获取 Git 状态是否会抛出 ValueError 异常",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached <file>...\" to unstage)\n\tnew file:   test.txt\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\ttest_output.txt\n"
        },
        "execution_time": 0.16100668907165527,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status with Special Characters in Path",
        "purpose": "验证工具能否处理包含特殊字符的路径中的 Git 状态查询",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\@special#dir"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\t!@#test_output.png\n\t!@#test_output.txt\n\t2507.11540v1.pdf\n\thit.bmp\n\tmerged_!@#.pdf\n\tmountain_image.jpg\n\tspecial_copied_!@#.docx\n\tspecial_screenshot.png\n\tspecial_test.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.21468877792358398,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status in Read-Only Directory",
        "purpose": "测试在只读目录中执行 Git 状态查询是否会触发 GitCommandError",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_icons"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\ticon_A_green_triangle.png\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.18412065505981445,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status on File Instead of Directory",
        "purpose": "测试将文件而非目录作为参数传入时是否抛出 ValueError",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\paper1.pdf"
        },
        "response": {
          "result": "Error getting Git status: Path is not a directory: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\paper1.pdf"
        },
        "execution_time": 0.00438237190246582,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status in Very Long Path Directory",
        "purpose": "测试在超长路径目录中执行 Git 状态查询是否成功",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_very_long_directory_name_very_long_directory_name"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tlong_filename_copied_test.docx\n\tlong_filename_test.txt\n\tlong_filename_test_output.png\n\tvery_long_filename_for_testing_purpose.png\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.19811582565307617,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status Without Write Permissions",
        "purpose": "模拟尝试在没有写权限的目录中执行 Git 状态查询以验证安全行为",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unauthorized_access_test.docx"
        },
        "response": {
          "result": "Error getting Git status: Path is not a directory: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unauthorized_access_test.docx"
        },
        "execution_time": 0.004506587982177734,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status in Already Initialized Repository",
        "purpose": "验证工具可以在已经存在 .git 文件夹的目录中成功获取 Git 状态信息",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\t20250507-151716.png\n\t20250509-154554.mp4\n\t2507.10550v1.pdf\n\t68078d40e08a19b806665fee_1745325376_auto_driving_system.csv\n\t@special#dir/\n\tadaptive_thresholded.png\n\tapp.ico\n\tattempted_secret_download.txt\n\tbmp_thresholded.png\n\tconcurrent_copy_{}.docx\n\tcopied_document.docx\n\tcs.csv\n\tcustom.png\n\tcustom_icons/\n\tcustom_papers/\n\tcustom_thresholded.png\n\tdefault_saved_document.docx\n\tdownloaded_nonexistent.txt\n\tdownloaded_shadow.txt\n\tdownloaded_testfile.txt\n\tedge_detected_custom.png\n\tedge_extreme_thresholds.png\n\tempty_content_output.txt\n\tempty_data_output.png\n\texisting_file.txt\n\texpected_dir_copied.docx\n\thit.jpeg\n\thit.png\n\tincludeempty.csv\n\tinspector.zip\n\tlarge_downloaded_file.log\n\tmerged_output.pdf\n\tmin_kernel_blur.png\n\tmodules.xml\n\tnew_output.txt\n\tnonexistent_dir/\n\tnonname.html\n\tpaper1.pdf\n\tpresent.html\n\tre2.doc\n\tsample1.pdf\n\tsaved_document.docx\n\tsaved_in_expected_dir.docx\n\tscreenshot.png\n\tsharpened_output.jpg\n\tsingle_output.pdf\n\tspecial_copied_download.png\n\tspreadsheet.csv\n\tswe.pptx\n\ttest_output.png\n\ttest_output.txt\n\ttmp.csv\n\tunauthorized_access_test.docx\n\tvery_long_directory_name_very_long_directory_name_very_long_directory_name/\n\twhole_framework.pdf\n\txue.bmp\n\txue.jpg\n\txue.png\n\t~$odules.xml\n\t~$paper1.pdf\n\nnothing added to commit but untracked files present (use \"git add\" ...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计1409字符，剩余9字符"
        },
        "execution_time": 0.1966865062713623,
        "is_functional_test": true
      }
    ],
    "git_add": [
      {
        "case_name": "Add Single File to Staging Area",
        "purpose": "验证工具可以成功将单个文件添加到 Git staging 区域",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_output.txt"
          ]
        },
        "response": {
          "result": "Added files to staging area: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_output.txt"
        },
        "execution_time": 0.00470733642578125,
        "is_functional_test": true
      },
      {
        "case_name": "Add Multiple Files to Staging Area",
        "purpose": "验证工具支持一次添加多个文件到 Git staging 区域",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_output.txt"
          ]
        },
        "response": {
          "result": "Added files to staging area: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt, D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_output.txt"
        },
        "execution_time": 0.008523941040039062,
        "is_functional_test": true
      },
      {
        "case_name": "Add File with Special Characters in Path",
        "purpose": "测试包含特殊字符的文件路径是否能被正确处理并添加到 staging 区域",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\@special#dir",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\@special#dir\\!@#test_output.txt"
          ]
        },
        "response": {
          "result": "Added files to staging area: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\@special#dir\\!@#test_output.txt"
        },
        "execution_time": 0.007511615753173828,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Add Nonexistent File",
        "purpose": "测试尝试添加一个不存在的文件是否会抛出 GitCommandError",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt"
          ]
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: [WinError 2] 系统找不到指定的文件。: 'nonexistent_file.txt'"
        },
        "execution_time": 0.0060482025146484375,
        "is_functional_test": false
      },
      {
        "case_name": "Add File in Read-Only Directory",
        "purpose": "测试尝试将只读目录中的文件添加到 staging 区域的行为",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_icons",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_icons\\icon_A_green_triangle.png"
          ]
        },
        "response": {
          "result": "Added files to staging area: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_icons\\icon_A_green_triangle.png"
        },
        "execution_time": 0.006000041961669922,
        "is_functional_test": false
      },
      {
        "case_name": "Add File Without Write Permissions",
        "purpose": "模拟尝试添加没有写权限的目标文件以验证安全行为",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unauthorized_access_test.docx"
          ]
        },
        "response": {
          "result": "Added files to staging area: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unauthorized_access_test.docx"
        },
        "execution_time": 0.008094549179077148,
        "is_functional_test": false
      },
      {
        "case_name": "Add File in Very Long Path Directory",
        "purpose": "测试在超长路径目录中添加文件到 staging 区域是否成功",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_very_long_directory_name_very_long_directory_name",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_very_long_directory_name_very_long_directory_name\\long_filename_test.txt"
          ]
        },
        "response": {
          "result": "Added files to staging area: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_very_long_directory_name_very_long_directory_name\\long_filename_test.txt"
        },
        "execution_time": 0.004998207092285156,
        "is_functional_test": true
      },
      {
        "case_name": "Add File from Subdirectory",
        "purpose": "验证工具能够从子目录中添加文件到 staging 区域",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_papers\\2507.10552v1.pdf"
          ]
        },
        "response": {
          "result": "Added files to staging area: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_papers\\2507.10552v1.pdf"
        },
        "execution_time": 0.06987810134887695,
        "is_functional_test": true
      }
    ],
    "git_diff_unstaged": [
      {
        "case_name": "Show Unstaged Changes in Valid Git Repository",
        "purpose": "验证工具能够正确显示有效 Git 仓库中工作目录与最近一次提交之间的差异（未暂存更改）",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.2739567756652832,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Show Diff in Nonexistent Directory",
        "purpose": "测试在不存在的目录中调用 git_diff_unstaged 是否抛出 ValueError 异常",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.17568397521972656,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Changes with Special Characters in Path",
        "purpose": "验证工具能否处理包含特殊字符的路径中的未暂存更改差异检测",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\@special#dir"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.18657708168029785,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff in Read-Only Directory",
        "purpose": "测试在只读目录中执行 git_diff_unstaged 是否触发 GitCommandError",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_icons"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.16013097763061523,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Without Read Permissions",
        "purpose": "模拟尝试在没有读权限的目录中执行 git_diff_unstaged 以验证安全行为",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unauthorized_access_test.docx"
        },
        "response": {
          "result": "Error getting unstaged differences: Path is not a directory: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unauthorized_access_test.docx"
        },
        "execution_time": 0.0040035247802734375,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff in Very Long Path Directory",
        "purpose": "测试在超长路径目录中执行 git_diff_unstaged 是否成功",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_very_long_directory_name_very_long_directory_name"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.17018651962280273,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff on File Instead of Directory",
        "purpose": "测试将文件而非目录作为参数传入时是否抛出 ValueError",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\paper1.pdf"
        },
        "response": {
          "result": "Error getting unstaged differences: Path is not a directory: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\paper1.pdf"
        },
        "execution_time": 0.007832527160644531,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff in Already Initialized Repository",
        "purpose": "测试在已经存在 .git 文件夹的目录中执行 git_diff_unstaged 的行为",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.16343331336975098,
        "is_functional_test": true
      }
    ],
    "git_diff_staged": [
      {
        "case_name": "Show Staged Changes in Valid Git Repository",
        "purpose": "验证工具能够正确显示有效Git仓库中暂存区与最新提交之间的差异",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "diff --git a/custom_papers/2507.10552v1.pdf b/custom_papers/2507.10552v1.pdf\nnew file mode 100644\nindex 0000000..198cf2e\n--- /dev/null\n+++ b/custom_papers/2507.10552v1.pdf\n@@ -0,0 +1,363 @@\n+                                                  SELF-SUPERVISED LEARNING ON CAMERA TRAP FOOTAGE\n+                                                          YIELDS A STRONG UNIVERSAL FACE EMBEDDER\n+\n+                                                    Vladimir Iashin Horace Lee Dan Schofield Andrew Zisserman\n+\n+                                        Visual Geometry Group (VGG), Department of Engineering Science, University of Oxford\n+\n+arXiv:2507.10552v1 [cs.CV] 14 Jul 2025                              ABSTRACT                                             First, state-of-the-art human face recognisers such as Cos-\n+                                                                                                                     Face [3] and ArcFace [4] achieve near-perfect accuracy by\n+                                        Camera traps are revolutionising wildlife monitoring by cap-                 training on hundreds of images per identity and hundreds\n+                                        turing vast amounts of visual data; however, the manual                      of thousands of identities, e.g. MS-Celeb-1M [5]. For non-\n+                                        identification of ...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计42750字符，剩余41350字符"
        },
        "execution_time": 0.6675896644592285,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Show Staged Changes in Nonexistent Directory",
        "purpose": "测试当指定的目录不存在时，是否抛出 ValueError 异常",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "diff --git a/test.txt b/test.txt\nnew file mode 100644\nindex 0000000..1526227\n--- /dev/null\n+++ b/test.txt\n@@ -0,0 +1 @@\n+Test content for invalid path.\n\\ No newline at end of file"
        },
        "execution_time": 0.1761627197265625,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes with Special Characters in Path",
        "purpose": "验证工具能否处理包含特殊字符的路径中的 git diff staged 操作",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\@special#dir"
        },
        "response": {
          "result": "diff --git a/!@#test_output.txt b/!@#test_output.txt\nnew file mode 100644\nindex 0000000..4e411ba\n--- /dev/null\n+++ b/!@#test_output.txt\n@@ -0,0 +1 @@\n+Special characters in path are handled correctly.\n\\ No newline at end of file"
        },
        "execution_time": 0.21338319778442383,
        "is_functional_test": true
      },
      {
        "case_name": "Show Staged Changes in Read-Only Directory",
        "purpose": "测试在只读目录中执行 git diff staged 是否触发 GitCommandError",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_icons"
        },
        "response": {
          "result": "diff --git a/icon_A_green_triangle.png b/icon_A_green_triangle.png\nnew file mode 100644\nindex 0000000..d6c92f0\n--- /dev/null\n+++ b/icon_A_green_triangle.png\n@@ -0,0 +1 @@\n+Trying to write to a read-only file.\n\\ No newline at end of file"
        },
        "execution_time": 0.1262824535369873,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes Without Write Permissions",
        "purpose": "模拟尝试在没有写权限的目录中执行 git diff staged 以验证安全行为",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unauthorized_access_test.docx"
        },
        "response": {
          "result": "Error getting staged differences: Path is not a directory: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unauthorized_access_test.docx"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes in Very Long Path Directory",
        "purpose": "测试在超长路径目录中执行 git diff staged 是否成功",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_very_long_directory_name_very_long_directory_name"
        },
        "response": {
          "result": "diff --git a/long_filename_test.txt b/long_filename_test.txt\nnew file mode 100644\nindex 0000000..531f2ad\n--- /dev/null\n+++ b/long_filename_test.txt\n@@ -0,0 +1 @@\n+﻿Testing long path support.Appending to long path file.\n\\ No newline at end of file"
        },
        "execution_time": 0.16976690292358398,
        "is_functional_test": true
      },
      {
        "case_name": "Show Staged Changes on File Instead of Directory",
        "purpose": "测试将文件而非目录作为参数传入时是否抛出 ValueError",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\paper1.pdf"
        },
        "response": {
          "result": "Error getting staged differences: Path is not a directory: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\paper1.pdf"
        },
        "execution_time": 0.00401616096496582,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes in Already Initialized Repository",
        "purpose": "测试在已经存在 .git 文件夹的目录中执行 git diff staged 的行为",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "diff --git a/custom_papers/2507.10552v1.pdf b/custom_papers/2507.10552v1.pdf\nnew file mode 100644\nindex 0000000..198cf2e\n--- /dev/null\n+++ b/custom_papers/2507.10552v1.pdf\n@@ -0,0 +1,363 @@\n+                                                  SELF-SUPERVISED LEARNING ON CAMERA TRAP FOOTAGE\n+                                                          YIELDS A STRONG UNIVERSAL FACE EMBEDDER\n+\n+                                                    Vladimir Iashin Horace Lee Dan Schofield Andrew Zisserman\n+\n+                                        Visual Geometry Group (VGG), Department of Engineering Science, University of Oxford\n+\n+arXiv:2507.10552v1 [cs.CV] 14 Jul 2025                              ABSTRACT                                             First, state-of-the-art human face recognisers such as Cos-\n+                                                                                                                     Face [3] and ArcFace [4] achieve near-perfect accuracy by\n+                                        Camera traps are revolutionising wildlife monitoring by cap-                 training on hundreds of images per identity and hundreds\n+                                        turing vast amounts of visual data; however, the manual                      of thousands of identities, e.g. MS-Celeb-1M [5]. For non-\n+                                        identification of ...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计42750字符，剩余41350字符"
        },
        "execution_time": 0.6026182174682617,
        "is_functional_test": true
      }
    ],
    "git_commit": [
      {
        "case_name": "Commit Staged Changes in Valid Repository",
        "purpose": "验证工具可以在已初始化的 Git 仓库中成功提交 staged changes",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Initial commit"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Ref '--cached' did not resolve to an object"
        },
        "execution_time": 0.003997087478637695,
        "is_functional_test": true
      },
      {
        "case_name": "Commit with Empty Message",
        "purpose": "测试提交时使用空消息是否抛出 ValueError 异常",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Ref '--cached' did not resolve to an object"
        },
        "execution_time": 0.010400772094726562,
        "is_functional_test": false
      },
      {
        "case_name": "Commit in Nonexistent Directory",
        "purpose": "测试在不存在的目录中尝试提交是否抛出 ValueError 异常",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "message": "This should fail due to missing directory"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Ref '--cached' did not resolve to an object"
        },
        "execution_time": 0.004010200500488281,
        "is_functional_test": false
      },
      {
        "case_name": "Commit in Read-Only Repository",
        "purpose": "测试在只读 Git 仓库中提交是否会触发 GitCommandError",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_icons",
          "message": "Attempting commit in read-only repo"
        },
        "response": {
          "result": "Error committing changes: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_icons"
        },
        "execution_time": 0.007014274597167969,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Special Characters in Message",
        "purpose": "验证工具能否处理包含特殊字符的提交信息",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Commit message with !@#$%^&*() characters"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Ref '--cached' did not resolve to an object"
        },
        "execution_time": 0.0060350894927978516,
        "is_functional_test": true
      },
      {
        "case_name": "Commit Without Write Permissions",
        "purpose": "模拟尝试在无写权限的仓库中提交以验证安全行为",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unauthorized_access_test.docx",
          "message": "Access denied test commit"
        },
        "response": {
          "result": "Error committing changes: Path is not a directory: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unauthorized_access_test.docx"
        },
        "execution_time": 0.00423884391784668,
        "is_functional_test": false
      },
      {
        "case_name": "Commit in Very Long Path Repository",
        "purpose": "测试在超长路径的 Git 仓库中提交是否成功",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_very_long_directory_name_very_long_directory_name",
          "message": "Commit in long path directory"
        },
        "response": {
          "result": "Error committing changes: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_very_long_directory_name_very_long_directory_name"
        },
        "execution_time": 0.006016731262207031,
        "is_functional_test": true
      },
      {
        "case_name": "Commit on File Instead of Directory",
        "purpose": "测试将文件而非目录作为参数传入提交操作是否会抛出 ValueError",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\paper1.pdf",
          "message": "Trying to commit on a file"
        },
        "response": {
          "result": "Error committing changes: Path is not a directory: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\paper1.pdf"
        },
        "execution_time": 0.006032466888427734,
        "is_functional_test": false
      }
    ],
    "git_log": [
      {
        "case_name": "Display Commit History in Valid Git Repository",
        "purpose": "验证工具可以在已初始化的 Git 仓库中正确显示提交历史",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Error getting commit history: Cmd('git') failed due to: exit code(128)\n  cmdline: git log\n  stderr: 'fatal: your current branch 'master' does not have any commits yet'"
        },
        "execution_time": 0.2657966613769531,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Git Log in Nonexistent Directory",
        "purpose": "测试当指定目录不存在时是否抛出 ValueError 异常",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "Error getting commit history: Cmd('git') failed due to: exit code(128)\n  cmdline: git log\n  stderr: 'fatal: your current branch 'master' does not have any commits yet'"
        },
        "execution_time": 0.19403290748596191,
        "is_functional_test": false
      },
      {
        "case_name": "Git Log in Read-Only Directory",
        "purpose": "测试在只读目录中执行 Git log 是否触发 GitCommandError",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_icons"
        },
        "response": {
          "result": "Error getting commit history: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_icons"
        },
        "execution_time": 0.006162881851196289,
        "is_functional_test": false
      },
      {
        "case_name": "Git Log with Special Characters in Path",
        "purpose": "验证工具能否处理包含特殊字符的路径中的 Git 提交历史查看操作",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\@special#dir"
        },
        "response": {
          "result": "Error getting commit history: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\@special#dir"
        },
        "execution_time": 0.004031181335449219,
        "is_functional_test": true
      },
      {
        "case_name": "Git Log on File Instead of Directory",
        "purpose": "测试将文件而非目录作为参数传入时是否抛出 ValueError",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\paper1.pdf"
        },
        "response": {
          "result": "Error getting commit history: Path is not a directory: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\paper1.pdf"
        },
        "execution_time": 0.0073282718658447266,
        "is_functional_test": false
      },
      {
        "case_name": "Git Log in Very Long Path Directory",
        "purpose": "测试在超长路径目录中执行 Git log 是否成功",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_very_long_directory_name_very_long_directory_name"
        },
        "response": {
          "result": "Error getting commit history: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_very_long_directory_name_very_long_directory_name"
        },
        "execution_time": 0.006131887435913086,
        "is_functional_test": true
      },
      {
        "case_name": "Git Log in Uninitialized Repository",
        "purpose": "测试在未初始化 Git 的目录中执行 git log 是否失败并抛出 GitCommandError",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unauthorized_access_test.docx"
        },
        "response": {
          "result": "Error getting commit history: Path is not a directory: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unauthorized_access_test.docx"
        },
        "execution_time": 0.004635334014892578,
        "is_functional_test": false
      },
      {
        "case_name": "Git Log in Directory Without Read Permissions",
        "purpose": "模拟尝试在没有读权限的目录中执行 Git log 以验证安全行为",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\attempted_secret_download.txt"
        },
        "response": {
          "result": "Error getting commit history: Path is not a directory: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\attempted_secret_download.txt"
        },
        "execution_time": 0.009516239166259766,
        "is_functional_test": false
      }
    ],
    "git_diff": [
      {
        "case_name": "Compare Two Valid Branches in Initialized Repository",
        "purpose": "验证在已初始化的 Git 仓库中比较两个有效分支的差异是否成功返回结果",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source": "main",
          "target": "feature-branch"
        },
        "response": {
          "result": "Error comparing differences: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff main feature-branch\n  stderr: 'fatal: ambiguous argument 'main': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.16261982917785645,
        "is_functional_test": true
      },
      {
        "case_name": "Compare File Between Two Commits",
        "purpose": "验证工具能否正确比较指定目录中同一文件在两个不同提交之间的差异",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source": "abc1234",
          "target": "def5678"
        },
        "response": {
          "result": "Error comparing differences: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff abc1234 def5678\n  stderr: 'fatal: ambiguous argument 'abc1234': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.16978240013122559,
        "is_functional_test": true
      },
      {
        "case_name": "Compare Differences Between Branch and File",
        "purpose": "测试将一个分支和一个具体文件进行比较时的行为，验证是否能正确处理混合类型输入",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source": "main",
          "target": "README.md"
        },
        "response": {
          "result": "Error comparing differences: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff main README.md\n  stderr: 'fatal: ambiguous argument 'main': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.14012837409973145,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Diff on Nonexistent Directory",
        "purpose": "测试尝试在一个不存在的目录中执行 git_diff 是否抛出 ValueError 异常",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "source": "main",
          "target": "feature-branch"
        },
        "response": {
          "result": "Error comparing differences: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff main feature-branch\n  stderr: 'fatal: ambiguous argument 'main': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.1759929656982422,
        "is_functional_test": false
      },
      {
        "case_name": "Diff with Special Characters in Branch Names",
        "purpose": "验证工具能否处理包含特殊字符的分支名之间的差异比较",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source": "bugfix#issue123",
          "target": "release@v1.0"
        },
        "response": {
          "result": "Error comparing differences: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff bugfix#issue123 release@v1.0\n  stderr: 'fatal: ambiguous argument 'bugfix#issue123': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.1537337303161621,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Without Read Permissions",
        "purpose": "模拟尝试对没有读权限的目录执行 Git diff 操作以验证安全行为",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unauthorized_access_test.docx",
          "source": "main",
          "target": "feature-branch"
        },
        "response": {
          "result": "Error comparing differences: Path is not a directory: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unauthorized_access_test.docx"
        },
        "execution_time": 0.004237174987792969,
        "is_functional_test": false
      },
      {
        "case_name": "Compare Using Very Long Commit Hashes",
        "purpose": "测试使用超长哈希值作为 source 和 target 参数时 Git diff 的行为",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source": "abcdef1234567890abcdef1234567890abcdef1234",
          "target": "1234567890abcdef1234567890abcdef12345678"
        },
        "response": {
          "result": "Error comparing differences: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff abcdef1234567890abcdef1234567890abcdef1234 1234567890abcdef1234567890abcdef12345678\n  stderr: 'fatal: ambiguous argument 'abcdef1234567890abcdef1234567890abcdef1234': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.15664076805114746,
        "is_functional_test": true
      },
      {
        "case_name": "Compare Between Invalid Source and Target",
        "purpose": "测试源和目标参数都无效时 Git diff 工具的错误处理能力",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source": "invalid-branch-name!@#",
          "target": "another-invalid-commit$$%"
        },
        "response": {
          "result": "Error comparing differences: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff invalid-branch-name!@# another-invalid-commit$$%\n  stderr: 'fatal: ambiguous argument 'invalid-branch-name!@#': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.20844197273254395,
        "is_functional_test": false
      }
    ],
    "git_reset": [
      {
        "case_name": "Unstage Single File from Staging Area",
        "purpose": "验证工具可以成功从暂存区移除一个已暂存的文件",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
          ]
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 'IndexFile' object has no attribute 'unstage'"
        },
        "execution_time": 0.004460573196411133,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage Multiple Files from Staging Area",
        "purpose": "验证工具可以从暂存区同时移除多个文件",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_output.txt",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_output.txt"
          ]
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 'IndexFile' object has no attribute 'unstage'"
        },
        "execution_time": 0.0029997825622558594,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Unstage File in Non-Git Directory",
        "purpose": "测试尝试在未初始化 Git 的目录中取消暂存文件是否会抛出错误",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir\\testfile.txt"
          ]
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 'IndexFile' object has no attribute 'unstage'"
        },
        "execution_time": 0.004632472991943359,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage File with Special Characters in Path",
        "purpose": "验证工具能否处理包含特殊字符的文件路径进行 unstage 操作",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\@special#dir",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\@special#dir\\!@#test_output.txt"
          ]
        },
        "response": {
          "result": "Error unstaging files: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\@special#dir"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage File Without Write Permissions",
        "purpose": "测试尝试取消暂存只读文件是否会触发 GitCommandError",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_icons",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_icons\\icon_A_green_triangle.png"
          ]
        },
        "response": {
          "result": "Error unstaging files: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_icons"
        },
        "execution_time": 0.002916097640991211,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage Very Long File Path",
        "purpose": "测试在超长路径文件上执行 git reset 是否成功",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_very_long_directory_name_very_long_directory_name",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_very_long_directory_name_very_long_directory_name\\long_named_file_to_unstage.txt"
          ]
        },
        "response": {
          "result": "Error unstaging files: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_very_long_directory_name_very_long_directory_name"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage File in Read-Only Repository",
        "purpose": "测试在只读 Git 仓库中执行 git reset 是否失败",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_repo",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_repo\\tracked_file.txt"
          ]
        },
        "response": {
          "result": "Error unstaging files: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_repo"
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage Invalid File Path",
        "purpose": "测试传入无效或不存在的文件路径时是否抛出 ValueError",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_file_that_does_not_exist.txt"
          ]
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 'IndexFile' object has no attribute 'unstage'"
        },
        "execution_time": 0.005020856857299805,
        "is_functional_test": false
      }
    ],
    "git_create_branch": [
      {
        "case_name": "Create New Branch in Initialized Repository",
        "purpose": "验证在已初始化的 Git 仓库中成功创建新分支的基本功能",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/test-branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Ref 'HEAD' did not resolve to an object"
        },
        "execution_time": 0.004001140594482422,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Create Branch with Empty Directory Path",
        "purpose": "测试当目录路径为空字符串时是否抛出 ValueError 异常",
        "args": {
          "directory": "",
          "branch_name": "invalid/empty-path-branch"
        },
        "response": {
          "result": "Error creating branch: Directory does not exist: "
        },
        "execution_time": 0.0035054683685302734,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Special Characters in Name",
        "purpose": "验证工具能否处理包含特殊字符的分支名称",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "bugfix#123/@special_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Ref 'HEAD' did not resolve to an object"
        },
        "execution_time": 0.0039865970611572266,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Create Branch in Non-Git Directory",
        "purpose": "测试尝试在未初始化为 Git 仓库的目录中创建分支是否会抛出 GitCommandError",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "branch_name": "new_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Ref 'HEAD' did not resolve to an object"
        },
        "execution_time": 0.0040013790130615234,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Maximum Length Name",
        "purpose": "测试创建具有最大允许长度分支名的边界情况（通常为 Git 的分支名限制，如 255 字符）",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "a123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Ref 'HEAD' did not resolve to an object"
        },
        "execution_time": 0.004170656204223633,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch in Read-Only Repository",
        "purpose": "测试在只读 Git 仓库中尝试创建分支是否会触发权限错误",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_icons",
          "branch_name": "readonly-test-branch"
        },
        "response": {
          "result": "Error creating branch: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_icons"
        },
        "execution_time": 0.0050008296966552734,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Invalid Name Format",
        "purpose": "测试使用非法格式的分支名（如以斜杠结尾）是否会抛出 GitCommandError",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "invalid-branch-name/"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Ref 'HEAD' did not resolve to an object"
        },
        "execution_time": 0.004026174545288086,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch in Very Long Path Repository",
        "purpose": "验证在超长路径的 Git 仓库中创建分支是否成功",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_very_long_directory_name_very_long_directory_name",
          "branch_name": "long_path_branch"
        },
        "response": {
          "result": "Error creating branch: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_very_long_directory_name_very_long_directory_name"
        },
        "execution_time": 0.0035088062286376953,
        "is_functional_test": true
      }
    ],
    "git_checkout": [
      {
        "case_name": "Checkout to Valid Branch in Initialized Repository",
        "purpose": "验证在已初始化的 Git 仓库中切换到有效分支是否成功",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "target": "main"
        },
        "response": {
          "result": "Error checking out: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout main\n  stderr: 'error: pathspec 'main' did not match any file(s) known to git'"
        },
        "execution_time": 0.12873411178588867,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout to Nonexistent Branch",
        "purpose": "测试尝试切换到不存在的分支是否会抛出 GitCommandError",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "target": "nonexistent_branch"
        },
        "response": {
          "result": "Error checking out: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout nonexistent_branch\n  stderr: 'error: pathspec 'nonexistent_branch' did not match any file(s) known to git'"
        },
        "execution_time": 0.19552874565124512,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout Using Commit Hash",
        "purpose": "验证使用有效的提交哈希进行 checkout 是否成功",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "target": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391"
        },
        "response": {
          "result": "Error checking out: Cmd('git') failed due to: exit code(128)\n  cmdline: git checkout e69de29bb2d1d6434b8b29ae775ad8c2e48c5391\n  stderr: 'fatal: unable to read tree (e69de29bb2d1d6434b8b29ae775ad8c2e48c5391)'"
        },
        "execution_time": 0.18327760696411133,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout in Non-Git Directory",
        "purpose": "测试尝试在未初始化 Git 的目录中执行 checkout 是否失败",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "target": "main"
        },
        "response": {
          "result": "Error checking out: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout main\n  stderr: 'error: pathspec 'main' did not match any file(s) known to git'"
        },
        "execution_time": 0.13514018058776855,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout with Special Characters in Target",
        "purpose": "验证目标参数包含特殊字符时是否能正确处理或报错",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "target": "feature/!@#$%^&*()_+"
        },
        "response": {
          "result": "Error checking out: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout feature/!@#$%^&*()_+\n  stderr: 'error: pathspec 'feature/!@#$%^&*()_+' did not match any file(s) known to git'"
        },
        "execution_time": 0.1587061882019043,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout Without Write Permissions",
        "purpose": "模拟尝试在只读目录中执行 Git checkout 以验证安全行为",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_icons",
          "target": "main"
        },
        "response": {
          "result": "Error checking out: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_icons"
        },
        "execution_time": 0.003464937210083008,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout to Detached HEAD State",
        "purpose": "验证切换到特定提交（非分支）是否进入 detached HEAD 状态",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "target": "HEAD~1"
        },
        "response": {
          "result": "Error checking out: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout HEAD~1\n  stderr: 'error: pathspec 'HEAD~1' did not match any file(s) known to git'"
        },
        "execution_time": 0.20214271545410156,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout with Empty Target Parameter",
        "purpose": "测试目标参数为空字符串时是否抛出 ValueError",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "target": ""
        },
        "response": {
          "result": "Error checking out: Cmd('git') failed due to: exit code(128)\n  cmdline: git checkout \n  stderr: 'fatal: empty string is not a valid pathspec. please use . instead if you meant to match all paths'"
        },
        "execution_time": 0.2088334560394287,
        "is_functional_test": false
      }
    ],
    "git_show": [
      {
        "case_name": "Display Valid Commit in Initialized Repository",
        "purpose": "验证工具可以成功显示指定提交的详细信息（使用有效仓库目录和有效提交哈希）",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "49b9f922aba9cb59bb3195fcb4e28e5393dd0898"
        },
        "response": {
          "result": "Access denied test content."
        },
        "execution_time": 0.1997363567352295,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Show Commit with Invalid Directory",
        "purpose": "测试使用无效目录路径时是否抛出 ValueError 异常",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "commit_hash": "49b9f922aba9cb59bb3195fcb4e28e5393dd0898"
        },
        "response": {
          "result": "Error showing commit details: Cmd('git') failed due to: exit code(128)\n  cmdline: git show 49b9f922aba9cb59bb3195fcb4e28e5393dd0898\n  stderr: 'fatal: bad object 49b9f922aba9cb59bb3195fcb4e28e5393dd0898'"
        },
        "execution_time": 0.26311492919921875,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit with Invalid Hash",
        "purpose": "测试使用无效的提交哈希时是否抛出 ValueError 或 GitCommandError",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "invalid_hash_123456"
        },
        "response": {
          "result": "Error showing commit details: Cmd('git') failed due to: exit code(128)\n  cmdline: git show invalid_hash_123456\n  stderr: 'fatal: ambiguous argument 'invalid_hash_123456': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.16922378540039062,
        "is_functional_test": false
      },
      {
        "case_name": "Display Commit in Repository with Special Characters in Path",
        "purpose": "验证工具能否处理包含特殊字符的路径中的提交显示",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\@special#dir",
          "commit_hash": "628baa00110ce62bd2a6ac121bc14c1d7709f51d"
        },
        "response": {
          "result": "Error showing commit details: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\@special#dir"
        },
        "execution_time": 0.004001140594482422,
        "is_functional_test": true
      },
      {
        "case_name": "Access Commit in Read-Only Repository",
        "purpose": "测试尝试访问只读仓库中的提交信息是否会成功",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_icons",
          "commit_hash": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391"
        },
        "response": {
          "result": "Error showing commit details: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_icons"
        },
        "execution_time": 0.004113912582397461,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit in Very Long Path Directory",
        "purpose": "测试在超长路径目录中显示提交信息是否成功",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_very_long_directory_name_very_long_directory_name",
          "commit_hash": "198cf2eb5b18c811f29850a86927fbaa0683f1fa"
        },
        "response": {
          "result": "Error showing commit details: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_very_long_directory_name_very_long_directory_name"
        },
        "execution_time": 0.006905317306518555,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Show Commit in Non-Git Directory",
        "purpose": "测试将非 Git 目录作为参数传入时是否抛出 GitCommandError",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unauthorized_access_test.docx",
          "commit_hash": "49b9f922aba9cb59bb3195fcb4e28e5393dd0898"
        },
        "response": {
          "result": "Error showing commit details: Path is not a directory: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unauthorized_access_test.docx"
        },
        "execution_time": 0.004117488861083984,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit with Empty Hash",
        "purpose": "测试提交哈希为空时是否抛出 ValueError",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": ""
        },
        "response": {
          "result": "Error showing commit details: Cmd('git') failed due to: exit code(128)\n  cmdline: git show \n  stderr: 'fatal: ambiguous argument '': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.2337813377380371,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 103
}