{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "deepseek-v3-mcp_mongodb_manager",
  "server_path": "workspace/pipeline-output-servers/deepseek-v3/mcp_mongodb_manager/refined/server.py",
  "timestamp": "2025-07-16T11:21:22.917664",
  "tools": [
    {
      "name": "mcp_health_check",
      "description": "\n    Checks if the MongoDB server is reachable and responsive.\n\n    Returns:\n        A string indicating the health status of the MongoDB connection.\n    ",
      "args_schema": {
        "properties": {},
        "title": "mcp_health_checkArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_list_databases",
      "description": "\n    Lists all available databases in the MongoDB instance.\n\n    Returns:\n        A list of strings, where each string represents a database name.\n    ",
      "args_schema": {
        "properties": {},
        "title": "mcp_list_databasesArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_list_collections",
      "description": "\n    Lists all collections in a specified MongoDB database.\n\n    Args:\n        database_name: The name of the database to query.\n\n    Returns:\n        A list of strings, where each string represents a collection name in the specified database.\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          }
        },
        "required": [
          "database_name"
        ],
        "title": "mcp_list_collectionsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_insert_document",
      "description": "\n    Inserts a new document into a specified MongoDB collection.\n\n    Args:\n        database_name: The name of the database.\n        collection_name: The name of the collection.\n        document: The document to insert.\n\n    Returns:\n        A string indicating the success or failure of the insertion, including the inserted document's ID if successful.\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "document": {
            "title": "Document",
            "type": "object"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "document"
        ],
        "title": "mcp_insert_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_find_documents",
      "description": "\n    Queries documents in a specified MongoDB collection, with support for projection and result limiting.\n\n    Args:\n        database_name: The name of the database.\n        collection_name: The name of the collection.\n        query: The query criteria. Defaults to {} (all documents).\n        projection: The fields to include/exclude in the results. Defaults to None (all fields).\n        limit: The maximum number of documents to return. Defaults to 0 (no limit).\n\n    Returns:\n        A list of dictionaries, where each dictionary represents a matching document.\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Query"
          },
          "projection": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Projection"
          },
          "limit": {
            "default": 0,
            "title": "Limit",
            "type": "integer"
          }
        },
        "required": [
          "database_name",
          "collection_name"
        ],
        "title": "mcp_find_documentsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_update_document",
      "description": "\n    Updates documents in a specified MongoDB collection, supporting single or multiple updates.\n\n    Args:\n        database_name: The name of the database.\n        collection_name: The name of the collection.\n        query: The query criteria to select documents to update.\n        update: The update operations to apply.\n        multi: Whether to update multiple documents. Defaults to False.\n\n    Returns:\n        A string indicating the success or failure of the update, including the number of documents modified.\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "title": "Query",
            "type": "object"
          },
          "update": {
            "title": "Update",
            "type": "object"
          },
          "multi": {
            "default": false,
            "title": "Multi",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "query",
          "update"
        ],
        "title": "mcp_update_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_delete_document",
      "description": "\n    Deletes documents from a specified MongoDB collection, supporting single or batch deletion.\n\n    Args:\n        database_name: The name of the database.\n        collection_name: The name of the collection.\n        query: The query criteria to select documents to delete.\n        multi: Whether to delete multiple documents. Defaults to False.\n\n    Returns:\n        A string indicating the success or failure of the deletion, including the number of documents deleted.\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "title": "Query",
            "type": "object"
          },
          "multi": {
            "default": false,
            "title": "Multi",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "query"
        ],
        "title": "mcp_delete_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_drop_database",
      "description": "\n    Drops (deletes) an entire database.\n\n    Args:\n        database_name: The name of the database to drop.\n\n    Returns:\n        A string indicating whether the database was successfully dropped.\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          }
        },
        "required": [
          "database_name"
        ],
        "title": "mcp_drop_databaseArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_drop_collection",
      "description": "\n    Drops (deletes) a specific collection from a database.\n\n    Args:\n        database_name: The name of the database.\n        collection_name: The name of the collection to drop.\n\n    Returns:\n        A string indicating whether the collection was successfully dropped.\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          }
        },
        "required": [
          "database_name",
          "collection_name"
        ],
        "title": "mcp_drop_collectionArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "mcp_health_check": [
      {
        "case_name": "MongoDB连接健康检查成功",
        "purpose": "验证在MongoDB服务器可访问且正常运行时，工具能正确返回健康状态信息。",
        "args": {},
        "response": {
          "result": "MongoDB connection is healthy"
        },
        "execution_time": 0.0030007362365722656,
        "is_functional_test": true
      },
      {
        "case_name": "MongoDB服务未启动时的错误处理",
        "purpose": "验证当MongoDB服务未运行时，工具能够优雅地处理连接失败并返回适当的错误信息。",
        "args": {},
        "response": {
          "result": "MongoDB connection is healthy"
        },
        "execution_time": 0.0019996166229248047,
        "is_functional_test": false
      },
      {
        "case_name": "网络中断情况下健康检查失败",
        "purpose": "模拟网络中断情况，验证工具是否能够检测到无法连接MongoDB的情况，并给出明确的错误提示。",
        "args": {},
        "response": {
          "result": "MongoDB connection is healthy"
        },
        "execution_time": 0.003035306930541992,
        "is_functional_test": false
      },
      {
        "case_name": "MongoDB连接超时测试",
        "purpose": "测试工具在MongoDB响应超时时的行为，确保其不会无限等待并能及时反馈连接问题。",
        "args": {},
        "response": {
          "result": "MongoDB connection is healthy"
        },
        "execution_time": 0.0030012130737304688,
        "is_functional_test": false
      },
      {
        "case_name": "长时间运行后健康检查稳定性测试",
        "purpose": "验证工具在系统长时间运行后仍能准确检测MongoDB服务状态，确保无内存泄漏或资源耗尽问题。",
        "args": {},
        "response": {
          "result": "MongoDB connection is healthy"
        },
        "execution_time": 0.007141590118408203,
        "is_functional_test": true
      },
      {
        "case_name": "并发执行健康检查的安全性测试",
        "purpose": "测试多个线程/进程同时调用该工具时是否会出现竞争条件或资源争用问题。",
        "args": {},
        "response": {
          "result": "MongoDB connection is healthy"
        },
        "execution_time": 0.0030002593994140625,
        "is_functional_test": false
      },
      {
        "case_name": "MongoDB配置异常下的健康检查行为",
        "purpose": "验证工具在MongoDB配置错误（如权限不足、端口错误）时能否识别并返回明确的错误信息。",
        "args": {},
        "response": {
          "result": "MongoDB connection is healthy"
        },
        "execution_time": 0.006395101547241211,
        "is_functional_test": false
      },
      {
        "case_name": "健康检查日志记录完整性测试",
        "purpose": "验证工具在每次执行健康检查时是否能够正确记录日志，包括时间戳、结果和可能的错误信息。",
        "args": {},
        "response": {
          "result": "MongoDB connection is healthy"
        },
        "execution_time": 0.002998828887939453,
        "is_functional_test": true
      }
    ],
    "mcp_list_databases": [
      {
        "case_name": "列出MongoDB中所有可用数据库",
        "purpose": "验证在MongoDB服务正常运行时，工具能够正确列出当前实例中的所有数据库名称。",
        "args": {},
        "response": [
          "admin",
          "config",
          "db_with_@",
          "invalid_db_name",
          "local",
          "test_db"
        ],
        "execution_time": 0.0034973621368408203,
        "is_functional_test": true
      },
      {
        "case_name": "无权限访问数据库列表时的错误处理",
        "purpose": "验证当连接用户没有权限查看数据库列表时，工具能否正确捕获异常并返回有意义的错误信息。",
        "args": {},
        "response": [
          "admin",
          "config",
          "db_with_@",
          "invalid_db_name",
          "local",
          "test_db"
        ],
        "execution_time": 0.005014896392822266,
        "is_functional_test": false
      },
      {
        "case_name": "MongoDB服务未启动时无法列出数据库",
        "purpose": "验证当MongoDB服务未运行时，工具是否能正确识别连接失败并返回适当的错误提示。",
        "args": {},
        "response": [
          "admin",
          "config",
          "db_with_@",
          "invalid_db_name",
          "local",
          "test_db"
        ],
        "execution_time": 0.007524967193603516,
        "is_functional_test": false
      },
      {
        "case_name": "网络中断情况下无法获取数据库列表",
        "purpose": "模拟网络中断情况，验证工具是否能够检测到无法连接MongoDB的情况，并给出明确的错误提示。",
        "args": {},
        "response": [
          "admin",
          "config",
          "db_with_@",
          "invalid_db_name",
          "local",
          "test_db"
        ],
        "execution_time": 0.0029959678649902344,
        "is_functional_test": false
      },
      {
        "case_name": "MongoDB连接超时导致数据库列表获取失败",
        "purpose": "测试工具在MongoDB响应超时时的行为，确保其不会无限等待并能及时反馈连接问题。",
        "args": {},
        "response": [
          "admin",
          "config",
          "db_with_@",
          "invalid_db_name",
          "local",
          "test_db"
        ],
        "execution_time": 0.005529165267944336,
        "is_functional_test": false
      },
      {
        "case_name": "长时间运行后数据库列表获取稳定性测试",
        "purpose": "验证工具在系统长时间运行后仍能准确获取MongoDB数据库列表，确保无内存泄漏或资源耗尽问题。",
        "args": {},
        "response": [
          "admin",
          "config",
          "db_with_@",
          "invalid_db_name",
          "local",
          "test_db"
        ],
        "execution_time": 0.0044994354248046875,
        "is_functional_test": true
      },
      {
        "case_name": "并发执行获取数据库列表的安全性测试",
        "purpose": "测试多个线程/进程同时调用该工具时是否会出现竞争条件或资源争用问题。",
        "args": {},
        "response": [
          "admin",
          "config",
          "db_with_@",
          "invalid_db_name",
          "local",
          "test_db"
        ],
        "execution_time": 0.003000974655151367,
        "is_functional_test": false
      },
      {
        "case_name": "MongoDB配置异常下数据库列表获取行为",
        "purpose": "验证工具在MongoDB配置错误（如权限不足、端口错误）时能否识别并返回明确的错误信息。",
        "args": {},
        "response": [
          "admin",
          "config",
          "db_with_@",
          "invalid_db_name",
          "local",
          "test_db"
        ],
        "execution_time": 0.0030002593994140625,
        "is_functional_test": false
      }
    ],
    "mcp_list_collections": [
      {
        "case_name": "列出指定数据库中的所有集合",
        "purpose": "验证在MongoDB服务正常运行且数据库存在时，工具能够正确列出指定数据库中的所有集合名称。",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "invalid_collection_name"
        },
        "execution_time": 0.004531383514404297,
        "is_functional_test": true
      },
      {
        "case_name": "尝试列出不存在的数据库中的集合",
        "purpose": "验证当指定的数据库不存在时，工具是否能正确处理并返回空列表或适当的错误信息。",
        "args": {
          "database_name": "nonexistent_db"
        },
        "response": {
          "result": "Database 'nonexistent_db' does not exist"
        },
        "execution_time": 0.004019737243652344,
        "is_functional_test": false
      },
      {
        "case_name": "使用带有特殊字符的数据库名列出集合",
        "purpose": "验证工具是否支持数据库名称中包含特殊字符（如@、_）并能正确列出其中的集合。",
        "args": {
          "database_name": "db_with_@"
        },
        "response": {
          "result": "collection-with-special-chars"
        },
        "execution_time": 0.006120920181274414,
        "is_functional_test": true
      },
      {
        "case_name": "无效权限下访问数据库集合列表",
        "purpose": "验证当连接用户没有访问指定数据库权限时，工具能否捕获异常并返回有意义的错误提示。",
        "args": {
          "database_name": "admin"
        },
        "response": [
          "system.users",
          "system.version",
          "system_logs"
        ],
        "execution_time": 0.0025081634521484375,
        "is_functional_test": false
      },
      {
        "case_name": "MongoDB服务未启动时无法列出集合",
        "purpose": "验证当MongoDB服务未运行时，工具是否能正确识别连接失败并返回适当的错误提示。",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "invalid_collection_name"
        },
        "execution_time": 0.0030028820037841797,
        "is_functional_test": false
      },
      {
        "case_name": "网络中断情况下无法获取集合列表",
        "purpose": "模拟网络中断情况，验证工具是否能够检测到无法连接MongoDB的情况，并给出明确的错误提示。",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "invalid_collection_name"
        },
        "execution_time": 0.004001140594482422,
        "is_functional_test": false
      },
      {
        "case_name": "MongoDB连接超时导致集合列表获取失败",
        "purpose": "测试工具在MongoDB响应超时时的行为，确保其不会无限等待并能及时反馈连接问题。",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "invalid_collection_name"
        },
        "execution_time": 0.0065097808837890625,
        "is_functional_test": false
      },
      {
        "case_name": "并发执行获取集合列表的安全性测试",
        "purpose": "测试多个线程/进程同时调用该工具时是否会出现竞争条件或资源争用问题。",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "invalid_collection_name"
        },
        "execution_time": 0.002997159957885742,
        "is_functional_test": false
      }
    ],
    "mcp_insert_document": [
      {
        "case_name": "插入文档到现有集合成功",
        "purpose": "验证在数据库和集合存在的情况下，工具能够成功插入一个新文档并返回其ID。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "document": {
            "name": "Test Document",
            "content": "This is a test document."
          }
        },
        "response": {
          "result": "Document inserted successfully with ID: 68771b10f1006ddd96679b23"
        },
        "execution_time": 0.01851630210876465,
        "is_functional_test": true
      },
      {
        "case_name": "插入文档到不存在的集合自动创建集合",
        "purpose": "验证当指定的集合不存在时，工具是否能够自动创建集合并成功插入文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "document": {
            "name": "Auto Create Collection Test",
            "description": "Document inserted into a non-existent collection."
          }
        },
        "response": {
          "result": "Document inserted successfully with ID: 68771b10f1006ddd96679b24"
        },
        "execution_time": 0.019535064697265625,
        "is_functional_test": true
      },
      {
        "case_name": "插入文档到不存在的数据库自动创建数据库",
        "purpose": "验证当指定的数据库不存在时，工具是否能够自动创建数据库和集合并成功插入文档。",
        "args": {
          "database_name": "nonexistent_db",
          "collection_name": "nonexistent_collection",
          "document": {
            "name": "Auto Create DB Test",
            "description": "Document inserted into a non-existent database and collection."
          }
        },
        "response": {
          "result": "Document inserted successfully with ID: 68771b10f1006ddd96679b25"
        },
        "execution_time": 0.019514083862304688,
        "is_functional_test": true
      },
      {
        "case_name": "插入文档时数据库名称含特殊字符处理",
        "purpose": "验证数据库名称包含特殊字符时，工具是否能正确处理并插入文档。",
        "args": {
          "database_name": "db_with_@",
          "collection_name": "test_collection",
          "document": {
            "name": "Special Char DB Test",
            "description": "Document inserted into a database with special characters in name."
          }
        },
        "response": {
          "result": "Document inserted successfully with ID: 68771b10f1006ddd96679b26"
        },
        "execution_time": 0.016005754470825195,
        "is_functional_test": true
      },
      {
        "case_name": "插入文档时集合名称含特殊字符处理",
        "purpose": "验证集合名称包含特殊字符时，工具是否能正确处理并插入文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "collection#1",
          "document": {
            "name": "Special Char Collection Test",
            "description": "Document inserted into a collection with special characters in name."
          }
        },
        "response": {
          "result": "Document inserted successfully with ID: 68771b10f1006ddd96679b27"
        },
        "execution_time": 0.01604151725769043,
        "is_functional_test": true
      },
      {
        "case_name": "插入文档时使用空文档",
        "purpose": "验证工具在插入空文档时的行为，是否返回成功并插入空对象。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "document": {}
        },
        "response": {
          "result": "Document inserted successfully with ID: 68771b10f1006ddd96679b28"
        },
        "execution_time": 0.00299835205078125,
        "is_functional_test": true
      },
      {
        "case_name": "插入文档时数据库名称为空",
        "purpose": "验证数据库名称为空时，工具是否能正确捕获参数错误并返回有意义的错误信息。",
        "args": {
          "database_name": "",
          "collection_name": "test_collection",
          "document": {
            "name": "Empty DB Name Test"
          }
        },
        "response": {
          "result": "Error inserting document: database name cannot be the empty string"
        },
        "execution_time": 0.003000974655151367,
        "is_functional_test": false
      },
      {
        "case_name": "插入文档时集合名称为空",
        "purpose": "验证集合名称为空时，工具是否能正确捕获参数错误并返回有意义的错误信息。",
        "args": {
          "database_name": "test_db",
          "collection_name": "",
          "document": {
            "name": "Empty Collection Name Test"
          }
        },
        "response": {
          "result": "Error inserting document: collection names cannot be empty"
        },
        "execution_time": 0.00351715087890625,
        "is_functional_test": false
      },
      {
        "case_name": "插入文档时数据库名称为非法字符",
        "purpose": "验证数据库名称包含非法字符时，工具是否能正确捕获异常并返回错误信息。",
        "args": {
          "database_name": "invalid/db_name",
          "collection_name": "test_collection",
          "document": {
            "name": "Invalid DB Name Test"
          }
        },
        "response": {
          "result": "Error inserting document: database names cannot contain the character '/'"
        },
        "execution_time": 0.0039937496185302734,
        "is_functional_test": false
      },
      {
        "case_name": "插入文档时集合名称为非法字符",
        "purpose": "验证集合名称包含非法字符时，工具是否能正确捕获异常并返回错误信息。",
        "args": {
          "database_name": "test_db",
          "collection_name": "invalid/collection",
          "document": {
            "name": "Invalid Collection Name Test"
          }
        },
        "response": {
          "result": "Document inserted successfully with ID: 68771b10f1006ddd96679b29"
        },
        "execution_time": 0.01685333251953125,
        "is_functional_test": false
      },
      {
        "case_name": "插入文档时MongoDB服务未启动",
        "purpose": "验证当MongoDB服务未运行时，工具是否能正确识别连接失败并返回适当的错误提示。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "document": {
            "name": "MongoDB Not Running Test"
          }
        },
        "response": {
          "result": "Document inserted successfully with ID: 68771b10f1006ddd96679b2a"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": false
      },
      {
        "case_name": "插入文档时网络中断",
        "purpose": "模拟网络中断情况，验证工具是否能够检测到无法连接MongoDB的情况，并给出明确的错误提示。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "document": {
            "name": "Network Failure Test"
          }
        },
        "response": {
          "result": "Document inserted successfully with ID: 68771b10f1006ddd96679b2b"
        },
        "execution_time": 0.002504110336303711,
        "is_functional_test": false
      },
      {
        "case_name": "插入文档时MongoDB连接超时",
        "purpose": "测试工具在MongoDB响应超时时的行为，确保其不会无限等待并能及时反馈连接问题。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "document": {
            "name": "Connection Timeout Test"
          }
        },
        "response": {
          "result": "Document inserted successfully with ID: 68771b10f1006ddd96679b2c"
        },
        "execution_time": 0.0060024261474609375,
        "is_functional_test": false
      },
      {
        "case_name": "插入文档时无写入权限",
        "purpose": "验证当用户没有写入权限时，工具能否正确捕获异常并返回有意义的错误信息。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "document": {
            "name": "Unauthorized Write Test"
          }
        },
        "response": {
          "result": "Document inserted successfully with ID: 68771b10f1006ddd96679b2d"
        },
        "execution_time": 0.003002166748046875,
        "is_functional_test": false
      },
      {
        "case_name": "并发插入文档的安全性测试",
        "purpose": "测试多个线程/进程同时调用该工具时是否会出现竞争条件或资源争用问题。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "document": {
            "name": "Concurrent Insert Test",
            "thread_id": "1"
          }
        },
        "response": {
          "result": "Document inserted successfully with ID: 68771b10f1006ddd96679b2e"
        },
        "execution_time": 0.003166675567626953,
        "is_functional_test": false
      }
    ],
    "mcp_find_documents": [
      {
        "case_name": "基本查询所有文档",
        "purpose": "验证工具在指定数据库和集合中能正确返回所有文档（默认查询条件）。",
        "args": {
          "database_name": "test_db",
          "collection_name": "sample_collection"
        },
        "response": {
          "result": "{\n  \"error\": \"Collection 'sample_collection' does not exist in database 'test_db'\"\n}"
        },
        "execution_time": 0.005877494812011719,
        "is_functional_test": true
      },
      {
        "case_name": "带查询条件的文档查找",
        "purpose": "验证工具能够根据指定查询条件过滤并返回匹配的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "sample_collection",
          "query": {
            "status": "active"
          }
        },
        "response": {
          "result": "{\n  \"error\": \"Collection 'sample_collection' does not exist in database 'test_db'\"\n}"
        },
        "execution_time": 0.00852060317993164,
        "is_functional_test": true
      },
      {
        "case_name": "使用投影限制返回字段",
        "purpose": "验证工具支持通过投影参数控制返回文档的字段。",
        "args": {
          "database_name": "test_db",
          "collection_name": "sample_collection",
          "projection": {
            "_id": 0,
            "name": 1
          }
        },
        "response": {
          "result": "{\n  \"error\": \"Collection 'sample_collection' does not exist in database 'test_db'\"\n}"
        },
        "execution_time": 0.008512496948242188,
        "is_functional_test": true
      },
      {
        "case_name": "限制返回文档数量",
        "purpose": "验证工具支持通过limit参数限制返回的文档数量。",
        "args": {
          "database_name": "test_db",
          "collection_name": "sample_collection",
          "limit": 5
        },
        "response": {
          "result": "{\n  \"error\": \"Collection 'sample_collection' does not exist in database 'test_db'\"\n}"
        },
        "execution_time": 0.003506898880004883,
        "is_functional_test": true
      },
      {
        "case_name": "组合查询、投影与限制",
        "purpose": "验证工具在同时使用查询、投影和限制参数时的行为是否符合预期。",
        "args": {
          "database_name": "test_db",
          "collection_name": "sample_collection",
          "query": {
            "status": "active"
          },
          "projection": {
            "_id": 0,
            "name": 1
          },
          "limit": 3
        },
        "response": {
          "result": "{\n  \"error\": \"Collection 'sample_collection' does not exist in database 'test_db'\"\n}"
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": true
      },
      {
        "case_name": "非法数据库名称的安全性测试",
        "purpose": "验证工具在传入包含特殊字符的数据库名时能否安全处理，防止注入攻击或异常行为。",
        "args": {
          "database_name": "db_with_@",
          "collection_name": "sample_collection"
        },
        "response": {
          "result": "{\n  \"error\": \"Collection 'sample_collection' does not exist in database 'db_with_@'\"\n}"
        },
        "execution_time": 0.0035123825073242188,
        "is_functional_test": false
      },
      {
        "case_name": "无效集合名称处理",
        "purpose": "验证工具对不存在或无效集合名的处理是否返回明确错误信息。",
        "args": {
          "database_name": "test_db",
          "collection_name": "invalid_collection"
        },
        "response": {
          "result": "{\n  \"error\": \"Collection 'invalid_collection' does not exist in database 'test_db'\"\n}"
        },
        "execution_time": 0.006581783294677734,
        "is_functional_test": false
      },
      {
        "case_name": "负值限制参数边界测试",
        "purpose": "验证工具对负值limit参数的处理逻辑是否合理（如自动忽略或抛出错误）。",
        "args": {
          "database_name": "test_db",
          "collection_name": "sample_collection",
          "limit": -1
        },
        "response": {
          "result": "{\n  \"error\": \"Collection 'sample_collection' does not exist in database 'test_db'\"\n}"
        },
        "execution_time": 0.003000497817993164,
        "is_functional_test": false
      }
    ],
    "mcp_update_document": [
      {
        "case_name": "单文档更新成功测试",
        "purpose": "验证在指定查询条件下，工具能够正确更新匹配的单个文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "username": "john_doe"
          },
          "update": {
            "$set": {
              "email": "john_new@example.com"
            }
          },
          "multi": false
        },
        "response": {
          "result": "Successfully updated 0 document(s)"
        },
        "execution_time": 0.00299835205078125,
        "is_functional_test": true
      },
      {
        "case_name": "多文档更新成功测试",
        "purpose": "验证当 multi 参数为 True 时，工具能够正确更新所有匹配的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "orders",
          "query": {
            "status": "pending"
          },
          "update": {
            "$set": {
              "status": "processed"
            }
          },
          "multi": true
        },
        "response": {
          "result": "Successfully updated 0 document(s)"
        },
        "execution_time": 0.002063274383544922,
        "is_functional_test": true
      },
      {
        "case_name": "使用默认参数进行单文档更新",
        "purpose": "验证不显式设置 multi 参数时，默认行为是只更新一个匹配文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "status": "inactive"
          },
          "update": {
            "$set": {
              "status": "active"
            }
          }
        },
        "response": {
          "result": "Successfully updated 0 document(s)"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": true
      },
      {
        "case_name": "特殊字符数据库与集合名更新测试",
        "purpose": "验证工具是否支持包含特殊字符的数据库和集合名称下的文档更新操作。",
        "args": {
          "database_name": "db_with_@",
          "collection_name": "data#1",
          "query": {
            "id": 1
          },
          "update": {
            "$inc": {
              "counter": 1
            }
          },
          "multi": false
        },
        "response": {
          "result": "Successfully updated 0 document(s)"
        },
        "execution_time": 0.005051374435424805,
        "is_functional_test": true
      },
      {
        "case_name": "无匹配文档时更新结果处理",
        "purpose": "验证当查询条件没有匹配任何文档时，工具是否能优雅处理并返回合理提示信息。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "username": "nonexistent_user"
          },
          "update": {
            "$set": {
              "email": "new_email@example.com"
            }
          },
          "multi": false
        },
        "response": {
          "result": "Successfully updated 0 document(s)"
        },
        "execution_time": 0.007506370544433594,
        "is_functional_test": true
      },
      {
        "case_name": "非法更新操作注入尝试测试",
        "purpose": "验证工具是否对潜在的更新操作注入攻击具有防御能力，例如恶意 $where 子句。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "username": "admin"
          },
          "update": {
            "$where": "function() { return true; }"
          },
          "multi": false
        },
        "response": {
          "result": "Error updating document: Unknown modifier: $where. Expected a valid update modifier or pipeline-style update specified as an array, full error: {'index': 0, 'code': 9, 'errmsg': 'Unknown modifier: $where. Expected a valid update modifier or pipeline-style update specified as an array'}"
        },
        "execution_time": 0.003993511199951172,
        "is_functional_test": false
      },
      {
        "case_name": "无效数据库名称错误处理",
        "purpose": "验证当提供不存在的数据库名称时，工具是否能正确捕获异常并返回适当错误信息。",
        "args": {
          "database_name": "invalid_db",
          "collection_name": "users",
          "query": {
            "username": "john_doe"
          },
          "update": {
            "$set": {
              "email": "john_new@example.com"
            }
          },
          "multi": false
        },
        "response": {
          "result": "Successfully updated 0 document(s)"
        },
        "execution_time": 0.002999544143676758,
        "is_functional_test": false
      },
      {
        "case_name": "无效集合名称错误处理",
        "purpose": "验证当提供不存在的集合名称时，工具是否能正确捕获异常并返回适当错误信息。",
        "args": {
          "database_name": "test_db",
          "collection_name": "invalid_collection",
          "query": {
            "username": "john_doe"
          },
          "update": {
            "$set": {
              "email": "john_new@example.com"
            }
          },
          "multi": false
        },
        "response": {
          "result": "Successfully updated 0 document(s)"
        },
        "execution_time": 0.0023546218872070312,
        "is_functional_test": false
      }
    ],
    "mcp_delete_document": [
      {
        "case_name": "单个文档删除成功",
        "purpose": "验证在提供有效数据库、集合和查询条件时，工具能够正确删除一个匹配的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {
            "name": "Alice"
          },
          "multi": false
        },
        "response": {
          "result": "Successfully deleted 0 document(s)"
        },
        "execution_time": 0.008040428161621094,
        "is_functional_test": true
      },
      {
        "case_name": "批量删除多个文档成功",
        "purpose": "验证当 multi 参数设置为 True 时，工具可以正确删除所有匹配查询条件的多个文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {
            "status": "inactive"
          },
          "multi": true
        },
        "response": {
          "result": "Successfully deleted 0 document(s)"
        },
        "execution_time": 0.004999637603759766,
        "is_functional_test": true
      },
      {
        "case_name": "使用默认参数删除单个文档",
        "purpose": "验证未指定 multi 参数（默认为 False）时，是否仅删除第一个匹配的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {
            "category": "temp"
          }
        },
        "response": {
          "result": "Successfully deleted 0 document(s)"
        },
        "execution_time": 0.006107330322265625,
        "is_functional_test": true
      },
      {
        "case_name": "删除不存在的文档返回提示",
        "purpose": "验证当没有文档匹配查询条件时，工具能正确返回删除数量为0的信息。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {
            "name": "NonExistentUser"
          },
          "multi": false
        },
        "response": {
          "result": "Successfully deleted 0 document(s)"
        },
        "execution_time": 0.003983259201049805,
        "is_functional_test": true
      },
      {
        "case_name": "安全性测试 - 防止删除整个集合",
        "purpose": "验证空查询对象不被误用以删除整个集合，确保工具具备安全防护机制。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {},
          "multi": true
        },
        "response": {
          "result": "Successfully deleted 7 document(s)"
        },
        "execution_time": 0.0034856796264648438,
        "is_functional_test": false
      },
      {
        "case_name": "无效数据库名称导致删除失败",
        "purpose": "验证当提供的数据库名称不存在或无效时，工具能正确处理错误并返回提示信息。",
        "args": {
          "database_name": "invalid_db",
          "collection_name": "test_collection",
          "query": {
            "name": "Alice"
          },
          "multi": false
        },
        "response": {
          "result": "Successfully deleted 0 document(s)"
        },
        "execution_time": 0.007518768310546875,
        "is_functional_test": false
      },
      {
        "case_name": "无效集合名称导致删除失败",
        "purpose": "验证当提供的集合名称不存在或无效时，工具能正确处理错误并返回提示信息。",
        "args": {
          "database_name": "test_db",
          "collection_name": "invalid_collection",
          "query": {
            "name": "Alice"
          },
          "multi": false
        },
        "response": {
          "result": "Successfully deleted 0 document(s)"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": false
      },
      {
        "case_name": "特殊字符查询条件删除测试",
        "purpose": "验证包含特殊字符的查询条件能否被正确解析并执行删除操作。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {
            "username": "user#123"
          },
          "multi": true
        },
        "response": {
          "result": "Successfully deleted 0 document(s)"
        },
        "execution_time": 0.0030002593994140625,
        "is_functional_test": true
      }
    ],
    "mcp_drop_collection": [
      {
        "case_name": "成功删除指定集合",
        "purpose": "验证在数据库和集合存在的情况下，工具能够正确删除指定的集合。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection"
        },
        "response": {
          "result": "Collection 'test_collection' has been dropped successfully from database 'test_db'"
        },
        "execution_time": 0.004220724105834961,
        "is_functional_test": true
      },
      {
        "case_name": "尝试删除不存在的集合",
        "purpose": "验证当指定的集合不存在时，工具是否能优雅处理并返回明确的错误信息。",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection"
        },
        "response": {
          "result": "Collection 'nonexistent_collection' has been dropped successfully from database 'test_db'"
        },
        "execution_time": 0.004523038864135742,
        "is_functional_test": false
      },
      {
        "case_name": "使用无效数据库名尝试删除集合",
        "purpose": "验证当提供的数据库名称无效或不存在时，工具是否能正确识别并返回错误。",
        "args": {
          "database_name": "invalid_db",
          "collection_name": "test_collection"
        },
        "response": {
          "result": "Database 'invalid_db' does not exist"
        },
        "execution_time": 0.007032632827758789,
        "is_functional_test": false
      },
      {
        "case_name": "MongoDB服务未运行时删除集合失败",
        "purpose": "验证当MongoDB服务未启动时，工具是否能正确识别连接失败并返回适当的错误提示。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection"
        },
        "response": {
          "result": "Collection 'test_collection' does not exist in database 'test_db'"
        },
        "execution_time": 0.0059282779693603516,
        "is_functional_test": false
      },
      {
        "case_name": "网络中断情况下无法删除集合",
        "purpose": "模拟网络中断情况，验证工具是否能够检测到无法连接MongoDB的情况，并给出明确的错误提示。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection"
        },
        "response": {
          "result": "Collection 'test_collection' does not exist in database 'test_db'"
        },
        "execution_time": 0.0034418106079101562,
        "is_functional_test": false
      },
      {
        "case_name": "删除包含特殊字符的集合名",
        "purpose": "测试工具对包含特殊字符的集合名称的处理能力，确保其能正确识别并执行删除操作。",
        "args": {
          "database_name": "test_db",
          "collection_name": "special_!@#_collection"
        },
        "response": {
          "result": "Collection 'special_!@#_collection' does not exist in database 'test_db'"
        },
        "execution_time": 0.006590843200683594,
        "is_functional_test": true
      },
      {
        "case_name": "并发执行删除集合的安全性测试",
        "purpose": "测试多个线程/进程同时调用该工具时是否会出现竞争条件或资源争用问题。",
        "args": {
          "database_name": "test_db",
          "collection_name": "concurrent_collection"
        },
        "response": {
          "result": "Collection 'concurrent_collection' does not exist in database 'test_db'"
        },
        "execution_time": 0.002511739730834961,
        "is_functional_test": false
      },
      {
        "case_name": "长时间运行后删除集合的稳定性测试",
        "purpose": "验证工具在系统长时间运行后仍能准确执行删除集合操作，确保无内存泄漏或资源耗尽问题。",
        "args": {
          "database_name": "test_db",
          "collection_name": "stable_collection"
        },
        "response": {
          "result": "Collection 'stable_collection' does not exist in database 'test_db'"
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": true
      }
    ],
    "mcp_drop_database": [
      {
        "case_name": "成功删除指定数据库",
        "purpose": "验证在MongoDB服务正常运行且数据库存在时，工具能够正确删除指定的数据库。",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "Database 'test_db' has been dropped successfully"
        },
        "execution_time": 0.004510164260864258,
        "is_functional_test": true
      },
      {
        "case_name": "尝试删除不存在的数据库",
        "purpose": "验证当指定的数据库不存在时，工具是否能正确处理并返回适当的错误信息。",
        "args": {
          "database_name": "nonexistent_db"
        },
        "response": {
          "result": "Database 'nonexistent_db' has been dropped successfully"
        },
        "execution_time": 0.0030007362365722656,
        "is_functional_test": false
      },
      {
        "case_name": "删除名称中包含特殊字符的数据库",
        "purpose": "验证工具是否支持删除名称中包含特殊字符（如@、#）的数据库。",
        "args": {
          "database_name": "db_with_@"
        },
        "response": {
          "result": "Database 'db_with_@' has been dropped successfully"
        },
        "execution_time": 0.004510164260864258,
        "is_functional_test": true
      },
      {
        "case_name": "无权限访问数据库时的删除操作",
        "purpose": "验证当前用户没有删除数据库权限时，工具能否捕获异常并返回有意义的错误提示。",
        "args": {
          "database_name": "admin"
        },
        "response": {
          "result": "Error dropping database: Dropping the 'admin' database is prohibited., full error: {'ok': 0.0, 'errmsg': \"Dropping the 'admin' database is prohibited.\", 'code': 20, 'codeName': 'IllegalOperation'}"
        },
        "execution_time": 0.007004261016845703,
        "is_functional_test": false
      },
      {
        "case_name": "MongoDB服务未启动时尝试删除数据库",
        "purpose": "验证当MongoDB服务未运行时，工具是否能正确识别连接失败并拒绝执行删除操作。",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "Database 'test_db' does not exist"
        },
        "execution_time": 0.003438234329223633,
        "is_functional_test": false
      },
      {
        "case_name": "网络中断情况下无法删除数据库",
        "purpose": "模拟网络中断情况，验证工具是否能够检测到无法连接MongoDB的情况，并拒绝执行删除操作。",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "Database 'test_db' does not exist"
        },
        "execution_time": 0.005518674850463867,
        "is_functional_test": false
      },
      {
        "case_name": "删除空数据库",
        "purpose": "验证工具是否可以安全地删除一个没有任何集合和数据的空数据库。",
        "args": {
          "database_name": "empty_db"
        },
        "response": {
          "result": "Database 'empty_db' does not exist"
        },
        "execution_time": 0.002513408660888672,
        "is_functional_test": true
      },
      {
        "case_name": "并发执行数据库删除的安全性测试",
        "purpose": "测试多个线程/进程同时调用该工具时是否会出现竞争条件或资源争用问题。",
        "args": {
          "database_name": "concurrent_test_db"
        },
        "response": {
          "result": "Database 'concurrent_test_db' does not exist"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 79
}