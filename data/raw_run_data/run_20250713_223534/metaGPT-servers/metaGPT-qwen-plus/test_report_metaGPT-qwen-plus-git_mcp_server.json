{
  "server_name": "git_mcp_server",
  "parent_dir": "metaGPT-qwen-plus",
  "report_name": "metaGPT-qwen-plus-git_mcp_server",
  "server_path": "workspace\\metaGPT-servers\\metaGPT-qwen-plus\\git_mcp_server.py",
  "timestamp": "2025-07-13T22:35:36.943669",
  "tools": [
    {
      "name": "git_init",
      "description": "Initialize a new Git repository.\n\n    Args:\n        path: The directory path where to create the repository.\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_initArguments",
        "type": "object"
      }
    },
    {
      "name": "git_status",
      "description": "Get the status of a Git repository.\n\n    Args:\n        path: Path to the repository.\n\n    Returns:\n        A string containing the status output.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_statusArguments",
        "type": "object"
      }
    },
    {
      "name": "git_add",
      "description": "Add files to the staging area.\n\n    Args:\n        path: Path to the repository.\n        file_pattern: Pattern of files to add (default is all files).\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "file_pattern": {
            "default": ".",
            "title": "File Pattern",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_addArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_unstaged",
      "description": "Show differences in unstaged changes.\n\n    Args:\n        path: Path to the repository.\n\n    Returns:\n        A string containing the diff output.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_diff_unstagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_staged",
      "description": "Show differences in staged changes.\n\n    Args:\n        path: Path to the repository.\n\n    Returns:\n        A string containing the diff output.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_diff_stagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff",
      "description": "Compare two commits or branches.\n\n    Args:\n        path: Path to the repository.\n        commit_range: Range of commits to compare (e.g., 'HEAD~2..HEAD').\n\n    Returns:\n        A string containing the diff output.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "commit_range": {
            "title": "Commit Range",
            "type": "string"
          }
        },
        "required": [
          "path",
          "commit_range"
        ],
        "title": "git_diffArguments",
        "type": "object"
      }
    },
    {
      "name": "git_commit",
      "description": "Commit changes in the repository.\n\n    Args:\n        path: Path to the repository.\n        message: Commit message.\n        author: Optional author name and email (format: 'Name <email>').\n\n    Returns:\n        A string containing the commit hash.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "message": {
            "title": "Message",
            "type": "string"
          },
          "author": {
            "default": null,
            "title": "Author",
            "type": "string"
          }
        },
        "required": [
          "path",
          "message"
        ],
        "title": "git_commitArguments",
        "type": "object"
      }
    },
    {
      "name": "git_reset",
      "description": "Unstage changes in the repository.\n\n    Args:\n        path: Path to the repository.\n        file_path: Optional specific file to unstage. If None, unstages all.\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "file_path": {
            "default": null,
            "title": "File Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_resetArguments",
        "type": "object"
      }
    },
    {
      "name": "git_log",
      "description": "View commit history.\n\n    Args:\n        path: Path to the repository.\n        max_count: Maximum number of commits to show (default: 10).\n\n    Returns:\n        A string containing the commit history.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "max_count": {
            "default": 10,
            "title": "Max Count",
            "type": "integer"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_logArguments",
        "type": "object"
      }
    },
    {
      "name": "git_create_branch",
      "description": "Create a new branch.\n\n    Args:\n        path: Path to the repository.\n        branch_name: Name of the new branch.\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "path",
          "branch_name"
        ],
        "title": "git_create_branchArguments",
        "type": "object"
      }
    },
    {
      "name": "git_checkout",
      "description": "Switch to a different branch.\n\n    Args:\n        path: Path to the repository.\n        branch_name: Name of the branch to switch to.\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "path",
          "branch_name"
        ],
        "title": "git_checkoutArguments",
        "type": "object"
      }
    },
    {
      "name": "git_show",
      "description": "Display details of a specific commit.\n\n    Args:\n        path: Path to the repository.\n        commit_hash: Hash of the commit to show.\n\n    Returns:\n        A string containing the commit details.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "commit_hash": {
            "title": "Commit Hash",
            "type": "string"
          }
        },
        "required": [
          "path",
          "commit_hash"
        ],
        "title": "git_showArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "git_init": [
      {
        "case_name": "Initialize Git Repository in Valid Directory",
        "purpose": "验证工具可以在指定的有效目录中正确初始化一个新的 Git 仓库",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.1604156494140625,
        "is_functional_test": true
      },
      {
        "case_name": "Git Init with Non-Existent Path",
        "purpose": "验证工具在指定路径不存在时是否抛出 ValueError",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "execution_time": 0.20017170906066895,
        "is_functional_test": false
      },
      {
        "case_name": "Git Init with Invalid Path Format",
        "purpose": "验证工具在传入非法路径格式时是否抛出 ValueError",
        "args": {
          "path": "invalid/<path>*"
        },
        "response": {
          "error": "ToolException: Error executing tool git_init: Cmd('git') failed due to: exit code(1)\n  cmdline: git init\n  stderr: 'Failed to initialize repository: [WinError 123] 文件名、目录名或卷标语法不正确。: 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\workspace\\\\metaGPT-servers\\\\metaGPT-qwen-plus\\\\invalid\\\\<path>*''"
        },
        "execution_time": 0.003998756408691406,
        "is_functional_test": false
      },
      {
        "case_name": "Git Init in Directory WithoutWritePermission",
        "purpose": "验证工具在没有写权限的目录中是否抛出 GitCommandError",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonly_dir"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonly_dir"
        },
        "execution_time": 0.21582460403442383,
        "is_functional_test": false
      },
      {
        "case_name": "Git Init with Long Path Name",
        "purpose": "验证工具是否能处理包含长路径名的初始化请求",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz"
        },
        "execution_time": 0.2914111614227295,
        "is_functional_test": true
      },
      {
        "case_name": "Git Init in Root Directory",
        "purpose": "验证工具是否能处理根目录的 Git 初始化请求",
        "args": {
          "path": "D:\\"
        },
        "response": {
          "result": "Repository initialized at D:\\"
        },
        "execution_time": 0.24976372718811035,
        "is_functional_test": true
      },
      {
        "case_name": "Git Init with Special Characters in Path",
        "purpose": "验证工具是否能处理路径中包含特殊字符的 Git 初始化请求",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_@_dir#1"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_@_dir#1"
        },
        "execution_time": 0.3267395496368408,
        "is_functional_test": true
      },
      {
        "case_name": "Git Init in Already Initialized Repository",
        "purpose": "验证工具是否能处理已经在初始化的 Git 仓库中再次初始化的情况",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "execution_time": 0.23655271530151367,
        "is_functional_test": true
      }
    ],
    "git_status": [
      {
        "case_name": "Get Status of Valid Git Repository",
        "purpose": "验证工具可以正确获取一个有效 Git 仓库的状态信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tapp.ico\n\tmodules.xml\n\tnature.jpeg\n\tnature_converted.bmp\n\tnature_converted.jpeg\n\tnature_converted.png\n\tnonname.html\n\tpaper1.pdf\n\tpresent.html\n\tre2.doc\n\trule1.pdf\n\tswe.pptx\n\ttest_@_dir#1/\n\ttest_mskanji.csv\n\tvery_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz/\n\txue.jpg\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.15574193000793457,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status with Special Characters in Path",
        "purpose": "验证工具是否能正确处理路径中包含特殊字符的 Git 仓库状态查询",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_@_dir#1"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)"
        },
        "execution_time": 0.21179819107055664,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status in Long Path Directory",
        "purpose": "验证工具是否能处理长路径名的 Git 仓库状态查询",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)"
        },
        "execution_time": 0.18103432655334473,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status in Root Directory",
        "purpose": "验证工具是否能获取根目录 Git 仓库的状态信息",
        "args": {
          "path": "D:\\"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: Cmd('git') failed due to: exit code(128)\n  cmdline: git status\n  stderr: 'fatal: detected dubious ownership in repository at 'D:/'\n'D:/' is owned by:\n\tNT AUTHORITY/SYSTEM (S-1-5-18)\nbut the current user is:\n\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\nTo add an exception for this directory, call:\n\n\tgit config --global --add safe.directory D:/'"
        },
        "execution_time": 0.19891023635864258,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status with Invalid Path",
        "purpose": "验证工具在传入非法路径时是否抛出 ValueError",
        "args": {
          "path": "invalid/<path>*"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: Invalid repository path: invalid/<path>*"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status with Non-Existent Path",
        "purpose": "验证工具在指定路径不存在时是否抛出 ValueError",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)"
        },
        "execution_time": 0.17437195777893066,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status in Read-Only Directory",
        "purpose": "验证工具在没有写权限的目录中是否抛出 GitCommandError",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonly_dir"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)"
        },
        "execution_time": 0.20574307441711426,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status in Nested .git Directory",
        "purpose": "验证工具是否能处理嵌套的 .git 目录状态查询",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\.git"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tHEAD\n\tconfig\n\tdescription\n\thooks/\n\tinfo/\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.23743200302124023,
        "is_functional_test": true
      }
    ],
    "git_add": [
      {
        "case_name": "Add All Files in Valid Repository",
        "purpose": "验证工具能正确将指定仓库中的所有文件添加到暂存区（使用默认 file_pattern '.'）",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Cmd('git') failed due to: exit code(128)\n  cmdline: git add .\n  stderr: 'warning: in the working copy of 'nonname.html', LF will be replaced by CRLF the next time Git touches it\nerror: 'test_@_dir#1/' does not have a commit checked out\nfatal: adding files failed'"
        },
        "execution_time": 0.5617194175720215,
        "is_functional_test": true
      },
      {
        "case_name": "Add Specific File Pattern to Staging Area",
        "purpose": "验证工具能正确将符合特定模式的文件添加到暂存区",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_pattern": "*.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Cmd('git') failed due to: exit code(128)\n  cmdline: git add *.txt\n  stderr: 'fatal: pathspec '*.txt' did not match any files'"
        },
        "execution_time": 0.3852415084838867,
        "is_functional_test": true
      },
      {
        "case_name": "Add File with Special Characters in Path",
        "purpose": "验证工具能否处理包含特殊字符的路径中文件的添加操作",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_@_dir#1",
          "file_pattern": "*.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Cmd('git') failed due to: exit code(128)\n  cmdline: git add *.txt\n  stderr: 'fatal: pathspec '*.txt' did not match any files'"
        },
        "execution_time": 0.36678099632263184,
        "is_functional_test": true
      },
      {
        "case_name": "Add File in Nested .git Directory",
        "purpose": "验证工具是否能正确处理嵌套 .git 目录中的文件添加操作",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\.git",
          "file_pattern": "hooks/*.sample"
        },
        "response": {
          "result": "Added 'hooks/*.sample' to staging area in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\.git"
        },
        "execution_time": 0.45104336738586426,
        "is_functional_test": true
      },
      {
        "case_name": "Add File with Invalid Path",
        "purpose": "验证工具在传入非法路径时是否抛出 ValueError",
        "args": {
          "path": "invalid/<path>*",
          "file_pattern": "*.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Invalid repository path: invalid/<path>*"
        },
        "execution_time": 0.011001825332641602,
        "is_functional_test": false
      },
      {
        "case_name": "Add File in Non-Existent Directory",
        "purpose": "验证工具在指定路径不存在时是否抛出 GitCommandError",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "file_pattern": "*.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Cmd('git') failed due to: exit code(128)\n  cmdline: git add *.txt\n  stderr: 'fatal: pathspec '*.txt' did not match any files'"
        },
        "execution_time": 0.3611898422241211,
        "is_functional_test": false
      },
      {
        "case_name": "Add File in Read-Only Directory",
        "purpose": "验证工具在没有写权限的目录中是否抛出 GitCommandError",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonly_dir",
          "file_pattern": "*.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Cmd('git') failed due to: exit code(128)\n  cmdline: git add *.txt\n  stderr: 'fatal: pathspec '*.txt' did not match any files'"
        },
        "execution_time": 0.4194622039794922,
        "is_functional_test": false
      },
      {
        "case_name": "Add File with Long Path Name",
        "purpose": "验证工具是否能处理长路径名的文件添加操作",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz",
          "file_pattern": "*.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Cmd('git') failed due to: exit code(128)\n  cmdline: git add *.txt\n  stderr: 'fatal: pathspec '*.txt' did not match any files'"
        },
        "execution_time": 0.3727998733520508,
        "is_functional_test": true
      }
    ],
    "git_diff_unstaged": [
      {
        "case_name": "Git Diff Unstaged in Valid Repository",
        "purpose": "验证工具可以正确显示有效 Git 仓库中未暂存的更改差异",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.31748223304748535,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Unstaged with Special Characters in Path",
        "purpose": "验证工具是否能处理路径中包含特殊字符的未暂存更改差异查询",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_@_dir#1"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.4706425666809082,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Unstaged in Long Path Directory",
        "purpose": "验证工具是否能处理长路径名的未暂存更改差异查询",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.6058800220489502,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Unstaged with Invalid Path",
        "purpose": "验证工具在传入非法路径时是否抛出 ValueError",
        "args": {
          "path": "invalid/<path>*"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: Invalid repository path: invalid/<path>*"
        },
        "execution_time": 0.006298542022705078,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Unstaged with Non-Existent Path",
        "purpose": "验证工具在指定路径不存在时是否抛出 ValueError",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.6559231281280518,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Unstaged in Read-Only Directory",
        "purpose": "验证工具在没有写权限的目录中是否抛出 GitCommandError",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonly_dir"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.4052846431732178,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Unstaged in Root Directory",
        "purpose": "验证工具是否能获取根目录 Git 仓库的未暂存更改差异信息",
        "args": {
          "path": "D:\\"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: Cmd('git') failed due to: exit code(129)\n  cmdline: git diff\n  stderr: 'warning: Not a git repository. Use --no-index to compare two paths outside a working tree\nusage: git diff --no-index [<options>] <path> <path>\n\nDiff output format options\n    -p, --patch           generate patch\n    -s, --no-patch        suppress diff output\n    -u                    generate patch\n    -U, --unified[=<n>]   generate diffs with <n> lines context\n    -W, --[no-]function-context\n                          generate diffs with <n> lines context\n    --raw                 generate the diff in raw format\n    --patch-with-raw      synonym for '-p --raw'\n    --patch-with-stat     synonym for '-p --stat'\n    --numstat             machine friendly --stat\n    --shortstat           output only the last line of --stat\n    -X, --dirstat[=<param1>,<param2>...]\n                          output the distribution of relative amount of changes for each sub-directory\n    --cumulative          synonym for --dirstat=cumulative\n    --dirstat-by-file[=<param1>,<param2>...]\n                          synonym for --dirstat=files,<param1>,<param2>...\n    --check               warn if changes introduce conflict markers or whitespace errors\n    --summary             condensed summary such as creations, renames and mode changes\n    --name-only           show only names of changed files\n    --name-status         show only names and status of changed files\n    --stat[=<width>[,<name-width>[,<count>]]]\n                          generate diffstat\n    --stat-width <width>  generate diffstat with a given width\n    --stat-name-width <width>\n                          generate diffstat with a given name width\n    --stat-graph-width <width>\n                          generate diffstat with a given graph width\n    --stat-count <count>  generate diffstat with limited lines\n    --[no-]compact-summary\n                          generate compact summary in diffstat\n    --binary              output a binary diff that can be applied\n    --[no-]full-index     show full pre- and post-image object names on the \"index\" lines\n    --[no-]color[=<when>] show colored diff\n    --ws-error-highlight <kind>\n                          highlight whitespace errors in the 'context', 'old' or 'new' lines in the diff\n    -z                    do not munge pathnames and use NULs as output field terminators in --raw or --numstat\n    --[no-]abbrev[=<n>]   use <n> digits to display object names\n    --src-prefix <prefix> show the given source prefix instead of \"a/\"\n    --dst-prefix <prefix> show the given destination prefix instead of \"b/\"\n    --line-prefix <prefix>\n                          prepend an additional prefix to every line of output\n    --no-prefix           do not show any source or destination prefix\n    --default-prefix      use default prefixes a/ and b/\n    --inter-hunk-context <n>\n                          show context between diff hunks up to the specified number of lines\n    --output-indicator-new <char>\n                          specify the character to indicate a new line instead of '+'\n    --output-indicator-old <char>\n                          specify the character to indicate an old line instead of '-'\n    --output-indicator-context <char>\n                          specify the character to indicate a context instead of ' '\n\nDiff rename options\n    -B, --break-rewrites[=<n>[/<m>]]\n                          break complete rewrite changes into pairs of delete and create\n    -M, --find-renames[=<n>]\n                          detect renames\n    -D, --irreversible-delete\n                          omit the preimage for deletes\n    -C, --find-copies[=<n>]\n                          detect copies\n    --[no-]find-copies-harder\n                          use unmodified files as source to find copies\n    --no-renames          disable rename detection\n    --[no-]rename-empty   use empty blobs as rename source\n    --[no-]follow         continue listing the history of a file beyond renames\n    -l <n>                prevent rename/copy detection if the number of rename/copy targets exceeds given limit\n\nDiff algorithm options\n    --minimal             produce the smallest possible diff\n    -w, --ignore-all-space\n                          ignore whitespace when comparing lines\n    -b, --ignore-space-change\n                          ignore changes in amount of whitespace\n    --ignore-space-at-eol ignore changes in whitespace at EOL\n    --ignore-cr-at-eol    ignore carrier-return at the end of line\n    --ignore-blank-lines  ignore changes whose lines are all blank\n    -I, --[no-]ignore-matching-lines <regex>\n                          ignore changes whose all lines match <regex>\n    --[no-]indent-heuristic\n                          heuristic to shift diff hunk boundaries for easy reading\n    --patience            generate diff using the \"patience diff\" algorithm\n    --histogram           generate diff using the \"histogram diff\" algorithm\n    --diff-algorithm <algorithm>\n                          choose a diff algorithm\n    --anchored <text>     generate diff using the \"anchored diff\" algorithm\n    --word-diff[=<mode>]  show word diff, using <mode> to delimit changed words\n    --word-diff-regex <regex>\n                          use <regex> to decide what a word is\n    --color-words[=<regex>]\n                          equivalent to --word-diff=color --word-diff-regex=<regex>\n    --[no-]color-moved[=<mode>]\n                          moved lines of code are colored differently\n    --[no-]color-moved-ws <mode>\n                          how white spaces are ignored in --color-moved\n\nOther diff options\n    --[no-]relative[=<prefix>]\n                          when run from subdir, exclude changes outside and show relative paths\n    -a, --[no-]text       treat all files as text\n    -R                    swap two inputs, reverse the diff\n    --[no-]exit-code      exit with 1 if there were differences, 0 otherwise\n    --[no-]quiet          disable all output of the program\n    --[no-]ext-diff       allow an external diff helper to be executed\n    --[no-]textconv       run external text conversion filters when comparing binary files\n    --ignore-submodules[=<when>]\n                          ignore changes to submodules in the diff generation\n    --submodule[=<format>]\n                          specify how differences in submodules are shown\n    --ita-invisible-in-index\n                          hide 'git add -N' entries from the index\n    --ita-visible-in-index\n                          treat 'git add -N' entries as real in the index\n    -S <string>           look for differences that change the number of occurrences of the specified string\n    -G <regex>            look for differences that change the number of occurrences of the specified regex\n    --pickaxe-all         show all changes in the changeset with -S or -G\n    --pickaxe-regex       treat <string> in -S as extended POSIX regular expression\n    -O <file>             control the order in which files appear in the output\n    --rotate-to <path>    show the change in the specified path first\n    --skip-to <path>      skip the output to the specified path\n    --find-object <object-id>\n                          look for differences that change the number of occurrences of the specified object\n    --diff-filter [(A|C|D|M|R|T|U|X|B)...[*]]\n                          select files by diff type\n    --output <file>       output to a specific file\n'"
        },
        "execution_time": 0.6319622993469238,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Unstaged in Nested .git Directory",
        "purpose": "验证工具是否能处理嵌套的 .git 目录未暂存更改差异查询",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\.git"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.7428226470947266,
        "is_functional_test": true
      }
    ],
    "git_commit": [
      {
        "case_name": "Commit Changes in Valid Repository",
        "purpose": "验证工具可以在已初始化的 Git 仓库中正确提交更改",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Initial commit"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Cmd('git') failed due to: exit code(1)\n  cmdline: git commit -m Initial commit\n  stdout: 'On branch master\n\nInitial commit\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tapp.ico\n\textracted_page2.pdf\n\tmodules.xml\n\tnature.jpeg\n\tnature_converted.bmp\n\tnature_converted.jpeg\n\tnature_converted.png\n\tnonname.html\n\tpaper1.pdf\n\tpresent.html\n\tre2.doc\n\trule1.pdf\n\tsingle_merged_output.pdf\n\tswe.pptx\n\ttest_mskanji.csv\n\txue.jpg\n\nnothing added to commit but untracked files present (use \"git add\" to track)'"
        },
        "execution_time": 0.1757347583770752,
        "is_functional_test": true
      },
      {
        "case_name": "Commit with Author Specification",
        "purpose": "验证工具支持指定提交作者信息进行提交",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Commit with author",
          "author": "Test User <test.user@example.com>"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Cmd('git') failed due to: exit code(1)\n  cmdline: git commit -m Commit with author --author=Test User <test.user@example.com>\n  stdout: 'On branch master\n\nInitial commit\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tapp.ico\n\textracted_page2.pdf\n\tmodules.xml\n\tnature.jpeg\n\tnature_converted.bmp\n\tnature_converted.jpeg\n\tnature_converted.png\n\tnonname.html\n\tpaper1.pdf\n\tpresent.html\n\tre2.doc\n\trule1.pdf\n\tsingle_merged_output.pdf\n\tswe.pptx\n\ttest_mskanji.csv\n\txue.jpg\n\nnothing added to commit but untracked files present (use \"git add\" to track)'"
        },
        "execution_time": 0.16972136497497559,
        "is_functional_test": true
      },
      {
        "case_name": "Commit in Special Character Path Repository",
        "purpose": "验证工具可以在路径包含特殊字符的 Git 仓库中提交更改",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_@_dir#1",
          "message": "Commit in special path"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_@_dir#1"
        },
        "execution_time": 0.0039980411529541016,
        "is_functional_test": true
      },
      {
        "case_name": "Commit in Long Path Directory",
        "purpose": "验证工具是否能处理长路径名的 Git 提交操作",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz",
          "message": "Commit in long path directory"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz"
        },
        "execution_time": 0.0029985904693603516,
        "is_functional_test": true
      },
      {
        "case_name": "Commit with Empty Message",
        "purpose": "验证工具在提交消息为空时是否抛出 GitCommandError",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Cmd('git') failed due to: exit code(1)\n  cmdline: git commit -m \n  stdout: 'On branch master\n\nInitial commit\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tapp.ico\n\textracted_page2.pdf\n\tmodules.xml\n\tnature.jpeg\n\tnature_converted.bmp\n\tnature_converted.jpeg\n\tnature_converted.png\n\tnonname.html\n\tpaper1.pdf\n\tpresent.html\n\tre2.doc\n\trule1.pdf\n\tsingle_merged_output.pdf\n\tswe.pptx\n\ttest_mskanji.csv\n\txue.jpg\n\nnothing added to commit but untracked files present (use \"git add\" to track)'"
        },
        "execution_time": 0.21322846412658691,
        "is_functional_test": false
      },
      {
        "case_name": "Commit in Read-Only Directory",
        "purpose": "验证工具在没有写权限的目录中是否抛出 GitCommandError",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonly_dir",
          "message": "Commit in read-only directory"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Cmd('git') failed due to: exit code(1)\n  cmdline: git commit -m Commit in read-only directory\n  stdout: 'On branch master\n\nInitial commit\n\nnothing to commit (create/copy files and use \"git add\" to track)'"
        },
        "execution_time": 0.20747160911560059,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Invalid Path Format",
        "purpose": "验证工具在传入非法路径格式时是否抛出 ValueError",
        "args": {
          "path": "invalid/<path>*",
          "message": "Commit with invalid path"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Invalid repository path: invalid/<path>*"
        },
        "execution_time": 0.004513263702392578,
        "is_functional_test": false
      },
      {
        "case_name": "Commit to Nested .git Directory",
        "purpose": "验证工具是否能处理嵌套的 .git 目录提交操作",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\.git",
          "message": "Commit to nested .git directory"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\.git"
        },
        "execution_time": 0.004999637603759766,
        "is_functional_test": true
      }
    ],
    "git_diff_staged": [
      {
        "case_name": "Show Diff of Staged Changes in Valid Repository",
        "purpose": "验证工具可以正确显示一个有效 Git 仓库中已暂存更改的差异信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.23320603370666504,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Staged with Special Characters in Path",
        "purpose": "验证工具是否能正确处理路径中包含特殊字符的 Git 暂存区差异查询",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_@_dir#1"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_@_dir#1"
        },
        "execution_time": 0.004999637603759766,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Staged in Long Path Directory",
        "purpose": "验证工具是否能处理长路径名的 Git 暂存区差异查询",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz"
        },
        "execution_time": 0.006000518798828125,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Staged with Invalid Path",
        "purpose": "验证工具在传入非法路径时是否抛出 ValueError",
        "args": {
          "path": "invalid/<path>*"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: Invalid repository path: invalid/<path>*"
        },
        "execution_time": 0.007011890411376953,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Staged with Non-Existent Path",
        "purpose": "验证工具在指定路径不存在时是否抛出 ValueError",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.23936772346496582,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Staged in Read-Only Directory",
        "purpose": "验证工具在没有写权限的目录中是否抛出 GitCommandError",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonly_dir"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.26909804344177246,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Staged in Root Directory",
        "purpose": "验证工具是否能获取根目录 Git 仓库的暂存区差异信息",
        "args": {
          "path": "D:\\"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: Cmd('git') failed due to: exit code(129)\n  cmdline: git diff --cached\n  stderr: 'error: unknown option `cached'\nusage: git diff --no-index [<options>] <path> <path>\n\nDiff output format options\n    -p, --patch           generate patch\n    -s, --no-patch        suppress diff output\n    -u                    generate patch\n    -U, --unified[=<n>]   generate diffs with <n> lines context\n    -W, --[no-]function-context\n                          generate diffs with <n> lines context\n    --raw                 generate the diff in raw format\n    --patch-with-raw      synonym for '-p --raw'\n    --patch-with-stat     synonym for '-p --stat'\n    --numstat             machine friendly --stat\n    --shortstat           output only the last line of --stat\n    -X, --dirstat[=<param1>,<param2>...]\n                          output the distribution of relative amount of changes for each sub-directory\n    --cumulative          synonym for --dirstat=cumulative\n    --dirstat-by-file[=<param1>,<param2>...]\n                          synonym for --dirstat=files,<param1>,<param2>...\n    --check               warn if changes introduce conflict markers or whitespace errors\n    --summary             condensed summary such as creations, renames and mode changes\n    --name-only           show only names of changed files\n    --name-status         show only names and status of changed files\n    --stat[=<width>[,<name-width>[,<count>]]]\n                          generate diffstat\n    --stat-width <width>  generate diffstat with a given width\n    --stat-name-width <width>\n                          generate diffstat with a given name width\n    --stat-graph-width <width>\n                          generate diffstat with a given graph width\n    --stat-count <count>  generate diffstat with limited lines\n    --[no-]compact-summary\n                          generate compact summary in diffstat\n    --binary              output a binary diff that can be applied\n    --[no-]full-index     show full pre- and post-image object names on the \"index\" lines\n    --[no-]color[=<when>] show colored diff\n    --ws-error-highlight <kind>\n                          highlight whitespace errors in the 'context', 'old' or 'new' lines in the diff\n    -z                    do not munge pathnames and use NULs as output field terminators in --raw or --numstat\n    --[no-]abbrev[=<n>]   use <n> digits to display object names\n    --src-prefix <prefix> show the given source prefix instead of \"a/\"\n    --dst-prefix <prefix> show the given destination prefix instead of \"b/\"\n    --line-prefix <prefix>\n                          prepend an additional prefix to every line of output\n    --no-prefix           do not show any source or destination prefix\n    --default-prefix      use default prefixes a/ and b/\n    --inter-hunk-context <n>\n                          show context between diff hunks up to the specified number of lines\n    --output-indicator-new <char>\n                          specify the character to indicate a new line instead of '+'\n    --output-indicator-old <char>\n                          specify the character to indicate an old line instead of '-'\n    --output-indicator-context <char>\n                          specify the character to indicate a context instead of ' '\n\nDiff rename options\n    -B, --break-rewrites[=<n>[/<m>]]\n                          break complete rewrite changes into pairs of delete and create\n    -M, --find-renames[=<n>]\n                          detect renames\n    -D, --irreversible-delete\n                          omit the preimage for deletes\n    -C, --find-copies[=<n>]\n                          detect copies\n    --[no-]find-copies-harder\n                          use unmodified files as source to find copies\n    --no-renames          disable rename detection\n    --[no-]rename-empty   use empty blobs as rename source\n    --[no-]follow         continue listing the history of a file beyond renames\n    -l <n>                prevent rename/copy detection if the number of rename/copy targets exceeds given limit\n\nDiff algorithm options\n    --minimal             produce the smallest possible diff\n    -w, --ignore-all-space\n                          ignore whitespace when comparing lines\n    -b, --ignore-space-change\n                          ignore changes in amount of whitespace\n    --ignore-space-at-eol ignore changes in whitespace at EOL\n    --ignore-cr-at-eol    ignore carrier-return at the end of line\n    --ignore-blank-lines  ignore changes whose lines are all blank\n    -I, --[no-]ignore-matching-lines <regex>\n                          ignore changes whose all lines match <regex>\n    --[no-]indent-heuristic\n                          heuristic to shift diff hunk boundaries for easy reading\n    --patience            generate diff using the \"patience diff\" algorithm\n    --histogram           generate diff using the \"histogram diff\" algorithm\n    --diff-algorithm <algorithm>\n                          choose a diff algorithm\n    --anchored <text>     generate diff using the \"anchored diff\" algorithm\n    --word-diff[=<mode>]  show word diff, using <mode> to delimit changed words\n    --word-diff-regex <regex>\n                          use <regex> to decide what a word is\n    --color-words[=<regex>]\n                          equivalent to --word-diff=color --word-diff-regex=<regex>\n    --[no-]color-moved[=<mode>]\n                          moved lines of code are colored differently\n    --[no-]color-moved-ws <mode>\n                          how white spaces are ignored in --color-moved\n\nOther diff options\n    --[no-]relative[=<prefix>]\n                          when run from subdir, exclude changes outside and show relative paths\n    -a, --[no-]text       treat all files as text\n    -R                    swap two inputs, reverse the diff\n    --[no-]exit-code      exit with 1 if there were differences, 0 otherwise\n    --[no-]quiet          disable all output of the program\n    --[no-]ext-diff       allow an external diff helper to be executed\n    --[no-]textconv       run external text conversion filters when comparing binary files\n    --ignore-submodules[=<when>]\n                          ignore changes to submodules in the diff generation\n    --submodule[=<format>]\n                          specify how differences in submodules are shown\n    --ita-invisible-in-index\n                          hide 'git add -N' entries from the index\n    --ita-visible-in-index\n                          treat 'git add -N' entries as real in the index\n    -S <string>           look for differences that change the number of occurrences of the specified string\n    -G <regex>            look for differences that change the number of occurrences of the specified regex\n    --pickaxe-all         show all changes in the changeset with -S or -G\n    --pickaxe-regex       treat <string> in -S as extended POSIX regular expression\n    -O <file>             control the order in which files appear in the output\n    --rotate-to <path>    show the change in the specified path first\n    --skip-to <path>      skip the output to the specified path\n    --find-object <object-id>\n                          look for differences that change the number of occurrences of the specified object\n    --diff-filter [(A|C|D|M|R|T|U|X|B)...[*]]\n                          select files by diff type\n    --output <file>       output to a specific file\n'"
        },
        "execution_time": 0.28194189071655273,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Staged in Nested .git Directory",
        "purpose": "验证工具是否能处理嵌套的 .git 目录暂存区差异查询",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\.git"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\.git"
        },
        "execution_time": 0.009004592895507812,
        "is_functional_test": true
      }
    ],
    "git_log": [
      {
        "case_name": "View Commit History in Valid Git Repository",
        "purpose": "验证工具可以在一个已初始化的 Git 仓库中正确显示提交历史（使用默认 max_count=10）",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Cmd('git') failed due to: exit code(128)\n  cmdline: git log -n 10\n  stderr: 'fatal: your current branch 'master' does not have any commits yet'"
        },
        "execution_time": 0.12036013603210449,
        "is_functional_test": true
      },
      {
        "case_name": "View Commit History with Custom Max Count",
        "purpose": "验证工具可以限制显示的提交数量为指定的 max_count 值",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "max_count": 5
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Cmd('git') failed due to: exit code(128)\n  cmdline: git log -n 5\n  stderr: 'fatal: your current branch 'master' does not have any commits yet'"
        },
        "execution_time": 0.17977595329284668,
        "is_functional_test": true
      },
      {
        "case_name": "Git Log in Nested .git Directory",
        "purpose": "验证工具是否能处理嵌套的 .git 目录并返回正确的提交历史",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\.git"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\.git"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": true
      },
      {
        "case_name": "Git Log with Special Characters in Path",
        "purpose": "验证工具是否能处理路径中包含特殊字符的提交历史查询",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_@_dir#1"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_@_dir#1"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": true
      },
      {
        "case_name": "Git Log in Long Path Directory",
        "purpose": "验证工具是否能处理长路径名的 Git 仓库提交历史查询",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz"
        },
        "execution_time": 0.005997180938720703,
        "is_functional_test": true
      },
      {
        "case_name": "Git Log with Non-Existent Path",
        "purpose": "验证工具在指定路径不存在时是否抛出 ValueError",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Cmd('git') failed due to: exit code(128)\n  cmdline: git log -n 10\n  stderr: 'fatal: your current branch 'master' does not have any commits yet'"
        },
        "execution_time": 0.12223958969116211,
        "is_functional_test": false
      },
      {
        "case_name": "Git Log with Invalid Path Format",
        "purpose": "验证工具在传入非法路径格式时是否抛出 ValueError",
        "args": {
          "path": "invalid/<path>*"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Invalid repository path: invalid/<path>*"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": false
      },
      {
        "case_name": "Git Log in Read-Only Directory",
        "purpose": "验证工具在没有写权限的目录中是否抛出 GitCommandError",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonly_dir"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Cmd('git') failed due to: exit code(128)\n  cmdline: git log -n 10\n  stderr: 'fatal: your current branch 'master' does not have any commits yet'"
        },
        "execution_time": 0.1622145175933838,
        "is_functional_test": false
      }
    ],
    "git_create_branch": [
      {
        "case_name": "Create New Branch in Valid Repository",
        "purpose": "验证工具可以在已初始化的 Git 仓库中成功创建一个新分支",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/new-feature"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Cmd('git') failed due to: exit code(128)\n  cmdline: git branch feature/new-feature\n  stderr: 'fatal: not a valid object name: 'master''"
        },
        "execution_time": 0.21834683418273926,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch with Empty Name",
        "purpose": "验证工具在传入空分支名时是否抛出 ValueError",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Cmd('git') failed due to: exit code(128)\n  cmdline: git branch \n  stderr: 'fatal: '' is not a valid branch name\nhint: See `man git check-ref-format`\nhint: Disable this message with \"git config advice.refSyntax false\"'"
        },
        "execution_time": 0.20145344734191895,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Special Characters",
        "purpose": "验证工具是否能处理包含特殊字符的分支名",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "bug/fix#123@dev"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Cmd('git') failed due to: exit code(128)\n  cmdline: git branch bug/fix#123@dev\n  stderr: 'fatal: not a valid object name: 'master''"
        },
        "execution_time": 0.19535183906555176,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch in Non-Existent Repository",
        "purpose": "验证工具在指定路径不存在 Git 仓库时是否抛出 GitCommandError",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_repo",
          "branch_name": "new_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_repo"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch in Read-Only Directory",
        "purpose": "验证工具在没有写权限的目录中是否抛出 GitCommandError",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonly_dir",
          "branch_name": "feature/read-only-test"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Cmd('git') failed due to: exit code(128)\n  cmdline: git branch feature/read-only-test\n  stderr: 'fatal: not a valid object name: 'master''"
        },
        "execution_time": 0.1531057357788086,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Long Name",
        "purpose": "验证工具是否能处理超长分支名的情况",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "very_long_branch_name_abcdefghijklmnopqrstuvwxyz1234567890"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Cmd('git') failed due to: exit code(128)\n  cmdline: git branch very_long_branch_name_abcdefghijklmnopqrstuvwxyz1234567890\n  stderr: 'fatal: not a valid object name: 'master''"
        },
        "execution_time": 0.1659245491027832,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch with Invalid Path Format",
        "purpose": "验证工具在传入非法路径格式时是否抛出 ValueError",
        "args": {
          "path": "invalid/<path>*",
          "branch_name": "new_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Invalid repository path: invalid/<path>*"
        },
        "execution_time": 0.003506898880004883,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch in Nested .git Directory",
        "purpose": "验证工具是否能在嵌套的 .git 目录中创建新分支",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\.git",
          "branch_name": "nested_git_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\.git"
        },
        "execution_time": 0.004001617431640625,
        "is_functional_test": true
      }
    ],
    "git_checkout": [
      {
        "case_name": "Checkout to Valid Branch in Initialized Repository",
        "purpose": "验证工具可以在已初始化的 Git 仓库中切换到指定的有效分支",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "main"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout main\n  stderr: 'error: pathspec 'main' did not match any file(s) known to git'"
        },
        "execution_time": 0.13166356086730957,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout with Invalid Path Format",
        "purpose": "验证工具在传入非法路径格式时是否抛出 ValueError",
        "args": {
          "path": "invalid/<path>*",
          "branch_name": "main"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Invalid repository path: invalid/<path>*"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout to Non-Existent Branch",
        "purpose": "验证工具在尝试切换到不存在的分支时是否抛出 GitCommandError",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "nonexistent_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout nonexistent_branch\n  stderr: 'error: pathspec 'nonexistent_branch' did not match any file(s) known to git'"
        },
        "execution_time": 0.14266157150268555,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout in Read-Only Directory",
        "purpose": "验证工具在没有写权限的目录中是否抛出 GitCommandError",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonly_dir",
          "branch_name": "main"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout main\n  stderr: 'error: pathspec 'main' did not match any file(s) known to git'"
        },
        "execution_time": 0.16452836990356445,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout with Special Characters in Branch Name",
        "purpose": "验证工具是否能处理包含特殊字符的分支名切换请求",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/test@#123"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout feature/test@#123\n  stderr: 'error: pathspec 'feature/test@#123' did not match any file(s) known to git'"
        },
        "execution_time": 0.16331839561462402,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout in Nested .git Directory",
        "purpose": "验证工具是否能处理嵌套的 .git 目录中的分支切换操作",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\.git",
          "branch_name": "main"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\.git"
        },
        "execution_time": 0.004217624664306641,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout with Long Branch Name",
        "purpose": "验证工具是否能处理长分支名称的切换请求",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz\n  stderr: 'error: pathspec 'very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz' did not match any file(s) known to git'"
        },
        "execution_time": 0.13418245315551758,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout in Root Directory",
        "purpose": "验证工具是否能在根目录 Git 仓库中执行分支切换操作",
        "args": {
          "path": "D:\\",
          "branch_name": "main"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Cmd('git') failed due to: exit code(128)\n  cmdline: git checkout main\n  stderr: 'fatal: detected dubious ownership in repository at 'D:/'\n'D:/' is owned by:\n\tNT AUTHORITY/SYSTEM (S-1-5-18)\nbut the current user is:\n\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\nTo add an exception for this directory, call:\n\n\tgit config --global --add safe.directory D:/'"
        },
        "execution_time": 0.15694260597229004,
        "is_functional_test": true
      }
    ],
    "git_diff": [
      {
        "case_name": "Git Diff Between Valid Commits in Repository",
        "purpose": "验证工具可以正确比较两个有效的提交之间的差异",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_range": "HEAD~2..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff HEAD~2..HEAD\n  stderr: 'fatal: ambiguous argument 'HEAD~2..HEAD': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.1832742691040039,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff with Empty Commit Range",
        "purpose": "验证工具在未指定提交范围时是否抛出 ValueError",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_range": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff \n  stderr: 'fatal: ambiguous argument '': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.1618366241455078,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff with Invalid Path",
        "purpose": "验证工具在传入非法路径时是否抛出 ValueError",
        "args": {
          "path": "invalid/<path>*",
          "commit_range": "HEAD~2..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Invalid repository path: invalid/<path>*"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff with Non-Existent Path",
        "purpose": "验证工具在指定路径不存在时是否抛出 ValueError",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "commit_range": "HEAD~2..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff HEAD~2..HEAD\n  stderr: 'fatal: ambiguous argument 'HEAD~2..HEAD': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.17035388946533203,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff in Read-Only Directory",
        "purpose": "验证工具在没有写权限的目录中是否抛出 GitCommandError",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonly_dir",
          "commit_range": "HEAD~2..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff HEAD~2..HEAD\n  stderr: 'fatal: ambiguous argument 'HEAD~2..HEAD': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.18462705612182617,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff with Special Characters in Path",
        "purpose": "验证工具是否能处理路径中包含特殊字符的 diff 操作",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_@_dir#1",
          "commit_range": "HEAD~2..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_@_dir#1"
        },
        "execution_time": 0.00299835205078125,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff with Long Path Name",
        "purpose": "验证工具是否能处理长路径名的 Git diff 操作",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz",
          "commit_range": "HEAD~2..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz"
        },
        "execution_time": 0.00299835205078125,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff in Nested .git Directory",
        "purpose": "验证工具是否能处理嵌套的 .git 目录 diff 查询",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\.git",
          "commit_range": "HEAD~2..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\.git"
        },
        "execution_time": 0.005001068115234375,
        "is_functional_test": true
      }
    ],
    "git_show": [
      {
        "case_name": "Show Details of a Valid Commit",
        "purpose": "验证工具可以正确显示指定有效提交的详细信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "a5b2226638e1261d27b580631c4014916ac86bee"
        },
        "response": {
          "error": "Tool call 'git_show' was cancelled."
        },
        "execution_time": 50.00311541557312,
        "is_functional_test": true
      },
      {
        "case_name": "Git Show with Special Characters in Path",
        "purpose": "验证工具是否能处理路径中包含特殊字符的 git show 请求",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_@_dir#1",
          "commit_hash": "4b825dc642cb6eb9a060e54bf8d69288fbee4904"
        },
        "response": {
          "error": "McpError: Connection closed"
        },
        "execution_time": 0.11432766914367676,
        "is_functional_test": true
      },
      {
        "case_name": "Git Show in Long Path Directory",
        "purpose": "验证工具是否能处理长路径名的 git show 请求",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz",
          "commit_hash": "6f8d32a18b2da876c6b5980cd1a7a2d908173433"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0020003318786621094,
        "is_functional_test": true
      },
      {
        "case_name": "Git Show in Nested .git Directory",
        "purpose": "验证工具是否能处理嵌套的 .git 目录中的 git show 请求",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\.git",
          "commit_hash": "be4e99653654a04da40c5daf7fb36a7f680d1958"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.00099945068359375,
        "is_functional_test": true
      },
      {
        "case_name": "Git Show with Invalid Path",
        "purpose": "验证工具在传入非法路径时是否抛出 ValueError",
        "args": {
          "path": "invalid/<path>*",
          "commit_hash": "ca7e714b729f1d10c91464009ca11156244ee9e6"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0030012130737304688,
        "is_functional_test": false
      },
      {
        "case_name": "Git Show with Non-Existent Commit Hash",
        "purpose": "验证工具在提供的 commit_hash 不存在时是否抛出 GitCommandError",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "nonexistenthash1234567890abcdef"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0020017623901367188,
        "is_functional_test": false
      },
      {
        "case_name": "Git Show with Empty Commit Hash",
        "purpose": "验证工具在 commit_hash 参数为空字符串时是否抛出错误",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": ""
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.002001047134399414,
        "is_functional_test": false
      },
      {
        "case_name": "Git Show in Read-Only Directory",
        "purpose": "验证工具在没有写权限的目录中执行 git show 是否抛出 GitCommandError",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonly_dir",
          "commit_hash": "cfbc0bce2e3d9f5cfef48a4ef5d13ae47d5b30de"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0010275840759277344,
        "is_functional_test": false
      }
    ],
    "git_reset": [
      {
        "case_name": "Unstage All Changes in Valid Repository",
        "purpose": "验证工具可以成功取消暂存指定 Git 仓库中的所有更改",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.002015352249145508,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage Specific File in Valid Repository",
        "purpose": "验证工具可以成功取消暂存指定 Git 仓库中的特定文件",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\app.ico"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0009877681732177734,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage File with Special Characters in Path",
        "purpose": "验证工具是否能正确处理路径中包含特殊字符的文件取消暂存操作",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$.txt"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0009999275207519531,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage Non-Existent File",
        "purpose": "验证工具在尝试取消暂存一个不存在的文件时是否抛出 GitCommandError",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0009999275207519531,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage in Read-Only Directory",
        "purpose": "验证工具在没有写权限的目录中取消暂存时是否抛出 GitCommandError",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonly_dir",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonly_dir\\test_file.txt"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0009999275207519531,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage with Invalid Repository Path",
        "purpose": "验证工具在传入非法路径时是否抛出 ValueError",
        "args": {
          "path": "invalid/<path>*",
          "file_path": "test_file.txt"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0015020370483398438,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage in Long File Path",
        "purpose": "验证工具是否能处理长路径名的文件取消暂存操作",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz\\long_filename_1234567890123456789012345678901234567890.txt"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0010025501251220703,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage Nested .git Directory",
        "purpose": "验证工具是否能处理嵌套的 .git 目录中文件的取消暂存操作",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\.git",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\.git\\config"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0010004043579101562,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 96
}