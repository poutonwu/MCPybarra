{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "gpt-4o-mcp_git_repo_manager",
  "server_path": "workspace/pipeline-output-servers/gpt-4o/mcp_git_repo_manager/refined/server.py",
  "timestamp": "2025-07-13T03:53:11.968752",
  "tools": [
    {
      "name": "git_init",
      "description": "\n    Initializes a new Git repository in the specified directory.\n\n    Args:\n        directory (str): The path to the directory where the repository should be initialized. Example: '/path/to/new/repo'.\n\n    Returns:\n        str: Confirmation message indicating success or failure.\n\n    Example:\n        git_init(directory='/path/to/new/repo')\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          }
        },
        "required": [
          "directory"
        ],
        "title": "git_initArguments",
        "type": "object"
      }
    },
    {
      "name": "git_status",
      "description": "\n    Retrieves the status of the Git repository, showing changes in the working directory and staged files.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n\n    Returns:\n        dict: A dictionary containing the status of files (e.g., staged, unstaged, modified).\n\n    Example:\n        git_status(repository_path='/path/to/repo')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          }
        },
        "required": [
          "repository_path"
        ],
        "title": "git_statusArguments",
        "type": "object"
      }
    },
    {
      "name": "git_add",
      "description": "\n    Adds specified files to the staging area.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        files (list of str): List of file paths to add to the staging area. Accepts both relative and absolute paths.\n\n    Returns:\n        str: Confirmation message indicating the files added to the staging area.\n\n    Example:\n        git_add(repository_path='/path/to/repo', files=['file1.txt', 'file2.txt'])\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "files": {
            "items": {},
            "title": "Files",
            "type": "array"
          }
        },
        "required": [
          "repository_path",
          "files"
        ],
        "title": "git_addArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_unstaged",
      "description": "\n    Displays the differences in files that are not staged for commit.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n\n    Returns:\n        str: A string showing the diff of unstaged changes.\n\n    Example:\n        git_diff_unstaged(repository_path='/path/to/repo')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          }
        },
        "required": [
          "repository_path"
        ],
        "title": "git_diff_unstagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_staged",
      "description": "\n    Displays the differences in files that are staged for commit.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n\n    Returns:\n        str: A string showing the diff of staged changes.\n\n    Example:\n        git_diff_staged(repository_path='/path/to/repo')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          }
        },
        "required": [
          "repository_path"
        ],
        "title": "git_diff_stagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff",
      "description": "\n    Compares two branches or commits and displays the differences.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        reference1 (str): The first branch or commit to compare. Example: 'HEAD'.\n        reference2 (str): The second branch or commit to compare. Example: 'HEAD~1'.\n\n    Returns:\n        str: A string showing the diff between the two references.\n\n    Example:\n        git_diff(repository_path='/path/to/repo', reference1='HEAD', reference2='HEAD~1')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "reference1": {
            "title": "Reference1",
            "type": "string"
          },
          "reference2": {
            "title": "Reference2",
            "type": "string"
          }
        },
        "required": [
          "repository_path",
          "reference1",
          "reference2"
        ],
        "title": "git_diffArguments",
        "type": "object"
      }
    },
    {
      "name": "git_commit",
      "description": "\n    Commits staged changes to the repository.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        message (str): Commit message describing the changes. Example: 'Initial commit'.\n\n    Returns:\n        str: Confirmation message with the commit hash.\n\n    Example:\n        git_commit(repository_path='/path/to/repo', message='Initial commit')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "message": {
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "repository_path",
          "message"
        ],
        "title": "git_commitArguments",
        "type": "object"
      }
    },
    {
      "name": "git_reset",
      "description": "\n    Removes files from the staging area.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        files (list of str): List of file paths to remove from the staging area. Accepts both relative and absolute paths.\n\n    Returns:\n        str: Confirmation message indicating the files reset.\n\n    Example:\n        git_reset(repository_path='/path/to/repo', files=['file1.txt', 'file2.txt'])\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "files": {
            "items": {},
            "title": "Files",
            "type": "array"
          }
        },
        "required": [
          "repository_path",
          "files"
        ],
        "title": "git_resetArguments",
        "type": "object"
      }
    },
    {
      "name": "git_log",
      "description": "\n    Displays the commit history of the repository.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n\n    Returns:\n        list: A list of dictionaries, each containing commit details (e.g., hash, author, date, message).\n\n    Example:\n        git_log(repository_path='/path/to/repo')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          }
        },
        "required": [
          "repository_path"
        ],
        "title": "git_logArguments",
        "type": "object"
      }
    },
    {
      "name": "git_create_branch",
      "description": "\n    Creates a new branch in the repository.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        branch_name (str): Name of the new branch. Example: 'new-feature'.\n\n    Returns:\n        str: Confirmation message indicating success or failure.\n\n    Example:\n        git_create_branch(repository_path='/path/to/repo', branch_name='new-feature')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "repository_path",
          "branch_name"
        ],
        "title": "git_create_branchArguments",
        "type": "object"
      }
    },
    {
      "name": "git_checkout",
      "description": "\n    Switches the current branch in the repository.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        branch_name (str): Name of the branch to switch to. Example: 'main'.\n\n    Returns:\n        str: Confirmation message indicating the branch switched.\n\n    Example:\n        git_checkout(repository_path='/path/to/repo', branch_name='main')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "repository_path",
          "branch_name"
        ],
        "title": "git_checkoutArguments",
        "type": "object"
      }
    },
    {
      "name": "git_show",
      "description": "\n    Displays detailed information about a specific commit.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        commit_hash (str): The hash of the commit to display. Example: 'abc123'. If None, shows info for HEAD.\n\n    Returns:\n        dict: A dictionary containing commit details (e.g., hash, author, date, message, changes).\n\n    Example:\n        git_show(repository_path='/path/to/repo', commit_hash='abc123')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "commit_hash": {
            "title": "Commit Hash",
            "type": "string"
          }
        },
        "required": [
          "repository_path",
          "commit_hash"
        ],
        "title": "git_showArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "git_init": [
      {
        "case_name": "Initialize Git Repository in Valid Directory",
        "purpose": "验证工具可以在指定的有效目录中成功初始化一个新的 Git 仓库",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"message\": \"Initialized new Git repository at: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\"}"
        },
        "execution_time": 0.1796422004699707,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository in Empty Content Directory",
        "purpose": "验证工具可以在一个空内容目录中初始化 Git 仓库",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_test.txt"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') not found due to: NotADirectoryError('[WinError 267] \\u76ee\\u5f55\\u540d\\u79f0\\u65e0\\u6548\\u3002')\\n  cmdline: git init\"}"
        },
        "execution_time": 0.007510662078857422,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository in Directory with Long Path",
        "purpose": "验证工具可以处理带有长路径名的目录",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\longpath_12345678901234567890123456789012345678901234567890.txt"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') not found due to: NotADirectoryError('[WinError 267] \\u76ee\\u5f55\\u540d\\u79f0\\u65e0\\u6548\\u3002')\\n  cmdline: git init\"}"
        },
        "execution_time": 0.013999462127685547,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository in Directory with Mixed Content",
        "purpose": "验证工具可以在包含多种文件类型的目录中成功初始化 Git 仓库",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"message\": \"Initialized new Git repository at: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\"}"
        },
        "execution_time": 0.24545073509216309,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository with Non-Existent Directory",
        "purpose": "验证工具是否能优雅地处理不存在的目录路径",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "{\"message\": \"Initialized new Git repository at: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\nonexistent_dir\"}"
        },
        "execution_time": 0.23142170906066895,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository with Invalid Characters in Path",
        "purpose": "验证工具是否能处理路径中包含非法字符的情况",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\<invalid>|path?.txt"
        },
        "response": {
          "result": "{\"error\": \"[WinError 123] \\u6587\\u4ef6\\u540d\\u3001\\u76ee\\u5f55\\u540d\\u6216\\u5377\\u6807\\u8bed\\u6cd5\\u4e0d\\u6b63\\u786e\\u3002: 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\<invalid>|path?.txt'\"}"
        },
        "execution_time": 0.008999824523925781,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository in Read-Only Directory",
        "purpose": "验证工具是否能处理目标目录无写权限的情况",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"message\": \"Initialized new Git repository at: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\"}"
        },
        "execution_time": 0.21662425994873047,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository with Empty Directory Path",
        "purpose": "验证工具是否能处理空目录路径的情况",
        "args": {
          "directory": ""
        },
        "response": {
          "result": "{\"message\": \"Initialized new Git repository at: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\workspace\\\\pipeline-output-servers\\\\gpt-4o\\\\mcp_git_repo_manager\\\\refined\"}"
        },
        "execution_time": 0.22372889518737793,
        "is_functional_test": false
      }
    ],
    "git_status": [
      {
        "case_name": "Check Git Status in Initialized Repository",
        "purpose": "验证工具可以正确获取已初始化Git仓库的状态信息，确保基本功能正常运行",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.14595270156860352,
        "is_functional_test": true
      },
      {
        "case_name": "Check Git Status in Non-Existent Repository",
        "purpose": "验证工具是否能优雅地处理不存在的仓库路径",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.22109413146972656,
        "is_functional_test": false
      },
      {
        "case_name": "Check Git Status with Invalid Characters in Path",
        "purpose": "验证工具是否能处理包含非法字符的仓库路径",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\<invalid>|path?.txt"
        },
        "response": {
          "result": "{\"error\": \"Repository not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\<invalid>|path?.txt\"}"
        },
        "execution_time": 0.0040018558502197266,
        "is_functional_test": false
      },
      {
        "case_name": "Check Git Status in Empty Directory",
        "purpose": "验证工具在空目录中执行Git状态查询时的行为",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_test.txt"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_test.txt\"}"
        },
        "execution_time": 0.00600123405456543,
        "is_functional_test": false
      },
      {
        "case_name": "Check Git Status with Long Path Name",
        "purpose": "验证工具是否能够处理带有长路径名的仓库路径",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\longpath_12345678901234567890123456789012345678901234567890.txt"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\longpath_12345678901234567890123456789012345678901234567890.txt\"}"
        },
        "execution_time": 0.0041980743408203125,
        "is_functional_test": false
      },
      {
        "case_name": "Check Git Status in Read-Only Directory",
        "purpose": "验证工具在只读目录中能否正确获取Git状态或返回适当错误",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.16816210746765137,
        "is_functional_test": false
      },
      {
        "case_name": "Check Git Status with Empty Repository Path",
        "purpose": "验证工具是否能处理空仓库路径参数的情况",
        "args": {
          "repository_path": ""
        },
        "response": {
          "result": "{\"error\": \"Repository not found: \"}"
        },
        "execution_time": 0.004042863845825195,
        "is_functional_test": false
      },
      {
        "case_name": "Check Git Status in Directory with Mixed Content",
        "purpose": "验证工具是否能在包含多种文件类型的目录中正确获取Git状态",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.14830780029296875,
        "is_functional_test": true
      }
    ],
    "git_add": [
      {
        "case_name": "Add Valid Files to Staging Area in Initialized Repository",
        "purpose": "验证工具可以将指定的有效文件添加到已初始化的 Git 仓库的暂存区",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\basic_test_output.txt",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.png"
          ]
        },
        "response": {
          "result": "{\"message\": \"Added files to staging area: ['basic_test_output.txt', 'nature.png']\"}"
        },
        "execution_time": 0.0075168609619140625,
        "is_functional_test": true
      },
      {
        "case_name": "Add Non-Existent File to Staging Area",
        "purpose": "验证工具是否能优雅地处理尝试添加不存在的文件的情况",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"[WinError 2] \\u7cfb\\u7edf\\u627e\\u4e0d\\u5230\\u6307\\u5b9a\\u7684\\u6587\\u4ef6\\u3002: 'nonexistent_file.txt'\"}"
        },
        "execution_time": 0.0049991607666015625,
        "is_functional_test": false
      },
      {
        "case_name": "Add File to Non-Existent Repository",
        "purpose": "验证工具是否能处理目标仓库路径不存在时的行为",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\basic_test_output.txt"
          ]
        },
        "response": {
          "result": "{\"message\": \"Added files to staging area: ['..\\\\\\\\testFiles\\\\\\\\basic_test_output.txt']\"}"
        },
        "execution_time": 0.0091094970703125,
        "is_functional_test": false
      },
      {
        "case_name": "Add File with Invalid Characters in Path",
        "purpose": "验证工具是否能处理文件路径中包含非法字符的情况",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\<invalid>|path?.txt"
          ]
        },
        "response": {
          "result": "{\"message\": \"Added files to staging area: ['<invalid>|path?.txt']\"}"
        },
        "execution_time": 0.006028175354003906,
        "is_functional_test": false
      },
      {
        "case_name": "Add File with Long Path Name",
        "purpose": "验证工具是否能够处理带有长路径名的文件添加操作",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\longpath_12345678901234567890123456789012345678901234567890.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"[WinError 2] \\u7cfb\\u7edf\\u627e\\u4e0d\\u5230\\u6307\\u5b9a\\u7684\\u6587\\u4ef6\\u3002: 'longpath_12345678901234567890123456789012345678901234567890.txt'\"}"
        },
        "execution_time": 0.005000114440917969,
        "is_functional_test": false
      },
      {
        "case_name": "Add Empty File to Staging Area",
        "purpose": "验证工具是否能正确处理添加空文件的情况",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_test.txt"
          ]
        },
        "response": {
          "result": "{\"message\": \"Added files to staging area: ['empty_content_test.txt']\"}"
        },
        "execution_time": 0.008511543273925781,
        "is_functional_test": true
      },
      {
        "case_name": "Add Multiple Files Including Hidden File",
        "purpose": "验证工具是否能正确添加多个文件，包括隐藏文件（如 .git 文件）",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\HEAD",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.png"
          ]
        },
        "response": {
          "result": "{\"message\": \"Added files to staging area: ['.git\\\\\\\\HEAD', 'nature.png']\"}"
        },
        "execution_time": 0.008510351181030273,
        "is_functional_test": true
      },
      {
        "case_name": "Add File in Read-Only Directory",
        "purpose": "验证工具在只读目录下能否正确添加文件或返回适当错误",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg"
          ]
        },
        "response": {
          "result": "{\"message\": \"Added files to staging area: ['xue.jpg']\"}"
        },
        "execution_time": 0.09367203712463379,
        "is_functional_test": false
      }
    ],
    "git_diff_unstaged": [
      {
        "case_name": "Display Unstaged Changes in Initialized Repository",
        "purpose": "验证工具能够正确显示已初始化Git仓库中未暂存的更改差异信息",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"unstaged_diff\": []}"
        },
        "execution_time": 0.19424104690551758,
        "is_functional_test": true
      },
      {
        "case_name": "Display Unstaged Changes in Non-Existent Repository",
        "purpose": "验证工具是否能优雅地处理不存在的仓库路径并返回适当错误",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "{\"unstaged_diff\": []}"
        },
        "execution_time": 0.12855291366577148,
        "is_functional_test": false
      },
      {
        "case_name": "Display Unstaged Changes with Invalid Characters in Path",
        "purpose": "验证工具是否能处理包含非法字符的仓库路径并返回错误",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\<invalid>|path?.txt"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\<invalid>|path?.txt\"}"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": false
      },
      {
        "case_name": "Display Unstaged Changes in Empty Directory",
        "purpose": "验证工具在空目录中执行git diff unstaged命令时的行为",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_test.txt"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_test.txt\"}"
        },
        "execution_time": 0.004002809524536133,
        "is_functional_test": false
      },
      {
        "case_name": "Display Unstaged Changes with Long Path Name",
        "purpose": "验证工具是否能够处理带有长路径名的仓库路径",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\longpath_12345678901234567890123456789012345678901234567890.txt"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\longpath_12345678901234567890123456789012345678901234567890.txt\"}"
        },
        "execution_time": 0.005991697311401367,
        "is_functional_test": false
      },
      {
        "case_name": "Display Unstaged Changes in Read-Only Directory",
        "purpose": "验证工具在只读目录中能否正确获取未暂存更改差异或返回适当错误",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"unstaged_diff\": []}"
        },
        "execution_time": 0.1276710033416748,
        "is_functional_test": false
      },
      {
        "case_name": "Display Unstaged Changes with Empty Repository Path",
        "purpose": "验证工具是否能处理空仓库路径参数的情况",
        "args": {
          "repository_path": ""
        },
        "response": {
          "result": "{\"unstaged_diff\": [\"../../../../../testSystem/testFiles/nature.jpg\\n=======================================================\\nlhs: 100644 | db3560c55ff96fa8b2ea06c09a8314f8b84b7541\\nrhs: None\\nfile deleted in rhs\"]}"
        },
        "execution_time": 0.3001832962036133,
        "is_functional_test": false
      },
      {
        "case_name": "Display Unstaged Changes in Directory with Mixed Content",
        "purpose": "验证工具是否能在包含多种文件类型的目录中正确获取未暂存更改差异",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"unstaged_diff\": []}"
        },
        "execution_time": 0.15900063514709473,
        "is_functional_test": true
      }
    ],
    "git_diff_staged": [
      {
        "case_name": "Display Staged Diff in Initialized Repository",
        "purpose": "验证工具可以在已初始化的Git仓库中正确显示暂存区的文件差异",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.005000114440917969,
        "is_functional_test": true
      },
      {
        "case_name": "Display Staged Diff in Non-Existent Repository",
        "purpose": "验证工具是否能优雅地处理不存在的仓库路径",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.005000114440917969,
        "is_functional_test": false
      },
      {
        "case_name": "Display Staged Diff with Invalid Characters in Path",
        "purpose": "验证工具是否能处理包含非法字符的仓库路径",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\<invalid>|path?.txt"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\<invalid>|path?.txt\"}"
        },
        "execution_time": 0.010002374649047852,
        "is_functional_test": false
      },
      {
        "case_name": "Display Staged Diff in Empty Directory",
        "purpose": "验证工具在空目录中执行git diff staged时的行为",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_test.txt"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_test.txt\"}"
        },
        "execution_time": 0.0059967041015625,
        "is_functional_test": false
      },
      {
        "case_name": "Display Staged Diff with Long Path Name",
        "purpose": "验证工具是否能够处理带有长路径名的仓库路径",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\longpath_12345678901234567890123456789012345678901234567890.txt"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\longpath_12345678901234567890123456789012345678901234567890.txt\"}"
        },
        "execution_time": 0.003997802734375,
        "is_functional_test": false
      },
      {
        "case_name": "Display Staged Diff in Read-Only Directory",
        "purpose": "验证工具在只读目录中能否正确获取Git暂存差异或返回适当错误",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.006314516067504883,
        "is_functional_test": false
      },
      {
        "case_name": "Display Staged Diff with Empty Repository Path",
        "purpose": "验证工具是否能处理空仓库路径参数的情况",
        "args": {
          "repository_path": ""
        },
        "response": {
          "result": "{\"staged_diff\": []}"
        },
        "execution_time": 0.26575446128845215,
        "is_functional_test": false
      },
      {
        "case_name": "Display Staged Diff in Directory with Mixed Content",
        "purpose": "验证工具是否能在包含多种文件类型的目录中正确获取Git暂存差异",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.00900125503540039,
        "is_functional_test": true
      }
    ],
    "git_commit": [
      {
        "case_name": "Commit Staged Changes in Initialized Repository",
        "purpose": "验证工具可以在已初始化的Git仓库中提交暂存更改",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Initial commit"
        },
        "response": {
          "result": "{\"message\": \"Created new commit: 03d4ea726431b63ae416cbdd1fa8a2012efdadc3\"}"
        },
        "execution_time": 0.34462714195251465,
        "is_functional_test": true
      },
      {
        "case_name": "Commit with Empty Message",
        "purpose": "验证工具是否能处理空提交信息的情况",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": ""
        },
        "response": {
          "result": "{\"message\": \"Created new commit: 09ec355a2c381ce1f7804c7e1c91af854d1c7b37\"}"
        },
        "execution_time": 0.28305721282958984,
        "is_functional_test": false
      },
      {
        "case_name": "Commit to Non-Existent Repository",
        "purpose": "验证工具是否能优雅地处理不存在的仓库路径提交请求",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "message": "Test commit"
        },
        "response": {
          "result": "{\"message\": \"Created new commit: dc87ee94767f37a9ea26ff923cb8fb586d7df877\"}"
        },
        "execution_time": 0.2961270809173584,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Invalid Characters in Path",
        "purpose": "验证工具是否能处理包含非法字符的仓库路径提交请求",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\<invalid>|path?.txt",
          "message": "Test commit"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\<invalid>|path?.txt\"}"
        },
        "execution_time": 0.013001441955566406,
        "is_functional_test": false
      },
      {
        "case_name": "Commit in Read-Only Directory",
        "purpose": "验证工具在只读目录中执行提交操作时的行为",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Read-only directory commit"
        },
        "response": {
          "result": "{\"message\": \"Created new commit: 2052154209f7de838ca3ddbb7a0a02cbf320afd1\"}"
        },
        "execution_time": 0.24625587463378906,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Long Commit Message",
        "purpose": "验证工具是否能够处理非常长的提交信息",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "This is a very long commit message that exceeds normal length limits and tests the system's ability to handle extended input. This should not cause any issues."
        },
        "response": {
          "result": "{\"message\": \"Created new commit: ed9655066d0b7446e63b05495e1ec51485f861bf\"}"
        },
        "execution_time": 0.32485151290893555,
        "is_functional_test": true
      },
      {
        "case_name": "Commit with Special Characters in Message",
        "purpose": "验证工具是否能正确处理包含特殊字符的提交信息",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Commit with special characters: @#&*(){}[]<>?/\\\"'"
        },
        "response": {
          "result": "{\"message\": \"Created new commit: 4152bf972747f18ea5595ae99b40911fb82f6cff\"}"
        },
        "execution_time": 0.3067288398742676,
        "is_functional_test": true
      },
      {
        "case_name": "Commit with Empty Repository Path",
        "purpose": "验证工具是否能处理空仓库路径参数的提交请求",
        "args": {
          "repository_path": "",
          "message": "Empty path commit"
        },
        "response": {
          "result": "{\"message\": \"Created new commit: 49db0cab8050b6bc1a7f7d1ea7f71e5851d6a62b\"}"
        },
        "execution_time": 0.3430509567260742,
        "is_functional_test": false
      }
    ],
    "git_log": [
      {
        "case_name": "Get Commit History in Initialized Repository",
        "purpose": "验证工具可以成功获取已初始化Git仓库的提交历史记录（基本功能测试）",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "[{\"hash\": \"4152bf972747f18ea5595ae99b40911fb82f6cff\", \"author\": \"pouchine\", \"date\": 1752350151, \"message\": \"Commit with special characters: @#&*(){}[]<>?/\\\\\\\"'\"}, {\"hash\": \"ed9655066d0b7446e63b05495e1ec51485f861bf\", \"author\": \"pouchine\", \"date\": 1752350151, \"message\": \"This is a very long commit message that exceeds normal length limits and tests the system's ability to handle extended input. This should not cause any issues.\"}, {\"hash\": \"2052154209f7de838ca3ddbb7a0a02cbf320afd1\", \"author\": \"pouchine\", \"date\": 1752350151, \"message\": \"Read-only directory commit\"}, {\"hash\": \"09ec355a2c381ce1f7804c7e1c91af854d1c7b37\", \"author\": \"pouchine\", \"date\": 1752350150, \"message\": \"\"}, {\"hash\": \"03d4ea726431b63ae416cbdd1fa8a2012efdadc3\", \"author\": \"pouchine\", \"date\": 1752350150, \"message\": \"Initial commit\"}]"
        },
        "execution_time": 0.5266187191009521,
        "is_functional_test": true
      },
      {
        "case_name": "Get Commit History with Non-Existent Repository",
        "purpose": "验证工具是否能优雅地处理不存在的仓库路径",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "[{\"hash\": \"dc87ee94767f37a9ea26ff923cb8fb586d7df877\", \"author\": \"pouchine\", \"date\": 1752350150, \"message\": \"Test commit\"}]"
        },
        "execution_time": 0.4468419551849365,
        "is_functional_test": false
      },
      {
        "case_name": "Get Commit History with Invalid Characters in Path",
        "purpose": "验证工具是否能处理包含非法字符的仓库路径",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\<invalid>|path?.txt"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\<invalid>|path?.txt\"}"
        },
        "execution_time": 0.0029976367950439453,
        "is_functional_test": false
      },
      {
        "case_name": "Get Commit History in Empty Directory",
        "purpose": "验证工具在空目录中执行git log时的行为",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_test.txt"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_test.txt\"}"
        },
        "execution_time": 0.0070040225982666016,
        "is_functional_test": false
      },
      {
        "case_name": "Get Commit History with Long Path Name",
        "purpose": "验证工具是否能够处理带有长路径名的仓库路径",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\longpath_12345678901234567890123456789012345678901234567890.txt"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\longpath_12345678901234567890123456789012345678901234567890.txt\"}"
        },
        "execution_time": 0.005448579788208008,
        "is_functional_test": false
      },
      {
        "case_name": "Get Commit History in Read-Only Directory",
        "purpose": "验证工具在只读目录中能否正确获取提交历史或返回适当错误",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "[{\"hash\": \"4152bf972747f18ea5595ae99b40911fb82f6cff\", \"author\": \"pouchine\", \"date\": 1752350151, \"message\": \"Commit with special characters: @#&*(){}[]<>?/\\\\\\\"'\"}, {\"hash\": \"ed9655066d0b7446e63b05495e1ec51485f861bf\", \"author\": \"pouchine\", \"date\": 1752350151, \"message\": \"This is a very long commit message that exceeds normal length limits and tests the system's ability to handle extended input. This should not cause any issues.\"}, {\"hash\": \"2052154209f7de838ca3ddbb7a0a02cbf320afd1\", \"author\": \"pouchine\", \"date\": 1752350151, \"message\": \"Read-only directory commit\"}, {\"hash\": \"09ec355a2c381ce1f7804c7e1c91af854d1c7b37\", \"author\": \"pouchine\", \"date\": 1752350150, \"message\": \"\"}, {\"hash\": \"03d4ea726431b63ae416cbdd1fa8a2012efdadc3\", \"author\": \"pouchine\", \"date\": 1752350150, \"message\": \"Initial commit\"}]"
        },
        "execution_time": 0.5411419868469238,
        "is_functional_test": false
      },
      {
        "case_name": "Get Commit History with Empty Repository Path",
        "purpose": "验证工具是否能处理空仓库路径参数的情况",
        "args": {
          "repository_path": ""
        },
        "response": {
          "result": "[{\"hash\": \"49db0cab8050b6bc1a7f7d1ea7f71e5851d6a62b\", \"author\": \"pouchine\", \"date\": 1752350152, \"message\": \"Empty path commit\"}, {\"hash\": \"aa3c81a8ad30081c693b620078f2765376b9b813\", \"author\": \"pouchine\", \"date\": 1752346163, \"message\": \"Empty repository path test\"}]"
        },
        "execution_time": 0.6013760566711426,
        "is_functional_test": false
      },
      {
        "case_name": "Get Commit History in Directory with Mixed Content",
        "purpose": "验证工具是否能在包含多种文件类型的目录中正确获取提交历史",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "[{\"hash\": \"4152bf972747f18ea5595ae99b40911fb82f6cff\", \"author\": \"pouchine\", \"date\": 1752350151, \"message\": \"Commit with special characters: @#&*(){}[]<>?/\\\\\\\"'\"}, {\"hash\": \"ed9655066d0b7446e63b05495e1ec51485f861bf\", \"author\": \"pouchine\", \"date\": 1752350151, \"message\": \"This is a very long commit message that exceeds normal length limits and tests the system's ability to handle extended input. This should not cause any issues.\"}, {\"hash\": \"2052154209f7de838ca3ddbb7a0a02cbf320afd1\", \"author\": \"pouchine\", \"date\": 1752350151, \"message\": \"Read-only directory commit\"}, {\"hash\": \"09ec355a2c381ce1f7804c7e1c91af854d1c7b37\", \"author\": \"pouchine\", \"date\": 1752350150, \"message\": \"\"}, {\"hash\": \"03d4ea726431b63ae416cbdd1fa8a2012efdadc3\", \"author\": \"pouchine\", \"date\": 1752350150, \"message\": \"Initial commit\"}]"
        },
        "execution_time": 0.49564361572265625,
        "is_functional_test": true
      }
    ],
    "git_diff": [
      {
        "case_name": "Compare Two Valid Commits in Initialized Repository",
        "purpose": "验证工具能够正确比较两个有效的提交并返回差异信息，这是该工具的核心功能",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "reference1": "HEAD",
          "reference2": "HEAD~1"
        },
        "response": {
          "result": "{\"diff\": []}"
        },
        "execution_time": 0.35710811614990234,
        "is_functional_test": true
      },
      {
        "case_name": "Compare Branch with Itself",
        "purpose": "验证工具在比较同一分支或提交时的行为是否合理（应返回空或无差异）",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "reference1": "HEAD",
          "reference2": "HEAD"
        },
        "response": {
          "result": "{\"diff\": []}"
        },
        "execution_time": 0.303513765335083,
        "is_functional_test": true
      },
      {
        "case_name": "Compare Using Branch Names Instead of Commits",
        "purpose": "验证工具支持使用分支名称进行比较的功能",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "reference1": "master",
          "reference2": "HEAD~1"
        },
        "response": {
          "result": "{\"diff\": []}"
        },
        "execution_time": 0.4258418083190918,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Compare with Non-Existent Reference",
        "purpose": "验证工具能否优雅地处理其中一个参考点不存在的情况",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "reference1": "HEAD",
          "reference2": "nonexistent_commit"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff-tree 4152bf972747f18ea5595ae99b40911fb82f6cff nonexistent_commit -r --abbrev=40 --full-index -M --raw -z --no-color\"}"
        },
        "execution_time": 0.2930612564086914,
        "is_functional_test": false
      },
      {
        "case_name": "Compare in Non-Existent Repository Path",
        "purpose": "验证工具能否处理仓库路径不存在的情况",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "reference1": "HEAD",
          "reference2": "HEAD~1"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff-tree dc87ee94767f37a9ea26ff923cb8fb586d7df877 HEAD~1 -r --abbrev=40 --full-index -M --raw -z --no-color\"}"
        },
        "execution_time": 0.34183335304260254,
        "is_functional_test": false
      },
      {
        "case_name": "Compare Using Invalid Characters in References",
        "purpose": "验证工具是否能正确处理引用参数中包含非法字符的情况",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "reference1": "HEAD<invalid>",
          "reference2": "HEAD~1"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD<invalid>' did not resolve to an object\"}"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": false
      },
      {
        "case_name": "Compare with Long Commit Hash Strings",
        "purpose": "验证工具是否能处理非常长的提交哈希字符串作为输入",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "reference1": "a5ab2ef5d5e3f3f34c7fc27f839f555ff497f3cf",
          "reference2": "cb089cd89a7d7686d284d8761201649346b5aa1c"
        },
        "response": {
          "result": "{\"error\": \"Cannot convert object <git.Tree \\\"a5ab2ef5d5e3f3f34c7fc27f839f555ff497f3cf\\\"> to type commit\"}"
        },
        "execution_time": 0.21498727798461914,
        "is_functional_test": true
      },
      {
        "case_name": "Compare Across Large Number of Commits",
        "purpose": "验证工具是否能处理跨越大量提交的比较操作",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "reference1": "HEAD",
          "reference2": "HEAD~100"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff-tree 4152bf972747f18ea5595ae99b40911fb82f6cff HEAD~100 -r --abbrev=40 --full-index -M --raw -z --no-color\"}"
        },
        "execution_time": 0.32031989097595215,
        "is_functional_test": true
      }
    ],
    "git_show": [
      {
        "case_name": "Show Details of Latest Commit Using HEAD",
        "purpose": "验证工具在不提供 commit_hash 参数时，能否正确显示 HEAD 提交的详细信息",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: 1 validation error for git_showArguments\ncommit_hash\n  Field required [type=missing, input_value={'repository_path': 'D:\\\\...\\testSystem\\\\testFiles'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.005001544952392578,
        "is_functional_test": true
      },
      {
        "case_name": "Show Details of Specific Commit by Hash",
        "purpose": "验证工具是否能根据指定的 commit_hash 显示特定提交的详细信息",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "abc123"
        },
        "response": {
          "result": "{\"error\": \"Ref 'abc123' did not resolve to an object\"}"
        },
        "execution_time": 0.18924450874328613,
        "is_functional_test": true
      },
      {
        "case_name": "Show Commit Info in Non-Existent Repository",
        "purpose": "验证工具是否能优雅地处理不存在的仓库路径",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "commit_hash": "abc123"
        },
        "response": {
          "result": "{\"error\": \"Ref 'abc123' did not resolve to an object\"}"
        },
        "execution_time": 0.12298774719238281,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit Info with Invalid Characters in Path",
        "purpose": "验证工具是否能处理包含非法字符的仓库路径",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\<invalid>|path?.txt",
          "commit_hash": "abc123"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\<invalid>|path?.txt\"}"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit Info with Empty Repository Path",
        "purpose": "验证工具是否能处理空仓库路径参数的情况",
        "args": {
          "repository_path": "",
          "commit_hash": "abc123"
        },
        "response": {
          "result": "{\"error\": \"Ref 'abc123' did not resolve to an object\"}"
        },
        "execution_time": 0.19501566886901855,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit Info for Non-Existent Commit Hash",
        "purpose": "验证工具是否能处理无效或不存在的 commit_hash 的情况",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "invalidhash123"
        },
        "response": {
          "result": "{\"error\": \"Ref 'invalidhash123' did not resolve to an object\"}"
        },
        "execution_time": 0.028998613357543945,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit Info in Read-Only Git Repository",
        "purpose": "验证工具是否能在只读Git仓库中获取提交信息或返回适当错误",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "abc123"
        },
        "response": {
          "result": "{\"error\": \"Ref 'abc123' did not resolve to an object\"}"
        },
        "execution_time": 0.1771538257598877,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit Info with Long Path Name",
        "purpose": "验证工具是否能够处理带有长路径名的仓库路径",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\longpath_12345678901234567890123456789012345678901234567890.txt",
          "commit_hash": "abc123"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\longpath_12345678901234567890123456789012345678901234567890.txt\"}"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      }
    ],
    "git_create_branch": [
      {
        "case_name": "Create Git Branch in Valid Repository",
        "purpose": "验证工具可以在已存在的Git仓库中成功创建新分支",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "new-feature"
        },
        "response": {
          "result": "{\"message\": \"Created new branch: new-feature\"}"
        },
        "execution_time": 0.16976022720336914,
        "is_functional_test": true
      },
      {
        "case_name": "Create Git Branch with Empty Branch Name",
        "purpose": "验证工具是否能处理空分支名称的情况",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": ""
        },
        "response": {
          "result": "{\"error\": \"[WinError 183] \\u5f53\\u6587\\u4ef6\\u5df2\\u5b58\\u5728\\u65f6\\uff0c\\u65e0\\u6cd5\\u521b\\u5efa\\u8be5\\u6587\\u4ef6\\u3002: 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\.git\\\\\\\\refs\\\\\\\\heads\\\\\\\\.lock' -> 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\.git\\\\\\\\refs\\\\\\\\heads\\\\\\\\'\"}"
        },
        "execution_time": 0.12760353088378906,
        "is_functional_test": false
      },
      {
        "case_name": "Create Git Branch in Non-Existent Repository",
        "purpose": "验证工具是否能优雅地处理不存在的仓库路径",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "branch_name": "new-feature"
        },
        "response": {
          "result": "{\"message\": \"Created new branch: new-feature\"}"
        },
        "execution_time": 0.13814640045166016,
        "is_functional_test": false
      },
      {
        "case_name": "Create Git Branch with Invalid Characters in Branch Name",
        "purpose": "验证工具是否能处理分支名中包含非法字符的情况",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "invalid/<branch>|name?.txt"
        },
        "response": {
          "result": "{\"error\": \"Lock at 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\.git\\\\\\\\refs\\\\\\\\heads\\\\\\\\invalid\\\\\\\\<branch>|name?.txt.lock' could not be obtained\"}"
        },
        "execution_time": 0.20622873306274414,
        "is_functional_test": false
      },
      {
        "case_name": "Create Git Branch in Read-Only Repository",
        "purpose": "验证工具在只读目录中能否正确创建分支或返回适当错误",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "readonly-check"
        },
        "response": {
          "result": "{\"message\": \"Created new branch: readonly-check\"}"
        },
        "execution_time": 0.1438007354736328,
        "is_functional_test": false
      },
      {
        "case_name": "Create Git Branch with Long Branch Name",
        "purpose": "验证工具是否可以处理带有长分支名的创建请求",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "long_branch_name_1234567890123456789012345678901234567890"
        },
        "response": {
          "result": "{\"message\": \"Created new branch: long_branch_name_1234567890123456789012345678901234567890\"}"
        },
        "execution_time": 0.20059657096862793,
        "is_functional_test": true
      },
      {
        "case_name": "Create Git Branch in Empty Directory",
        "purpose": "验证工具是否能在空目录中尝试创建分支并返回合适错误",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_test.txt",
          "branch_name": "new-empty-branch"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_test.txt\"}"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": false
      },
      {
        "case_name": "Create Git Branch with Special Unicode Characters in Branch Name",
        "purpose": "验证工具是否能处理包含Unicode字符的分支名",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/中文_branch"
        },
        "response": {
          "result": "{\"message\": \"Created new branch: feature/\\u4e2d\\u6587_branch\"}"
        },
        "execution_time": 0.2213897705078125,
        "is_functional_test": true
      }
    ],
    "git_checkout": [
      {
        "case_name": "Checkout to Existing Branch in Valid Repository",
        "purpose": "验证工具可以在有效仓库中成功切换到已存在的分支",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "master"
        },
        "response": {
          "result": "{\"message\": \"Switched to branch: master\"}"
        },
        "execution_time": 0.22235465049743652,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout to Non-Existent Branch",
        "purpose": "验证工具在尝试切换到不存在的分支时是否返回适当错误",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "nonexistent-branch"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(1)\\n  cmdline: git checkout nonexistent-branch\\n  stderr: 'error: pathspec 'nonexistent-branch' did not match any file(s) known to git'\"}"
        },
        "execution_time": 0.26475000381469727,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout with Empty Repository Path",
        "purpose": "验证工具是否能处理空仓库路径参数的情况",
        "args": {
          "repository_path": "",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(1)\\n  cmdline: git checkout main\\n  stderr: 'error: pathspec 'main' did not match any file(s) known to git'\"}"
        },
        "execution_time": 0.1948385238647461,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout with Invalid Characters in Branch Name",
        "purpose": "验证工具是否能处理包含非法字符的分支名称",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/<invalid>|branch?.txt"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(1)\\n  cmdline: git checkout feature/<invalid>|branch?.txt\\n  stderr: 'error: pathspec 'feature/<invalid>|branch?.txt' did not match any file(s) known to git'\"}"
        },
        "execution_time": 0.25301456451416016,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout in Read-Only Repository Directory",
        "purpose": "验证工具在只读目录中执行切换分支操作的行为",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "readonly-check"
        },
        "response": {
          "result": "{\"message\": \"Switched to branch: readonly-check\"}"
        },
        "execution_time": 0.22194862365722656,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout with Long Branch Name",
        "purpose": "验证工具是否能够处理带有长名称的分支",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "long_branch_name_1234567890123456789012345678901234567890"
        },
        "response": {
          "result": "{\"message\": \"Switched to branch: long_branch_name_1234567890123456789012345678901234567890\"}"
        },
        "execution_time": 0.29585933685302734,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout to Unicode Named Branch",
        "purpose": "验证工具是否支持使用Unicode字符命名的分支（如中文）",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "中文_branch"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(1)\\n  cmdline: git checkout \\u4e2d\\u6587_branch\\n  stderr: 'error: pathspec '\\u4e2d\\u6587_branch' did not match any file(s) known to git'\"}"
        },
        "execution_time": 0.27247095108032227,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout with Empty Branch Name",
        "purpose": "验证工具是否能处理空分支名参数的情况",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": ""
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git checkout \\n  stderr: 'fatal: empty string is not a valid pathspec. please use . instead if you meant to match all paths'\"}"
        },
        "execution_time": 0.1993412971496582,
        "is_functional_test": false
      }
    ],
    "git_reset": [
      {
        "case_name": "Reset Single File from Staging Area",
        "purpose": "验证工具可以成功从暂存区移除一个指定的文件",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\basic_test_output.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git reset --files=basic_test_output.txt\\n  stderr: 'error: unknown option `files=basic_test_output.txt'\\nusage: git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]\\n   or: git reset [-q] [<tree-ish>] [--] <pathspec>...\\n   or: git reset [-q] [--pathspec-from-file [--pathspec-file-nul]] [<tree-ish>]\\n   or: git reset --patch [<tree-ish>] [--] [<pathspec>...]\\n   or: DEPRECATED: git reset [-q] [--stdin [-z]] [<tree-ish>]\\n\\n    -q, --[no-]quiet      be quiet, only report errors\\n    --no-refresh          skip refreshing the index after reset\\n    --refresh             opposite of --no-refresh\\n    --mixed               reset HEAD and index\\n    --soft                reset only HEAD\\n    --hard                reset HEAD, index and working tree\\n    --merge               reset HEAD, index and working tree\\n    --keep                reset HEAD but keep local changes\\n    --[no-]recurse-submodules[=<reset>]\\n                          control recursive updating of submodules\\n    -p, --[no-]patch      select hunks interactively\\n    -N, --[no-]intent-to-add\\n                          record only the fact that removed paths will be added later\\n    --[no-]pathspec-from-file <file>\\n                          read pathspec from file\\n    --[no-]pathspec-file-nul\\n                          with --pathspec-from-file, pathspec elements are separated with NUL character\\n    -z                    DEPRECATED...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计1679字符，剩余179字符"
        },
        "execution_time": 0.18495631217956543,
        "is_functional_test": true
      },
      {
        "case_name": "Reset Multiple Files from Staging Area",
        "purpose": "验证工具可以从暂存区一次性移除多个文件",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\performance_results.csv",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx"
          ]
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git reset --files=performance_results.csv --files=test_output.docx\\n  stderr: 'error: unknown option `files=performance_results.csv'\\nusage: git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]\\n   or: git reset [-q] [<tree-ish>] [--] <pathspec>...\\n   or: git reset [-q] [--pathspec-from-file [--pathspec-file-nul]] [<tree-ish>]\\n   or: git reset --patch [<tree-ish>] [--] [<pathspec>...]\\n   or: DEPRECATED: git reset [-q] [--stdin [-z]] [<tree-ish>]\\n\\n    -q, --[no-]quiet      be quiet, only report errors\\n    --no-refresh          skip refreshing the index after reset\\n    --refresh             opposite of --no-refresh\\n    --mixed               reset HEAD and index\\n    --soft                reset only HEAD\\n    --hard                reset HEAD, index and working tree\\n    --merge               reset HEAD, index and working tree\\n    --keep                reset HEAD but keep local changes\\n    --[no-]recurse-submodules[=<reset>]\\n                          control recursive updating of submodules\\n    -p, --[no-]patch      select hunks interactively\\n    -N, --[no-]intent-to-add\\n                          record only the fact that removed paths will be added later\\n    --[no-]pathspec-from-file <file>\\n                          read pathspec from file\\n    --[no-]pathspec-file-nul\\n                          with --pathspec-from-file, pathspec elements are separated with NUL character\\n    -z ...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计1708字符，剩余208字符"
        },
        "execution_time": 0.26238226890563965,
        "is_functional_test": true
      },
      {
        "case_name": "Reset File with Special Characters in Name",
        "purpose": "验证工具可以处理包含特殊字符的文件名并从暂存区移除该文件",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$.docx"
          ]
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git reset --files=special@#$.docx\\n  stderr: 'error: unknown option `files=special@#$.docx'\\nusage: git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]\\n   or: git reset [-q] [<tree-ish>] [--] <pathspec>...\\n   or: git reset [-q] [--pathspec-from-file [--pathspec-file-nul]] [<tree-ish>]\\n   or: git reset --patch [<tree-ish>] [--] [<pathspec>...]\\n   or: DEPRECATED: git reset [-q] [--stdin [-z]] [<tree-ish>]\\n\\n    -q, --[no-]quiet      be quiet, only report errors\\n    --no-refresh          skip refreshing the index after reset\\n    --refresh             opposite of --no-refresh\\n    --mixed               reset HEAD and index\\n    --soft                reset only HEAD\\n    --hard                reset HEAD, index and working tree\\n    --merge               reset HEAD, index and working tree\\n    --keep                reset HEAD but keep local changes\\n    --[no-]recurse-submodules[=<reset>]\\n                          control recursive updating of submodules\\n    -p, --[no-]patch      select hunks interactively\\n    -N, --[no-]intent-to-add\\n                          record only the fact that removed paths will be added later\\n    --[no-]pathspec-from-file <file>\\n                          read pathspec from file\\n    --[no-]pathspec-file-nul\\n                          with --pathspec-from-file, pathspec elements are separated with NUL character\\n    -z                    DEPRECATED (use --path...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计1667字符，剩余167字符"
        },
        "execution_time": 0.22818636894226074,
        "is_functional_test": true
      },
      {
        "case_name": "Reset File with Absolute and Relative Paths Mixed",
        "purpose": "验证工具能够正确处理混合使用绝对路径和相对路径的情况（应拒绝或标准化）",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "basic_test_output.txt",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\performance_results.csv"
          ]
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git reset --files=basic_test_output.txt --files=performance_results.csv\\n  stderr: 'error: unknown option `files=basic_test_output.txt'\\nusage: git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]\\n   or: git reset [-q] [<tree-ish>] [--] <pathspec>...\\n   or: git reset [-q] [--pathspec-from-file [--pathspec-file-nul]] [<tree-ish>]\\n   or: git reset --patch [<tree-ish>] [--] [<pathspec>...]\\n   or: DEPRECATED: git reset [-q] [--stdin [-z]] [<tree-ish>]\\n\\n    -q, --[no-]quiet      be quiet, only report errors\\n    --no-refresh          skip refreshing the index after reset\\n    --refresh             opposite of --no-refresh\\n    --mixed               reset HEAD and index\\n    --soft                reset only HEAD\\n    --hard                reset HEAD, index and working tree\\n    --merge               reset HEAD, index and working tree\\n    --keep                reset HEAD but keep local changes\\n    --[no-]recurse-submodules[=<reset>]\\n                          control recursive updating of submodules\\n    -p, --[no-]patch      select hunks interactively\\n    -N, --[no-]intent-to-add\\n                          record only the fact that removed paths will be added later\\n    --[no-]pathspec-from-file <file>\\n                          read pathspec from file\\n    --[no-]pathspec-file-nul\\n                          with --pathspec-from-file, pathspec elements are separated with NUL character\\n    ...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计1711字符，剩余211字符"
        },
        "execution_time": 0.1829996109008789,
        "is_functional_test": true
      },
      {
        "case_name": "Reset Non-Existent File from Staging Area",
        "purpose": "验证工具在尝试移除非暂存区中的文件时是否返回适当错误",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git reset --files=nonexistent_file.txt\\n  stderr: 'error: unknown option `files=nonexistent_file.txt'\\nusage: git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]\\n   or: git reset [-q] [<tree-ish>] [--] <pathspec>...\\n   or: git reset [-q] [--pathspec-from-file [--pathspec-file-nul]] [<tree-ish>]\\n   or: git reset --patch [<tree-ish>] [--] [<pathspec>...]\\n   or: DEPRECATED: git reset [-q] [--stdin [-z]] [<tree-ish>]\\n\\n    -q, --[no-]quiet      be quiet, only report errors\\n    --no-refresh          skip refreshing the index after reset\\n    --refresh             opposite of --no-refresh\\n    --mixed               reset HEAD and index\\n    --soft                reset only HEAD\\n    --hard                reset HEAD, index and working tree\\n    --merge               reset HEAD, index and working tree\\n    --keep                reset HEAD but keep local changes\\n    --[no-]recurse-submodules[=<reset>]\\n                          control recursive updating of submodules\\n    -p, --[no-]patch      select hunks interactively\\n    -N, --[no-]intent-to-add\\n                          record only the fact that removed paths will be added later\\n    --[no-]pathspec-from-file <file>\\n                          read pathspec from file\\n    --[no-]pathspec-file-nul\\n                          with --pathspec-from-file, pathspec elements are separated with NUL character\\n    -z                    DEPRECATED (...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计1677字符，剩余177字符"
        },
        "execution_time": 0.2105274200439453,
        "is_functional_test": false
      },
      {
        "case_name": "Reset File in Read-Only Repository",
        "purpose": "验证工具能否在只读仓库目录中执行reset操作或返回适当错误",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly-check"
          ]
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git reset --files=readonly-check\\n  stderr: 'error: unknown option `files=readonly-check'\\nusage: git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]\\n   or: git reset [-q] [<tree-ish>] [--] <pathspec>...\\n   or: git reset [-q] [--pathspec-from-file [--pathspec-file-nul]] [<tree-ish>]\\n   or: git reset --patch [<tree-ish>] [--] [<pathspec>...]\\n   or: DEPRECATED: git reset [-q] [--stdin [-z]] [<tree-ish>]\\n\\n    -q, --[no-]quiet      be quiet, only report errors\\n    --no-refresh          skip refreshing the index after reset\\n    --refresh             opposite of --no-refresh\\n    --mixed               reset HEAD and index\\n    --soft                reset only HEAD\\n    --hard                reset HEAD, index and working tree\\n    --merge               reset HEAD, index and working tree\\n    --keep                reset HEAD but keep local changes\\n    --[no-]recurse-submodules[=<reset>]\\n                          control recursive updating of submodules\\n    -p, --[no-]patch      select hunks interactively\\n    -N, --[no-]intent-to-add\\n                          record only the fact that removed paths will be added later\\n    --[no-]pathspec-from-file <file>\\n                          read pathspec from file\\n    --[no-]pathspec-file-nul\\n                          with --pathspec-from-file, pathspec elements are separated with NUL character\\n    -z                    DEPRECATED (use --pathsp...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计1665字符，剩余165字符"
        },
        "execution_time": 0.24375247955322266,
        "is_functional_test": false
      },
      {
        "case_name": "Reset File with Long Path Name",
        "purpose": "验证工具是否能处理带有长路径名的文件重置请求",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\longpath_12345678901234567890123456789012345678901234567890.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git reset --files=longpath_12345678901234567890123456789012345678901234567890.txt\\n  stderr: 'error: unknown option `files=longpath_12345678901234567890123456789012345678901234567890.txt'\\nusage: git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]\\n   or: git reset [-q] [<tree-ish>] [--] <pathspec>...\\n   or: git reset [-q] [--pathspec-from-file [--pathspec-file-nul]] [<tree-ish>]\\n   or: git reset --patch [<tree-ish>] [--] [<pathspec>...]\\n   or: DEPRECATED: git reset [-q] [--stdin [-z]] [<tree-ish>]\\n\\n    -q, --[no-]quiet      be quiet, only report errors\\n    --no-refresh          skip refreshing the index after reset\\n    --refresh             opposite of --no-refresh\\n    --mixed               reset HEAD and index\\n    --soft                reset only HEAD\\n    --hard                reset HEAD, index and working tree\\n    --merge               reset HEAD, index and working tree\\n    --keep                reset HEAD but keep local changes\\n    --[no-]recurse-submodules[=<reset>]\\n                          control recursive updating of submodules\\n    -p, --[no-]patch      select hunks interactively\\n    -N, --[no-]intent-to-add\\n                          record only the fact that removed paths will be added later\\n    --[no-]pathspec-from-file <file>\\n                          read pathspec from file\\n    --[no-]pathspec-file-nul\\n                          with --pathspec-from-file, path...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计1763字符，剩余263字符"
        },
        "execution_time": 0.24475502967834473,
        "is_functional_test": false
      },
      {
        "case_name": "Reset Empty List of Files",
        "purpose": "验证工具在提供空文件列表时的行为，期望返回错误或无操作",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": []
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git reset\\n  stderr: 'error: invalid path '.git/HEAD'\\nfatal: make_cache_entry failed for path '.git/HEAD''\"}"
        },
        "execution_time": 0.2696409225463867,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 96
}