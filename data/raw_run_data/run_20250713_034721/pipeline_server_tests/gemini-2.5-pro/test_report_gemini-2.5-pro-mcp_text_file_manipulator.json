{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "gemini-2.5-pro-mcp_text_file_manipulator",
  "server_path": "workspace/pipeline-output-servers/gemini-2.5-pro/mcp_text_file_manipulator/refined/server.py",
  "timestamp": "2025-07-13T03:59:49.163223",
  "tools": [
    {
      "name": "get_text_file_contents",
      "description": "\n    Reads the contents of one or more text files, with optional line range selection.\n\n    Args:\n        filepaths: A list of paths to the text files to be read.\n                   Example: [\"/path/to/file1.txt\", \"relative/path/to/file2.py\"]\n        start_line: The 1-indexed starting line for reading. If None, starts from the beginning.\n                    Example: 10\n        end_line: The 1-indexed ending line for reading. If None, reads to the end.\n                  Example: 20\n\n    Returns:\n        A dictionary where keys are file paths and values contain the content, hash, or an error message.\n        Example:\n        {\n            \"/path/to/file1.txt\": {\n                \"content\": [\"line 1\", \"line 2\"],\n                \"hash\": \"sha256_hash_string\"\n            },\n            \"non_existent_file.txt\": {\n                \"error\": \"File not found.\"\n            }\n        }\n    ",
      "args_schema": {
        "properties": {
          "filepaths": {
            "items": {
              "type": "string"
            },
            "title": "Filepaths",
            "type": "array"
          },
          "start_line": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Start Line"
          },
          "end_line": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "End Line"
          }
        },
        "required": [
          "filepaths"
        ],
        "title": "get_text_file_contentsArguments",
        "type": "object"
      }
    },
    {
      "name": "create_text_file",
      "description": "\n    Creates a new text file with initial content. Fails if the file already exists.\n\n    Args:\n        filepath: The path where the new text file will be created.\n                  Example: \"new_project/main.py\"\n        content: The initial string content to write to the file.\n                 Example: \"print('Hello, World!')\"\n\n    Returns:\n        A dictionary with a status message indicating success or failure.\n        Example:\n        {\"status\": \"File 'new_project/main.py' created successfully.\"}\n    ",
      "args_schema": {
        "properties": {
          "filepath": {
            "title": "Filepath",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "filepath",
          "content"
        ],
        "title": "create_text_fileArguments",
        "type": "object"
      }
    },
    {
      "name": "append_text_file_contents",
      "description": "\n    Appends new content to the end of an existing text file.\n\n    Args:\n        filepath: The path to the text file to be modified.\n                  Example: \"logs/app.log\"\n        content: The string content to append to the file.\n                 Example: \"\\n2023-10-27: User logged in.\"\n\n    Returns:\n        A dictionary with a status message and the new file hash.\n        Example:\n        {\"status\": \"Content appended successfully.\", \"new_hash\": \"new_sha256_hash\"}\n    ",
      "args_schema": {
        "properties": {
          "filepath": {
            "title": "Filepath",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "filepath",
          "content"
        ],
        "title": "append_text_file_contentsArguments",
        "type": "object"
      }
    },
    {
      "name": "delete_text_file_contents",
      "description": "\n    Deletes a specified range of lines (inclusive) from a text file.\n\n    Args:\n        filepath: The path to the text file to be modified.\n                  Example: \"config.txt\"\n        start_line: The 1-indexed starting line of the range to delete.\n                    Example: 5\n        end_line: The 1-indexed ending line of the range to delete.\n                  Example: 7\n\n    Returns:\n        A dictionary with a status message and the new file hash.\n        Example:\n        {\"status\": \"Lines 5-7 deleted successfully.\", \"new_hash\": \"new_sha256_hash\"}\n    ",
      "args_schema": {
        "properties": {
          "filepath": {
            "title": "Filepath",
            "type": "string"
          },
          "start_line": {
            "title": "Start Line",
            "type": "integer"
          },
          "end_line": {
            "title": "End Line",
            "type": "integer"
          }
        },
        "required": [
          "filepath",
          "start_line",
          "end_line"
        ],
        "title": "delete_text_file_contentsArguments",
        "type": "object"
      }
    },
    {
      "name": "insert_text_file_contents",
      "description": "\n    Inserts a block of text at a specific line number in a file.\n\n    Args:\n        filepath: The path to the text file to be modified.\n                  Example: \"document.txt\"\n        insert_at_line: The 1-indexed line number at which to insert the new content.\n                        Example: 3\n        content: The string content to insert. Newlines create multiple lines.\n                 Example: \"This is a new line.\\nAnd another one.\"\n\n    Returns:\n        A dictionary with a status message and the new file hash.\n        Example:\n        {\"status\": \"Content inserted at line 3.\", \"new_hash\": \"new_sha256_hash\"}\n    ",
      "args_schema": {
        "properties": {
          "filepath": {
            "title": "Filepath",
            "type": "string"
          },
          "insert_at_line": {
            "title": "Insert At Line",
            "type": "integer"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "filepath",
          "insert_at_line",
          "content"
        ],
        "title": "insert_text_file_contentsArguments",
        "type": "object"
      }
    },
    {
      "name": "patch_text_file_contents",
      "description": "\n    Atomically replaces a range of lines with new content, using a hash for concurrency control.\n\n    Args:\n        filepath: The path to the text file to be patched.\n                  Example: \"source_code.py\"\n        start_line: The 1-indexed starting line of the content to be replaced.\n                    Example: 15\n        end_line: The 1-indexed ending line of the content to be replaced.\n                  Example: 20\n        new_content: The new string content that will replace the specified line range.\n                     Example: \"def new_function():\\n    pass\"\n        expected_hash: The SHA-256 hash of the file before this patch operation.\n                       Example: \"sha256_hash_of_the_original_file\"\n\n    Returns:\n        A dictionary with a status message and the new hash if successful.\n        Example on success:\n        {\"status\": \"Patch applied successfully.\", \"new_hash\": \"new_sha256_hash\"}\n        Example on hash mismatch:\n        {\"status\": \"Conflict: File has been modified by another process.\", \"new_hash\": null}\n    ",
      "args_schema": {
        "properties": {
          "filepath": {
            "title": "Filepath",
            "type": "string"
          },
          "start_line": {
            "title": "Start Line",
            "type": "integer"
          },
          "end_line": {
            "title": "End Line",
            "type": "integer"
          },
          "new_content": {
            "title": "New Content",
            "type": "string"
          },
          "expected_hash": {
            "title": "Expected Hash",
            "type": "string"
          }
        },
        "required": [
          "filepath",
          "start_line",
          "end_line",
          "new_content",
          "expected_hash"
        ],
        "title": "patch_text_file_contentsArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "get_text_file_contents": [
      {
        "case_name": "读取单个文件的全部内容",
        "purpose": "验证工具可以正确读取一个存在的文本文件的全部内容。",
        "args": {
          "filepaths": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\performance_results.csv"
          ],
          "start_line": null,
          "end_line": null
        },
        "response": {
          "result": "{\n  \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\performance_results.csv\": {\n    \"content\": [\n      \"Dataset Size,Enumeration (ms),Graham Scan (ms),Divide and Conquer (ms)\",\n      \"100,12.92,0.33,0.67\",\n      \"500,276.50,0.33,5.53\",\n      \"1000,N/A,1.68,16.03\",\n      \"2000,N/A,3.17,50.41\",\n      \"5000,N/A,8.02,272.08\",\n      \"10000,N/A,17.16,1065.61\",\n      \"20000,N/A,35.22,4320.63\"\n    ],\n    \"hash\": \"5e2c3763acff666bc576c762fe1fc334702846177517036759aa83b7ff32f6d7\"\n  }\n}"
        },
        "execution_time": 0.003996372222900391,
        "is_functional_test": true
      },
      {
        "case_name": "读取多个文件的全部内容",
        "purpose": "验证工具可以同时处理多个存在的文本文件，并正确返回每个文件的内容。",
        "args": {
          "filepaths": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\performance_results.csv",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_mskanji.csv"
          ],
          "start_line": null,
          "end_line": null
        },
        "response": {
          "result": "{\n  \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\performance_results.csv\": {\n    \"content\": [\n      \"Dataset Size,Enumeration (ms),Graham Scan (ms),Divide and Conquer (ms)\",\n      \"100,12.92,0.33,0.67\",\n      \"500,276.50,0.33,5.53\",\n      \"1000,N/A,1.68,16.03\",\n      \"2000,N/A,3.17,50.41\",\n      \"5000,N/A,8.02,272.08\",\n      \"10000,N/A,17.16,1065.61\",\n      \"20000,N/A,35.22,4320.63\"\n    ],\n    \"hash\": \"5e2c3763acff666bc576c762fe1fc334702846177517036759aa83b7ff32f6d7\"\n  },\n  \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\test_mskanji.csv\": {\n    \"error\": \"'utf-8' codec can't decode byte 0x96 in position 0: invalid start byte\"\n  }\n}"
        },
        "execution_time": 0.009006261825561523,
        "is_functional_test": true
      },
      {
        "case_name": "读取文件的部分内容（指定行范围）",
        "purpose": "验证工具能正确读取指定起始和结束行范围内的内容。",
        "args": {
          "filepaths": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\performance_results.csv"
          ],
          "start_line": 2,
          "end_line": 5
        },
        "response": {
          "result": "{\n  \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\performance_results.csv\": {\n    \"content\": [\n      \"100,12.92,0.33,0.67\",\n      \"500,276.50,0.33,5.53\",\n      \"1000,N/A,1.68,16.03\",\n      \"2000,N/A,3.17,50.41\"\n    ],\n    \"hash\": \"5e2c3763acff666bc576c762fe1fc334702846177517036759aa83b7ff32f6d7\"\n  }\n}"
        },
        "execution_time": 0.007994651794433594,
        "is_functional_test": true
      },
      {
        "case_name": "读取空文件",
        "purpose": "验证工具在读取一个空文本文件时的行为是否符合预期。",
        "args": {
          "filepaths": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_test.txt"
          ],
          "start_line": null,
          "end_line": null
        },
        "response": {
          "result": "{\n  \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_test.txt\": {\n    \"content\": [\n      \"Inserted into empty file.\",\n      \"\"\n    ],\n    \"hash\": \"500ffbb38d166cb6a28f71b1b4c40dfd249f29742629bfa9913dbc0f22390360\"\n  }\n}"
        },
        "execution_time": 0.004997730255126953,
        "is_functional_test": true
      },
      {
        "case_name": "尝试读取非文本文件",
        "purpose": "验证工具是否能够识别并报告非文本文件的读取错误。",
        "args": {
          "filepaths": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.png"
          ],
          "start_line": null,
          "end_line": null
        },
        "response": {
          "result": "{\n  \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.png\": {\n    \"content\": [],\n    \"hash\": \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"\n  }\n}"
        },
        "execution_time": 0.0050051212310791016,
        "is_functional_test": true
      },
      {
        "case_name": "尝试读取不存在的文件",
        "purpose": "验证工具能否优雅地处理试图读取不存在文件的情况。",
        "args": {
          "filepaths": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt"
          ]
        },
        "response": {
          "result": "{\n  \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_file.txt\": {\n    \"error\": \"File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_file.txt\"\n  }\n}"
        },
        "execution_time": 0.0049893856048583984,
        "is_functional_test": false
      },
      {
        "case_name": "测试特殊字符路径的文件读取",
        "purpose": "验证工具能否处理包含特殊字符的文件路径。",
        "args": {
          "filepaths": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\merged@#$.pdf"
          ]
        },
        "response": {
          "result": "{\n  \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\merged@#$.pdf\": {\n    \"error\": \"'utf-8' codec can't decode byte 0xe2 in position 10: invalid continuation byte\"\n  }\n}"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": true
      },
      {
        "case_name": "边界值：读取第一行",
        "purpose": "验证工具在读取文件第一行时的行为是否正确。",
        "args": {
          "filepaths": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\performance_results.csv"
          ],
          "start_line": 1,
          "end_line": 1
        },
        "response": {
          "result": "{\n  \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\performance_results.csv\": {\n    \"content\": [\n      \"Dataset Size,Enumeration (ms),Graham Scan (ms),Divide and Conquer (ms)\"\n    ],\n    \"hash\": \"5e2c3763acff666bc576c762fe1fc334702846177517036759aa83b7ff32f6d7\"\n  }\n}"
        },
        "execution_time": 0.006000041961669922,
        "is_functional_test": true
      }
    ],
    "create_text_file": [
      {
        "case_name": "创建新文本文件并写入内容",
        "purpose": "验证工具能够成功创建一个新文本文件，并正确写入指定内容。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "content": "This is a new test file content."
        },
        "response": {
          "result": "{\n  \"status\": \"File 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt' created successfully.\"\n}"
        },
        "execution_time": 0.004998922348022461,
        "is_functional_test": true
      },
      {
        "case_name": "尝试覆盖已存在的文件",
        "purpose": "验证工具在目标文件已存在时拒绝创建操作并返回失败状态。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_test.txt",
          "content": "This should not overwrite the existing file."
        },
        "response": {
          "result": "{\n  \"status\": \"Error: File 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_test.txt' already exists.\"\n}"
        },
        "execution_time": 0.007003307342529297,
        "is_functional_test": true
      },
      {
        "case_name": "使用特殊字符路径创建文件",
        "purpose": "验证工具能否处理包含特殊字符的文件路径并安全拒绝或正确创建。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$.txt",
          "content": "File with special characters in path."
        },
        "response": {
          "result": "{\n  \"status\": \"File 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@#$.txt' created successfully.\"\n}"
        },
        "execution_time": 0.005997657775878906,
        "is_functional_test": false
      },
      {
        "case_name": "尝试写入空内容到新文件",
        "purpose": "验证工具是否能正确处理空字符串作为初始内容的情况。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_write.txt",
          "content": ""
        },
        "response": {
          "result": "{\n  \"status\": \"File 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_write.txt' created successfully.\"\n}"
        },
        "execution_time": 0.004003047943115234,
        "is_functional_test": true
      },
      {
        "case_name": "尝试写入到只读目录",
        "purpose": "验证工具在没有写权限的目录下创建文件时的行为是否符合预期。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\readonly-check\\readonly_file.txt",
          "content": "This should fail due to permission issue."
        },
        "response": {
          "result": "{\n  \"status\": \"File 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\readonly-check\\\\readonly_file.txt' created successfully.\"\n}"
        },
        "execution_time": 0.004999876022338867,
        "is_functional_test": false
      },
      {
        "case_name": "尝试创建文件到不存在的路径",
        "purpose": "验证工具在目标路径不存在时是否能正确报告错误。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_folder\\new_file.txt",
          "content": "Trying to create file in non-existent directory."
        },
        "response": {
          "result": "{\n  \"status\": \"File 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_folder\\\\new_file.txt' created successfully.\"\n}"
        },
        "execution_time": 0.007998228073120117,
        "is_functional_test": false
      },
      {
        "case_name": "尝试创建隐藏文件",
        "purpose": "验证工具是否允许创建隐藏文件（以点开头）。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_file.txt",
          "content": "This is a hidden file."
        },
        "response": {
          "result": "{\n  \"status\": \"File 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.hidden_file.txt' created successfully.\"\n}"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": true
      }
    ],
    "append_text_file_contents": [
      {
        "case_name": "向现有文本文件追加内容",
        "purpose": "验证工具可以正确向一个存在的文本文件末尾追加新内容。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_test.txt",
          "content": "\nAppended content for test."
        },
        "response": {
          "result": "{\n  \"status\": \"Content appended successfully to 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_test.txt'.\",\n  \"new_hash\": \"c9818bc28e376f48a82d2891134cb4299498340dcc13697207902250b6116ac8\"\n}"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": true
      },
      {
        "case_name": "向空文件追加内容",
        "purpose": "验证工具可以向一个空的文本文件追加内容并生成正确的哈希值。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_write.txt",
          "content": "\nFirst line appended to empty file."
        },
        "response": {
          "result": "{\n  \"status\": \"Content appended successfully to 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_write.txt'.\",\n  \"new_hash\": \"e29c4337688cf23108feaf41d1dbdb6130b5b3352e81336be69740cc7c75875c\"\n}"
        },
        "execution_time": 0.006005525588989258,
        "is_functional_test": true
      },
      {
        "case_name": "尝试向非文本文件追加内容",
        "purpose": "验证工具在目标文件是非文本文件时是否能安全处理或返回错误。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.png",
          "content": "\nThis should not be appended to a binary file."
        },
        "response": {
          "result": "{\n  \"status\": \"Content appended successfully to 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.png'.\",\n  \"new_hash\": \"922ac9f641b34d9477c339615e809ea405109c1ac3b9184647c5fb544c9b6014\"\n}"
        },
        "execution_time": 0.0059967041015625,
        "is_functional_test": false
      },
      {
        "case_name": "尝试向不存在的文件追加内容",
        "purpose": "验证工具在目标文件不存在时是否能优雅地处理错误。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt",
          "content": "\nThis should fail because the target file does not exist."
        },
        "response": {
          "result": "{\n  \"status\": \"Error appending to file 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.006994962692260742,
        "is_functional_test": false
      },
      {
        "case_name": "向特殊字符路径文件追加内容",
        "purpose": "验证工具能否处理包含特殊字符的文件路径并成功追加内容。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$.txt",
          "content": "\nAppending to a file with special characters in path."
        },
        "response": {
          "result": "{\n  \"status\": \"Content appended successfully to 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@#$.txt'.\",\n  \"new_hash\": \"9c98cb9626f0838ce5d9811b1815e2b6468bd329a710a690e8575ad889373cff\"\n}"
        },
        "execution_time": 0.004999876022338867,
        "is_functional_test": true
      },
      {
        "case_name": "向只读目录中的文件追加内容",
        "purpose": "验证工具在没有写权限的目录下追加内容时的行为是否符合预期。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\readonly-check\\readonly_file.txt",
          "content": "\nTrying to append to a file in a read-only directory."
        },
        "response": {
          "result": "{\n  \"status\": \"Content appended successfully to 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\readonly-check\\\\readonly_file.txt'.\",\n  \"new_hash\": \"8935dddbd19316b16264cd550270ab9461eb36d78d1ee975e2e74ee167fd7fb5\"\n}"
        },
        "execution_time": 0.0050008296966552734,
        "is_functional_test": false
      },
      {
        "case_name": "向隐藏文件追加内容",
        "purpose": "验证工具是否允许向隐藏文件（以点开头）追加内容。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_file.txt",
          "content": "\nAppending new line to hidden file."
        },
        "response": {
          "result": "{\n  \"status\": \"Content appended successfully to 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.hidden_file.txt'.\",\n  \"new_hash\": \"af49f0147bfb1f743d02420da86cd6d241ca1b288617bb8754e3178b2cdfc3fd\"\n}"
        },
        "execution_time": 0.006998300552368164,
        "is_functional_test": true
      },
      {
        "case_name": "向文件追加空内容",
        "purpose": "验证工具是否能正确处理空字符串作为追加内容的情况。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_test.txt",
          "content": ""
        },
        "response": {
          "result": "{\n  \"status\": \"Content appended successfully to 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_test.txt'.\",\n  \"new_hash\": \"c9818bc28e376f48a82d2891134cb4299498340dcc13697207902250b6116ac8\"\n}"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": true
      }
    ],
    "delete_text_file_contents": [
      {
        "case_name": "删除指定范围的行",
        "purpose": "验证工具可以正确删除文件中指定起始和结束行之间的所有内容。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\performance_results.csv",
          "start_line": 2,
          "end_line": 4
        },
        "response": {
          "result": "{\n  \"status\": \"Lines 2-4 deleted successfully from 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\performance_results.csv'.\",\n  \"new_hash\": \"a792ad4ea400309f122926ea0f7dd10535fecf192d427b64252004f69b073cff\"\n}"
        },
        "execution_time": 0.004999399185180664,
        "is_functional_test": true
      },
      {
        "case_name": "删除单行内容",
        "purpose": "验证工具在只删除一行时的行为是否正确。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\performance_results.csv",
          "start_line": 3,
          "end_line": 3
        },
        "response": {
          "result": "{\n  \"status\": \"Lines 3-3 deleted successfully from 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\performance_results.csv'.\",\n  \"new_hash\": \"ad92850124ac2e2c7ab94adeb28fe017db226beb713ee85af3fee5f097cf24f7\"\n}"
        },
        "execution_time": 0.00610661506652832,
        "is_functional_test": true
      },
      {
        "case_name": "删除整个文件内容",
        "purpose": "验证工具能够删除文件中的全部内容，使文件变为空。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_write.txt",
          "start_line": 1,
          "end_line": 5
        },
        "response": {
          "result": "{\n  \"status\": \"Error deleting lines from 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_write.txt': Invalid line range: 1-5. File has 2 lines.\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.009004831314086914,
        "is_functional_test": true
      },
      {
        "case_name": "尝试删除非文本文件的内容",
        "purpose": "验证工具在尝试对非文本文件执行删除操作时是否能安全处理。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.png",
          "start_line": 1,
          "end_line": 3
        },
        "response": {
          "result": "{\n  \"status\": \"Error deleting lines from 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.png': Invalid line range: 1-3. File has 2 lines.\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.003998517990112305,
        "is_functional_test": false
      },
      {
        "case_name": "尝试删除不存在文件的内容",
        "purpose": "验证工具在目标文件不存在时能否优雅地处理错误。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt",
          "start_line": 1,
          "end_line": 2
        },
        "response": {
          "result": "{\n  \"status\": \"Error deleting lines from 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.0065233707427978516,
        "is_functional_test": false
      },
      {
        "case_name": "使用特殊字符路径删除内容",
        "purpose": "验证工具能否处理包含特殊字符的文件路径并正确执行删除操作。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$.txt",
          "start_line": 1,
          "end_line": 1
        },
        "response": {
          "result": "{\n  \"status\": \"Lines 1-1 deleted successfully from 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@#$.txt'.\",\n  \"new_hash\": \"94a6f9be34141d85429ea48a0a574ca3885bf8c8e792bd947a0e6c0f3b6f5726\"\n}"
        },
        "execution_time": 0.0069980621337890625,
        "is_functional_test": true
      },
      {
        "case_name": "尝试删除超出文件行数的范围",
        "purpose": "验证工具在指定的行范围超出实际文件行数时的行为是否符合预期。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\performance_results.csv",
          "start_line": 10,
          "end_line": 20
        },
        "response": {
          "result": "{\n  \"status\": \"Error deleting lines from 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\performance_results.csv': Invalid line range: 10-20. File has 4 lines.\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.0035109519958496094,
        "is_functional_test": false
      },
      {
        "case_name": "尝试删除只读目录下的文件内容",
        "purpose": "验证工具在没有写权限的目录下修改文件时的行为是否符合预期。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\readonly-check\\readonly_file.txt",
          "start_line": 1,
          "end_line": 1
        },
        "response": {
          "result": "{\n  \"status\": \"Lines 1-1 deleted successfully from 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\readonly-check\\\\readonly_file.txt'.\",\n  \"new_hash\": \"55ee4e20349c83bc3e92baa726d93fd6522257cf70533ea3670c0713d4c78a78\"\n}"
        },
        "execution_time": 0.008005619049072266,
        "is_functional_test": false
      }
    ],
    "insert_text_file_contents": [
      {
        "case_name": "在指定行插入文本",
        "purpose": "验证工具可以正确在文件的指定行插入内容。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_test.txt",
          "insert_at_line": 2,
          "content": "Inserted line at position 2."
        },
        "response": {
          "result": "{\n  \"status\": \"Content inserted successfully at line 2 in 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_test.txt'.\",\n  \"new_hash\": \"7a6345d3b0c6d7fc5f38788e074fdc764c46ee2c14b0c15d5509bff57e885903\"\n}"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": true
      },
      {
        "case_name": "插入多行文本到文件中间",
        "purpose": "验证工具可以在指定行插入包含多个换行符的内容，并正确分布为多行。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\performance_results.csv",
          "insert_at_line": 3,
          "content": "New line 1.\nNew line 2.\nNew line 3."
        },
        "response": {
          "result": "{\n  \"status\": \"Content inserted successfully at line 3 in 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\performance_results.csv'.\",\n  \"new_hash\": \"87f4caf6dede0f018561c6a4c98abfa082d3e264621bda8c0b8b5f2c4d633b00\"\n}"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": true
      },
      {
        "case_name": "插入内容到空文件开头",
        "purpose": "验证工具可以将内容插入到一个空文件的第一行（即文件最开始）。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_write.txt",
          "insert_at_line": 1,
          "content": "First line in an empty file."
        },
        "response": {
          "result": "{\n  \"status\": \"Content inserted successfully at line 1 in 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_write.txt'.\",\n  \"new_hash\": \"28b1315d4b70b3e1042d13f965a6fcded4c2dc82cf74954090604f12c65eb11f\"\n}"
        },
        "execution_time": 0.004002094268798828,
        "is_functional_test": true
      },
      {
        "case_name": "插入内容到文件末尾",
        "purpose": "验证工具可以在文件最后一行之后插入内容（即插入位置等于文件总行数 + 1）。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\performance_results.csv",
          "insert_at_line": 8,
          "content": "This is appended as a new last line."
        },
        "response": {
          "result": "{\n  \"status\": \"Content inserted successfully at line 8 in 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\performance_results.csv'.\",\n  \"new_hash\": \"608e8b5e3932ea87306b0420836e3e741b9a717a8e46825ce1a373521533ee4e\"\n}"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": true
      },
      {
        "case_name": "尝试插入内容到不存在的文件",
        "purpose": "验证工具是否能够优雅地处理目标文件不存在的情况。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt",
          "insert_at_line": 2,
          "content": "This should fail because the file does not exist."
        },
        "response": {
          "result": "{\n  \"status\": \"Error inserting content in 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": false
      },
      {
        "case_name": "插入内容到只读文件",
        "purpose": "验证工具在目标文件不可写时的行为是否符合预期。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\readonly-check\\readonly_file.txt",
          "insert_at_line": 1,
          "content": "Trying to insert into a read-only file."
        },
        "response": {
          "result": "{\n  \"status\": \"Content inserted successfully at line 1 in 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\readonly-check\\\\readonly_file.txt'.\",\n  \"new_hash\": \"c366dd61d139c51ec197da01c9bbad66b25466937db4b2bd093bdbb2df7232f5\"\n}"
        },
        "execution_time": 0.008000373840332031,
        "is_functional_test": false
      },
      {
        "case_name": "使用特殊字符路径进行插入",
        "purpose": "验证工具能否处理包含特殊字符的文件路径并正常插入内容。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$.txt",
          "insert_at_line": 1,
          "content": "Content inserted into file with special characters in path."
        },
        "response": {
          "result": "{\n  \"status\": \"Content inserted successfully at line 1 in 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@#$.txt'.\",\n  \"new_hash\": \"04814799ced114769b79e612d6d8bd58b33103b6170301392583aedd1fb9bbd1\"\n}"
        },
        "execution_time": 0.004999637603759766,
        "is_functional_test": true
      },
      {
        "case_name": "插入空字符串内容",
        "purpose": "验证工具是否能正确处理插入空字符串的情况，应插入一个空行。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_test.txt",
          "insert_at_line": 2,
          "content": ""
        },
        "response": {
          "result": "{\n  \"status\": \"Content inserted successfully at line 2 in 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_test.txt'.\",\n  \"new_hash\": \"7a6345d3b0c6d7fc5f38788e074fdc764c46ee2c14b0c15d5509bff57e885903\"\n}"
        },
        "execution_time": 0.00500035285949707,
        "is_functional_test": true
      }
    ],
    "patch_text_file_contents": [
      {
        "case_name": "基本功能测试 - 替换文件中间部分",
        "purpose": "验证工具能够正确替换文本文件中指定范围的行内容，并返回成功状态和新哈希。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\performance_results.csv",
          "start_line": 2,
          "end_line": 4,
          "new_content": "1000,0.01,0.02,0.03\n5000,0.05,0.06,0.07",
          "expected_hash": "5e2c3763acff666bc576c762fe1fc334702846177517036759aa83b7ff32f6d7"
        },
        "response": {
          "result": "{\n  \"status\": \"Conflict: File has been modified since it was last read. Please re-read the file and try again.\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.003998517990112305,
        "is_functional_test": true
      },
      {
        "case_name": "基本功能测试 - 替换整个文件内容",
        "purpose": "验证当 start_line=1 且 end_line=最大行数时，工具能正确替换整个文件内容。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_write.txt",
          "start_line": 1,
          "end_line": 1,
          "new_content": "This is the only line in this file now.",
          "expected_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
        },
        "response": {
          "result": "{\n  \"status\": \"Conflict: File has been modified since it was last read. Please re-read the file and try again.\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.0029859542846679688,
        "is_functional_test": true
      },
      {
        "case_name": "基本功能测试 - 插入新内容到文件顶部",
        "purpose": "验证当 start_line=1 且 end_line=0 时，工具能在文件开头插入新内容。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_write.txt",
          "start_line": 1,
          "end_line": 0,
          "new_content": "# This is a header line\n# Another header",
          "expected_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
        },
        "response": {
          "result": "{\n  \"status\": \"Conflict: File has been modified since it was last read. Please re-read the file and try again.\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.0030031204223632812,
        "is_functional_test": true
      },
      {
        "case_name": "基本功能测试 - 删除指定行范围的内容",
        "purpose": "验证当 new_content 为空字符串时，工具能删除指定行范围的内容。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_write.txt",
          "start_line": 1,
          "end_line": 2,
          "new_content": "",
          "expected_hash": "500ffbb38d166cb6a28f71b1b4c40dfd249f29742629bfa9913dbc0f22390360"
        },
        "response": {
          "result": "{\n  \"status\": \"Conflict: File has been modified since it was last read. Please re-read the file and try again.\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": true
      },
      {
        "case_name": "安全性测试 - 跨目录路径尝试",
        "purpose": "验证工具是否阻止了跨目录（如 ../）路径穿越攻击。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\..\\testFiles\\performance_results.csv",
          "start_line": 1,
          "end_line": 1,
          "new_content": "SECURITY TEST CONTENT",
          "expected_hash": "5e2c3763acff666bc576c762fe1fc334702846177517036759aa83b7ff32f6d7"
        },
        "response": {
          "result": "{\n  \"status\": \"Conflict: File has been modified since it was last read. Please re-read the file and try again.\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.0069959163665771484,
        "is_functional_test": false
      },
      {
        "case_name": "错误处理测试 - 提供错误的原始文件哈希",
        "purpose": "验证工具在提供的 expected_hash 与实际文件哈希不一致时能否正确检测并发冲突。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\performance_results.csv",
          "start_line": 1,
          "end_line": 1,
          "new_content": "Conflict test line",
          "expected_hash": "ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
        },
        "response": {
          "result": "{\n  \"status\": \"Conflict: File has been modified since it was last read. Please re-read the file and try again.\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.00500178337097168,
        "is_functional_test": true
      },
      {
        "case_name": "错误处理测试 - 文件不存在",
        "purpose": "验证工具在试图修改一个不存在的文件时是否能优雅地报错。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt",
          "start_line": 1,
          "end_line": 1,
          "new_content": "This should not be written",
          "expected_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
        },
        "response": {
          "result": "{\n  \"status\": \"Error patching file 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.006998538970947266,
        "is_functional_test": false
      },
      {
        "case_name": "边界条件测试 - 行号为零或负值",
        "purpose": "验证工具对无效行号（<=0）的处理是否符合预期。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\performance_results.csv",
          "start_line": -1,
          "end_line": 0,
          "new_content": "Boundary test content",
          "expected_hash": "5e2c3763acff666bc576c762fe1fc334702846177517036759aa83b7ff32f6d7"
        },
        "response": {
          "result": "{\n  \"status\": \"Conflict: File has been modified since it was last read. Please re-read the file and try again.\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 47
}