{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "gemini-2.5-pro-mcp_git_repository_manager",
  "server_path": "workspace/pipeline-output-servers/gemini-2.5-pro/mcp_git_repository_manager/refined/server.py",
  "timestamp": "2025-07-13T04:05:07.193981",
  "tools": [
    {
      "name": "git_init",
      "description": "\n    Initializes a new Git repository at the specified path.\n\n    This function creates an empty Git repository in the given directory. If the\n    directory does not exist, it will be created. If a Git repository already\n    exists at the path, an error will be returned.\n\n    Args:\n        repo_path (str): The local directory path to initialize as a Git repository.\n                         Example: \"/path/to/my-repo\"\n\n    Returns:\n        str: A JSON string confirming the repository initialization or reporting an error.\n             On success: '{\"status\": \"success\", \"message\": \"Repository initialized at /path/to/my-repo\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_initArguments",
        "type": "object"
      }
    },
    {
      "name": "git_status",
      "description": "\n    Shows the working tree status of a Git repository.\n\n    This function provides a summary of the current state of the repository,\n    including untracked files, changes not staged for commit, and changes\n    to be committed.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n\n    Returns:\n        str: A JSON string containing the Git repository's current status or an error message.\n             On success: '{\"status\": \"success\", \"data\": \"status output\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_statusArguments",
        "type": "object"
      }
    },
    {
      "name": "git_add",
      "description": "\n    Adds file changes to the staging area (index).\n\n    This function stages changes in a specific file or all changes in the\n    working directory, preparing them for the next commit.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        file_path (str): The file path to add to the staging area. Use '.' to add all changes.\n                         Example: \"my_file.py\" or \".\"\n\n    Returns:\n        str: A JSON string confirming the addition or reporting an error.\n             On success: '{\"status\": \"success\", \"message\": \"Added 'my_file.py' to the staging area.\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "file_path": {
            "title": "File Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "file_path"
        ],
        "title": "git_addArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_unstaged",
      "description": "\n    Shows changes in the working directory that are not yet staged.\n\n    This function displays the differences between the files in the working\n    directory and the staging area (index). It highlights modifications that\n    have not been added for commit.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n\n    Returns:\n        str: A JSON string containing the diff of unstaged changes or an error message.\n             On success: '{\"status\": \"success\", \"data\": \"diff output\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_diff_unstagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_staged",
      "description": "\n    Shows changes that are staged but not yet committed.\n\n    This function displays the differences between the staging area (index) and\n    the last commit (HEAD). It shows what will be included in the next commit.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n\n    Returns:\n        str: A JSON string containing the diff of staged changes or an error message.\n             On success: '{\"status\": \"success\", \"data\": \"diff output\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_diff_stagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff",
      "description": "\n    Compares differences between two branches, commits, or a branch and the working directory.\n\n    This function provides a flexible way to see the changes between different\n    points in the repository's history.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        base (str): The base branch or commit hash for comparison.\n                    Example: \"main\"\n        compare (str, optional): The branch or commit hash to compare with the base.\n                                 If not provided, compares the base with the current\n                                 working directory.\n                                 Example: \"develop\"\n\n    Returns:\n        str: A JSON string containing the diff between the two references or an error message.\n             On success: '{\"status\": \"success\", \"data\": \"diff output\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "base": {
            "title": "Base",
            "type": "string"
          },
          "compare": {
            "default": null,
            "title": "Compare",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "base"
        ],
        "title": "git_diffArguments",
        "type": "object"
      }
    },
    {
      "name": "git_commit",
      "description": "\n    Records staged changes to the repository.\n\n    This function creates a new commit containing the content of the staging area\n    (index) along with a descriptive commit message. An error is returned if\n    there are no changes staged for commit.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        message (str): The commit message.\n                       Example: \"feat: Add new feature\"\n\n    Returns:\n        str: A JSON string containing the new commit's hash or an error message.\n             On success: '{\"status\": \"success\", \"commit_hash\": \"a1b2c3d4...\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "message": {
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "message"
        ],
        "title": "git_commitArguments",
        "type": "object"
      }
    },
    {
      "name": "git_reset",
      "description": "\n    Unstages files from the staging area (index).\n\n    This function removes files from the staging area, effectively undoing a\n    'git add' command. It does not modify the working directory.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        file_path (str, optional): The specific file path to remove from the staging area.\n                                   If not provided, all files are unstaged.\n                                   Example: \"my_file.py\"\n\n    Returns:\n        str: A JSON string confirming the reset or reporting an error.\n             On success: '{\"status\": \"success\", \"message\": \"Unstaged 'my_file.py'.\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "file_path": {
            "default": null,
            "title": "File Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_resetArguments",
        "type": "object"
      }
    },
    {
      "name": "git_log",
      "description": "\n    Shows the commit history of the current branch.\n\n    This function retrieves a list of the most recent commits, providing details\n    such as commit hash, author, date, and message for each.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        max_count (int, optional): The maximum number of log entries to show.\n                                   Defaults to 10. Example: 5\n\n    Returns:\n        str: A JSON string containing the formatted commit history log or an error message.\n             On success: '{\"status\": \"success\", \"data\": [{\"hash\": ..., \"author\": ..., \"date\": ..., \"message\": ...}]}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "max_count": {
            "default": 10,
            "title": "Max Count",
            "type": "integer"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_logArguments",
        "type": "object"
      }
    },
    {
      "name": "git_create_branch",
      "description": "\n    Creates a new branch in the repository.\n\n    The new branch is created pointing to the current HEAD commit. This function\n    does not switch to the new branch.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        branch_name (str): The name of the new branch to create.\n                           Example: \"feature/new-branch\"\n\n    Returns:\n        str: A JSON string confirming the branch creation or reporting an error.\n             On success: '{\"status\": \"success\", \"message\": \"Branch 'feature/new-branch' created.\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Branch 'feature/new-branch' already exists.\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "branch_name"
        ],
        "title": "git_create_branchArguments",
        "type": "object"
      }
    },
    {
      "name": "git_checkout",
      "description": "\n    Switches to a specified branch, updating the working directory.\n\n    This function changes the current active branch to the one specified. The\n    files in the working directory will be updated to match the version in\n    the new branch.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        branch_name (str): The name of the branch to switch to.\n                           Example: \"main\"\n\n    Returns:\n        str: A JSON string confirming the branch switch or reporting an error.\n             On success: '{\"status\": \"success\", \"message\": \"Switched to branch 'main'.\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Branch 'main' not found.\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "branch_name"
        ],
        "title": "git_checkoutArguments",
        "type": "object"
      }
    },
    {
      "name": "git_show",
      "description": "\n    Shows details and changes of a specific commit.\n\n    This function provides metadata (author, date, message) and the patch\n    (diff) for a given commit hash.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        commit_hash (str): The hash of the commit to view details for. Can be a short hash.\n                           Example: \"a1b2c3d4\"\n\n    Returns:\n        str: A JSON string containing detailed information about the specified commit or an error message.\n             On success: '{\"status\": \"success\", \"data\": {\"hash\": ..., \"author\": ..., \"date\": ..., \"message\": ..., \"diff\": ...}}'\n             On failure: '{\"status\": \"error\", \"message\": \"Commit with hash 'a1b2c3d4' not found.\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "commit_hash": {
            "title": "Commit Hash",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "commit_hash"
        ],
        "title": "git_showArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "git_init": [
      {
        "case_name": "Initialize new Git repository in valid empty directory",
        "purpose": "验证在指定的空目录中成功初始化一个新的Git仓库",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Repository initialized at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\"}"
        },
        "execution_time": 0.1727135181427002,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to initialize Git repository in existing Git directory",
        "purpose": "验证在已存在Git仓库的目录中初始化时返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Repository initialized at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\"}"
        },
        "execution_time": 0.32123517990112305,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git repository with special characters in path",
        "purpose": "验证包含特殊字符的路径是否能正确初始化Git仓库",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$_dir"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Repository initialized at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@#$_dir\"}"
        },
        "execution_time": 0.32154107093811035,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git repository in non-existent directory",
        "purpose": "验证工具能否自动创建不存在的目标目录并初始化Git仓库",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_nonexistent_dir"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Repository initialized at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_nonexistent_dir\"}"
        },
        "execution_time": 0.24474692344665527,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git repository with hidden directory name",
        "purpose": "验证以点开头的隐藏目录是否能正常初始化为Git仓库",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Repository initialized at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.hidden_repo\"}"
        },
        "execution_time": 0.18139266967773438,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to initialize Git repository without write permissions",
        "purpose": "验证没有写权限的目录下是否能安全地返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\readonly-check"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Repository initialized at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\readonly-check\"}"
        },
        "execution_time": 0.17813825607299805,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git repository with long path name",
        "purpose": "验证超长路径名是否能被正确处理并初始化Git仓库",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\long_directory_name_1234567890123456789012345678901234567890"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Repository initialized at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\long_directory_name_1234567890123456789012345678901234567890\"}"
        },
        "execution_time": 0.21495795249938965,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git repository with Unicode characters in path",
        "purpose": "验证含有Unicode字符（如中文）的路径是否能正常初始化",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文_git_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Repository initialized at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\\\u4e2d\\u6587_git_repo\"}"
        },
        "execution_time": 0.2082066535949707,
        "is_functional_test": true
      }
    ],
    "git_status": [
      {
        "case_name": "Check status of a newly initialized Git repository",
        "purpose": "验证新初始化的Git仓库在无任何修改时的状态是否为空状态",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\"}"
        },
        "execution_time": 0.00400090217590332,
        "is_functional_test": true
      },
      {
        "case_name": "Check status after modifying tracked file in Git repository",
        "purpose": "验证对已跟踪文件进行修改后，git_status能否正确显示'changes not staged for commit'",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"On branch long_branch_name_1234567890123456789012345678901234567890\\nChanges to be committed:\\n  (use \\\"git restore --staged <file>...\\\" to unstage)\\n\\tdeleted:    .git/HEAD\\n\\nChanges not staged for commit:\\n  (use \\\"git add/rm <file>...\\\" to update what will be committed)\\n  (use \\\"git restore <file>...\\\" to discard changes in working directory)\\n\\tdeleted:    basic_test_output.txt\\n\\tmodified:   empty_content_test.txt\\n\\tmodified:   nature.png\\n\\nUntracked files:\\n  (use \\\"git add <file>...\\\" to include in what will be committed)\\n\\t.hidden_file.txt\\n\\tapp.ico\\n\\tempty_content_write.txt\\n\\tmodules.xml\\n\\tnature.jpeg\\n\\tnonname.html\\n\\tpaper1.pdf\\n\\tperformance_results.csv\\n\\tpresent.html\\n\\tre2.doc\\n\\trule1.pdf\\n\\tspecial@#$.txt\\n\\tswe.pptx\\n\\ttest_mskanji.csv\\n\\ttest_output.pdf\\n\\txue.png\\n\"}"
        },
        "execution_time": 0.20073866844177246,
        "is_functional_test": true
      },
      {
        "case_name": "Check status with untracked files in repository",
        "purpose": "验证存在未跟踪文件时，git_status能否正确显示'untracked files'",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_nonexistent_dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_nonexistent_dir\"}"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": true
      },
      {
        "case_name": "Check status of repository with staged changes",
        "purpose": "验证已暂存更改的仓库能否被正确识别并显示'changes to be committed'",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$_dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@#$_dir\"}"
        },
        "execution_time": 0.002998828887939453,
        "is_functional_test": true
      },
      {
        "case_name": "Check status of hidden Git repository",
        "purpose": "验证隐藏目录中的Git仓库能否正常返回状态信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.hidden_repo\"}"
        },
        "execution_time": 0.007001399993896484,
        "is_functional_test": true
      },
      {
        "case_name": "Check status of repository with long path name",
        "purpose": "验证超长路径名的Git仓库能否正确获取状态信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\long_directory_name_1234567890123456789012345678901234567890"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\long_directory_name_1234567890123456789012345678901234567890\"}"
        },
        "execution_time": 0.005000591278076172,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to check status of non-Git directory",
        "purpose": "验证非Git仓库目录调用git_status时能否返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"On branch long_branch_name_1234567890123456789012345678901234567890\\nChanges to be committed:\\n  (use \\\"git restore --staged <file>...\\\" to unstage)\\n\\tdeleted:    .git/HEAD\\n\\nChanges not staged for commit:\\n  (use \\\"git add/rm <file>...\\\" to update what will be committed)\\n  (use \\\"git restore <file>...\\\" to discard changes in working directory)\\n\\tdeleted:    basic_test_output.txt\\n\\tmodified:   empty_content_test.txt\\n\\tmodified:   nature.png\\n\\nUntracked files:\\n  (use \\\"git add <file>...\\\" to include in what will be committed)\\n\\t.hidden_file.txt\\n\\tapp.ico\\n\\tempty_content_write.txt\\n\\tmodules.xml\\n\\tnature.jpeg\\n\\tnonname.html\\n\\tpaper1.pdf\\n\\tperformance_results.csv\\n\\tpresent.html\\n\\tre2.doc\\n\\trule1.pdf\\n\\tspecial@#$.txt\\n\\tswe.pptx\\n\\ttest_mskanji.csv\\n\\ttest_output.pdf\\n\\txue.png\\n\"}"
        },
        "execution_time": 0.19151663780212402,
        "is_functional_test": false
      },
      {
        "case_name": "Check status with invalid repository path",
        "purpose": "验证传入无效路径（如空字符串、null）时能否安全地处理并返回错误",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: \"}"
        },
        "execution_time": 0.0030002593994140625,
        "is_functional_test": false
      }
    ],
    "git_add": [
      {
        "case_name": "Add a single file to staging area in valid repository",
        "purpose": "验证在有效的Git仓库中将单个文件添加到暂存区的基本功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_test.txt"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Added 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_test.txt' to the staging area.\"}"
        },
        "execution_time": 0.16960668563842773,
        "is_functional_test": true
      },
      {
        "case_name": "Add all changes using '.' as file path",
        "purpose": "验证使用'.'作为文件路径时，能够正确地将所有修改添加到暂存区",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "file_path": "."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Added all changes to the staging area.\"}"
        },
        "execution_time": 0.5703911781311035,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to add file in non-Git directory",
        "purpose": "验证尝试在非Git仓库目录中执行git_add操作是否会返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_test.txt"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Added 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_test.txt' to the staging area.\"}"
        },
        "execution_time": 0.13110804557800293,
        "is_functional_test": false
      },
      {
        "case_name": "Add file with special characters in path",
        "purpose": "验证包含特殊字符的文件路径能否被正确处理并添加到暂存区",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$.txt"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Added 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@#$.txt' to the staging area.\"}"
        },
        "execution_time": 0.15660929679870605,
        "is_functional_test": true
      },
      {
        "case_name": "Add untracked hidden file to staging area",
        "purpose": "验证可以成功将隐藏文件（以点开头）添加到暂存区",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_file.txt"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Added 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.hidden_file.txt' to the staging area.\"}"
        },
        "execution_time": 0.16232609748840332,
        "is_functional_test": true
      },
      {
        "case_name": "Add file to repository with long path name",
        "purpose": "验证超长路径名的Git仓库能否正确执行git_add操作",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\long_directory_name_1234567890123456789012345678901234567890",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_test.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\long_directory_name_1234567890123456789012345678901234567890\"}"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to add file with invalid repository path",
        "purpose": "验证传入无效仓库路径时能否安全地返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_test.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_repo\"}"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      },
      {
        "case_name": "Add file with Unicode characters in file path",
        "purpose": "验证含有Unicode字符（如中文）的文件路径能否正常添加到暂存区",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\readonly-check",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文_git_repo\\test_output.pdf"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Git command failed: Cmd('git') failed due to: exit code(128)\\n  cmdline: git add D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\\\u4e2d\\u6587_git_repo\\\\test_output.pdf\\n  stderr: 'fatal: Invalid path 'D:/devWorkspace/MCPServer-Generator/testSystem/testFiles/\\u4e2d\\u6587_git_repo': No such file or directory'\"}"
        },
        "execution_time": 0.17540478706359863,
        "is_functional_test": true
      }
    ],
    "git_diff_unstaged": [
      {
        "case_name": "Show unstaged changes in repository with modified files",
        "purpose": "验证当工作目录中存在未暂存的修改文件时，能否正确显示差异信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"diff --git a/.hidden_file.txt b/.hidden_file.txt\\ndeleted file mode 100644\\nindex 077be70..0000000\\n--- a/.hidden_file.txt\\n+++ /dev/null\\n@@ -1,2 +0,0 @@\\n-This is a hidden file.\\n-Appending new line to hidden file.\\n\\\\ No newline at end of file\\ndiff --git a/empty_content_test.txt b/empty_content_test.txt\\ndeleted file mode 100644\\nindex 0cadc94..0000000\\n--- a/empty_content_test.txt\\n+++ /dev/null\\n@@ -1,5 +0,0 @@\\n-Inserted into empty file.\\r\\n-Inserted line at position 2.\\r\\n-\\r\\n-\\r\\n-Appended content for test.\\n\\\\ No newline at end of file\\ndiff --git a/nature.png b/nature.png\\ndeleted file mode 100644\\nindex afb43ff..0000000\\n--- a/nature.png\\n+++ /dev/null\\n@@ -1,2 +0,0 @@\\n-\\n-This should not be appended to a binary file.\\n\\\\ No newline at end of file\\ndiff --git a/performance_results.csv b/performance_results.csv\\ndeleted file mode 100644\\nindex cd5f310..0000000\\n--- a/performance_results.csv\\n+++ /dev/null\\n@@ -1,8 +0,0 @@\\n-Dataset Size,Enumeration (ms),Graham Scan (ms),Divide and Conquer (ms)\\n-2000,N/A,3.17,50.41\\n-New line 1.\\n-New line 2.\\n-New line 3.\\n-10000,N/A,17.16,1065.61\\n-20000,N/A,35.22,4320.63\\n-This is appended as a new last line.\\ndiff --git a/special@#$.txt b/special@#$.txt\\ndeleted file mode 100644\\nindex 4b7c5c3..0000000\\n--- a/special@#$.txt\\n+++ /dev/null\\n@@ -1,2 +0,0 @@\\n-Content inserted into file with special characters in path.\\n-Appending to a file with special characters in path.\\n\\\\ No newline at end of ...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计144403字符，剩余142903字符"
        },
        "execution_time": 0.6080422401428223,
        "is_functional_test": true
      },
      {
        "case_name": "Show unstaged changes in empty repository",
        "purpose": "验证新初始化的空仓库在无任何修改时是否返回空的diff信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Invalid Git repository: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\"}"
        },
        "execution_time": 0.00500035285949707,
        "is_functional_test": true
      },
      {
        "case_name": "Show unstaged changes with special characters in path",
        "purpose": "验证包含特殊字符的路径能否被正确处理并展示未暂存更改",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$_dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@#$_dir\"}"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to show unstaged changes in non-Git directory",
        "purpose": "验证非Git仓库目录调用git_diff_unstaged时能否安全地返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"diff --git a/.hidden_file.txt b/.hidden_file.txt\\ndeleted file mode 100644\\nindex 077be70..0000000\\n--- a/.hidden_file.txt\\n+++ /dev/null\\n@@ -1,2 +0,0 @@\\n-This is a hidden file.\\n-Appending new line to hidden file.\\n\\\\ No newline at end of file\\ndiff --git a/empty_content_test.txt b/empty_content_test.txt\\ndeleted file mode 100644\\nindex 0cadc94..0000000\\n--- a/empty_content_test.txt\\n+++ /dev/null\\n@@ -1,5 +0,0 @@\\n-Inserted into empty file.\\r\\n-Inserted line at position 2.\\r\\n-\\r\\n-\\r\\n-Appended content for test.\\n\\\\ No newline at end of file\\ndiff --git a/nature.png b/nature.png\\ndeleted file mode 100644\\nindex afb43ff..0000000\\n--- a/nature.png\\n+++ /dev/null\\n@@ -1,2 +0,0 @@\\n-\\n-This should not be appended to a binary file.\\n\\\\ No newline at end of file\\ndiff --git a/performance_results.csv b/performance_results.csv\\ndeleted file mode 100644\\nindex cd5f310..0000000\\n--- a/performance_results.csv\\n+++ /dev/null\\n@@ -1,8 +0,0 @@\\n-Dataset Size,Enumeration (ms),Graham Scan (ms),Divide and Conquer (ms)\\n-2000,N/A,3.17,50.41\\n-New line 1.\\n-New line 2.\\n-New line 3.\\n-10000,N/A,17.16,1065.61\\n-20000,N/A,35.22,4320.63\\n-This is appended as a new last line.\\ndiff --git a/special@#$.txt b/special@#$.txt\\ndeleted file mode 100644\\nindex 4b7c5c3..0000000\\n--- a/special@#$.txt\\n+++ /dev/null\\n@@ -1,2 +0,0 @@\\n-Content inserted into file with special characters in path.\\n-Appending to a file with special characters in path.\\n\\\\ No newline at end of ...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计144403字符，剩余142903字符"
        },
        "execution_time": 0.45128679275512695,
        "is_functional_test": false
      },
      {
        "case_name": "Handle invalid repository path gracefully",
        "purpose": "验证传入无效路径（如空字符串）时能否安全地处理并返回错误信息",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: \"}"
        },
        "execution_time": 0.0045778751373291016,
        "is_functional_test": false
      },
      {
        "case_name": "Show unstaged changes with Unicode characters in path",
        "purpose": "验证含有Unicode字符（如中文）的路径能否正常执行git_diff_unstaged",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文_git_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\\\u4e2d\\u6587_git_repo\"}"
        },
        "execution_time": 0.005000591278076172,
        "is_functional_test": true
      },
      {
        "case_name": "Show unstaged changes in hidden Git repository",
        "purpose": "验证隐藏目录中的Git仓库能否正常执行git_diff_unstaged",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.hidden_repo\"}"
        },
        "execution_time": 0.009006500244140625,
        "is_functional_test": true
      },
      {
        "case_name": "Show unstaged changes with long path name",
        "purpose": "验证超长路径名的Git仓库能否正确执行git_diff_unstaged",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\long_directory_name_1234567890123456789012345678901234567890"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\long_directory_name_1234567890123456789012345678901234567890\"}"
        },
        "execution_time": 0.00800180435180664,
        "is_functional_test": true
      }
    ],
    "git_diff_staged": [
      {
        "case_name": "Show staged changes after adding a new file",
        "purpose": "验证在暂存一个新增文件后，git_diff_staged能否正确显示该文件的差异信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"diff --git a/.git/HEAD b/.git/HEAD\\ndeleted file mode 100644\\nindex cb089cd..0000000\\n--- a/.git/HEAD\\n+++ /dev/null\\n@@ -1 +0,0 @@\\n-ref: refs/heads/master\\ndiff --git a/.hidden_file.txt b/.hidden_file.txt\\nnew file mode 100644\\nindex 0000000..077be70\\n--- /dev/null\\n+++ b/.hidden_file.txt\\n@@ -0,0 +1,2 @@\\n+This is a hidden file.\\n+Appending new line to hidden file.\\n\\\\ No newline at end of file\\ndiff --git a/app.ico b/app.ico\\nnew file mode 100644\\nindex 0000000..a5b2226\\nBinary files /dev/null and b/app.ico differ\\ndiff --git a/basic_test_output.txt b/basic_test_output.txt\\ndeleted file mode 100644\\nindex 19828e6..0000000\\n--- a/basic_test_output.txt\\n+++ /dev/null\\n@@ -1 +0,0 @@\\n-This is the first line now.\\r\\ndiff --git a/empty_content_test.txt b/empty_content_test.txt\\nindex 7461b2c..0cadc94 100644\\n--- a/empty_content_test.txt\\n+++ b/empty_content_test.txt\\n@@ -1,2 +1,5 @@\\n Inserted into empty file.\\r\\n+Inserted line at position 2.\\r\\n \\r\\n+\\r\\n+Appended content for test.\\n\\\\ No newline at end of file\\ndiff --git a/empty_content_write.txt b/empty_content_write.txt\\nnew file mode 100644\\nindex 0000000..e69de29\\ndiff --git a/modules.xml b/modules.xml\\nnew file mode 100644\\nindex 0000000..ca7e714\\n--- /dev/null\\n+++ b/modules.xml\\n@@ -0,0 +1,7 @@\\n+<project version=\\\"4\\\">\\n+  <component name=\\\"ProjectModuleManager\\\">\\n+    <modules>\\n+      <module fileurl=\\\"file://$PROJECT_DIR$/.idea/pythonProject.iml\\\" filepath=\\\"$PROJECT_DIR$/.idea/pyt...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计205677字符，剩余204177字符"
        },
        "execution_time": 1.6499755382537842,
        "is_functional_test": true
      },
      {
        "case_name": "Show staged changes after modifying an existing file",
        "purpose": "验证对已跟踪文件进行修改并暂存后，git_diff_staged能否正确显示修改内容",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"diff --git a/.git/HEAD b/.git/HEAD\\ndeleted file mode 100644\\nindex cb089cd..0000000\\n--- a/.git/HEAD\\n+++ /dev/null\\n@@ -1 +0,0 @@\\n-ref: refs/heads/master\\ndiff --git a/.hidden_file.txt b/.hidden_file.txt\\nnew file mode 100644\\nindex 0000000..077be70\\n--- /dev/null\\n+++ b/.hidden_file.txt\\n@@ -0,0 +1,2 @@\\n+This is a hidden file.\\n+Appending new line to hidden file.\\n\\\\ No newline at end of file\\ndiff --git a/app.ico b/app.ico\\nnew file mode 100644\\nindex 0000000..a5b2226\\nBinary files /dev/null and b/app.ico differ\\ndiff --git a/basic_test_output.txt b/basic_test_output.txt\\ndeleted file mode 100644\\nindex 19828e6..0000000\\n--- a/basic_test_output.txt\\n+++ /dev/null\\n@@ -1 +0,0 @@\\n-This is the first line now.\\r\\ndiff --git a/empty_content_test.txt b/empty_content_test.txt\\nindex 7461b2c..0cadc94 100644\\n--- a/empty_content_test.txt\\n+++ b/empty_content_test.txt\\n@@ -1,2 +1,5 @@\\n Inserted into empty file.\\r\\n+Inserted line at position 2.\\r\\n \\r\\n+\\r\\n+Appended content for test.\\n\\\\ No newline at end of file\\ndiff --git a/empty_content_write.txt b/empty_content_write.txt\\nnew file mode 100644\\nindex 0000000..e69de29\\ndiff --git a/modules.xml b/modules.xml\\nnew file mode 100644\\nindex 0000000..ca7e714\\n--- /dev/null\\n+++ b/modules.xml\\n@@ -0,0 +1,7 @@\\n+<project version=\\\"4\\\">\\n+  <component name=\\\"ProjectModuleManager\\\">\\n+    <modules>\\n+      <module fileurl=\\\"file://$PROJECT_DIR$/.idea/pythonProject.iml\\\" filepath=\\\"$PROJECT_DIR$/.idea/pyt...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计205677字符，剩余204177字符"
        },
        "execution_time": 1.9770176410675049,
        "is_functional_test": true
      },
      {
        "case_name": "Show staged changes when no changes are staged",
        "purpose": "验证没有暂存更改时，git_diff_staged是否返回空结果或适当提示",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_nonexistent_dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_nonexistent_dir\"}"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to show staged changes in non-Git directory",
        "purpose": "验证对非Git仓库目录调用git_diff_staged时能否安全返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"diff --git a/.git/HEAD b/.git/HEAD\\ndeleted file mode 100644\\nindex cb089cd..0000000\\n--- a/.git/HEAD\\n+++ /dev/null\\n@@ -1 +0,0 @@\\n-ref: refs/heads/master\\ndiff --git a/.hidden_file.txt b/.hidden_file.txt\\nnew file mode 100644\\nindex 0000000..077be70\\n--- /dev/null\\n+++ b/.hidden_file.txt\\n@@ -0,0 +1,2 @@\\n+This is a hidden file.\\n+Appending new line to hidden file.\\n\\\\ No newline at end of file\\ndiff --git a/app.ico b/app.ico\\nnew file mode 100644\\nindex 0000000..a5b2226\\nBinary files /dev/null and b/app.ico differ\\ndiff --git a/basic_test_output.txt b/basic_test_output.txt\\ndeleted file mode 100644\\nindex 19828e6..0000000\\n--- a/basic_test_output.txt\\n+++ /dev/null\\n@@ -1 +0,0 @@\\n-This is the first line now.\\r\\ndiff --git a/empty_content_test.txt b/empty_content_test.txt\\nindex 7461b2c..0cadc94 100644\\n--- a/empty_content_test.txt\\n+++ b/empty_content_test.txt\\n@@ -1,2 +1,5 @@\\n Inserted into empty file.\\r\\n+Inserted line at position 2.\\r\\n \\r\\n+\\r\\n+Appended content for test.\\n\\\\ No newline at end of file\\ndiff --git a/empty_content_write.txt b/empty_content_write.txt\\nnew file mode 100644\\nindex 0000000..e69de29\\ndiff --git a/modules.xml b/modules.xml\\nnew file mode 100644\\nindex 0000000..ca7e714\\n--- /dev/null\\n+++ b/modules.xml\\n@@ -0,0 +1,7 @@\\n+<project version=\\\"4\\\">\\n+  <component name=\\\"ProjectModuleManager\\\">\\n+    <modules>\\n+      <module fileurl=\\\"file://$PROJECT_DIR$/.idea/pythonProject.iml\\\" filepath=\\\"$PROJECT_DIR$/.idea/pyt...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计205677字符，剩余204177字符"
        },
        "execution_time": 1.6866357326507568,
        "is_functional_test": false
      },
      {
        "case_name": "Show staged changes with special characters in repository path",
        "purpose": "验证包含特殊字符的路径是否能正常获取暂存区差异信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$_dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@#$_dir\"}"
        },
        "execution_time": 0.005043745040893555,
        "is_functional_test": true
      },
      {
        "case_name": "Show staged changes in hidden Git repository",
        "purpose": "验证隐藏目录中的Git仓库能否正常获取暂存区差异信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.hidden_repo\"}"
        },
        "execution_time": 0.00500035285949707,
        "is_functional_test": true
      },
      {
        "case_name": "Show staged changes with invalid repository path",
        "purpose": "验证传入无效路径（如空字符串）时能否安全地处理并返回错误",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: \"}"
        },
        "execution_time": 0.00699925422668457,
        "is_functional_test": false
      },
      {
        "case_name": "Show staged changes in read-only directory",
        "purpose": "验证无写权限的目录下能否安全地返回错误或拒绝操作",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\readonly-check"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\readonly-check\"}"
        },
        "execution_time": 0.007997989654541016,
        "is_functional_test": false
      }
    ],
    "git_commit": [
      {
        "case_name": "Commit staged changes with valid repository path and message",
        "purpose": "验证在已初始化的Git仓库中，暂存更改后能使用有效路径和提交信息成功创建提交",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "message": "feat: Add new feature"
        },
        "response": {
          "result": "{\"status\": \"success\", \"commit_hash\": \"2812bbafe2105d3f7940e5fcd7973950b585c76f\"}"
        },
        "execution_time": 0.5076770782470703,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to commit without staged changes",
        "purpose": "验证在没有暂存任何更改的情况下调用git_commit是否返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "message": "chore: Empty commit attempt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Invalid Git repository: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\"}"
        },
        "execution_time": 0.008697509765625,
        "is_functional_test": true
      },
      {
        "case_name": "Commit with special characters in commit message",
        "purpose": "验证提交信息中包含特殊字符时能否被正确处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "message": "fix: Update file@#$_and_emoji_🎉"
        },
        "response": {
          "result": "{\"status\": \"success\", \"commit_hash\": \"5bfaef4494222c3119cefb414a625999d6b9f4bf\"}"
        },
        "execution_time": 0.5727276802062988,
        "is_functional_test": true
      },
      {
        "case_name": "Commit with empty commit message",
        "purpose": "验证提交信息为空时能否被正确拒绝并返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "message": ""
        },
        "response": {
          "result": "{\"status\": \"success\", \"commit_hash\": \"5168c70449ae3e1d0701750a9a9b1b4d4797b1bb\"}"
        },
        "execution_time": 0.5615987777709961,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with invalid repository path",
        "purpose": "验证传入无效仓库路径时能否安全地返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_repo",
          "message": "docs: Invalid path commit"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_repo\"}"
        },
        "execution_time": 0.00902247428894043,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Unicode characters in repository path",
        "purpose": "验证含有Unicode字符（如中文）的仓库路径是否能正常提交",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文_git_repo",
          "message": "feat: Add new feature"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\\\u4e2d\\u6587_git_repo\"}"
        },
        "execution_time": 0.009751319885253906,
        "is_functional_test": true
      },
      {
        "case_name": "Commit to read-only repository",
        "purpose": "验证对只读Git仓库执行提交操作时能否安全返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\readonly-check",
          "message": "feat: Attempt commit to read-only repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\readonly-check\"}"
        },
        "execution_time": 0.008536100387573242,
        "is_functional_test": false
      }
    ],
    "git_log": [
      {
        "case_name": "Retrieve commit history with default max_count in valid Git repository",
        "purpose": "验证在有效的Git仓库中使用默认max_count参数时能否正确获取提交历史记录",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": [{\"hash\": \"5168c70449ae3e1d0701750a9a9b1b4d4797b1bb\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T04:08:04+08:00\", \"message\": \"\"}, {\"hash\": \"5bfaef4494222c3119cefb414a625999d6b9f4bf\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T04:08:03+08:00\", \"message\": \"fix: Update file@#$_and_emoji_\\ud83c\\udf89\"}, {\"hash\": \"2812bbafe2105d3f7940e5fcd7973950b585c76f\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T04:08:03+08:00\", \"message\": \"feat: Add new feature\"}, {\"hash\": \"4152bf972747f18ea5595ae99b40911fb82f6cff\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T03:55:51+08:00\", \"message\": \"Commit with special characters: @#&*(){}[]<>?/\\\\\\\"'\"}, {\"hash\": \"ed9655066d0b7446e63b05495e1ec51485f861bf\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T03:55:51+08:00\", \"message\": \"This is a very long commit message that exceeds normal length limits and tests the system's ability to handle extended input. This should not cause any issues.\"}, {\"hash\": \"2052154209f7de838ca3ddbb7a0a02cbf320afd1\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T03:55:51+08:00\", \"message\": \"Read-only directory commit\"}, {\"hash\": \"09ec355a2c381ce1f7804c7e1c91af854d1c7b37\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T03:55:50+08:00\", \"message\": \"\"}, {\"hash\": \"03d4ea726431b63ae416cbdd1fa8a2012efdadc3\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T03:55:50+08:00\", \"m...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计1528字符，剩余28字符"
        },
        "execution_time": 0.6081695556640625,
        "is_functional_test": true
      },
      {
        "case_name": "Retrieve commit history with custom max_count in valid Git repository",
        "purpose": "验证指定max_count参数时能否正确获取限定数量的提交历史记录",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "max_count": 5
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": [{\"hash\": \"5168c70449ae3e1d0701750a9a9b1b4d4797b1bb\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T04:08:04+08:00\", \"message\": \"\"}, {\"hash\": \"5bfaef4494222c3119cefb414a625999d6b9f4bf\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T04:08:03+08:00\", \"message\": \"fix: Update file@#$_and_emoji_\\ud83c\\udf89\"}, {\"hash\": \"2812bbafe2105d3f7940e5fcd7973950b585c76f\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T04:08:03+08:00\", \"message\": \"feat: Add new feature\"}, {\"hash\": \"4152bf972747f18ea5595ae99b40911fb82f6cff\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T03:55:51+08:00\", \"message\": \"Commit with special characters: @#&*(){}[]<>?/\\\\\\\"'\"}, {\"hash\": \"ed9655066d0b7446e63b05495e1ec51485f861bf\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T03:55:51+08:00\", \"message\": \"This is a very long commit message that exceeds normal length limits and tests the system's ability to handle extended input. This should not cause any issues.\"}]}"
        },
        "execution_time": 0.743840217590332,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to retrieve commit history from non-Git directory",
        "purpose": "验证尝试从非Git目录获取提交历史时能否返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": [{\"hash\": \"5168c70449ae3e1d0701750a9a9b1b4d4797b1bb\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T04:08:04+08:00\", \"message\": \"\"}, {\"hash\": \"5bfaef4494222c3119cefb414a625999d6b9f4bf\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T04:08:03+08:00\", \"message\": \"fix: Update file@#$_and_emoji_\\ud83c\\udf89\"}, {\"hash\": \"2812bbafe2105d3f7940e5fcd7973950b585c76f\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T04:08:03+08:00\", \"message\": \"feat: Add new feature\"}, {\"hash\": \"4152bf972747f18ea5595ae99b40911fb82f6cff\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T03:55:51+08:00\", \"message\": \"Commit with special characters: @#&*(){}[]<>?/\\\\\\\"'\"}, {\"hash\": \"ed9655066d0b7446e63b05495e1ec51485f861bf\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T03:55:51+08:00\", \"message\": \"This is a very long commit message that exceeds normal length limits and tests the system's ability to handle extended input. This should not cause any issues.\"}, {\"hash\": \"2052154209f7de838ca3ddbb7a0a02cbf320afd1\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T03:55:51+08:00\", \"message\": \"Read-only directory commit\"}, {\"hash\": \"09ec355a2c381ce1f7804c7e1c91af854d1c7b37\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T03:55:50+08:00\", \"message\": \"\"}, {\"hash\": \"03d4ea726431b63ae416cbdd1fa8a2012efdadc3\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T03:55:50+08:00\", \"m...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计1528字符，剩余28字符"
        },
        "execution_time": 0.6862537860870361,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to retrieve commit history with invalid repository path",
        "purpose": "验证传入无效路径（如空字符串）时能否安全地处理并返回错误",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: \"}"
        },
        "execution_time": 0.002999544143676758,
        "is_functional_test": false
      },
      {
        "case_name": "Retrieve commit history from repository with special characters in path",
        "purpose": "验证包含特殊字符的路径中的Git仓库能否正常获取提交历史",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$_dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@#$_dir\"}"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": true
      },
      {
        "case_name": "Retrieve commit history from hidden Git repository",
        "purpose": "验证隐藏目录中的Git仓库能否正确获取提交历史信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.hidden_repo\"}"
        },
        "execution_time": 0.009001970291137695,
        "is_functional_test": true
      },
      {
        "case_name": "Retrieve commit history with max_count set to zero",
        "purpose": "验证max_count为0时工具是否能优雅处理并返回合理错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "max_count": 0
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": []}"
        },
        "execution_time": 0.46525001525878906,
        "is_functional_test": false
      },
      {
        "case_name": "Retrieve commit history from repository with long path name",
        "purpose": "验证超长路径名的Git仓库能否正确获取提交历史信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\long_directory_name_1234567890123456789012345678901234567890"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\long_directory_name_1234567890123456789012345678901234567890\"}"
        },
        "execution_time": 0.00500035285949707,
        "is_functional_test": true
      }
    ],
    "git_diff": [
      {
        "case_name": "Compare base branch with working directory",
        "purpose": "验证当未提供compare参数时，工具能正确比较base分支与工作目录的差异",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "base": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Git command failed: Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff main\\n  stderr: 'fatal: ambiguous argument 'main': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.33449339866638184,
        "is_functional_test": true
      },
      {
        "case_name": "Compare two different branches",
        "purpose": "验证工具能正确比较两个不同分支之间的差异",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "base": "main",
          "compare": "develop"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Git command failed: Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff main develop\\n  stderr: 'fatal: ambiguous argument 'main': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.280900239944458,
        "is_functional_test": true
      },
      {
        "case_name": "Compare branch with itself",
        "purpose": "验证比较同一分支或提交时返回空差异",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "base": "main",
          "compare": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Git command failed: Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff main main\\n  stderr: 'fatal: ambiguous argument 'main': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.3264658451080322,
        "is_functional_test": true
      },
      {
        "case_name": "Compare with invalid repository path",
        "purpose": "验证传入无效仓库路径时能否安全地处理并返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_repo",
          "base": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_repo\"}"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      },
      {
        "case_name": "Compare with non-existent branch",
        "purpose": "验证比较不存在的分支时能否返回适当的错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "base": "nonexistent-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Git command failed: Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff nonexistent-branch\\n  stderr: 'fatal: ambiguous argument 'nonexistent-branch': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.3995802402496338,
        "is_functional_test": false
      },
      {
        "case_name": "Compare with special characters in branch name",
        "purpose": "验证包含特殊字符的分支名能否被正确比较",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "base": "feature/special@#$_branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Git command failed: Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff feature/special@#$_branch\\n  stderr: 'fatal: ambiguous argument 'feature/special@#$_branch': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.24642348289489746,
        "is_functional_test": true
      },
      {
        "case_name": "Compare repository with long branch name",
        "purpose": "验证超长分支名的Git仓库能否正确获取diff信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "base": "long_branch_name_1234567890123456789012345678901234567890"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"diff --git a/.hidden_file.txt b/.hidden_file.txt\\ndeleted file mode 100644\\nindex 077be70..0000000\\n--- a/.hidden_file.txt\\n+++ /dev/null\\n@@ -1,2 +0,0 @@\\n-This is a hidden file.\\n-Appending new line to hidden file.\\n\\\\ No newline at end of file\\ndiff --git a/empty_content_test.txt b/empty_content_test.txt\\ndeleted file mode 100644\\nindex 0cadc94..0000000\\n--- a/empty_content_test.txt\\n+++ /dev/null\\n@@ -1,5 +0,0 @@\\n-Inserted into empty file.\\r\\n-Inserted line at position 2.\\r\\n-\\r\\n-\\r\\n-Appended content for test.\\n\\\\ No newline at end of file\\ndiff --git a/nature.png b/nature.png\\ndeleted file mode 100644\\nindex afb43ff..0000000\\n--- a/nature.png\\n+++ /dev/null\\n@@ -1,2 +0,0 @@\\n-\\n-This should not be appended to a binary file.\\n\\\\ No newline at end of file\\ndiff --git a/performance_results.csv b/performance_results.csv\\ndeleted file mode 100644\\nindex cd5f310..0000000\\n--- a/performance_results.csv\\n+++ /dev/null\\n@@ -1,8 +0,0 @@\\n-Dataset Size,Enumeration (ms),Graham Scan (ms),Divide and Conquer (ms)\\n-2000,N/A,3.17,50.41\\n-New line 1.\\n-New line 2.\\n-New line 3.\\n-10000,N/A,17.16,1065.61\\n-20000,N/A,35.22,4320.63\\n-This is appended as a new last line.\\ndiff --git a/special@#$.txt b/special@#$.txt\\ndeleted file mode 100644\\nindex 4b7c5c3..0000000\\n--- a/special@#$.txt\\n+++ /dev/null\\n@@ -1,2 +0,0 @@\\n-Content inserted into file with special characters in path.\\n-Appending to a file with special characters in path.\\n\\\\ No newline at end of ...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计144403字符，剩余142903字符"
        },
        "execution_time": 0.7458128929138184,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to compare without read permissions",
        "purpose": "验证没有读取权限的仓库是否能安全地返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\readonly-check",
          "base": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Invalid Git repository: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\readonly-check\"}"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": false
      }
    ],
    "git_reset": [
      {
        "case_name": "Unstage a specific file from staging area",
        "purpose": "验证能否成功从暂存区中移除指定文件",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\HEAD"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Unstaged 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\HEAD'.\"}"
        },
        "execution_time": 0.3183441162109375,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage all files when no file path is provided",
        "purpose": "验证未提供具体文件路径时，是否能正确取消所有已暂存文件",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Unstaged all files.\"}"
        },
        "execution_time": 0.2444629669189453,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to unstage non-existent file",
        "purpose": "验证尝试取消一个不存在的文件的暂存状态是否会返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\nonexistent_file.txt"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Unstaged 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\nonexistent_file.txt'.\"}"
        },
        "execution_time": 0.2830524444580078,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage file in repository with special characters in path",
        "purpose": "验证路径包含特殊字符的Git仓库中能否正常执行unstage操作",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$_dir",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\swe.pptx"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@#$_dir\"}"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage file with Unicode characters in filename",
        "purpose": "验证含有Unicode字符（如中文）的文件名能否被正确取消暂存",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.pdf"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Unstaged 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\test_output.pdf'.\"}"
        },
        "execution_time": 0.2521071434020996,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage file in read-only directory",
        "purpose": "验证在只读目录中执行unstage操作是否会安全失败并返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\readonly-check",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\readonly-check\\readonly_output.jpg"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Invalid Git repository: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\readonly-check\"}"
        },
        "execution_time": 0.004506826400756836,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage file with very long path name",
        "purpose": "验证超长路径名的文件能否被正确取消暂存",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\long_directory_name_1234567890123456789012345678901234567890",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\long_directory_name_1234567890123456789012345678901234567890\\performance_results.csv"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\long_directory_name_1234567890123456789012345678901234567890\"}"
        },
        "execution_time": 0.0040056705474853516,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to unstage file in non-Git directory",
        "purpose": "验证对非Git仓库目录执行unstage操作时能否安全失败并返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpeg"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Unstaged 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.jpeg'.\"}"
        },
        "execution_time": 0.24312758445739746,
        "is_functional_test": false
      }
    ],
    "git_create_branch": [
      {
        "case_name": "Create a new branch in an initialized Git repository",
        "purpose": "验证在已初始化的Git仓库中创建新分支是否成功",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "feature/new-test-branch"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Branch 'feature/new-test-branch' created.\"}"
        },
        "execution_time": 0.9227046966552734,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to create a branch with invalid name format",
        "purpose": "验证使用非法分支名（如包含空格）时能否安全返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "invalid branch name"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Branch 'invalid branch name' created.\"}"
        },
        "execution_time": 0.7203235626220703,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to create a branch that already exists",
        "purpose": "验证尝试创建一个已存在的分支时是否返回明确的错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "master"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Branch 'master' already exists.\"}"
        },
        "execution_time": 0.37406349182128906,
        "is_functional_test": false
      },
      {
        "case_name": "Create a branch with special characters in the branch name",
        "purpose": "验证含有特殊字符的分支名是否能被正确处理并创建",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "feature/branch@#$_special"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Branch 'feature/branch@#$_special' created.\"}"
        },
        "execution_time": 0.8908047676086426,
        "is_functional_test": true
      },
      {
        "case_name": "Create a branch in a hidden Git repository",
        "purpose": "验证隐藏目录中的Git仓库是否支持创建新分支",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_repo",
          "branch_name": "feature/hidden-repo-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.hidden_repo\"}"
        },
        "execution_time": 0.4684476852416992,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to create a branch in a non-Git directory",
        "purpose": "验证非Git仓库目录调用git_create_branch时能否返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/non-git-branch"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Branch 'feature/non-git-branch' created.\"}"
        },
        "execution_time": 0.6432008743286133,
        "is_functional_test": false
      },
      {
        "case_name": "Create a branch with very long name in a Git repository",
        "purpose": "验证超长分支名是否能被正确处理并创建",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "feature/long_branch_name_1234567890123456789012345678901234567890"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Branch 'feature/long_branch_name_1234567890123456789012345678901234567890' created.\"}"
        },
        "execution_time": 0.7954070568084717,
        "is_functional_test": true
      },
      {
        "case_name": "Create a branch with Unicode characters in branch name",
        "purpose": "验证含有Unicode字符（如中文）的分支名是否能正常创建",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "feature/中文_branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Branch 'feature/\\u4e2d\\u6587_branch' already exists.\"}"
        },
        "execution_time": 0.7082419395446777,
        "is_functional_test": true
      }
    ],
    "git_checkout": [
      {
        "case_name": "Switch to existing branch successfully",
        "purpose": "验证能够成功切换到已存在的分支",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Branch 'main' not found.\"}"
        },
        "execution_time": 0.11204862594604492,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to switch to non-existent branch",
        "purpose": "验证尝试切换到不存在的分支时是否返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "nonexistent-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Branch 'nonexistent-branch' not found.\"}"
        },
        "execution_time": 0.11032438278198242,
        "is_functional_test": true
      },
      {
        "case_name": "Switch to branch with special characters in name",
        "purpose": "验证包含特殊字符的分支名能否被正确识别并切换",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "feature/branch@#$_special"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Switched to branch 'feature/branch@#$_special'.\"}"
        },
        "execution_time": 0.7487838268280029,
        "is_functional_test": true
      },
      {
        "case_name": "Switch to branch with Unicode characters in name",
        "purpose": "验证含有Unicode字符（如中文）的分支名能否被正确识别并切换",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "feature/中文_branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"An unexpected error occurred: Cmd('git') failed due to: exit code(1)\\n  cmdline: git checkout feature/\\u4e2d\\u6587_branch\\n  stderr: 'error: The following untracked working tree files would be overwritten by checkout:\\n\\t.git/HEAD\\nPlease move or remove them before you switch branches.\\nAborting'\"}"
        },
        "execution_time": 1.2165157794952393,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to switch branch in non-Git directory",
        "purpose": "验证在非Git仓库目录调用git_checkout时能否安全地返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Branch 'main' not found.\"}"
        },
        "execution_time": 0.5874996185302734,
        "is_functional_test": false
      },
      {
        "case_name": "Switch to branch with long name",
        "purpose": "验证超长分支名称能否被正确处理并完成切换",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "long_branch_name_1234567890123456789012345678901234567890"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Switched to branch 'long_branch_name_1234567890123456789012345678901234567890'.\"}"
        },
        "execution_time": 1.340832233428955,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to checkout with empty repository path",
        "purpose": "验证传入空字符串作为仓库路径时能否安全处理并返回错误",
        "args": {
          "repo_path": "",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: \"}"
        },
        "execution_time": 0.11699819564819336,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout branch with read-only permissions",
        "purpose": "验证在只读权限的仓库中切换分支时能否安全处理并返回错误或警告",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\readonly-check",
          "branch_name": "readonly-check"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Invalid Git repository: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\readonly-check\"}"
        },
        "execution_time": 0.12431550025939941,
        "is_functional_test": false
      }
    ],
    "git_show": [
      {
        "case_name": "Show details of a valid commit with full hash",
        "purpose": "验证使用完整提交哈希值能否正确显示指定提交的详细信息和差异内容",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "commit_hash": "a1e0f65662bacc77e2c7271d8018eac35bb8b9d3"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cannot convert object <git.Tree \\\"a1e0f65662bacc77e2c7271d8018eac35bb8b9d3\\\"> to type commit\"}"
        },
        "execution_time": 0.22483015060424805,
        "is_functional_test": true
      },
      {
        "case_name": "Show details of a valid commit with short hash",
        "purpose": "验证使用短提交哈希（前几位）能否正确识别并显示完整的提交详情",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "commit_hash": "a1e0f65"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cannot convert object <git.Tree \\\"a1e0f65662bacc77e2c7271d8018eac35bb8b9d3\\\"> to type commit\"}"
        },
        "execution_time": 0.22887945175170898,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to show details for non-existent commit hash",
        "purpose": "验证当提供的提交哈希不存在时，工具是否能返回明确的错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "commit_hash": "invalidhash1234567890"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"An unexpected error occurred: Ref 'invalidhash1234567890' did not resolve to an object\"}"
        },
        "execution_time": 0.0070002079010009766,
        "is_functional_test": false
      },
      {
        "case_name": "Show commit details from repository with special characters in path",
        "purpose": "验证包含特殊字符的仓库路径下能否正常获取提交详情",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$_dir",
          "commit_hash": "a1e0f65662bacc77e2c7271d8018eac35bb8b9d3"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@#$_dir\"}"
        },
        "execution_time": 0.00500178337097168,
        "is_functional_test": true
      },
      {
        "case_name": "Show commit details with invalid repository path",
        "purpose": "验证无效或不存在的仓库路径调用时是否能安全返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_repo",
          "commit_hash": "a1e0f65662bacc77e2c7271d8018eac35bb8b9d3"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_repo\"}"
        },
        "execution_time": 0.014998197555541992,
        "is_functional_test": false
      },
      {
        "case_name": "Show commit details with empty parameters",
        "purpose": "验证空参数输入时能否安全处理并返回错误提示",
        "args": {
          "repo_path": "",
          "commit_hash": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: \"}"
        },
        "execution_time": 0.009001493453979492,
        "is_functional_test": false
      },
      {
        "case_name": "Show commit details with very long hash input",
        "purpose": "验证超长提交哈希字符串作为输入时能否正确处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "commit_hash": "a1e0f65662bacc77e2c7271d8018eac35bb8b9d3a1e0f65662bacc77e2c7271d8018eac35bb8b9d3"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"An unexpected error occurred: Ref 'a1e0f65662bacc77e2c7271d8018eac35bb8b9d3a1e0f65662bacc77e2c7271d8018eac35bb8b9d3' did not resolve to an object\"}"
        },
        "execution_time": 0.008006572723388672,
        "is_functional_test": false
      },
      {
        "case_name": "Show commit details with Unicode characters in repository path",
        "purpose": "验证含有Unicode字符（如中文）的仓库路径下能否正常获取提交详情",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文_git_repo",
          "commit_hash": "a1e0f65662bacc77e2c7271d8018eac35bb8b9d3"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\\\u4e2d\\u6587_git_repo\"}"
        },
        "execution_time": 0.007001399993896484,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 95
}