{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "gemini-2.5-pro-mcp_mongodb_database_manager",
  "server_path": "workspace/pipeline-output-servers/gemini-2.5-pro/mcp_mongodb_database_manager/refined/server.py",
  "timestamp": "2025-07-13T04:00:23.950736",
  "tools": [
    {
      "name": "mcp_list_databases",
      "description": "\n    Lists the names of all available databases on the MongoDB server.\n\n    Returns:\n        A JSON string representing a list of database names.\n        Example: '[\"admin\", \"config\", \"local\", \"mydatabase\"]'\n    ",
      "args_schema": {
        "properties": {},
        "title": "mcp_list_databasesArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_list_collections",
      "description": "\n    Lists the names of all collections within a specified database.\n\n    Args:\n        database_name (str): The name of the database to inspect.\n\n    Returns:\n        A JSON string representing a list of collection names.\n        Example: '[\"users\", \"products\", \"orders\"]'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          }
        },
        "required": [
          "database_name"
        ],
        "title": "mcp_list_collectionsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_insert_document",
      "description": "\n    Inserts a new document into a specified collection.\n\n    Args:\n        database_name (str): The name of the target database.\n        collection_name (str): The name of the target collection.\n        document (dict): The document to be inserted.\n\n    Returns:\n        A JSON string containing the string representation of the newly inserted document's _id.\n        Example: '{\"inserted_id\": \"64c9a3e6e7e4a4c4de54d7e1\"}'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "document": {
            "title": "Document",
            "type": "object"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "document"
        ],
        "title": "mcp_insert_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_find_documents",
      "description": "\n    Finds documents matching a specific query within a collection.\n\n    Args:\n        database_name (str): The name of the database to query.\n        collection_name (str): The name of the collection to query.\n        query (dict): The MongoDB query filter. Use {} to match all documents.\n        projection (dict, optional): The projection specification. Defaults to None.\n        limit (int, optional): The maximum number of documents to return. Defaults to 100.\n\n    Returns:\n        A JSON string representing a list of documents that match the query.\n        Example: '[{\"_id\": \"64c9a3e6e7e4a4c4de54d7e1\", \"name\": \"John Doe\"}]'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "title": "Query",
            "type": "object"
          },
          "projection": {
            "default": null,
            "title": "Projection",
            "type": "object"
          },
          "limit": {
            "default": 100,
            "title": "Limit",
            "type": "integer"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "query"
        ],
        "title": "mcp_find_documentsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_update_document",
      "description": "\n    Updates one or more documents that match a specified filter.\n\n    Args:\n        database_name (str): The name of the database for the update.\n        collection_name (str): The name of the collection for the update.\n        query (dict): The filter to select the document(s) to update.\n        update (dict): The update operations to be applied (e.g., using '$set').\n        update_many (bool, optional): If True, updates all matching documents. Defaults to False.\n\n    Returns:\n        A JSON string with the count of matched and modified documents.\n        Example: '{\"matched_count\": 1, \"modified_count\": 1}'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "title": "Query",
            "type": "object"
          },
          "update": {
            "title": "Update",
            "type": "object"
          },
          "update_many": {
            "default": false,
            "title": "Update Many",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "query",
          "update"
        ],
        "title": "mcp_update_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_delete_document",
      "description": "\n    Deletes one or more documents that match a specified filter.\n\n    Args:\n        database_name (str): The name of the database from which to delete.\n        collection_name (str): The name of the collection from which to delete.\n        query (dict): The filter to select the document(s) for deletion.\n        delete_many (bool, optional): If True, deletes all matching documents. Defaults to False.\n\n    Returns:\n        A JSON string containing the number of documents deleted.\n        Example: '{\"deleted_count\": 1}'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "title": "Query",
            "type": "object"
          },
          "delete_many": {
            "default": false,
            "title": "Delete Many",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "query"
        ],
        "title": "mcp_delete_documentArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "mcp_list_databases": [
      {
        "case_name": "List All Databases Successfully",
        "purpose": "验证工具能够正确列出MongoDB服务器上的所有数据库名称。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.008137702941894531,
        "is_functional_test": true
      },
      {
        "case_name": "Verify Default Database Presence",
        "purpose": "确认默认数据库（如admin、local等）存在于返回结果中。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.005000114440917969,
        "is_functional_test": true
      },
      {
        "case_name": "Check Empty Database List Handling",
        "purpose": "验证当MongoDB中没有用户创建的数据库时，工具是否能正确处理空列表情况。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.007999658584594727,
        "is_functional_test": true
      },
      {
        "case_name": "Unauthorized Access Attempt",
        "purpose": "测试无权限访问MongoDB时工具的安全响应机制。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.006993293762207031,
        "is_functional_test": false
      },
      {
        "case_name": "MongoDB Server Not Running",
        "purpose": "验证当MongoDB服务不可用时，工具是否能优雅地处理连接失败错误。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Connection String Handling",
        "purpose": "测试工具在提供错误或无效连接参数时能否正确抛出错误提示。",
        "args": {
          "connection_string": "invalid://mongo-server:27018"
        },
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.007000446319580078,
        "is_functional_test": false
      },
      {
        "case_name": "Test With Maximum Database Names",
        "purpose": "验证工具是否可以处理大量数据库名称的情况。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": true
      },
      {
        "case_name": "Database Name With Special Characters",
        "purpose": "测试包含特殊字符的数据库名是否能被正确识别并返回。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": true
      }
    ],
    "mcp_list_collections": [
      {
        "case_name": "List Collections Successfully",
        "purpose": "验证工具能够正确列出指定数据库中的所有集合名称。",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "[\"a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\", \"new_collection\", \"test_collection\", \"empty_docs\", \"invalid/collection*name\", \"user_profiles\", \"long_key_collection\", \"test_collection'; DROP COLLECTION test_collection;--\", \"large_data\", \"special_chars_collection\", \"binary_data_collection\", \"nonexistent_collection\", \"a_very_long_collection_name_that_exceeds_normal_limits_and_might_cause_issues\", \"users\"]"
        },
        "execution_time": 0.0048427581787109375,
        "is_functional_test": true
      },
      {
        "case_name": "List Collections From Empty Database",
        "purpose": "验证当指定数据库中没有集合时，工具是否能返回空数组。",
        "args": {
          "database_name": "empty_database"
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.00471186637878418,
        "is_functional_test": true
      },
      {
        "case_name": "Database Name With Special Characters",
        "purpose": "测试包含特殊字符的数据库名是否能被正确识别并返回集合列表。",
        "args": {
          "database_name": "db@#_\\u6d4b\\u8bd5"
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_list_collections: An unexpected error occurred while listing collections: database names cannot contain the character '\\\\'"
        },
        "execution_time": 0.006561756134033203,
        "is_functional_test": true
      },
      {
        "case_name": "Unauthorized Access To Database",
        "purpose": "测试无权限访问特定数据库时，工具是否能安全地处理错误。",
        "args": {
          "database_name": "restricted_db"
        },
        "response": {
          "result": "[\"secure_collection\"]"
        },
        "execution_time": 0.008124113082885742,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Database Name Handling",
        "purpose": "验证工具在提供无效数据库名称时能否正确抛出错误提示。",
        "args": {
          "database_name": "invalid_database!@#"
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.004026651382446289,
        "is_functional_test": false
      },
      {
        "case_name": "Database Does Not Exist",
        "purpose": "测试工具在尝试访问不存在的数据库时的行为是否合理。",
        "args": {
          "database_name": "does_not_exist_db"
        },
        "response": {
          "result": "[\"new_collection\", \"test_collection\"]"
        },
        "execution_time": 0.007700204849243164,
        "is_functional_test": false
      },
      {
        "case_name": "MongoDB Server Not Running",
        "purpose": "验证当MongoDB服务不可用时，工具是否能优雅地处理连接失败错误。",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "[\"a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\", \"new_collection\", \"test_collection\", \"empty_docs\", \"invalid/collection*name\", \"user_profiles\", \"long_key_collection\", \"test_collection'; DROP COLLECTION test_collection;--\", \"large_data\", \"special_chars_collection\", \"binary_data_collection\", \"nonexistent_collection\", \"a_very_long_collection_name_that_exceeds_normal_limits_and_might_cause_issues\", \"users\"]"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": false
      },
      {
        "case_name": "Large Collection List Handling",
        "purpose": "验证工具是否可以处理大量集合名称的情况。",
        "args": {
          "database_name": "large_db"
        },
        "response": {
          "result": "[\"large_collection\"]"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": true
      }
    ],
    "mcp_insert_document": [
      {
        "case_name": "Insert Document Successfully",
        "purpose": "验证工具能够成功将一个文档插入到指定的数据库和集合中。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "document": {
            "name": "John Doe",
            "age": 30,
            "email": "john.doe@example.com"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"6872bf1e0e2fc95fbcc97acd\"}"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document With Empty Fields",
        "purpose": "测试工具是否能处理包含空字段的文档插入操作。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "document": {
            "name": "",
            "age": null,
            "email": "empty.fields@example.com"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"6872bf1e0e2fc95fbcc97ace\"}"
        },
        "execution_time": 0.004001140594482422,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document Into Non-Existent Collection",
        "purpose": "验证当目标集合不存在时，工具能否自动创建该集合并插入文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "document": {
            "key": "value"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"6872bf1e0e2fc95fbcc97acf\"}"
        },
        "execution_time": 0.008096456527709961,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document Into Restricted Database",
        "purpose": "测试无权限访问特定数据库时，工具的安全响应机制。",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "secure_collection",
          "document": {
            "sensitive_data": "classified_info"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"6872bf1e0e2fc95fbcc97ad0\"}"
        },
        "execution_time": 0.008000850677490234,
        "is_functional_test": false
      },
      {
        "case_name": "Insert Document With Special Characters In Database Name",
        "purpose": "测试包含特殊字符的数据库名是否能被正确识别并执行插入操作。",
        "args": {
          "database_name": "db@#_测试",
          "collection_name": "new_collection",
          "document": {
            "field": "special_chars"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"6872bf1e0e2fc95fbcc97ad1\"}"
        },
        "execution_time": 0.01950812339782715,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document With Invalid JSON Format",
        "purpose": "验证工具在提供无效JSON格式的文档时能否正确抛出错误提示。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "document": "invalid_json_string"
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_insert_document: 1 validation error for mcp_insert_documentArguments\ndocument\n  Input should be a valid dictionary [type=dict_type, input_value='invalid_json_string', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/dict_type"
        },
        "execution_time": 0.007002353668212891,
        "is_functional_test": false
      },
      {
        "case_name": "Insert Document Into Non-Existent Database",
        "purpose": "测试工具在尝试插入文档到不存在的数据库时的行为是否合理。",
        "args": {
          "database_name": "does_not_exist_db",
          "collection_name": "new_collection",
          "document": {
            "key": "value"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"6872bf1e0e2fc95fbcc97ad2\"}"
        },
        "execution_time": 0.004998445510864258,
        "is_functional_test": false
      },
      {
        "case_name": "MongoDB Server Not Running During Insert",
        "purpose": "验证当MongoDB服务不可用时，工具是否能优雅地处理连接失败错误。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "document": {
            "key": "value"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"6872bf1e0e2fc95fbcc97ad3\"}"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      }
    ],
    "mcp_find_documents": [
      {
        "case_name": "Basic Document Search With Default Parameters",
        "purpose": "验证使用默认参数时能否从集合中成功检索文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {}
        },
        "response": {
          "result": "[{\"_id\": \"6872ad03424cddc98ebe1c08\", \"name\": \"Alice\", \"age\": 25}, {\"_id\": \"6872ad03424cddc98ebe1c0b\"}, {\"_id\": \"6872bc93b11f255c82054b2a\", \"name\": \"John\", \"age\": 35}, {\"_id\": \"6872bc93b11f255c82054b2c\", \"user@name\": \"Eve\", \"age#\": 28}, {\"_id\": \"6872bc93b11f255c82054b2d\", \"a_very_long_key_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\": \"value\"}, {\"_id\": \"6872bc93b11f255c82054b2e\", \"name\": \"Invalid\", \"age\": \"thirty\"}]"
        },
        "execution_time": 0.004999399185180664,
        "is_functional_test": true
      },
      {
        "case_name": "Document Search With Custom Query Filter",
        "purpose": "验证工具是否能根据自定义查询条件正确筛选文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "age": {
              "$gte": 18
            }
          }
        },
        "response": {
          "result": "[{\"_id\": \"6872ad03424cddc98ebe1c08\", \"name\": \"Alice\", \"age\": 25}, {\"_id\": \"6872bc93b11f255c82054b2a\", \"name\": \"John\", \"age\": 35}]"
        },
        "execution_time": 0.005001068115234375,
        "is_functional_test": true
      },
      {
        "case_name": "Document Search With Projection",
        "purpose": "测试投影参数是否能正确限制返回字段。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {},
          "projection": {
            "name": 1,
            "_id": 0
          }
        },
        "response": {
          "result": "[{\"name\": \"Alice\"}, {}, {\"name\": \"John\"}, {}, {}, {\"name\": \"Invalid\"}]"
        },
        "execution_time": 0.010000944137573242,
        "is_functional_test": true
      },
      {
        "case_name": "Limit Result Set Size",
        "purpose": "验证limit参数是否能正确限制返回文档数量。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {},
          "limit": 5
        },
        "response": {
          "result": "[{\"_id\": \"6872ad03424cddc98ebe1c08\", \"name\": \"Alice\", \"age\": 25}, {\"_id\": \"6872ad03424cddc98ebe1c0b\"}, {\"_id\": \"6872bc93b11f255c82054b2a\", \"name\": \"John\", \"age\": 35}, {\"_id\": \"6872bc93b11f255c82054b2c\", \"user@name\": \"Eve\", \"age#\": 28}, {\"_id\": \"6872bc93b11f255c82054b2d\", \"a_very_long_key_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\": \"value\"}]"
        },
        "execution_time": 0.00599980354309082,
        "is_functional_test": true
      },
      {
        "case_name": "Search In Empty Collection",
        "purpose": "测试当集合为空时，工具是否能正确返回空结果。",
        "args": {
          "database_name": "test_db",
          "collection_name": "empty_docs",
          "query": {}
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.007999897003173828,
        "is_functional_test": true
      },
      {
        "case_name": "Unauthorized Access To Collection",
        "purpose": "验证无权限访问受保护集合时的安全响应机制。",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "secure_collection",
          "query": {}
        },
        "response": {
          "result": "[{\"_id\": \"6872af6d9da8b940f807d369\", \"secret_key\": \"top_secret_value\"}, {\"_id\": \"6872b2dfbde7bc28413c2751\", \"data\": \"sensitive_info\"}, {\"_id\": \"6872bc93b11f255c82054b2f\", \"name\": \"Unauthorized\", \"age\": 50}, {\"_id\": \"6872bf1e0e2fc95fbcc97ad0\", \"sensitive_data\": \"classified_info\"}]"
        },
        "execution_time": 0.005000591278076172,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Database Name Handling",
        "purpose": "测试提供无效数据库名称时工具的错误处理能力。",
        "args": {
          "database_name": "invalid_database!@#",
          "collection_name": "users",
          "query": {}
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.008000373840332031,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Collection Name Handling",
        "purpose": "验证工具在提供非法集合名时能否正确抛出错误提示。",
        "args": {
          "database_name": "test_db",
          "collection_name": "invalid/collection*name",
          "query": {}
        },
        "response": {
          "result": "[{\"_id\": \"68626d54029e5cd2f7c9b28d\", \"title\": \"\\u6d4b\\u8bd5\\u6587\\u6863\"}, {\"_id\": \"6872568f010f0405cf7c54a2\", \"content\": \"special collection name test\"}, {\"_id\": \"687259cf14abe8d498d2f50b\", \"name\": \"John Doe\", \"age\": 31}]"
        },
        "execution_time": 0.00499415397644043,
        "is_functional_test": false
      },
      {
        "case_name": "MongoDB Server Not Running",
        "purpose": "验证当MongoDB服务不可用时，工具是否能优雅地处理连接失败错误。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {}
        },
        "response": {
          "result": "[{\"_id\": \"6872ad03424cddc98ebe1c08\", \"name\": \"Alice\", \"age\": 25}, {\"_id\": \"6872ad03424cddc98ebe1c0b\"}, {\"_id\": \"6872bc93b11f255c82054b2a\", \"name\": \"John\", \"age\": 35}, {\"_id\": \"6872bc93b11f255c82054b2c\", \"user@name\": \"Eve\", \"age#\": 28}, {\"_id\": \"6872bc93b11f255c82054b2d\", \"a_very_long_key_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\": \"value\"}, {\"_id\": \"6872bc93b11f255c82054b2e\", \"name\": \"Invalid\", \"age\": \"thirty\"}]"
        },
        "execution_time": 0.009002685546875,
        "is_functional_test": false
      },
      {
        "case_name": "Query With Special Characters In String Field",
        "purpose": "测试包含特殊字符的查询条件是否能被正确解析和执行。",
        "args": {
          "database_name": "test_db",
          "collection_name": "special_chars_collection",
          "query": {
            "username": "user@domain.com"
          }
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.004997730255126953,
        "is_functional_test": true
      },
      {
        "case_name": "Large Query Performance Test",
        "purpose": "验证工具在处理复杂且数据量大的查询时的表现。",
        "args": {
          "database_name": "large_db",
          "collection_name": "large_collection",
          "query": {
            "status": "active",
            "score": {
              "$gt": 90
            },
            "tags": "premium"
          }
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.0060024261474609375,
        "is_functional_test": true
      },
      {
        "case_name": "Maximum Limit Boundary Test",
        "purpose": "测试最大允许的limit值是否能被正确处理。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {},
          "limit": 1000000
        },
        "response": {
          "result": "[{\"_id\": \"6872ad03424cddc98ebe1c08\", \"name\": \"Alice\", \"age\": 25}, {\"_id\": \"6872ad03424cddc98ebe1c0b\"}, {\"_id\": \"6872bc93b11f255c82054b2a\", \"name\": \"John\", \"age\": 35}, {\"_id\": \"6872bc93b11f255c82054b2c\", \"user@name\": \"Eve\", \"age#\": 28}, {\"_id\": \"6872bc93b11f255c82054b2d\", \"a_very_long_key_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\": \"value\"}, {\"_id\": \"6872bc93b11f255c82054b2e\", \"name\": \"Invalid\", \"age\": \"thirty\"}]"
        },
        "execution_time": 0.00900125503540039,
        "is_functional_test": false
      }
    ],
    "mcp_update_document": [
      {
        "case_name": "Basic Document Update Success",
        "purpose": "验证工具能够成功更新单个匹配文档的基本字段。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "username": "john_doe"
          },
          "update": {
            "$set": {
              "email": "john_new@example.com"
            }
          },
          "update_many": false
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.008508920669555664,
        "is_functional_test": true
      },
      {
        "case_name": "Update Multiple Documents With UpdateMany",
        "purpose": "验证当设置 update_many=True 时，工具可以正确更新多个匹配的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "role": "user"
          },
          "update": {
            "$set": {
              "status": "active"
            }
          },
          "update_many": true
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.008413314819335938,
        "is_functional_test": true
      },
      {
        "case_name": "Update Nonexistent Document",
        "purpose": "验证在查询不匹配任何文档的情况下，工具是否返回 matched_count=0 和 modified_count=0。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "username": "nonexistent_user"
          },
          "update": {
            "$set": {
              "email": "dummy@example.com"
            }
          }
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.005001544952392578,
        "is_functional_test": true
      },
      {
        "case_name": "Update With Special Characters In Field Name",
        "purpose": "测试包含特殊字符的字段名能否被正确更新。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "username": "john_doe"
          },
          "update": {
            "$set": {
              "custom\\field@#": "special_value"
            }
          }
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.007999897003173828,
        "is_functional_test": true
      },
      {
        "case_name": "Unauthorized Access To Collection",
        "purpose": "测试无权限访问特定集合时工具的安全响应机制。",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "secure_collection",
          "query": {
            "id": 1
          },
          "update": {
            "$set": {
              "data": "unauthorized_update"
            }
          }
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.004998207092285156,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Database Name Handling",
        "purpose": "验证工具在提供无效数据库名称时能否正确处理错误。",
        "args": {
          "database_name": "invalid_database!@#",
          "collection_name": "users",
          "query": {
            "username": "john_doe"
          },
          "update": {
            "$set": {
              "email": "john_new@example.com"
            }
          }
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.0069620609283447266,
        "is_functional_test": false
      },
      {
        "case_name": "MongoDB Server Not Running",
        "purpose": "验证当MongoDB服务不可用时，工具是否能优雅地处理连接失败错误。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "username": "john_doe"
          },
          "update": {
            "$set": {
              "email": "john_new@example.com"
            }
          }
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.00551152229309082,
        "is_functional_test": false
      },
      {
        "case_name": "Large Update Operation",
        "purpose": "验证工具能否处理包含大量数据的更新操作。",
        "args": {
          "database_name": "large_db",
          "collection_name": "large_collection",
          "query": {
            "type": "bulk_update"
          },
          "update": {
            "$set": {
              "data": "A_very_large_string_that_may_contain_thousands_of_characters_and_test_how_the_tool_handles_it."
            }
          }
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.005001068115234375,
        "is_functional_test": true
      }
    ],
    "mcp_delete_document": [
      {
        "case_name": "Delete Single Document Successfully",
        "purpose": "验证工具能够根据指定查询删除单个文档",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "username": "test_user"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.00500035285949707,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Multiple Documents Successfully",
        "purpose": "验证工具在delete_many=True时可以删除所有匹配的文档",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "status": "inactive"
          },
          "delete_many": true
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Delete With Nonexistent Database",
        "purpose": "测试尝试从不存在的数据库中删除文档时的行为是否合理",
        "args": {
          "database_name": "does_not_exist_db",
          "collection_name": "users",
          "query": {
            "username": "test_user"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.012999773025512695,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt Delete With Invalid Query Format",
        "purpose": "验证工具能否正确处理格式错误的查询参数",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": "invalid_query_format"
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_delete_document: 1 validation error for mcp_delete_documentArguments\nquery\n  Input should be a valid dictionary [type=dict_type, input_value='invalid_query_format', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/dict_type"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": false
      },
      {
        "case_name": "Unauthorized Access To Collection",
        "purpose": "测试无权限访问特定集合时，工具是否能安全地处理错误",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "secure_collection",
          "query": {
            "secret": "top"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      },
      {
        "case_name": "Delete Document With Special Characters In Query",
        "purpose": "测试包含特殊字符的查询条件是否能被正确解析并执行删除操作",
        "args": {
          "database_name": "test_db",
          "collection_name": "special_chars_collection",
          "query": {
            "key@#_\\u6d4b\\u8bd5": "value!~`"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.008013010025024414,
        "is_functional_test": true
      },
      {
        "case_name": "MongoDB Server Not Running",
        "purpose": "验证当MongoDB服务不可用时，工具是否能优雅地处理连接失败错误",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "username": "test_user"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.005000591278076172,
        "is_functional_test": false
      },
      {
        "case_name": "Delete From Empty Collection",
        "purpose": "验证当集合为空时，工具是否能正确返回0个文档被删除",
        "args": {
          "database_name": "test_db",
          "collection_name": "empty_docs",
          "query": {}
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.005805253982543945,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 52
}