{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "gemini-2.5-pro-mcp_word_document_automation",
  "server_path": "workspace/pipeline-output-servers/gemini-2.5-pro/mcp_word_document_automation/refined/server.py",
  "timestamp": "2025-07-13T03:53:55.891476",
  "tools": [
    {
      "name": "create_document",
      "description": "\n    Creates a new, empty Word document (.docx) and sets its core metadata properties.\n\n    Args:\n        file_path (str): The full path where the new Word document will be saved (e.g., \"C:/docs/mydocument.docx\").\n        title (str, optional): The title of the document.\n        author (str, optional): The author's name.\n        subject (str, optional): The subject of the document.\n        keywords (str, optional): Comma-separated keywords for the document.\n\n    Returns:\n        dict: A dictionary confirming the action, e.g., {\"status\": \"success\", \"file_path\": \"C:/docs/mydocument.docx\"}.\n\n    Example:\n        create_document(file_path=\"mydocument.docx\", title=\"My Doc\", author=\"John Doe\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "title": {
            "default": null,
            "title": "Title",
            "type": "string"
          },
          "author": {
            "default": null,
            "title": "Author",
            "type": "string"
          },
          "subject": {
            "default": null,
            "title": "Subject",
            "type": "string"
          },
          "keywords": {
            "default": null,
            "title": "Keywords",
            "type": "string"
          }
        },
        "required": [
          "file_path"
        ],
        "title": "create_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "get_document_text",
      "description": "\n    Extracts and returns all text content from an existing Word document.\n\n    Args:\n        file_path (str): The path to the Word document to be read.\n\n    Returns:\n        str: The complete text content of the document, with paragraphs separated by newline characters.\n\n    Example:\n        get_document_text(file_path=\"mydocument.docx\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          }
        },
        "required": [
          "file_path"
        ],
        "title": "get_document_textArguments",
        "type": "object"
      }
    },
    {
      "name": "add_paragraph",
      "description": "\n    Adds a new paragraph of text to the end of a specified Word document.\n\n    Args:\n        file_path (str): The path to the Word document.\n        text (str): The text content to be added as a new paragraph.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        add_paragraph(file_path=\"mydocument.docx\", text=\"This is a new paragraph.\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "text": {
            "title": "Text",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "text"
        ],
        "title": "add_paragraphArguments",
        "type": "object"
      }
    },
    {
      "name": "add_heading",
      "description": "\n    Adds a heading to the end of a Word document with a specified level.\n\n    Args:\n        file_path (str): The path to the Word document.\n        text (str): The text of the heading.\n        level (int): The heading level, from 0 (Title) to 9. Level 1 is a main heading.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        add_heading(file_path=\"mydocument.docx\", text=\"Chapter 1\", level=1)\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "text": {
            "title": "Text",
            "type": "string"
          },
          "level": {
            "title": "Level",
            "type": "integer"
          }
        },
        "required": [
          "file_path",
          "text",
          "level"
        ],
        "title": "add_headingArguments",
        "type": "object"
      }
    },
    {
      "name": "create_custom_style",
      "description": "\n    Creates a new custom paragraph style within the document.\n\n    Args:\n        file_path (str): The path to the Word document.\n        style_name (str): The name for the new custom style.\n        font_name (str, optional): The font name (e.g., \"Calibri\", \"Times New Roman\").\n        font_size_pt (int, optional): The font size in points (e.g., 12).\n        bold (bool, optional): Whether the text should be bold. Defaults to False.\n        italic (bool, optional): Whether the text should be italic. Defaults to False.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        create_custom_style(file_path=\"mydocument.docx\", style_name=\"MyStyle\", font_name=\"Arial\", font_size_pt=14, bold=True)\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "style_name": {
            "title": "Style Name",
            "type": "string"
          },
          "font_name": {
            "default": "Calibri",
            "title": "Font Name",
            "type": "string"
          },
          "font_size_pt": {
            "default": 12,
            "title": "Font Size Pt",
            "type": "integer"
          },
          "bold": {
            "default": false,
            "title": "Bold",
            "type": "boolean"
          },
          "italic": {
            "default": false,
            "title": "Italic",
            "type": "boolean"
          }
        },
        "required": [
          "file_path",
          "style_name"
        ],
        "title": "create_custom_styleArguments",
        "type": "object"
      }
    },
    {
      "name": "format_text",
      "description": "\n    Finds the first occurrence of a specific text string in the document and applies bold and/or italic formatting to it.\n    This is a simplified implementation. It formats the entire run containing the text, not just the text itself.\n\n    Args:\n        file_path (str): The path to the Word document.\n        search_text (str): The text to find and format.\n        bold (bool, optional): Apply bold formatting. Defaults to False.\n        italic (bool, optional): Apply italic formatting. Defaults to False.\n\n    Returns:\n        dict: A dictionary indicating success or failure.\n\n    Example:\n        format_text(file_path=\"mydocument.docx\", search_text=\"important\", bold=True)\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "search_text": {
            "title": "Search Text",
            "type": "string"
          },
          "bold": {
            "default": false,
            "title": "Bold",
            "type": "boolean"
          },
          "italic": {
            "default": false,
            "title": "Italic",
            "type": "boolean"
          }
        },
        "required": [
          "file_path",
          "search_text"
        ],
        "title": "format_textArguments",
        "type": "object"
      }
    },
    {
      "name": "protect_document",
      "description": "\n    Sets write protection on a Word document. Note: This is not supported by the current library.\n\n    Args:\n        file_path (str): The path to the Word document.\n        password (str): The password required to disable protection.\n\n    Returns:\n        dict: A dictionary confirming the attempt.\n\n    Example:\n        protect_document(file_path=\"mydocument.docx\", password=\"password123\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "password"
        ],
        "title": "protect_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "add_footnote_to_document",
      "description": "\n    Adds a footnote to a specific paragraph. Note: This is not directly supported by the current library.\n\n    Args:\n        file_path (str): The path to the Word document.\n        paragraph_index (int): The 0-based index of the paragraph for the footnote.\n        footnote_text (str): The text content of the footnote.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        add_footnote_to_document(file_path=\"mydocument.docx\", paragraph_index=0, footnote_text=\"This is a footnote.\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "paragraph_index": {
            "title": "Paragraph Index",
            "type": "integer"
          },
          "footnote_text": {
            "title": "Footnote Text",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "paragraph_index",
          "footnote_text"
        ],
        "title": "add_footnote_to_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "get_paragraph_text_from_document",
      "description": "\n    Retrieves the text from a single, specific paragraph based on its index.\n\n    Args:\n        file_path (str): The path to the Word document.\n        paragraph_index (int): The 0-based index of the paragraph to retrieve.\n\n    Returns:\n        str: The text content of the specified paragraph or an error message.\n\n    Example:\n        get_paragraph_text_from_document(file_path=\"mydocument.docx\", paragraph_index=0)\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "paragraph_index": {
            "title": "Paragraph Index",
            "type": "integer"
          }
        },
        "required": [
          "file_path",
          "paragraph_index"
        ],
        "title": "get_paragraph_text_from_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "find_text_in_document",
      "description": "\n    Searches the document for a text string and returns the indices of all paragraphs containing the text.\n\n    Args:\n        file_path (str): The path to the Word document.\n        search_text (str): The text to search for.\n\n    Returns:\n        list: A list of integer indices for each paragraph where the text was found, or a list containing an error dictionary.\n\n    Example:\n        find_text_in_document(file_path=\"mydocument.docx\", search_text=\"hello\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "search_text": {
            "title": "Search Text",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "search_text"
        ],
        "title": "find_text_in_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "add_table",
      "description": "\n    Adds a table with a specified number of rows and columns to the end of the document.\n\n    Args:\n        file_path (str): The path to the Word document.\n        rows (int): The number of rows in the table.\n        cols (int): The number of columns in the table.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        add_table(file_path=\"mydocument.docx\", rows=3, cols=4)\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "rows": {
            "title": "Rows",
            "type": "integer"
          },
          "cols": {
            "title": "Cols",
            "type": "integer"
          }
        },
        "required": [
          "file_path",
          "rows",
          "cols"
        ],
        "title": "add_tableArguments",
        "type": "object"
      }
    },
    {
      "name": "add_image",
      "description": "\n    Adds an image from a local path to the end of the document.\n\n    Args:\n        doc_file_path (str): The path to the Word document.\n        image_file_path (str): The path to the image file to be inserted.\n        width_inches (float, optional): The width of the image in inches.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        add_image(doc_file_path=\"mydocument.docx\", image_file_path=\"myimage.png\", width_inches=2.5)\n    ",
      "args_schema": {
        "properties": {
          "doc_file_path": {
            "title": "Doc File Path",
            "type": "string"
          },
          "image_file_path": {
            "title": "Image File Path",
            "type": "string"
          },
          "width_inches": {
            "default": null,
            "title": "Width Inches",
            "type": "number"
          }
        },
        "required": [
          "doc_file_path",
          "image_file_path"
        ],
        "title": "add_imageArguments",
        "type": "object"
      }
    },
    {
      "name": "add_page_break",
      "description": "\n    Inserts a page break at the end of the document.\n\n    Args:\n        file_path (str): The path to the Word document.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        add_page_break(file_path=\"mydocument.docx\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          }
        },
        "required": [
          "file_path"
        ],
        "title": "add_page_breakArguments",
        "type": "object"
      }
    },
    {
      "name": "add_footer",
      "description": "\n    Adds or replaces the footer for the default section of the document.\n\n    Args:\n        file_path (str): The path to the Word document.\n        footer_text (str): The text to place in the footer.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        add_footer(file_path=\"mydocument.docx\", footer_text=\"Copyright 2024\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "footer_text": {
            "title": "Footer Text",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "footer_text"
        ],
        "title": "add_footerArguments",
        "type": "object"
      }
    },
    {
      "name": "add_header",
      "description": "\n    Adds or replaces the header for the default section of the document.\n\n    Args:\n        file_path (str): The path to the Word document.\n        header_text (str): The text to place in the header.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        add_header(file_path=\"mydocument.docx\", header_text=\"My Document Header\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "header_text": {
            "title": "Header Text",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "header_text"
        ],
        "title": "add_headerArguments",
        "type": "object"
      }
    },
    {
      "name": "convert_to_pdf",
      "description": "\n    Converts a Word document to a PDF file.\n\n    Args:\n        docx_path (str): The path to the source Word document.\n        pdf_path (str): The path where the output PDF file will be saved.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        convert_to_pdf(docx_path=\"mydocument.docx\", pdf_path=\"mydocument.pdf\")\n    ",
      "args_schema": {
        "properties": {
          "docx_path": {
            "title": "Docx Path",
            "type": "string"
          },
          "pdf_path": {
            "title": "Pdf Path",
            "type": "string"
          }
        },
        "required": [
          "docx_path",
          "pdf_path"
        ],
        "title": "convert_to_pdfArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "create_document": [
      {
        "case_name": "创建空文档并验证基本功能",
        "purpose": "验证create_document在提供必要参数file_path时能成功创建一个空的.docx文件",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\test_output.docx\"\n}"
        },
        "execution_time": 0.025003910064697266,
        "is_functional_test": true
      },
      {
        "case_name": "创建文档并设置所有元数据",
        "purpose": "验证create_document能够正确设置title、author、subject和keywords等元数据",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx",
          "title": "测试文档标题",
          "author": "张三",
          "subject": "测试主题",
          "keywords": "测试, 文档, Word"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\metadata_doc.docx\"\n}"
        },
        "execution_time": 0.020998001098632812,
        "is_functional_test": true
      },
      {
        "case_name": "仅设置部分元数据",
        "purpose": "验证工具支持只设置部分元数据字段（如仅title和author）",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\partial_metadata.docx",
          "title": "部分元数据文档",
          "author": "李四"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\partial_metadata.docx\"\n}"
        },
        "execution_time": 0.02200031280517578,
        "is_functional_test": true
      },
      {
        "case_name": "使用默认值创建文档",
        "purpose": "验证不指定可选参数时，工具是否仍能正常工作并使用默认值",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\default_metadata.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\default_metadata.docx\"\n}"
        },
        "execution_time": 0.031999826431274414,
        "is_functional_test": true
      },
      {
        "case_name": "文件路径为空",
        "purpose": "验证当file_path为空字符串时是否能正确处理错误",
        "args": {
          "file_path": "",
          "title": "无效路径测试"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"File path must be a non-empty string ending with .docx\"\n}"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": false
      },
      {
        "case_name": "尝试写入受限制的系统路径",
        "purpose": "验证工具能否安全地拒绝向系统敏感目录写入文件",
        "args": {
          "file_path": "C:\\Windows\\system32\\test.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"[Errno 13] Permission denied: 'C:\\\\\\\\Windows\\\\\\\\system32\\\\\\\\test.docx'\"\n}"
        },
        "execution_time": 0.013999462127685547,
        "is_functional_test": false
      },
      {
        "case_name": "文件路径包含特殊字符",
        "purpose": "验证工具是否能正确处理包含特殊字符的文件路径",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@#$.docx\"\n}"
        },
        "execution_time": 0.02300882339477539,
        "is_functional_test": true
      },
      {
        "case_name": "元数据字段包含长字符串",
        "purpose": "验证工具对超长元数据字段的处理能力",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\long_metadata.docx",
          "title": "这是一个非常长的标题12345678901234567890123456789012345678901234567890",
          "author": "作者姓名很长很长很长很长",
          "subject": "这是关于测试的文档，用于验证长元数据字段的行为。",
          "keywords": "关键词1, 关键词2, 关键词3, 关键词4, 关键词5, 关键词6, 关键词7"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\long_metadata.docx\"\n}"
        },
        "execution_time": 0.021993637084960938,
        "is_functional_test": true
      }
    ],
    "get_document_text": [
      {
        "case_name": "提取默认文档文本内容",
        "purpose": "验证get_document_text能够成功读取一个有效.docx文件的文本内容，使用默认创建的空文档作为测试文件",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.009997844696044922,
        "is_functional_test": true
      },
      {
        "case_name": "提取包含元数据的文档文本内容",
        "purpose": "验证get_document_text能够正确读取包含元数据（如title、author等）的Word文档的内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.010000228881835938,
        "is_functional_test": true
      },
      {
        "case_name": "提取部分元数据文档内容",
        "purpose": "验证get_document_text能够处理只包含部分元数据字段的Word文档并正确提取其文本内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\partial_metadata.docx"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.021999835968017578,
        "is_functional_test": true
      },
      {
        "case_name": "提取使用默认值创建的文档内容",
        "purpose": "验证get_document_text能够读取未指定可选参数的文档，并正确提取其文本内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\default_metadata.docx"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.014000892639160156,
        "is_functional_test": true
      },
      {
        "case_name": "提取路径包含特殊字符的文档内容",
        "purpose": "验证get_document_text是否能安全地读取文件路径中包含特殊字符的Word文档",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$.docx"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.015740394592285156,
        "is_functional_test": true
      },
      {
        "case_name": "尝试读取不存在的文档",
        "purpose": "验证当提供的file_path指向一个不存在的文件时，get_document_text能否优雅地处理错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.docx"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.docx\"}"
        },
        "execution_time": 0.004000663757324219,
        "is_functional_test": false
      },
      {
        "case_name": "尝试读取受限制的系统文档",
        "purpose": "验证get_document_text能否安全拒绝访问系统敏感目录中的文档",
        "args": {
          "file_path": "C:\\Windows\\system32\\notepad.exe"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"File path must point to a .docx file.\"}"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": false
      },
      {
        "case_name": "读取超长元数据文档内容",
        "purpose": "验证get_document_text是否能正确处理包含超长元数据字段的Word文档内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\long_metadata.docx"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.011998653411865234,
        "is_functional_test": true
      }
    ],
    "add_paragraph": [
      {
        "case_name": "向文档添加基本段落",
        "purpose": "验证add_paragraph能够成功将一个新段落添加到指定的Word文档末尾",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "text": "这是测试添加的基本段落。"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Paragraph added.\"\n}"
        },
        "execution_time": 0.018999338150024414,
        "is_functional_test": true
      },
      {
        "case_name": "向包含元数据的文档添加段落",
        "purpose": "验证add_paragraph能够正确向包含元数据（如title、author）的Word文档追加段落",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx",
          "text": "这是一个带有元数据的文档的新段落。"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Paragraph added.\"\n}"
        },
        "execution_time": 0.026998519897460938,
        "is_functional_test": true
      },
      {
        "case_name": "向路径含特殊字符的文档添加段落",
        "purpose": "验证add_paragraph能处理文件路径中包含特殊字符的文档并成功添加段落",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$.docx",
          "text": "该文档的路径包含特殊字符，应仍可正常写入。"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Paragraph added.\"\n}"
        },
        "execution_time": 0.03464317321777344,
        "is_functional_test": true
      },
      {
        "case_name": "尝试向只读系统路径文档添加段落",
        "purpose": "验证工具能否安全地拒绝向系统敏感目录中的文档添加内容",
        "args": {
          "file_path": "C:\\Windows\\system32\\notepad.exe",
          "text": "这个段落不应被写入。"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"File path must point to a .docx file.\"\n}"
        },
        "execution_time": 0.00499725341796875,
        "is_functional_test": false
      },
      {
        "case_name": "提供空文本进行添加",
        "purpose": "验证当text参数为空字符串时是否能正确处理错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "text": ""
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Paragraph added.\"\n}"
        },
        "execution_time": 0.02364182472229004,
        "is_functional_test": false
      },
      {
        "case_name": "向不存在的文档添加段落",
        "purpose": "验证当提供的file_path指向一个不存在的文件时，add_paragraph能否优雅地处理错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.docx",
          "text": "这个段落不会被写入，因为目标文件不存在。"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.docx\"\n}"
        },
        "execution_time": 0.004128932952880859,
        "is_functional_test": false
      },
      {
        "case_name": "添加超长文本段落",
        "purpose": "验证add_paragraph对超长文本段落的处理能力",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "text": "这是一段非常长的文本内容，用于测试add_paragraph函数在面对大量文本输入时的行为表现。12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Paragraph added.\"\n}"
        },
        "execution_time": 0.020999908447265625,
        "is_functional_test": true
      },
      {
        "case_name": "向非.docx文件尝试添加段落",
        "purpose": "验证工具是否能正确拒绝向非Word文档格式的文件添加段落",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\basic_test_output.txt",
          "text": "这个段落不应被写入文本文件。"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"File path must point to a .docx file.\"\n}"
        },
        "execution_time": 0.0030007362365722656,
        "is_functional_test": false
      }
    ],
    "add_heading": [
      {
        "case_name": "在默认文档中添加主标题",
        "purpose": "验证add_heading能够正确在空文档末尾添加一级标题（level=1）",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "text": "主标题测试",
          "level": 1
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Heading added.\"\n}"
        },
        "execution_time": 0.02399921417236328,
        "is_functional_test": true
      },
      {
        "case_name": "添加最低级标题（level=9）",
        "purpose": "验证工具支持添加最低级别的标题（level=9）",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\default_metadata.docx",
          "text": "子子子标题",
          "level": 9
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Heading added.\"\n}"
        },
        "execution_time": 0.031003713607788086,
        "is_functional_test": true
      },
      {
        "case_name": "添加标题到包含元数据的文档",
        "purpose": "验证add_heading可以向包含元数据的文档中添加标题",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx",
          "text": "章节一",
          "level": 2
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Heading added.\"\n}"
        },
        "execution_time": 0.020997047424316406,
        "is_functional_test": true
      },
      {
        "case_name": "使用特殊字符作为标题文本",
        "purpose": "验证add_heading能处理包含特殊字符的标题文本",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\partial_metadata.docx",
          "text": "标@#题!_+",
          "level": 1
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Heading added.\"\n}"
        },
        "execution_time": 0.02200031280517578,
        "is_functional_test": true
      },
      {
        "case_name": "尝试添加超出范围的标题级别（level=-1）",
        "purpose": "验证当level小于0时，工具能否优雅地处理错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "text": "无效级别标题",
          "level": -1
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Heading level must be an integer between 0 and 9.\"\n}"
        },
        "execution_time": 0.00400996208190918,
        "is_functional_test": false
      },
      {
        "case_name": "尝试添加超出上限的标题级别（level=10）",
        "purpose": "验证当level大于9时，工具能否正确拒绝该操作",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "text": "超限级别标题",
          "level": 10
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Heading level must be an integer between 0 and 9.\"\n}"
        },
        "execution_time": 0.00299835205078125,
        "is_functional_test": false
      },
      {
        "case_name": "向只读文件路径添加标题",
        "purpose": "验证工具能否安全地拒绝写入受保护目录中的Word文档",
        "args": {
          "file_path": "C:\\Windows\\system32\\readonly.docx",
          "text": "不应写入的标题",
          "level": 1
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: C:\\\\Windows\\\\system32\\\\readonly.docx\"\n}"
        },
        "execution_time": 0.001998424530029297,
        "is_functional_test": false
      },
      {
        "case_name": "向不存在的文档添加标题",
        "purpose": "验证当指定的文件路径不存在时，工具是否能返回清晰的错误信息",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.docx",
          "text": "应失败的标题",
          "level": 2
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.docx\"\n}"
        },
        "execution_time": 0.002998828887939453,
        "is_functional_test": false
      }
    ],
    "create_custom_style": [
      {
        "case_name": "创建自定义样式并应用默认字体设置",
        "purpose": "验证create_custom_style在仅提供必要参数时，能成功创建一个使用默认字体（Calibri）和字号（12pt）的段落样式",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "style_name": "DefaultStyle"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Style 'DefaultStyle' created.\"\n}"
        },
        "execution_time": 0.02204155921936035,
        "is_functional_test": true
      },
      {
        "case_name": "创建带指定字体和字号的自定义样式",
        "purpose": "验证create_custom_style能够正确创建一个指定字体为Arial、字号为14pt的段落样式",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "style_name": "ArialStyle",
          "font_name": "Arial",
          "font_size_pt": 14
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Style 'ArialStyle' created.\"\n}"
        },
        "execution_time": 0.030682086944580078,
        "is_functional_test": true
      },
      {
        "case_name": "创建带粗体和斜体格式的自定义样式",
        "purpose": "验证create_custom_style支持设置bold和italic为True，并正确应用到新创建的段落样式中",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "style_name": "BoldItalicStyle",
          "font_name": "Times New Roman",
          "font_size_pt": 12,
          "bold": true,
          "italic": true
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Style 'BoldItalicStyle' created.\"\n}"
        },
        "execution_time": 0.03563690185546875,
        "is_functional_test": true
      },
      {
        "case_name": "尝试使用无效文件路径创建样式",
        "purpose": "验证当提供的file_path不存在或无法访问时，工具能否优雅地处理错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.docx",
          "style_name": "InvalidPathStyle"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.docx\"\n}"
        },
        "execution_time": 0.005997657775878906,
        "is_functional_test": false
      },
      {
        "case_name": "尝试向受限制目录写入样式",
        "purpose": "验证create_custom_style能否安全地拒绝在系统敏感目录中修改文档",
        "args": {
          "file_path": "C:\\Windows\\system32\\test.docx",
          "style_name": "RestrictedStyle"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: C:\\\\Windows\\\\system32\\\\test.docx\"\n}"
        },
        "execution_time": 0.003421783447265625,
        "is_functional_test": false
      },
      {
        "case_name": "使用特殊字符命名样式",
        "purpose": "验证create_custom_style是否能正确处理包含特殊字符的样式名称",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "style_name": "Special@#$_Style"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Style 'Special@#$_Style' created.\"\n}"
        },
        "execution_time": 0.02454400062561035,
        "is_functional_test": true
      },
      {
        "case_name": "创建多个不同配置的自定义样式",
        "purpose": "验证create_custom_style可以多次调用并创建多种不同配置的段落样式",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "style_name": "MultiTestStyle1",
          "font_name": "Verdana",
          "font_size_pt": 10,
          "bold": true
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Style 'MultiTestStyle1' created.\"\n}"
        },
        "execution_time": 0.02705979347229004,
        "is_functional_test": true
      },
      {
        "case_name": "测试极小字号（1pt）创建样式",
        "purpose": "验证create_custom_style是否能处理边界值（最小常见字号）",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "style_name": "TinyFontSizeStyle",
          "font_name": "Calibri",
          "font_size_pt": 1
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Style 'TinyFontSizeStyle' created.\"\n}"
        },
        "execution_time": 0.025516748428344727,
        "is_functional_test": true
      }
    ],
    "format_text": [
      {
        "case_name": "基本功能测试 - 应用粗体格式",
        "purpose": "验证format_text工具能够成功在文档中找到指定文本并应用粗体格式",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "search_text": "important",
          "bold": true
        },
        "response": {
          "result": "{\n  \"status\": \"not_found\",\n  \"message\": \"Text not found.\"\n}"
        },
        "execution_time": 0.011570930480957031,
        "is_functional_test": true
      },
      {
        "case_name": "基本功能测试 - 应用斜体格式",
        "purpose": "验证format_text工具能够成功在文档中找到指定文本并应用斜体格式",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "search_text": "note",
          "italic": true
        },
        "response": {
          "result": "{\n  \"status\": \"not_found\",\n  \"message\": \"Text not found.\"\n}"
        },
        "execution_time": 0.015517234802246094,
        "is_functional_test": true
      },
      {
        "case_name": "基本功能测试 - 同时应用粗体和斜体格式",
        "purpose": "验证format_text工具能够同时应用粗体和斜体格式到指定文本",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "search_text": "highlight",
          "bold": true,
          "italic": true
        },
        "response": {
          "result": "{\n  \"status\": \"not_found\",\n  \"message\": \"Text not found.\"\n}"
        },
        "execution_time": 0.02200007438659668,
        "is_functional_test": true
      },
      {
        "case_name": "基本功能测试 - 不设置任何格式（默认行为）",
        "purpose": "验证当不设置bold或italic参数时，工具不会抛出错误且返回成功状态",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "search_text": "default"
        },
        "response": {
          "result": "{\n  \"status\": \"not_found\",\n  \"message\": \"Text not found.\"\n}"
        },
        "execution_time": 0.012000083923339844,
        "is_functional_test": true
      },
      {
        "case_name": "安全性测试 - 尝试修改受保护系统文件",
        "purpose": "验证工具是否能安全拒绝尝试对受保护的系统路径中的文档进行格式化操作",
        "args": {
          "file_path": "C:\\Windows\\system32\\test.docx",
          "search_text": "important",
          "bold": true
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: C:\\\\Windows\\\\system32\\\\test.docx\"\n}"
        },
        "execution_time": 0.002997875213623047,
        "is_functional_test": false
      },
      {
        "case_name": "错误处理测试 - 文件路径为空",
        "purpose": "验证当file_path参数为空字符串时能否正确处理错误",
        "args": {
          "file_path": "",
          "search_text": "important"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"File path must be a non-empty string.\"\n}"
        },
        "execution_time": 0.002508878707885742,
        "is_functional_test": false
      },
      {
        "case_name": "错误处理测试 - 搜索文本不存在",
        "purpose": "验证当文档中不存在指定搜索文本时工具是否能优雅地处理错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "search_text": "nonexistenttext"
        },
        "response": {
          "result": "{\n  \"status\": \"not_found\",\n  \"message\": \"Text not found.\"\n}"
        },
        "execution_time": 0.012009620666503906,
        "is_functional_test": false
      },
      {
        "case_name": "边界条件测试 - 文件路径包含特殊字符",
        "purpose": "验证工具是否能正确处理包含特殊字符的文件路径",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$.docx",
          "search_text": "test"
        },
        "response": {
          "result": "{\n  \"status\": \"not_found\",\n  \"message\": \"Text not found.\"\n}"
        },
        "execution_time": 0.011510372161865234,
        "is_functional_test": true
      }
    ],
    "find_text_in_document": [
      {
        "case_name": "基本文本搜索功能验证",
        "purpose": "验证find_text_in_document能够正确搜索文档中包含指定文本的段落并返回索引列表",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "search_text": "test"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.012999296188354492,
        "is_functional_test": true
      },
      {
        "case_name": "搜索文本存在于多个段落中",
        "purpose": "验证当搜索文本出现在多个段落时，工具能正确返回所有匹配段落的索引",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx",
          "search_text": "测试"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.01199960708618164,
        "is_functional_test": true
      },
      {
        "case_name": "搜索文本不存在于文档中",
        "purpose": "验证当文档中不包含搜索文本时，工具是否返回空列表",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\partial_metadata.docx",
          "search_text": "不存在的文本"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.014002323150634766,
        "is_functional_test": true
      },
      {
        "case_name": "搜索包含特殊字符的文本",
        "purpose": "验证工具是否能正确处理包含特殊字符的搜索文本",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$.docx",
          "search_text": "@#"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.023998022079467773,
        "is_functional_test": true
      },
      {
        "case_name": "尝试搜索系统文件路径中的非.docx文件",
        "purpose": "验证工具是否拒绝搜索非Word文档文件（如exe）",
        "args": {
          "file_path": "C:\\Windows\\system32\\notepad.exe",
          "search_text": "test"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"File path must point to a .docx file.\"\n}"
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": false
      },
      {
        "case_name": "搜索文本为空字符串",
        "purpose": "验证当搜索文本为空时，工具是否能正确处理错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\default_metadata.docx",
          "search_text": ""
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.011999130249023438,
        "is_functional_test": false
      },
      {
        "case_name": "搜索超长文本内容",
        "purpose": "验证工具对非常长的搜索文本的处理能力",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\long_metadata.docx",
          "search_text": "这是一个非常长的搜索文本12345678901234567890123456789012345678901234567890"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.01100015640258789,
        "is_functional_test": true
      },
      {
        "case_name": "搜索受限制路径的文档",
        "purpose": "验证工具是否安全地拒绝访问敏感系统目录下的文档",
        "args": {
          "file_path": "C:\\Windows\\system32\\test.docx",
          "search_text": "test"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: C:\\\\Windows\\\\system32\\\\test.docx\"\n}"
        },
        "execution_time": 0.003000974655151367,
        "is_functional_test": false
      }
    ],
    "get_paragraph_text_from_document": [
      {
        "case_name": "获取文档第一个段落文本",
        "purpose": "验证get_paragraph_text_from_document能够成功读取一个有效.docx文件的第一个段落内容（基本功能）",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx",
          "paragraph_index": 0
        },
        "response": {
          "result": "这是一个带有元数据的文档的新段落。"
        },
        "execution_time": 0.009999752044677734,
        "is_functional_test": true
      },
      {
        "case_name": "获取文档中间段落文本",
        "purpose": "验证get_paragraph_text_from_document能正确读取文档中指定索引的段落内容（非首段）",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\long_metadata.docx",
          "paragraph_index": 2
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Paragraph index out of bounds.\"}"
        },
        "execution_time": 0.014005422592163086,
        "is_functional_test": true
      },
      {
        "case_name": "获取最后一个段落文本",
        "purpose": "验证工具在提供合法最大索引值时能正确返回最后一个段落内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\partial_metadata.docx",
          "paragraph_index": 4
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Paragraph index out of bounds.\"}"
        },
        "execution_time": 0.011067628860473633,
        "is_functional_test": true
      },
      {
        "case_name": "尝试读取不存在的段落索引",
        "purpose": "验证当paragraph_index超出文档实际段落数量时是否能优雅处理错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "paragraph_index": 10
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Paragraph index out of bounds.\"}"
        },
        "execution_time": 0.02705669403076172,
        "is_functional_test": false
      },
      {
        "case_name": "使用负数段落索引",
        "purpose": "验证工具对非法负数段落索引的处理能力",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\default_metadata.docx",
          "paragraph_index": -1
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Paragraph index must be a non-negative integer.\"}"
        },
        "execution_time": 0.012999773025512695,
        "is_functional_test": false
      },
      {
        "case_name": "读取包含特殊字符路径文档的段落",
        "purpose": "验证工具能否安全地读取包含特殊字符的文件路径中的段落内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$.docx",
          "paragraph_index": 0
        },
        "response": {
          "result": "该文档的路径包含特殊字符，应仍可正常写入。"
        },
        "execution_time": 0.011005401611328125,
        "is_functional_test": true
      },
      {
        "case_name": "尝试读取受限制的系统文件段落",
        "purpose": "验证get_paragraph_text_from_document能否安全拒绝访问系统敏感目录中的文档段落",
        "args": {
          "file_path": "C:\\Windows\\system32\\notepad.exe",
          "paragraph_index": 0
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"File path must point to a .docx file.\"}"
        },
        "execution_time": 0.003996610641479492,
        "is_functional_test": false
      },
      {
        "case_name": "读取空文档的首个段落",
        "purpose": "验证工具在空文档中尝试读取段落时的行为是否符合预期（如返回空字符串或合理提示）",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "paragraph_index": 0
        },
        "response": {
          "result": "这是测试添加的基本段落。"
        },
        "execution_time": 0.009999275207519531,
        "is_functional_test": true
      }
    ],
    "add_table": [
      {
        "case_name": "向文档添加基本表格",
        "purpose": "验证add_table工具能够成功在现有文档末尾添加一个指定行数和列数的表格",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "rows": 3,
          "cols": 4
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Table added.\"\n}"
        },
        "execution_time": 0.022089004516601562,
        "is_functional_test": true
      },
      {
        "case_name": "添加单行单列表格",
        "purpose": "验证add_table工具能处理最小边界情况，即添加1行1列的表格",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "rows": 1,
          "cols": 1
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Table added.\"\n}"
        },
        "execution_time": 0.03850126266479492,
        "is_functional_test": true
      },
      {
        "case_name": "添加多行多列表格",
        "purpose": "验证add_table工具能够正确添加较大尺寸的表格（如10行5列）",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "rows": 10,
          "cols": 5
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Table added.\"\n}"
        },
        "execution_time": 0.024983882904052734,
        "is_functional_test": true
      },
      {
        "case_name": "尝试添加负行数或列数",
        "purpose": "验证add_table工具能否优雅地处理无效参数，例如负数行或列",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "rows": -2,
          "cols": 3
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Rows and columns must be positive integers.\"\n}"
        },
        "execution_time": 0.0020036697387695312,
        "is_functional_test": false
      },
      {
        "case_name": "文件路径为空",
        "purpose": "验证当file_path为空字符串时是否能正确返回错误信息",
        "args": {
          "file_path": "",
          "rows": 3,
          "cols": 4
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"File path must be a non-empty string.\"\n}"
        },
        "execution_time": 0.001999378204345703,
        "is_functional_test": false
      },
      {
        "case_name": "向只读文档添加表格",
        "purpose": "验证add_table工具能否安全地拒绝修改只读文档",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_document.docx",
          "rows": 2,
          "cols": 2
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_document.docx\"\n}"
        },
        "execution_time": 0.0038242340087890625,
        "is_functional_test": false
      },
      {
        "case_name": "路径包含特殊字符",
        "purpose": "验证add_table工具能否正确处理文件路径中包含特殊字符的情况",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$.docx",
          "rows": 5,
          "cols": 3
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@#$.docx\"\n}"
        },
        "execution_time": 0.0029973983764648438,
        "is_functional_test": true
      },
      {
        "case_name": "目标文件不存在",
        "purpose": "验证当提供的file_path指向一个不存在的文件时，add_table能否优雅地处理错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.docx",
          "rows": 3,
          "cols": 4
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.docx\"\n}"
        },
        "execution_time": 0.004998445510864258,
        "is_functional_test": false
      }
    ],
    "add_image": [
      {
        "case_name": "向文档添加图像并使用默认宽度",
        "purpose": "验证add_image在提供必要参数doc_file_path和image_file_path时能成功将图像插入文档，并使用默认宽度",
        "args": {
          "doc_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "image_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.png"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"An unexpected error occurred: \"\n}"
        },
        "execution_time": 0.010999441146850586,
        "is_functional_test": true
      },
      {
        "case_name": "指定宽度插入图像",
        "purpose": "验证add_image能够正确插入图像并指定图像宽度（以英寸为单位）",
        "args": {
          "doc_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "image_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "width_inches": 3.5
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Image added.\"\n}"
        },
        "execution_time": 0.1265273094177246,
        "is_functional_test": true
      },
      {
        "case_name": "尝试插入不存在的图像",
        "purpose": "验证当image_file_path指向一个不存在的文件时，add_image能否优雅地处理错误",
        "args": {
          "doc_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "image_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.png"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified image file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.png\"\n}"
        },
        "execution_time": 0.0030002593994140625,
        "is_functional_test": false
      },
      {
        "case_name": "尝试向只读文档插入图像",
        "purpose": "验证add_image能否安全地处理无法修改的文档",
        "args": {
          "doc_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly-check.docx",
          "image_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.png"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly-check.docx\"\n}"
        },
        "execution_time": 0.0019991397857666016,
        "is_functional_test": false
      },
      {
        "case_name": "插入大尺寸图像",
        "purpose": "验证add_image是否能正确处理大尺寸图像文件",
        "args": {
          "doc_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "image_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\large_image.jpg",
          "width_inches": 10.0
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified image file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\large_image.jpg\"\n}"
        },
        "execution_time": 0.0030002593994140625,
        "is_functional_test": true
      },
      {
        "case_name": "文档路径包含特殊字符",
        "purpose": "验证add_image是否能正确处理包含特殊字符的文档路径",
        "args": {
          "doc_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$.docx",
          "image_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.png"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@#$.docx\"\n}"
        },
        "execution_time": 0.006998300552368164,
        "is_functional_test": true
      },
      {
        "case_name": "图像路径包含特殊字符",
        "purpose": "验证add_image是否能正确处理包含特殊字符的图像路径",
        "args": {
          "doc_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "image_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\image@#$.png"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified image file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\image@#$.png\"\n}"
        },
        "execution_time": 0.0030012130737304688,
        "is_functional_test": true
      },
      {
        "case_name": "尝试插入非图像文件",
        "purpose": "验证add_image能否正确拒绝插入非图像文件（如文本文件）",
        "args": {
          "doc_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "image_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_test.txt"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"An unexpected error occurred: \"\n}"
        },
        "execution_time": 0.019998788833618164,
        "is_functional_test": false
      }
    ],
    "add_page_break": [
      {
        "case_name": "在有效文档中插入分页符",
        "purpose": "验证add_page_break能够在提供的有效.docx文件末尾成功插入分页符",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Page break added.\"\n}"
        },
        "execution_time": 0.1202545166015625,
        "is_functional_test": true
      },
      {
        "case_name": "尝试向只读文档插入分页符",
        "purpose": "验证工具能否安全地拒绝向只读或受保护的Word文档插入分页符",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\refs\\heads\\readonly-check"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"File path must point to a .docx file.\"\n}"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": false
      },
      {
        "case_name": "向不存在的文档插入分页符",
        "purpose": "验证当指定的文件路径无效或文件不存在时，工具是否能正确处理错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.docx\"\n}"
        },
        "execution_time": 0.003003358840942383,
        "is_functional_test": false
      },
      {
        "case_name": "向路径包含特殊字符的文档插入分页符",
        "purpose": "验证add_page_break能够处理文件路径中包含特殊字符的情况",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@#$.docx\"\n}"
        },
        "execution_time": 0.003000497817993164,
        "is_functional_test": true
      },
      {
        "case_name": "向系统敏感路径插入分页符",
        "purpose": "验证工具能否安全拒绝在系统敏感目录（如Windows/system32）中的文档插入分页符",
        "args": {
          "file_path": "C:\\Windows\\system32\\test.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: C:\\\\Windows\\\\system32\\\\test.docx\"\n}"
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": false
      },
      {
        "case_name": "向空文件路径插入分页符",
        "purpose": "验证当file_path为空字符串时，工具是否能正确返回参数验证失败信息",
        "args": {
          "file_path": ""
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"File path must be a non-empty string.\"\n}"
        },
        "execution_time": 0.0019998550415039062,
        "is_functional_test": false
      },
      {
        "case_name": "向非.docx扩展名文件插入分页符",
        "purpose": "验证工具是否仅允许对.docx格式文件执行插入分页符操作",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpeg"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"File path must point to a .docx file.\"\n}"
        },
        "execution_time": 0.0019996166229248047,
        "is_functional_test": false
      },
      {
        "case_name": "向超长文件名的文档插入分页符",
        "purpose": "验证工具是否能正确处理带有极长文件名的.docx文件路径",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_1234567890123456789012345678901234567890.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_output_filename_1234567890123456789012345678901234567890.docx\"\n}"
        },
        "execution_time": 0.0048978328704833984,
        "is_functional_test": true
      }
    ],
    "add_footer": [
      {
        "case_name": "为现有文档添加页脚",
        "purpose": "验证add_footer能够成功为一个已存在的Word文档添加指定的页脚文本",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "footer_text": "Copyright 2024"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Footer updated.\"\n}"
        },
        "execution_time": 0.13783836364746094,
        "is_functional_test": true
      },
      {
        "case_name": "替换已有页脚内容",
        "purpose": "验证当文档已有页脚时，add_footer能正确将其替换为新的页脚文本",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx",
          "footer_text": "New Footer Text"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\metadata_doc.docx\"\n}"
        },
        "execution_time": 0.0031006336212158203,
        "is_functional_test": true
      },
      {
        "case_name": "使用空字符串作为页脚内容",
        "purpose": "验证工具是否允许使用空字符串作为footer_text参数",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\partial_metadata.docx",
          "footer_text": ""
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\partial_metadata.docx\"\n}"
        },
        "execution_time": 0.0023305416107177734,
        "is_functional_test": true
      },
      {
        "case_name": "尝试向受保护路径的文档添加页脚",
        "purpose": "验证工具能否安全拒绝在系统敏感目录中的文档中添加页脚",
        "args": {
          "file_path": "C:\\Windows\\system32\\test.docx",
          "footer_text": "Restricted Footer"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: C:\\\\Windows\\\\system32\\\\test.docx\"\n}"
        },
        "execution_time": 0.003446817398071289,
        "is_functional_test": false
      },
      {
        "case_name": "文件路径为空",
        "purpose": "验证当file_path为空字符串时是否能正确处理错误",
        "args": {
          "file_path": "",
          "footer_text": "Empty Path Test"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"File path must be a non-empty string.\"\n}"
        },
        "execution_time": 0.00814056396484375,
        "is_functional_test": false
      },
      {
        "case_name": "页脚文本包含特殊字符",
        "purpose": "验证add_footer是否能正确处理包含特殊字符的footer_text",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\default_metadata.docx",
          "footer_text": "Special@#Characters$%^&*"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Footer updated.\"\n}"
        },
        "execution_time": 0.021788835525512695,
        "is_functional_test": true
      },
      {
        "case_name": "页脚文本超长",
        "purpose": "验证工具对超长footer_text的处理能力",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$.docx",
          "footer_text": "这是一个非常长的页脚文本12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@#$.docx\"\n}"
        },
        "execution_time": 0.007264614105224609,
        "is_functional_test": true
      },
      {
        "case_name": "目标文档不存在",
        "purpose": "验证当提供的file_path指向一个不存在的文档时，工具能否优雅地处理错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.docx",
          "footer_text": "Footer for Non-existent File"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.docx\"\n}"
        },
        "execution_time": 0.004590749740600586,
        "is_functional_test": false
      }
    ],
    "add_header": [
      {
        "case_name": "为默认文档添加页眉",
        "purpose": "验证add_header能够成功为一个已存在的Word文档的默认节添加指定的页眉内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "header_text": "这是默认页眉"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Header updated.\"\n}"
        },
        "execution_time": 0.11766552925109863,
        "is_functional_test": true
      },
      {
        "case_name": "替换已有页眉内容",
        "purpose": "验证add_header能正确替换文档中已有页眉内容，而不是追加或忽略",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx",
          "header_text": "新的页眉内容"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\metadata_doc.docx\"\n}"
        },
        "execution_time": 0.002999544143676758,
        "is_functional_test": true
      },
      {
        "case_name": "添加空页眉",
        "purpose": "验证工具是否允许添加空字符串作为页眉内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\partial_metadata.docx",
          "header_text": ""
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\partial_metadata.docx\"\n}"
        },
        "execution_time": 0.0030002593994140625,
        "is_functional_test": true
      },
      {
        "case_name": "尝试向非.docx文件添加页眉",
        "purpose": "验证工具能否安全地拒绝操作非Word文档（如.txt或.pdf）",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_test.txt",
          "header_text": "非法操作测试"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"File path must point to a .docx file.\"\n}"
        },
        "execution_time": 0.006000518798828125,
        "is_functional_test": false
      },
      {
        "case_name": "向受保护路径中的文档添加页眉",
        "purpose": "验证工具是否能安全地拒绝修改系统敏感目录下的文档",
        "args": {
          "file_path": "C:\\Windows\\system32\\test.docx",
          "header_text": "安全测试页眉"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: C:\\\\Windows\\\\system32\\\\test.docx\"\n}"
        },
        "execution_time": 0.002998828887939453,
        "is_functional_test": false
      },
      {
        "case_name": "页眉内容包含特殊字符",
        "purpose": "验证add_header能否正确处理包含特殊字符的页眉文本",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$.docx",
          "header_text": "This is a header with special chars: @ # $ % ^ & *"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@#$.docx\"\n}"
        },
        "execution_time": 0.0040013790130615234,
        "is_functional_test": true
      },
      {
        "case_name": "使用超长页眉文本",
        "purpose": "验证工具对非常长的页眉内容的处理能力",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\long_metadata.docx",
          "header_text": "这是一个非常长的页眉内容123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\long_metadata.docx\"\n}"
        },
        "execution_time": 0.005999326705932617,
        "is_functional_test": true
      },
      {
        "case_name": "文件路径为空字符串",
        "purpose": "验证当file_path参数为空时是否能返回明确的错误提示",
        "args": {
          "file_path": "",
          "header_text": "无效路径测试页眉"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"File path must be a non-empty string.\"\n}"
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": false
      }
    ],
    "convert_to_pdf": [
      {
        "case_name": "基本转换功能验证",
        "purpose": "验证convert_to_pdf能够将一个已存在的.docx文件成功转换为PDF格式并保存到指定路径",
        "args": {
          "docx_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "pdf_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.pdf"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\test_output.pdf\"\n}"
        },
        "execution_time": 0.05652141571044922,
        "is_functional_test": true
      },
      {
        "case_name": "转换包含元数据的文档",
        "purpose": "验证convert_to_pdf能够正确处理包含元数据（如title、author等）的Word文档，并保留其内容进行PDF转换",
        "args": {
          "docx_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_doc.docx",
          "pdf_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_output.pdf"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\metadata_doc.docx\"\n}"
        },
        "execution_time": 0.0029969215393066406,
        "is_functional_test": true
      },
      {
        "case_name": "转换路径包含特殊字符的文档",
        "purpose": "验证convert_to_pdf能否安全地读取路径中包含特殊字符的.docx文件并生成PDF",
        "args": {
          "docx_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$.docx",
          "pdf_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_output.pdf"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@#$.docx\"\n}"
        },
        "execution_time": 0.0030024051666259766,
        "is_functional_test": true
      },
      {
        "case_name": "尝试转换不存在的Word文档",
        "purpose": "验证当提供的docx_path指向一个不存在的文件时，convert_to_pdf是否能优雅地处理错误",
        "args": {
          "docx_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.docx",
          "pdf_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\error_output.pdf"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.docx\"\n}"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": false
      },
      {
        "case_name": "尝试写入受限制的系统路径",
        "purpose": "验证convert_to_pdf是否能安全地拒绝向系统敏感目录写入PDF文件",
        "args": {
          "docx_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "pdf_path": "C:\\Windows\\system32\\test_output.pdf"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"An unexpected error occurred during PDF conversion: [Errno 13] Permission denied: 'C:\\\\\\\\Windows\\\\\\\\system32\\\\\\\\test_output.pdf'\"\n}"
        },
        "execution_time": 0.06123852729797363,
        "is_functional_test": false
      },
      {
        "case_name": "超长文件路径转换测试",
        "purpose": "验证convert_to_pdf对超长文件路径的支持能力，确保工具不会因路径长度而崩溃",
        "args": {
          "docx_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_1234567890123456789012345678901234567890.docx",
          "pdf_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_1234567890123456789012345678901234567890_converted.pdf"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_output_filename_1234567890123456789012345678901234567890.docx\"\n}"
        },
        "execution_time": 0.003509044647216797,
        "is_functional_test": true
      },
      {
        "case_name": "转换只读Word文档",
        "purpose": "验证convert_to_pdf是否能正确处理只读状态的.docx文件并生成PDF",
        "args": {
          "docx_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\refs\\heads\\readonly-check.docx",
          "pdf_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_output.pdf"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\refs\\\\heads\\\\readonly-check.docx\"\n}"
        },
        "execution_time": 0.00400090217590332,
        "is_functional_test": false
      },
      {
        "case_name": "转换和输出路径相同文件名测试",
        "purpose": "验证convert_to_pdf是否能处理与源文件同名但扩展名为.pdf的目标路径",
        "args": {
          "docx_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "pdf_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.pdf"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\test_output.pdf\"\n}"
        },
        "execution_time": 0.0931403636932373,
        "is_functional_test": true
      }
    ],
    "protect_document": [
      {
        "case_name": "基本文档保护功能测试",
        "purpose": "验证protect_document能够对一个有效存在的.docx文件设置写保护（即使当前库不支持，也应返回明确的尝试信息）",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "password": "securePass123"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Feature not supported by the current environment. 'python-docx' does not support password protection.\"\n}"
        },
        "execution_time": 0.003000974655151367,
        "is_functional_test": true
      },
      {
        "case_name": "空密码设置保护",
        "purpose": "验证当提供空字符串作为密码时，工具是否能正确处理或返回警告信息",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "password": ""
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Feature not supported by the current environment. 'python-docx' does not support password protection.\"\n}"
        },
        "execution_time": 0.0019989013671875,
        "is_functional_test": false
      },
      {
        "case_name": "尝试保护不存在的文档",
        "purpose": "验证当提供的file_path指向一个不存在的文件时，protect_document能否优雅地处理错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.docx",
          "password": "password123"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Feature not supported by the current environment. 'python-docx' does not support password protection.\"\n}"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": false
      },
      {
        "case_name": "使用特殊字符密码进行保护",
        "purpose": "验证工具是否能接受包含特殊字符的密码用于文档保护",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "password": "p@ssw0rd!#&*"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Feature not supported by the current environment. 'python-docx' does not support password protection.\"\n}"
        },
        "execution_time": 0.00600123405456543,
        "is_functional_test": true
      },
      {
        "case_name": "尝试写入受限制的系统路径文档",
        "purpose": "验证工具能否安全地拒绝尝试在系统敏感目录中修改文档",
        "args": {
          "file_path": "C:\\Windows\\system32\\test.docx",
          "password": "password123"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Feature not supported by the current environment. 'python-docx' does not support password protection.\"\n}"
        },
        "execution_time": 0.002997875213623047,
        "is_functional_test": false
      },
      {
        "case_name": "长密码边界测试",
        "purpose": "验证工具对超长密码的处理能力",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "password": "ThisIsAVeryLongPassword1234567890!@#$%^&*()_+=-`~[]{}|;':\",./<>?"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Feature not supported by the current environment. 'python-docx' does not support password protection.\"\n}"
        },
        "execution_time": 0.003000497817993164,
        "is_functional_test": true
      },
      {
        "case_name": "尝试用无效文件类型设置保护",
        "purpose": "验证工具是否拒绝非.docx扩展名的文件进行保护操作",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.pdf",
          "password": "password123"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Feature not supported by the current environment. 'python-docx' does not support password protection.\"\n}"
        },
        "execution_time": 0.0028634071350097656,
        "is_functional_test": false
      },
      {
        "case_name": "无密码直接设置保护",
        "purpose": "验证是否允许在未提供密码的情况下设置文档保护（预期失败或自动分配默认密码）",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool protect_document: 1 validation error for protect_documentArguments\npassword\n  Field required [type=missing, input_value={'file_path': 'D:\\\\devWor...iles\\\\test_output.docx'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.0042591094970703125,
        "is_functional_test": false
      }
    ],
    "add_footnote_to_document": [
      {
        "case_name": "向文档第一个段落添加简单脚注",
        "purpose": "验证add_footnote_to_document能够正确向指定段落添加基本脚注内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "paragraph_index": 0,
          "footnote_text": "这是测试脚注"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Failed to add footnote due to library limitations. 'python-docx' does not have a direct API for footnotes.\"\n}"
        },
        "execution_time": 0.003695964813232422,
        "is_functional_test": true
      },
      {
        "case_name": "尝试向不存在的段落添加脚注",
        "purpose": "验证当paragraph_index超出文档实际段落数量时，工具是否能优雅处理错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "paragraph_index": 999,
          "footnote_text": "目标段落不存在"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Failed to add footnote due to library limitations. 'python-docx' does not have a direct API for footnotes.\"\n}"
        },
        "execution_time": 0.003512144088745117,
        "is_functional_test": false
      },
      {
        "case_name": "在受保护路径中尝试添加脚注",
        "purpose": "验证工具能否安全拒绝在系统敏感目录中的文件上操作",
        "args": {
          "file_path": "C:\\Windows\\system32\\test.docx",
          "paragraph_index": 0,
          "footnote_text": "不应成功添加"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Failed to add footnote due to library limitations. 'python-docx' does not have a direct API for footnotes.\"\n}"
        },
        "execution_time": 0.006000995635986328,
        "is_functional_test": false
      },
      {
        "case_name": "向包含特殊字符的文件添加脚注",
        "purpose": "验证工具对包含特殊字符的文件路径进行脚注添加时的行为",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$.docx",
          "paragraph_index": 0,
          "footnote_text": "带特殊字符的文件测试"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Failed to add footnote due to library limitations. 'python-docx' does not have a direct API for footnotes.\"\n}"
        },
        "execution_time": 0.0029997825622558594,
        "is_functional_test": true
      },
      {
        "case_name": "使用空字符串作为脚注内容",
        "purpose": "验证工具对空脚注内容的处理方式",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "paragraph_index": 0,
          "footnote_text": ""
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Failed to add footnote due to library limitations. 'python-docx' does not have a direct API for footnotes.\"\n}"
        },
        "execution_time": 0.0048580169677734375,
        "is_functional_test": false
      },
      {
        "case_name": "向段落添加长文本脚注",
        "purpose": "验证工具对超长脚注文本的处理能力",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx",
          "paragraph_index": 0,
          "footnote_text": "这是一个非常长的脚注示例，用于测试工具对大量文本输入的处理能力。它应该能够被正确插入到指定段落中，而不会导致程序崩溃或出现异常行为。1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Failed to add footnote due to library limitations. 'python-docx' does not have a direct API for footnotes.\"\n}"
        },
        "execution_time": 0.009140253067016602,
        "is_functional_test": true
      },
      {
        "case_name": "尝试为只读文档添加脚注",
        "purpose": "验证工具能否安全地拒绝修改标记为只读的Word文档",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\readonly-check\\readonly_file.txt",
          "paragraph_index": 0,
          "footnote_text": "应失败 - 文件为只读"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Failed to add footnote due to library limitations. 'python-docx' does not have a direct API for footnotes.\"\n}"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": false
      },
      {
        "case_name": "向不存在的文档添加脚注",
        "purpose": "验证当目标文件不存在时，工具是否能正确处理错误情况",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.docx",
          "paragraph_index": 0,
          "footnote_text": "目标文档不存在"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Failed to add footnote due to library limitations. 'python-docx' does not have a direct API for footnotes.\"\n}"
        },
        "execution_time": 0.004247903823852539,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 128
}