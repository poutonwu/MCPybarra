{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "gemini-2.5-pro-mcp_computer_vision_toolkit",
  "server_path": "workspace/pipeline-output-servers/gemini-2.5-pro/mcp_computer_vision_toolkit/refined/server.py",
  "timestamp": "2025-07-13T04:03:49.275136",
  "tools": [
    {
      "name": "save_image",
      "description": "Saves an image from a source path to a destination path.\n    This function is useful for creating copies or changing the format of an image file.\n\n    Args:\n        source_path (str): The full path to the existing image file.\n        destination_path (str): The full path where the new image file will be saved.\n\n    Returns:\n        str: A JSON string with a confirmation message indicating the path where the image was successfully saved, or an error message.\n\n    Example:\n        save_image(source_path=\"input/logo.png\", destination_path=\"output/logo_copy.jpg\")\n    ",
      "args_schema": {
        "properties": {
          "source_path": {
            "title": "Source Path",
            "type": "string"
          },
          "destination_path": {
            "title": "Destination Path",
            "type": "string"
          }
        },
        "required": [
          "source_path",
          "destination_path"
        ],
        "title": "save_imageArguments",
        "type": "object"
      }
    },
    {
      "name": "resize_image",
      "description": "Changes the dimensions of an image to a specified width and height.\n\n    Args:\n        input_path (str): The path to the source image file.\n        output_path (str): The path to save the resized image file.\n        width (int): The target width for the resized image in pixels.\n        height (int): The target height for the resized image in pixels.\n\n    Returns:\n        str: A JSON string with a confirmation message indicating the path of the newly created resized image, or an error message.\n\n    Example:\n        resize_image(input_path=\"input/photo.jpg\", output_path=\"output/photo_resized.jpg\", width=800, height=600)\n    ",
      "args_schema": {
        "properties": {
          "input_path": {
            "title": "Input Path",
            "type": "string"
          },
          "output_path": {
            "title": "Output Path",
            "type": "string"
          },
          "width": {
            "title": "Width",
            "type": "integer"
          },
          "height": {
            "title": "Height",
            "type": "integer"
          }
        },
        "required": [
          "input_path",
          "output_path",
          "width",
          "height"
        ],
        "title": "resize_imageArguments",
        "type": "object"
      }
    },
    {
      "name": "crop_image",
      "description": "Extracts a rectangular region from an image.\n\n    Args:\n        input_path (str): The path to the source image file.\n        output_path (str): The path to save the cropped image file.\n        x (int): The x-coordinate of the top-left corner of the crop area.\n        y (int): The y-coordinate of the top-left corner of the crop area.\n        width (int): The width of the crop rectangle.\n        height (int): The height of the crop rectangle.\n\n    Returns:\n        str: A JSON string with a confirmation message indicating the path of the newly created cropped image, or an error message.\n\n    Example:\n        crop_image(input_path=\"input/scenery.png\", output_path=\"output/scenery_cropped.png\", x=100, y=150, width=300, height=200)\n    ",
      "args_schema": {
        "properties": {
          "input_path": {
            "title": "Input Path",
            "type": "string"
          },
          "output_path": {
            "title": "Output Path",
            "type": "string"
          },
          "x": {
            "title": "X",
            "type": "integer"
          },
          "y": {
            "title": "Y",
            "type": "integer"
          },
          "width": {
            "title": "Width",
            "type": "integer"
          },
          "height": {
            "title": "Height",
            "type": "integer"
          }
        },
        "required": [
          "input_path",
          "output_path",
          "x",
          "y",
          "width",
          "height"
        ],
        "title": "crop_imageArguments",
        "type": "object"
      }
    },
    {
      "name": "get_image_stats",
      "description": "Retrieves basic statistical information about an image, such as its\n    dimensions and number of color channels.\n\n    Args:\n        input_path (str): The path to the image file to be analyzed.\n\n    Returns:\n        str: A JSON string containing the image's statistics: {'width': int, 'height': int, 'channels': int}, or an error message.\n\n    Example:\n        get_image_stats(input_path=\"input/image.jpg\")\n    ",
      "args_schema": {
        "properties": {
          "input_path": {
            "title": "Input Path",
            "type": "string"
          }
        },
        "required": [
          "input_path"
        ],
        "title": "get_image_statsArguments",
        "type": "object"
      }
    },
    {
      "name": "apply_filter",
      "description": "Applies a pre-defined filter to an image. Supported filters are 'blur',\n    'grayscale', and 'sharpen'.\n\n    Args:\n        input_path (str): The path to the source image file.\n        output_path (str): The path to save the filtered image file.\n        filter_type (str): The type of filter to apply. Must be one of 'blur', 'grayscale', or 'sharpen'.\n\n    Returns:\n        str: A JSON string with a confirmation message indicating the path of the newly created filtered image, or an error message.\n\n    Example:\n        apply_filter(input_path=\"input/portrait.jpg\", output_path=\"output/portrait_blurred.jpg\", filter_type=\"blur\")\n    ",
      "args_schema": {
        "properties": {
          "input_path": {
            "title": "Input Path",
            "type": "string"
          },
          "output_path": {
            "title": "Output Path",
            "type": "string"
          },
          "filter_type": {
            "title": "Filter Type",
            "type": "string"
          }
        },
        "required": [
          "input_path",
          "output_path",
          "filter_type"
        ],
        "title": "apply_filterArguments",
        "type": "object"
      }
    },
    {
      "name": "detect_edges",
      "description": "Detects and highlights edges in an image using the Canny edge detection algorithm.\n\n    Args:\n        input_path (str): The path to the source image file.\n        output_path (str): The path to save the resulting edge-detected image.\n        threshold1 (float): The first (lower) threshold for the hysteresis procedure.\n        threshold2 (float): The second (higher) threshold for the hysteresis procedure.\n\n    Returns:\n        str: A JSON string with a confirmation message indicating the path of the newly created edge-map image, or an error message.\n\n    Example:\n        detect_edges(input_path=\"input/building.jpg\", output_path=\"output/building_edges.jpg\", threshold1=100.0, threshold2=200.0)\n    ",
      "args_schema": {
        "properties": {
          "input_path": {
            "title": "Input Path",
            "type": "string"
          },
          "output_path": {
            "title": "Output Path",
            "type": "string"
          },
          "threshold1": {
            "title": "Threshold1",
            "type": "number"
          },
          "threshold2": {
            "title": "Threshold2",
            "type": "number"
          }
        },
        "required": [
          "input_path",
          "output_path",
          "threshold1",
          "threshold2"
        ],
        "title": "detect_edgesArguments",
        "type": "object"
      }
    },
    {
      "name": "apply_threshold",
      "description": "Applies a fixed-level binary threshold to a grayscale image.\n\n    Args:\n        input_path (str): The path to the source image file (will be converted to grayscale).\n        output_path (str): The path to save the thresholded image.\n        threshold_value (float): The pixel intensity value used as the threshold.\n        max_value (float): The value assigned to pixels that exceed the threshold (e.g., 255 for white).\n\n    Returns:\n        str: A JSON string with a confirmation message indicating the path of the newly created thresholded image, or an error message.\n\n    Example:\n        apply_threshold(input_path=\"input/text.png\", output_path=\"output/text_binary.png\", threshold_value=127.0, max_value=255.0)\n    ",
      "args_schema": {
        "properties": {
          "input_path": {
            "title": "Input Path",
            "type": "string"
          },
          "output_path": {
            "title": "Output Path",
            "type": "string"
          },
          "threshold_value": {
            "title": "Threshold Value",
            "type": "number"
          },
          "max_value": {
            "title": "Max Value",
            "type": "number"
          }
        },
        "required": [
          "input_path",
          "output_path",
          "threshold_value",
          "max_value"
        ],
        "title": "apply_thresholdArguments",
        "type": "object"
      }
    },
    {
      "name": "detect_contours",
      "description": "Finds the contours of objects in a binary image and draws them onto a new image.\n\n    Args:\n        input_path (str): The path to the source image file.\n        output_path (str): The path to save the image with contours drawn on it.\n\n    Returns:\n        str: A JSON string with a confirmation message and the number of contours found, or an error message.\n\n    Example:\n        detect_contours(input_path=\"input/shapes.png\", output_path=\"output/shapes_contours.png\")\n    ",
      "args_schema": {
        "properties": {
          "input_path": {
            "title": "Input Path",
            "type": "string"
          },
          "output_path": {
            "title": "Output Path",
            "type": "string"
          }
        },
        "required": [
          "input_path",
          "output_path"
        ],
        "title": "detect_contoursArguments",
        "type": "object"
      }
    },
    {
      "name": "find_shapes",
      "description": "A simplified shape detection tool that identifies and counts circles and rectangles in an image.\n\n    Args:\n        input_path (str): The path to the source image file.\n        output_path (str): The path to save the image with detected shapes drawn on it.\n\n    Returns:\n        str: A JSON string with a message and counts of detected circles and rectangles, or an error message.\n\n    Example:\n        find_shapes(input_path=\"input/geometry.jpg\", output_path=\"output/geometry_detected.jpg\")\n    ",
      "args_schema": {
        "properties": {
          "input_path": {
            "title": "Input Path",
            "type": "string"
          },
          "output_path": {
            "title": "Output Path",
            "type": "string"
          }
        },
        "required": [
          "input_path",
          "output_path"
        ],
        "title": "find_shapesArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "save_image": [
      {
        "case_name": "Basic Image Save",
        "purpose": "验证工具可以成功将图像从源路径保存到目标路径",
        "args": {
          "source_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.png",
          "destination_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\nature_copy.jpg"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.png\"}"
        },
        "execution_time": 0.004999637603759766,
        "is_functional_test": true
      },
      {
        "case_name": "Image Format Conversion",
        "purpose": "验证工具可以将图像从一种格式转换为另一种格式并保存",
        "args": {
          "source_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "destination_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\xue_converted.png"
        },
        "response": {
          "result": "{\"message\": \"Image successfully saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\xue_converted.png\"}"
        },
        "execution_time": 0.3080580234527588,
        "is_functional_test": true
      },
      {
        "case_name": "Hidden File Save Attempt",
        "purpose": "验证工具可以处理隐藏文件的保存操作",
        "args": {
          "source_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_file.txt",
          "destination_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\.hidden_file_copy.txt"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.hidden_file.txt\"}"
        },
        "execution_time": 0.005000114440917969,
        "is_functional_test": true
      },
      {
        "case_name": "Special Characters in Paths",
        "purpose": "验证工具可以处理包含特殊字符的文件路径",
        "args": {
          "source_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$.txt",
          "destination_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\special@#$_copy.txt"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@#$.txt\"}"
        },
        "execution_time": 0.0045261383056640625,
        "is_functional_test": true
      },
      {
        "case_name": "Source File Not Found",
        "purpose": "验证工具在源文件不存在时能正确返回错误信息",
        "args": {
          "source_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.png",
          "destination_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\nonexistent_copy.png"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.png\"}"
        },
        "execution_time": 0.006999492645263672,
        "is_functional_test": false
      },
      {
        "case_name": "Write to Read-Only Directory",
        "purpose": "验证工具在目标目录不可写时能正确处理",
        "args": {
          "source_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.png",
          "destination_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\readonly-check\\readonly_output.png"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.png\"}"
        },
        "execution_time": 0.003998756408691406,
        "is_functional_test": false
      },
      {
        "case_name": "Overwrite Existing File",
        "purpose": "验证工具可以覆盖已存在的目标文件",
        "args": {
          "source_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.png",
          "destination_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\xue.png"
        },
        "response": {
          "result": "{\"message\": \"Image successfully saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\xue.png\"}"
        },
        "execution_time": 0.37992024421691895,
        "is_functional_test": true
      },
      {
        "case_name": "Long File Path Handling",
        "purpose": "验证工具可以处理长文件路径（边界测试）",
        "args": {
          "source_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\refs\\heads\\feature\\中文_branch\\long_file_name_1234567890123456789012345678901234567890.png",
          "destination_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\long_file_name_1234567890123456789012345678901234567890_copy.png"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\refs\\\\heads\\\\feature\\\\\\u4e2d\\u6587_branch\\\\long_file_name_1234567890123456789012345678901234567890.png\"}"
        },
        "execution_time": 0.005003690719604492,
        "is_functional_test": true
      }
    ],
    "get_image_stats": [
      {
        "case_name": "Basic Image Stats Retrieval",
        "purpose": "验证工具可以成功获取图像的基本统计信息，包括宽度、高度和通道数",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.png"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.png\"}"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": true
      },
      {
        "case_name": "Image Format Variation Test",
        "purpose": "验证工具能够处理不同格式的图像文件并正确返回统计信息",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg"
        },
        "response": {
          "result": "{\"width\": 3568, \"height\": 2416, \"channels\": 3}"
        },
        "execution_time": 0.05504965782165527,
        "is_functional_test": true
      },
      {
        "case_name": "Non-Existent File Path",
        "purpose": "验证工具在指定路径不存在时能正确返回错误信息",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.jpg"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.jpg\"}"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": false
      },
      {
        "case_name": "Hidden File Attempt",
        "purpose": "验证工具是否能正确处理隐藏文件的统计请求",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_file.txt"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.hidden_file.txt\"}"
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Input Path",
        "purpose": "验证工具是否能正确处理包含特殊字符的输入路径",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$.txt"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@#$.txt\"}"
        },
        "execution_time": 0.007002830505371094,
        "is_functional_test": false
      },
      {
        "case_name": "Read-Only Directory Input",
        "purpose": "验证工具能否从只读目录中读取图像并获取统计信息",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\readonly-check\\readonly_file.txt"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\readonly-check\\\\readonly_file.txt\"}"
        },
        "execution_time": 0.005000591278076172,
        "is_functional_test": false
      },
      {
        "case_name": "Long File Path Handling",
        "purpose": "验证工具能否处理长文件路径并正确获取图像统计信息",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\refs\\heads\\feature\\中文_branch\\long_file_name_1234567890123456789012345678901234567890.png"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\refs\\\\heads\\\\feature\\\\\\u4e2d\\u6587_branch\\\\long_file_name_1234567890123456789012345678901234567890.png\"}"
        },
        "execution_time": 0.005004405975341797,
        "is_functional_test": true
      },
      {
        "case_name": "Non-Image File Attempt",
        "purpose": "验证工具能否检测到非图像文件并返回相应错误",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_test.txt"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_test.txt\"}"
        },
        "execution_time": 0.008001089096069336,
        "is_functional_test": false
      }
    ],
    "resize_image": [
      {
        "case_name": "Basic Image Resize",
        "purpose": "验证工具可以成功将图像从源路径调整尺寸并保存到目标路径",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\nature_resized.jpg",
          "width": 800,
          "height": 600
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.png\"}"
        },
        "execution_time": 0.0059986114501953125,
        "is_functional_test": true
      },
      {
        "case_name": "Resize and Format Conversion",
        "purpose": "验证工具在调整图像尺寸的同时可以转换图像格式并保存",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\xue_resized.png",
          "width": 1024,
          "height": 768
        },
        "response": {
          "result": "{\"message\": \"Image resized and saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\xue_resized.png\"}"
        },
        "execution_time": 0.09003019332885742,
        "is_functional_test": true
      },
      {
        "case_name": "Hidden File Resize Attempt",
        "purpose": "验证工具是否能处理隐藏文件的调整尺寸操作",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_file.txt",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\.hidden_resized.txt",
          "width": 300,
          "height": 200
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.hidden_file.txt\"}"
        },
        "execution_time": 0.0050048828125,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Paths",
        "purpose": "验证工具是否能处理包含特殊字符的输入和输出路径进行图像缩放",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$.txt",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\special_resized@#$.jpg",
          "width": 500,
          "height": 500
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@#$.txt\"}"
        },
        "execution_time": 0.00600123405456543,
        "is_functional_test": false
      },
      {
        "case_name": "Source File Not Found",
        "purpose": "验证工具在源文件不存在时能正确返回错误信息",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\nonexistent_resized.jpg",
          "width": 800,
          "height": 600
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.png\"}"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": false
      },
      {
        "case_name": "Write to Read-Only Directory",
        "purpose": "验证工具在目标目录不可写时能正确处理并返回错误",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\readonly-check\\readonly_output.jpg",
          "width": 1024,
          "height": 768
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.png\"}"
        },
        "execution_time": 0.0060007572174072266,
        "is_functional_test": false
      },
      {
        "case_name": "Overwrite Existing File",
        "purpose": "验证工具可以覆盖已存在的目标文件进行图像缩放",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\xue_resized.jpg",
          "width": 640,
          "height": 480
        },
        "response": {
          "result": "{\"message\": \"Image resized and saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\xue_resized.jpg\"}"
        },
        "execution_time": 0.13443875312805176,
        "is_functional_test": true
      },
      {
        "case_name": "Long File Path Handling",
        "purpose": "验证工具可以处理长文件路径（边界测试）进行图像缩放",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\refs\\heads\\feature\\中文_branch\\long_file_name_1234567890123456789012345678901234567890.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\long_file_name_1234567890123456789012345678901234567890_resized.png",
          "width": 100,
          "height": 100
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\refs\\\\heads\\\\feature\\\\\\u4e2d\\u6587_branch\\\\long_file_name_1234567890123456789012345678901234567890.png\"}"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": true
      }
    ],
    "crop_image": [
      {
        "case_name": "Basic Image Crop",
        "purpose": "验证工具可以成功从图像中裁剪指定的矩形区域并保存",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\nature_cropped.png",
          "x": 100,
          "y": 150,
          "width": 300,
          "height": 200
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.png\"}"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": true
      },
      {
        "case_name": "Crop with Zero Coordinates",
        "purpose": "验证工具可以处理起始坐标为(0,0)的裁剪操作",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\xue_cropped_zero.png",
          "x": 0,
          "y": 0,
          "width": 200,
          "height": 150
        },
        "response": {
          "result": "{\"message\": \"Image cropped and saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\xue_cropped_zero.png\"}"
        },
        "execution_time": 0.058176517486572266,
        "is_functional_test": true
      },
      {
        "case_name": "Full Image Crop",
        "purpose": "验证工具可以正确裁剪整个图像（即裁剪区域等于图像尺寸）",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\xue_full_cropped.png",
          "x": 0,
          "y": 0,
          "width": 3568,
          "height": 2416
        },
        "response": {
          "result": "{\"message\": \"Image cropped and saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\xue_full_cropped.png\"}"
        },
        "execution_time": 0.3569052219390869,
        "is_functional_test": true
      },
      {
        "case_name": "Negative Coordinates Test",
        "purpose": "验证工具在裁剪区域使用负数坐标时是否能正确返回错误信息",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\negative_cropped.png",
          "x": -50,
          "y": 100,
          "width": 200,
          "height": 150
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.png\"}"
        },
        "execution_time": 0.00394129753112793,
        "is_functional_test": false
      },
      {
        "case_name": "Out of Bounds Crop",
        "purpose": "验证工具在裁剪区域超出图像边界时是否能正确处理或返回错误",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\out_of_bounds_cropped.png",
          "x": 3000,
          "y": 2000,
          "width": 500,
          "height": 400
        },
        "response": {
          "result": "{\"message\": \"Image cropped and saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\out_of_bounds_cropped.png\"}"
        },
        "execution_time": 0.05804705619812012,
        "is_functional_test": false
      },
      {
        "case_name": "Hidden File Crop Attempt",
        "purpose": "验证工具是否能正确处理隐藏文件的裁剪请求",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_file.txt",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\.hidden_cropped.png",
          "x": 0,
          "y": 0,
          "width": 100,
          "height": 100
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.hidden_file.txt\"}"
        },
        "execution_time": 0.006003141403198242,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Paths",
        "purpose": "验证工具可以处理包含特殊字符的输入和输出路径",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\cropped_@#$.png",
          "x": 10,
          "y": 10,
          "width": 100,
          "height": 100
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@#$.png\"}"
        },
        "execution_time": 0.004992961883544922,
        "is_functional_test": false
      },
      {
        "case_name": "Non-Image File Crop Attempt",
        "purpose": "验证工具是否能检测到非图像文件并返回相应错误",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_test.txt",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\nonimage_cropped.png",
          "x": 0,
          "y": 0,
          "width": 100,
          "height": 100
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_test.txt\"}"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": false
      }
    ],
    "apply_filter": [
      {
        "case_name": "Basic Blur Filter Application",
        "purpose": "验证工具可以成功应用 'blur' 滤镜并保存图像",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\xue_blurred.jpg",
          "filter_type": "blur"
        },
        "response": {
          "result": "{\"message\": \"Filter 'blur' applied and image saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\xue_blurred.jpg\"}"
        },
        "execution_time": 0.09151601791381836,
        "is_functional_test": true
      },
      {
        "case_name": "Grayscale Filter on PNG Image",
        "purpose": "验证工具可以成功将 'grayscale' 滤镜应用于 PNG 图像",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\nature_grayscale.png",
          "filter_type": "grayscale"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.png\"}"
        },
        "execution_time": 0.00499272346496582,
        "is_functional_test": true
      },
      {
        "case_name": "Sharpen Filter with Valid Input",
        "purpose": "验证工具可以正确应用 'sharpen' 滤镜并输出结果",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\xue_sharpened.png",
          "filter_type": "sharpen"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\xue.png\"}"
        },
        "execution_time": 0.004082202911376953,
        "is_functional_test": true
      },
      {
        "case_name": "Overwrite Existing Output File with Blur",
        "purpose": "验证工具在目标文件已存在时仍能覆盖写入滤镜处理后的图像",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\existing_output.jpg",
          "filter_type": "blur"
        },
        "response": {
          "result": "{\"message\": \"Filter 'blur' applied and image saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\existing_output.jpg\"}"
        },
        "execution_time": 0.10162472724914551,
        "is_functional_test": true
      },
      {
        "case_name": "Apply Filter to Non-Image File",
        "purpose": "验证工具对非图像文件（如文本文件）是否能正确返回错误信息",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_test.txt",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\non_image_filtered.txt",
          "filter_type": "grayscale"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_test.txt\"}"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Filter Type Handling",
        "purpose": "验证工具在提供非法 filter_type 参数时能否正确返回错误信息",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\invalid_filter_result.jpg",
          "filter_type": "invert"
        },
        "response": {
          "result": "{\"error\": \"Invalid filter_type. Supported filters are 'blur', 'grayscale', 'sharpen'.\"}"
        },
        "execution_time": 0.061000823974609375,
        "is_functional_test": false
      },
      {
        "case_name": "Input Path Does Not Exist",
        "purpose": "验证工具在输入路径不存在时能否正确报告错误",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\nonexistent_filtered.jpg",
          "filter_type": "sharpen"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.jpg\"}"
        },
        "execution_time": 0.008001327514648438,
        "is_functional_test": false
      },
      {
        "case_name": "Write to Read-Only Directory with Filter",
        "purpose": "验证工具在尝试将滤镜处理后的图像写入只读目录时是否能正确处理",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\readonly-check\\readonly_output.jpg",
          "filter_type": "blur"
        },
        "response": {
          "result": "{\"message\": \"Filter 'blur' applied and image saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\readonly-check\\\\readonly_output.jpg\"}"
        },
        "execution_time": 0.08633542060852051,
        "is_functional_test": false
      }
    ],
    "detect_edges": [
      {
        "case_name": "Basic Edge Detection",
        "purpose": "验证工具能够使用默认阈值对图像进行基本的边缘检测并成功保存结果",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\xue_edges.jpg",
          "threshold1": 100.0,
          "threshold2": 200.0
        },
        "response": {
          "result": "{\"message\": \"Edge detection complete. Image saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\xue_edges.jpg\"}"
        },
        "execution_time": 0.10247206687927246,
        "is_functional_test": true
      },
      {
        "case_name": "Edge Detection with Different Image Format",
        "purpose": "验证工具能够处理不同格式的图像文件并正确输出边缘图",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpeg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\nature_edges.png",
          "threshold1": 80.0,
          "threshold2": 160.0
        },
        "response": {
          "result": "{\"message\": \"Edge detection complete. Image saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\nature_edges.png\"}"
        },
        "execution_time": 0.01399850845336914,
        "is_functional_test": true
      },
      {
        "case_name": "Overwrite Existing Edge Map File",
        "purpose": "验证工具可以覆盖已存在的目标边缘图文件",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\existing_output.jpg",
          "threshold1": 120.0,
          "threshold2": 240.0
        },
        "response": {
          "result": "{\"message\": \"Edge detection complete. Image saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\existing_output.jpg\"}"
        },
        "execution_time": 0.10200071334838867,
        "is_functional_test": true
      },
      {
        "case_name": "Hidden Image File Edge Detection",
        "purpose": "验证工具是否能正确处理隐藏图像文件的边缘检测",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\readonly-check\\readonly_output.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\.hidden_edge_map.jpg",
          "threshold1": 100.0,
          "threshold2": 200.0
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\readonly-check\\\\readonly_output.jpg\"}"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": true
      },
      {
        "case_name": "Special Characters in Input and Output Paths",
        "purpose": "验证工具能否处理包含特殊字符的输入和输出路径",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\feature@branch#\\edge_image%.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\edge_result@#$.png",
          "threshold1": 90.0,
          "threshold2": 180.0
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\feature@branch#\\\\edge_image%.jpg\"}"
        },
        "execution_time": 0.006999492645263672,
        "is_functional_test": true
      },
      {
        "case_name": "Input File Not Found",
        "purpose": "验证当输入图像文件不存在时，工具是否能返回错误信息",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\nonexistent_edges.jpg",
          "threshold1": 100.0,
          "threshold2": 200.0
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.jpg\"}"
        },
        "execution_time": 0.0039980411529541016,
        "is_functional_test": false
      },
      {
        "case_name": "Write to Read-Only Directory",
        "purpose": "验证工具在目标目录不可写时是否能返回错误信息",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\readonly-check\\readonly_output.jpg",
          "threshold1": 100.0,
          "threshold2": 200.0
        },
        "response": {
          "result": "{\"message\": \"Edge detection complete. Image saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\readonly-check\\\\readonly_output.jpg\"}"
        },
        "execution_time": 0.10821223258972168,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Threshold Values",
        "purpose": "验证工具是否能正确处理无效的阈值参数（例如负数或非数值）",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\invalid_threshold_edges.jpg",
          "threshold1": -50.0,
          "threshold2": 300.0
        },
        "response": {
          "result": "{\"error\": \"Threshold values must be between 0 and 255.\"}"
        },
        "execution_time": 0.004000663757324219,
        "is_functional_test": false
      },
      {
        "case_name": "Long File Path Handling",
        "purpose": "验证工具能否处理长文件路径并正确执行边缘检测",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\refs\\heads\\feature\\中文_branch\\long_file_name_1234567890123456789012345678901234567890.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\long_file_name_1234567890123456789012345678901234567890_edges.jpg",
          "threshold1": 100.0,
          "threshold2": 200.0
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\refs\\\\heads\\\\feature\\\\\\u4e2d\\u6587_branch\\\\long_file_name_1234567890123456789012345678901234567890.png\"}"
        },
        "execution_time": 0.009000539779663086,
        "is_functional_test": true
      },
      {
        "case_name": "Non-Image File Attempt",
        "purpose": "验证工具是否能识别非图像文件并返回相应错误",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_write.txt",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\textfile_edges.jpg",
          "threshold1": 100.0,
          "threshold2": 200.0
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_write.txt\"}"
        },
        "execution_time": 0.007999181747436523,
        "is_functional_test": false
      }
    ],
    "apply_threshold": [
      {
        "case_name": "Basic Threshold Application",
        "purpose": "验证工具可以成功对灰度图像应用默认阈值并保存结果图像",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\xue_thresholded.png",
          "threshold_value": 127.0,
          "max_value": 255.0
        },
        "response": {
          "result": "{\"message\": \"Threshold applied. Image saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\xue_thresholded.png\"}"
        },
        "execution_time": 0.07868838310241699,
        "is_functional_test": true
      },
      {
        "case_name": "Custom Max Value Thresholding",
        "purpose": "验证工具能够使用自定义最大值进行二值化处理",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpeg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\nature_custom_max.png",
          "threshold_value": 100.0,
          "max_value": 128.0
        },
        "response": {
          "result": "{\"message\": \"Threshold applied. Image saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\nature_custom_max.png\"}"
        },
        "execution_time": 0.01200246810913086,
        "is_functional_test": true
      },
      {
        "case_name": "Input File Not Found",
        "purpose": "验证当输入文件不存在时，工具能返回适当的错误信息",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\nonexistent_thresholded.png",
          "threshold_value": 127.0,
          "max_value": 255.0
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.png\"}"
        },
        "execution_time": 0.005006551742553711,
        "is_functional_test": false
      },
      {
        "case_name": "Write to Read-Only Directory",
        "purpose": "验证工具在目标目录不可写时是否能正确处理",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\readonly-check\\readonly_output.png",
          "threshold_value": 127.0,
          "max_value": 255.0
        },
        "response": {
          "result": "{\"message\": \"Threshold applied. Image saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\readonly-check\\\\readonly_output.png\"}"
        },
        "execution_time": 0.07874369621276855,
        "is_functional_test": false
      },
      {
        "case_name": "Overwrite Existing File",
        "purpose": "验证工具可以覆盖已存在的输出文件",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\existing_output.jpg",
          "threshold_value": 150.0,
          "max_value": 255.0
        },
        "response": {
          "result": "{\"message\": \"Threshold applied. Image saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\existing_output.jpg\"}"
        },
        "execution_time": 0.07851457595825195,
        "is_functional_test": true
      },
      {
        "case_name": "Special Characters in Paths",
        "purpose": "验证工具是否能处理包含特殊字符的文件路径",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\refs\\heads\\feature\\中文_branch\\long_file_name_1234567890123456789012345678901234567890.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\special@#$_thresholded.png",
          "threshold_value": 127.0,
          "max_value": 255.0
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\refs\\\\heads\\\\feature\\\\\\u4e2d\\u6587_branch\\\\long_file_name_1234567890123456789012345678901234567890.png\"}"
        },
        "execution_time": 0.004026889801025391,
        "is_functional_test": true
      },
      {
        "case_name": "Minimum Threshold Value",
        "purpose": "验证最小阈值（0.0）的行为",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpeg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\min_threshold.png",
          "threshold_value": 0.0,
          "max_value": 255.0
        },
        "response": {
          "result": "{\"message\": \"Threshold applied. Image saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\min_threshold.png\"}"
        },
        "execution_time": 0.007973194122314453,
        "is_functional_test": true
      },
      {
        "case_name": "Maximum Threshold Value",
        "purpose": "验证最大阈值（255.0）的行为",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\max_threshold.png",
          "threshold_value": 255.0,
          "max_value": 255.0
        },
        "response": {
          "result": "{\"message\": \"Threshold applied. Image saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\max_threshold.png\"}"
        },
        "execution_time": 0.07403349876403809,
        "is_functional_test": true
      }
    ],
    "detect_contours": [
      {
        "case_name": "Basic Contour Detection",
        "purpose": "验证工具可以成功在二值图像上检测轮廓并保存结果图像",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\xue_contours.png"
        },
        "response": {
          "result": "{\"message\": \"Contours detected and drawn. Image saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\xue_contours.png\", \"contours_found\": 2282}"
        },
        "execution_time": 0.3103475570678711,
        "is_functional_test": true
      },
      {
        "case_name": "Contour Detection on JPEG Format",
        "purpose": "验证工具可以处理JPEG格式的输入图像并正确绘制轮廓",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpeg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\nature_contours.png"
        },
        "response": {
          "result": "{\"message\": \"Contours detected and drawn. Image saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\nature_contours.png\", \"contours_found\": 184}"
        },
        "execution_time": 0.02500152587890625,
        "is_functional_test": true
      },
      {
        "case_name": "Input File Not Found",
        "purpose": "验证工具在输入文件不存在时能返回错误信息",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\nonexistent_contours.png"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.png\"}"
        },
        "execution_time": 0.007000923156738281,
        "is_functional_test": false
      },
      {
        "case_name": "Write to Read-Only Directory",
        "purpose": "验证工具在目标目录不可写时能正确处理并返回错误",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\readonly-check\\readonly_output.png"
        },
        "response": {
          "result": "{\"message\": \"Contours detected and drawn. Image saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\readonly-check\\\\readonly_output.png\", \"contours_found\": 2282}"
        },
        "execution_time": 0.3139629364013672,
        "is_functional_test": false
      },
      {
        "case_name": "Hidden File Input Attempt",
        "purpose": "验证工具是否能正确处理隐藏文件作为输入的情况",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_file.txt",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\hidden_contours.png"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.hidden_file.txt\"}"
        },
        "execution_time": 0.004998683929443359,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Paths",
        "purpose": "验证工具是否能处理包含特殊字符的文件路径",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\special@#$_contours.png"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@#$.png\"}"
        },
        "execution_time": 0.008000373840332031,
        "is_functional_test": false
      },
      {
        "case_name": "Overwrite Existing Output File",
        "purpose": "验证工具可以覆盖已存在的目标文件",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\xue_contours.png"
        },
        "response": {
          "result": "{\"message\": \"Contours detected and drawn. Image saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\xue_contours.png\", \"contours_found\": 2282}"
        },
        "execution_time": 0.3141758441925049,
        "is_functional_test": true
      },
      {
        "case_name": "Long File Path Handling",
        "purpose": "验证工具能否处理长文件路径并正确执行轮廓检测",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\refs\\heads\\feature\\中文_branch\\long_file_name_1234567890123456789012345678901234567890.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\long_file_name_1234567890123456789012345678901234567890_contours.png"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\refs\\\\heads\\\\feature\\\\\\u4e2d\\u6587_branch\\\\long_file_name_1234567890123456789012345678901234567890.png\"}"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": true
      }
    ],
    "find_shapes": [
      {
        "case_name": "Basic Shape Detection",
        "purpose": "验证工具能够成功识别并计数图像中的圆形和矩形，并生成带绘制形状的输出图像",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\xue_shapes_detected.jpg"
        },
        "response": {
          "error": "Tool call 'find_shapes' was cancelled."
        },
        "execution_time": 50.012789487838745,
        "is_functional_test": true
      },
      {
        "case_name": "No Shapes in Image",
        "purpose": "验证当输入图像中没有可检测到的圆形或矩形时，工具能正确返回零计数结果",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpeg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\nature_no_shapes.jpg"
        },
        "response": {
          "error": "Tool call 'find_shapes' was cancelled."
        },
        "execution_time": 50.01429891586304,
        "is_functional_test": true
      },
      {
        "case_name": "Input File Not Found",
        "purpose": "验证工具在输入文件不存在时返回明确的错误信息",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\nonexistent_output.jpg"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.jpg\"}"
        },
        "execution_time": 8.016126155853271,
        "is_functional_test": false
      },
      {
        "case_name": "Read from Hidden File Attempt",
        "purpose": "验证工具是否能处理隐藏文件作为输入的情况",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\readonly-check\\readonly_output.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\hidden_file_result.jpg"
        },
        "response": {
          "result": "{\"error\": \"OpenCV(4.12.0) D:\\\\a\\\\opencv-python\\\\opencv-python\\\\opencv\\\\modules\\\\imgproc\\\\src\\\\color.simd_helpers.hpp:92: error: (-15:Bad number of channels) in function '__cdecl cv::impl::`anonymous-namespace'::CvtHelper<struct cv::impl::`anonymous namespace'::Set<3,4,-1>,struct cv::impl::A0x31bd3f7f::Set<1,-1,-1>,struct cv::impl::A0x31bd3f7f::Set<0,2,5>,4>::CvtHelper(const class cv::_InputArray &,const class cv::_OutputArray &,int)'\\n> Invalid number of channels in input image:\\n>     'VScn::contains(scn)'\\n> where\\n>     'scn' is 1\\n\"}"
        },
        "execution_time": 0.051189422607421875,
        "is_functional_test": false
      },
      {
        "case_name": "Write to Read-Only Directory",
        "purpose": "验证工具在目标目录不可写时能否优雅地处理错误",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\readonly-check\\readonly_output.png"
        },
        "response": {
          "error": "Tool call 'find_shapes' was cancelled."
        },
        "execution_time": 50.0023410320282,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Paths",
        "purpose": "验证工具是否能处理包含特殊字符的输入和输出路径",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\shape@#$_result.png"
        },
        "response": {
          "error": "Tool call 'find_shapes' was cancelled."
        },
        "execution_time": 50.006529331207275,
        "is_functional_test": true
      },
      {
        "case_name": "Long File Path Handling",
        "purpose": "验证工具是否能处理长文件路径进行形状检测（边界测试）",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\refs\\heads\\feature\\中文_branch\\long_file_name_1234567890123456789012345678901234567890.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\long_file_name_1234567890123456789012345678901234567890_detected.png"
        },
        "response": {
          "error": "Tool call 'find_shapes' was cancelled."
        },
        "execution_time": 50.044729471206665,
        "is_functional_test": false
      },
      {
        "case_name": "Non-Image File Input",
        "purpose": "验证工具对非图像文件输入是否能返回正确的错误信息",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer\\testSystem\\testFiles\\modules.xml",
          "output_path": "D:\\devWorkspace\\MCPServer\\testSystem\\testFiles\\output\\nonimage_result.json"
        },
        "response": {
          "error": "Tool call 'find_shapes' was cancelled."
        },
        "execution_time": 50.05450463294983,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 74
}