{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "qwen-plus-mcp_mongodb_manager",
  "server_path": "workspace/pipeline-output-servers/qwen-plus/mcp_mongodb_manager/refined/server.py",
  "timestamp": "2025-07-13T04:14:28.422355",
  "tools": [
    {
      "name": "mcp_list_databases",
      "description": "\n    Lists all available databases in the connected MongoDB instance.\n\n    Returns:\n        A JSON string containing a list of database names.\n\n    Example:\n        mcp_list_databases()\n        # Returns: {\"databases\": [\"admin\", \"config\", \"local\"]}\n    ",
      "args_schema": {
        "properties": {},
        "title": "mcp_list_databasesArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_list_collections",
      "description": "\n    Lists all collections within a specified database.\n\n    Args:\n        database_name: Name of the database.\n\n    Returns:\n        A JSON string containing a list of collection names within the specified database.\n\n    Example:\n        mcp_list_collections(database_name=\"test_db\")\n        # Returns: {\"collections\": [\"users\", \"products\"]}\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          }
        },
        "required": [
          "database_name"
        ],
        "title": "mcp_list_collectionsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_insert_document",
      "description": "\n    Inserts a new document into a specified database and collection.\n\n    Args:\n        database_name: Name of the database.\n        collection_name: Name of the collection.\n        document: Document data to insert.\n\n    Returns:\n        A JSON string containing the inserted document ID.\n\n    Example:\n        mcp_insert_document(database_name=\"test_db\", collection_name=\"users\", document={\"name\": \"John Doe\", \"age\": 30})\n        # Returns: {\"inserted_id\": \"60c72b2f54b9a1b4e3d5f8a1\"}\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "document": {
            "title": "Document",
            "type": "object"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "document"
        ],
        "title": "mcp_insert_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_find_documents",
      "description": "\n    Finds documents matching a query within a specified database and collection.\n\n    Args:\n        database_name: Name of the database.\n        collection_name: Name of the collection.\n        query: Query criteria.\n        projection: Fields to include or exclude (optional).\n        limit: Maximum number of results to return (optional).\n\n    Returns:\n        A JSON string containing a list of matching documents.\n\n    Example:\n        mcp_find_documents(database_name=\"test_db\", collection_name=\"users\", query={\"age\": {\"$gt\": 25}}, projection={\"name\": 1}, limit=10)\n        # Returns: {\"documents\": [{\"_id\": \"60c72b2f54b9a1b4e3d5f8a1\", \"name\": \"John Doe\"}]}\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "title": "Query",
            "type": "object"
          },
          "projection": {
            "default": null,
            "title": "Projection",
            "type": "object"
          },
          "limit": {
            "default": null,
            "title": "Limit",
            "type": "integer"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "query"
        ],
        "title": "mcp_find_documentsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_update_document",
      "description": "\n    Updates one or more documents within a specified database and collection.\n\n    Args:\n        database_name: Name of the database.\n        collection_name: Name of the collection.\n        filter_query: Criteria to select documents for update.\n        update_query: Update operations.\n        multi: If True, updates all matching documents; otherwise, only the first match.\n\n    Returns:\n        A JSON string containing the number of documents updated.\n\n    Example:\n        mcp_update_document(database_name=\"test_db\", collection_name=\"users\", filter_query={\"name\": \"John Doe\"}, update_query={\"age\": 31}, multi=True)\n        # Returns: {\"updated_count\": 5}\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "filter_query": {
            "title": "Filter Query",
            "type": "object"
          },
          "update_query": {
            "title": "Update Query",
            "type": "object"
          },
          "multi": {
            "default": false,
            "title": "Multi",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "filter_query",
          "update_query"
        ],
        "title": "mcp_update_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_delete_document",
      "description": "\n    Deletes one or more documents within a specified database and collection.\n\n    Args:\n        database_name: Name of the database.\n        collection_name: Name of the collection.\n        filter_query: Criteria to select documents for deletion.\n        multi: If True, deletes all matching documents; otherwise, only the first match.\n\n    Returns:\n        A JSON string containing the number of documents deleted.\n\n    Example:\n        mcp_delete_document(database_name=\"test_db\", collection_name=\"users\", filter_query={\"name\": \"John Doe\"}, multi=True)\n        # Returns: {\"deleted_count\": 5}\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "filter_query": {
            "title": "Filter Query",
            "type": "object"
          },
          "multi": {
            "default": false,
            "title": "Multi",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "filter_query"
        ],
        "title": "mcp_delete_documentArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "mcp_list_databases": [
      {
        "case_name": "Basic Database Listing",
        "purpose": "验证工具能够正确列出 MongoDB 实例中的所有数据库",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]}"
        },
        "execution_time": 0.015002727508544922,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Database Response Handling",
        "purpose": "验证当 MongoDB 返回空数据库列表时工具的处理能力",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]}"
        },
        "execution_time": 0.007000446319580078,
        "is_functional_test": true
      },
      {
        "case_name": "Database List Contains Special Characters",
        "purpose": "验证数据库名称中包含特殊字符时，工具是否能正常返回",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]}"
        },
        "execution_time": 0.009996652603149414,
        "is_functional_test": true
      },
      {
        "case_name": "Long Database Name Handling",
        "purpose": "验证工具是否能够处理包含超长名称的数据库",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]}"
        },
        "execution_time": 0.008028030395507812,
        "is_functional_test": true
      },
      {
        "case_name": "Hidden Database Visibility",
        "purpose": "验证隐藏或系统数据库（如 admin、local）是否被正确列出",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]}"
        },
        "execution_time": 0.009974241256713867,
        "is_functional_test": true
      },
      {
        "case_name": "Security - No Unauthorized Access Attempt",
        "purpose": "验证工具不会尝试进行未经授权的数据库访问操作",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]}"
        },
        "execution_time": 0.011002302169799805,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - MongoDB Connection Failure",
        "purpose": "验证当 MongoDB 连接失败时，工具是否能优雅地处理错误",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]}"
        },
        "execution_time": 0.005999565124511719,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Empty Response",
        "purpose": "验证工具在 MongoDB 返回空响应时的行为",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]}"
        },
        "execution_time": 0.010996103286743164,
        "is_functional_test": false
      }
    ],
    "mcp_list_collections": [
      {
        "case_name": "Basic Collection Listing",
        "purpose": "验证工具能够正确列出指定数据库中的所有集合",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "{\"collections\": [\"a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\", \"new_collection\", \"test_collection\", \"empty_docs\", \"invalid/collection*name\", \"user_profiles\", \"long_key_collection\", \"test_collection'; DROP COLLECTION test_collection;--\", \"large_data\", \"special_chars_collection\", \"binary_data_collection\", \"nonexistent_collection\", \"a_very_long_collection_name_that_exceeds_normal_limits_and_might_cause_issues\", \"users\"]}"
        },
        "execution_time": 0.006475687026977539,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Database Handling",
        "purpose": "验证当指定的数据库中没有集合时，工具是否能正确返回空列表",
        "args": {
          "database_name": "empty_db"
        },
        "response": {
          "result": "{\"error\": \"Database 'empty_db' does not exist.\"}"
        },
        "execution_time": 0.00535273551940918,
        "is_functional_test": true
      },
      {
        "case_name": "Database With Special Characters in Name",
        "purpose": "验证数据库名称中包含特殊字符或Unicode字符时，工具是否能正常列出集合",
        "args": {
          "database_name": "db@#_\\u6d4b\\u8bd5"
        },
        "response": {
          "result": "{\"error\": \"Database 'db@#_\\\\u6d4b\\\\u8bd5' does not exist.\"}"
        },
        "execution_time": 0.01004648208618164,
        "is_functional_test": true
      },
      {
        "case_name": "Long Database Name Handling",
        "purpose": "验证工具是否能处理超长数据库名并正确列出其集合",
        "args": {
          "database_name": "\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5"
        },
        "response": {
          "result": "{\"error\": \"Database '\\\\u667a\\\\u80fd\\\\u8f6f\\\\u4ef6\\\\u5de5' does not exist.\"}"
        },
        "execution_time": 0.006748199462890625,
        "is_functional_test": true
      },
      {
        "case_name": "Hidden or System Database Visibility",
        "purpose": "验证系统数据库（如 admin、local）中的集合是否被正确列出",
        "args": {
          "database_name": "admin"
        },
        "response": {
          "result": "{\"collections\": [\"system.version\", \"system_logs\"]}"
        },
        "execution_time": 0.007848262786865234,
        "is_functional_test": true
      },
      {
        "case_name": "Security - Unauthorized Access Attempt",
        "purpose": "验证工具不会尝试访问无权限的数据库",
        "args": {
          "database_name": "restricted_db"
        },
        "response": {
          "result": "{\"collections\": [\"secure_collection\"]}"
        },
        "execution_time": 0.008005142211914062,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid Database Name",
        "purpose": "验证工具在传入无效数据库名称时是否能正确处理错误",
        "args": {
          "database_name": ""
        },
        "response": {
          "result": "{\"error\": \"Database '' does not exist.\"}"
        },
        "execution_time": 0.005704402923583984,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Non-Existent Database",
        "purpose": "验证工具在数据库不存在时是否能优雅地处理这种情况",
        "args": {
          "database_name": "does_not_exist_db"
        },
        "response": {
          "result": "{\"collections\": [\"new_collection\", \"test_collection\"]}"
        },
        "execution_time": 0.005005359649658203,
        "is_functional_test": false
      }
    ],
    "mcp_insert_document": [
      {
        "case_name": "Basic Document Insertion",
        "purpose": "验证工具能够将文档正确插入到指定数据库和集合中",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "document": {
            "name": "John Doe",
            "age": 30
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"6872c264cf57d11985b19216\"}"
        },
        "execution_time": 0.006000518798828125,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document with Special Characters in Database Name",
        "purpose": "验证当数据库名称包含特殊字符时，文档是否能成功插入",
        "args": {
          "database_name": "db@#_\\u6d4b\\u8bd5",
          "collection_name": "users",
          "document": {
            "username": "special_user"
          }
        },
        "response": {
          "result": "{\"error\": \"Database 'db@#_\\\\u6d4b\\\\u8bd5' does not exist.\"}"
        },
        "execution_time": 0.007001638412475586,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document into Non-Existent Collection",
        "purpose": "验证向不存在的集合中插入文档时的行为",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "document": {
            "key": "value"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"6872c264cf57d11985b19217\"}"
        },
        "execution_time": 0.005000114440917969,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document with Long Field Names",
        "purpose": "验证插入包含超长字段名的文档时的行为",
        "args": {
          "database_name": "test_db",
          "collection_name": "long_key_collection",
          "document": {
            "a_very_long_field_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it": "test_value"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"6872c264cf57d11985b19218\"}"
        },
        "execution_time": 0.005999565124511719,
        "is_functional_test": true
      },
      {
        "case_name": "Security - Unauthorized Database Access Attempt",
        "purpose": "验证尝试向无权限访问的数据库插入文档时的安全性处理",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "secure_collection",
          "document": {
            "sensitive_data": "confidential_info"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"6872c264cf57d11985b19219\"}"
        },
        "execution_time": 0.007999420166015625,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid Database Name",
        "purpose": "验证使用空字符串作为数据库名称时的错误处理",
        "args": {
          "database_name": "",
          "collection_name": "users",
          "document": {
            "name": "Test User"
          }
        },
        "response": {
          "result": "{\"error\": \"Database '' does not exist.\"}"
        },
        "execution_time": 0.007004261016845703,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid Collection Name",
        "purpose": "验证使用非法集合名称（如含特殊字符）插入文档时的错误处理",
        "args": {
          "database_name": "test_db",
          "collection_name": "invalid/collection*name",
          "document": {
            "key": "value"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"6872c264cf57d11985b1921a\"}"
        },
        "execution_time": 0.00499725341796875,
        "is_functional_test": false
      }
    ],
    "mcp_find_documents": [
      {
        "case_name": "Basic Document Search",
        "purpose": "验证工具能够使用基本查询在指定数据库和集合中正确检索文档",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "age": {
              "$gt": 25
            }
          }
        },
        "response": {
          "result": "{\"documents\": [{\"_id\": \"6872bc93b11f255c82054b2a\", \"name\": \"John\", \"age\": 35}, {\"_id\": \"6872c264cf57d11985b19216\", \"name\": \"John Doe\", \"age\": 30}]}"
        },
        "execution_time": 0.005000114440917969,
        "is_functional_test": true
      },
      {
        "case_name": "Document Search With Projection",
        "purpose": "验证工具能够使用投影参数控制返回字段",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "age": {
              "$gt": 25
            }
          },
          "projection": {
            "name": 1,
            "_id": 0
          }
        },
        "response": {
          "result": "{\"error\": \"'_id'\"}"
        },
        "execution_time": 0.0050008296966552734,
        "is_functional_test": true
      },
      {
        "case_name": "Document Search With Limit",
        "purpose": "验证工具能够通过limit参数限制返回结果数量",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "age": {
              "$gt": 25
            }
          },
          "limit": 5
        },
        "response": {
          "result": "{\"documents\": [{\"_id\": \"6872bc93b11f255c82054b2a\", \"name\": \"John\", \"age\": 35}, {\"_id\": \"6872c264cf57d11985b19216\", \"name\": \"John Doe\", \"age\": 30}]}"
        },
        "execution_time": 0.00799870491027832,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Query Returns All Documents",
        "purpose": "验证空查询条件会返回集合中的所有文档",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {}
        },
        "response": {
          "result": "{\"documents\": [{\"_id\": \"6872ad03424cddc98ebe1c08\", \"name\": \"Alice\", \"age\": 25}, {\"_id\": \"6872ad03424cddc98ebe1c0b\"}, {\"_id\": \"6872bc93b11f255c82054b2a\", \"name\": \"John\", \"age\": 35}, {\"_id\": \"6872bc93b11f255c82054b2c\", \"user@name\": \"Eve\", \"age#\": 28}, {\"_id\": \"6872bc93b11f255c82054b2d\", \"a_very_long_key_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\": \"value\"}, {\"_id\": \"6872bc93b11f255c82054b2e\", \"name\": \"Invalid\", \"age\": \"thirty\"}, {\"_id\": \"6872c264cf57d11985b19216\", \"name\": \"John Doe\", \"age\": 30}]}"
        },
        "execution_time": 0.00999903678894043,
        "is_functional_test": true
      },
      {
        "case_name": "Security - Unauthorized Database Access Attempt",
        "purpose": "验证工具是否能阻止对无权限数据库的访问尝试",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "secure_collection",
          "query": {
            "user": "admin"
          }
        },
        "response": {
          "result": "{\"documents\": []}"
        },
        "execution_time": 0.004998683929443359,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Database Name Handling",
        "purpose": "验证工具是否能正确处理无效数据库名称的情况",
        "args": {
          "database_name": "",
          "collection_name": "users",
          "query": {
            "age": {
              "$gt": 25
            }
          }
        },
        "response": {
          "result": "{\"error\": \"Database '' does not exist.\"}"
        },
        "execution_time": 0.00500035285949707,
        "is_functional_test": false
      },
      {
        "case_name": "Non-Existent Collection Handling",
        "purpose": "验证工具是否能优雅处理不存在的集合情况",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "query": {
            "age": {
              "$gt": 25
            }
          }
        },
        "response": {
          "result": "{\"documents\": [{\"_id\": \"6872ad03424cddc98ebe1c09\", \"name\": \"Bob\", \"age\": 30}, {\"_id\": \"6872bc93b11f255c82054b2b\", \"name\": \"Charlie\", \"age\": 35}]}"
        },
        "execution_time": 0.00800013542175293,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Query",
        "purpose": "验证工具是否能正确处理包含特殊字符的查询条件",
        "args": {
          "database_name": "test_db",
          "collection_name": "special_chars_collection",
          "query": {
            "username": "@#$_user123"
          }
        },
        "response": {
          "result": "{\"documents\": []}"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": true
      }
    ],
    "mcp_update_document": [
      {
        "case_name": "Basic Document Update",
        "purpose": "验证工具能够成功更新数据库中匹配的文档",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "name": "John Doe"
          },
          "update_query": {
            "age": 31
          },
          "multi": true
        },
        "response": {
          "result": "{\"updated_count\": 1}"
        },
        "execution_time": 0.005005359649658203,
        "is_functional_test": true
      },
      {
        "case_name": "Single Document Update",
        "purpose": "验证当 multi 参数为 False 时，仅更新第一个匹配的文档",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "status": "active"
          },
          "update_query": {
            "status": "inactive"
          },
          "multi": false
        },
        "response": {
          "result": "{\"updated_count\": 0}"
        },
        "execution_time": 0.0050008296966552734,
        "is_functional_test": true
      },
      {
        "case_name": "Update With Special Characters in Query",
        "purpose": "验证包含特殊字符的 filter_query 和 update_query 是否能正确执行",
        "args": {
          "database_name": "test_db",
          "collection_name": "special_chars_collection",
          "filter_query": {
            "username": "user@#_测试"
          },
          "update_query": {
            "email": "new_email@example.com"
          },
          "multi": true
        },
        "response": {
          "result": "{\"updated_count\": 0}"
        },
        "execution_time": 0.012000322341918945,
        "is_functional_test": true
      },
      {
        "case_name": "Update Non-Existent Database",
        "purpose": "验证在指定数据库不存在时工具是否能优雅处理错误",
        "args": {
          "database_name": "does_not_exist_db",
          "collection_name": "users",
          "filter_query": {
            "name": "John Doe"
          },
          "update_query": {
            "age": 32
          },
          "multi": true
        },
        "response": {
          "result": "{\"error\": \"Collection 'users' does not exist in database 'does_not_exist_db'.\"}"
        },
        "execution_time": 0.005992412567138672,
        "is_functional_test": false
      },
      {
        "case_name": "Update Invalid Collection Name",
        "purpose": "验证集合名称无效时工具是否能正确报错",
        "args": {
          "database_name": "test_db",
          "collection_name": "invalid/collection*name",
          "filter_query": {
            "name": "John Doe"
          },
          "update_query": {
            "age": 33
          },
          "multi": true
        },
        "response": {
          "result": "{\"updated_count\": 1}"
        },
        "execution_time": 0.006001949310302734,
        "is_functional_test": false
      },
      {
        "case_name": "Security - Unauthorized Database Access Attempt",
        "purpose": "验证工具是否拒绝尝试修改无权限访问的数据库",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "secure_collection",
          "filter_query": {
            "secret_key": "classified"
          },
          "update_query": {
            "access_level": 0
          },
          "multi": true
        },
        "response": {
          "result": "{\"updated_count\": 0}"
        },
        "execution_time": 0.0069997310638427734,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Large Update Query",
        "purpose": "验证超长更新操作是否能被正确处理",
        "args": {
          "database_name": "test_db",
          "collection_name": "large_data",
          "filter_query": {
            "id": 1234567890
          },
          "update_query": {
            "data": "a_very_long_string_that_may_exceed_normal_limits_and_cause_issues_repeat_repeat_repeat"
          },
          "multi": true
        },
        "response": {
          "result": "{\"updated_count\": 0}"
        },
        "execution_time": 0.005001068115234375,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Filter Query Handling",
        "purpose": "验证空筛选条件是否导致更新所有文档（如果允许）",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {},
          "update_query": {
            "last_modified": "2023-10-01"
          },
          "multi": true
        },
        "response": {
          "result": "{\"updated_count\": 7}"
        },
        "execution_time": 0.007998228073120117,
        "is_functional_test": true
      }
    ],
    "mcp_delete_document": [
      {
        "case_name": "Basic Document Deletion",
        "purpose": "验证使用基本参数删除单个文档的功能是否正常工作",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "name": "John Doe"
          },
          "multi": false
        },
        "response": {
          "result": "{\"deleted_count\": 1}"
        },
        "execution_time": 0.0060346126556396484,
        "is_functional_test": true
      },
      {
        "case_name": "Multi Document Deletion",
        "purpose": "验证启用 multi=True 参数时能够删除所有匹配的文档",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "status": "inactive"
          },
          "multi": true
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.007999420166015625,
        "is_functional_test": true
      },
      {
        "case_name": "Delete With Default Multi Parameter",
        "purpose": "验证未指定 multi 参数时，默认只删除第一个匹配项",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "role": "guest"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.0049173831939697266,
        "is_functional_test": true
      },
      {
        "case_name": "Delete From Collection With Special Characters",
        "purpose": "验证集合名称包含特殊字符时删除操作仍能正常执行",
        "args": {
          "database_name": "test_db",
          "collection_name": "special_chars_collection",
          "filter_query": {
            "id": "12345"
          },
          "multi": true
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.007957696914672852,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Non-Existent Document",
        "purpose": "验证尝试删除不存在的文档时返回正确的结果（0 删除）",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "name": "Nonexistent User"
          },
          "multi": true
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.004998207092285156,
        "is_functional_test": true
      },
      {
        "case_name": "Security - Delete From Restricted Database",
        "purpose": "验证工具无法对受限数据库执行删除操作以防止未经授权访问",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "secure_collection",
          "filter_query": {
            "key": "secret"
          },
          "multi": false
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.00803685188293457,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid Database Name",
        "purpose": "验证传入空或无效数据库名时能否正确处理错误",
        "args": {
          "database_name": "",
          "collection_name": "users",
          "filter_query": {
            "name": "John Doe"
          },
          "multi": false
        },
        "response": {
          "result": "{\"error\": \"Database '' does not exist.\"}"
        },
        "execution_time": 0.0049664974212646484,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Long Filter Query",
        "purpose": "验证当 filter_query 非常长时删除操作是否仍然有效",
        "args": {
          "database_name": "test_db",
          "collection_name": "long_key_collection",
          "filter_query": {
            "very_long_key_1234567890123456789012345678901234567890": "value"
          },
          "multi": true
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.006001949310302734,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 47
}