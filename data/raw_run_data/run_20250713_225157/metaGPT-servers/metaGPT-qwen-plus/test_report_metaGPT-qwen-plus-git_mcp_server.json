{
  "server_name": "git_mcp_server",
  "parent_dir": "metaGPT-qwen-plus",
  "report_name": "metaGPT-qwen-plus-git_mcp_server",
  "server_path": "workspace\\metaGPT-servers\\metaGPT-qwen-plus\\git_mcp_server.py",
  "timestamp": "2025-07-13T22:52:00.010058",
  "tools": [
    {
      "name": "git_init",
      "description": "Initialize a new Git repository.\n\n    Args:\n        path: The directory path where to create the repository.\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_initArguments",
        "type": "object"
      }
    },
    {
      "name": "git_status",
      "description": "Get the status of a Git repository.\n\n    Args:\n        path: Path to the repository.\n\n    Returns:\n        A string containing the status output.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_statusArguments",
        "type": "object"
      }
    },
    {
      "name": "git_add",
      "description": "Add files to the staging area.\n\n    Args:\n        path: Path to the repository.\n        file_pattern: Pattern of files to add (default is all files).\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "file_pattern": {
            "default": ".",
            "title": "File Pattern",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_addArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_unstaged",
      "description": "Show differences in unstaged changes.\n\n    Args:\n        path: Path to the repository.\n\n    Returns:\n        A string containing the diff output.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_diff_unstagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_staged",
      "description": "Show differences in staged changes.\n\n    Args:\n        path: Path to the repository.\n\n    Returns:\n        A string containing the diff output.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_diff_stagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff",
      "description": "Compare two commits or branches.\n\n    Args:\n        path: Path to the repository.\n        commit_range: Range of commits to compare (e.g., 'HEAD~2..HEAD').\n\n    Returns:\n        A string containing the diff output.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "commit_range": {
            "title": "Commit Range",
            "type": "string"
          }
        },
        "required": [
          "path",
          "commit_range"
        ],
        "title": "git_diffArguments",
        "type": "object"
      }
    },
    {
      "name": "git_commit",
      "description": "Commit changes in the repository.\n\n    Args:\n        path: Path to the repository.\n        message: Commit message.\n        author: Optional author name and email (format: 'Name <email>').\n\n    Returns:\n        A string containing the commit hash.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "message": {
            "title": "Message",
            "type": "string"
          },
          "author": {
            "default": null,
            "title": "Author",
            "type": "string"
          }
        },
        "required": [
          "path",
          "message"
        ],
        "title": "git_commitArguments",
        "type": "object"
      }
    },
    {
      "name": "git_reset",
      "description": "Unstage changes in the repository.\n\n    Args:\n        path: Path to the repository.\n        file_path: Optional specific file to unstage. If None, unstages all.\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "file_path": {
            "default": null,
            "title": "File Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_resetArguments",
        "type": "object"
      }
    },
    {
      "name": "git_log",
      "description": "View commit history.\n\n    Args:\n        path: Path to the repository.\n        max_count: Maximum number of commits to show (default: 10).\n\n    Returns:\n        A string containing the commit history.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "max_count": {
            "default": 10,
            "title": "Max Count",
            "type": "integer"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_logArguments",
        "type": "object"
      }
    },
    {
      "name": "git_create_branch",
      "description": "Create a new branch.\n\n    Args:\n        path: Path to the repository.\n        branch_name: Name of the new branch.\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "path",
          "branch_name"
        ],
        "title": "git_create_branchArguments",
        "type": "object"
      }
    },
    {
      "name": "git_checkout",
      "description": "Switch to a different branch.\n\n    Args:\n        path: Path to the repository.\n        branch_name: Name of the branch to switch to.\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "path",
          "branch_name"
        ],
        "title": "git_checkoutArguments",
        "type": "object"
      }
    },
    {
      "name": "git_show",
      "description": "Display details of a specific commit.\n\n    Args:\n        path: Path to the repository.\n        commit_hash: Hash of the commit to show.\n\n    Returns:\n        A string containing the commit details.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "commit_hash": {
            "title": "Commit Hash",
            "type": "string"
          }
        },
        "required": [
          "path",
          "commit_hash"
        ],
        "title": "git_showArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "git_init": [
      {
        "case_name": "Initialize Git Repository in Valid Directory",
        "purpose": "验证工具可以在有效目录中成功初始化一个新的 Git 仓库",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.16462039947509766,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Initialize Git Repository in Invalid Path",
        "purpose": "测试当提供无效路径时，工具是否抛出 ValueError 异常",
        "args": {
          "path": "D:\\invalid\\nonexistent\\directory"
        },
        "response": {
          "result": "Repository initialized at D:\\invalid\\nonexistent\\directory"
        },
        "execution_time": 0.14912033081054688,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository with Special Characters in Path",
        "purpose": "验证工具能否处理包含特殊字符的路径",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test!@#$%^&*()Files"
        },
        "response": {
          "error": "ToolException: Error executing tool git_init: Cmd('git') failed due to: exit code(1)\n  cmdline: git init\n  stderr: 'Failed to initialize repository: [WinError 123] 文件名、目录名或卷标语法不正确。: 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\test!@#$%^&*()Files''"
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Initialization Without Write Permissions",
        "purpose": "模拟无写权限的目录，验证工具是否能优雅处理错误",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\rule1.pdf"
        },
        "response": {
          "error": "ToolException: Error executing tool git_init: Cmd('git') failed due to: exit code(1)\n  cmdline: git init\n  stderr: 'Failed to initialize repository: Cmd('git') not found due to: NotADirectoryError('[WinError 267] 目录名称无效。')\n  cmdline: git init'"
        },
        "execution_time": 0.005509614944458008,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository in Empty Directory",
        "purpose": "验证在空目录中初始化 Git 仓库的功能",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.20612001419067383,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository in Directory With Files",
        "purpose": "验证在已有文件的目录中初始化 Git 仓库是否正常",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.22003388404846191,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt Git Init on System Critical Path",
        "purpose": "验证工具是否阻止在系统关键路径上初始化 Git 仓库（如 C:\\Windows）",
        "args": {
          "path": "C:\\Windows"
        },
        "response": {
          "error": "ToolException: Error executing tool git_init: Cmd('git') failed due to: exit code(1)\n  cmdline: git init\n  stderr: 'Failed to initialize repository: Cmd('git') failed due to: exit code(1)\n  cmdline: git init\n  stderr: 'C:/Windows/.git: Permission denied''"
        },
        "execution_time": 0.18259024620056152,
        "is_functional_test": false
      }
    ],
    "git_status": [
      {
        "case_name": "Get Status of Initialized Git Repository",
        "purpose": "验证工具可以成功获取已初始化 Git 仓库的状态信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tapp.ico\n\tmodules.xml\n\tnature.jpeg\n\tnonname.html\n\toutput/\n\tpaper1.pdf\n\tpresent.html\n\tre2.doc\n\treadonly_output/\n\trule1.pdf\n\tswe.pptx\n\ttest_mskanji.csv\n\txue.jpg\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.1711897850036621,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Get Status with Invalid Path",
        "purpose": "测试当提供无效路径时，工具是否抛出 ValueError 异常",
        "args": {
          "path": "D:\\invalid\\nonexistent\\directory"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)"
        },
        "execution_time": 0.145965576171875,
        "is_functional_test": false
      },
      {
        "case_name": "Get Status of Empty Git Repository",
        "purpose": "验证在空的 Git 仓库中获取状态信息是否正常（无修改、分支等）",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tapp.ico\n\tmodules.xml\n\tnature.jpeg\n\tnonname.html\n\toutput/\n\tpaper1.pdf\n\tpresent.html\n\tre2.doc\n\treadonly_output/\n\trule1.pdf\n\tswe.pptx\n\ttest_mskanji.csv\n\txue.jpg\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.14505362510681152,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt Get Status on System Critical Path",
        "purpose": "验证工具是否阻止对系统关键路径执行 git status 操作（如 C:\\Windows）",
        "args": {
          "path": "C:\\Windows"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: Invalid repository path: C:\\Windows"
        },
        "execution_time": 0.003769397735595703,
        "is_functional_test": false
      },
      {
        "case_name": "Get Status with Special Characters in Path",
        "purpose": "验证工具能否处理包含特殊字符的路径下的 Git 状态查询",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test!@#$%^&*()Files"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test!@#$%^&*()Files"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Get Status When Not a Git Repository",
        "purpose": "测试在一个未初始化为 Git 仓库的目录中调用 git status 是否能正确抛出异常",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\rule1.pdf"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\rule1.pdf"
        },
        "execution_time": 0.007004976272583008,
        "is_functional_test": false
      },
      {
        "case_name": "Get Status of Repository With Modified Files",
        "purpose": "验证工具能够正确返回包含已修改文件的仓库状态信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tapp.ico\n\tmodules.xml\n\tnature.jpeg\n\tnonname.html\n\toutput/\n\tpaper1.pdf\n\tpresent.html\n\tre2.doc\n\treadonly_output/\n\trule1.pdf\n\tswe.pptx\n\ttest_mskanji.csv\n\txue.jpg\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.14570260047912598,
        "is_functional_test": true
      },
      {
        "case_name": "Get Status of Repository With Untracked Files",
        "purpose": "验证工具能够正确识别并返回包含未跟踪文件的仓库状态信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tapp.ico\n\tmodules.xml\n\tnature.jpeg\n\tnonname.html\n\toutput/\n\tpaper1.pdf\n\tpresent.html\n\tre2.doc\n\treadonly_output/\n\trule1.pdf\n\tswe.pptx\n\ttest_mskanji.csv\n\txue.jpg\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.16379737854003906,
        "is_functional_test": true
      }
    ],
    "git_add": [
      {
        "case_name": "Add All Files to Staging Area",
        "purpose": "验证在有效 Git 仓库路径中，使用默认参数将所有文件添加到暂存区的功能",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Added '.' to staging area in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.5434372425079346,
        "is_functional_test": true
      },
      {
        "case_name": "Add Specific File Pattern to Staging Area",
        "purpose": "验证可以使用文件模式匹配将特定类型文件添加到暂存区（如 .txt 文件）",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_pattern": "*.pdf"
        },
        "response": {
          "result": "Added '*.pdf' to staging area in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.17806434631347656,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Add Files with Invalid Path",
        "purpose": "测试当提供无效路径时，工具是否抛出 ValueError 异常",
        "args": {
          "path": "D:\\invalid\\nonexistent\\directory",
          "file_pattern": "*.*"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Cmd('git') failed due to: exit code(128)\n  cmdline: git add *.*\n  stderr: 'fatal: pathspec '*.*' did not match any files'"
        },
        "execution_time": 0.13002562522888184,
        "is_functional_test": false
      },
      {
        "case_name": "Add Files in Path with Special Characters",
        "purpose": "验证工具能否处理包含特殊字符的路径下添加文件到暂存区的操作",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test!@#$%^&*()Files",
          "file_pattern": "*.*"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test!@#$%^&*()Files"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt Add Files on System Critical Path",
        "purpose": "验证工具是否阻止在系统关键路径（如 C:\\Windows）上执行 git add 操作",
        "args": {
          "path": "C:\\Windows",
          "file_pattern": "*.*"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Invalid repository path: C:\\Windows"
        },
        "execution_time": 0.009003639221191406,
        "is_functional_test": false
      },
      {
        "case_name": "Add Nonexistent File Pattern",
        "purpose": "验证工具在尝试添加不存在的文件模式时是否优雅地处理错误",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_pattern": "*.xyz123"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Cmd('git') failed due to: exit code(128)\n  cmdline: git add *.xyz123\n  stderr: 'fatal: pathspec '*.xyz123' did not match any files'"
        },
        "execution_time": 0.2304692268371582,
        "is_functional_test": true
      },
      {
        "case_name": "Add Read-only Files to Staging Area",
        "purpose": "验证工具能够正确将只读文件添加到暂存区",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_output",
          "file_pattern": "*.*"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_output"
        },
        "execution_time": 0.003998756408691406,
        "is_functional_test": true
      },
      {
        "case_name": "Add Single File with Full Path",
        "purpose": "验证工具支持将单个具体文件添加到暂存区",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_pattern": "rule1.pdf"
        },
        "response": {
          "result": "Added 'rule1.pdf' to staging area in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.18214988708496094,
        "is_functional_test": true
      }
    ],
    "git_diff_unstaged": [
      {
        "case_name": "Show Unstaged Changes in Valid Git Repository",
        "purpose": "验证工具可以在有效的 Git 仓库中成功显示未暂存的更改差异",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.1501004695892334,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Show Unstaged Changes with Invalid Path",
        "purpose": "测试当提供无效路径时，工具是否抛出 ValueError 异常",
        "args": {
          "path": "D:\\invalid\\nonexistent\\directory"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.13125061988830566,
        "is_functional_test": true
      },
      {
        "case_name": "Show Unstaged Changes in Empty Git Repository",
        "purpose": "验证在空的 Git 仓库中调用 git diff --cached 是否返回无更改信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.15183424949645996,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt Diff Unstaged on System Critical Path",
        "purpose": "验证工具是否阻止对系统关键路径执行 git diff 操作（如 C:\\Windows）",
        "args": {
          "path": "C:\\Windows"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: Invalid repository path: C:\\Windows"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      },
      {
        "case_name": "Diff Unstaged with Special Characters in Path",
        "purpose": "验证工具能否处理包含特殊字符的路径下的 git diff --cached 操作",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test!@#$%^&*()Files"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test!@#$%^&*()Files"
        },
        "execution_time": 0.005005359649658203,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Show Unstaged Changes When Not a Git Repository",
        "purpose": "测试在一个非 Git 仓库目录中调用 git diff --cached 是否能正确抛出异常",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\rule1.pdf"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\rule1.pdf"
        },
        "execution_time": 0.006999969482421875,
        "is_functional_test": true
      },
      {
        "case_name": "Show Unstaged Changes After Modifying a Tracked File",
        "purpose": "验证工具能够正确显示已跟踪文件修改后的差异内容",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.199357271194458,
        "is_functional_test": true
      },
      {
        "case_name": "Show Unstaged Changes for New Untracked File",
        "purpose": "验证工具是否能正确识别并显示新增的未跟踪文件的差异（应无输出）",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.1710824966430664,
        "is_functional_test": true
      }
    ],
    "git_commit": [
      {
        "case_name": "Commit Changes in Valid Repository",
        "purpose": "验证在已初始化的 Git 仓库中可以成功提交更改",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Initial commit"
        },
        "response": {
          "result": "Committed to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles with message: Initial commit"
        },
        "execution_time": 0.3403010368347168,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Commit with Invalid Path",
        "purpose": "测试当提供无效路径时，工具是否抛出 ValueError 异常",
        "args": {
          "path": "D:\\invalid\\nonexistent\\directory",
          "message": "Test commit"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Cmd('git') failed due to: exit code(1)\n  cmdline: git commit -m Test commit\n  stdout: 'On branch master\n\nInitial commit\n\nnothing to commit (create/copy files and use \"git add\" to track)'"
        },
        "execution_time": 0.15697860717773438,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Special Characters in Path",
        "purpose": "验证工具能否处理包含特殊字符的路径下的提交操作",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test!@#$%^&*()Files",
          "message": "Commit with special path"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test!@#$%^&*()Files"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": false
      },
      {
        "case_name": "Commit Without Write Permissions",
        "purpose": "模拟无写权限的目录，验证工具是否能优雅处理错误",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\rule1.pdf",
          "message": "Attempt commit in non-writable path"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\rule1.pdf"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      },
      {
        "case_name": "Commit With Author Specified",
        "purpose": "验证使用指定作者信息提交是否正常工作",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Commit with author",
          "author": "John Doe <john.doe@example.com>"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Cmd('git') failed due to: exit code(1)\n  cmdline: git commit -m Commit with author --author=John Doe <john.doe@example.com>\n  stdout: 'On branch master\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\toutput/extracted_basic.pdf\n\toutput/merged_@#$.pdf\n\toutput/single_merged_output.pdf\n\nnothing added to commit but untracked files present (use \"git add\" to track)'"
        },
        "execution_time": 0.12851691246032715,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt Commit on System Critical Path",
        "purpose": "验证工具是否阻止在系统关键路径上执行 git commit 操作（如 C:\\Windows）",
        "args": {
          "path": "C:\\Windows",
          "message": "System critical commit"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Invalid repository path: C:\\Windows"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": false
      },
      {
        "case_name": "Commit Empty Message",
        "purpose": "测试提交空消息是否会引发错误",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Cmd('git') failed due to: exit code(1)\n  cmdline: git commit -m \n  stdout: 'On branch master\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\toutput/extracted_basic.pdf\n\toutput/merged_@#$.pdf\n\toutput/single_merged_output.pdf\n\nnothing added to commit but untracked files present (use \"git add\" to track)'"
        },
        "execution_time": 0.21367096900939941,
        "is_functional_test": false
      }
    ],
    "git_diff_staged": [
      {
        "case_name": "Show Staged Changes in Valid Repository",
        "purpose": "验证工具可以成功显示有效 Git 仓库中已暂存更改的差异信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.22054386138916016,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Show Staged Changes with Invalid Path",
        "purpose": "测试当提供无效路径时，工具是否抛出 ValueError 异常",
        "args": {
          "path": "D:\\invalid\\nonexistent\\directory"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.21311593055725098,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes in Empty Repository",
        "purpose": "验证在空的 Git 仓库中获取暂存更改差异是否正常（无更改）",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.17918825149536133,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt git_diff_staged on System Critical Path",
        "purpose": "验证工具是否阻止对系统关键路径执行 git_diff_staged 操作（如 C:\\Windows）",
        "args": {
          "path": "C:\\Windows"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: Invalid repository path: C:\\Windows"
        },
        "execution_time": 0.0030050277709960938,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes with Special Characters in Path",
        "purpose": "验证工具能否处理包含特殊字符的路径下的暂存更改差异查询",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test!@#$%^&*()Files"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test!@#$%^&*()Files"
        },
        "execution_time": 0.0060040950775146484,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Show Staged Changes When Not a Git Repository",
        "purpose": "测试在一个未初始化为 Git 仓库的目录中调用 git_diff_staged 是否能正确抛出异常",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\rule1.pdf"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\rule1.pdf"
        },
        "execution_time": 0.00650477409362793,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes of Repository With Modified Files",
        "purpose": "验证工具能够正确返回包含已修改文件的暂存更改差异信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.18909263610839844,
        "is_functional_test": true
      },
      {
        "case_name": "Show Staged Changes of Repository With Untracked Files",
        "purpose": "验证工具能够正确识别并返回包含未跟踪文件的暂存更改差异信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.18004822731018066,
        "is_functional_test": true
      }
    ],
    "git_log": [
      {
        "case_name": "View Commit History with Default Max Count",
        "purpose": "验证使用默认 max_count 参数值（10）时能否正确显示 Git 提交历史",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "commit 3eddabc6a5d061dd14f5a2498b3b5b82be5c54bb\nAuthor: pouchine <1291980381@qq.com>\nDate:   Sun Jul 13 22:53:54 2025 +0800\n\n    Initial commit"
        },
        "execution_time": 0.12230110168457031,
        "is_functional_test": true
      },
      {
        "case_name": "View Commit History with Custom Max Count",
        "purpose": "验证使用自定义 max_count 参数值时能否正确显示指定数量的提交历史",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "max_count": 5
        },
        "response": {
          "result": "commit 3eddabc6a5d061dd14f5a2498b3b5b82be5c54bb\nAuthor: pouchine <1291980381@qq.com>\nDate:   Sun Jul 13 22:53:54 2025 +0800\n\n    Initial commit"
        },
        "execution_time": 0.14777684211730957,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to View Commit History with Invalid Path",
        "purpose": "测试当提供无效路径时，工具是否抛出 ValueError 异常",
        "args": {
          "path": "D:\\invalid\\nonexistent\\directory"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Cmd('git') failed due to: exit code(128)\n  cmdline: git log -n 10\n  stderr: 'fatal: your current branch 'master' does not have any commits yet'"
        },
        "execution_time": 0.14432883262634277,
        "is_functional_test": false
      },
      {
        "case_name": "Fail to View Commit History with Non-Repository Path",
        "purpose": "测试当路径不是一个 Git 仓库时，工具是否抛出 GitCommandError 异常",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\rule1.pdf"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\rule1.pdf"
        },
        "execution_time": 0.0030035972595214844,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Attempt to View Commit History on System Critical Path",
        "purpose": "验证工具是否阻止对系统关键路径（如 C:\\Windows）执行 git log 操作",
        "args": {
          "path": "C:\\Windows"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Invalid repository path: C:\\Windows"
        },
        "execution_time": 0.005013704299926758,
        "is_functional_test": false
      },
      {
        "case_name": "View Commit History with Max Count Set to Zero",
        "purpose": "测试 max_count 参数为 0 时是否返回空结果或抛出合理错误",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "max_count": 0
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.16108918190002441,
        "is_functional_test": false
      },
      {
        "case_name": "View Commit History with Special Characters in Path",
        "purpose": "验证工具能否处理包含特殊字符的路径下的 git log 查询",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test!@#$%^&*()Files"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test!@#$%^&*()Files"
        },
        "execution_time": 0.004228353500366211,
        "is_functional_test": true
      },
      {
        "case_name": "View Commit History with Large Max Count Value",
        "purpose": "测试 max_count 参数设置为极大值时工具是否能正确处理",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "max_count": 1000000
        },
        "response": {
          "result": "commit 3eddabc6a5d061dd14f5a2498b3b5b82be5c54bb\nAuthor: pouchine <1291980381@qq.com>\nDate:   Sun Jul 13 22:53:54 2025 +0800\n\n    Initial commit"
        },
        "execution_time": 0.1460270881652832,
        "is_functional_test": true
      }
    ],
    "git_create_branch": [
      {
        "case_name": "Create Branch in Initialized Repository",
        "purpose": "验证工具可以在已初始化的 Git 仓库中成功创建新分支",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/new-ui"
        },
        "response": {
          "result": "Created branch 'feature/new-ui' in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.1321718692779541,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Create Branch with Invalid Path",
        "purpose": "测试当提供无效路径时，工具是否抛出 ValueError 异常",
        "args": {
          "path": "D:\\invalid\\nonexistent\\directory",
          "branch_name": "feature/new-ui"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Cmd('git') failed due to: exit code(128)\n  cmdline: git branch feature/new-ui\n  stderr: 'fatal: not a valid object name: 'master''"
        },
        "execution_time": 0.1269528865814209,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Special Characters in Name",
        "purpose": "验证工具能否处理包含特殊字符的分支名",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/!@#$%^&*()-test"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Cmd('git') failed due to: exit code(128)\n  cmdline: git branch feature/!@#$%^&*()-test\n  stderr: 'fatal: 'feature/!@#$%^&*()-test' is not a valid branch name\nhint: See `man git check-ref-format`\nhint: Disable this message with \"git config advice.refSyntax false\"'"
        },
        "execution_time": 0.1395246982574463,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Create Branch in Non-Git Directory",
        "purpose": "测试在一个未初始化为 Git 仓库的目录中调用创建分支是否会抛出异常",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\rule1.pdf",
          "branch_name": "feature/new-ui"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\rule1.pdf"
        },
        "execution_time": 0.0039980411529541016,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Attempt to Create Branch in System Critical Path",
        "purpose": "验证工具是否阻止在系统关键路径上执行 git branch 操作（如 C:\\Windows）",
        "args": {
          "path": "C:\\Windows",
          "branch_name": "feature/system-test"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Invalid repository path: C:\\Windows"
        },
        "execution_time": 0.00445246696472168,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Empty Branch Name",
        "purpose": "测试空字符串作为分支名时是否能正确抛出异常",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Cmd('git') failed due to: exit code(128)\n  cmdline: git branch \n  stderr: 'fatal: '' is not a valid branch name\nhint: See `man git check-ref-format`\nhint: Disable this message with \"git config advice.refSyntax false\"'"
        },
        "execution_time": 0.15938806533813477,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Maximum Length Name",
        "purpose": "验证工具是否支持最大长度（例如 255 字符）的分支名称",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "a1234567890b1234567890c1234567890d1234567890e1234567890f1234567890g1234567890h1234567890i1234567890j1234567890k1234567890l1234567890m1234567890n1234567890o1234567890p1234567890q1234567890r1234567890s1234567890t1234567890u1234567890v1234567890w1234567890x1234567890y1234567890z"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Cmd('git') failed due to: exit code(128)\n  cmdline: git branch a1234567890b1234567890c1234567890d1234567890e1234567890f1234567890g1234567890h1234567890i1234567890j1234567890k1234567890l1234567890m1234567890n1234567890o1234567890p1234567890q1234567890r1234567890s1234567890t1234567890u1234567890v1234567890w1234567890x1234567890y1234567890z\n  stderr: 'fatal: cannot lock ref 'refs/heads/a1234567890b1234567890c1234567890d1234567890e1234567890f1234567890g1234567890h1234567890i1234567890j1234567890k1234567890l1234567890m1234567890n1234567890o1234567890p1234567890q1234567890r1234567890s1234567890t1234567890u1234567890v1234567890w1234567890x1234567890y1234567890z': Unable to create 'D:/devWorkspace/MCPServer-Generator/testSystem/testFiles/.git/refs/heads/a1234567890b1234567890c1234567890d1234567890e1234567890f1234567890g1234567890h1234567890i1234567890j1234567890k1234567890l1234567890m1234567890n1234567890o1234567890p1234567890q1234567890r1234567890s1234567890t1234567890u1234567890v1234567890w1234567890x1234567890y1234567890z.lock': Filename too long'"
        },
        "execution_time": 0.12599515914916992,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch with Existing Branch Name",
        "purpose": "测试尝试创建一个已经存在的分支名称时是否能正确处理错误",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "master"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Cmd('git') failed due to: exit code(128)\n  cmdline: git branch master\n  stderr: 'fatal: a branch named 'master' already exists'"
        },
        "execution_time": 0.15144610404968262,
        "is_functional_test": false
      }
    ],
    "git_checkout": [
      {
        "case_name": "Checkout to Existing Branch Successfully",
        "purpose": "验证工具能够成功切换到已存在的分支",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/new-ui"
        },
        "response": {
          "result": "Switched to branch 'feature/new-ui' in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.12127852439880371,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Checkout with Invalid Path",
        "purpose": "测试当提供无效路径时，工具是否抛出 ValueError 异常",
        "args": {
          "path": "D:\\invalid\\nonexistent\\directory",
          "branch_name": "master"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout master\n  stderr: 'error: pathspec 'master' did not match any file(s) known to git'"
        },
        "execution_time": 0.12191390991210938,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout to Nonexistent Branch",
        "purpose": "验证工具在尝试切换到不存在的分支时是否抛出 GitCommandError 异常",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "nonexistent-branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout nonexistent-branch\n  stderr: 'error: pathspec 'nonexistent-branch' did not match any file(s) known to git'"
        },
        "execution_time": 0.1160740852355957,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout in Repository Without Any Branches",
        "purpose": "验证在一个没有分支（如刚初始化的空仓库）中执行 checkout 是否能正确处理错误",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles_empty",
          "branch_name": "master"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles_empty"
        },
        "execution_time": 0.00299835205078125,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Attempt Checkout on System Critical Path",
        "purpose": "验证工具是否阻止对系统关键路径执行 git checkout 操作（如 C:\\Windows）",
        "args": {
          "path": "C:\\Windows",
          "branch_name": "master"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Invalid repository path: C:\\Windows"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout with Special Characters in Branch Name",
        "purpose": "验证工具能否处理包含特殊字符的分支名称",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/bug@fix#123"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout feature/bug@fix#123\n  stderr: 'error: pathspec 'feature/bug@fix#123' did not match any file(s) known to git'"
        },
        "execution_time": 0.18341350555419922,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout with Long Branch Name",
        "purpose": "验证工具能否处理非常长的分支名称（边界条件测试）",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "a_very_long_branch_name_that_exceeds_normal_length_limits_and_contains_multiple_underscores_and_letters"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout a_very_long_branch_name_that_exceeds_normal_length_limits_and_contains_multiple_underscores_and_letters\n  stderr: 'error: pathspec 'a_very_long_branch_name_that_exceeds_normal_length_limits_and_contains_multiple_underscores_and_letters' did not match any file(s) known to git'"
        },
        "execution_time": 0.15309357643127441,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout in Directory With No Git Repository",
        "purpose": "验证在未初始化为 Git 仓库的目录中调用 git checkout 是否能正确抛出异常",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\rule1.pdf",
          "branch_name": "master"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\rule1.pdf"
        },
        "execution_time": 0.00299835205078125,
        "is_functional_test": false
      }
    ],
    "git_diff": [
      {
        "case_name": "Compare Two Valid Commits in Initialized Repository",
        "purpose": "验证工具能够正确比较两个有效的提交之间的差异",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_range": "HEAD~2..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff HEAD~2..HEAD\n  stderr: 'fatal: ambiguous argument 'HEAD~2..HEAD': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.21459722518920898,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Compare with Invalid Path",
        "purpose": "测试当提供无效路径时，工具是否抛出 ValueError 异常",
        "args": {
          "path": "D:\\invalid\\nonexistent\\directory",
          "commit_range": "HEAD~1..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff HEAD~1..HEAD\n  stderr: 'fatal: ambiguous argument 'HEAD~1..HEAD': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.20792603492736816,
        "is_functional_test": false
      },
      {
        "case_name": "Compare Commits with Special Characters in Path",
        "purpose": "验证工具能否处理包含特殊字符的路径下的 diff 操作",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test!@#$%^&*()Files",
          "commit_range": "HEAD~1..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test!@#$%^&*()Files"
        },
        "execution_time": 0.006000041961669922,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Diff on Non-Git Directory",
        "purpose": "测试在一个未初始化为 Git 仓库的目录中调用 git_diff 是否能正确抛出异常",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\rule1.pdf",
          "commit_range": "HEAD~1..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\rule1.pdf"
        },
        "execution_time": 0.004027843475341797,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Attempt Git Diff on System Critical Path",
        "purpose": "验证工具是否阻止对系统关键路径执行 git diff 操作（如 C:\\Windows）",
        "args": {
          "path": "C:\\Windows",
          "commit_range": "HEAD~1..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Invalid repository path: C:\\Windows"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": false
      },
      {
        "case_name": "Compare Empty Commit Range",
        "purpose": "测试空的 commit_range 参数是否被正确处理或抛出错误",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_range": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff \n  stderr: 'fatal: ambiguous argument '': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.1810598373413086,
        "is_functional_test": false
      },
      {
        "case_name": "Compare Using Invalid Commit Range Format",
        "purpose": "测试无效的提交范围格式是否导致 GitCommandError 被抛出",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_range": "invalid-range"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff invalid-range\n  stderr: 'fatal: ambiguous argument 'invalid-range': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.18161392211914062,
        "is_functional_test": false
      },
      {
        "case_name": "Compare Single Commit with Itself",
        "purpose": "测试比较同一个提交是否返回空结果或合理提示信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_range": "HEAD..HEAD"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.16306567192077637,
        "is_functional_test": true
      }
    ],
    "git_show": [
      {
        "case_name": "Display Details of a Valid Commit",
        "purpose": "验证工具可以成功显示一个有效提交的详细信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "a1b2c3d4e5f678901234567890abcdef12345678"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: Cmd('git') failed due to: exit code(128)\n  cmdline: git show a1b2c3d4e5f678901234567890abcdef12345678\n  stderr: 'fatal: bad object a1b2c3d4e5f678901234567890abcdef12345678'"
        },
        "execution_time": 0.15886259078979492,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Display Commit with Invalid Path",
        "purpose": "测试当提供无效路径时，工具是否抛出 ValueError 异常",
        "args": {
          "path": "D:\\invalid\\nonexistent\\directory",
          "commit_hash": "a1b2c3d4e5f678901234567890abcdef12345678"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: Cmd('git') failed due to: exit code(128)\n  cmdline: git show a1b2c3d4e5f678901234567890abcdef12345678\n  stderr: 'fatal: bad object a1b2c3d4e5f678901234567890abcdef12345678'"
        },
        "execution_time": 0.1569972038269043,
        "is_functional_test": false
      },
      {
        "case_name": "Fail to Display Nonexistent Commit",
        "purpose": "测试当提供的 commit_hash 不存在时，工具是否抛出 GitCommandError 异常",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "0000000000000000000000000000000000000000"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: Cmd('git') failed due to: exit code(128)\n  cmdline: git show 0000000000000000000000000000000000000000\n  stderr: 'fatal: bad object 0000000000000000000000000000000000000000'"
        },
        "execution_time": 0.18831706047058105,
        "is_functional_test": false
      },
      {
        "case_name": "Display Commit Details with Special Characters in Path",
        "purpose": "验证工具能否处理包含特殊字符的路径下的 git show 操作",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test!@#$%^&*()Files",
          "commit_hash": "a1b2c3d4e5f678901234567890abcdef12345678"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test!@#$%^&*()Files"
        },
        "execution_time": 0.003506898880004883,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt Git Show on System Critical Path",
        "purpose": "验证工具是否阻止对系统关键路径执行 git show 操作（如 C:\\Windows）",
        "args": {
          "path": "C:\\Windows",
          "commit_hash": "a1b2c3d4e5f678901234567890abcdef12345678"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: Invalid repository path: C:\\Windows"
        },
        "execution_time": 0.004001140594482422,
        "is_functional_test": false
      },
      {
        "case_name": "Fail to Display Commit When Not a Git Repository",
        "purpose": "测试在一个未初始化为 Git 仓库的目录中调用 git show 是否能正确抛出异常",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\rule1.pdf",
          "commit_hash": "a1b2c3d4e5f678901234567890abcdef12345678"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\rule1.pdf"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      },
      {
        "case_name": "Display Commit Details for Empty Repository",
        "purpose": "验证在空的 Git 仓库中尝试获取提交详情是否正常处理错误",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "a1b2c3d4e5f678901234567890abcdef12345678"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: Cmd('git') failed due to: exit code(128)\n  cmdline: git show a1b2c3d4e5f678901234567890abcdef12345678\n  stderr: 'fatal: bad object a1b2c3d4e5f678901234567890abcdef12345678'"
        },
        "execution_time": 0.1523730754852295,
        "is_functional_test": true
      },
      {
        "case_name": "Display Commit Details with Maximum Length Hash",
        "purpose": "验证工具是否能正确处理最大长度的 commit_hash 输入",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "ffffffffffffffffffffffffffffffffffffffff"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: Cmd('git') failed due to: exit code(128)\n  cmdline: git show ffffffffffffffffffffffffffffffffffffffff\n  stderr: 'fatal: bad object ffffffffffffffffffffffffffffffffffffffff'"
        },
        "execution_time": 0.1392955780029297,
        "is_functional_test": true
      }
    ],
    "git_reset": [
      {
        "case_name": "Unstage All Changes in Valid Repository",
        "purpose": "验证在有效 Git 仓库中取消暂存所有更改是否成功",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Unstaged all changes in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.15958213806152344,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage Specific File in Valid Repository",
        "purpose": "验证在有效 Git 仓库中取消暂存指定文件是否成功",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\app.ico"
        },
        "response": {
          "result": "Unstaged changes for D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\app.ico in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.18283987045288086,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Unstage in Invalid Path",
        "purpose": "测试当提供无效路径时，工具是否抛出 ValueError 异常",
        "args": {
          "path": "D:\\invalid\\nonexistent\\directory"
        },
        "response": {
          "result": "Unstaged all changes in D:\\invalid\\nonexistent\\directory"
        },
        "execution_time": 0.19647622108459473,
        "is_functional_test": false
      },
      {
        "case_name": "Fail to Unstage Nonexistent File",
        "purpose": "测试尝试取消暂存一个不存在的文件是否抛出 GitCommandError",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: Cmd('git') failed due to: exit code(128)\n  cmdline: git reset D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.txt\n  stderr: 'fatal: invalid object name 'D'.'"
        },
        "execution_time": 0.16295886039733887,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage With Special Characters in Path",
        "purpose": "验证工具能否处理包含特殊字符的路径下的取消暂存操作",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test!@#$%^&*()Files"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test!@#$%^&*()Files"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt Unstage on System Critical Path",
        "purpose": "验证工具是否阻止对系统关键路径执行 git reset 操作（如 C:\\Windows）",
        "args": {
          "path": "C:\\Windows"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: Invalid repository path: C:\\Windows"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage in Read-Only Directory",
        "purpose": "模拟无写权限的目录，验证工具是否能优雅处理错误",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\rule1.pdf"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\rule1.pdf"
        },
        "execution_time": 0.004000663757324219,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage When Not a Git Repository",
        "purpose": "测试在一个未初始化为 Git 仓库的目录中调用 git reset 是否能正确抛出异常",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\rule1.pdf"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\rule1.pdf"
        },
        "execution_time": 0.002999544143676758,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 94
}