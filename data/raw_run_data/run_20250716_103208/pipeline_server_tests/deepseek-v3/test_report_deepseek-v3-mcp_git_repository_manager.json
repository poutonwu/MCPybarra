{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "deepseek-v3-mcp_git_repository_manager",
  "server_path": "workspace/pipeline-output-servers/deepseek-v3/mcp_git_repository_manager/refined/server.py",
  "timestamp": "2025-07-16T10:42:26.015162",
  "tools": [
    {
      "name": "git_init",
      "description": "\n    Initialize a new Git repository in the specified directory.\n\n    Args:\n        directory: The path where the Git repository will be initialized.\n\n    Returns:\n        A string indicating the success or failure of the initialization.\n\n    Raises:\n        ValueError: If the directory is invalid.\n        GitCommandError: If Git initialization fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          }
        },
        "required": [
          "directory"
        ],
        "title": "git_initArguments",
        "type": "object"
      }
    },
    {
      "name": "text_write",
      "description": "\n    Write content to a specified file.\n\n    Args:\n        file_path: The path to the file that should be created or overwritten.\n        content: The content to write into the file.\n\n    Returns:\n        A confirmation message indicating success or an error message.\n\n    Raises:\n        ValueError: If the file path is invalid.\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "content"
        ],
        "title": "text_writeArguments",
        "type": "object"
      }
    },
    {
      "name": "git_status",
      "description": "\n    Display the current state of the Git repository.\n\n    Args:\n        directory: The path to the Git repository.\n\n    Returns:\n        A string containing the status information.\n\n    Raises:\n        ValueError: If the directory is invalid.\n        GitCommandError: If Git status fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          }
        },
        "required": [
          "directory"
        ],
        "title": "git_statusArguments",
        "type": "object"
      }
    },
    {
      "name": "git_add",
      "description": "\n    Add specified files to the Git staging area.\n\n    Args:\n        directory: The path to the Git repository.\n        files: A list of file paths to add to the staging area.\n\n    Returns:\n        A string confirming the files were added or an error message.\n\n    Raises:\n        ValueError: If the directory or files are invalid.\n        GitCommandError: If Git add fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "files": {
            "items": {
              "type": "string"
            },
            "title": "Files",
            "type": "array"
          }
        },
        "required": [
          "directory",
          "files"
        ],
        "title": "git_addArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_unstaged",
      "description": "\n    Show the differences between the working directory and the last commit (unstaged changes).\n\n    Args:\n        directory: The path to the Git repository.\n\n    Returns:\n        A string detailing the unstaged differences.\n\n    Raises:\n        ValueError: If the directory is invalid.\n        GitCommandError: If Git diff fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          }
        },
        "required": [
          "directory"
        ],
        "title": "git_diff_unstagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_staged",
      "description": "\n    Show the differences between the staging area and the last commit (staged changes).\n\n    Args:\n        directory: The path to the Git repository.\n\n    Returns:\n        A string detailing the staged differences.\n\n    Raises:\n        ValueError: If the directory is invalid.\n        GitCommandError: If Git diff fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          }
        },
        "required": [
          "directory"
        ],
        "title": "git_diff_stagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff",
      "description": "\n    Compare differences between branches, commits, or files.\n\n    Args:\n        directory: The path to the Git repository.\n        source: The source branch, commit, or file.\n        target: The target branch, commit, or file.\n\n    Returns:\n        A string detailing the differences.\n\n    Raises:\n        ValueError: If the directory, source, or target is invalid.\n        GitCommandError: If Git diff fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "source": {
            "title": "Source",
            "type": "string"
          },
          "target": {
            "title": "Target",
            "type": "string"
          }
        },
        "required": [
          "directory",
          "source",
          "target"
        ],
        "title": "git_diffArguments",
        "type": "object"
      }
    },
    {
      "name": "git_commit",
      "description": "\n    Commit the staged changes to the repository with a message.\n\n    Args:\n        directory: The path to the Git repository.\n        message: The commit message.\n\n    Returns:\n        A string confirming the commit or an error message.\n\n    Raises:\n        ValueError: If the directory or message is invalid.\n        GitCommandError: If Git commit fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "message": {
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "directory",
          "message"
        ],
        "title": "git_commitArguments",
        "type": "object"
      }
    },
    {
      "name": "git_reset",
      "description": "\n    Unstage files from the staging area.\n\n    Args:\n        directory: The path to the Git repository.\n        files: A list of file paths to unstage.\n\n    Returns:\n        A string confirming the reset or an error message.\n\n    Raises:\n        ValueError: If the directory or files are invalid.\n        GitCommandError: If Git reset fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "files": {
            "items": {
              "type": "string"
            },
            "title": "Files",
            "type": "array"
          }
        },
        "required": [
          "directory",
          "files"
        ],
        "title": "git_resetArguments",
        "type": "object"
      }
    },
    {
      "name": "git_log",
      "description": "\n    Display the commit history of the repository.\n\n    Args:\n        directory: The path to the Git repository.\n\n    Returns:\n        A string containing the commit history.\n\n    Raises:\n        ValueError: If the directory is invalid.\n        GitCommandError: If Git log fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          }
        },
        "required": [
          "directory"
        ],
        "title": "git_logArguments",
        "type": "object"
      }
    },
    {
      "name": "git_create_branch",
      "description": "\n    Create a new branch in the repository.\n\n    Args:\n        directory: The path to the Git repository.\n        branch_name: The name of the new branch.\n\n    Returns:\n        A string confirming the branch creation or an error message.\n\n    Raises:\n        ValueError: If the directory or branch name is invalid.\n        GitCommandError: If Git branch creation fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "directory",
          "branch_name"
        ],
        "title": "git_create_branchArguments",
        "type": "object"
      }
    },
    {
      "name": "git_checkout",
      "description": "\n    Switch to a specified branch or commit.\n\n    Args:\n        directory: The path to the Git repository.\n        target: The branch name or commit hash to switch to.\n\n    Returns:\n        A string confirming the checkout or an error message.\n\n    Raises:\n        ValueError: If the directory or target is invalid.\n        GitCommandError: If Git checkout fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "target": {
            "title": "Target",
            "type": "string"
          }
        },
        "required": [
          "directory",
          "target"
        ],
        "title": "git_checkoutArguments",
        "type": "object"
      }
    },
    {
      "name": "git_show",
      "description": "\n    Display detailed information about a specific commit.\n\n    Args:\n        directory: The path to the Git repository.\n        commit_hash: The hash of the commit to display.\n\n    Returns:\n        A string containing the commit details.\n\n    Raises:\n        ValueError: If the directory or commit hash is invalid.\n        GitCommandError: If Git show fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "commit_hash": {
            "title": "Commit Hash",
            "type": "string"
          }
        },
        "required": [
          "directory",
          "commit_hash"
        ],
        "title": "git_showArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "git_init": [
      {
        "case_name": "Initialize Git Repository in Valid Directory",
        "purpose": "验证工具可以在指定的有效目录中成功初始化一个新的Git仓库。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Git repository initialized successfully in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.15372323989868164,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository with Nonexistent Directory",
        "purpose": "验证当提供的目录不存在时，工具是否抛出ValueError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "Git repository initialized successfully in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "execution_time": 0.18534636497497559,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository in Read-Only Directory",
        "purpose": "验证在只读目录中初始化Git仓库是否会正确抛出GitCommandError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly"
        },
        "response": {
          "result": "Git repository initialized successfully in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly"
        },
        "execution_time": 0.18238282203674316,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository with Special Characters in Path",
        "purpose": "验证路径包含特殊字符时能否正常初始化Git仓库。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\copy!@#$"
        },
        "response": {
          "result": "Git repository initialized successfully in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\copy!@#$"
        },
        "execution_time": 0.2307741641998291,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository with Empty String Directory",
        "purpose": "验证空字符串作为目录参数时是否抛出ValueError。",
        "args": {
          "directory": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_init: [WinError 3] 系统找不到指定的路径。: ''"
        },
        "execution_time": 0.006144523620605469,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository in File Instead of Directory",
        "purpose": "验证提供一个文件路径而非目录路径时是否抛出ValueError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
        },
        "response": {
          "result": "Error initializing Git repository: Path is not a directory: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
        },
        "execution_time": 0.0050084590911865234,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository in Deeply Nested Directory",
        "purpose": "验证在深度嵌套的目录结构中初始化Git仓库是否成功。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_file_name_that_exceeds_standard_limits_and_may_cause_issues_during_file_operations.png\\nested\\path\\too\\deep"
        },
        "response": {
          "error": "ToolException: Error executing tool git_init: [WinError 3] 系统找不到指定的路径。: 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_file_name_that_exceeds_standard_limits_and_may_cause_issues_during_file_operations.png\\\\nested'"
        },
        "execution_time": 0.00800633430480957,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository with Unicode Path",
        "purpose": "验证使用Unicode路径（如中文）时能否成功初始化Git仓库。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\测试文件_中文路径.png"
        },
        "response": {
          "result": "Error initializing Git repository: Path is not a directory: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\测试文件_中文路径.png"
        },
        "execution_time": 0.004031181335449219,
        "is_functional_test": true
      }
    ],
    "text_write": [
      {
        "case_name": "Write Content to New File",
        "purpose": "验证text_write工具可以成功将内容写入一个新创建的文件。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_output.txt",
          "content": "This is a test content written by text_write tool."
        },
        "response": {
          "result": "Successfully wrote content to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_output.txt"
        },
        "execution_time": 0.0042994022369384766,
        "is_functional_test": true
      },
      {
        "case_name": "Overwrite Existing File Content",
        "purpose": "验证text_write工具可以覆盖已有文件的内容。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "content": "New content that should replace the old one."
        },
        "response": {
          "result": "Successfully wrote content to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
        },
        "execution_time": 0.0040090084075927734,
        "is_functional_test": true
      },
      {
        "case_name": "Write Empty Content to File",
        "purpose": "验证text_write工具在写入空字符串时是否正常处理。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_output.txt",
          "content": ""
        },
        "response": {
          "result": "Successfully wrote content to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_output.txt"
        },
        "execution_time": 0.008040666580200195,
        "is_functional_test": true
      },
      {
        "case_name": "Write Content with Special Characters",
        "purpose": "验证text_write工具能否正确写入包含特殊字符的内容到文件中。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\specialchars_output.txt",
          "content": "!@#$%^&*()_+{}[]|\"':;?/,.<>~`"
        },
        "response": {
          "result": "Successfully wrote content to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\specialchars_output.txt"
        },
        "execution_time": 0.004512310028076172,
        "is_functional_test": true
      },
      {
        "case_name": "Write Content to File in Read-Only Directory",
        "purpose": "验证当目标目录为只读时，写入操作是否会失败并返回适当的错误。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly\\protected_file.txt",
          "content": "This should fail due to read-only directory."
        },
        "response": {
          "result": "Successfully wrote content to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly\\protected_file.txt"
        },
        "execution_time": 0.007483243942260742,
        "is_functional_test": false
      },
      {
        "case_name": "Write Content to Invalid File Path",
        "purpose": "验证提供无效文件路径时，工具是否抛出ValueError。",
        "args": {
          "file_path": "<invalid/path/with\\illegal:chars>",
          "content": "This content should not be written."
        },
        "response": {
          "result": "Error writing to file: [WinError 123] 文件名、目录名或卷标语法不正确。: '<invalid'"
        },
        "execution_time": 0.0039751529693603516,
        "is_functional_test": false
      },
      {
        "case_name": "Write Unicode Content to File",
        "purpose": "验证text_write工具是否能正确写入Unicode内容（如中文）。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unicode_output.txt",
          "content": "这是一段测试用的中文内容。"
        },
        "response": {
          "result": "Successfully wrote content to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unicode_output.txt"
        },
        "execution_time": 0.0040035247802734375,
        "is_functional_test": true
      }
    ],
    "git_status": [
      {
        "case_name": "Get Git Status in Initialized Repository",
        "purpose": "验证在已初始化的Git仓库中能否成功获取当前状态信息。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\t20250507-151716.png\n\t20250509-154554.mp4\n\t2507.10548v1.pdf\n\t68078d40e08a19b806665fee_1745325376_auto_driving_system.csv\n\tapp.ico\n\tapp.png\n\tcopied_document.docx\n\tcopy!@#$.docx\n\tcs.csv\n\tdownloaded_largefile.iso\n\tdownloaded_script.sh\n\tdownloaded_specialchars.txt\n\tdownloaded_testfile.txt\n\tedge_output_basic.png\n\tedge_output_bmp.png\n\tedge_output_custom_thresholds.png\n\tedge_output_empty_thresholds.png\n\tedge_output_extreme_thresholds.png\n\tedge_output_gif.png\n\tedge_output_jpeg.png\n\tempty_content_output.txt\n\tempty_data_output.png\n\texisting_file.txt\n\thit.bmp\n\thit.jpeg\n\thit.png\n\ticon_a_green_checkmark_icon.png\n\tincludeempty.csv\n\tinspector.zip\n\tlarge_document_save_attempt.docx\n\tmodules.xml\n\tnew_output.txt\n\tnonname.html\n\tordered_merged_fuzzy_failure.pdf\n\tordered_merged_fuzzy_output.pdf\n\tpaper1.pdf\n\tpresent.html\n\tre2.doc\n\treadonly/\n\tsample1.pdf\n\tsaved_document.docx\n\tspecial_chars_content.txt\n\tspecialchars_output.txt\n\tspreadsheet.csv\n\tswe.pptx\n\ttest_@#%&().png\n\ttest_output.png\n\ttest_output.txt\n\ttmp.csv\n\tunicode_content.txt\n\tunicode_output.txt\n\tvery_long_file_name_that_exceeds_standard_limits_and_may_cause_issues_during_file_operations.png\n\twhole_framework.pdf\n\txue.gif\n\txue.jpg\n\txue.png\n\t~$onname.html\n\t~$resent.html\n\t\"\\346\\265\\213\\350\\257\\225\\346\\226\\207\\344\\273\\266_\\344\\270\\255\\...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计1518字符，剩余118字符"
        },
        "execution_time": 0.24379563331604004,
        "is_functional_test": true
      },
      {
        "case_name": "Get Git Status with Invalid Directory",
        "purpose": "验证当提供的目录无效时，工具是否抛出ValueError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)"
        },
        "execution_time": 0.24305319786071777,
        "is_functional_test": false
      },
      {
        "case_name": "Get Git Status in Non-Git Directory",
        "purpose": "验证在一个未初始化为Git仓库的目录中调用git_status是否会正确抛出GitCommandError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly"
        },
        "execution_time": 0.0050048828125,
        "is_functional_test": false
      },
      {
        "case_name": "Get Git Status with Special Characters in Path",
        "purpose": "验证路径包含特殊字符时能否正常获取Git状态信息。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\copy!@#$"
        },
        "response": {
          "result": "Error getting Git status: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\copy!@#$"
        },
        "execution_time": 0.007521390914916992,
        "is_functional_test": true
      },
      {
        "case_name": "Get Git Status with Empty String Directory",
        "purpose": "验证空字符串作为目录参数时是否抛出ValueError。",
        "args": {
          "directory": ""
        },
        "response": {
          "result": "Error getting Git status: Directory does not exist: "
        },
        "execution_time": 0.004004001617431641,
        "is_functional_test": false
      },
      {
        "case_name": "Get Git Status in File Instead of Directory",
        "purpose": "验证提供一个文件路径而非目录路径时是否抛出ValueError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
        },
        "response": {
          "result": "Error getting Git status: Path is not a directory: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
        },
        "execution_time": 0.005572080612182617,
        "is_functional_test": false
      },
      {
        "case_name": "Get Git Status in Deeply Nested Directory",
        "purpose": "验证在深度嵌套的目录结构中获取Git状态是否失败并返回适当错误。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_file_name_that_exceeds_standard_limits_and_may_cause_issues_during_file_operations.png\\nested\\path\\too\\deep"
        },
        "response": {
          "result": "Error getting Git status: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_file_name_that_exceeds_standard_limits_and_may_cause_issues_during_file_operations.png\\nested\\path\\too\\deep"
        },
        "execution_time": 0.0070040225982666016,
        "is_functional_test": false
      },
      {
        "case_name": "Get Git Status with Unicode Path",
        "purpose": "验证使用Unicode路径（如中文）时能否成功获取Git状态信息。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\测试文件_中文路径.png"
        },
        "response": {
          "result": "Error getting Git status: Path is not a directory: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\测试文件_中文路径.png"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": true
      }
    ],
    "git_add": [
      {
        "case_name": "Add Valid Files to Git Staging Area",
        "purpose": "验证git_add工具可以成功将指定的有效文件添加到Git暂存区。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
          ]
        },
        "response": {
          "result": "Added files to staging area: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
        },
        "execution_time": 0.005024433135986328,
        "is_functional_test": true
      },
      {
        "case_name": "Add Multiple Valid Files to Git Staging Area",
        "purpose": "验证git_add工具支持一次添加多个有效文件到Git暂存区。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_output.txt",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\specialchars_output.txt"
          ]
        },
        "response": {
          "result": "Added files to staging area: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_output.txt, D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\specialchars_output.txt"
        },
        "execution_time": 0.0045053958892822266,
        "is_functional_test": true
      },
      {
        "case_name": "Add File in Read-Only Directory to Git",
        "purpose": "验证尝试添加只读目录中的文件时是否抛出GitCommandError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly\\protected_file.txt"
          ]
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly"
        },
        "execution_time": 0.003337860107421875,
        "is_functional_test": false
      },
      {
        "case_name": "Add Nonexistent File to Git Staging Area",
        "purpose": "验证尝试添加不存在的文件时是否抛出ValueError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt"
          ]
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: [WinError 2] 系统找不到指定的文件。: 'nonexistent_file.txt'"
        },
        "execution_time": 0.004122734069824219,
        "is_functional_test": false
      },
      {
        "case_name": "Add File with Special Characters in Path",
        "purpose": "验证路径包含特殊字符的文件能否正确添加到Git暂存区。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\copy!@#$",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\copy!@#$\\copied_document.docx"
          ]
        },
        "response": {
          "result": "Error adding files to Git: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\copy!@#$"
        },
        "execution_time": 0.0030007362365722656,
        "is_functional_test": true
      },
      {
        "case_name": "Add File Using Unicode Path",
        "purpose": "验证使用Unicode路径（如中文）时能否正确添加文件到Git暂存区。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\测试文件_中文路径.png",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\测试文件_中文路径.png"
          ]
        },
        "response": {
          "result": "Error adding files to Git: Path is not a directory: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\测试文件_中文路径.png"
        },
        "execution_time": 0.004021644592285156,
        "is_functional_test": true
      },
      {
        "case_name": "Add Empty String as File Path",
        "purpose": "验证空字符串作为文件路径参数时是否抛出ValueError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            ""
          ]
        },
        "response": {
          "result": "Added files to staging area: "
        },
        "execution_time": 1.6980433464050293,
        "is_functional_test": false
      },
      {
        "case_name": "Add File to Invalid Git Directory",
        "purpose": "验证在无效或未初始化的Git目录中添加文件是否会失败并返回错误。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_repo",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
          ]
        },
        "response": {
          "result": "Error adding files to Git: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_repo"
        },
        "execution_time": 0.004570484161376953,
        "is_functional_test": false
      }
    ],
    "git_diff_unstaged": [
      {
        "case_name": "Show Unstaged Changes in Valid Git Repository",
        "purpose": "验证工具能否正确显示有效Git仓库中工作目录与最近一次提交之间的差异（未暂存的更改）。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "diff --git a/.git/index b/.git/index\nindex b013118..b78b749 100644\nBinary files a/.git/index and b/.git/index differ"
        },
        "execution_time": 0.8400542736053467,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Show Unstaged Changes in Nonexistent Directory",
        "purpose": "验证当提供的目录不存在时，工具是否抛出ValueError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.18491864204406738,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to Show Unstaged Changes in File Instead of Directory",
        "purpose": "验证提供一个文件路径而非目录路径时是否抛出ValueError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
        },
        "response": {
          "result": "Error getting unstaged differences: Path is not a directory: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to Show Unstaged Changes with Empty String Directory",
        "purpose": "验证空字符串作为目录参数时是否抛出ValueError。",
        "args": {
          "directory": ""
        },
        "response": {
          "result": "Error getting unstaged differences: Directory does not exist: "
        },
        "execution_time": 0.0040438175201416016,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Changes in Directory with Special Characters",
        "purpose": "验证路径包含特殊字符时能否正常显示未暂存的更改。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\copy!@#$"
        },
        "response": {
          "result": "Error getting unstaged differences: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\copy!@#$"
        },
        "execution_time": 0.003998517990112305,
        "is_functional_test": true
      },
      {
        "case_name": "Show Unstaged Changes in Unicode Path",
        "purpose": "验证使用Unicode路径（如中文）时能否成功显示未暂存的更改。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\测试文件_中文路径.png"
        },
        "response": {
          "result": "Error getting unstaged differences: Path is not a directory: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\测试文件_中文路径.png"
        },
        "execution_time": 0.0030014514923095703,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Show Unstaged Changes in Read-Only Directory",
        "purpose": "验证在只读目录中尝试查看未暂存更改是否会抛出GitCommandError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly"
        },
        "execution_time": 0.004295825958251953,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Changes in Deeply Nested Directory",
        "purpose": "验证在深度嵌套的目录结构中查看未暂存更改是否成功或失败但处理得当。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_file_name_that_exceeds_standard_limits_and_may_cause_issues_during_file_operations.png\\nested\\path\\too\\deep"
        },
        "response": {
          "result": "Error getting unstaged differences: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_file_name_that_exceeds_standard_limits_and_may_cause_issues_during_file_operations.png\\nested\\path\\too\\deep"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": true
      }
    ],
    "git_diff_staged": [
      {
        "case_name": "Show Staged Changes in Valid Git Repository",
        "purpose": "验证工具可以在有效的Git仓库中正确显示暂存区与最后一次提交之间的差异。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "error": "Tool execution timed out after 50.0 seconds."
        },
        "execution_time": 50.0,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Show Staged Changes in Nonexistent Directory",
        "purpose": "验证当提供的目录不存在时，工具是否抛出ValueError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "error": "McpError: Connection closed"
        },
        "execution_time": 0.07764625549316406,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes in Read-Only Directory",
        "purpose": "验证在只读目录中执行git_diff_staged是否会正确抛出GitCommandError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0010037422180175781,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes with Special Characters in Path",
        "purpose": "验证路径包含特殊字符时能否正常显示暂存区差异。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\copy!@#$"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0009996891021728516,
        "is_functional_test": true
      },
      {
        "case_name": "Show Staged Changes with Empty String Directory",
        "purpose": "验证空字符串作为目录参数时是否抛出ValueError。",
        "args": {
          "directory": ""
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.00099945068359375,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes in File Instead of Directory",
        "purpose": "验证提供一个文件路径而非目录路径时是否抛出ValueError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.001001119613647461,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes in Deeply Nested Directory",
        "purpose": "验证在深度嵌套的目录结构中执行git_diff_staged是否成功。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_file_name_that_exceeds_standard_limits_and_may_cause_issues_during_file_operations.png\\nested\\path\\too\\deep"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0009999275207519531,
        "is_functional_test": true
      },
      {
        "case_name": "Show Staged Changes with Unicode Path",
        "purpose": "验证使用Unicode路径（如中文）时能否成功显示暂存区差异。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\测试文件_中文路径.png"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0010051727294921875,
        "is_functional_test": true
      }
    ],
    "git_commit": [
      {
        "case_name": "Commit Staged Changes in Valid Repository",
        "purpose": "验证在有效的Git仓库中，使用有效提交信息进行提交是否成功。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Initial commit"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0013039112091064453,
        "is_functional_test": true
      },
      {
        "case_name": "Commit with Empty Message",
        "purpose": "验证当提交信息为空字符串时是否抛出ValueError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": ""
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0010066032409667969,
        "is_functional_test": false
      },
      {
        "case_name": "Commit to Nonexistent Directory",
        "purpose": "验证当提供的目录不存在时是否抛出ValueError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "message": "This should fail due to invalid directory"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.00099945068359375,
        "is_functional_test": false
      },
      {
        "case_name": "Commit in Read-Only Directory",
        "purpose": "验证在只读目录中尝试提交是否会抛出GitCommandError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly",
          "message": "This should fail due to read-only directory"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0035452842712402344,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Special Characters in Message",
        "purpose": "验证提交信息包含特殊字符时是否能正常提交。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Commit message with special characters: !@#$%^&*()"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0020067691802978516,
        "is_functional_test": true
      },
      {
        "case_name": "Commit with Unicode Message",
        "purpose": "验证提交信息为Unicode内容（如中文）时是否能正常提交。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "这是一段测试用的中文提交信息。"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0009992122650146484,
        "is_functional_test": true
      },
      {
        "case_name": "Commit Without Staged Changes",
        "purpose": "验证在没有暂存更改的情况下提交是否会失败并返回错误信息。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "This commit should fail because there are no staged changes"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0010035037994384766,
        "is_functional_test": false
      },
      {
        "case_name": "Commit in Deeply Nested Directory",
        "purpose": "验证在深度嵌套目录结构中提交是否成功。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nested\\path\\too\\deep",
          "message": "Commit in deeply nested directory"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0035474300384521484,
        "is_functional_test": true
      }
    ],
    "git_log": [
      {
        "case_name": "Display Commit History in Valid Git Repository",
        "purpose": "验证git_log工具可以成功显示有效Git仓库的提交历史。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0015091896057128906,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Display Commit History in Non-Git Directory",
        "purpose": "验证当提供的目录不是Git仓库时，工具是否抛出GitCommandError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0010042190551757812,
        "is_functional_test": false
      },
      {
        "case_name": "Display Commit History with Special Characters in Path",
        "purpose": "验证路径包含特殊字符时能否正常显示提交历史。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\copy!@#$"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Display Commit History with Empty Directory Path",
        "purpose": "验证空字符串作为目录参数时是否抛出ValueError。",
        "args": {
          "directory": ""
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0009999275207519531,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to Display Commit History in Read-Only Directory",
        "purpose": "验证在只读目录中尝试获取提交历史是否会正确抛出GitCommandError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0010004043579101562,
        "is_functional_test": false
      },
      {
        "case_name": "Display Commit History in Unicode Path Repository",
        "purpose": "验证使用Unicode路径（如中文）时能否成功显示提交历史。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\测试文件_中文路径.png"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.00099945068359375,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Display Commit History Using File Instead of Directory",
        "purpose": "验证提供一个文件路径而非目录路径时是否抛出ValueError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0010006427764892578,
        "is_functional_test": false
      }
    ],
    "git_diff": [
      {
        "case_name": "Compare Differences Between Two Branches",
        "purpose": "验证git_diff工具可以成功比较两个Git分支之间的差异。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source": "main",
          "target": "feature-branch"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0009996891021728516,
        "is_functional_test": true
      },
      {
        "case_name": "Compare Differences Between Two Commits",
        "purpose": "验证git_diff工具可以成功比较两个Git提交之间的差异。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source": "abc1234",
          "target": "def5678"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0010004043579101562,
        "is_functional_test": true
      },
      {
        "case_name": "Compare Differences Between Two Files",
        "purpose": "验证git_diff工具可以成功比较两个文件之间的差异。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source": "existing_file.txt",
          "target": "new_output.txt"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0015032291412353516,
        "is_functional_test": true
      },
      {
        "case_name": "Compare Differences with Invalid Directory",
        "purpose": "验证当提供的目录无效时，git_diff工具是否抛出ValueError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "source": "main",
          "target": "feature-branch"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0018165111541748047,
        "is_functional_test": false
      },
      {
        "case_name": "Compare Differences with Invalid Source",
        "purpose": "验证当提供的源分支/提交/文件无效时，git_diff工具是否抛出ValueError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source": "invalid-source",
          "target": "feature-branch"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0032994747161865234,
        "is_functional_test": false
      },
      {
        "case_name": "Compare Differences with Invalid Target",
        "purpose": "验证当提供的目标分支/提交/文件无效时，git_diff工具是否抛出ValueError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source": "main",
          "target": "invalid-target"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0020058155059814453,
        "is_functional_test": false
      },
      {
        "case_name": "Compare Differences with Special Characters in Path",
        "purpose": "验证路径包含特殊字符时，git_diff工具是否能正常处理。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\copy!@#$",
          "source": "main",
          "target": "feature-branch"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0015020370483398438,
        "is_functional_test": true
      },
      {
        "case_name": "Compare Differences with Unicode Path",
        "purpose": "验证使用Unicode路径（如中文）时，git_diff工具是否能正常处理。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\测试文件_中文路径.png",
          "source": "main",
          "target": "feature-branch"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0010030269622802734,
        "is_functional_test": true
      }
    ],
    "git_reset": [
      {
        "case_name": "Unstage Single File from Staging Area",
        "purpose": "验证在Git仓库中成功将单个文件从暂存区移除。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
          ]
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0010104179382324219,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage Multiple Files from Staging Area",
        "purpose": "验证可以同时从暂存区移除多个文件。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_output.txt",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\specialchars_output.txt"
          ]
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0010058879852294922,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage Nonexistent File",
        "purpose": "验证尝试取消暂存一个不存在的文件是否会抛出错误。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt"
          ]
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0010001659393310547,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage File in Read-Only Repository",
        "purpose": "验证在只读Git仓库中尝试取消暂存文件是否失败并返回适当错误。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly\\protected_file.txt"
          ]
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.001001119613647461,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage File with Special Characters in Path",
        "purpose": "验证路径包含特殊字符时能否正常执行git reset操作。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\copy!@#$",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\copy!@#$\\test_output.txt"
          ]
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0009996891021728516,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage File Using Empty Directory Path",
        "purpose": "验证使用空字符串作为目录参数是否会抛出ValueError。",
        "args": {
          "directory": "",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
          ]
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.00099945068359375,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage File with Unicode Path",
        "purpose": "验证使用Unicode路径（如中文）时能否正确执行git reset操作。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\测试文件_中文路径.png",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\测试文件_中文路径.png\\unicode_content.txt"
          ]
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.002000093460083008,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage Large Number of Files",
        "purpose": "验证一次性取消暂存大量文件是否能正常处理。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\20250507-151716.png",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\20250509-154554.mp4",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\2507.10548v1.pdf",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\app.ico",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\app.png",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\contour_output.png",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\copied_document.docx",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\cs.csv",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\downloaded_testfile.txt",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\edge_output_basic.png"
          ]
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0025119781494140625,
        "is_functional_test": true
      }
    ],
    "git_create_branch": [
      {
        "case_name": "Create Branch in Initialized Git Repository",
        "purpose": "验证在已初始化的Git仓库中成功创建新分支。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/new_branch"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0010051727294921875,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch with Empty Branch Name",
        "purpose": "验证当分支名称为空字符串时，工具是否抛出ValueError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": ""
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.00099945068359375,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch in Nonexistent Directory",
        "purpose": "验证当提供的目录不存在时，工具是否抛出ValueError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "branch_name": "feature/test"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0008099079132080078,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Special Characters in Branch Name",
        "purpose": "验证分支名称包含特殊字符时是否能成功创建。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/branch@name#"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.001004934310913086,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch in Read-Only Directory",
        "purpose": "验证在只读目录中创建分支是否会抛出GitCommandError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly",
          "branch_name": "feature/readonly_branch"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.00099945068359375,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Unicode Name",
        "purpose": "验证使用Unicode字符（如中文）作为分支名称是否成功。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "功能/新特性分支"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.002009868621826172,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch with Long Name",
        "purpose": "验证创建具有超长名称的分支是否会成功或抛出适当的错误。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/this_is_an_extremely_long_branch_name_that_may_exceed_the_system_limit"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0005185604095458984,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch in Nested Directory",
        "purpose": "验证在深度嵌套的目录结构中创建分支是否成功。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nested\\path\\too\\deep",
          "branch_name": "feature/nested_branch"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0010008811950683594,
        "is_functional_test": true
      }
    ],
    "git_checkout": [
      {
        "case_name": "Checkout to Valid Branch in Initialized Repository",
        "purpose": "验证在已初始化的Git仓库中切换到有效分支是否成功。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "target": "main"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0010018348693847656,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout to Nonexistent Branch",
        "purpose": "验证尝试切换到不存在的分支时是否抛出GitCommandError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "target": "nonexistent_branch"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.000997781753540039,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout with Empty Target",
        "purpose": "验证当目标分支或提交为空字符串时是否抛出ValueError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "target": ""
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout in Non-Git Directory",
        "purpose": "验证在一个未初始化为Git仓库的目录中执行checkout是否失败并抛出错误。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_dir",
          "target": "main"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0009992122650146484,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout with Special Characters in Target",
        "purpose": "验证目标分支名包含特殊字符时能否正确处理。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "target": "feature/!@#$%^&*()"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0015056133270263672,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout to Commit Hash",
        "purpose": "验证可以成功切换到指定的提交哈希。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "target": "a1fd29ec14823d8bc4a8d1a2cfe35451580f5118"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.001508474349975586,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout in Read-Only Directory",
        "purpose": "验证在只读目录中执行checkout是否会失败并返回适当错误。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly",
          "target": "main"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.001621246337890625,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout with Unicode Path and Target",
        "purpose": "验证路径和目标参数包含Unicode字符（如中文）时工具是否正常工作。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\测试文件_中文路径.png",
          "target": "测试分支"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0010075569152832031,
        "is_functional_test": true
      }
    ],
    "git_show": [
      {
        "case_name": "Display Commit Details in Valid Repository",
        "purpose": "验证git_show工具可以在有效的Git仓库中成功显示指定提交的详细信息。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "68078d40e08a19b806665fee"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.001003265380859375,
        "is_functional_test": true
      },
      {
        "case_name": "Show Commit with Invalid Directory",
        "purpose": "验证当提供的目录无效时，git_show是否抛出ValueError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "commit_hash": "abc1234"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit with Empty Directory Path",
        "purpose": "验证空字符串作为目录参数时是否抛出ValueError。",
        "args": {
          "directory": "",
          "commit_hash": "abc1234"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0010001659393310547,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit with Invalid Commit Hash",
        "purpose": "验证当提供的提交哈希无效时，git_show是否抛出ValueError或GitCommandError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "invalidhash123"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0025014877319335938,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit in Read-Only Repository",
        "purpose": "验证在只读目录中的Git仓库执行git_show是否会正确处理错误。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly",
          "commit_hash": "abc1234"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0013117790222167969,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit with Special Characters in Directory Path",
        "purpose": "验证路径包含特殊字符时能否正常执行git_show。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\copy!@#$",
          "commit_hash": "abc1234"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0012257099151611328,
        "is_functional_test": true
      },
      {
        "case_name": "Show Commit in Deeply Nested Directory",
        "purpose": "验证在深度嵌套的目录结构中执行git_show是否成功。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_file_name_that_exceeds_standard_limits_and_may_cause_issues_during_file_operations.png\\nested\\path\\too\\deep",
          "commit_hash": "abc1234"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0010004043579101562,
        "is_functional_test": true
      },
      {
        "case_name": "Show Commit with Unicode Path",
        "purpose": "验证使用Unicode路径（如中文）时能否成功执行git_show。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\测试文件_中文路径.png",
          "commit_hash": "abc1234"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.00099945068359375,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 102
}