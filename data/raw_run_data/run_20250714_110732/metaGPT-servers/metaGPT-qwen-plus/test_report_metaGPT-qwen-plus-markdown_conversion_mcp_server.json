{
  "server_name": "markdown_conversion_mcp_server",
  "parent_dir": "metaGPT-qwen-plus",
  "report_name": "metaGPT-qwen-plus-markdown_conversion_mcp_server",
  "server_path": "workspace\\metaGPT-servers\\metaGPT-qwen-plus\\markdown_conversion_mcp_server.py",
  "timestamp": "2025-07-14T11:07:38.676996",
  "tools": [
    {
      "name": "convert_to_markdown",
      "description": "\n    Convert content from various sources to structured Markdown format.\n\n    Args:\n        source: The source of the content (HTTP/HTTPS URL, file path, or data URI).\n\n    Returns:\n        The converted content in Markdown format.\n\n    Raises:\n        ValueError: If the source type is not supported or conversion fails.\n    ",
      "args_schema": {
        "properties": {
          "source": {
            "title": "Source",
            "type": "string"
          }
        },
        "required": [
          "source"
        ],
        "title": "convert_to_markdownArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "convert_to_markdown": [
      {
        "case_name": "Convert valid HTML file to Markdown",
        "purpose": "验证工具能否将本地HTML文件正确转换为Markdown格式",
        "args": {
          "source": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\present.html"
        },
        "response": {
          "error": "ToolException: Error executing tool convert_to_markdown: Failed to convert content to Markdown: [Errno 22] Invalid argument: '\\ufeff<!DOCTYPE html>\\n<html lang=\"zh-CN\">\\n<p>使用utf-8编码插入的HTML段落</p>\\n\\n<!-- 插入的注释 -->\\n'"
        },
        "execution_time": 0.009516477584838867,
        "is_functional_test": true
      },
      {
        "case_name": "Convert PDF document to Markdown",
        "purpose": "验证工具能否将PDF文档转换为Markdown格式",
        "args": {
          "source": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\sample1.pdf"
        },
        "response": {
          "error": "ToolException: Error executing tool convert_to_markdown: Failed to read file D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\sample1.pdf: 'utf-8' codec can't decode byte 0xe2 in position 10: invalid continuation byte"
        },
        "execution_time": 0.010530471801757812,
        "is_functional_test": true
      },
      {
        "case_name": "Convert CSV file to Markdown table",
        "purpose": "验证工具能否将CSV文件内容转换为Markdown表格格式",
        "args": {
          "source": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\spreadsheet.csv"
        },
        "response": {
          "error": "ToolException: Error executing tool convert_to_markdown: Failed to convert content to Markdown: [Errno 22] Invalid argument: 'A,B,C\\n1,2,3\\n4,5,6'"
        },
        "execution_time": 0.006716251373291016,
        "is_functional_test": true
      },
      {
        "case_name": "Convert from HTTP URL to Markdown",
        "purpose": "验证工具能否从HTTP链接获取内容并成功转换为Markdown",
        "args": {
          "source": "http://example.com/sample.html"
        },
        "response": {
          "error": "ToolException: Error executing tool convert_to_markdown: Client error '404 Not Found' for url 'http://example.com/sample.html'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404"
        },
        "execution_time": 1.979008674621582,
        "is_functional_test": true
      },
      {
        "case_name": "Convert from HTTPS URL to Markdown",
        "purpose": "验证工具能否从HTTPS链接获取内容并成功转换为Markdown",
        "args": {
          "source": "https://example.com/sample.html"
        },
        "response": {
          "error": "ToolException: Error executing tool convert_to_markdown: Client error '404 Not Found' for url 'https://example.com/sample.html'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404"
        },
        "execution_time": 1.8515944480895996,
        "is_functional_test": true
      },
      {
        "case_name": "Convert empty CSV file",
        "purpose": "测试工具处理空数据文件的能力",
        "args": {
          "source": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\includeempty.csv"
        },
        "response": {
          "error": "ToolException: Error executing tool convert_to_markdown: Failed to convert content to Markdown: [Errno 22] Invalid argument: 'A,B,C\\n1,,3\\n'"
        },
        "execution_time": 0.0040738582611083984,
        "is_functional_test": true
      },
      {
        "case_name": "Security test - prevent path traversal attacks",
        "purpose": "验证工具是否阻止路径穿越攻击尝试",
        "args": {
          "source": "../../../etc/passwd"
        },
        "response": {
          "error": "ToolException: Error executing tool convert_to_markdown: Unsupported source type: ../../../etc/passwd"
        },
        "execution_time": 0.004000663757324219,
        "is_functional_test": false
      },
      {
        "case_name": "Unsupported file type detection",
        "purpose": "测试工具对不支持的文件类型的错误处理能力",
        "args": {
          "source": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpeg"
        },
        "response": {
          "error": "ToolException: Error executing tool convert_to_markdown: Failed to read file D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpeg: 'utf-8' codec can't decode byte 0xff in position 0: invalid start byte"
        },
        "execution_time": 0.006509065628051758,
        "is_functional_test": false
      },
      {
        "case_name": "Non-existent file handling",
        "purpose": "测试工具在指定文件不存在时的错误处理",
        "args": {
          "source": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool convert_to_markdown: Unsupported source type: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.docx"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid URI scheme handling",
        "purpose": "测试工具对无效URI方案的处理能力",
        "args": {
          "source": "ftp://example.com/sample.doc"
        },
        "response": {
          "error": "ToolException: Error executing tool convert_to_markdown: Unsupported source type: ftp://example.com/sample.doc"
        },
        "execution_time": 0.008515119552612305,
        "is_functional_test": false
      },
      {
        "case_name": "Convert file with no extension",
        "purpose": "测试工具处理无扩展名文件的能力",
        "args": {
          "source": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonname.html"
        },
        "response": {
          "error": "ToolException: Error executing tool convert_to_markdown: Failed to convert content to Markdown: [Errno 22] Invalid argument: '<!DOCTYPE html>\\n<html lang=\"zh-CN\">\\n<head>\\n    <meta charset=\"UTF-8\">\\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\\n    <title>论文分享 PPT - 类级代码生成 LLM 评估</title>\\n    <style>\\n        body {\\n            font-family: \"微软雅黑\", sans-serif;\\n            margin: 0;\\n            padding: 0;\\n            background-color: #f4f4f4;\\n        }\\n        .slide {\\n            width: 1000px;\\n            height: 600px;\\n            margin: 50px auto;\\n            background-color: #fff;\\n            box-shadow: 0 0 10px rgba(0,0,0,0.1);\\n            padding: 30px;\\n            box-sizing: border-box;\\n            position: relative;\\n        }\\n        .slide h1, .slide h2, .slide h3 {\\n            margin-top: 0;\\n        }\\n        .slide p {\\n            line-height: 1.8;\\n            color: #555;\\n        }\\n        .code-block {\\n            background-color: #f9f9f9;\\n            border: 1px solid #eee;\\n            padding: 15px;\\n            border-radius: 5px;\\n            margin: 15px 0;\\n            font-family: \"Consolas\", monospace;\\n            font-size: 14px;\\n            color: #333;\\n        }\\n        .formula {\\n            font-size: 18px;\\n            color: #333;\\n            margin: 15px 0;\\n        }\\n        .footer {\\n            position: absolute;\\n            bottom: 20px;\\n            left: 0;\\n            width: 100%;\\n            text-align: center;\\n            color: #999;\\n            font-size: 14px;\\n        }\\n    </style>\\n</head>\\n<body>\\n\\n<!-- 标题页 -->\\n<div class=\"slide\">\\n    <h1>类级代码生成中 LLM 评估研究</h1>\\n    <p>聚焦方法、实验、数据集与结果，探索改进方向</p>\\n    <div class=\"footer\">1/8 | 标题页</div>\\n</div>\\n\\n<!-- 方法板块：核心思路与技术 -->\\n<div class=\"slide\">\\n    <h2>一、研究方法：突破函数级，迈向类级</h2>\\n    <h3>1. 方法设计逻辑</h3>\\n    <p>现有函数级基准（如 HumanEval）仅覆盖独立代码单元，与真实开发中类级代码的<strong>多方法依赖</strong>场景脱节</p>\\n    <p>本研究构建 <strong>ClassEval 类级评估框架</strong>，核心解决：</p>\\n    <ul>\\n        <li>复杂依赖建模（字段、方法、库依赖）</li>\\n        <li>类级代码全流程验证（方法协同、系统调用）</li>\\n    </ul>\\n\\n    <h3>2. 关键技术点</h3>\\n    <p>采用 <strong>契约编程思想</strong> 定义类骨架，包含：</p>\\n    <div class=\"code-block\">\\n        # 类骨架示例（Python）\\n        class VendingMachine:\\n            def __init__(self, initial_inventory: dict, balance: float):\\n                \"\"\"初始化自动售货机，需实现库存与余额逻辑\"\"\"\\n                pass\\n            \\n            def purchase_item(self, item: str, coins: float) -> bool:\\n                \"\"\"购买商品，需依赖 __init__ 初始化的字段\"\"\"\\n                pass\\n    </div>\\n    <div class=\"footer\">2/8 | 研究方法</div>\\n</div>\\n\\n<!-- 实验设置板块：模型、策略、指标 -->\\n<div class=\"slide\">\\n    <h2>二、实验设置：全面评估模型能力</h2>\\n    <h3>1. 参测模型选择</h3>\\n    <p>覆盖 3 类 11 个模型，对比闭源、开源、通用型 LLM：</p>\\n    <ul>\\n        <li>闭源标杆：GPT-4、GPT-3.5</li>\\n        <li>开源代码专攻：WizardCoder、Instruct-StarCoder</li>\\n        <li>通用模型：Vicuna、ChatGLM</li>\\n    </ul>\\n\\n    <h3>2. 生成策略设计</h3>\\n    <p>模拟 3 种开发场景，测试模型适应性：</p>\\n    <ol>\\n        <li><strong>整体生成</strong>：一次性生成完整类代码（考验长上下文理解）</li>\\n        <li><strong>增量生成</strong>：分步生成方法，依赖已生成内容（模拟渐进开发）</li>\\n        <li><strong>组合生成</strong>：分步生成但方法独立（测试无上下文依赖能力）</li>\\n    </ol>\\n\\n    <h3>3. 评估指标体系</h3>\\n    <p>多维指标量化类级生成质量：</p>\\n    <div class=\"formula\">\\n        $\\\\text{Pass@k} = \\\\underset{\\\\text{Problems}}{\\\\mathbb{E}} \\\\left[ 1 - \\\\dbinom{n - c}{k} \\\\bigg/ \\\\dbinom{n}{k} \\\\right]$  \\n        （类级/方法级正确性，Pass@k 指标）\\n    </div>\\n    <div class=\"formula\">\\n        $\\\\text{DEP}(M) = \\\\frac{\\\\sum_{i=1}^{n} G_i(M)}{\\\\sum_{i=1}^{n} S_i(M)}, \\\\quad \\\\text{DEP}(F) = \\\\frac{\\\\sum_{i=1}^{n} G_i(F)}{\\\\sum_{i=1}^{n} S_i(F)}$  \\n        （依赖生成能力，DEP 指标）\\n    </div>\\n    <div class=\"footer\">3/8 | 实验设置</div>\\n</div>\\n\\n<!-- 数据集板块：ClassEval 构建细节 -->\\n<div class=\"slide\">\\n    <h2>三、数据集：ClassEval 类级基准</h2>\\n    <h3>1. 构建原则</h3>\\n    <p>贴近真实开发的三大设计准则：</p>\\n    <ul>\\n        <li><strong>依赖多样性</strong>：覆盖字段、方法、库依赖（76.2% 方法含依赖）</li>\\n        <li><strong>测试充分性</strong>：99.7% 语句覆盖率 + 类级/方法级测试协同验证</li>\\n        <li><strong>场景真实性</strong>：从 PyPI 项目、GitHub 开源库提取 11 类真实场景（如管理系统、游戏开发）</li>\\n    </ul>\\n\\n    <h3>2. 数据集规模</h3>\\n    <p>包含 100 个类级任务，核心指标对比：</p>\\n    <table style=\"width: 80%; margin: 15px 0;\" border=\"1\" cellpadding=\"8\" cellspacing=\"0\">\\n        <tr>\\n            <th>基准</th>\\n            <th>任务数</th>\\n            <th>平均代码行数</th>\\n            <th>依赖覆盖度</th>\\n        </tr>\\n        <tr>\\n            <td>HumanEval</td>\\n            <td>164</td>\\n            <td>11.5</td>\\n            <td>30% 方法独立</td>\\n        </tr>\\n        <tr>\\n            <td>ClassEval</td>\\n            <td>100</td>\\n            <td>45.7</td>\\n            <td>76.2% 方法含依赖</td>\\n        </tr>\\n    </table>\\n\\n    <h3>3. 类骨架示例</h3>\\n    <div class=\"code-block\">\\n        # 自动售货机类骨架（部分）\\n        class VendingMachine:\\n            def __init__(self, initial_inventory: dict[str, int], initial_balance: float) -> None:\\n                \"\"\"\\n                初始化库存（如 {\"coke\": 10}）与余额，需实现字段赋值逻辑\\n                :param initial_inventory: 商品名 -> 数量\\n                :param initial_balance: 初始金额\\n                \"\"\"\\n                self.inventory = initial_inventory  # 字段依赖示例\\n                self.balance = initial_balance      # 字段依赖示例\\n\\n            def purchase_item(self, item: str, payment: float) -> bool:\\n                \"\"\"\\n                购买商品，需：\\n                1. 检查 inventory[item] > 0（字段依赖）\\n                2. 调用 _update_balance 方法（方法依赖）\\n                :return: 购买成功返回 True，失败返回 False\\n                \"\"\"\\n                if self.inventory.get(item, 0) <= 0:\\n                    return False\\n                self._update_balance(payment)  # 方法依赖示例\\n                self.inventory[item] -= 1\\n                return True\\n\\n            def _update_balance(self, amount: float) -> None:\\n                \"\"\"更新余额，需实现金额增减逻辑\"\"\"\\n                self.balance += amount\\n    </div>\\n    <div class=\"footer\">4/8 | 数据集：ClassEval</div>\\n</div>\\n\\n<!-- 实验结果板块：核心发现与对比 -->\\n<div class=\"slide\">\\n    <h2>四、实验结果：模型能力的边界与差异</h2>\\n    <h3>1. 类级 vs 函数级：性能断崖</h3>\\n    <p>所有模型在类级任务中表现显著下降（以 Pass@1 为例）：</p>\\n    <table style=\"width: 70%; margin: 15px 0;\" border=\"1\" cellpadding=\"8\" cellspacing=\"0\">\\n        <tr>\\n            <th>模型</th>\\n            <th>HumanEval（函数级）</th>\\n            <th>ClassEval（类级）</th>\\n            <th>降幅</th>\\n        </tr>\\n        <tr>\\n            <td>GPT-4</td>\\n            <td>85.4%</td>\\n            <td>37.6%</td>\\n            <td>56%</td>\\n        </tr>\\n        <tr>\\n            <td>WizardCoder</td>\\n            <td>59.8%</td>\\n            <td>12.2%</td>\\n            <td>80%</td>\\n        </tr>\\n    </table>\\n    <p>**结论**：类级任务复杂性远超函数级，现有 LLM 系统级编码能力不足。</p>\\n\\n    <h3>2. 生成策略：模型适应性差异</h3>\\n    <p>不同模型对生成策略敏感：</p>\\n    <ul>\\n        <li><strong>GPT-4/GPT-3.5</strong>：<em>整体生成</em> 最优（Pass@5 比增量策略高 9%~14%），长上下文理解优势显著</li>\\n        <li><strong>非 GPT 模型（如 CodeGeeX）</strong>：<em>增量生成</em> 更优（Pass@5 比整体策略高 7%~9%），分步降低认知负荷</li>\\n    </ul>\\n\\n    <h3>3. 依赖生成：字段易，方法难</h3>\\n    <p>模型生成字段依赖（DEP(F)）的能力远强于方法依赖（DEP(M)）：</p>\\n    <div class=\"formula\">\\n        $\\\\text{GPT-4: } \\\\text{DEP}(F)=68.3\\\\%,\\\\ \\\\text{DEP}(M)=38.7\\\\%$  \\n        $\\\\text{WizardCoder: } \\\\text{DEP}(F)=42.1\\\\%,\\\\ \\\\text{DEP}(M)=21.5\\\\%$  \\n    </div>\\n    <p>**结论**：模型对“动态方法调用”的理解显著弱于“静态字段访问”。</p>\\n\\n    <h3>4. 典型错误：依赖理解缺陷</h3>\\n    <p>51.6% 错误为 AttributeError（属性访问错误），示例：</p>\\n    <div class=\"code-block\">\\n        # 错误代码（BMI 计算类）\\n        class BMICalculator:\\n            def __init__(self):\\n                self.bmi_std = [{\"male\": 20.0}, {\"female\": 18.5}]  # 列表存储标准值\\n            \\n            def get_bmi_range(self, gender: str) -> float:\\n                # 错误：将列表按字典访问（应为 self.bmi_std[0][\"male\"]）\\n                return self.bmi_std[gender]  # 引发 KeyError\\n    </div>\\n    <p>**根源**：模型混淆复杂数据结构的依赖访问逻辑。</p>\\n    <div class=\"footer\">5/8 | 实验结果</div>\\n</div>\\n\\n<!-- 改进思路板块：模型、基准、应用 -->\\n<div class=\"slide\">\\n    <h2>五、改进思路：从评估到落地</h2>\\n    <h3>1. 模型能力提升</h3>\\n    <p>针对类级任务短板，可优化：</p>\\n    <ul>\\n        <li><strong>预训练目标</strong>：增加类级依赖建模任务（如多方法协同生成）</li>\\n        <li><strong>提示策略</strong>：设计“类结构分解 + 依赖显式声明”的分步提示，示例：</li>\\n        <div class=\"code-block\">\\n            步骤 1：生成类骨架（含字段、方法签名）  \\n            步骤 2：补充方法体（明确依赖关系：“需访问 self.inventory 字段”）  \\n            步骤 3：验证方法协同逻辑\\n        </div>\\n        <li><strong>反馈机制</strong>：引入代码执行反馈（如自动调试日志），迭代优化生成结果</li>\\n    </ul>\\n\\n    <h3>2. 基准扩展方向</h3>\\n    <p>让 ClassEval 更贴近工业场景：</p>\\n    <ol>\\n        <li>增加 <strong>多类协作任务</strong>（如 MVC 架构中 Controller + Model 协同）</li>\\n        <li>覆盖 <strong>垂直领域</strong>（如 Web 后端、AI 算法类开发）</li>\\n        <li>支持 <strong>多语言扩展</strong>（Java、C++ 等工业语言）</li>\\n    </ol>\\n\\n    <h3>3. 工程化应用探索</h3>\\n    <p>推动研究落地真实开发：</p>\\n    <ul>\\n        <li>在 IDE（如 PyCharm）中集成 <strong>类级代码补全插件</strong>，自动推断依赖关系</li>\\n        <li>开发 <strong>模型选型工具</strong>，根据项目复杂度（类依赖数量）推荐 LLM</li>\\n        <li>构建 <strong>需求-代码全流程工具</strong>：从自然语言需求直接生成类级代码并验证</li>\\n    </ul>\\n    <div class=\"footer\">6/8 | 改进思路</div>\\n</div>\\n\\n<!-- 总结页 -->\\n<div class=\"slide\">\\n    <h2>六、总结：类级代码生成的现在与未来</h2>\\n    <p>1. <strong>现状</strong>：LLM 在类级任务中表现远逊于函数级，依赖处理（尤其是方法调用）是核心短板</p>\\n    <p>2. <strong>价值</strong>：ClassEval 填补类级评估空白，为模型优化与工程应用提供标尺</p>\\n    <p>3. <strong>展望</strong>：通过基准扩展、模型优化、工具落地，推动 LLM 从“代码片段生成”迈向“系统级开发协作”</p>\\n    <div class=\"footer\">7/8 | 总结</div>\\n</div>\\n\\n<!-- 致谢页 -->\\n<div class=\"slide\">\\n    <h1>感谢聆听！</h1>\\n    <p>欢迎交流探讨类级代码生成与 LLM 评估的更多可能</p>\\n    <div class=\"footer\">8/8 | 致谢</div>\\n</div>\\n\\n</body>\\n</html>\\n'"
        },
        "execution_time": 0.01166987419128418,
        "is_functional_test": true
      },
      {
        "case_name": "Convert file with special characters in path",
        "purpose": "测试工具是否能处理包含特殊字符的文件路径",
        "args": {
          "source": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\68078d40e08a19b806665fee_1745325376_auto_driving_system.csv"
        },
        "response": {
          "error": "ToolException: Error executing tool convert_to_markdown: Failed to convert content to Markdown: [Errno 22] Invalid argument: 'auto_driving_id,auto_driving_name,system_version,sensors_count,accuracy_rate,processing_power,software_platform,ai_algorithm,certification\\nADS001,工业级自动导航系统INS2000,v3.5.2,12,98.50,8核16线程,IndustrialOS,深度强化学习,ISO26262认证\\nADS002,激光雷达感知系统LPS1500,v2.8.1,8,97.30,四核处理器,SensorFusion,点云识别算法,CE认证\\nADS003,视觉识别导航系统VRS1200,v4.2.0,6,96.80,图像处理专用芯片,VisionOS,卷积神经网络,FDA认证\\nADS004,多传感器融合系统MSF800,v3.1.5,15,99.20,异构计算平台,FusionCore,多元数据融合,IEC61508认证\\nADS005,人工智能决策系统AID600,v5.0.3,4,95.40,AI加速芯片,DecisionMatrix,决策树算法,ISO9001认证\\nADS006,远程控制系统RCS500,v2.3.7,6,94.70,低延迟处理器,RemoteControlOS,实时控制算法,CE认证\\nADS007,预设路径系统PPS400,v1.9.2,3,92.10,双核控制器,PathPlanner,线性规划算法,工业安全认证\\nADS008,自适应路径规划系统APP700,v3.6.4,10,97.80,多核心处理器,AdaptivePathOS,自适应学习算法,ISO26262认证\\nADS009,智能避障系统IOS900,v4.1.8,14,99.50,专用处理单元,ObstacleOS,动态目标跟踪,CE+FCC认证\\nADS010,高精度定位系统HPS1000,v5.2.1,8,99.90,GNSS处理芯片,PositionEngine,卡尔曼滤波算法,ISO17025认证\\nADS011,无人驾驶控制中心UCC750,v4.3.5,20,98.70,服务器级处理器,ControlHubOS,分布式控制算法,ISO26262认证\\nADS012,矿山专用导航系统MNS600,v3.0.8,12,96.20,防爆型处理器,MineGuideOS,三维地图构建,矿用安全认证\\nADS013,工厂智能调度系统FIS800,v4.1.2,18,98.30,企业级服务器,FactoryControlOS,优化调度算法,ISO9001认证\\nADS014,港口集装箱定位系统CLS500,v2.7.9,16,97.50,FPGA加速,PortLogisticOS,空间定位算法,港口安全认证\\nADS015,仓储机器人控制系统WRS600,v3.8.4,10,96.80,实时处理器,WarehouseRobotOS,群体协作算法,CE认证\\nADS016,农业无人驾驶系统APS400,v2.5.7,8,93.40,低功耗处理器,AgriGuideOS,地形识别算法,农业机械认证\\nADS017,室内导航定位系统INP300,v3.1.6,6,95.20,UWB专用芯片,IndoorNavOS,SLAM算法,CE认证\\nADS018,智能交通管理系统TMS900,v5.3.0,24,99.30,城市级服务器,TrafficControlOS,流量优化算法,ISO17025认证\\nADS019,紧急避险系统EAS500,v4.0.5,15,99.80,实时响应处理器,EmergencyOS,危险预测算法,IEC61508认证\\nADS020,多机协同控制系统MCS800,v4.2.7,30,98.60,集群计算平台,CooperativeOS,分布式协同算法,ISO26262认证\\n'"
        },
        "execution_time": 0.007993221282958984,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 12
}