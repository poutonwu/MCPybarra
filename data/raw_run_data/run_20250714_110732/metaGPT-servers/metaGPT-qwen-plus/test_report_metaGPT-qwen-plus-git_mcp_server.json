{
  "server_name": "git_mcp_server",
  "parent_dir": "metaGPT-qwen-plus",
  "report_name": "metaGPT-qwen-plus-git_mcp_server",
  "server_path": "workspace\\metaGPT-servers\\metaGPT-qwen-plus\\git_mcp_server.py",
  "timestamp": "2025-07-14T11:07:35.334701",
  "tools": [
    {
      "name": "git_init",
      "description": "Initialize a new Git repository.\n\n    Args:\n        path: The directory path where to create the repository.\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_initArguments",
        "type": "object"
      }
    },
    {
      "name": "git_status",
      "description": "Get the status of a Git repository.\n\n    Args:\n        path: Path to the repository.\n\n    Returns:\n        A string containing the status output.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_statusArguments",
        "type": "object"
      }
    },
    {
      "name": "git_add",
      "description": "Add files to the staging area.\n\n    Args:\n        path: Path to the repository.\n        file_pattern: Pattern of files to add (default is all files).\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "file_pattern": {
            "default": ".",
            "title": "File Pattern",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_addArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_unstaged",
      "description": "Show differences in unstaged changes.\n\n    Args:\n        path: Path to the repository.\n\n    Returns:\n        A string containing the diff output.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_diff_unstagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_staged",
      "description": "Show differences in staged changes.\n\n    Args:\n        path: Path to the repository.\n\n    Returns:\n        A string containing the diff output.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_diff_stagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff",
      "description": "Compare two commits or branches.\n\n    Args:\n        path: Path to the repository.\n        commit_range: Range of commits to compare (e.g., 'HEAD~2..HEAD').\n\n    Returns:\n        A string containing the diff output.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "commit_range": {
            "title": "Commit Range",
            "type": "string"
          }
        },
        "required": [
          "path",
          "commit_range"
        ],
        "title": "git_diffArguments",
        "type": "object"
      }
    },
    {
      "name": "git_commit",
      "description": "Commit changes in the repository.\n\n    Args:\n        path: Path to the repository.\n        message: Commit message.\n        author: Optional author name and email (format: 'Name <email>').\n\n    Returns:\n        A string containing the commit hash.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "message": {
            "title": "Message",
            "type": "string"
          },
          "author": {
            "default": null,
            "title": "Author",
            "type": "string"
          }
        },
        "required": [
          "path",
          "message"
        ],
        "title": "git_commitArguments",
        "type": "object"
      }
    },
    {
      "name": "git_reset",
      "description": "Unstage changes in the repository.\n\n    Args:\n        path: Path to the repository.\n        file_path: Optional specific file to unstage. If None, unstages all.\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "file_path": {
            "default": null,
            "title": "File Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_resetArguments",
        "type": "object"
      }
    },
    {
      "name": "git_log",
      "description": "View commit history.\n\n    Args:\n        path: Path to the repository.\n        max_count: Maximum number of commits to show (default: 10).\n\n    Returns:\n        A string containing the commit history.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "max_count": {
            "default": 10,
            "title": "Max Count",
            "type": "integer"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_logArguments",
        "type": "object"
      }
    },
    {
      "name": "git_create_branch",
      "description": "Create a new branch.\n\n    Args:\n        path: Path to the repository.\n        branch_name: Name of the new branch.\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "path",
          "branch_name"
        ],
        "title": "git_create_branchArguments",
        "type": "object"
      }
    },
    {
      "name": "git_checkout",
      "description": "Switch to a different branch.\n\n    Args:\n        path: Path to the repository.\n        branch_name: Name of the branch to switch to.\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "path",
          "branch_name"
        ],
        "title": "git_checkoutArguments",
        "type": "object"
      }
    },
    {
      "name": "git_show",
      "description": "Display details of a specific commit.\n\n    Args:\n        path: Path to the repository.\n        commit_hash: Hash of the commit to show.\n\n    Returns:\n        A string containing the commit details.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "commit_hash": {
            "title": "Commit Hash",
            "type": "string"
          }
        },
        "required": [
          "path",
          "commit_hash"
        ],
        "title": "git_showArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "git_init": [
      {
        "case_name": "Initialize Git Repo in Valid Directory",
        "purpose": "验证git_init工具是否可以在指定的有效路径中正确初始化一个新的Git仓库。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.15739226341247559,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Git Init on Non-Existent Path",
        "purpose": "测试当提供的路径不存在时，是否抛出ValueError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "execution_time": 0.26349782943725586,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repo with Special Characters in Path",
        "purpose": "验证包含特殊字符的路径是否能被git_init工具正确处理。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test!@#$%^&*()_+files"
        },
        "response": {
          "error": "ToolException: Error executing tool git_init: Cmd('git') failed due to: exit code(1)\n  cmdline: git init\n  stderr: 'Failed to initialize repository: [WinError 123] 文件名、目录名或卷标语法不正确。: 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\test!@#$%^&*()_+files''"
        },
        "execution_time": 0.004093170166015625,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Git Init Without Write Permissions",
        "purpose": "模拟用户对目标目录没有写权限的情况，确保工具能够安全地处理权限错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.31566953659057617,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repo in Empty Directory",
        "purpose": "验证在空目录中初始化Git仓库是否成功，且生成正确的.git目录。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir"
        },
        "execution_time": 0.2676100730895996,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Git Init with Null Path",
        "purpose": "测试传递null或空字符串作为路径时是否引发参数验证错误。",
        "args": {
          "path": ""
        },
        "response": {
          "result": "Repository initialized at "
        },
        "execution_time": 0.24028587341308594,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repo and Verify .git Structure",
        "purpose": "验证git_init是否创建了标准的.git目录结构，包括objects、refs等子目录。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_check"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_check"
        },
        "execution_time": 0.2322523593902588,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Git Init in Already Initialized Repository",
        "purpose": "测试在已经存在.git目录的路径中再次执行git_init是否会引发GitCommandError。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "execution_time": 0.21861958503723145,
        "is_functional_test": false
      }
    ],
    "git_status": [
      {
        "case_name": "Get Git Status in Initialized Repository",
        "purpose": "验证git_status工具能否正确获取已初始化Git仓库的状态信息。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\t68078d40e08a19b806665fee_1745325376_auto_driving_system.csv\n\tapp.ico\n\tcs.csv\n\tempty_dir/\n\tincludeempty.csv\n\tinspector.zip\n\tmodules.xml\n\tnature.jpeg\n\tnature_converted.jpeg\n\tnonname.html\n\tpaper1.pdf\n\tpresent.html\n\tre2.doc\n\trepo_check/\n\tsample1.pdf\n\tspreadsheet.csv\n\tswe.pptx\n\ttmp.csv\n\twhole_framework.pdf\n\txue.jpg\n\txue_converted.bmp\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.37726688385009766,
        "is_functional_test": true
      },
      {
        "case_name": "Get Git Status in Non-Initialized Directory",
        "purpose": "测试在未初始化为Git仓库的目录中调用git_status是否抛出GitCommandError。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)"
        },
        "execution_time": 0.2991664409637451,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt Git Status with Invalid Path",
        "purpose": "验证当提供不存在的路径时，git_status是否抛出ValueError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)"
        },
        "execution_time": 0.1820991039276123,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status on Read-Only Repository",
        "purpose": "模拟用户对Git仓库没有写权限的情况，确保git_status能安全地处理权限错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\t68078d40e08a19b806665fee_1745325376_auto_driving_system.csv\n\tapp.ico\n\tcs.csv\n\tempty_dir/\n\tincludeempty.csv\n\tinspector.zip\n\tmodules.xml\n\tnature.jpeg\n\tnature_converted.jpeg\n\tnonname.html\n\tpaper1.pdf\n\tpresent.html\n\tre2.doc\n\trepo_check/\n\tsample1.pdf\n\tspreadsheet.csv\n\tswe.pptx\n\ttmp.csv\n\twhole_framework.pdf\n\txue.jpg\n\txue_converted.bmp\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.19176244735717773,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status with Special Characters in Path",
        "purpose": "验证git_status是否能正确处理包含特殊字符的路径。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test!@#$%^&*()_+files"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test!@#$%^&*()_+files"
        },
        "execution_time": 0.004505157470703125,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status in Nested .git Directory",
        "purpose": "测试在嵌套的.git目录中执行git_status是否会引发预期的错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\hooks"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\hooks"
        },
        "execution_time": 0.003998756408691406,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status with Empty Path",
        "purpose": "验证传递空字符串作为路径时是否引发参数验证错误。",
        "args": {
          "path": ""
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tarxiv_mcp_server_new.py\n\tdata_exploration_mcp_server.py\n\tdoc_processor_mcp_server.py\n\tdocument_mcp_server.py\n\tduckduckgo-mcp.py\n\tfinancial_data_mcp_server.py\n\tflight_mcp_server.py\n\tgit_mcp_server.py\n\thf_mcp_server/\n\timage_convert_mcp_server.py\n\timage_search_mcp_server.py\n\tmarkdown_conversion_mcp_server.py\n\tmcp-everything-search.py\n\tmcp-pdf-tools.py\n\tmcp_cv_server.py\n\tmcp_huggingface_server.py\n\tmongodb_mcp_server.py\n\tmysql_mcp_server.py\n\toutlook_mcp_server.py\n\tpaper_search_mcp_server.py\n\tscreenshot-server.py\n\tssh_mcp_server.py\n\ttavily_search_server.py\n\ttext_file_mcp_server.py\n\tunsplash-mcp-server.py\n\tzotero_mcp_server.py\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.20260882377624512,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status in Newly Initialized Repo",
        "purpose": "在通过git_init新创建的仓库中执行git_status，验证其状态输出是否为空工作区。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_check"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)"
        },
        "execution_time": 0.20193886756896973,
        "is_functional_test": true
      }
    ],
    "git_add": [
      {
        "case_name": "Add All Files in Repository Using Default Pattern",
        "purpose": "验证使用默认文件模式（'.'）是否能成功将所有未跟踪文件添加到暂存区。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.005007505416870117,
        "is_functional_test": true
      },
      {
        "case_name": "Add Specific File to Staging Area",
        "purpose": "测试能否将指定的单个文件添加到Git暂存区。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_pattern": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpeg"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.004999637603759766,
        "is_functional_test": true
      },
      {
        "case_name": "Add Multiple Files Matching Pattern",
        "purpose": "验证git_add是否能正确处理通配符模式，如*.csv，将匹配的多个文件加入暂存区。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_pattern": "*.csv"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.004034519195556641,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Add on Non-Initialized Git Directory",
        "purpose": "测试在未初始化为Git仓库的目录中调用git_add是否会抛出GitCommandError。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir",
          "file_pattern": "."
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir"
        },
        "execution_time": 0.0029981136322021484,
        "is_functional_test": false
      },
      {
        "case_name": "Add Files with Special Characters in Path",
        "purpose": "验证git_add是否能正确处理包含特殊字符的路径中的文件。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test!@#$%^&*()_+files",
          "file_pattern": "."
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test!@#$%^&*()_+files"
        },
        "execution_time": 0.004304647445678711,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Add with Invalid Path",
        "purpose": "测试传递无效路径时是否引发ValueError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "file_pattern": "."
        },
        "response": {
          "result": "Added '.' to staging area in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "execution_time": 0.22953343391418457,
        "is_functional_test": false
      },
      {
        "case_name": "Add Empty Directory",
        "purpose": "验证git_add能否处理空目录的情况，并返回适当的提示信息。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir",
          "file_pattern": "."
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": true
      },
      {
        "case_name": "Add Files Without Write Permissions",
        "purpose": "模拟用户对Git仓库没有写权限的情况，确保工具能够安全地处理权限错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_pattern": "."
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.003501415252685547,
        "is_functional_test": false
      }
    ],
    "git_diff_unstaged": [
      {
        "case_name": "Show Diff for Unstaged Changes in Valid Repo",
        "purpose": "验证git_diff_unstaged是否能正确显示已初始化Git仓库中未暂存的修改差异。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.0055162906646728516,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Git Diff Unstaged on Non-Initialized Directory",
        "purpose": "测试在未初始化为Git仓库的目录中调用git_diff_unstaged是否会抛出GitCommandError。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir"
        },
        "execution_time": 0.004506111145019531,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Unstaged with Invalid Path",
        "purpose": "验证当提供不存在的路径时，git_diff_unstaged是否抛出ValueError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.3027985095977783,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Unstaged with Special Characters in Path",
        "purpose": "验证git_diff_unstaged是否能正确处理包含特殊字符的路径。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test!@#$%^&*()_+files"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test!@#$%^&*()_+files"
        },
        "execution_time": 0.006000995635986328,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Unstaged in Read-Only Repository",
        "purpose": "模拟用户对Git仓库没有写权限的情况，确保git_diff_unstaged能安全地处理权限错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.0050389766693115234,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Unstaged with Empty Path",
        "purpose": "验证传递空字符串作为路径时是否引发参数验证错误。",
        "args": {
          "path": ""
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.30718517303466797,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Unstaged in Nested .git Directory",
        "purpose": "测试在嵌套的.git目录中执行git_diff_unstaged是否会引发预期的错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\hooks"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\hooks"
        },
        "execution_time": 0.0029976367950439453,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Unstaged in Newly Initialized Repo with No Changes",
        "purpose": "在通过git_init新创建且没有任何修改的仓库中执行git_diff_unstaged，验证其输出为空。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_check"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_check"
        },
        "execution_time": 0.003223419189453125,
        "is_functional_test": true
      }
    ],
    "git_commit": [
      {
        "case_name": "Commit Changes in Valid Repository",
        "purpose": "验证git_commit工具是否能在有效的Git仓库中正确提交更改，并返回提交哈希。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Initial commit"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.0050029754638671875,
        "is_functional_test": true
      },
      {
        "case_name": "Commit with Author Specification",
        "purpose": "测试在提交时指定作者信息是否能被正确应用。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Commit with author",
          "author": "John Doe <john.doe@example.com>"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.0025026798248291016,
        "is_functional_test": true
      },
      {
        "case_name": "Commit in Empty Directory",
        "purpose": "验证在空目录中尝试提交是否会抛出错误，因为没有可提交的内容。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir",
          "message": "Empty directory commit"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir"
        },
        "execution_time": 0.00950765609741211,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Invalid Path",
        "purpose": "测试传递无效路径时是否抛出ValueError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "message": "Invalid path commit"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Cmd('git') failed due to: exit code(1)\n  cmdline: git commit -m Invalid path commit\n  stdout: 'On branch master\n\nInitial commit\n\nnothing to commit (create/copy files and use \"git add\" to track)'"
        },
        "execution_time": 0.22813940048217773,
        "is_functional_test": false
      },
      {
        "case_name": "Commit Without Message",
        "purpose": "验证未提供提交消息时是否引发参数验证错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.0040340423583984375,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Special Characters in Message",
        "purpose": "测试提交消息中包含特殊字符是否能被正确处理。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Commit message with !@#$%^&*() characters"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.00500941276550293,
        "is_functional_test": true
      },
      {
        "case_name": "Commit in Read-Only Repository",
        "purpose": "模拟用户对Git仓库没有写权限的情况，确保提交操作能安全地处理权限错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Read-only repository commit"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.005009651184082031,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Long Message",
        "purpose": "测试提交消息长度达到极限时是否能正常提交。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "A very long message: This is a test commit message that exceeds the normal length limit to ensure the tool can handle long messages without any issues. It should be accepted and processed correctly by the git system."
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": true
      }
    ],
    "git_diff_staged": [
      {
        "case_name": "Show Staged Diff in Initialized Repository",
        "purpose": "验证git_diff_staged工具能否在已初始化且有暂存更改的仓库中正确显示差异。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Git Diff Staged on Non-Initialized Directory",
        "purpose": "测试在未初始化为Git仓库的目录中调用git_diff_staged是否抛出GitCommandError。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir"
        },
        "execution_time": 0.004186153411865234,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Staged with Invalid Path",
        "purpose": "验证当提供不存在的路径时，git_diff_staged是否抛出ValueError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.1509244441986084,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Staged in Read-Only Repository",
        "purpose": "模拟用户对Git仓库没有写权限的情况，确保git_diff_staged能安全地处理权限错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Staged with Special Characters in Path",
        "purpose": "验证git_diff_staged是否能正确处理包含特殊字符的路径。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test!@#$%^&*()_+files"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test!@#$%^&*()_+files"
        },
        "execution_time": 0.004169464111328125,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Staged with Empty Path",
        "purpose": "验证传递空字符串作为路径时是否引发参数验证错误。",
        "args": {
          "path": ""
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.23238420486450195,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Staged in Nested .git Directory",
        "purpose": "测试在嵌套的.git目录中执行git_diff_staged是否会引发预期的错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\hooks"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\hooks"
        },
        "execution_time": 0.0035066604614257812,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Staged in Newly Initialized Repo",
        "purpose": "在通过git_init新创建的仓库中执行git_diff_staged，验证其输出是否为空（无暂存更改）。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_check"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_check"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": true
      }
    ],
    "git_log": [
      {
        "case_name": "View Commit History with Default Max Count",
        "purpose": "验证在已初始化的Git仓库中使用默认max_count参数查看提交历史记录是否成功。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.006508588790893555,
        "is_functional_test": true
      },
      {
        "case_name": "View Commit History with Custom Max Count",
        "purpose": "验证用户可以自定义最大显示提交数量来查看提交历史。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "max_count": 5
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.004515886306762695,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt git_log in Non-Initialized Directory",
        "purpose": "测试在未初始化为Git仓库的目录中调用git_log是否会抛出GitCommandError。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir"
        },
        "execution_time": 0.009516716003417969,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt git_log with Invalid Path",
        "purpose": "验证当提供不存在的路径时，git_log是否抛出ValueError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Cmd('git') failed due to: exit code(128)\n  cmdline: git log -n 10\n  stderr: 'fatal: your current branch 'master' does not have any commits yet'"
        },
        "execution_time": 0.2626066207885742,
        "is_functional_test": false
      },
      {
        "case_name": "View Commit History in Repository with Many Commits",
        "purpose": "验证当仓库包含大量提交时，git_log能否正确限制并显示指定数量的提交。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "max_count": 10
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.006739139556884766,
        "is_functional_test": true
      },
      {
        "case_name": "git_log with Special Characters in Path",
        "purpose": "验证git_log是否能正确处理包含特殊字符的路径。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test!@#$%^&*()_+files"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test!@#$%^&*()_+files"
        },
        "execution_time": 0.004998683929443359,
        "is_functional_test": false
      },
      {
        "case_name": "git_log with Max Count Zero",
        "purpose": "测试当max_count设置为0时是否返回空结果或引发错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "max_count": 0
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.00420379638671875,
        "is_functional_test": false
      },
      {
        "case_name": "git_log in Nested .git Directory",
        "purpose": "测试在嵌套的.git子目录中执行git_log是否会引发预期的错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\hooks"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\hooks"
        },
        "execution_time": 0.007519960403442383,
        "is_functional_test": false
      }
    ],
    "git_create_branch": [
      {
        "case_name": "Create New Branch in Initialized Repository",
        "purpose": "验证在已初始化的Git仓库中创建新分支是否成功。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/test-branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.005070924758911133,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Create Branch with Invalid Path",
        "purpose": "测试当提供的路径不存在时，是否抛出ValueError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "branch_name": "invalid/path/branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Cmd('git') failed due to: exit code(128)\n  cmdline: git branch invalid/path/branch\n  stderr: 'fatal: not a valid object name: 'master''"
        },
        "execution_time": 0.39653539657592773,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Special Characters in Name",
        "purpose": "验证包含特殊字符的分支名称是否能被正确处理或返回预期错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/!@#$%^&*()_+"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.0039904117584228516,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch with Empty Branch Name",
        "purpose": "测试传递空字符串作为分支名称是否引发参数验证错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.004503011703491211,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch in Read-Only Repository",
        "purpose": "模拟用户对Git仓库没有写权限的情况，确保工具能够安全地处理权限错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "readonly_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.007004737854003906,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch in Newly Initialized Repo",
        "purpose": "在通过git_init新创建的仓库中创建分支，验证基本功能是否正常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_check",
          "branch_name": "main"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_check"
        },
        "execution_time": 0.004509449005126953,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Create Duplicate Branch",
        "purpose": "测试在已存在同名分支的情况下尝试创建相同名称分支是否会引发GitCommandError。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/test-branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Long Name",
        "purpose": "验证工具是否能正确处理超长分支名称（边界测试）。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "a1234567890b1234567890c1234567890d1234567890e1234567890f1234567890g1234567890h1234567890i1234567890j1234567890k1234567890l1234567890m1234567890n1234567890o1234567890p1234567890q1234567890r1234567890s1234567890t1234567890u1234567890v1234567890w1234567890x1234567890y1234567890z"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.007570743560791016,
        "is_functional_test": true
      }
    ],
    "git_checkout": [
      {
        "case_name": "Checkout to Existing Branch in Valid Repository",
        "purpose": "验证git_checkout能否在有效的Git仓库中切换到已存在的分支。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "develop"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.00500035285949707,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout to Non-Existent Branch",
        "purpose": "测试尝试切换到不存在的分支时是否抛出GitCommandError。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "nonexistent_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.004504680633544922,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout with Invalid Repository Path",
        "purpose": "验证当提供的路径不是有效的Git仓库时是否抛出ValueError。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir",
          "branch_name": "master"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir"
        },
        "execution_time": 0.007004261016845703,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout Using Special Characters in Branch Name",
        "purpose": "测试包含特殊字符的分支名是否能被git_checkout正确处理或拒绝。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/!@#$%^&*"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.008520364761352539,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout with Empty Branch Name",
        "purpose": "验证传递空字符串作为分支名时是否引发参数验证错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.006506681442260742,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout in Read-Only Repository",
        "purpose": "模拟用户对Git仓库没有写权限的情况，确保git_checkout能安全地处理权限错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "master"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.008529186248779297,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout with Long Branch Name",
        "purpose": "测试极长的分支名称是否能被git_checkout正确处理。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "this_is_an_extremely_long_branch_name_that_tests_the_upper_limit_of_git_branch_naming_conventions_and_may_exceed_allowed_length_restrictions_if_not_handled_properly"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.005503416061401367,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout to Detached HEAD State",
        "purpose": "验证git_checkout能否正确进入分离头指针状态（通过提交哈希）。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "a1b2c3d4e5f67890abcdef1234567890abcdef"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.011026620864868164,
        "is_functional_test": true
      }
    ],
    "git_diff": [
      {
        "case_name": "Compare Two Valid Commits in Initialized Repo",
        "purpose": "验证git_diff工具能否正确比较两个有效的提交范围，并返回diff输出。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_range": "HEAD~2..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.009508132934570312,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Git Diff with Invalid Path",
        "purpose": "测试当提供的路径不存在或无效时，git_diff是否抛出ValueError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "commit_range": "HEAD~1..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff HEAD~1..HEAD\n  stderr: 'fatal: ambiguous argument 'HEAD~1..HEAD': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.21632623672485352,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff with Empty Commit Range",
        "purpose": "验证传递空字符串作为commit_range参数时是否引发参数验证错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_range": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.004999399185180664,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff on Read-Only Repository",
        "purpose": "模拟用户对Git仓库没有写权限的情况，确保git_diff能安全地处理只读仓库的diff请求。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_range": "HEAD~1..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.003506898880004883,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff with Special Characters in Path",
        "purpose": "验证git_diff是否能正确处理包含特殊字符的路径。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test!@#$%^&*()_+files",
          "commit_range": "HEAD~1..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test!@#$%^&*()_+files"
        },
        "execution_time": 0.007005214691162109,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Between Non-Existent Commits",
        "purpose": "测试使用不存在的提交哈希进行比较时是否引发GitCommandError。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_range": "invalidhash1..invalidhash2"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.0075130462646484375,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff in Newly Initialized Repo with No Commits",
        "purpose": "在没有提交历史的新建仓库中执行git_diff，验证其是否能优雅处理无提交的情况。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir",
          "commit_range": "HEAD~1..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir"
        },
        "execution_time": 0.0035071372985839844,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Using Branch Names Instead of Commits",
        "purpose": "验证git_diff是否支持通过分支名指定比较范围。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_range": "main..feature-branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.004001140594482422,
        "is_functional_test": true
      }
    ],
    "git_show": [
      {
        "case_name": "Show Details of a Valid Commit",
        "purpose": "验证git_show工具是否能正确显示指定提交的详细信息。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "abc1234"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.004004001617431641,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Show with Invalid Repository Path",
        "purpose": "测试当提供的仓库路径无效时，git_show是否抛出ValueError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "commit_hash": "abc1234"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: Cmd('git') failed due to: exit code(128)\n  cmdline: git show abc1234\n  stderr: 'fatal: ambiguous argument 'abc1234': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.23104357719421387,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit Details in Read-Only Repository",
        "purpose": "验证在只读权限的Git仓库中调用git_show是否会安全处理权限错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "abc1234"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.0065233707427978516,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt Show with Invalid Commit Hash",
        "purpose": "测试使用无效的commit_hash参数时，git_show是否抛出GitCommandError。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "invalidhash123"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.00450444221496582,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit Details with Special Characters in Path",
        "purpose": "验证git_show是否能正确处理包含特殊字符的路径。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test!@#$%^&*()_+files",
          "commit_hash": "abc1234"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test!@#$%^&*()_+files"
        },
        "execution_time": 0.004004955291748047,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Show with Empty Path and Commit Hash",
        "purpose": "测试传递空字符串作为路径和commit_hash参数时是否引发参数验证错误。",
        "args": {
          "path": "",
          "commit_hash": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: Cmd('git') failed due to: exit code(128)\n  cmdline: git show \n  stderr: 'fatal: ambiguous argument '': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.23600125312805176,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit Details in Nested .git Directory",
        "purpose": "测试在嵌套的.git目录中执行git_show是否会引发预期的错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\hooks",
          "commit_hash": "abc1234"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\hooks"
        },
        "execution_time": 0.004302978515625,
        "is_functional_test": false
      },
      {
        "case_name": "Show Latest Commit Details in Newly Initialized Repo",
        "purpose": "在通过git_init新创建的仓库中执行git_show，验证其是否无法找到指定提交（因无历史记录）。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_check",
          "commit_hash": "abc1234"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_check"
        },
        "execution_time": 0.004008769989013672,
        "is_functional_test": true
      }
    ],
    "git_reset": [
      {
        "case_name": "Unstage All Changes in Valid Repository",
        "purpose": "验证git_reset工具在提供有效仓库路径且未指定具体文件时，能否正确取消暂存所有更改。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.004004478454589844,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage Specific File in Valid Repository",
        "purpose": "验证git_reset工具在提供有效仓库路径和特定文件路径时，能否仅取消暂存该文件的更改。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\cs.csv"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.002999544143676758,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Git Reset on Non-Existent Path",
        "purpose": "测试当提供的Git仓库路径不存在时，是否抛出ValueError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "Unstaged all changes in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "execution_time": 0.3382284641265869,
        "is_functional_test": false
      },
      {
        "case_name": "Git Reset with Invalid or Corrupted Repository",
        "purpose": "测试在已损坏或格式不正确的Git仓库中执行git_reset是否会引发GitCommandError。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\hooks"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\hooks"
        },
        "execution_time": 0.005585193634033203,
        "is_functional_test": false
      },
      {
        "case_name": "Git Reset with Special Characters in Path",
        "purpose": "验证git_reset是否能正确处理包含特殊字符的路径，例如!@#$%^&*()等。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test!@#$%^&*()_+files"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test!@#$%^&*()_+files"
        },
        "execution_time": 0.007094383239746094,
        "is_functional_test": true
      },
      {
        "case_name": "Git Reset on Read-Only Repository",
        "purpose": "模拟用户对Git仓库没有写权限的情况，确保git_reset能安全地处理权限错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.004998683929443359,
        "is_functional_test": false
      },
      {
        "case_name": "Git Reset with Empty Path",
        "purpose": "验证传递空字符串作为路径时是否引发参数验证错误。",
        "args": {
          "path": ""
        },
        "response": {
          "result": "Unstaged all changes in "
        },
        "execution_time": 0.4283325672149658,
        "is_functional_test": false
      },
      {
        "case_name": "Git Reset with Null File Path",
        "purpose": "测试当file_path为null时，是否正常执行unstage all操作。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_path": null
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 1 validation error for git_resetArguments\nfile_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.004510164260864258,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 96
}