{
  "server_name": "server",
  "parent_dir": "mongodb_mcp_server_operations_refined",
  "report_name": "mongodb_mcp_server_operations_refined-server",
  "server_path": "workspace\\refinement\\mongodb_mcp_server_operations_refined\\server.py",
  "timestamp": "2025-07-01T18:37:53.992437",
  "tools": [
    {
      "name": "mcp_list_databases",
      "description": "\n    列出MongoDB服务器上的所有数据库。\n\n    Returns:\n        一个包含数据库名称列表的JSON格式字符串。\n\n    示例:\n        >>> mcp_list_databases()\n        '{\"databases\": [\"test_db\", \"admin\", \"local\"]}'\n    ",
      "args_schema": {
        "properties": {},
        "title": "mcp_list_databasesArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_list_collections",
      "description": "\n    列出指定数据库中的所有集合。\n\n    Args:\n        database_name: 数据库名称 (必填)。\n\n    Returns:\n        一个包含集合名称列表的JSON格式字符串。\n\n    Raises:\n        ValueError: 如果数据库名称无效或不存在。\n\n    示例:\n        >>> mcp_list_collections(database_name=\"test_db\")\n        '{\"collections\": [\"users\", \"orders\"]}'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          }
        },
        "required": [
          "database_name"
        ],
        "title": "mcp_list_collectionsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_insert_document",
      "description": "\n    向指定数据库和集合中插入新文档。\n\n    Args:\n        database_name: 数据库名称 (必填)。\n        collection_name: 集合名称 (必填)。\n        document: 要插入的文档数据，必须是一个字典 (必填)。\n\n    Returns:\n        一个包含插入结果的JSON格式字符串。\n\n    Raises:\n        ValueError: 如果数据库、集合名称无效或文档不是字典。\n\n    示例:\n        >>> mcp_insert_document(database_name=\"test_db\", collection_name=\"users\", \n        ...                     document={\"name\": \"Alice\", \"age\": 30})\n        '{\"inserted_id\": \"5f9d1b3b9c9d6e1d9c9d6e1d\"}'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "document": {
            "title": "Document",
            "type": "object"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "document"
        ],
        "title": "mcp_insert_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_find_documents",
      "description": "\n    在指定数据库和集合中查询符合条件的文档。\n\n    Args:\n        database_name: 数据库名称 (必填)。\n        collection_name: 集合名称 (必填)。\n        filter: 查询过滤条件，一个字典 (可选，默认为None，即返回所有文档)。\n        projection: 投影字段，指定要返回的字段 (可选，默认为None，即返回所有字段)。\n        limit: 结果数量限制，0表示无限制 (可选，默认为0)。\n\n    Returns:\n        一个包含查询结果的JSON格式字符串。\n\n    Raises:\n        ValueError: 如果数据库、集合名称无效或参数类型不正确。\n\n    示例:\n        >>> mcp_find_documents(database_name=\"test_db\", collection_name=\"users\",\n        ...                   filter={\"age\": {\"$gt\": 25}}, projection={\"name\": 1}, limit=2)\n        '[{\"_id\": \"5f9d1b3b9c9d6e1d9c9d6e1d\", \"name\": \"Alice\"}]'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "filter": {
            "default": null,
            "title": "Filter",
            "type": "object"
          },
          "projection": {
            "default": null,
            "title": "Projection",
            "type": "object"
          },
          "limit": {
            "default": 0,
            "title": "Limit",
            "type": "integer"
          }
        },
        "required": [
          "database_name",
          "collection_name"
        ],
        "title": "mcp_find_documentsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_update_document",
      "description": "\n    更新指定数据库和集合中的文档。\n\n    Args:\n        database_name: 数据库名称 (必填)。\n        collection_name: 集合名称 (必填)。\n        filter: 更新过滤条件，一个字典 (必填)。\n        update: 更新操作符和值，一个字典 (必填)。\n        multi: 是否更新多个文档 (可选，默认为False，即只更新第一个匹配的文档)。\n\n    Returns:\n        一个包含更新结果的JSON格式字符串。\n\n    Raises:\n        ValueError: 如果数据库、集合名称无效或参数类型不正确。\n\n    示例:\n        >>> mcp_update_document(database_name=\"test_db\", collection_name=\"users\",\n        ...                     filter={\"name\": \"Alice\"}, update={\"$set\": {\"age\": 31}}, multi=False)\n        '{\"matched_count\": 1, \"modified_count\": 1}'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "filter": {
            "title": "Filter",
            "type": "object"
          },
          "update": {
            "title": "Update",
            "type": "object"
          },
          "multi": {
            "default": false,
            "title": "Multi",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "filter",
          "update"
        ],
        "title": "mcp_update_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_delete_document",
      "description": "\n    删除指定数据库和集合中的文档。\n\n    Args:\n        database_name: 数据库名称 (必填)。\n        collection_name: 集合名称 (必填)。\n        filter: 删除过滤条件，一个字典 (必填)。\n        multi: 是否删除多个文档 (可选，默认为False，即只删除第一个匹配的文档)。\n\n    Returns:\n        一个包含删除结果的JSON格式字符串。\n\n    Raises:\n        ValueError: 如果数据库、集合名称无效或参数类型不正确。\n\n    示例:\n        >>> mcp_delete_document(database_name=\"test_db\", collection_name=\"users\",\n        ...                     filter={\"name\": \"Alice\"}, multi=False)\n        '{\"deleted_count\": 1}'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "filter": {
            "title": "Filter",
            "type": "object"
          },
          "multi": {
            "default": false,
            "title": "Multi",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "filter"
        ],
        "title": "mcp_delete_documentArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "mcp_list_databases": [
      {
        "case_name": "List Databases Successfully",
        "purpose": "验证工具能够成功连接到MongoDB并列出所有数据库。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]}"
        },
        "execution_time": 0.006677389144897461,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Database List Response",
        "purpose": "验证当MongoDB服务器上没有数据库时，工具是否能正确返回空列表。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]}"
        },
        "execution_time": 0.006005525588989258,
        "is_functional_test": true
      },
      {
        "case_name": "Database Names with Special Characters",
        "purpose": "验证工具能否正确处理包含特殊字符的数据库名称。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]}"
        },
        "execution_time": 0.0075225830078125,
        "is_functional_test": true
      },
      {
        "case_name": "Database Names in Mixed Case",
        "purpose": "验证工具能否正确列出大小写混合的数据库名称。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]}"
        },
        "execution_time": 0.007527351379394531,
        "is_functional_test": true
      },
      {
        "case_name": "Large Number of Databases",
        "purpose": "验证工具在存在大量数据库时能否正常工作。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]}"
        },
        "execution_time": 0.005235195159912109,
        "is_functional_test": true
      },
      {
        "case_name": "Unauthorized Access Attempt",
        "purpose": "测试未授权用户尝试访问数据库列表时是否会失败。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]}"
        },
        "execution_time": 0.004999399185180664,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid MongoDB Connection",
        "purpose": "验证工具在无法连接到MongoDB时是否能优雅地处理错误。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]}"
        },
        "execution_time": 0.006524801254272461,
        "is_functional_test": false
      },
      {
        "case_name": "Connection Timeout Handling",
        "purpose": "测试工具在MongoDB连接超时时的行为。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]}"
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": false
      },
      {
        "case_name": "Malformed JSON Output",
        "purpose": "验证工具在MongoDB返回非标准JSON格式时能否正确处理。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]}"
        },
        "execution_time": 0.0075130462646484375,
        "is_functional_test": false
      },
      {
        "case_name": "No Network Connectivity",
        "purpose": "测试工具在网络不可用情况下的行为。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]}"
        },
        "execution_time": 0.0035114288330078125,
        "is_functional_test": false
      },
      {
        "case_name": "Maximum Length Database Name",
        "purpose": "测试工具对最大长度数据库名称的支持。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]}"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": false
      },
      {
        "case_name": "Unicode Database Names",
        "purpose": "验证工具是否支持Unicode编码的数据库名称。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]}"
        },
        "execution_time": 0.0049991607666015625,
        "is_functional_test": true
      }
    ],
    "mcp_list_collections": [
      {
        "case_name": "List Collections Successfully",
        "purpose": "验证工具能够成功连接到指定数据库并列出所有集合。",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "{\"collections\": [\"a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\", \"new_collection\", \"test_collection\", \"invalid/collection*name\", \"user_profiles\", \"long_key_collection\", \"special_chars_collection\", \"binary_data_collection\", \"nonexistent_collection\", \"a_very_long_collection_name_that_exceeds_normal_limits_and_might_cause_issues\", \"users\"]}"
        },
        "execution_time": 0.010518074035644531,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Collection List Response",
        "purpose": "验证当指定数据库中没有集合时，工具是否能正确返回空列表。",
        "args": {
          "database_name": "empty_db"
        },
        "response": {
          "result": "{\"error\": \"Failed to list collections: \\u6570\\u636e\\u5e93 'empty_db' \\u4e0d\\u5b58\\u5728\\u3002\"}"
        },
        "execution_time": 0.01050567626953125,
        "is_functional_test": true
      },
      {
        "case_name": "Collection Names with Special Characters",
        "purpose": "验证工具能否正确处理包含特殊字符的集合名称。",
        "args": {
          "database_name": "db_with_special_chars"
        },
        "response": {
          "result": "{\"error\": \"Failed to list collections: \\u6570\\u636e\\u5e93 'db_with_special_chars' \\u4e0d\\u5b58\\u5728\\u3002\"}"
        },
        "execution_time": 0.012531280517578125,
        "is_functional_test": true
      },
      {
        "case_name": "Unauthorized Access to Database Collections",
        "purpose": "测试未授权用户尝试访问数据库集合列表时是否会失败。",
        "args": {
          "database_name": "restricted_db"
        },
        "response": {
          "result": "{\"error\": \"Failed to list collections: \\u6570\\u636e\\u5e93 'restricted_db' \\u4e0d\\u5b58\\u5728\\u3002\"}"
        },
        "execution_time": 0.012041091918945312,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Database Name Input",
        "purpose": "验证工具对无效数据库名称的处理能力，如使用空字符串或非字符串类型。",
        "args": {
          "database_name": ""
        },
        "response": {
          "result": "{\"error\": \"Failed to list collections: 'database_name' \\u5fc5\\u987b\\u662f\\u6709\\u6548\\u7684\\u5b57\\u7b26\\u4e32\\u3002\"}"
        },
        "execution_time": 0.016123294830322266,
        "is_functional_test": false
      },
      {
        "case_name": "Database Does Not Exist",
        "purpose": "验证当指定的数据库不存在时，工具是否抛出ValueError。",
        "args": {
          "database_name": "nonexistent_db"
        },
        "response": {
          "result": "{\"error\": \"Failed to list collections: \\u6570\\u636e\\u5e93 'nonexistent_db' \\u4e0d\\u5b58\\u5728\\u3002\"}"
        },
        "execution_time": 0.05111503601074219,
        "is_functional_test": false
      },
      {
        "case_name": "Maximum Length Database Name",
        "purpose": "测试工具对最大长度数据库名称的支持。",
        "args": {
          "database_name": "a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6A1B2C3D4E5F6G7H8I9J0K1L2M3N4O5P6Q7R8S9T0U1V2W3X4Y5Z"
        },
        "response": {
          "result": "{\"error\": \"Failed to list collections: \\u6570\\u636e\\u5e93 'a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6A1B2C3D4E5F6G7H8I9J0K1L2M3N4O5P6Q7R8S9T0U1V2W3X4Y5Z' \\u4e0d\\u5b58\\u5728\\u3002\"}"
        },
        "execution_time": 0.03410005569458008,
        "is_functional_test": true
      },
      {
        "case_name": "Unicode Database Name Support",
        "purpose": "验证工具是否支持Unicode编码的数据库名称。",
        "args": {
          "database_name": "db@#_测试"
        },
        "response": {
          "result": "{\"collections\": [\"test_collection\"]}"
        },
        "execution_time": 0.03609347343444824,
        "is_functional_test": true
      },
      {
        "case_name": "Large Number of Collections",
        "purpose": "验证工具在存在大量集合时能否正常工作。",
        "args": {
          "database_name": "large_db"
        },
        "response": {
          "result": "{\"collections\": [\"large_collection\"]}"
        },
        "execution_time": 0.0195310115814209,
        "is_functional_test": true
      },
      {
        "case_name": "Connection Timeout Handling",
        "purpose": "测试工具在MongoDB连接超时时的行为。",
        "args": {
          "database_name": "slow_db"
        },
        "response": {
          "result": "{\"error\": \"Failed to list collections: \\u6570\\u636e\\u5e93 'slow_db' \\u4e0d\\u5b58\\u5728\\u3002\"}"
        },
        "execution_time": 0.038075923919677734,
        "is_functional_test": false
      },
      {
        "case_name": "No Network Connectivity",
        "purpose": "测试工具在网络不可用情况下的行为。",
        "args": {
          "database_name": "offline_db"
        },
        "response": {
          "result": "{\"error\": \"Failed to list collections: \\u6570\\u636e\\u5e93 'offline_db' \\u4e0d\\u5b58\\u5728\\u3002\"}"
        },
        "execution_time": 0.018676280975341797,
        "is_functional_test": false
      },
      {
        "case_name": "Malformed JSON Output",
        "purpose": "验证工具在MongoDB返回非标准JSON格式时能否正确处理。",
        "args": {
          "database_name": "malformed_db"
        },
        "response": {
          "result": "{\"error\": \"Failed to list collections: \\u6570\\u636e\\u5e93 'malformed_db' \\u4e0d\\u5b58\\u5728\\u3002\"}"
        },
        "execution_time": 0.041039466857910156,
        "is_functional_test": false
      }
    ],
    "mcp_insert_document": [
      {
        "case_name": "Insert Document Successfully",
        "purpose": "验证工具能够成功将文档插入到指定的数据库和集合中。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "document": {
            "name": "Alice",
            "age": 30
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"6863baf559bb2ac32446e716\"}"
        },
        "execution_time": 0.023520231246948242,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document into Non-Existent Database",
        "purpose": "测试当目标数据库不存在时，工具是否抛出ValueError。",
        "args": {
          "database_name": "nonexistent_db",
          "collection_name": "users",
          "document": {
            "name": "Bob",
            "age": 25
          }
        },
        "response": {
          "result": "{\"error\": \"Failed to insert document: \\u6570\\u636e\\u5e93 'nonexistent_db' \\u4e0d\\u5b58\\u5728\\u3002\"}"
        },
        "execution_time": 0.016471385955810547,
        "is_functional_test": false
      },
      {
        "case_name": "Insert Document into Non-Existent Collection",
        "purpose": "验证即使集合不存在，工具也能在指定数据库中创建新集合并插入文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "new_collection",
          "document": {
            "name": "Charlie",
            "age": 35
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"6863baf559bb2ac32446e717\"}"
        },
        "execution_time": 0.03937220573425293,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Database Name Input",
        "purpose": "验证工具对无效数据库名称（如空字符串）的处理能力。",
        "args": {
          "database_name": "",
          "collection_name": "users",
          "document": {
            "name": "David",
            "age": 40
          }
        },
        "response": {
          "result": "{\"error\": \"Failed to insert document: 'database_name' \\u5fc5\\u987b\\u662f\\u6709\\u6548\\u7684\\u5b57\\u7b26\\u4e32\\u3002\"}"
        },
        "execution_time": 0.018584251403808594,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Collection Name Input",
        "purpose": "验证工具对无效集合名称（如空字符串）的处理能力。",
        "args": {
          "database_name": "test_db",
          "collection_name": "",
          "document": {
            "name": "Eve",
            "age": 28
          }
        },
        "response": {
          "result": "{\"error\": \"Failed to insert document: 'collection_name' \\u5fc5\\u987b\\u662f\\u6709\\u6548\\u7684\\u5b57\\u7b26\\u4e32\\u3002\"}"
        },
        "execution_time": 0.04568052291870117,
        "is_functional_test": false
      },
      {
        "case_name": "Document Not a Dictionary",
        "purpose": "测试当提供的文档不是字典类型时是否会引发ValueError。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "document": "This is not a dictionary"
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_insert_document: 1 validation error for mcp_insert_documentArguments\ndocument\n  Input should be a valid dictionary [type=dict_type, input_value='This is not a dictionary', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/dict_type"
        },
        "execution_time": 0.02475118637084961,
        "is_functional_test": false
      },
      {
        "case_name": "Insert Document with Special Characters in Fields",
        "purpose": "验证工具能否正确处理包含特殊字符的文档字段。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "document": {
            "username": "user@domain.com",
            "bio": "Loves #coding and @testing!"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"6863baf659bb2ac32446e718\"}"
        },
        "execution_time": 0.011588335037231445,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Large Document",
        "purpose": "测试工具在插入大型文档时的行为。",
        "args": {
          "database_name": "test_db",
          "collection_name": "large_data",
          "document": {
            "data": "A very long string that simulates a large document payload for testing purposes. This should be accepted by the tool."
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"6863baf659bb2ac32446e719\"}"
        },
        "execution_time": 0.03281879425048828,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Unicode Document",
        "purpose": "验证工具是否支持插入包含Unicode字符的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "document": {
            "name": "张三",
            "description": "这是一个测试文档。"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"6863baf659bb2ac32446e71a\"}"
        },
        "execution_time": 0.006033420562744141,
        "is_functional_test": true
      },
      {
        "case_name": "Unauthorized Access to Insert Operation",
        "purpose": "测试未授权用户尝试插入文档时是否会失败。",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "sensitive_data",
          "document": {
            "secret": "classified information"
          }
        },
        "response": {
          "result": "{\"error\": \"Failed to insert document: \\u6570\\u636e\\u5e93 'restricted_db' \\u4e0d\\u5b58\\u5728\\u3002\"}"
        },
        "execution_time": 0.011040925979614258,
        "is_functional_test": false
      },
      {
        "case_name": "Connection Timeout During Insert",
        "purpose": "测试工具在MongoDB连接超时时插入文档的行为。",
        "args": {
          "database_name": "slow_db",
          "collection_name": "temp",
          "document": {
            "key": "value"
          }
        },
        "response": {
          "result": "{\"error\": \"Failed to insert document: \\u6570\\u636e\\u5e93 'slow_db' \\u4e0d\\u5b58\\u5728\\u3002\"}"
        },
        "execution_time": 0.02926945686340332,
        "is_functional_test": false
      },
      {
        "case_name": "No Network Connectivity During Insert",
        "purpose": "测试工具在网络不可用情况下尝试插入文档时的行为。",
        "args": {
          "database_name": "offline_db",
          "collection_name": "temp",
          "document": {
            "key": "value"
          }
        },
        "response": {
          "result": "{\"error\": \"Failed to insert document: \\u6570\\u636e\\u5e93 'offline_db' \\u4e0d\\u5b58\\u5728\\u3002\"}"
        },
        "execution_time": 0.028333425521850586,
        "is_functional_test": false
      }
    ],
    "mcp_find_documents": [
      {
        "case_name": "Find All Documents in Collection",
        "purpose": "验证使用默认参数时能否成功查询指定集合中的所有文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users"
        },
        "response": {
          "result": "[{\"_id\": \"6863a58dbf8d3e1acb64790b\", \"name\": \"Grace\", \"age\": 60}, {\"_id\": \"6863baf559bb2ac32446e716\", \"name\": \"Alice\", \"age\": 30}, {\"_id\": \"6863baf659bb2ac32446e718\", \"username\": \"user@domain.com\", \"bio\": \"Loves #coding and @testing!\"}, {\"_id\": \"6863baf659bb2ac32446e71a\", \"name\": \"\\u5f20\\u4e09\", \"description\": \"\\u8fd9\\u662f\\u4e00\\u4e2a\\u6d4b\\u8bd5\\u6587\\u6863\\u3002\"}]"
        },
        "execution_time": 0.007009029388427734,
        "is_functional_test": true
      },
      {
        "case_name": "Find Documents with Filter",
        "purpose": "测试使用过滤条件查询文档的功能，确保工具能正确筛选符合条件的记录。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "age": {
              "$gt": 25
            }
          }
        },
        "response": {
          "result": "[{\"_id\": \"6863a58dbf8d3e1acb64790b\", \"name\": \"Grace\", \"age\": 60}, {\"_id\": \"6863baf559bb2ac32446e716\", \"name\": \"Alice\", \"age\": 30}]"
        },
        "execution_time": 0.009139537811279297,
        "is_functional_test": true
      },
      {
        "case_name": "Find with Projection to Limit Fields",
        "purpose": "验证投影功能是否正常工作，只返回指定字段。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "age": {
              "$gt": 25
            }
          },
          "projection": {
            "name": 1
          }
        },
        "response": {
          "result": "[{\"_id\": \"6863a58dbf8d3e1acb64790b\", \"name\": \"Grace\"}, {\"_id\": \"6863baf559bb2ac32446e716\", \"name\": \"Alice\"}]"
        },
        "execution_time": 0.014520406723022461,
        "is_functional_test": true
      },
      {
        "case_name": "Limit Query Results",
        "purpose": "测试限制查询结果数量的功能，确保工具能正确应用limit参数。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "age": {
              "$gt": 25
            }
          },
          "limit": 2
        },
        "response": {
          "result": "[{\"_id\": \"6863a58dbf8d3e1acb64790b\", \"name\": \"Grace\", \"age\": 60}, {\"_id\": \"6863baf559bb2ac32446e716\", \"name\": \"Alice\", \"age\": 30}]"
        },
        "execution_time": 0.012526750564575195,
        "is_functional_test": true
      },
      {
        "case_name": "Query Non-Existent Database",
        "purpose": "验证当数据库不存在时工具是否会抛出ValueError。",
        "args": {
          "database_name": "nonexistent_db",
          "collection_name": "users"
        },
        "response": {
          "result": "{\"error\": \"Failed to find documents: \\u6570\\u636e\\u5e93 'nonexistent_db' \\u4e0d\\u5b58\\u5728\\u3002\"}"
        },
        "execution_time": 0.007527351379394531,
        "is_functional_test": false
      },
      {
        "case_name": "Query Invalid Database Name",
        "purpose": "测试无效数据库名称（如空字符串）时工具的行为。",
        "args": {
          "database_name": "",
          "collection_name": "users"
        },
        "response": {
          "result": "{\"error\": \"Failed to find documents: 'database_name' \\u5fc5\\u987b\\u662f\\u6709\\u6548\\u7684\\u5b57\\u7b26\\u4e32\\u3002\"}"
        },
        "execution_time": 0.010047435760498047,
        "is_functional_test": false
      },
      {
        "case_name": "Query Non-Existent Collection",
        "purpose": "验证当集合不存在时工具是否能正确处理该情况。",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection"
        },
        "response": {
          "result": "[{\"_id\": \"686395fe8bb57d80cdb0c4a3\", \"key\": \"value\"}]"
        },
        "execution_time": 0.005542755126953125,
        "is_functional_test": false
      },
      {
        "case_name": "Query with Invalid Filter Format",
        "purpose": "测试传递非字典类型的filter参数时工具是否会抛出异常。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": "invalid_filter_string"
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_find_documents: 1 validation error for mcp_find_documentsArguments\nfilter\n  Input should be a valid dictionary [type=dict_type, input_value='invalid_filter_string', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/dict_type"
        },
        "execution_time": 0.0069997310638427734,
        "is_functional_test": false
      },
      {
        "case_name": "Query with Special Characters in Filter",
        "purpose": "验证工具是否支持在查询条件中使用特殊字符。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "username": "user@domain.com"
          }
        },
        "response": {
          "result": "[{\"_id\": \"6863baf659bb2ac32446e718\", \"username\": \"user@domain.com\", \"bio\": \"Loves #coding and @testing!\"}]"
        },
        "execution_time": 0.00407862663269043,
        "is_functional_test": true
      },
      {
        "case_name": "Query Unicode Data",
        "purpose": "验证工具能否正确查询包含Unicode字符的数据。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "name": "张三"
          }
        },
        "response": {
          "result": "[{\"_id\": \"6863baf659bb2ac32446e71a\", \"name\": \"\\u5f20\\u4e09\", \"description\": \"\\u8fd9\\u662f\\u4e00\\u4e2a\\u6d4b\\u8bd5\\u6587\\u6863\\u3002\"}]"
        },
        "execution_time": 0.005533695220947266,
        "is_functional_test": true
      },
      {
        "case_name": "Query with Maximum Limit Value",
        "purpose": "测试最大允许的limit值，确保工具不会因过大数值而崩溃。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "limit": 100000
        },
        "response": {
          "result": "[{\"_id\": \"6863a58dbf8d3e1acb64790b\", \"name\": \"Grace\", \"age\": 60}, {\"_id\": \"6863baf559bb2ac32446e716\", \"name\": \"Alice\", \"age\": 30}, {\"_id\": \"6863baf659bb2ac32446e718\", \"username\": \"user@domain.com\", \"bio\": \"Loves #coding and @testing!\"}, {\"_id\": \"6863baf659bb2ac32446e71a\", \"name\": \"\\u5f20\\u4e09\", \"description\": \"\\u8fd9\\u662f\\u4e00\\u4e2a\\u6d4b\\u8bd5\\u6587\\u6863\\u3002\"}]"
        },
        "execution_time": 0.008243083953857422,
        "is_functional_test": true
      },
      {
        "case_name": "Unauthorized Access to Query Operation",
        "purpose": "测试未授权用户尝试查询数据时是否会失败。",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "sensitive_data"
        },
        "response": {
          "result": "{\"error\": \"Failed to find documents: \\u6570\\u636e\\u5e93 'restricted_db' \\u4e0d\\u5b58\\u5728\\u3002\"}"
        },
        "execution_time": 0.0041310787200927734,
        "is_functional_test": false
      }
    ],
    "mcp_update_document": [
      {
        "case_name": "Update Single Document Successfully",
        "purpose": "验证工具能够成功更新指定数据库和集合中的单个文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "name": "Alice"
          },
          "update": {
            "$set": {
              "age": 31
            }
          },
          "multi": false
        },
        "response": {
          "result": "{\"matched_count\": 1, \"modified_count\": 1}"
        },
        "execution_time": 0.024102210998535156,
        "is_functional_test": true
      },
      {
        "case_name": "Update Multiple Documents Successfully",
        "purpose": "验证当设置 multi=True 时，工具能够更新所有匹配的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "age": {
              "$gt": 25
            }
          },
          "update": {
            "$inc": {
              "age": 1
            }
          },
          "multi": true
        },
        "response": {
          "result": "{\"matched_count\": 2, \"modified_count\": 2}"
        },
        "execution_time": 0.033123016357421875,
        "is_functional_test": true
      },
      {
        "case_name": "Update Document with Invalid Database Name",
        "purpose": "测试使用无效数据库名称时是否会抛出ValueError。",
        "args": {
          "database_name": "",
          "collection_name": "users",
          "filter": {
            "name": "Alice"
          },
          "update": {
            "$set": {
              "age": 31
            }
          },
          "multi": false
        },
        "response": {
          "result": "{\"error\": \"Failed to update document: 'database_name' \\u5fc5\\u987b\\u662f\\u6709\\u6548\\u7684\\u5b57\\u7b26\\u4e32\\u3002\"}"
        },
        "execution_time": 0.017700672149658203,
        "is_functional_test": false
      },
      {
        "case_name": "Update Document in Non-Existent Collection",
        "purpose": "验证工具能否处理目标集合不存在的情况。",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "filter": {
            "name": "Bob"
          },
          "update": {
            "$set": {
              "status": "inactive"
            }
          },
          "multi": false
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.017162561416625977,
        "is_functional_test": false
      },
      {
        "case_name": "Update Document with Special Characters in Filter",
        "purpose": "验证工具是否支持在过滤条件中使用特殊字符。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "username": "user@domain.com"
          },
          "update": {
            "$set": {
              "verified": true
            }
          },
          "multi": false
        },
        "response": {
          "result": "{\"matched_count\": 1, \"modified_count\": 1}"
        },
        "execution_time": 0.02158665657043457,
        "is_functional_test": true
      },
      {
        "case_name": "Update Document with Unicode Characters",
        "purpose": "验证工具是否支持包含Unicode字符的文档更新。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "name": "张三"
          },
          "update": {
            "$set": {
              "description": "已更新的测试文档。"
            }
          },
          "multi": false
        },
        "response": {
          "result": "{\"matched_count\": 1, \"modified_count\": 1}"
        },
        "execution_time": 0.01925945281982422,
        "is_functional_test": true
      },
      {
        "case_name": "Unauthorized Access to Update Operation",
        "purpose": "测试未授权用户尝试更新文档时是否会失败。",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "sensitive_data",
          "filter": {
            "secret": "classified"
          },
          "update": {
            "$set": {
              "access": "denied"
            }
          },
          "multi": false
        },
        "response": {
          "result": "{\"error\": \"Failed to update document: \\u6570\\u636e\\u5e93 'restricted_db' \\u4e0d\\u5b58\\u5728\\u3002\"}"
        },
        "execution_time": 0.0226137638092041,
        "is_functional_test": false
      },
      {
        "case_name": "Update Document with Maximum Length Database Name",
        "purpose": "测试最大长度数据库名称的支持情况。",
        "args": {
          "database_name": "a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6A1B2C3D4E5F6G7H8I9J0K1L2M3N4O5P6Q7R8S9T0U1V2W3X4Y5Z",
          "collection_name": "users",
          "filter": {
            "name": "Alice"
          },
          "update": {
            "$set": {
              "age": 31
            }
          },
          "multi": false
        },
        "response": {
          "result": "{\"error\": \"Failed to update document: \\u6570\\u636e\\u5e93 'a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6A1B2C3D4E5F6G7H8I9J0K1L2M3N4O5P6Q7R8S9T0U1V2W3X4Y5Z' \\u4e0d\\u5b58\\u5728\\u3002\"}"
        },
        "execution_time": 0.021023988723754883,
        "is_functional_test": true
      },
      {
        "case_name": "Update Document with Empty Filter",
        "purpose": "验证空过滤器是否会导致更新失败或更新意外文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {},
          "update": {
            "$set": {
              "flag": "updated_all"
            }
          },
          "multi": true
        },
        "response": {
          "result": "{\"error\": \"Failed to update document: 'filter' \\u5fc5\\u987b\\u662f\\u4e00\\u4e2a\\u6709\\u6548\\u7684\\u5b57\\u5178\\u3002\"}"
        },
        "execution_time": 0.02572321891784668,
        "is_functional_test": true
      },
      {
        "case_name": "Update Document with Invalid Update Operator",
        "purpose": "测试传递非字典类型的update参数时是否会抛出异常。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "name": "Alice"
          },
          "update": "invalid_update_string",
          "multi": false
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_update_document: 1 validation error for mcp_update_documentArguments\nupdate\n  Input should be a valid dictionary [type=dict_type, input_value='invalid_update_string', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/dict_type"
        },
        "execution_time": 0.03770923614501953,
        "is_functional_test": false
      }
    ],
    "mcp_delete_document": [
      {
        "case_name": "Delete Single Document Successfully",
        "purpose": "验证工具能够成功删除指定数据库和集合中的单个文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "name": "Alice"
          },
          "multi": false
        },
        "response": {
          "result": "{\"deleted_count\": 1}"
        },
        "execution_time": 0.015505552291870117,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Multiple Documents Successfully",
        "purpose": "验证当 multi=True 时，工具能够删除所有匹配的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "age": {
              "$gt": 25
            }
          },
          "multi": true
        },
        "response": {
          "result": "{\"deleted_count\": 1}"
        },
        "execution_time": 0.031049251556396484,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Document with Invalid Database Name",
        "purpose": "测试使用无效数据库名称（如空字符串）是否会抛出ValueError。",
        "args": {
          "database_name": "",
          "collection_name": "users",
          "filter": {
            "name": "Alice"
          }
        },
        "response": {
          "result": "{\"error\": \"Failed to delete document: 'database_name' \\u5fc5\\u987b\\u662f\\u6709\\u6548\\u7684\\u5b57\\u7b26\\u4e32\\u3002\"}"
        },
        "execution_time": 0.044048309326171875,
        "is_functional_test": false
      },
      {
        "case_name": "Delete Document in Non-Existent Collection",
        "purpose": "验证工具能否处理目标集合不存在的情况。",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "filter": {
            "name": "Bob"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.01701521873474121,
        "is_functional_test": false
      },
      {
        "case_name": "Delete Document with Special Characters in Filter",
        "purpose": "验证工具是否支持在过滤条件中使用特殊字符。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "username": "user@domain.com"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 1}"
        },
        "execution_time": 0.030555248260498047,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Document with Unicode Characters",
        "purpose": "验证工具是否支持包含Unicode字符的文档删除。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "name": "张三"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 1}"
        },
        "execution_time": 0.0350644588470459,
        "is_functional_test": true
      },
      {
        "case_name": "Unauthorized Access to Delete Operation",
        "purpose": "测试未授权用户尝试删除文档时是否会失败。",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "sensitive_data",
          "filter": {
            "secret": "classified"
          }
        },
        "response": {
          "result": "{\"error\": \"Failed to delete document: \\u6570\\u636e\\u5e93 'restricted_db' \\u4e0d\\u5b58\\u5728\\u3002\"}"
        },
        "execution_time": 0.021033287048339844,
        "is_functional_test": false
      },
      {
        "case_name": "Delete Document with Maximum Length Database Name",
        "purpose": "测试最大长度数据库名称的支持情况。",
        "args": {
          "database_name": "a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6A1B2C3D4E5F6G7H8I9J0K1L2M3N4O5P6Q7R8S9T0U1V2W3X4Y5Z",
          "collection_name": "users",
          "filter": {
            "name": "Alice"
          }
        },
        "response": {
          "result": "{\"error\": \"Failed to delete document: \\u6570\\u636e\\u5e93 'a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6A1B2C3D4E5F6G7H8I9J0K1L2M3N4O5P6Q7R8S9T0U1V2W3X4Y5Z' \\u4e0d\\u5b58\\u5728\\u3002\"}"
        },
        "execution_time": 0.012006282806396484,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Document with Empty Filter",
        "purpose": "验证空过滤器是否会导致删除操作失败或误删文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {}
        },
        "response": {
          "result": "{\"error\": \"Failed to delete document: 'filter' \\u5fc5\\u987b\\u662f\\u4e00\\u4e2a\\u6709\\u6548\\u7684\\u5b57\\u5178\\u3002\"}"
        },
        "execution_time": 0.026021718978881836,
        "is_functional_test": false
      },
      {
        "case_name": "Delete Document with Invalid Filter Format",
        "purpose": "测试传递非字典类型的filter参数时是否会抛出异常。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": "invalid_filter_string"
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_delete_document: 1 validation error for mcp_delete_documentArguments\nfilter\n  Input should be a valid dictionary [type=dict_type, input_value='invalid_filter_string', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/dict_type"
        },
        "execution_time": 0.039589881896972656,
        "is_functional_test": false
      },
      {
        "case_name": "Delete Document in Non-Existent Database",
        "purpose": "验证当数据库不存在时工具是否会抛出ValueError。",
        "args": {
          "database_name": "nonexistent_db",
          "collection_name": "users",
          "filter": {
            "name": "Alice"
          }
        },
        "response": {
          "result": "{\"error\": \"Failed to delete document: \\u6570\\u636e\\u5e93 'nonexistent_db' \\u4e0d\\u5b58\\u5728\\u3002\"}"
        },
        "execution_time": 0.029534578323364258,
        "is_functional_test": false
      },
      {
        "case_name": "Delete Document with Multi Set to Default (False)",
        "purpose": "验证默认值 multi=False 是否只删除第一个匹配的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "age": 30
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.026047468185424805,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 70
}