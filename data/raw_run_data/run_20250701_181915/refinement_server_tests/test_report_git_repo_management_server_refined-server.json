{
  "server_name": "server",
  "parent_dir": "git_repo_management_server_refined",
  "report_name": "git_repo_management_server_refined-server",
  "server_path": "workspace\\refinement\\git_repo_management_server_refined\\server.py",
  "timestamp": "2025-07-01T18:34:10.995987",
  "tools": [
    {
      "name": "git_init",
      "description": "初始化一个新的Git仓库。\n    \n    Args:\n        repo_path: 要初始化的仓库路径。该路径必须在允许的操作目录范围内。\n        \n    Returns:\n        成功消息。\n        \n    Raises:\n        ValueError: 如果路径无效、不在允许的目录范围或初始化失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_initArguments",
        "type": "object"
      }
    },
    {
      "name": "git_status",
      "description": "查看仓库状态。\n    \n    Args:\n        repo_path: 仓库路径。该路径必须在允许的操作目录范围内。\n        \n    Returns:\n        返回仓库状态信息。\n        \n    Raises:\n        ValueError: 如果路径无效、不是Git仓库、不在允许的目录范围或命令执行失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_statusArguments",
        "type": "object"
      }
    },
    {
      "name": "git_add",
      "description": "将文件添加到暂存区。\n    \n    Args:\n        repo_path: 仓库路径。该路径必须在允许的操作目录范围内。\n        file_path: 要添加的文件路径。该路径必须是仓库中的有效文件。\n        \n    Returns:\n        成功消息。\n        \n    Raises:\n        ValueError: 如果路径无效、文件不存在、不在允许的目录范围或添加失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "file_path": {
            "title": "File Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "file_path"
        ],
        "title": "git_addArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_unstaged",
      "description": "查看未暂存的差异。\n    \n    Args:\n        repo_path: 仓库路径。该路径必须在允许的操作目录范围内。\n        \n    Returns:\n        返回未暂存的差异信息。\n        \n    Raises:\n        ValueError: 如果路径无效、不是Git仓库、不在允许的目录范围或命令执行失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_diff_unstagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_staged",
      "description": "查看已暂存的差异。\n    \n    Args:\n        repo_path: 仓库路径。该路径必须在允许的操作目录范围内。\n        \n    Returns:\n        返回已暂存的差异信息。\n        \n    Raises:\n        ValueError: 如果路径无效、不是Git仓库、不在允许的目录范围或命令执行失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_diff_stagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff",
      "description": "比较两个提交之间的差异。\n    \n    Args:\n        repo_path: 仓库路径。该路径必须在允许的操作目录范围内。\n        commit1: 第一个提交哈希或分支名。\n        commit2: 第二个提交哈希或分支名。\n        \n    Returns:\n        返回两个提交之间的差异信息。\n        \n    Raises:\n        ValueError: 如果路径无效、不在允许的目录范围、提交无效或命令执行失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "commit1": {
            "title": "Commit1",
            "type": "string"
          },
          "commit2": {
            "title": "Commit2",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "commit1",
          "commit2"
        ],
        "title": "git_diffArguments",
        "type": "object"
      }
    },
    {
      "name": "git_commit",
      "description": "提交更改。\n    \n    Args:\n        repo_path: 仓库路径。该路径必须在允许的操作目录范围内。\n        message: 提交信息。\n        \n    Returns:\n        成功消息。\n        \n    Raises:\n        ValueError: 如果路径无效、没有更改要提交、不在允许的目录范围或提交失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "message": {
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "message"
        ],
        "title": "git_commitArguments",
        "type": "object"
      }
    },
    {
      "name": "git_reset",
      "description": "取消暂存文件。\n    \n    Args:\n        repo_path: 仓库路径。该路径必须在允许的操作目录范围内。\n        file_path: 要取消暂存的文件路径。\n        \n    Returns:\n        成功消息。\n        \n    Raises:\n        ValueError: 如果路径无效、文件不在暂存区、不在允许的目录范围或操作失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "file_path": {
            "title": "File Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "file_path"
        ],
        "title": "git_resetArguments",
        "type": "object"
      }
    },
    {
      "name": "git_log",
      "description": "查看提交历史。\n    \n    Args:\n        repo_path: 仓库路径。该路径必须在允许的操作目录范围内。\n        \n    Returns:\n        返回提交历史信息。\n        \n    Raises:\n        ValueError: 如果路径无效、不在允许的目录范围或命令执行失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_logArguments",
        "type": "object"
      }
    },
    {
      "name": "git_create_branch",
      "description": "创建新分支。\n    \n    Args:\n        repo_path: 仓库路径。该路径必须在允许的操作目录范围内。\n        branch_name: 新分支名称。\n        \n    Returns:\n        成功消息。\n        \n    Raises:\n        ValueError: 如果路径无效、分支已存在、不在允许的目录范围或创建失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "branch_name"
        ],
        "title": "git_create_branchArguments",
        "type": "object"
      }
    },
    {
      "name": "git_checkout",
      "description": "切换分支。\n    \n    Args:\n        repo_path: 仓库路径。该路径必须在允许的操作目录范围内。\n        branch_name: 要切换的分支名称。\n        \n    Returns:\n        成功消息。\n        \n    Raises:\n        ValueError: 如果路径无效、分支不存在、不在允许的目录范围或切换失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "branch_name"
        ],
        "title": "git_checkoutArguments",
        "type": "object"
      }
    },
    {
      "name": "git_show",
      "description": "显示提交的详细内容。\n    \n    Args:\n        repo_path: 仓库路径。该路径必须在允许的操作目录范围内。\n        commit_hash: 提交哈希值。\n        \n    Returns:\n        返回提交的详细信息。\n        \n    Raises:\n        ValueError: 如果路径无效、提交哈希无效、不在允许的目录范围或获取失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "commit_hash": {
            "title": "Commit Hash",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "commit_hash"
        ],
        "title": "git_showArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "git_init": [
      {
        "case_name": "Basic Git Init Success",
        "purpose": "验证在合法路径下初始化Git仓库的基本功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "response": {
          "result": "仓库已成功初始化在: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "execution_time": 0.16582918167114258,
        "is_functional_test": true
      },
      {
        "case_name": "Git Init With Chinese Path",
        "purpose": "验证在包含中文字符的合法路径中初始化Git仓库的功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\中文文件名.docx"
        },
        "response": {
          "result": "仓库已成功初始化在: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\中文文件名.docx"
        },
        "execution_time": 0.1378161907196045,
        "is_functional_test": true
      },
      {
        "case_name": "Git Init On Existing Repo",
        "purpose": "验证尝试在已经存在.git目录的路径中初始化Git仓库的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git"
        },
        "response": {
          "result": "仓库已成功初始化在: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git"
        },
        "execution_time": 0.12884879112243652,
        "is_functional_test": true
      },
      {
        "case_name": "Git Init With Long Branch Name",
        "purpose": "验证使用超长分支名称初始化仓库时的兼容性与健壮性",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\refs\\heads\\a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6A1B2C3D4E5F6G7H8I9J0K1L2M3N4O5P6Q7R8S9T0U1V2W3X4Y5Z"
        },
        "response": {
          "result": "仓库已成功初始化在: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\refs\\heads\\a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6A1B2C3D4E5F6G7H8I9J0K1L2M3N4O5P6Q7R8S9T0U1V2W3X4Y5Z"
        },
        "execution_time": 0.13360309600830078,
        "is_functional_test": true
      },
      {
        "case_name": "Git Init With Special Characters In Branch",
        "purpose": "验证使用特殊字符分支名称初始化仓库时的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\refs\\heads\\特性\\新功能"
        },
        "response": {
          "result": "仓库已成功初始化在: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\refs\\heads\\特性\\新功能"
        },
        "execution_time": 0.29091668128967285,
        "is_functional_test": true
      },
      {
        "case_name": "Git Init With Trailing Space In Branch",
        "purpose": "验证在包含尾随空格的分支路径中初始化仓库的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\refs\\heads\\trailing-space-branch"
        },
        "response": {
          "result": "仓库已成功初始化在: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\refs\\heads\\trailing-space-branch"
        },
        "execution_time": 0.14556479454040527,
        "is_functional_test": true
      },
      {
        "case_name": "Git Init With Invalid Path",
        "purpose": "验证传递非法路径时工具是否正确抛出ValueError",
        "args": {
          "repo_path": "D:\\invalid\\path\\that\\does\\not\\exist"
        },
        "response": {
          "error": "ToolException: Error executing tool git_init: 仓库初始化失败: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: D:\\invalid\\path\\that\\does\\not\\exist"
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": false
      },
      {
        "case_name": "Git Init With File Instead Of Directory",
        "purpose": "验证传递一个文件而非目录路径时是否正确处理错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg"
        },
        "response": {
          "error": "ToolException: Error executing tool git_init: 仓库初始化失败: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg"
        },
        "execution_time": 0.004511356353759766,
        "is_functional_test": false
      },
      {
        "case_name": "Git Init With Read Only Directory",
        "purpose": "模拟尝试在只读目录中初始化Git仓库以测试权限处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir"
        },
        "response": {
          "result": "仓库已成功初始化在: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir"
        },
        "execution_time": 0.17629051208496094,
        "is_functional_test": false
      },
      {
        "case_name": "Git Init With Very Long Path",
        "purpose": "验证超长路径是否能被正常处理，防止缓冲区溢出等安全问题",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\subdir_document.docx\\this_is_a_very_long_suffix_that_exceeds_normal_length_limits_and_tests_the_maximum_allowed_size_for_suffix_in_the_tool_implementation_it_should_be_accepted_if_within_system_constraints.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_init: 仓库初始化失败: 无法初始化仓库: Cmd('git') not found due to: NotADirectoryError('[WinError 267] 目录名称无效。')\n  cmdline: git init"
        },
        "execution_time": 0.004483461380004883,
        "is_functional_test": true
      },
      {
        "case_name": "Git Init With Nested Subdirectory",
        "purpose": "验证嵌套子目录中的仓库初始化行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\subdir_document.docx"
        },
        "response": {
          "result": "仓库已成功初始化在: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\subdir_document.docx"
        },
        "execution_time": 0.17387700080871582,
        "is_functional_test": true
      },
      {
        "case_name": "Git Init With Git Hooks Directory",
        "purpose": "验证.git/hooks目录中初始化仓库的行为（安全性相关）",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\hooks"
        },
        "response": {
          "result": "仓库已成功初始化在: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\hooks"
        },
        "execution_time": 0.1391584873199463,
        "is_functional_test": false
      }
    ],
    "git_status": [
      {
        "case_name": "Basic Git Status Success",
        "purpose": "验证在合法路径下查看Git仓库状态的基本功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)"
        },
        "execution_time": 0.16721868515014648,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status With Chinese Path",
        "purpose": "验证在包含中文字符的合法路径中查看Git仓库状态的功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\中文文件名.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\中文文件名.docx"
        },
        "execution_time": 0.003911018371582031,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status On Existing Subdirectory Repo",
        "purpose": "验证嵌套子目录中的仓库状态查看行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\subdir_document.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\subdir_document.docx"
        },
        "execution_time": 0.005000591278076172,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status With Read Only Directory",
        "purpose": "验证只读目录中查看仓库状态的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)"
        },
        "execution_time": 0.19517230987548828,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status With Invalid Path",
        "purpose": "验证传递非法路径时工具是否正确抛出ValueError",
        "args": {
          "repo_path": "D:\\invalid\\path\\that\\does\\not\\exist"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: D:\\invalid\\path\\that\\does\\not\\exist"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status With File Instead Of Directory",
        "purpose": "验证传递一个文件而非目录路径时是否正确处理错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg"
        },
        "execution_time": 0.008509159088134766,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status In Nested Git Directory",
        "purpose": "验证多层.git目录中查看仓库状态的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\.git"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tHEAD\n\tconfig\n\tdescription\n\thooks/\n\tinfo/\n\trefs/\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.354856014251709,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status With Very Long Path",
        "purpose": "验证超长路径是否能被正常处理，防止缓冲区溢出等安全问题",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\subdir_document.docx\\this_is_a_very_long_suffix_that_exceeds_normal_length_limits_and_tests_the_maximum_allowed_size_for_suffix_in_the_tool_implementation_it_should_be_accepted_if_within_system_constraints.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\subdir_document.docx\\this_is_a_very_long_suffix_that_exceeds_normal_length_limits_and_tests_the_maximum_allowed_size_for_suffix_in_the_tool_implementation_it_should_be_accepted_if_within_system_constraints.docx"
        },
        "execution_time": 0.004998922348022461,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status In Hooks Directory",
        "purpose": "验证在.git/hooks目录中查看仓库状态的行为（安全性相关）",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\hooks"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tapplypatch-msg.sample\n\tcommit-msg.sample\n\tfsmonitor-watchman.sample\n\tpost-update.sample\n\tpre-applypatch.sample\n\tpre-commit.sample\n\tpre-merge-commit.sample\n\tpre-push.sample\n\tpre-rebase.sample\n\tpre-receive.sample\n\tprepare-commit-msg.sample\n\tpush-to-checkout.sample\n\tsendemail-validate.sample\n\tupdate.sample\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.16916394233703613,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status With Special Characters In Path",
        "purpose": "验证使用特殊字符路径查看仓库状态时的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\refs\\heads\\特性\\新功能"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)"
        },
        "execution_time": 0.18200039863586426,
        "is_functional_test": true
      }
    ],
    "git_add": [
      {
        "case_name": "Basic Git Add Success",
        "purpose": "验证在合法路径下将文件添加到暂存区的基本功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: 文件添加失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git add D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg\n  stderr: 'fatal: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg: 'D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg' is outside repository at 'D:/devWorkspace/MCPServer-Generator/testSystem/testFiles/new_repo''"
        },
        "execution_time": 0.20446109771728516,
        "is_functional_test": true
      },
      {
        "case_name": "Git Add With Chinese Path And File",
        "purpose": "验证在包含中文字符的合法路径中将中文命名文件添加到暂存区的功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文档.docx",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文档.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文档.docx"
        },
        "execution_time": 0.005005598068237305,
        "is_functional_test": true
      },
      {
        "case_name": "Git Add In Nested Subdirectory Repo",
        "purpose": "验证嵌套子目录仓库中添加文件到暂存区的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\refs\\heads\\特性\\新功能",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\智能软件工.pptx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: 文件添加失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git add D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\智能软件工.pptx\n  stderr: 'fatal: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\智能软件工.pptx: 'D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\智能软件工.pptx' is outside repository at 'D:/devWorkspace/MCPServer-Generator/testSystem/testFiles/new_repo/.git/refs/heads/特性/新功能''"
        },
        "execution_time": 0.2167520523071289,
        "is_functional_test": true
      },
      {
        "case_name": "Git Add To Read Only Directory",
        "purpose": "验证尝试向只读目录中的仓库添加文件时是否能正确处理权限问题",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: 文件添加失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git add D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg\n  stderr: 'fatal: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg: 'D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg' is outside repository at 'D:/devWorkspace/MCPServer-Generator/testSystem/testFiles/read_only_dir''"
        },
        "execution_time": 0.20520305633544922,
        "is_functional_test": false
      },
      {
        "case_name": "Git Add With Invalid Repo Path",
        "purpose": "验证传递非法仓库路径时工具是否正确抛出ValueError",
        "args": {
          "repo_path": "D:\\invalid\\path\\that\\does\\not\\exist",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: D:\\invalid\\path\\that\\does\\not\\exist"
        },
        "execution_time": 0.0070056915283203125,
        "is_functional_test": false
      },
      {
        "case_name": "Git Add With Invalid File Path",
        "purpose": "验证传递非法文件路径时工具是否正确抛出ValueError",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "file_path": "D:\\invalid\\file\\path\\does_not_exist.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: D:\\invalid\\file\\path\\does_not_exist.txt"
        },
        "execution_time": 0.0045053958892822266,
        "is_functional_test": false
      },
      {
        "case_name": "Git Add With File Instead Of Directory As Repo",
        "purpose": "验证传递一个文件而非目录作为仓库路径时是否正确处理错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg"
        },
        "execution_time": 0.007522106170654297,
        "is_functional_test": false
      },
      {
        "case_name": "Git Add With Very Long File Path",
        "purpose": "验证超长文件路径是否能被正常处理，防止缓冲区溢出等安全问题",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\this_is_a_very_long_filename_that_exceeds_normal_length_limits_and_tests_the_maximum_allowed_size_for_filenames_in_the_tool_implementation_it_should_be_accepted_if_within_system_constraints.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: 文件添加失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git add D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\this_is_a_very_long_filename_that_exceeds_normal_length_limits_and_tests_the_maximum_allowed_size_for_filenames_in_the_tool_implementation_it_should_be_accepted_if_within_system_constraints.docx\n  stderr: 'fatal: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\this_is_a_very_long_filename_that_exceeds_normal_length_limits_and_tests_the_maximum_allowed_size_for_filenames_in_the_tool_implementation_it_should_be_accepted_if_within_system_constraints.docx: 'D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\this_is_a_very_long_filename_that_exceeds_normal_length_limits_and_tests_the_maximum_allowed_size_for_filenames_in_the_tool_implementation_it_should_be_accepted_if_within_system_constraints.docx' is outside repository at 'D:/devWorkspace/MCPServer-Generator/testSystem/testFiles/new_repo''"
        },
        "execution_time": 0.20187926292419434,
        "is_functional_test": true
      },
      {
        "case_name": "Git Add In Git Hooks Directory",
        "purpose": "验证在.git/hooks目录中添加文件到暂存区的行为（安全性相关）",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\hooks",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\hooks\\commit-msg.sample"
        },
        "response": {
          "result": "文件 D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\hooks\\commit-msg.sample 已成功添加到暂存区"
        },
        "execution_time": 0.2005910873413086,
        "is_functional_test": false
      },
      {
        "case_name": "Git Add With Special Characters In Path",
        "purpose": "验证使用特殊字符路径添加文件到暂存区时的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\refs\\heads\\特性\\新功能",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\专利1_副本.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: 文件添加失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git add D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\专利1_副本.docx\n  stderr: 'fatal: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\专利1_副本.docx: 'D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\专利1_副本.docx' is outside repository at 'D:/devWorkspace/MCPServer-Generator/testSystem/testFiles/new_repo/.git/refs/heads/特性/新功能''"
        },
        "execution_time": 0.1954960823059082,
        "is_functional_test": true
      },
      {
        "case_name": "Git Add Multiple Files With Wildcard",
        "purpose": "验证使用通配符添加多个文件到暂存区的功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\*.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: 文件不存在: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\*.docx"
        },
        "execution_time": 0.0029990673065185547,
        "is_functional_test": true
      },
      {
        "case_name": "Git Add Nonexistent File",
        "purpose": "验证尝试添加不存在的文件时是否能正确处理错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: 文件不存在: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt"
        },
        "execution_time": 0.004511356353759766,
        "is_functional_test": false
      }
    ],
    "git_diff_unstaged": [
      {
        "case_name": "Basic Git Diff Unstaged Success",
        "purpose": "验证在合法路径下查看未暂存差异的基本功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.5484359264373779,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Unstaged With Chinese Path",
        "purpose": "验证在包含中文字符的合法路径中查看未暂存差异的功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文档.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文档.docx"
        },
        "execution_time": 0.011518239974975586,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Unstaged In Nested Subdirectory Repo",
        "purpose": "验证嵌套子目录仓库中查看未暂存差异的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\refs\\heads\\特性\\新功能"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.36523914337158203,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Unstaged With Read Only Directory",
        "purpose": "验证只读目录中查看未暂存差异的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.5354752540588379,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Unstaged With Invalid Repo Path",
        "purpose": "验证传递非法仓库路径时工具是否正确抛出ValueError",
        "args": {
          "repo_path": "D:\\invalid\\path\\that\\does\\not\\exist"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: D:\\invalid\\path\\that\\does\\not\\exist"
        },
        "execution_time": 0.009511947631835938,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Unstaged With File Instead Of Directory As Repo",
        "purpose": "验证传递一个文件而非目录作为仓库路径时是否正确处理错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg"
        },
        "execution_time": 0.01506352424621582,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Unstaged With Very Long Path",
        "purpose": "验证超长路径是否能被正常处理，防止缓冲区溢出等安全问题",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\this_is_a_very_long_suffix_that_exceeds_normal_length_limits_and_tests_the_maximum_allowed_size_for_suffix_in_the_tool_implementation_it_should_be_accepted_if_within_system_constraints.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\this_is_a_very_long_suffix_that_exceeds_normal_length_limits_and_tests_the_maximum_allowed_size_for_suffix_in_the_tool_implementation_it_should_be_accepted_if_within_system_constraints.docx"
        },
        "execution_time": 0.02058696746826172,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Unstaged In Git Hooks Directory",
        "purpose": "验证在.git/hooks目录中查看未暂存差异的行为（安全性相关）",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\hooks"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.520111083984375,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Unstaged With Special Characters In Path",
        "purpose": "验证使用特殊字符路径查看未暂存差异时的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\refs\\heads\\特性\\新功能"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.38973522186279297,
        "is_functional_test": true
      }
    ],
    "git_commit": [
      {
        "case_name": "Basic Git Commit Success",
        "purpose": "验证在合法路径下且有更改时提交的基本功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "message": "Initial commit"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: 没有更改需要提交"
        },
        "execution_time": 0.2715883255004883,
        "is_functional_test": true
      },
      {
        "case_name": "Git Commit With Chinese Path And Message",
        "purpose": "验证在包含中文字符的合法路径中使用中文提交信息的功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文档.docx",
          "message": "初始提交"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文档.docx"
        },
        "execution_time": 0.003998756408691406,
        "is_functional_test": true
      },
      {
        "case_name": "Git Commit On Nested Subdirectory Repo",
        "purpose": "验证嵌套子目录仓库中提交更改的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\refs\\heads\\特性\\新功能",
          "message": "Commit in nested repo"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: 没有更改需要提交"
        },
        "execution_time": 0.27370619773864746,
        "is_functional_test": true
      },
      {
        "case_name": "Git Commit With Read Only Directory",
        "purpose": "验证尝试在只读目录中提交更改是否能正确处理权限问题",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir",
          "message": "Commit in read-only dir"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: 提交失败: Cmd('git') failed due to: exit code(1)\n  cmdline: git commit -m Commit in read-only dir\n  stdout: 'On branch master\n\nInitial commit\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tlocked_output.docx\n\tlocked_output.png\n\nnothing added to commit but untracked files present (use \"git add\" to track)'"
        },
        "execution_time": 0.4230644702911377,
        "is_functional_test": false
      },
      {
        "case_name": "Git Commit With Invalid Repo Path",
        "purpose": "验证传递非法仓库路径时工具是否正确抛出ValueError",
        "args": {
          "repo_path": "D:\\invalid\\path\\that\\does\\not\\exist",
          "message": "Test invalid path"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: D:\\invalid\\path\\that\\does\\not\\exist"
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": false
      },
      {
        "case_name": "Git Commit With File Instead Of Directory As Repo",
        "purpose": "验证传递一个文件而非目录作为仓库路径时是否正确处理错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg",
          "message": "Test file as repo"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg"
        },
        "execution_time": 0.00420832633972168,
        "is_functional_test": false
      },
      {
        "case_name": "Git Commit In Git Hooks Directory",
        "purpose": "验证在.git/hooks目录中提交更改的行为（安全性相关）",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\hooks",
          "message": "Commit in hooks directory"
        },
        "response": {
          "result": "更改已成功提交: Commit in hooks directory"
        },
        "execution_time": 0.32314229011535645,
        "is_functional_test": false
      },
      {
        "case_name": "Git Commit With Very Long Path",
        "purpose": "验证超长路径是否能被正常处理，防止缓冲区溢出等安全问题",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\this_is_a_very_long_suffix_that_exceeds_normal_length_limits_and_tests_the_maximum_allowed_size_for_suffix_in_the_tool_implementation_it_should_be_accepted_if_within_system_constraints.docx",
          "message": "Commit with very long path"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\this_is_a_very_long_suffix_that_exceeds_normal_length_limits_and_tests_the_maximum_allowed_size_for_suffix_in_the_tool_implementation_it_should_be_accepted_if_within_system_constraints.docx"
        },
        "execution_time": 0.004509449005126953,
        "is_functional_test": false
      },
      {
        "case_name": "Git Commit With Special Characters In Path",
        "purpose": "验证使用特殊字符路径提交更改时的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\refs\\heads\\特性\\新功能",
          "message": "Commit with special chars in path"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: 没有更改需要提交"
        },
        "execution_time": 0.29682350158691406,
        "is_functional_test": true
      },
      {
        "case_name": "Git Commit Without Changes",
        "purpose": "验证没有更改需要提交时工具是否正确抛出ValueError",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "message": "Empty commit"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: 没有更改需要提交"
        },
        "execution_time": 0.2861452102661133,
        "is_functional_test": true
      }
    ],
    "git_diff_staged": [
      {
        "case_name": "Basic Git Diff Staged Success",
        "purpose": "验证在合法路径下查看已暂存差异的基本功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.12324047088623047,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Staged With Chinese Path",
        "purpose": "验证在包含中文字符的合法路径中查看已暂存差异的功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文档.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文档.docx"
        },
        "execution_time": 0.004415273666381836,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Staged In Nested Subdirectory Repo",
        "purpose": "验证嵌套子目录仓库中查看已暂存差异的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\refs\\heads\\特性\\新功能"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.1799156665802002,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Staged With Read Only Directory",
        "purpose": "验证只读目录中查看已暂存差异的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.18549180030822754,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Staged With Invalid Repo Path",
        "purpose": "验证传递非法仓库路径时工具是否正确抛出ValueError",
        "args": {
          "repo_path": "D:\\invalid\\path\\that\\does\\not\\exist"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: D:\\invalid\\path\\that\\does\\not\\exist"
        },
        "execution_time": 0.0032694339752197266,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Staged With File Instead Of Directory As Repo",
        "purpose": "验证传递一个文件而非目录作为仓库路径时是否正确处理错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg"
        },
        "execution_time": 0.005000114440917969,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Staged With Very Long Path",
        "purpose": "验证超长路径是否能被正常处理，防止缓冲区溢出等安全问题",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\this_is_a_very_long_suffix_that_exceeds_normal_length_limits_and_tests_the_maximum_allowed_size_for_suffix_in_the_tool_implementation_it_should_be_accepted_if_within_system_constraints.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\this_is_a_very_long_suffix_that_exceeds_normal_length_limits_and_tests_the_maximum_allowed_size_for_suffix_in_the_tool_implementation_it_should_be_accepted_if_within_system_constraints.docx"
        },
        "execution_time": 0.005402565002441406,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Staged In Git Hooks Directory",
        "purpose": "验证在.git/hooks目录中查看已暂存差异的行为（安全性相关）",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\hooks"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.16668295860290527,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Staged With Special Characters In Path",
        "purpose": "验证使用特殊字符路径查看已暂存差异时的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\refs\\heads\\特性\\新功能"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.17777085304260254,
        "is_functional_test": true
      }
    ],
    "git_log": [
      {
        "case_name": "Basic Git Log Success",
        "purpose": "验证在合法路径下查看提交历史的基本功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: 获取提交历史失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git log --oneline\n  stderr: 'fatal: your current branch 'master' does not have any commits yet'"
        },
        "execution_time": 0.14545440673828125,
        "is_functional_test": true
      },
      {
        "case_name": "Git Log With Chinese Path",
        "purpose": "验证在包含中文字符的合法路径中查看提交历史的功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文档.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文档.docx"
        },
        "execution_time": 0.008501291275024414,
        "is_functional_test": true
      },
      {
        "case_name": "Git Log In Nested Subdirectory Repo",
        "purpose": "验证嵌套子目录仓库中查看提交历史的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\refs\\heads\\特性\\新功能"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: 获取提交历史失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git log --oneline\n  stderr: 'fatal: your current branch 'master' does not have any commits yet'"
        },
        "execution_time": 0.2001047134399414,
        "is_functional_test": true
      },
      {
        "case_name": "Git Log With Read Only Directory",
        "purpose": "验证只读目录中查看提交历史的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: 获取提交历史失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git log --oneline\n  stderr: 'fatal: your current branch 'master' does not have any commits yet'"
        },
        "execution_time": 0.1356511116027832,
        "is_functional_test": false
      },
      {
        "case_name": "Git Log With Invalid Repo Path",
        "purpose": "验证传递非法仓库路径时工具是否正确抛出ValueError",
        "args": {
          "repo_path": "D:\\invalid\\path\\that\\does\\not\\exist"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: D:\\invalid\\path\\that\\does\\not\\exist"
        },
        "execution_time": 0.0035054683685302734,
        "is_functional_test": false
      },
      {
        "case_name": "Git Log With File Instead Of Directory As Repo",
        "purpose": "验证传递一个文件而非目录作为仓库路径时是否正确处理错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg"
        },
        "execution_time": 0.005003452301025391,
        "is_functional_test": false
      },
      {
        "case_name": "Git Log In Git Hooks Directory",
        "purpose": "验证在.git/hooks目录中查看提交历史的行为（安全性相关）",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\hooks"
        },
        "response": {
          "result": "061b9c5 Commit in hooks directory"
        },
        "execution_time": 0.18306922912597656,
        "is_functional_test": false
      },
      {
        "case_name": "Git Log With Very Long Path",
        "purpose": "验证超长路径是否能被正常处理，防止缓冲区溢出等安全问题",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\this_is_a_very_long_suffix_that_exceeds_normal_length_limits_and_tests_the_maximum_allowed_size_for_suffix_in_the_tool_implementation_it_should_be_accepted_if_within_system_constraints.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\this_is_a_very_long_suffix_that_exceeds_normal_length_limits_and_tests_the_maximum_allowed_size_for_suffix_in_the_tool_implementation_it_should_be_accepted_if_within_system_constraints.docx"
        },
        "execution_time": 0.003002643585205078,
        "is_functional_test": false
      },
      {
        "case_name": "Git Log With Special Characters In Path",
        "purpose": "验证使用特殊字符路径查看提交历史时的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\refs\\heads\\特性\\新功能"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: 获取提交历史失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git log --oneline\n  stderr: 'fatal: your current branch 'master' does not have any commits yet'"
        },
        "execution_time": 0.1668558120727539,
        "is_functional_test": true
      }
    ],
    "git_create_branch": [
      {
        "case_name": "Basic Git Create Branch Success",
        "purpose": "验证在合法路径下创建新分支的基本功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": "feature/new_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: 创建分支失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git branch feature/new_branch\n  stderr: 'fatal: not a valid object name: 'master''"
        },
        "execution_time": 0.16415119171142578,
        "is_functional_test": true
      },
      {
        "case_name": "Git Create Branch With Chinese Path And Name",
        "purpose": "验证在包含中文字符的合法路径中创建中文命名分支的功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文档.docx",
          "branch_name": "特性/新功能"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文档.docx"
        },
        "execution_time": 0.0034248828887939453,
        "is_functional_test": true
      },
      {
        "case_name": "Git Create Branch In Nested Subdirectory Repo",
        "purpose": "验证嵌套子目录仓库中创建新分支的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\refs\\heads\\特性\\新功能",
          "branch_name": "nested-feature"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: 创建分支失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git branch nested-feature\n  stderr: 'fatal: not a valid object name: 'master''"
        },
        "execution_time": 0.11587715148925781,
        "is_functional_test": true
      },
      {
        "case_name": "Git Create Branch With Read Only Directory",
        "purpose": "验证尝试在只读目录中创建新分支时是否能正确处理权限问题",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir",
          "branch_name": "readonly-branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: 创建分支失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git branch readonly-branch\n  stderr: 'fatal: not a valid object name: 'master''"
        },
        "execution_time": 0.15977764129638672,
        "is_functional_test": false
      },
      {
        "case_name": "Git Create Branch With Invalid Repo Path",
        "purpose": "验证传递非法仓库路径时工具是否正确抛出ValueError",
        "args": {
          "repo_path": "D:\\invalid\\path\\that\\does\\not\\exist",
          "branch_name": "test-branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: D:\\invalid\\path\\that\\does\\not\\exist"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": false
      },
      {
        "case_name": "Git Create Branch With File Instead Of Directory As Repo",
        "purpose": "验证传递一个文件而非目录作为仓库路径时是否正确处理错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg",
          "branch_name": "test-branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg"
        },
        "execution_time": 0.002999544143676758,
        "is_functional_test": false
      },
      {
        "case_name": "Git Create Branch In Git Hooks Directory",
        "purpose": "验证在.git/hooks目录中创建新分支的行为（安全性相关）",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\hooks",
          "branch_name": "hook-branch"
        },
        "response": {
          "result": "分支 hook-branch 已成功创建"
        },
        "execution_time": 0.137070894241333,
        "is_functional_test": false
      },
      {
        "case_name": "Git Create Branch With Very Long Path",
        "purpose": "验证超长路径是否能被正常处理，防止缓冲区溢出等安全问题",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\this_is_a_very_long_suffix_that_exceeds_normal_length_limits_and_tests_the_maximum_allowed_size_for_suffix_in_the_tool_implementation_it_should_be_accepted_if_within_system_constraints.docx",
          "branch_name": "long-path-branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\this_is_a_very_long_suffix_that_exceeds_normal_length_limits_and_tests_the_maximum_allowed_size_for_suffix_in_the_tool_implementation_it_should_be_accepted_if_within_system_constraints.docx"
        },
        "execution_time": 0.00429224967956543,
        "is_functional_test": true
      },
      {
        "case_name": "Git Create Branch With Special Characters In Path",
        "purpose": "验证使用特殊字符路径创建新分支时的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\refs\\heads\\特性\\新功能",
          "branch_name": "special@chars#branch!"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: 创建分支失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git branch special@chars#branch!\n  stderr: 'fatal: not a valid object name: 'master''"
        },
        "execution_time": 0.1460256576538086,
        "is_functional_test": true
      },
      {
        "case_name": "Git Create Branch With Existing Branch",
        "purpose": "验证尝试创建已存在的分支时是否能正确处理错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": "master"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: 创建分支失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git branch master\n  stderr: 'fatal: not a valid object name: 'master''"
        },
        "execution_time": 0.1620471477508545,
        "is_functional_test": false
      }
    ],
    "git_checkout": [
      {
        "case_name": "Basic Git Checkout Success",
        "purpose": "验证在合法路径下切换分支的基本功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": "master"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: 分支 master 不存在"
        },
        "execution_time": 0.005507946014404297,
        "is_functional_test": true
      },
      {
        "case_name": "Git Checkout With Chinese Path And Branch",
        "purpose": "验证在包含中文字符的合法路径中切换中文命名分支的功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\refs\\heads\\特性\\新功能",
          "branch_name": "特性/新功能"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: 分支 特性/新功能 不存在"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": true
      },
      {
        "case_name": "Git Checkout In Nested Subdirectory Repo",
        "purpose": "验证嵌套子目录仓库中切换分支的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\refs\\heads\\nested-feature",
          "branch_name": "nested-feature"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\refs\\heads\\nested-feature"
        },
        "execution_time": 0.0035088062286376953,
        "is_functional_test": true
      },
      {
        "case_name": "Git Checkout With Read Only Directory",
        "purpose": "验证尝试在只读目录中切换分支时是否能正确处理权限问题",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir",
          "branch_name": "master"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: 分支 master 不存在"
        },
        "execution_time": 0.008192300796508789,
        "is_functional_test": false
      },
      {
        "case_name": "Git Checkout With Invalid Repo Path",
        "purpose": "验证传递非法仓库路径时工具是否正确抛出ValueError",
        "args": {
          "repo_path": "D:\\invalid\\path\\that\\does\\not\\exist",
          "branch_name": "test-branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: D:\\invalid\\path\\that\\does\\not\\exist"
        },
        "execution_time": 0.007274150848388672,
        "is_functional_test": false
      },
      {
        "case_name": "Git Checkout With File Instead Of Directory As Repo",
        "purpose": "验证传递一个文件而非目录作为仓库路径时是否正确处理错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg",
          "branch_name": "test-branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg"
        },
        "execution_time": 0.005515575408935547,
        "is_functional_test": false
      },
      {
        "case_name": "Git Checkout In Git Hooks Directory",
        "purpose": "验证在.git/hooks目录中切换分支的行为（安全性相关）",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\hooks",
          "branch_name": "hook-branch"
        },
        "response": {
          "result": "已成功切换到分支 hook-branch"
        },
        "execution_time": 0.24523520469665527,
        "is_functional_test": false
      },
      {
        "case_name": "Git Checkout With Very Long Path",
        "purpose": "验证超长路径是否能被正常处理，防止缓冲区溢出等安全问题",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\this_is_a_very_long_suffix_that_exceeds_normal_length_limits_and_tests_the_maximum_allowed_size_for_suffix_in_the_tool_implementation_it_should_be_accepted_if_within_system_constraints.docx",
          "branch_name": "long-path-branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\this_is_a_very_long_suffix_that_exceeds_normal_length_limits_and_tests_the_maximum_allowed_size_for_suffix_in_the_tool_implementation_it_should_be_accepted_if_within_system_constraints.docx"
        },
        "execution_time": 0.007793426513671875,
        "is_functional_test": false
      },
      {
        "case_name": "Git Checkout With Special Characters In Path",
        "purpose": "验证使用特殊字符路径切换分支时的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\refs\\heads\\特性\\新功能",
          "branch_name": "special@chars#branch!"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: 分支 special@chars#branch! 不存在"
        },
        "execution_time": 0.0035033226013183594,
        "is_functional_test": true
      },
      {
        "case_name": "Git Checkout With Nonexistent Branch",
        "purpose": "验证尝试切换到不存在的分支时是否能正确处理错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": "non-existent-branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: 分支 non-existent-branch 不存在"
        },
        "execution_time": 0.005006313323974609,
        "is_functional_test": false
      }
    ],
    "git_diff": [
      {
        "case_name": "Basic Git Diff BetweenTwoCommitsSuccess",
        "purpose": "验证在合法路径下比较两个提交之间的差异的基本功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "commit1": "master",
          "commit2": "hook-branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: 差异检查失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff master hook-branch\n  stderr: 'fatal: ambiguous argument 'master': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.22353410720825195,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff With ChinesePathAndCommitNames",
        "purpose": "验证在包含中文字符的合法路径中比较两个提交之间的差异的功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\refs\\heads\\特性\\新功能",
          "commit1": "特性/新功能",
          "commit2": "特性/新功能~1"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: 差异检查失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff 特性/新功能 特性/新功能~1\n  stderr: 'fatal: ambiguous argument '特性/新功能': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.1823873519897461,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff InNestedSubdirectoryRepo",
        "purpose": "验证嵌套子目录仓库中比较两个提交之间差异的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\refs\\heads\\nested-feature",
          "commit1": "nested-feature",
          "commit2": "nested-feature~1"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\refs\\heads\\nested-feature"
        },
        "execution_time": 0.008511066436767578,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff WithReadOnlyDirectory",
        "purpose": "验证只读目录中比较两个提交之间差异的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir",
          "commit1": "master",
          "commit2": "master~1"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: 差异检查失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff master master~1\n  stderr: 'fatal: ambiguous argument 'master': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.14245963096618652,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff WithInvalidRepoPath",
        "purpose": "验证传递非法仓库路径时工具是否正确抛出ValueError",
        "args": {
          "repo_path": "D:\\invalid\\path\\that\\does\\not\\exist",
          "commit1": "master",
          "commit2": "feature/new_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: D:\\invalid\\path\\that\\does\\not\\exist"
        },
        "execution_time": 0.00851297378540039,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff WithFileInsteadOfDirectoryAsRepo",
        "purpose": "验证传递一个文件而非目录作为仓库路径时是否正确处理错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg",
          "commit1": "master",
          "commit2": "feature/new_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg"
        },
        "execution_time": 0.02245354652404785,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff WithNonexistentCommits",
        "purpose": "验证尝试比较不存在的提交时是否能正确处理错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "commit1": "non-existent-commit1",
          "commit2": "non-existent-commit2"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: 差异检查失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff non-existent-commit1 non-existent-commit2\n  stderr: 'fatal: ambiguous argument 'non-existent-commit1': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.14141631126403809,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff InGitHooksDirectory",
        "purpose": "验证在.git/hooks目录中比较两个提交之间差异的行为（安全性相关）",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\hooks",
          "commit1": "hook-branch",
          "commit2": "hook-branch~1"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: 差异检查失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff hook-branch hook-branch~1\n  stderr: 'fatal: ambiguous argument 'hook-branch~1': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.18103289604187012,
        "is_functional_test": false
      }
    ],
    "git_show": [
      {
        "case_name": "Basic Git Show Success",
        "purpose": "验证在合法路径下查看提交详细信息的基本功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "commit_hash": "061b9c5"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: 获取提交信息失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git show 061b9c5\n  stderr: 'fatal: ambiguous argument '061b9c5': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.1923062801361084,
        "is_functional_test": true
      },
      {
        "case_name": "Git Show With Chinese Path",
        "purpose": "验证在包含中文字符的合法路径中查看提交详细信息的功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\refs\\heads\\特性\\新功能",
          "commit_hash": "特性/新功能"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: 获取提交信息失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git show 特性/新功能\n  stderr: 'fatal: ambiguous argument '特性/新功能': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.1431884765625,
        "is_functional_test": true
      },
      {
        "case_name": "Git Show In Nested Subdirectory Repo",
        "purpose": "验证嵌套子目录仓库中查看提交详细信息的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\refs\\heads\\nested-feature",
          "commit_hash": "nested-feature~1"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\refs\\heads\\nested-feature"
        },
        "execution_time": 0.01815032958984375,
        "is_functional_test": true
      },
      {
        "case_name": "Git Show With Read Only Directory",
        "purpose": "验证只读目录中查看提交详细信息的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir",
          "commit_hash": "master~1"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: 获取提交信息失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git show master~1\n  stderr: 'fatal: ambiguous argument 'master~1': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.1566612720489502,
        "is_functional_test": false
      },
      {
        "case_name": "Git Show With Invalid Repo Path",
        "purpose": "验证传递非法仓库路径时工具是否正确抛出ValueError",
        "args": {
          "repo_path": "D:\\invalid\\path\\that\\does\\not\\exist",
          "commit_hash": "feature/new_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: D:\\invalid\\path\\that\\does\\not\\exist"
        },
        "execution_time": 0.009471893310546875,
        "is_functional_test": false
      },
      {
        "case_name": "Git Show With File Instead Of Directory As Repo",
        "purpose": "验证传递一个文件而非目录作为仓库路径时是否正确处理错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg",
          "commit_hash": "master"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg"
        },
        "execution_time": 0.0194246768951416,
        "is_functional_test": false
      },
      {
        "case_name": "Git Show With Nonexistent Commit",
        "purpose": "验证尝试查看不存在的提交时是否能正确处理错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "commit_hash": "non-existent-commit"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: 获取提交信息失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git show non-existent-commit\n  stderr: 'fatal: ambiguous argument 'non-existent-commit': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.18454790115356445,
        "is_functional_test": false
      },
      {
        "case_name": "Git Show In Git Hooks Directory",
        "purpose": "验证在.git/hooks目录中查看提交详细信息的行为（安全性相关）",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\hooks",
          "commit_hash": "hook-branch~1"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: 获取提交信息失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git show hook-branch~1\n  stderr: 'fatal: ambiguous argument 'hook-branch~1': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.158369779586792,
        "is_functional_test": false
      }
    ],
    "git_reset": [
      {
        "case_name": "Basic Git Reset Success",
        "purpose": "验证在合法路径下取消暂存文件的基本功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 取消暂存失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git reset D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg\n  stderr: 'fatal: invalid object name 'D'.'"
        },
        "execution_time": 0.1892240047454834,
        "is_functional_test": true
      },
      {
        "case_name": "Git Reset With Chinese Path And File",
        "purpose": "验证在包含中文字符的合法路径中取消暂存中文命名文件的功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文档.docx",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文档.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文档.docx"
        },
        "execution_time": 0.03094339370727539,
        "is_functional_test": true
      },
      {
        "case_name": "Git Reset In Nested Subdirectory Repo",
        "purpose": "验证嵌套子目录仓库中取消暂存文件的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\refs\\heads\\特性\\新功能",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\专利1_副本.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 取消暂存失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git reset D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\专利1_副本.docx\n  stderr: 'fatal: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\专利1_副本.docx: 'D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\专利1_副本.docx' is outside repository at 'D:/devWorkspace/MCPServer-Generator/testSystem/testFiles/new_repo/.git/refs/heads/特性/新功能''"
        },
        "execution_time": 0.19939303398132324,
        "is_functional_test": true
      },
      {
        "case_name": "Git Reset With Read Only Directory",
        "purpose": "验证尝试在只读目录中取消暂存文件时是否能正确处理权限问题",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir\\locked_output.docx"
        },
        "response": {
          "result": "文件 D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir\\locked_output.docx 已成功从暂存区移除"
        },
        "execution_time": 0.20070815086364746,
        "is_functional_test": false
      },
      {
        "case_name": "Git Reset With Invalid Repo Path",
        "purpose": "验证传递非法仓库路径时工具是否正确抛出ValueError",
        "args": {
          "repo_path": "D:\\invalid\\path\\that\\does\\not\\exist",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: D:\\invalid\\path\\that\\does\\not\\exist"
        },
        "execution_time": 0.041265249252319336,
        "is_functional_test": false
      },
      {
        "case_name": "Git Reset With Invalid File Path",
        "purpose": "验证传递非法文件路径时工具是否正确抛出ValueError",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "file_path": "D:\\invalid\\file\\path\\does_not_exist.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 取消暂存失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git reset D:\\invalid\\file\\path\\does_not_exist.txt\n  stderr: 'fatal: invalid object name 'D'.'"
        },
        "execution_time": 0.26479458808898926,
        "is_functional_test": false
      },
      {
        "case_name": "Git Reset With File Instead Of Directory As Repo",
        "purpose": "验证传递一个文件而非目录作为仓库路径时是否正确处理错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg"
        },
        "execution_time": 0.0382537841796875,
        "is_functional_test": false
      },
      {
        "case_name": "Git Reset With Nonexistent File",
        "purpose": "验证尝试取消暂存不存在的文件时是否能正确处理错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 取消暂存失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git reset D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt\n  stderr: 'fatal: invalid object name 'D'.'"
        },
        "execution_time": 0.24205565452575684,
        "is_functional_test": false
      },
      {
        "case_name": "Git Reset With Special Characters In Path",
        "purpose": "验证使用特殊字符路径取消暂存文件时的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\refs\\heads\\特性\\新功能",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\专利1_副本.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 取消暂存失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git reset D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\专利1_副本.docx\n  stderr: 'fatal: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\专利1_副本.docx: 'D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\专利1_副本.docx' is outside repository at 'D:/devWorkspace/MCPServer-Generator/testSystem/testFiles/new_repo/.git/refs/heads/特性/新功能''"
        },
        "execution_time": 0.243302583694458,
        "is_functional_test": true
      },
      {
        "case_name": "Git Reset In Git Hooks Directory",
        "purpose": "验证在.git/hooks目录中取消暂存文件的行为（安全性相关）",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\hooks",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\hooks\\commit-msg.sample"
        },
        "response": {
          "result": "文件 D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\hooks\\commit-msg.sample 已成功从暂存区移除"
        },
        "execution_time": 0.1917731761932373,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 117
}