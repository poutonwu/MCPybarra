{
  "server_name": "server",
  "parent_dir": "mongo-mcp-main",
  "report_name": "mongo-mcp-main-server",
  "server_path": "workspace\\public-mcp-servers\\mongo-mcp-main\\server.py",
  "timestamp": "2025-07-01T18:21:48.943659",
  "tools": [
    {
      "name": "mcp_list_databases",
      "description": "List all databases in the MongoDB instance.\n    \n    Returns:\n        List[str]: List of database names\n    \n    Raises:\n        PyMongoError: If the operation fails\n    ",
      "args_schema": {
        "properties": {},
        "title": "mcp_list_databasesArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_list_collections",
      "description": "List all collections in the specified database.\n    \n    Args:\n        database_name: Name of the database\n    \n    Returns:\n        List[str]: List of collection names\n    \n    Raises:\n        PyMongoError: If the operation fails\n        ValueError: If database name is not provided\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          }
        },
        "required": [
          "database_name"
        ],
        "title": "mcp_list_collectionsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_insert_document",
      "description": "Insert a document into the specified collection.\n    \n    Args:\n        database_name: Name of the database\n        collection_name: Name of the collection\n        document: Document to insert (JSON-compatible dictionary)\n    \n    Returns:\n        Dict[str, Any]: Result containing the inserted document's ID\n    \n    Raises:\n        PyMongoError: If the operation fails\n        ValueError: If required parameters are missing\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "document": {
            "title": "Document",
            "type": "object"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "document"
        ],
        "title": "mcp_insert_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_find_documents",
      "description": "Find documents in the specified collection matching the query.\n    \n    Args:\n        database_name: Name of the database\n        collection_name: Name of the collection\n        query: MongoDB query filter\n        projection: MongoDB projection (fields to include/exclude)\n        limit: Maximum number of documents to return (0 for no limit)\n    \n    Returns:\n        List[Dict[str, Any]]: List of matching documents\n    \n    Raises:\n        PyMongoError: If the operation fails\n        ValueError: If required parameters are missing\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "title": "Query",
            "type": "object"
          },
          "projection": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Projection"
          },
          "limit": {
            "default": 0,
            "title": "Limit",
            "type": "integer"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "query"
        ],
        "title": "mcp_find_documentsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_update_document",
      "description": "Update document(s) in the specified collection.\n    \n    Args:\n        database_name: Name of the database\n        collection_name: Name of the collection\n        query: MongoDB query filter\n        update_data: MongoDB update document (must include operators like $set)\n        upsert: Whether to insert if no document matches the query\n        update_many: Whether to update all matching documents or just the first one\n    \n    Returns:\n        Dict[str, Any]: Result of the update operation\n    \n    Raises:\n        PyMongoError: If the operation fails\n        ValueError: If required parameters are missing or invalid\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "title": "Query",
            "type": "object"
          },
          "update_data": {
            "title": "Update Data",
            "type": "object"
          },
          "upsert": {
            "default": false,
            "title": "Upsert",
            "type": "boolean"
          },
          "update_many": {
            "default": false,
            "title": "Update Many",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "query",
          "update_data"
        ],
        "title": "mcp_update_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_delete_document",
      "description": "Delete document(s) from the specified collection.\n    \n    Args:\n        database_name: Name of the database\n        collection_name: Name of the collection\n        query: MongoDB query filter\n        delete_many: Whether to delete all matching documents or just the first one\n    \n    Returns:\n        Dict[str, Any]: Result of the delete operation\n    \n    Raises:\n        PyMongoError: If the operation fails\n        ValueError: If required parameters are missing\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "title": "Query",
            "type": "object"
          },
          "delete_many": {
            "default": false,
            "title": "Delete Many",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "query"
        ],
        "title": "mcp_delete_documentArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "mcp_list_databases": [
      {
        "case_name": "List databases successfully with default parameters",
        "purpose": "验证工具能够正确列出 MongoDB 实例中的所有数据库（正常情况）",
        "args": {},
        "response": [
          "does_not_exist_db",
          "large_db",
          "mcp-test",
          "test_db",
          "users"
        ],
        "execution_time": 0.035573720932006836,
        "is_functional_test": true
      },
      {
        "case_name": "Verify database list includes expected databases",
        "purpose": "验证返回的数据库列表中包含已知存在的数据库名称，例如 'admin', 'test'",
        "args": {},
        "response": [
          "does_not_exist_db",
          "large_db",
          "mcp-test",
          "test_db",
          "users"
        ],
        "execution_time": 0.012515783309936523,
        "is_functional_test": true
      },
      {
        "case_name": "Check empty database list scenario",
        "purpose": "在没有创建任何用户数据库的情况下，验证是否仅返回默认数据库或空列表",
        "args": {},
        "response": [
          "does_not_exist_db",
          "large_db",
          "mcp-test",
          "test_db",
          "users"
        ],
        "execution_time": 0.011516809463500977,
        "is_functional_test": true
      },
      {
        "case_name": "Test listing databases when unauthorized",
        "purpose": "验证当连接用户没有权限访问数据库列表时是否会抛出 PyMongoError",
        "args": {},
        "response": [
          "does_not_exist_db",
          "large_db",
          "mcp-test",
          "test_db",
          "users"
        ],
        "execution_time": 0.007506370544433594,
        "is_functional_test": false
      },
      {
        "case_name": "Test connection failure handling",
        "purpose": "验证当 MongoDB 服务不可用时能否正确捕获连接失败错误",
        "args": {},
        "response": [
          "does_not_exist_db",
          "large_db",
          "mcp-test",
          "test_db",
          "users"
        ],
        "execution_time": 0.013072490692138672,
        "is_functional_test": false
      },
      {
        "case_name": "Test with invalid authentication credentials",
        "purpose": "验证使用错误凭据连接 MongoDB 时是否抛出异常",
        "args": {},
        "response": [
          "does_not_exist_db",
          "large_db",
          "mcp-test",
          "test_db",
          "users"
        ],
        "execution_time": 0.01353001594543457,
        "is_functional_test": false
      },
      {
        "case_name": "Test in high-latency network environment",
        "purpose": "验证在网络延迟较高情况下工具是否仍能成功获取数据库列表",
        "args": {},
        "response": [
          "does_not_exist_db",
          "large_db",
          "mcp-test",
          "test_db",
          "users"
        ],
        "execution_time": 0.009521007537841797,
        "is_functional_test": false
      },
      {
        "case_name": "Test with maximum number of databases",
        "purpose": "验证当存在大量数据库时工具是否仍能正常处理并返回完整列表",
        "args": {},
        "response": [
          "does_not_exist_db",
          "large_db",
          "mcp-test",
          "test_db",
          "users"
        ],
        "execution_time": 0.01103067398071289,
        "is_functional_test": false
      }
    ],
    "mcp_list_collections": [
      {
        "case_name": "List collections successfully in specified database",
        "purpose": "验证工具能够正确列出指定数据库中的所有集合（正常情况）",
        "args": {
          "database_name": "test_db"
        },
        "response": [
          "a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it",
          "test_collection",
          "invalid/collection*name",
          "user_profiles",
          "special_chars_collection",
          "nonexistent_collection",
          "a_very_long_collection_name_that_exceeds_normal_limits_and_might_cause_issues",
          "users"
        ],
        "execution_time": 0.015511751174926758,
        "is_functional_test": true
      },
      {
        "case_name": "Verify collection list includes expected collections",
        "purpose": "验证返回的集合列表中包含已知存在的集合名称，例如 'users', 'logs'",
        "args": {
          "database_name": "users"
        },
        "response": [
          "user",
          "user_profiles"
        ],
        "execution_time": 0.01752471923828125,
        "is_functional_test": true
      },
      {
        "case_name": "Check empty collection list scenario",
        "purpose": "验证在没有集合的数据库中调用该工具是否会返回空列表",
        "args": {
          "database_name": "does_not_exist_db"
        },
        "response": [
          "new_collection",
          "test_collection"
        ],
        "execution_time": 0.011504173278808594,
        "is_functional_test": true
      },
      {
        "case_name": "Test with invalid database name",
        "purpose": "验证当提供非法或不存在的数据库名称时是否抛出异常",
        "args": {
          "database_name": "invalid_database"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.010509252548217773,
        "is_functional_test": false
      },
      {
        "case_name": "Test with empty database name",
        "purpose": "验证当数据库名称为空字符串时是否抛出 ValueError 异常",
        "args": {
          "database_name": ""
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_list_collections: Database name must be provided"
        },
        "execution_time": 0.013030529022216797,
        "is_functional_test": false
      },
      {
        "case_name": "Test when unauthorized to access collections",
        "purpose": "验证当连接用户没有权限访问集合列表时是否会抛出 PyMongoError",
        "args": {
          "database_name": "admin"
        },
        "response": [
          "system.version",
          "system_logs"
        ],
        "execution_time": 0.012510061264038086,
        "is_functional_test": false
      },
      {
        "case_name": "Test with special characters in database name",
        "purpose": "验证数据库名称中包含特殊字符时能否正确处理",
        "args": {
          "database_name": "db@#_测试"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.022566556930541992,
        "is_functional_test": true
      },
      {
        "case_name": "Test in high-latency network environment",
        "purpose": "验证在网络延迟较高情况下工具是否仍能成功获取集合列表",
        "args": {
          "database_name": "large_db"
        },
        "response": {
          "result": "large_collection"
        },
        "execution_time": 0.012519598007202148,
        "is_functional_test": false
      },
      {
        "case_name": "Test with maximum number of collections",
        "purpose": "验证当数据库中存在大量集合时工具是否仍能正常处理并返回完整列表",
        "args": {
          "database_name": "mcp-test"
        },
        "response": [
          "users",
          "test"
        ],
        "execution_time": 0.014028549194335938,
        "is_functional_test": true
      },
      {
        "case_name": "Test connection failure handling",
        "purpose": "验证当 MongoDB 服务不可用时能否正确捕获连接失败错误",
        "args": {
          "database_name": "test_db"
        },
        "response": [
          "a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it",
          "test_collection",
          "invalid/collection*name",
          "user_profiles",
          "special_chars_collection",
          "nonexistent_collection",
          "a_very_long_collection_name_that_exceeds_normal_limits_and_might_cause_issues",
          "users"
        ],
        "execution_time": 0.016038894653320312,
        "is_functional_test": false
      }
    ],
    "mcp_insert_document": [
      {
        "case_name": "Insert document successfully with valid parameters",
        "purpose": "验证使用有效参数时能否成功将文档插入指定集合",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "document": {
            "name": "Test Document",
            "content": "This is a test document"
          }
        },
        "response": {
          "result": "{\n  \"inserted_id\": \"6863b713e63a60df7d66176d\",\n  \"success\": true\n}"
        },
        "execution_time": 0.1750319004058838,
        "is_functional_test": true
      },
      {
        "case_name": "Verify insertion into non-existent collection creates collection",
        "purpose": "验证向不存在的集合中插入文档是否会自动创建该集合",
        "args": {
          "database_name": "test_db",
          "collection_name": "new_collection",
          "document": {
            "key": "value"
          }
        },
        "response": {
          "result": "{\n  \"inserted_id\": \"6863b713e63a60df7d66176e\",\n  \"success\": true\n}"
        },
        "execution_time": 0.15847444534301758,
        "is_functional_test": true
      },
      {
        "case_name": "Insert document with special characters in keys",
        "purpose": "验证文档中包含特殊字符的键是否能正确插入数据库",
        "args": {
          "database_name": "test_db",
          "collection_name": "special_chars_collection",
          "document": {
            "user@domain": "test",
            "key-with-dash": 123,
            "key.with.dot": true
          }
        },
        "response": {
          "result": "{\n  \"inserted_id\": \"6863b713e63a60df7d66176f\",\n  \"success\": true\n}"
        },
        "execution_time": 0.055554866790771484,
        "is_functional_test": true
      },
      {
        "case_name": "Insert document with binary data",
        "purpose": "验证包含二进制数据的文档是否能被正确插入",
        "args": {
          "database_name": "test_db",
          "collection_name": "binary_data_collection",
          "document": {
            "file_data": {
              "$binary": {
                "base64": "SGVsbG8gd29ybGQ=",
                "subType": "00"
              }
            }
          }
        },
        "response": {
          "result": "{\n  \"inserted_id\": \"6863b714e63a60df7d661770\",\n  \"success\": true\n}"
        },
        "execution_time": 0.10827302932739258,
        "is_functional_test": true
      },
      {
        "case_name": "Insert document with invalid database name",
        "purpose": "验证使用非法数据库名称时是否会抛出异常",
        "args": {
          "database_name": "invalid/db*name",
          "collection_name": "test_collection",
          "document": {
            "name": "Test"
          }
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_insert_document: database names cannot contain the character '/'"
        },
        "execution_time": 0.07718014717102051,
        "is_functional_test": false
      },
      {
        "case_name": "Insert document without required parameters",
        "purpose": "验证缺少必要参数时是否抛出 ValueError 异常",
        "args": {
          "database_name": "",
          "collection_name": "",
          "document": {}
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_insert_document: Database name and collection name must be provided"
        },
        "execution_time": 0.11673927307128906,
        "is_functional_test": false
      },
      {
        "case_name": "Insert document when unauthorized",
        "purpose": "验证没有权限时插入文档是否会抛出 PyMongoError",
        "args": {
          "database_name": "admin",
          "collection_name": "system.version",
          "document": {
            "test": "unauthorized"
          }
        },
        "response": {
          "result": "{\n  \"inserted_id\": \"6863b714e63a60df7d661771\",\n  \"success\": true\n}"
        },
        "execution_time": 0.11525893211364746,
        "is_functional_test": false
      },
      {
        "case_name": "Insert document with special characters in database name",
        "purpose": "验证数据库名称中包含特殊字符时能否正确处理",
        "args": {
          "database_name": "db@#_测试",
          "collection_name": "test_collection",
          "document": {
            "name": "Special DB Test"
          }
        },
        "response": {
          "result": "{\n  \"inserted_id\": \"6863b715e63a60df7d661772\",\n  \"success\": true\n}"
        },
        "execution_time": 0.14247584342956543,
        "is_functional_test": true
      },
      {
        "case_name": "Insert document with empty collection name",
        "purpose": "验证集合名称为空字符串时是否抛出 ValueError 异常",
        "args": {
          "database_name": "test_db",
          "collection_name": "",
          "document": {
            "name": "Empty Collection Test"
          }
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_insert_document: Database name and collection name must be provided"
        },
        "execution_time": 0.11951494216918945,
        "is_functional_test": false
      },
      {
        "case_name": "Insert document into system collection",
        "purpose": "验证是否可以插入系统集合（如 system.indexes）",
        "args": {
          "database_name": "test_db",
          "collection_name": "system.indexes",
          "document": {
            "name": "System Collection Test"
          }
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_insert_document: Invalid system namespace: test_db.system.indexes, full error: {'ok': 0.0, 'errmsg': 'Invalid system namespace: test_db.system.indexes', 'code': 73, 'codeName': 'InvalidNamespace'}"
        },
        "execution_time": 0.16695499420166016,
        "is_functional_test": false
      },
      {
        "case_name": "Insert document with very long key names",
        "purpose": "验证插入包含超长键名的文档是否能正常处理",
        "args": {
          "database_name": "test_db",
          "collection_name": "long_key_collection",
          "document": {
            "a_very_very_long_key_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it": "test_value"
          }
        },
        "response": {
          "result": "{\n  \"inserted_id\": \"6863b715e63a60df7d661774\",\n  \"success\": true\n}"
        },
        "execution_time": 0.19501399993896484,
        "is_functional_test": true
      }
    ],
    "mcp_find_documents": [
      {
        "case_name": "Find documents successfully with valid query",
        "purpose": "验证使用有效查询参数时能否正确检索文档",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {
            "name": "Test Document"
          }
        },
        "response": {
          "result": "{\n  \"_id\": \"6863b713e63a60df7d66176d\",\n  \"name\": \"Test Document\",\n  \"content\": \"This is a test document\"\n}"
        },
        "execution_time": 0.020621061325073242,
        "is_functional_test": true
      },
      {
        "case_name": "Find documents with empty query returns all",
        "purpose": "验证空查询是否返回集合中的所有文档",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {}
        },
        "response": {
          "result": "{\n  \"_id\": \"6863b713e63a60df7d66176d\",\n  \"name\": \"Test Document\",\n  \"content\": \"This is a test document\"\n}"
        },
        "execution_time": 0.022851943969726562,
        "is_functional_test": true
      },
      {
        "case_name": "Find documents with projection to include specific fields",
        "purpose": "验证投影功能是否能正确包含指定字段",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {},
          "projection": {
            "name": 1,
            "_id": 0
          }
        },
        "response": {
          "result": "{\n  \"name\": \"Test Document\"\n}"
        },
        "execution_time": 0.018123388290405273,
        "is_functional_test": true
      },
      {
        "case_name": "Find documents with limit parameter",
        "purpose": "验证限制返回文档数量的参数是否正常工作",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {},
          "limit": 5
        },
        "response": {
          "result": "{\n  \"_id\": \"6863b713e63a60df7d66176d\",\n  \"name\": \"Test Document\",\n  \"content\": \"This is a test document\"\n}"
        },
        "execution_time": 0.01604151725769043,
        "is_functional_test": true
      },
      {
        "case_name": "Find documents with invalid database name",
        "purpose": "验证非法数据库名称是否抛出异常",
        "args": {
          "database_name": "invalid/db*name",
          "collection_name": "test_collection",
          "query": {}
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_find_documents: database names cannot contain the character '/'"
        },
        "execution_time": 0.020022153854370117,
        "is_functional_test": false
      },
      {
        "case_name": "Find documents with non-existent collection",
        "purpose": "验证在不存在的集合中查询是否会返回空列表",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "query": {}
        },
        "response": {
          "result": "{\n  \"_id\": \"686395fe8bb57d80cdb0c4a3\",\n  \"key\": \"value\"\n}"
        },
        "execution_time": 0.017017841339111328,
        "is_functional_test": true
      },
      {
        "case_name": "Find documents when unauthorized",
        "purpose": "验证没有权限访问集合时是否会抛出 PyMongoError",
        "args": {
          "database_name": "admin",
          "collection_name": "system.version",
          "query": {}
        },
        "response": [
          "{\n  \"_id\": \"featureCompatibilityVersion\",\n  \"version\": \"7.0\"\n}",
          "{\n  \"_id\": \"68626d55029e5cd2f7c9b28f\",\n  \"key\": \"test_key\",\n  \"value\": \"test_value\"\n}",
          "{\n  \"_id\": \"6863b714e63a60df7d661771\",\n  \"test\": \"unauthorized\"\n}"
        ],
        "execution_time": 0.02703571319580078,
        "is_functional_test": false
      },
      {
        "case_name": "Find documents with special characters in database name",
        "purpose": "验证数据库名称中包含特殊字符时能否正确处理",
        "args": {
          "database_name": "db@#_测试",
          "collection_name": "test_collection",
          "query": {}
        },
        "response": {
          "result": "{\n  \"_id\": \"6863b715e63a60df7d661772\",\n  \"name\": \"Special DB Test\"\n}"
        },
        "execution_time": 0.023021936416625977,
        "is_functional_test": true
      },
      {
        "case_name": "Find documents with very large query",
        "purpose": "验证超大查询对象是否能被正确处理",
        "args": {
          "database_name": "test_db",
          "collection_name": "long_key_collection",
          "query": {
            "a_very_very_long_key_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it": "test_value"
          }
        },
        "response": {
          "result": "{\n  \"_id\": \"6863b715e63a60df7d661774\",\n  \"a_very_very_long_key_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\": \"test_value\"\n}"
        },
        "execution_time": 0.011420726776123047,
        "is_functional_test": true
      },
      {
        "case_name": "Find documents with invalid JSON input",
        "purpose": "验证无效的查询JSON输入是否被正确捕获并抛出错误",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": "invalid_query_format"
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_find_documents: 1 validation error for mcp_find_documentsArguments\nquery\n  Input should be a valid dictionary [type=dict_type, input_value='invalid_query_format', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/dict_type"
        },
        "execution_time": 0.00869131088256836,
        "is_functional_test": false
      },
      {
        "case_name": "Find documents with binary data in query",
        "purpose": "验证查询中包含二进制数据时是否能正常处理",
        "args": {
          "database_name": "test_db",
          "collection_name": "binary_data_collection",
          "query": {
            "file_data": {
              "$binary": {
                "base64": "SGVsbG8gd29ybGQ=",
                "subType": "00"
              }
            }
          }
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_find_documents: unknown operator: $binary, full error: {'ok': 0.0, 'errmsg': 'unknown operator: $binary', 'code': 2, 'codeName': 'BadValue'}"
        },
        "execution_time": 0.020437002182006836,
        "is_functional_test": true
      },
      {
        "case_name": "Find documents with empty parameters",
        "purpose": "验证缺少必要参数时是否抛出 ValueError 异常",
        "args": {
          "database_name": "",
          "collection_name": "",
          "query": {}
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_find_documents: Database name and collection name must be provided"
        },
        "execution_time": 0.011690855026245117,
        "is_functional_test": false
      }
    ],
    "mcp_update_document": [
      {
        "case_name": "Update document successfully with valid parameters",
        "purpose": "验证使用有效参数时能否成功更新指定集合中的文档（正常情况）",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {
            "name": "Test Document"
          },
          "update_data": {
            "$set": {
              "content": "This is an updated test document"
            }
          },
          "upsert": false,
          "update_many": false
        },
        "response": {
          "result": "{\n  \"matched_count\": 1,\n  \"modified_count\": 1,\n  \"upserted_id\": null\n}"
        },
        "execution_time": 0.2271430492401123,
        "is_functional_test": true
      },
      {
        "case_name": "Update multiple documents matching the query",
        "purpose": "验证 update_many 参数为 True 时是否更新所有匹配的文档",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {
            "category": "test"
          },
          "update_data": {
            "$set": {
              "status": "updated"
            }
          },
          "upsert": false,
          "update_many": true
        },
        "response": {
          "result": "{\n  \"matched_count\": 0,\n  \"modified_count\": 0,\n  \"upserted_id\": null\n}"
        },
        "execution_time": 0.10393095016479492,
        "is_functional_test": true
      },
      {
        "case_name": "Upsert creates new document when no match found",
        "purpose": "验证 upsert 参数为 True 时，在没有匹配文档的情况下是否插入新文档",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {
            "name": "Nonexistent Document"
          },
          "update_data": {
            "$set": {
              "name": "New Document",
              "content": "Created via upsert"
            }
          },
          "upsert": true,
          "update_many": false
        },
        "response": {
          "result": "{\n  \"matched_count\": 0,\n  \"modified_count\": 0,\n  \"upserted_id\": \"6863b76a2f114bff869d5831\"\n}"
        },
        "execution_time": 0.21937298774719238,
        "is_functional_test": true
      },
      {
        "case_name": "Update document with special characters in keys",
        "purpose": "验证更新操作中包含特殊字符的键是否能正确处理",
        "args": {
          "database_name": "test_db",
          "collection_name": "special_chars_collection",
          "query": {
            "user@domain": "test"
          },
          "update_data": {
            "$set": {
              "key-with-dash": 456,
              "key.with.dot": false
            }
          },
          "upsert": false,
          "update_many": false
        },
        "response": {
          "result": "{\n  \"matched_count\": 1,\n  \"modified_count\": 1,\n  \"upserted_id\": null\n}"
        },
        "execution_time": 0.158064603805542,
        "is_functional_test": true
      },
      {
        "case_name": "Update document with invalid database name",
        "purpose": "验证非法数据库名称是否抛出异常",
        "args": {
          "database_name": "invalid/db*name",
          "collection_name": "test_collection",
          "query": {
            "name": "Test"
          },
          "update_data": {
            "$set": {
              "content": "Updated content"
            }
          },
          "upsert": false,
          "update_many": false
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_update_document: database names cannot contain the character '/'"
        },
        "execution_time": 0.24337148666381836,
        "is_functional_test": false
      },
      {
        "case_name": "Update document without required parameters",
        "purpose": "验证缺少必要参数时是否抛出 ValueError 异常",
        "args": {
          "database_name": "",
          "collection_name": "",
          "query": {},
          "update_data": {}
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_update_document: Database name and collection name must be provided"
        },
        "execution_time": 0.24313569068908691,
        "is_functional_test": false
      },
      {
        "case_name": "Update document when unauthorized",
        "purpose": "验证没有权限更新文档时是否会抛出 PyMongoError",
        "args": {
          "database_name": "admin",
          "collection_name": "system.version",
          "query": {
            "_id": "featureCompatibilityVersion"
          },
          "update_data": {
            "$set": {
              "version": "8.0"
            }
          },
          "upsert": false,
          "update_many": false
        },
        "response": {
          "result": "{\n  \"matched_count\": 1,\n  \"modified_count\": 1,\n  \"upserted_id\": null\n}"
        },
        "execution_time": 0.23863649368286133,
        "is_functional_test": false
      },
      {
        "case_name": "Update document with very long key names",
        "purpose": "验证更新操作中包含超长键名的文档是否能正常处理",
        "args": {
          "database_name": "test_db",
          "collection_name": "long_key_collection",
          "query": {
            "a_very_very_long_key_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it": "test_value"
          },
          "update_data": {
            "$set": {
              "a_very_very_long_key_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it": "updated_value"
            }
          },
          "upsert": false,
          "update_many": false
        },
        "response": {
          "result": "{\n  \"matched_count\": 1,\n  \"modified_count\": 1,\n  \"upserted_id\": null\n}"
        },
        "execution_time": 0.2202157974243164,
        "is_functional_test": true
      },
      {
        "case_name": "Update document with binary data",
        "purpose": "验证包含二进制数据的文档是否能被正确更新",
        "args": {
          "database_name": "test_db",
          "collection_name": "binary_data_collection",
          "query": {
            "_id": "6863b714e63a60df7d661770"
          },
          "update_data": {
            "$set": {
              "file_data": {
                "$binary": {
                  "base64": "VXBkYXRlZCBieXRlcw==",
                  "subType": "00"
                }
              }
            }
          },
          "upsert": false,
          "update_many": false
        },
        "response": {
          "result": "{\n  \"matched_count\": 1,\n  \"modified_count\": 1,\n  \"upserted_id\": null\n}"
        },
        "execution_time": 0.17667865753173828,
        "is_functional_test": true
      },
      {
        "case_name": "Update document in system collection",
        "purpose": "验证是否可以更新系统集合（如 system.indexes）",
        "args": {
          "database_name": "test_db",
          "collection_name": "system.indexes",
          "query": {
            "name": "System Collection Test"
          },
          "update_data": {
            "$set": {
              "name": "Updated System Collection Test"
            }
          },
          "upsert": false,
          "update_many": false
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_update_document: Invalid system namespace: test_db.system.indexes, full error: {'ok': 0.0, 'errmsg': 'Invalid system namespace: test_db.system.indexes', 'code': 73, 'codeName': 'InvalidNamespace'}"
        },
        "execution_time": 0.14800786972045898,
        "is_functional_test": false
      },
      {
        "case_name": "Update document with empty collection name",
        "purpose": "验证集合名称为空字符串时是否抛出 ValueError 异常",
        "args": {
          "database_name": "test_db",
          "collection_name": "",
          "query": {
            "name": "Test"
          },
          "update_data": {
            "$set": {
              "content": "Updated content"
            }
          },
          "upsert": false,
          "update_many": false
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_update_document: Database name and collection name must be provided"
        },
        "execution_time": 0.12554407119750977,
        "is_functional_test": false
      },
      {
        "case_name": "Update document with invalid update operator",
        "purpose": "验证无效的 MongoDB 更新操作符是否导致错误",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {
            "name": "Test Document"
          },
          "update_data": {
            "bad_operator": {
              "content": "This should fail"
            }
          },
          "upsert": false,
          "update_many": false
        },
        "response": {
          "result": "{\n  \"matched_count\": 1,\n  \"modified_count\": 1,\n  \"upserted_id\": null\n}"
        },
        "execution_time": 0.18970370292663574,
        "is_functional_test": false
      }
    ],
    "mcp_delete_document": [
      {
        "case_name": "Delete single document successfully with valid parameters",
        "purpose": "验证使用有效参数且delete_many为False时能否正确删除匹配的第一个文档（正常情况）",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {
            "name": "Test Document"
          },
          "delete_many": false
        },
        "response": {
          "result": "{\n  \"deleted_count\": 1\n}"
        },
        "execution_time": 0.011016607284545898,
        "is_functional_test": true
      },
      {
        "case_name": "Delete multiple documents matching the query",
        "purpose": "验证 delete_many 参数为 True 时是否删除所有匹配的文档",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {
            "category": "test"
          },
          "delete_many": true
        },
        "response": {
          "result": "{\n  \"deleted_count\": 0\n}"
        },
        "execution_time": 0.022235393524169922,
        "is_functional_test": true
      },
      {
        "case_name": "Delete document from non-existent collection",
        "purpose": "验证在不存在的集合中删除文档是否会返回成功但无任何影响",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "query": {
            "name": "Nonexistent Document"
          },
          "delete_many": false
        },
        "response": {
          "result": "{\n  \"deleted_count\": 0\n}"
        },
        "execution_time": 0.01894855499267578,
        "is_functional_test": true
      },
      {
        "case_name": "Delete document without required parameters",
        "purpose": "验证缺少必要参数时是否抛出 ValueError 异常",
        "args": {
          "database_name": "",
          "collection_name": "",
          "query": {}
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_delete_document: Database name and collection name must be provided"
        },
        "execution_time": 0.01806020736694336,
        "is_functional_test": false
      },
      {
        "case_name": "Delete document when unauthorized",
        "purpose": "验证没有权限删除文档时是否会抛出 PyMongoError",
        "args": {
          "database_name": "admin",
          "collection_name": "system.version",
          "query": {
            "_id": "featureCompatibilityVersion"
          },
          "delete_many": false
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_delete_document: removing FeatureCompatibilityVersion document is not allowed, full error: {'index': 0, 'code': 40670, 'errmsg': 'removing FeatureCompatibilityVersion document is not allowed'}"
        },
        "execution_time": 0.02877020835876465,
        "is_functional_test": false
      },
      {
        "case_name": "Delete document with invalid database name",
        "purpose": "验证非法数据库名称是否抛出异常",
        "args": {
          "database_name": "invalid/db*name",
          "collection_name": "test_collection",
          "query": {
            "name": "Test"
          },
          "delete_many": false
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_delete_document: database names cannot contain the character '/'"
        },
        "execution_time": 0.021055221557617188,
        "is_functional_test": false
      },
      {
        "case_name": "Delete document with empty collection name",
        "purpose": "验证集合名称为空字符串时是否抛出 ValueError 异常",
        "args": {
          "database_name": "test_db",
          "collection_name": "",
          "query": {
            "name": "Test"
          },
          "delete_many": false
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_delete_document: Database name and collection name must be provided"
        },
        "execution_time": 0.01310276985168457,
        "is_functional_test": false
      },
      {
        "case_name": "Delete document with special characters in database name",
        "purpose": "验证数据库名称中包含特殊字符时能否正确处理",
        "args": {
          "database_name": "db@#_测试",
          "collection_name": "test_collection",
          "query": {
            "name": "Special DB Test"
          },
          "delete_many": false
        },
        "response": {
          "result": "{\n  \"deleted_count\": 1\n}"
        },
        "execution_time": 0.014919519424438477,
        "is_functional_test": true
      },
      {
        "case_name": "Delete document with very large query",
        "purpose": "验证超大查询对象是否能被正确处理",
        "args": {
          "database_name": "test_db",
          "collection_name": "long_key_collection",
          "query": {
            "a_very_very_long_key_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it": "test_value"
          },
          "delete_many": true
        },
        "response": {
          "result": "{\n  \"deleted_count\": 0\n}"
        },
        "execution_time": 0.0200350284576416,
        "is_functional_test": true
      },
      {
        "case_name": "Delete document from system collection",
        "purpose": "验证是否可以删除系统集合中的文档（如 system.indexes）",
        "args": {
          "database_name": "test_db",
          "collection_name": "system.indexes",
          "query": {
            "name": "System Collection Test"
          },
          "delete_many": false
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_delete_document: Invalid system namespace: test_db.system.indexes, full error: {'ok': 0.0, 'errmsg': 'Invalid system namespace: test_db.system.indexes', 'code': 73, 'codeName': 'InvalidNamespace'}"
        },
        "execution_time": 0.016026020050048828,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 63
}