{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "qwen-max-latest-mcp_financial_data_processor",
  "server_path": "workspace/pipeline-output-servers/qwen-max-latest/mcp_financial_data_processor/refined/server.py",
  "timestamp": "2025-07-14T21:00:43.312612",
  "tools": [
    {
      "name": "get_income_statements",
      "description": "\n    Fetches income statements for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n        report_period: The reporting period (e.g., 'annual', 'quarterly', 'ttm').\n        limit: The maximum number of results to return.\n\n    Returns:\n        A JSON-formatted string containing the income statement data.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_income_statements(stock_code=\"NVDA\", report_period=\"annual\", limit=10)\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          },
          "report_period": {
            "title": "Report Period",
            "type": "string"
          },
          "limit": {
            "title": "Limit",
            "type": "integer"
          }
        },
        "required": [
          "stock_code",
          "report_period",
          "limit"
        ],
        "title": "get_income_statementsArguments",
        "type": "object"
      }
    },
    {
      "name": "get_balance_sheets",
      "description": "\n    Retrieves balance sheets for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n        report_period: The reporting period (e.g., 'annual', 'quarterly', 'ttm').\n        limit: The maximum number of results to return.\n\n    Returns:\n        A JSON-formatted string containing the balance sheet data.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_balance_sheets(stock_code=\"NVDA\", report_period=\"annual\", limit=10)\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          },
          "report_period": {
            "title": "Report Period",
            "type": "string"
          },
          "limit": {
            "title": "Limit",
            "type": "integer"
          }
        },
        "required": [
          "stock_code",
          "report_period",
          "limit"
        ],
        "title": "get_balance_sheetsArguments",
        "type": "object"
      }
    },
    {
      "name": "get_cash_flows",
      "description": "\n    Extracts cash flow statements for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n        report_period: The reporting period (e.g., 'annual', 'quarterly', 'ttm').\n        limit: The maximum number of results to return.\n\n    Returns:\n        A JSON-formatted string containing the cash flow statement data.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_cash_flows(stock_code=\"NVDA\", report_period=\"annual\", limit=10)\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          },
          "report_period": {
            "title": "Report Period",
            "type": "string"
          },
          "limit": {
            "title": "Limit",
            "type": "integer"
          }
        },
        "required": [
          "stock_code",
          "report_period",
          "limit"
        ],
        "title": "get_cash_flowsArguments",
        "type": "object"
      }
    },
    {
      "name": "get_stock_prices",
      "description": "\n    Queries historical stock price data for a specified stock using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n        start_date: The start date of the historical data range (format: YYYY-MM-DD).\n        end_date: The end date of the historical data range (format: YYYY-MM-DD).\n\n    Returns:\n        A JSON-formatted string containing historical stock prices.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_stock_prices(stock_code=\"NVDA\", start_date=\"2023-01-01\", end_date=\"2023-12-31\")\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          },
          "start_date": {
            "title": "Start Date",
            "type": "string"
          },
          "end_date": {
            "title": "End Date",
            "type": "string"
          }
        },
        "required": [
          "stock_code",
          "start_date",
          "end_date"
        ],
        "title": "get_stock_pricesArguments",
        "type": "object"
      }
    },
    {
      "name": "get_market_news",
      "description": "\n    Fetches the latest financial news related to a company or market using the financialdatasets API.\n\n    Args:\n        company_name: The name of the company (e.g., 'NVIDIA').\n\n    Returns:\n        A JSON-formatted string containing the latest financial news articles.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_market_news(company_name=\"NVIDIA\")\n    ",
      "args_schema": {
        "properties": {
          "company_name": {
            "title": "Company Name",
            "type": "string"
          }
        },
        "required": [
          "company_name"
        ],
        "title": "get_market_newsArguments",
        "type": "object"
      }
    },
    {
      "name": "get_company_profile",
      "description": "\n    Retrieves a company profile including industry and location information using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n\n    Returns:\n        A JSON-formatted string containing the company's profile.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_company_profile(stock_code=\"NVDA\")\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          }
        },
        "required": [
          "stock_code"
        ],
        "title": "get_company_profileArguments",
        "type": "object"
      }
    },
    {
      "name": "get_analyst_estimates",
      "description": "\n    Gets analyst estimates such as target prices and earnings forecasts for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n\n    Returns:\n        A JSON-formatted string containing analyst estimates.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_analyst_estimates(stock_code=\"NVDA\")\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          }
        },
        "required": [
          "stock_code"
        ],
        "title": "get_analyst_estimatesArguments",
        "type": "object"
      }
    },
    {
      "name": "get_dividend_history",
      "description": "\n    Retrieves dividend history records for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n\n    Returns:\n        A JSON-formatted string containing the dividend history.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_dividend_history(stock_code=\"NVDA\")\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          }
        },
        "required": [
          "stock_code"
        ],
        "title": "get_dividend_historyArguments",
        "type": "object"
      }
    },
    {
      "name": "get_splits_history",
      "description": "\n    Queries stock split history for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n\n    Returns:\n        A JSON-formatted string containing the stock split history.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_splits_history(stock_code=\"NVDA\")\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          }
        },
        "required": [
          "stock_code"
        ],
        "title": "get_splits_historyArguments",
        "type": "object"
      }
    },
    {
      "name": "get_earnings_history",
      "description": "\n    Fetches historical earnings data, such as EPS, for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n\n    Returns:\n        A JSON-formatted string containing historical earnings data.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_earnings_history(stock_code=\"NVDA\")\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          }
        },
        "required": [
          "stock_code"
        ],
        "title": "get_earnings_historyArguments",
        "type": "object"
      }
    },
    {
      "name": "get_financial_ratios",
      "description": "\n    Gets financial ratios such as P/E and debt-to-equity for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n\n    Returns:\n        A JSON-formatted string containing financial ratios.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_financial_ratios(stock_code=\"NVDA\")\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          }
        },
        "required": [
          "stock_code"
        ],
        "title": "get_financial_ratiosArguments",
        "type": "object"
      }
    },
    {
      "name": "get_ownership_data",
      "description": "\n    Retrieves ownership structure data, such as institutional holding percentages, for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n\n    Returns:\n        A JSON-formatted string containing ownership structure data.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_ownership_data(stock_code=\"NVDA\")\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          }
        },
        "required": [
          "stock_code"
        ],
        "title": "get_ownership_dataArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "get_company_profile": [
      {
        "case_name": "Basic Company Profile Retrieval",
        "purpose": "验证工具能够成功获取指定股票代码的公司基本信息（正向测试）",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_company_profile: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.395953893661499,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "验证工具在输入非法股票代码时能否正确抛出错误",
        "args": {
          "stock_code": "12345"
        },
        "response": {
          "error": "ToolException: Error executing tool get_company_profile: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7964925765991211,
        "is_functional_test": false
      },
      {
        "case_name": "Empty Stock Code Input",
        "purpose": "验证当股票代码为空时是否能正确处理并返回错误信息",
        "args": {
          "stock_code": ""
        },
        "response": {
          "error": "ToolException: Error executing tool get_company_profile: Unexpected error fetching company profile: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.0029990673065185547,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Stock Code",
        "purpose": "验证工具对包含特殊字符的股票代码的处理能力",
        "args": {
          "stock_code": "NVD@#"
        },
        "response": {
          "error": "ToolException: Error executing tool get_company_profile: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3784010410308838,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Case - Maximum Length Stock Code",
        "purpose": "验证工具对最大长度股票代码的处理情况（例如4个字符）",
        "args": {
          "stock_code": "AAPL"
        },
        "response": {
          "error": "ToolException: Error executing tool get_company_profile: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7901196479797363,
        "is_functional_test": true
      },
      {
        "case_name": "Boundary Case - Minimum Length Stock Code",
        "purpose": "验证工具对最小长度股票代码的处理情况（例如1个字符）",
        "args": {
          "stock_code": "A"
        },
        "response": {
          "error": "ToolException: Error executing tool get_company_profile: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3828158378601074,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Injection Attempt in Stock Code",
        "purpose": "验证工具是否安全地拒绝包含潜在注入攻击的股票代码输入",
        "args": {
          "stock_code": "NVDA; DROP TABLE companies"
        },
        "response": {
          "error": "ToolException: Error executing tool get_company_profile: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.37773656845092773,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - API Failure Simulation",
        "purpose": "模拟API请求失败场景，验证工具是否能优雅处理网络或服务端错误",
        "args": {
          "stock_code": "TEST"
        },
        "response": {
          "error": "ToolException: Error executing tool get_company_profile: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.37677931785583496,
        "is_functional_test": false
      }
    ],
    "get_income_statements": [
      {
        "case_name": "Basic Income Statement Retrieval",
        "purpose": "验证工具能够成功获取指定股票代码和报告周期的利润表数据（正向测试）",
        "args": {
          "stock_code": "NVDA",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "result": "{\"income_statements\": [{\"ticker\": \"NVDA\", \"report_period\": \"2025-01-26\", \"fiscal_period\": \"2025-FY\", \"period\": \"annual\", \"currency\": \"USD\", \"revenue\": 130497000000.0, \"cost_of_revenue\": 32639000000.0, \"gross_profit\": 97858000000.0, \"operating_expense\": 16405000000.0, \"selling_general_and_administrative_expenses\": 3491000000.0, \"research_and_development\": 12914000000.0, \"operating_income\": 81453000000.0, \"interest_expense\": 247000000.0, \"ebit\": 84273000000.0, \"income_tax_expense\": 11146000000.0, \"net_income_discontinued_operations\": 0.0, \"net_income_non_controlling_interests\": 0.0, \"net_income\": 72880000000.0, \"net_income_common_stock\": 72880000000.0, \"preferred_dividends_impact\": 0.0, \"consolidated_income\": 72880000000.0, \"earnings_per_share\": 2.97, \"earnings_per_share_diluted\": 2.94, \"dividends_per_common_share\": 0.034, \"weighted_average_shares\": 24555000000.0, \"weighted_average_shares_diluted\": 24804000000.0}, {\"ticker\": \"NVDA\", \"report_period\": \"2024-01-28\", \"fiscal_period\": \"2024-FY\", \"period\": \"annual\", \"currency\": \"USD\", \"revenue\": 60922000000.0, \"cost_of_revenue\": 16621000000.0, \"gross_profit\": 44301000000.0, \"operating_expense\": 11329000000.0, \"selling_general_and_administrative_expenses\": 2654000000.0, \"research_and_development\": 8675000000.0, \"operating_income\": 32972000000.0, \"interest_expense\": 257000000.0, \"ebit\": 34075000000.0, \"income_tax_expense\": 4058000000.0, ...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计8956字符，剩余7556字符"
        },
        "execution_time": 2.148125648498535,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Injection Attempt in Stock Code",
        "purpose": "验证工具是否安全地拒绝包含潜在注入攻击的股票代码输入",
        "args": {
          "stock_code": "NVDA; DROP TABLE income_statements",
          "report_period": "annual",
          "limit": 5
        },
        "response": {
          "error": "ToolException: Error executing tool get_income_statements: HTTP error occurred: 400 - {\"error\":\"Invalid TICKER\",\"message\":\"Please provide a valid TICKER.\"}"
        },
        "execution_time": 1.1528780460357666,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "验证工具在输入非法股票代码时能否正确抛出错误",
        "args": {
          "stock_code": "12345",
          "report_period": "quarterly",
          "limit": 5
        },
        "response": {
          "error": "ToolException: Error executing tool get_income_statements: HTTP error occurred: 400 - {\"error\":\"Invalid TICKER\",\"message\":\"Please provide a valid TICKER.\"}"
        },
        "execution_time": 0.7414858341217041,
        "is_functional_test": false
      },
      {
        "case_name": "Empty Stock Code Input",
        "purpose": "验证当股票代码为空时是否能正确处理并返回错误信息",
        "args": {
          "stock_code": "",
          "report_period": "ttm",
          "limit": 1
        },
        "response": {
          "error": "ToolException: Error executing tool get_income_statements: Unexpected error fetching income statements: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.004002571105957031,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Case - Minimum Limit Value",
        "purpose": "验证工具对最小允许limit值的处理情况（例如limit=1）",
        "args": {
          "stock_code": "AAPL",
          "report_period": "annual",
          "limit": 1
        },
        "response": {
          "result": "{\"income_statements\": [{\"ticker\": \"AAPL\", \"report_period\": \"2024-09-28\", \"fiscal_period\": \"2024-FY\", \"period\": \"annual\", \"currency\": \"USD\", \"revenue\": 391035000000.0, \"cost_of_revenue\": 210352000000.0, \"gross_profit\": 180683000000.0, \"operating_expense\": 57467000000.0, \"selling_general_and_administrative_expenses\": 26097000000.0, \"research_and_development\": 31370000000.0, \"operating_income\": 123216000000.0, \"interest_expense\": 0.0, \"ebit\": 123485000000.0, \"income_tax_expense\": 29749000000.0, \"net_income_discontinued_operations\": 0.0, \"net_income_non_controlling_interests\": 0.0, \"net_income\": 93736000000.0, \"net_income_common_stock\": 93736000000.0, \"preferred_dividends_impact\": 0.0, \"consolidated_income\": 93736000000.0, \"earnings_per_share\": 6.11, \"earnings_per_share_diluted\": 6.08, \"dividends_per_common_share\": 0.98, \"weighted_average_shares\": 15343783000.0, \"weighted_average_shares_diluted\": 15408095000.0}]}"
        },
        "execution_time": 0.7458748817443848,
        "is_functional_test": true
      },
      {
        "case_name": "Boundary Case - Maximum Limit Value",
        "purpose": "验证工具对最大允许limit值的处理情况（例如limit=100）",
        "args": {
          "stock_code": "GOOGL",
          "report_period": "quarterly",
          "limit": 100
        },
        "response": {
          "result": "{\"income_statements\": [{\"ticker\": \"GOOGL\", \"report_period\": \"2025-03-31\", \"fiscal_period\": \"2025-Q1\", \"period\": \"quarterly\", \"currency\": \"USD\", \"revenue\": 90234000000.0, \"cost_of_revenue\": 36361000000.0, \"gross_profit\": 53873000000.0, \"operating_expense\": 23267000000.0, \"selling_general_and_administrative_expenses\": 9711000000.0, \"research_and_development\": 13556000000.0, \"operating_income\": 30606000000.0, \"interest_expense\": 34000000.0, \"ebit\": 41823000000.0, \"income_tax_expense\": 7249000000.0, \"net_income_discontinued_operations\": 0.0, \"net_income_non_controlling_interests\": 0.0, \"net_income\": 34540000000.0, \"net_income_common_stock\": 34540000000.0, \"preferred_dividends_impact\": 0.0, \"consolidated_income\": 34540000000.0, \"earnings_per_share\": 2.84, \"earnings_per_share_diluted\": 2.81, \"dividends_per_common_share\": 0.2, \"weighted_average_shares\": 12190000000.0, \"weighted_average_shares_diluted\": null}, {\"ticker\": \"GOOGL\", \"report_period\": \"2024-12-31\", \"fiscal_period\": \"2024-Q4\", \"period\": \"quarterly\", \"currency\": \"USD\", \"revenue\": 96469000000.0, \"cost_of_revenue\": 40613000000.0, \"gross_profit\": 55856000000.0, \"operating_expense\": 24884000000.0, \"selling_general_and_administrative_expenses\": 11768000000.0, \"research_and_development\": 13116000000.0, \"operating_income\": 30972000000.0, \"interest_expense\": 53000000.0, \"ebit\": 32296000000.0, \"income_tax_expense\": 5707000000.0, \"net_...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计79635字符，剩余78235字符"
        },
        "execution_time": 1.6029257774353027,
        "is_functional_test": true
      },
      {
        "case_name": "Special Characters in Report Period",
        "purpose": "验证工具对包含特殊字符的报告周期参数的处理能力",
        "args": {
          "stock_code": "MSFT",
          "report_period": "qu@rt#rly!",
          "limit": 5
        },
        "response": {
          "error": "ToolException: Error executing tool get_income_statements: Unexpected error fetching income statements: 'report_period' must be one of: annual, quarterly, ttm."
        },
        "execution_time": 0.003996610641479492,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid Report Period",
        "purpose": "验证工具在传入无效报告周期时是否能优雅处理错误",
        "args": {
          "stock_code": "AMZN",
          "report_period": "monthly",
          "limit": 5
        },
        "response": {
          "error": "ToolException: Error executing tool get_income_statements: Unexpected error fetching income statements: 'report_period' must be one of: annual, quarterly, ttm."
        },
        "execution_time": 0.004003286361694336,
        "is_functional_test": false
      }
    ],
    "get_balance_sheets": [
      {
        "case_name": "Basic Balance Sheet Retrieval",
        "purpose": "验证工具能够成功获取指定股票代码和报告周期的资产负债表数据（正向测试）",
        "args": {
          "stock_code": "NVDA",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "result": "{\"balance_sheets\": [{\"ticker\": \"NVDA\", \"report_period\": \"2025-01-26\", \"fiscal_period\": \"2025-FY\", \"period\": \"annual\", \"currency\": \"USD\", \"total_assets\": 111601000000.0, \"current_assets\": 80126000000.0, \"cash_and_equivalents\": 8589000000.0, \"inventory\": 10080000000.0, \"current_investments\": 34621000000.0, \"trade_and_non_trade_receivables\": 23065000000.0, \"non_current_assets\": 31475000000.0, \"property_plant_and_equipment\": 8076000000.0, \"goodwill_and_intangible_assets\": 5995000000.0, \"investments\": 34621000000.0, \"non_current_investments\": 0.0, \"tax_assets\": 10979000000.0, \"total_liabilities\": 32274000000.0, \"current_liabilities\": 18047000000.0, \"current_debt\": 0.0, \"trade_and_non_trade_payables\": 6310000000.0, \"deferred_revenue\": 0.0, \"deposit_liabilities\": 0.0, \"non_current_liabilities\": 14227000000.0, \"non_current_debt\": 9982000000.0, \"tax_liabilities\": 0.0, \"shareholders_equity\": 79327000000.0, \"retained_earnings\": 68038000000.0, \"accumulated_other_comprehensive_income\": 28000000.0, \"outstanding_shares\": 24490000000.0, \"total_debt\": 9982000000.0}, {\"ticker\": \"NVDA\", \"report_period\": \"2024-01-28\", \"fiscal_period\": \"2024-FY\", \"period\": \"annual\", \"currency\": \"USD\", \"total_assets\": 65728000000.0, \"current_assets\": 44345000000.0, \"cash_and_equivalents\": 7280000000.0, \"inventory\": 5282000000.0, \"current_investments\": 18704000000.0, \"trade_and_non_trade_receivables\": 9999000000.0, \"...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计10395字符，剩余8995字符"
        },
        "execution_time": 2.215270757675171,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Injection Attempt in Stock Code",
        "purpose": "验证工具是否安全地拒绝包含潜在注入攻击的股票代码输入",
        "args": {
          "stock_code": "NVDA; DROP TABLE balance_sheets",
          "report_period": "quarterly",
          "limit": 5
        },
        "response": {
          "error": "ToolException: Error executing tool get_balance_sheets: HTTP error occurred: 400 - {\"error\":\"Invalid TICKER\",\"message\":\"Please provide a valid TICKER.\"}"
        },
        "execution_time": 1.1761775016784668,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "验证工具在输入非法股票代码时能否正确抛出错误",
        "args": {
          "stock_code": "12345",
          "report_period": "ttm",
          "limit": 5
        },
        "response": {
          "error": "ToolException: Error executing tool get_balance_sheets: HTTP error occurred: 400 - {\"error\":\"Invalid TICKER\",\"message\":\"Please provide a valid TICKER.\"}"
        },
        "execution_time": 0.7626345157623291,
        "is_functional_test": false
      },
      {
        "case_name": "Empty Stock Code Input",
        "purpose": "验证当股票代码为空时是否能正确处理并返回错误信息",
        "args": {
          "stock_code": "",
          "report_period": "annual",
          "limit": 1
        },
        "response": {
          "error": "ToolException: Error executing tool get_balance_sheets: Unexpected error fetching balance sheets: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.00400233268737793,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Case - Minimum Limit Value",
        "purpose": "验证工具对最小允许limit值的处理情况（例如limit=1）",
        "args": {
          "stock_code": "AAPL",
          "report_period": "annual",
          "limit": 1
        },
        "response": {
          "result": "{\"balance_sheets\": [{\"ticker\": \"AAPL\", \"report_period\": \"2024-09-28\", \"fiscal_period\": \"2024-FY\", \"period\": \"annual\", \"currency\": \"USD\", \"total_assets\": 364980000000.0, \"current_assets\": 152987000000.0, \"cash_and_equivalents\": 29943000000.0, \"inventory\": 7286000000.0, \"current_investments\": 35228000000.0, \"trade_and_non_trade_receivables\": 66243000000.0, \"non_current_assets\": 211993000000.0, \"property_plant_and_equipment\": 45680000000.0, \"goodwill_and_intangible_assets\": 0.0, \"investments\": 126707000000.0, \"non_current_investments\": 91479000000.0, \"tax_assets\": 0.0, \"total_liabilities\": 308030000000.0, \"current_liabilities\": 176392000000.0, \"current_debt\": 20879000000.0, \"trade_and_non_trade_payables\": 68960000000.0, \"deferred_revenue\": 8249000000.0, \"deposit_liabilities\": 0.0, \"non_current_liabilities\": 131638000000.0, \"non_current_debt\": 85750000000.0, \"tax_liabilities\": 0.0, \"shareholders_equity\": 56950000000.0, \"retained_earnings\": -19154000000.0, \"accumulated_other_comprehensive_income\": -7172000000.0, \"outstanding_shares\": 15204137000.0, \"total_debt\": 106629000000.0}]}"
        },
        "execution_time": 1.190983772277832,
        "is_functional_test": true
      },
      {
        "case_name": "Boundary Case - Maximum Limit Value",
        "purpose": "验证工具对最大允许limit值的处理情况（例如limit=100）",
        "args": {
          "stock_code": "GOOGL",
          "report_period": "quarterly",
          "limit": 100
        },
        "response": {
          "result": "{\"balance_sheets\": [{\"ticker\": \"GOOGL\", \"report_period\": \"2025-03-31\", \"fiscal_period\": \"2025-Q1\", \"period\": \"quarterly\", \"currency\": \"USD\", \"total_assets\": 475374000000.0, \"current_assets\": 162052000000.0, \"cash_and_equivalents\": 23264000000.0, \"inventory\": 0.0, \"current_investments\": 72064000000.0, \"trade_and_non_trade_receivables\": 51000000000.0, \"non_current_assets\": 313322000000.0, \"property_plant_and_equipment\": 198784000000.0, \"goodwill_and_intangible_assets\": 32173000000.0, \"investments\": 123093000000.0, \"non_current_investments\": 51029000000.0, \"tax_assets\": 18386000000.0, \"total_liabilities\": 130107000000.0, \"current_liabilities\": 91654000000.0, \"current_debt\": 0.0, \"trade_and_non_trade_payables\": 8497000000.0, \"deferred_revenue\": 14873000000.0, \"deposit_liabilities\": 0.0, \"non_current_liabilities\": 38453000000.0, \"non_current_debt\": 22564000000.0, \"tax_liabilities\": 9773000000.0, \"shareholders_equity\": 345267000000.0, \"retained_earnings\": 262628000000.0, \"accumulated_other_comprehensive_income\": -4086000000.0, \"outstanding_shares\": 12190000000.0, \"total_debt\": 22564000000.0}, {\"ticker\": \"GOOGL\", \"report_period\": \"2024-12-31\", \"fiscal_period\": \"2024-Q4\", \"period\": \"quarterly\", \"currency\": \"USD\", \"total_assets\": 450256000000.0, \"current_assets\": 163711000000.0, \"cash_and_equivalents\": 23466000000.0, \"inventory\": 0.0, \"current_investments\": 72191000000.0, \"trade_and_non...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计95398字符，剩余93998字符"
        },
        "execution_time": 1.4333622455596924,
        "is_functional_test": true
      },
      {
        "case_name": "Error Handling - Invalid Report Period",
        "purpose": "验证工具在传入无效报告周期时是否能优雅处理错误",
        "args": {
          "stock_code": "AMZN",
          "report_period": "monthly",
          "limit": 5
        },
        "response": {
          "error": "ToolException: Error executing tool get_balance_sheets: Unexpected error fetching balance sheets: 'report_period' must be one of: annual, quarterly, ttm."
        },
        "execution_time": 0.0040645599365234375,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Report Period",
        "purpose": "验证工具对包含特殊字符的报告周期参数的处理能力",
        "args": {
          "stock_code": "MSFT",
          "report_period": "qu@rt#rly!",
          "limit": 5
        },
        "response": {
          "error": "ToolException: Error executing tool get_balance_sheets: Unexpected error fetching balance sheets: 'report_period' must be one of: annual, quarterly, ttm."
        },
        "execution_time": 0.0030045509338378906,
        "is_functional_test": false
      }
    ],
    "get_cash_flows": [
      {
        "case_name": "Basic Cash Flow Retrieval",
        "purpose": "验证工具能够成功获取指定股票代码和报告周期的现金流量表数据（正向测试）",
        "args": {
          "stock_code": "NVDA",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "error": "ToolException: Error executing tool get_cash_flows: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.377777099609375,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Injection Attempt in Stock Code",
        "purpose": "验证工具是否安全地拒绝包含潜在注入攻击的股票代码输入",
        "args": {
          "stock_code": "NVDA; DROP TABLE cash_flows",
          "report_period": "quarterly",
          "limit": 5
        },
        "response": {
          "error": "ToolException: Error executing tool get_cash_flows: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7924120426177979,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "验证工具在输入非法股票代码时能否正确抛出错误",
        "args": {
          "stock_code": "12345",
          "report_period": "ttm",
          "limit": 5
        },
        "response": {
          "error": "ToolException: Error executing tool get_cash_flows: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7968218326568604,
        "is_functional_test": false
      },
      {
        "case_name": "Empty Stock Code Input",
        "purpose": "验证当股票代码为空时是否能正确处理并返回错误信息",
        "args": {
          "stock_code": "",
          "report_period": "annual",
          "limit": 1
        },
        "response": {
          "error": "ToolException: Error executing tool get_cash_flows: Unexpected error fetching cash flows: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Case - Minimum Limit Value",
        "purpose": "验证工具对最小允许limit值的处理情况（例如limit=1）",
        "args": {
          "stock_code": "AAPL",
          "report_period": "annual",
          "limit": 1
        },
        "response": {
          "error": "ToolException: Error executing tool get_cash_flows: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7853696346282959,
        "is_functional_test": true
      },
      {
        "case_name": "Boundary Case - Maximum Limit Value",
        "purpose": "验证工具对最大允许limit值的处理情况（例如limit=100）",
        "args": {
          "stock_code": "GOOGL",
          "report_period": "quarterly",
          "limit": 100
        },
        "response": {
          "error": "ToolException: Error executing tool get_cash_flows: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.38031697273254395,
        "is_functional_test": true
      },
      {
        "case_name": "Error Handling - Invalid Report Period",
        "purpose": "验证工具在传入无效报告周期时是否能优雅处理错误",
        "args": {
          "stock_code": "AMZN",
          "report_period": "monthly",
          "limit": 5
        },
        "response": {
          "error": "ToolException: Error executing tool get_cash_flows: Unexpected error fetching cash flows: 'report_period' must be one of: annual, quarterly, ttm."
        },
        "execution_time": 0.16631054878234863,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Report Period",
        "purpose": "验证工具对包含特殊字符的报告周期参数的处理能力",
        "args": {
          "stock_code": "MSFT",
          "report_period": "qu@rt#rly!",
          "limit": 5
        },
        "response": {
          "error": "ToolException: Error executing tool get_cash_flows: Unexpected error fetching cash flows: 'report_period' must be one of: annual, quarterly, ttm."
        },
        "execution_time": 0.0046384334564208984,
        "is_functional_test": false
      }
    ],
    "get_financial_ratios": [
      {
        "case_name": "Basic Financial Ratios Retrieval",
        "purpose": "验证工具能够成功获取指定股票代码的财务比率数据（正向测试）",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_financial_ratios: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.4007787704467773,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "验证工具在输入非法股票代码时能否正确抛出错误",
        "args": {
          "stock_code": "12345"
        },
        "response": {
          "error": "ToolException: Error executing tool get_financial_ratios: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3751523494720459,
        "is_functional_test": false
      },
      {
        "case_name": "Empty Stock Code Input",
        "purpose": "验证当股票代码为空时是否能正确处理并返回错误信息",
        "args": {
          "stock_code": ""
        },
        "response": {
          "error": "ToolException: Error executing tool get_financial_ratios: Unexpected error fetching financial ratios: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Stock Code",
        "purpose": "验证工具对包含特殊字符的股票代码的处理能力",
        "args": {
          "stock_code": "NVD@#"
        },
        "response": {
          "error": "ToolException: Error executing tool get_financial_ratios: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7991883754730225,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Injection Attempt in Stock Code",
        "purpose": "验证工具是否安全地拒绝包含潜在注入攻击的股票代码输入",
        "args": {
          "stock_code": "NVDA; DROP TABLE financial_ratios"
        },
        "response": {
          "error": "ToolException: Error executing tool get_financial_ratios: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.37261080741882324,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Case - Maximum Length Stock Code",
        "purpose": "验证工具对最大长度股票代码的处理情况（例如4个字符）",
        "args": {
          "stock_code": "AAPL"
        },
        "response": {
          "error": "ToolException: Error executing tool get_financial_ratios: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7921347618103027,
        "is_functional_test": true
      },
      {
        "case_name": "Boundary Case - Minimum Length Stock Code",
        "purpose": "验证工具对最小长度股票代码的处理情况（例如1个字符）",
        "args": {
          "stock_code": "A"
        },
        "response": {
          "error": "ToolException: Error executing tool get_financial_ratios: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3731980323791504,
        "is_functional_test": true
      },
      {
        "case_name": "Error Handling - API Failure Simulation",
        "purpose": "模拟API请求失败场景，验证工具是否能优雅处理网络或服务端错误",
        "args": {
          "stock_code": "TEST"
        },
        "response": {
          "error": "ToolException: Error executing tool get_financial_ratios: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3717033863067627,
        "is_functional_test": false
      }
    ],
    "get_earnings_history": [
      {
        "case_name": "Basic Earnings History Retrieval",
        "purpose": "验证工具能够成功获取指定股票代码的历史收益数据（正向测试）",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_earnings_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.3978521823883057,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Injection Attempt in Stock Code",
        "purpose": "验证工具是否安全地拒绝包含潜在注入攻击的股票代码输入",
        "args": {
          "stock_code": "NVDA; DROP TABLE earnings"
        },
        "response": {
          "error": "ToolException: Error executing tool get_earnings_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.37368297576904297,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "验证工具在输入非法股票代码时能否正确抛出错误",
        "args": {
          "stock_code": "12345"
        },
        "response": {
          "error": "ToolException: Error executing tool get_earnings_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7844457626342773,
        "is_functional_test": false
      },
      {
        "case_name": "Empty Stock Code Input",
        "purpose": "验证当股票代码为空时是否能正确处理并返回错误信息",
        "args": {
          "stock_code": ""
        },
        "response": {
          "error": "ToolException: Error executing tool get_earnings_history: Unexpected error fetching earnings history: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Stock Code",
        "purpose": "验证工具对包含特殊字符的股票代码的处理能力",
        "args": {
          "stock_code": "NVD@#"
        },
        "response": {
          "error": "ToolException: Error executing tool get_earnings_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3716273307800293,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Case - Maximum Length Stock Code",
        "purpose": "验证工具对最大长度股票代码的处理情况（例如4个字符）",
        "args": {
          "stock_code": "AAPL"
        },
        "response": {
          "error": "ToolException: Error executing tool get_earnings_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.37634992599487305,
        "is_functional_test": true
      },
      {
        "case_name": "Boundary Case - Minimum Length Stock Code",
        "purpose": "验证工具对最小长度股票代码的处理情况（例如1个字符）",
        "args": {
          "stock_code": "A"
        },
        "response": {
          "error": "ToolException: Error executing tool get_earnings_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.37824296951293945,
        "is_functional_test": true
      },
      {
        "case_name": "Error Handling - API Failure Simulation",
        "purpose": "模拟API请求失败场景，验证工具是否能优雅处理网络或服务端错误",
        "args": {
          "stock_code": "TEST"
        },
        "response": {
          "error": "ToolException: Error executing tool get_earnings_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7888574600219727,
        "is_functional_test": false
      }
    ],
    "get_analyst_estimates": [
      {
        "case_name": "Basic Analyst Estimates Retrieval",
        "purpose": "验证工具能够成功获取指定股票代码的分析师预测数据（正向测试）",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_analyst_estimates: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.397770881652832,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "验证工具在输入非法股票代码时能否正确抛出错误",
        "args": {
          "stock_code": "12345"
        },
        "response": {
          "error": "ToolException: Error executing tool get_analyst_estimates: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.37175750732421875,
        "is_functional_test": false
      },
      {
        "case_name": "Empty Stock Code Input",
        "purpose": "验证当股票代码为空时是否能正确处理并返回错误信息",
        "args": {
          "stock_code": ""
        },
        "response": {
          "error": "ToolException: Error executing tool get_analyst_estimates: Unexpected error fetching analyst estimates: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.0039980411529541016,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Stock Code",
        "purpose": "验证工具对包含特殊字符的股票代码的处理能力",
        "args": {
          "stock_code": "NVD@#"
        },
        "response": {
          "error": "ToolException: Error executing tool get_analyst_estimates: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7910525798797607,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Injection Attempt in Stock Code",
        "purpose": "验证工具是否安全地拒绝包含潜在注入攻击的股票代码输入",
        "args": {
          "stock_code": "NVDA; DROP TABLE analyst_estimates"
        },
        "response": {
          "error": "ToolException: Error executing tool get_analyst_estimates: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7853298187255859,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Case - Maximum Length Stock Code",
        "purpose": "验证工具对最大长度股票代码的处理情况（例如4个字符）",
        "args": {
          "stock_code": "AAPL"
        },
        "response": {
          "error": "ToolException: Error executing tool get_analyst_estimates: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.38687753677368164,
        "is_functional_test": true
      },
      {
        "case_name": "Boundary Case - Minimum Length Stock Code",
        "purpose": "验证工具对最小长度股票代码的处理情况（例如1个字符）",
        "args": {
          "stock_code": "A"
        },
        "response": {
          "error": "ToolException: Error executing tool get_analyst_estimates: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.37929868698120117,
        "is_functional_test": true
      },
      {
        "case_name": "Error Handling - API Failure Simulation",
        "purpose": "模拟API请求失败场景，验证工具是否能优雅处理网络或服务端错误",
        "args": {
          "stock_code": "TEST"
        },
        "response": {
          "error": "ToolException: Error executing tool get_analyst_estimates: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.37808918952941895,
        "is_functional_test": false
      }
    ],
    "get_stock_prices": [
      {
        "case_name": "Basic Stock Price Retrieval",
        "purpose": "验证工具能够成功获取指定股票代码和日期范围的历史股价数据（正向测试）",
        "args": {
          "stock_code": "NVDA",
          "start_date": "2023-01-01",
          "end_date": "2023-12-31"
        },
        "response": {
          "error": "ToolException: Error executing tool get_stock_prices: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.359431266784668,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "验证工具在输入非法股票代码时能否正确抛出错误",
        "args": {
          "stock_code": "12345",
          "start_date": "2023-01-01",
          "end_date": "2023-12-31"
        },
        "response": {
          "error": "ToolException: Error executing tool get_stock_prices: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7858242988586426,
        "is_functional_test": false
      },
      {
        "case_name": "Empty Stock Code Input",
        "purpose": "验证当股票代码为空时是否能正确处理并返回错误信息",
        "args": {
          "stock_code": "",
          "start_date": "2023-01-01",
          "end_date": "2023-12-31"
        },
        "response": {
          "error": "ToolException: Error executing tool get_stock_prices: Unexpected error fetching stock prices: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.003997325897216797,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Stock Code",
        "purpose": "验证工具对包含特殊字符的股票代码的处理能力",
        "args": {
          "stock_code": "NVD@#",
          "start_date": "2023-01-01",
          "end_date": "2023-12-31"
        },
        "response": {
          "error": "ToolException: Error executing tool get_stock_prices: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.526346206665039,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Case - Minimum Length Stock Code",
        "purpose": "验证工具对最小长度股票代码的处理情况（例如1个字符）",
        "args": {
          "stock_code": "A",
          "start_date": "2023-01-01",
          "end_date": "2023-12-31"
        },
        "response": {
          "error": "ToolException: Error executing tool get_stock_prices: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3732287883758545,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Injection Attempt in Stock Code",
        "purpose": "验证工具是否安全地拒绝包含潜在注入攻击的股票代码输入",
        "args": {
          "stock_code": "NVDA; DROP TABLE stock_prices",
          "start_date": "2023-01-01",
          "end_date": "2023-12-31"
        },
        "response": {
          "error": "ToolException: Error executing tool get_stock_prices: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7801599502563477,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid Date Format",
        "purpose": "验证工具在传入无效日期格式时是否能优雅处理错误",
        "args": {
          "stock_code": "NVDA",
          "start_date": "2023/01/01",
          "end_date": "2023-12-31"
        },
        "response": {
          "error": "ToolException: Error executing tool get_stock_prices: Unexpected error fetching stock prices: 'start_date' and 'end_date' must be in format YYYY-MM-DD."
        },
        "execution_time": 0.0029985904693603516,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Start Date After End Date",
        "purpose": "验证工具在起始日期晚于结束日期时是否能正确处理错误",
        "args": {
          "stock_code": "NVDA",
          "start_date": "2024-01-01",
          "end_date": "2023-12-31"
        },
        "response": {
          "error": "ToolException: Error executing tool get_stock_prices: Unexpected error fetching stock prices: 'start_date' must be before or equal to 'end_date'."
        },
        "execution_time": 0.005003452301025391,
        "is_functional_test": false
      }
    ],
    "get_dividend_history": [
      {
        "case_name": "Basic Dividend History Retrieval",
        "purpose": "验证工具能够成功获取指定股票代码的股息历史记录（正向测试）",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_dividend_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.3642315864562988,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "验证工具在输入非法股票代码时能否正确抛出错误",
        "args": {
          "stock_code": "12345"
        },
        "response": {
          "error": "ToolException: Error executing tool get_dividend_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7821123600006104,
        "is_functional_test": false
      },
      {
        "case_name": "Empty Stock Code Input",
        "purpose": "验证当股票代码为空时是否能正确处理并返回错误信息",
        "args": {
          "stock_code": ""
        },
        "response": {
          "error": "ToolException: Error executing tool get_dividend_history: Unexpected error fetching dividend history: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.005001068115234375,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Stock Code",
        "purpose": "验证工具对包含特殊字符的股票代码的处理能力",
        "args": {
          "stock_code": "NVD@#"
        },
        "response": {
          "error": "ToolException: Error executing tool get_dividend_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7791414260864258,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Injection Attempt in Stock Code",
        "purpose": "验证工具是否安全地拒绝包含潜在注入攻击的股票代码输入",
        "args": {
          "stock_code": "NVDA; DROP TABLE dividends"
        },
        "response": {
          "error": "ToolException: Error executing tool get_dividend_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3652632236480713,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - API Failure Simulation",
        "purpose": "模拟API请求失败场景，验证工具是否能优雅处理网络或服务端错误",
        "args": {
          "stock_code": "TEST"
        },
        "response": {
          "error": "ToolException: Error executing tool get_dividend_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7823195457458496,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Case - Minimum Length Stock Code",
        "purpose": "验证工具对最小长度股票代码的处理情况（例如1个字符）",
        "args": {
          "stock_code": "A"
        },
        "response": {
          "error": "ToolException: Error executing tool get_dividend_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3739151954650879,
        "is_functional_test": true
      }
    ],
    "get_splits_history": [
      {
        "case_name": "Basic Stock Split History Retrieval",
        "purpose": "验证工具能够成功获取指定股票代码的拆股历史数据（正向测试）",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_splits_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.4122743606567383,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Injection Attempt in Stock Code",
        "purpose": "验证工具是否安全地拒绝包含潜在注入攻击的股票代码输入",
        "args": {
          "stock_code": "NVDA; DROP TABLE splits"
        },
        "response": {
          "error": "ToolException: Error executing tool get_splits_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7946381568908691,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "验证工具在输入非法股票代码时能否正确抛出错误",
        "args": {
          "stock_code": "12345"
        },
        "response": {
          "error": "ToolException: Error executing tool get_splits_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.37991786003112793,
        "is_functional_test": false
      },
      {
        "case_name": "Empty Stock Code Input",
        "purpose": "验证当股票代码为空时是否能正确处理并返回错误信息",
        "args": {
          "stock_code": ""
        },
        "response": {
          "error": "ToolException: Error executing tool get_splits_history: Unexpected error fetching splits history: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Stock Code",
        "purpose": "验证工具对包含特殊字符的股票代码的处理能力",
        "args": {
          "stock_code": "NVD@#"
        },
        "response": {
          "error": "ToolException: Error executing tool get_splits_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.8008010387420654,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Case - Maximum Length Stock Code",
        "purpose": "验证工具对最大长度股票代码的处理情况（例如4个字符）",
        "args": {
          "stock_code": "AAPL"
        },
        "response": {
          "error": "ToolException: Error executing tool get_splits_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3792388439178467,
        "is_functional_test": true
      },
      {
        "case_name": "Boundary Case - Minimum Length Stock Code",
        "purpose": "验证工具对最小长度股票代码的处理情况（例如1个字符）",
        "args": {
          "stock_code": "A"
        },
        "response": {
          "error": "ToolException: Error executing tool get_splits_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3858754634857178,
        "is_functional_test": true
      },
      {
        "case_name": "Error Handling - API Failure Simulation",
        "purpose": "模拟API请求失败场景，验证工具是否能优雅处理网络或服务端错误",
        "args": {
          "stock_code": "TEST"
        },
        "response": {
          "error": "ToolException: Error executing tool get_splits_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.38860225677490234,
        "is_functional_test": false
      }
    ],
    "get_ownership_data": [
      {
        "case_name": "Basic Ownership Data Retrieval",
        "purpose": "验证工具能够成功获取指定股票代码的公司所有权结构数据（正向测试）",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_ownership_data: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.3240113258361816,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "验证工具在输入非法股票代码时能否正确抛出错误",
        "args": {
          "stock_code": "12345"
        },
        "response": {
          "error": "ToolException: Error executing tool get_ownership_data: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7747499942779541,
        "is_functional_test": false
      },
      {
        "case_name": "Empty Stock Code Input",
        "purpose": "验证当股票代码为空时是否能正确处理并返回错误信息",
        "args": {
          "stock_code": ""
        },
        "response": {
          "error": "ToolException: Error executing tool get_ownership_data: Unexpected error fetching ownership data: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.0030007362365722656,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Stock Code",
        "purpose": "验证工具对包含特殊字符的股票代码的处理能力",
        "args": {
          "stock_code": "NVD@#"
        },
        "response": {
          "error": "ToolException: Error executing tool get_ownership_data: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.5318217277526855,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Injection Attempt in Stock Code",
        "purpose": "验证工具是否安全地拒绝包含潜在注入攻击的股票代码输入",
        "args": {
          "stock_code": "NVDA; DROP TABLE ownership"
        },
        "response": {
          "error": "ToolException: Error executing tool get_ownership_data: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.36222243309020996,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Case - Minimum Length Stock Code",
        "purpose": "验证工具对最小长度股票代码的处理情况（例如1个字符）",
        "args": {
          "stock_code": "A"
        },
        "response": {
          "error": "ToolException: Error executing tool get_ownership_data: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7823636531829834,
        "is_functional_test": true
      },
      {
        "case_name": "Boundary Case - Maximum Length Stock Code",
        "purpose": "验证工具对最大长度股票代码的处理情况（例如4个字符）",
        "args": {
          "stock_code": "AAPL"
        },
        "response": {
          "error": "ToolException: Error executing tool get_ownership_data: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.36945486068725586,
        "is_functional_test": true
      },
      {
        "case_name": "Error Handling - API Failure Simulation",
        "purpose": "模拟API请求失败场景，验证工具是否能优雅处理网络或服务端错误",
        "args": {
          "stock_code": "TEST"
        },
        "response": {
          "error": "ToolException: Error executing tool get_ownership_data: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.35738301277160645,
        "is_functional_test": false
      }
    ],
    "get_market_news": [
      {
        "case_name": "Basic Market News Retrieval",
        "purpose": "验证工具能够成功获取指定公司名称的最新市场新闻（正向测试）",
        "args": {
          "company_name": "NVIDIA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_market_news: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.379606008529663,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Company Name Input",
        "purpose": "验证当公司名称为空时是否能正确处理并返回错误信息",
        "args": {
          "company_name": ""
        },
        "response": {
          "error": "ToolException: Error executing tool get_market_news: Unexpected error fetching market news: 'company_name' must be a non-empty string."
        },
        "execution_time": 0.00499725341796875,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Company Name Format",
        "purpose": "验证工具在输入非法公司名称时能否正确抛出错误",
        "args": {
          "company_name": "12345"
        },
        "response": {
          "error": "ToolException: Error executing tool get_market_news: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.789557695388794,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Company Name",
        "purpose": "验证工具对包含特殊字符的公司名称的处理能力",
        "args": {
          "company_name": "NVD@#"
        },
        "response": {
          "error": "ToolException: Error executing tool get_market_news: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7942440509796143,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Injection Attempt in Company Name",
        "purpose": "验证工具是否安全地拒绝包含潜在注入攻击的公司名称输入",
        "args": {
          "company_name": "NVIDIA; DROP TABLE companies"
        },
        "response": {
          "error": "ToolException: Error executing tool get_market_news: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7945594787597656,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - API Failure Simulation",
        "purpose": "模拟API请求失败场景，验证工具是否能优雅处理网络或服务端错误",
        "args": {
          "company_name": "TEST_COMPANY"
        },
        "response": {
          "error": "ToolException: Error executing tool get_market_news: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3765523433685303,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Case - Minimum Length Company Name",
        "purpose": "验证工具对最小长度公司名称的处理情况（例如1个字符）",
        "args": {
          "company_name": "A"
        },
        "response": {
          "error": "ToolException: Error executing tool get_market_news: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3719162940979004,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 94
}