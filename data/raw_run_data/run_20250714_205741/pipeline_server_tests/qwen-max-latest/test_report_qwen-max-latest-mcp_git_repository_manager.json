{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "qwen-max-latest-mcp_git_repository_manager",
  "server_path": "workspace/pipeline-output-servers/qwen-max-latest/mcp_git_repository_manager/refined/server.py",
  "timestamp": "2025-07-14T21:06:23.547972",
  "tools": [
    {
      "name": "git_init",
      "description": "\n            Initializes a new Git repository in the specified directory.\n\n            Args:\n                repo_path (str): The path where the new Git repository should be initialized.\n\n            Returns:\n                A string confirming the successful initialization of the Git repository.\n\n            Example:\n                git_init(repo_path=\"/path/to/new/repo\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_initArguments",
        "type": "object"
      }
    },
    {
      "name": "git_status",
      "description": "\n            Checks the status of the working tree in the specified Git repository.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n\n            Returns:\n                A string containing the status information of the repository.\n\n            Example:\n                git_status(repo_path=\"/path/to/existing/repo\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          }
        },
        "title": "git_statusArguments",
        "type": "object"
      }
    },
    {
      "name": "git_add",
      "description": "\n            Adds files to the staging area of the specified Git repository.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                file_pattern (str): The pattern or specific file(s) to add to the staging area.\n\n            Returns:\n                A string confirming the successful addition of files to the staging area.\n\n            Example:\n                git_add(repo_path=\"/path/to/existing/repo\", file_pattern=\"*.py\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "file_pattern": {
            "default": "*",
            "title": "File Pattern",
            "type": "string"
          }
        },
        "title": "git_addArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_unstaged",
      "description": "\n            Shows changes in the working tree not yet staged for the next commit.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n\n            Returns:\n                A string containing the diff of unstaged changes.\n\n            Example:\n                git_diff_unstaged(repo_path=\"/path/to/existing/repo\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          }
        },
        "title": "git_diff_unstagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_staged",
      "description": "\n            Shows changes between the staging area and the latest commit.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n\n            Returns:\n                A string containing the diff of staged changes.\n\n            Example:\n                git_diff_staged(repo_path=\"/path/to/existing/repo\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          }
        },
        "title": "git_diff_stagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff",
      "description": "\n            Compares differences between two branches or commits.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                source_ref (str): The source branch or commit hash.\n                target_ref (str): The target branch or commit hash.\n\n            Returns:\n                A string containing the diff between the specified references.\n\n            Example:\n                git_diff(repo_path=\"/path/to/existing/repo\", source_ref=\"main\", target_ref=\"feature-branch\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "source_ref": {
            "default": "main",
            "title": "Source Ref",
            "type": "string"
          },
          "target_ref": {
            "default": "feature-branch",
            "title": "Target Ref",
            "type": "string"
          }
        },
        "title": "git_diffArguments",
        "type": "object"
      }
    },
    {
      "name": "git_commit",
      "description": "\n            Records changes to the repository by creating a new commit.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                message (str): The commit message describing the changes.\n\n            Returns:\n                A string confirming the successful creation of a new commit.\n\n            Example:\n                git_commit(repo_path=\"/path/to/existing/repo\", message=\"Add new feature\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "message": {
            "default": "Commit changes",
            "title": "Message",
            "type": "string"
          }
        },
        "title": "git_commitArguments",
        "type": "object"
      }
    },
    {
      "name": "git_reset",
      "description": "\n            Removes files from the staging area without altering the working directory.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                file_pattern (str): The pattern or specific file(s) to unstage.\n\n            Returns:\n                A string confirming the successful unstaging of files.\n\n            Example:\n                git_reset(repo_path=\"/path/to/existing/repo\", file_pattern=\"*.py\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "file_pattern": {
            "default": "*",
            "title": "File Pattern",
            "type": "string"
          }
        },
        "title": "git_resetArguments",
        "type": "object"
      }
    },
    {
      "name": "git_log",
      "description": "\n            Displays the commit history of the specified Git repository.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n\n            Returns:\n                A string containing the commit history.\n\n            Example:\n                git_log(repo_path=\"/path/to/existing/repo\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          }
        },
        "title": "git_logArguments",
        "type": "object"
      }
    },
    {
      "name": "git_create_branch",
      "description": "\n            Creates a new branch in the specified Git repository.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                branch_name (str): The name of the new branch to create.\n\n            Returns:\n                A string confirming the successful creation of the new branch.\n\n            Example:\n                git_create_branch(repo_path=\"/path/to/existing/repo\", branch_name=\"new-feature\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "branch_name": {
            "default": "new-feature",
            "title": "Branch Name",
            "type": "string"
          }
        },
        "title": "git_create_branchArguments",
        "type": "object"
      }
    },
    {
      "name": "git_checkout",
      "description": "\n            Switches the current working branch to the specified branch.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                branch_name (str): The name of the branch to switch to.\n\n            Returns:\n                A string confirming the successful checkout of the specified branch.\n\n            Example:\n                git_checkout(repo_path=\"/path/to/existing/repo\", branch_name=\"feature-branch\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "branch_name": {
            "default": "feature-branch",
            "title": "Branch Name",
            "type": "string"
          }
        },
        "title": "git_checkoutArguments",
        "type": "object"
      }
    },
    {
      "name": "git_show",
      "description": "\n            Displays detailed information about a specific commit.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                commit_hash (str): The hash of the commit to display details for.\n\n            Returns:\n                A string containing the detailed information about the specified commit.\n\n            Example:\n                git_show(repo_path=\"/path/to/existing/repo\", commit_hash=\"a1b2c3d4\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "commit_hash": {
            "default": "a1b2c3d4",
            "title": "Commit Hash",
            "type": "string"
          }
        },
        "title": "git_showArguments",
        "type": "object"
      }
    },
    {
      "name": "text_write_file",
      "description": "\n            Writes content to a specified file. If the file exists, it will be overwritten.\n\n            Args:\n                file_path (str): The path to the file that will be created or overwritten.\n                content (str): The content to write into the file.\n\n            Returns:\n                A success message indicating the file was written.\n\n            Raises:\n                ValueError: If any of the inputs are invalid.\n\n            Example:\n                text_write_file(file_path=\"/tmp/test.txt\", content=\"Hello World\")\n            ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "content"
        ],
        "title": "text_write_fileArguments",
        "type": "object"
      }
    },
    {
      "name": "text_append_to_file",
      "description": "\n            Appends content to a specified file. If the file does not exist, it will be created.\n\n            Args:\n                file_path (str): The path to the file that will be appended to.\n                content (str): The content to append to the file.\n\n            Returns:\n                A success message indicating the file was appended to.\n\n            Raises:\n                ValueError: If any of the inputs are invalid.\n\n            Example:\n                text_append_to_file(file_path=\"/tmp/test.txt\", content=\"\nAdditional line\")\n            ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "content"
        ],
        "title": "text_append_to_fileArguments",
        "type": "object"
      }
    },
    {
      "name": "text_extract_regex",
      "description": "\n            Extracts the first match of a regular expression pattern from the given text.\n\n            Args:\n                text (str): The text to search within.\n                pattern (str): The regular expression pattern to search for.\n\n            Returns:\n                A string containing the matched group, or an error if no match is found.\n\n            Raises:\n                ValueError: If any of the inputs are invalid or no match is found.\n\n            Example:\n                text_extract_regex(text=\"Commit: a1b2c3d4\", pattern=\"commit (\\w+)\")\n            ",
      "args_schema": {
        "properties": {
          "text": {
            "title": "Text",
            "type": "string"
          },
          "pattern": {
            "title": "Pattern",
            "type": "string"
          }
        },
        "required": [
          "text",
          "pattern"
        ],
        "title": "text_extract_regexArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "git_init": [
      {
        "case_name": "Initialize Git Repo in New Directory",
        "purpose": "验证工具能够在指定的新目录中正确初始化一个新的Git仓库。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Initialized Git repository at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.13300585746765137,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repo in Existing Directory",
        "purpose": "验证工具能够在已存在的目录中初始化Git仓库而不报错。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Initialized Git repository at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\"}"
        },
        "execution_time": 0.12132048606872559,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repo with Nested Path",
        "purpose": "测试工具是否支持嵌套路径的仓库初始化。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir1\\newdir2\\nested_git_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Initialized Git repository at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\newdir1\\\\newdir2\\\\nested_git_repo\"}"
        },
        "execution_time": 0.16499876976013184,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repo with Special Characters in Path",
        "purpose": "测试包含特殊字符的路径是否能被正确处理。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_with_@#$_name"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Initialized Git repository at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\repo_with_@#$_name\"}"
        },
        "execution_time": 0.17301654815673828,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repo in Read-Only Directory",
        "purpose": "测试在只读目录中初始化仓库是否会优雅失败或自动处理权限问题。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Initialized Git repository at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\"}"
        },
        "execution_time": 0.18990349769592285,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to Initialize Git Repo Without Write Permissions",
        "purpose": "验证工具在用户没有写权限的路径下是否能够安全地处理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\restricted_write_dir"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Initialized Git repository at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\restricted_write_dir\"}"
        },
        "execution_time": 0.12989163398742676,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repo with Empty Path",
        "purpose": "测试空路径参数是否被正确校验并返回错误信息。",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"repo_path must be a non-empty string.\"}"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repo on System Root",
        "purpose": "测试工具是否允许在系统根目录初始化仓库，这可能是一个潜在的安全风险。",
        "args": {
          "repo_path": "C:\\"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Initialized Git repository at C:\\\\\"}"
        },
        "execution_time": 0.13069796562194824,
        "is_functional_test": false
      }
    ],
    "git_status": [
      {
        "case_name": "Check Status of Initialized Git Repo",
        "purpose": "验证工具能够正确获取一个已初始化Git仓库的工作树状态。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"On branch master\\n\\nNo commits yet\\n\\nnothing to commit (create/copy files and use \\\"git add\\\" to track)\"}"
        },
        "execution_time": 0.14478492736816406,
        "is_functional_test": true
      },
      {
        "case_name": "Check Status Without Specifying Path",
        "purpose": "验证工具在未提供路径时是否使用默认或之前初始化的仓库路径。",
        "args": {
          "repo_path": null
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: 1 validation error for git_statusArguments\nrepo_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.004999876022338867,
        "is_functional_test": true
      },
      {
        "case_name": "Check Status in Nested Git Repo",
        "purpose": "测试工具能否正确读取嵌套目录中的Git仓库状态。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir1\\newdir2\\nested_git_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"On branch master\\n\\nNo commits yet\\n\\nnothing to commit (create/copy files and use \\\"git add\\\" to track)\"}"
        },
        "execution_time": 0.17531323432922363,
        "is_functional_test": true
      },
      {
        "case_name": "Check Status in Read-Only Git Repo",
        "purpose": "验证工具能否在只读Git仓库中安全地读取状态信息而不修改内容。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"On branch master\\n\\nNo commits yet\\n\\nnothing to commit (create/copy files and use \\\"git add\\\" to track)\"}"
        },
        "execution_time": 0.1406702995300293,
        "is_functional_test": false
      },
      {
        "case_name": "Check Status with Special Characters in Path",
        "purpose": "测试工具是否能处理包含特殊字符的Git仓库路径并返回正确的状态信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_with_@#$_name"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"On branch master\\n\\nNo commits yet\\n\\nnothing to commit (create/copy files and use \\\"git add\\\" to track)\"}"
        },
        "execution_time": 0.15726089477539062,
        "is_functional_test": true
      },
      {
        "case_name": "Check Status in Non-Git Directory",
        "purpose": "验证工具在非Git目录中调用git_status是否会优雅地处理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"On branch master\\n\\nNo commits yet\\n\\nUntracked files:\\n  (use \\\"git add <file>...\\\" to include in what will be committed)\\n\\t68078d40e08a19b806665fee_1745325376_auto_driving_system.csv\\n\\tapp.ico\\n\\tblurred_hit.png\\n\\tcs.csv\\n\\tempty_content_file.txt\\n\\texisting_file.txt\\n\\textracted_output.pdf\\n\\thit.png\\n\\tincludeempty.csv\\n\\tinspector.zip\\n\\tlong_content_append.txt\\n\\tmodules.xml\\n\\tmulti_append_test.txt\\n\\tnature.jpeg\\n\\tnew_git_repo/\\n\\tnew_test_file.txt\\n\\tnewdir1/\\n\\tnonexistent.txt\\n\\tnonexistent_append.txt\\n\\tnonname.html\\n\\tpaper1.pdf\\n\\tpresent.html\\n\\tre2.doc\\n\\treadonly_dir/\\n\\trepo_with_@#$_name/\\n\\trestricted_write_dir/\\n\\tsample1.pdf\\n\\tsharpened_nature.jpeg\\n\\tsingle_page_output.pdf\\n\\tspecial_chars_append.txt\\n\\tspreadsheet.csv\\n\\tswe.pptx\\n\\ttmp.csv\\n\\twhole_framework.pdf\\n\\txue.jpg\\n\\t~$ample1.pdf\\n\\nnothing added to commit but untracked files present (use \\\"git add\\\" to track)\"}"
        },
        "execution_time": 0.1269991397857666,
        "is_functional_test": false
      },
      {
        "case_name": "Check Status on System Root Path",
        "purpose": "测试工具是否允许对系统根目录执行git_status操作，这可能是一个潜在的安全风险。",
        "args": {
          "repo_path": "C:\\"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git status\\n  stderr: 'fatal: detected dubious ownership in repository at 'C:/'\\n'C:/' is owned by:\\n\\tNT SERVICE/TrustedInstaller (S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)\\nbut the current user is:\\n\\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\\nTo add an exception for this directory, call:\\n\\n\\tgit config --global --add safe.directory C:/'\"}"
        },
        "execution_time": 0.13100028038024902,
        "is_functional_test": false
      },
      {
        "case_name": "Check Status with Empty Path",
        "purpose": "测试工具是否能正确校验空路径参数并返回错误提示。",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git status\\n  stderr: 'fatal: detected dubious ownership in repository at 'C:/'\\n'C:/' is owned by:\\n\\tNT SERVICE/TrustedInstaller (S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)\\nbut the current user is:\\n\\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\\nTo add an exception for this directory, call:\\n\\n\\tgit config --global --add safe.directory C:/'\"}"
        },
        "execution_time": 0.13300180435180664,
        "is_functional_test": false
      }
    ],
    "git_add": [
      {
        "case_name": "Add All Files to Staging Area",
        "purpose": "验证工具能够将指定仓库中的所有文件添加到暂存区。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "file_pattern": "*"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": true
      },
      {
        "case_name": "Add Specific File to Staging Area",
        "purpose": "测试工具能否正确将指定的单个文件添加到暂存区。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "file_pattern": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.0030007362365722656,
        "is_functional_test": true
      },
      {
        "case_name": "Add Python Files Using Pattern",
        "purpose": "验证使用通配符模式匹配特定类型文件（如.py）是否能成功添加到暂存区。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "file_pattern": "*.py"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.007030963897705078,
        "is_functional_test": true
      },
      {
        "case_name": "Add Without Specifying Repo Path (Use Default)",
        "purpose": "测试在未提供repo_path参数时，是否使用之前初始化的默认仓库路径。",
        "args": {
          "repo_path": null,
          "file_pattern": "*.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: 1 validation error for git_addArguments\nrepo_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.010008811950683594,
        "is_functional_test": true
      },
      {
        "case_name": "Add Files in Nested Git Repository",
        "purpose": "验证工具能否正确操作嵌套目录中的Git仓库并将文件添加到暂存区。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir1\\newdir2\\nested_git_repo",
          "file_pattern": "*"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\newdir1\\\\newdir2\\\\nested_git_repo\"}"
        },
        "execution_time": 0.004996299743652344,
        "is_functional_test": true
      },
      {
        "case_name": "Add Files with Special Characters in Path",
        "purpose": "测试包含特殊字符的仓库路径是否被正确处理，并能添加文件到暂存区。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_with_@#$_name",
          "file_pattern": "*"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\repo_with_@#$_name\"}"
        },
        "execution_time": 0.010516881942749023,
        "is_functional_test": true
      },
      {
        "case_name": "Add Files to Read-Only Git Repository",
        "purpose": "验证工具是否能在只读权限的Git仓库中安全地尝试添加文件并返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "file_pattern": "*"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\"}"
        },
        "execution_time": 0.0029973983764648438,
        "is_functional_test": false
      },
      {
        "case_name": "Add Nonexistent File Pattern",
        "purpose": "测试工具对不存在的文件或无效模式的处理是否优雅失败。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "file_pattern": "nonexistent*.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.006001472473144531,
        "is_functional_test": false
      }
    ],
    "git_diff_unstaged": [
      {
        "case_name": "Show Unstaged Changes in Initialized Repo",
        "purpose": "验证工具能够正确显示已初始化Git仓库中未暂存的更改。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.003998756408691406,
        "is_functional_test": true
      },
      {
        "case_name": "Show Unstaged Changes Without Specifying Path",
        "purpose": "验证工具在未提供路径时是否使用默认或之前初始化的仓库路径来显示未暂存更改。",
        "args": {
          "repo_path": null
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: 1 validation error for git_diff_unstagedArguments\nrepo_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.0030007362365722656,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Changes in Nested Git Repo",
        "purpose": "测试工具能否正确显示嵌套目录中的Git仓库中未暂存的更改。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir1\\newdir2\\nested_git_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\newdir1\\\\newdir2\\\\nested_git_repo\"}"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": true
      },
      {
        "case_name": "Show Unstaged Changes in Read-Only Git Repo",
        "purpose": "验证工具能否在只读Git仓库中安全地读取未暂存更改信息而不修改内容。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\"}"
        },
        "execution_time": 0.006999969482421875,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Changes with Special Characters in Path",
        "purpose": "测试工具是否能处理包含特殊字符的Git仓库路径并返回正确的未暂存更改信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_with_@#$_name"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\repo_with_@#$_name\"}"
        },
        "execution_time": 0.008001327514648438,
        "is_functional_test": true
      },
      {
        "case_name": "Show Unstaged Changes in Non-Git Directory",
        "purpose": "验证工具在非Git目录中调用git_diff_unstaged是否会优雅地处理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\"}"
        },
        "execution_time": 0.20403194427490234,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Changes on System Root Path",
        "purpose": "测试工具是否允许对系统根目录执行git_diff_unstaged操作，这可能是一个潜在的安全风险。",
        "args": {
          "repo_path": "C:\\"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git diff\\n  stderr: 'warning: Not a git repository. Use --no-index to compare two paths outside a working tree\\nusage: git diff --no-index [<options>] <path> <path>\\n\\nDiff output format options\\n    -p, --patch           generate patch\\n    -s, --no-patch        suppress diff output\\n    -u                    generate patch\\n    -U, --unified[=<n>]   generate diffs with <n> lines context\\n    -W, --[no-]function-context\\n                          generate diffs with <n> lines context\\n    --raw                 generate the diff in raw format\\n    --patch-with-raw      synonym for '-p --raw'\\n    --patch-with-stat     synonym for '-p --stat'\\n    --numstat             machine friendly --stat\\n    --shortstat           output only the last line of --stat\\n    -X, --dirstat[=<param1>,<param2>...]\\n                          output the distribution of relative amount of changes for each sub-directory\\n    --cumulative          synonym for --dirstat=cumulative\\n    --dirstat-by-file[=<param1>,<param2>...]\\n                          synonym for --dirstat=files,<param1>,<param2>...\\n    --check               warn if changes introduce conflict markers or whitespace errors\\n    --summary             condensed summary such as creations, renames and mode changes\\n    --name-only           show only names ...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计7614字符，剩余6214字符"
        },
        "execution_time": 0.2643775939941406,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Changes with Empty Path",
        "purpose": "测试工具是否能正确校验空路径参数并返回错误提示。",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git diff\\n  stderr: 'warning: Not a git repository. Use --no-index to compare two paths outside a working tree\\nusage: git diff --no-index [<options>] <path> <path>\\n\\nDiff output format options\\n    -p, --patch           generate patch\\n    -s, --no-patch        suppress diff output\\n    -u                    generate patch\\n    -U, --unified[=<n>]   generate diffs with <n> lines context\\n    -W, --[no-]function-context\\n                          generate diffs with <n> lines context\\n    --raw                 generate the diff in raw format\\n    --patch-with-raw      synonym for '-p --raw'\\n    --patch-with-stat     synonym for '-p --stat'\\n    --numstat             machine friendly --stat\\n    --shortstat           output only the last line of --stat\\n    -X, --dirstat[=<param1>,<param2>...]\\n                          output the distribution of relative amount of changes for each sub-directory\\n    --cumulative          synonym for --dirstat=cumulative\\n    --dirstat-by-file[=<param1>,<param2>...]\\n                          synonym for --dirstat=files,<param1>,<param2>...\\n    --check               warn if changes introduce conflict markers or whitespace errors\\n    --summary             condensed summary such as creations, renames and mode changes\\n    --name-only           show only names ...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计7614字符，剩余6214字符"
        },
        "execution_time": 0.29183268547058105,
        "is_functional_test": false
      }
    ],
    "git_diff_staged": [
      {
        "case_name": "Show Staged Changes in Initialized Repo",
        "purpose": "验证工具能够正确显示已初始化仓库中暂存区与最新提交之间的差异。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": true
      },
      {
        "case_name": "Show Staged Changes Without Specifying Path",
        "purpose": "验证工具在未提供路径时是否使用默认或之前初始化的仓库路径。",
        "args": {
          "repo_path": null
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: 1 validation error for git_diff_stagedArguments\nrepo_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.00400090217590332,
        "is_functional_test": true
      },
      {
        "case_name": "Show Staged Changes in Nested Git Repo",
        "purpose": "测试工具能否正确读取嵌套目录中的暂存区变化。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir1\\newdir2\\nested_git_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\newdir1\\\\newdir2\\\\nested_git_repo\"}"
        },
        "execution_time": 0.00699925422668457,
        "is_functional_test": true
      },
      {
        "case_name": "Show Staged Changes in Read-Only Git Repo",
        "purpose": "验证工具能否在只读Git仓库中安全地读取暂存区信息而不修改内容。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\"}"
        },
        "execution_time": 0.006000518798828125,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes with Special Characters in Path",
        "purpose": "测试工具是否能处理包含特殊字符的Git仓库路径并返回正确的暂存区差异。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_with_@#$_name"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\repo_with_@#$_name\"}"
        },
        "execution_time": 0.007998228073120117,
        "is_functional_test": true
      },
      {
        "case_name": "Show Staged Changes in Non-Git Directory",
        "purpose": "验证工具在非Git目录中调用git_diff_staged是否会优雅地处理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff HEAD\\n  stderr: 'fatal: ambiguous argument 'HEAD': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.13286662101745605,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes on System Root Path",
        "purpose": "测试工具是否允许对系统根目录执行git_diff_staged操作，这可能是一个潜在的安全风险。",
        "args": {
          "repo_path": "C:\\"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git diff HEAD\\n  stderr: 'warning: Not a git repository. Use --no-index to compare two paths outside a working tree\\nusage: git diff --no-index [<options>] <path> <path>\\n\\nDiff output format options\\n    -p, --patch           generate patch\\n    -s, --no-patch        suppress diff output\\n    -u                    generate patch\\n    -U, --unified[=<n>]   generate diffs with <n> lines context\\n    -W, --[no-]function-context\\n                          generate diffs with <n> lines context\\n    --raw                 generate the diff in raw format\\n    --patch-with-raw      synonym for '-p --raw'\\n    --patch-with-stat     synonym for '-p --stat'\\n    --numstat             machine friendly --stat\\n    --shortstat           output only the last line of --stat\\n    -X, --dirstat[=<param1>,<param2>...]\\n                          output the distribution of relative amount of changes for each sub-directory\\n    --cumulative          synonym for --dirstat=cumulative\\n    --dirstat-by-file[=<param1>,<param2>...]\\n                          synonym for --dirstat=files,<param1>,<param2>...\\n    --check               warn if changes introduce conflict markers or whitespace errors\\n    --summary             condensed summary such as creations, renames and mode changes\\n    --name-only           show only n...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计7619字符，剩余6219字符"
        },
        "execution_time": 0.1307377815246582,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes with Empty Path",
        "purpose": "测试工具是否能正确校验空路径参数并返回错误提示。",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git diff HEAD\\n  stderr: 'warning: Not a git repository. Use --no-index to compare two paths outside a working tree\\nusage: git diff --no-index [<options>] <path> <path>\\n\\nDiff output format options\\n    -p, --patch           generate patch\\n    -s, --no-patch        suppress diff output\\n    -u                    generate patch\\n    -U, --unified[=<n>]   generate diffs with <n> lines context\\n    -W, --[no-]function-context\\n                          generate diffs with <n> lines context\\n    --raw                 generate the diff in raw format\\n    --patch-with-raw      synonym for '-p --raw'\\n    --patch-with-stat     synonym for '-p --stat'\\n    --numstat             machine friendly --stat\\n    --shortstat           output only the last line of --stat\\n    -X, --dirstat[=<param1>,<param2>...]\\n                          output the distribution of relative amount of changes for each sub-directory\\n    --cumulative          synonym for --dirstat=cumulative\\n    --dirstat-by-file[=<param1>,<param2>...]\\n                          synonym for --dirstat=files,<param1>,<param2>...\\n    --check               warn if changes introduce conflict markers or whitespace errors\\n    --summary             condensed summary such as creations, renames and mode changes\\n    --name-only           show only n...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计7619字符，剩余6219字符"
        },
        "execution_time": 0.14400053024291992,
        "is_functional_test": false
      }
    ],
    "git_diff": [
      {
        "case_name": "Basic Diff Between Two Branches",
        "purpose": "验证工具能正确比较两个已存在分支之间的差异。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "source_ref": "main",
          "target_ref": "feature-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.003997802734375,
        "is_functional_test": true
      },
      {
        "case_name": "Diff With Default Repo Path",
        "purpose": "测试在未指定repo_path时是否使用默认仓库路径进行diff操作。",
        "args": {
          "source_ref": "main",
          "target_ref": "feature-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git diff main..feature-branch\\n  stderr: 'warning: Not a git repository. Use --no-index to compare two paths outside a working tree\\nusage: git diff --no-index [<options>] <path> <path>\\n\\nDiff output format options\\n    -p, --patch           generate patch\\n    -s, --no-patch        suppress diff output\\n    -u                    generate patch\\n    -U, --unified[=<n>]   generate diffs with <n> lines context\\n    -W, --[no-]function-context\\n                          generate diffs with <n> lines context\\n    --raw                 generate the diff in raw format\\n    --patch-with-raw      synonym for '-p --raw'\\n    --patch-with-stat     synonym for '-p --stat'\\n    --numstat             machine friendly --stat\\n    --shortstat           output only the last line of --stat\\n    -X, --dirstat[=<param1>,<param2>...]\\n                          output the distribution of relative amount of changes for each sub-directory\\n    --cumulative          synonym for --dirstat=cumulative\\n    --dirstat-by-file[=<param1>,<param2>...]\\n                          synonym for --dirstat=files,<param1>,<param2>...\\n    --check               warn if changes introduce conflict markers or whitespace errors\\n    --summary             condensed summary such as creations, renames and mode changes\\n    --name-only      ...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计7635字符，剩余6235字符"
        },
        "execution_time": 0.2386476993560791,
        "is_functional_test": true
      },
      {
        "case_name": "Diff Between Commit Hashes",
        "purpose": "验证工具能够通过提交哈希比较两次提交之间的差异。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "source_ref": "abc1234",
          "target_ref": "def5678"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": true
      },
      {
        "case_name": "Diff With Invalid Repo Path",
        "purpose": "测试工具在无效仓库路径下是否返回错误信息。",
        "args": {
          "repo_path": "invalid_path",
          "source_ref": "main",
          "target_ref": "feature-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\workspace\\\\pipeline-output-servers\\\\qwen-max-latest\\\\mcp_git_repository_manager\\\\refined\\\\invalid_path\"}"
        },
        "execution_time": 0.00400090217590332,
        "is_functional_test": false
      },
      {
        "case_name": "Diff Between Nonexistent Branches",
        "purpose": "测试当源或目标分支不存在时，工具是否能优雅地处理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "source_ref": "nonexistent-source",
          "target_ref": "nonexistent-target"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.009000301361083984,
        "is_functional_test": false
      },
      {
        "case_name": "Diff In Read-Only Repository",
        "purpose": "验证工具能否在只读Git仓库中安全执行diff而不修改内容。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "source_ref": "main",
          "target_ref": "feature-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\"}"
        },
        "execution_time": 0.00800013542175293,
        "is_functional_test": false
      },
      {
        "case_name": "Diff With Special Characters in Ref Names",
        "purpose": "测试工具是否能处理包含特殊字符的分支名或提交哈希。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "source_ref": "branch_with_@#$_chars",
          "target_ref": "another_branch_with_!%^&*_chars"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.006003856658935547,
        "is_functional_test": true
      },
      {
        "case_name": "Diff On System Root Path",
        "purpose": "测试工具是否允许对系统根目录执行git_diff操作，这可能是一个潜在的安全风险。",
        "args": {
          "repo_path": "C:\\",
          "source_ref": "main",
          "target_ref": "feature-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git diff main..feature-branch\\n  stderr: 'warning: Not a git repository. Use --no-index to compare two paths outside a working tree\\nusage: git diff --no-index [<options>] <path> <path>\\n\\nDiff output format options\\n    -p, --patch           generate patch\\n    -s, --no-patch        suppress diff output\\n    -u                    generate patch\\n    -U, --unified[=<n>]   generate diffs with <n> lines context\\n    -W, --[no-]function-context\\n                          generate diffs with <n> lines context\\n    --raw                 generate the diff in raw format\\n    --patch-with-raw      synonym for '-p --raw'\\n    --patch-with-stat     synonym for '-p --stat'\\n    --numstat             machine friendly --stat\\n    --shortstat           output only the last line of --stat\\n    -X, --dirstat[=<param1>,<param2>...]\\n                          output the distribution of relative amount of changes for each sub-directory\\n    --cumulative          synonym for --dirstat=cumulative\\n    --dirstat-by-file[=<param1>,<param2>...]\\n                          synonym for --dirstat=files,<param1>,<param2>...\\n    --check               warn if changes introduce conflict markers or whitespace errors\\n    --summary             condensed summary such as creations, renames and mode changes\\n    --name-only      ...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计7635字符，剩余6235字符"
        },
        "execution_time": 0.16700053215026855,
        "is_functional_test": false
      }
    ],
    "git_commit": [
      {
        "case_name": "Commit with Default Message in Initialized Repo",
        "purpose": "验证在已初始化的Git仓库中使用默认提交信息进行提交的基本功能。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.006509065628051758,
        "is_functional_test": true
      },
      {
        "case_name": "Commit with Custom Message in Nested Repo",
        "purpose": "验证在嵌套路径的Git仓库中使用自定义提交信息进行提交的功能。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir1\\newdir2\\nested_git_repo",
          "message": "Update nested files"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\newdir1\\\\newdir2\\\\nested_git_repo\"}"
        },
        "execution_time": 0.010015010833740234,
        "is_functional_test": true
      },
      {
        "case_name": "Commit Without Specifying Repo Path",
        "purpose": "验证工具在未指定repo_path时是否能使用之前初始化的默认仓库进行提交。",
        "args": {
          "message": "Use default repo path"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"cannot mmap an empty file\"}"
        },
        "execution_time": 0.008511781692504883,
        "is_functional_test": true
      },
      {
        "case_name": "Commit in Read-Only Git Repo",
        "purpose": "测试在只读Git仓库中尝试提交是否会安全失败或处理权限问题。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "message": "Attempt commit in read-only repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\"}"
        },
        "execution_time": 0.011516809463500977,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Empty Message",
        "purpose": "验证工具是否允许空提交信息并使用默认值，或者是否对其进行校验。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "message": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"message must be a non-empty string.\"}"
        },
        "execution_time": 0.010011434555053711,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Special Characters in Message",
        "purpose": "测试提交信息中包含特殊字符时是否能被正确处理。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "message": "Fix bug #456 @release v1.0"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.010526895523071289,
        "is_functional_test": true
      },
      {
        "case_name": "Commit in Non-Git Directory",
        "purpose": "验证工具在非Git目录中执行提交操作是否会优雅地处理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Try commit in non-git directory"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Created new commit: c448424977d2d5ae91a7795fd4725d2f5e2f0295\"}"
        },
        "execution_time": 0.504605770111084,
        "is_functional_test": false
      },
      {
        "case_name": "Commit on System Root Path",
        "purpose": "测试工具是否允许在系统根目录执行git commit操作，这可能是一个潜在的安全风险。",
        "args": {
          "repo_path": "C:\\",
          "message": "Root level commit"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"cannot mmap an empty file\"}"
        },
        "execution_time": 0.0053691864013671875,
        "is_functional_test": false
      }
    ],
    "git_reset": [
      {
        "case_name": "Unstage Specific File Using git_reset",
        "purpose": "验证工具能够成功从暂存区移除指定的单个文件而不影响工作目录。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "file_pattern": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo\\test_file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.009004592895507812,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage All Files Using Default Pattern",
        "purpose": "测试使用默认模式 '*' 时，工具是否能正确移除所有暂存文件而不影响工作目录。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.004001140594482422,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage Files With Wildcard Pattern",
        "purpose": "验证工具是否支持使用通配符模式（如 *.py）来取消暂存特定类型的文件。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "file_pattern": "*.py"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.004999876022338867,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage Files in Nested Git Repository",
        "purpose": "测试工具是否能够在嵌套路径中的Git仓库中正确执行取消暂存操作。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir1\\newdir2\\nested_git_repo",
          "file_pattern": "*.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\newdir1\\\\newdir2\\\\nested_git_repo\"}"
        },
        "execution_time": 0.006998300552368164,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Unstage in Non-Git Directory",
        "purpose": "验证工具在非Git目录中调用git_reset是否会优雅地处理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_pattern": "*.txt"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Unstaged *.txt.\"}"
        },
        "execution_time": 0.14300847053527832,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage Files with Special Characters in Path",
        "purpose": "测试工具是否能处理包含特殊字符的仓库路径并正确取消暂存文件。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_with_@#$_name",
          "file_pattern": "file@with#special$.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\repo_with_@#$_name\"}"
        },
        "execution_time": 0.004999399185180664,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage Files in Read-Only Git Repo",
        "purpose": "验证工具在只读Git仓库中是否能安全地执行取消暂存操作而不修改文件内容。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "file_pattern": "*.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\"}"
        },
        "execution_time": 0.00299835205078125,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to Unstage with Empty File Pattern",
        "purpose": "测试空文件模式参数是否被正确校验并返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "file_pattern": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"file_pattern must be a non-empty string.\"}"
        },
        "execution_time": 0.00400090217590332,
        "is_functional_test": false
      }
    ],
    "git_log": [
      {
        "case_name": "Get Commit History from Initialized Git Repo",
        "purpose": "验证工具能够正确获取一个已初始化Git仓库的提交历史。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": true
      },
      {
        "case_name": "Get Commit History Without Specifying Path",
        "purpose": "验证工具在未提供路径时是否使用默认或之前初始化的仓库路径。",
        "args": {
          "repo_path": null
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: 1 validation error for git_logArguments\nrepo_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.00800466537475586,
        "is_functional_test": true
      },
      {
        "case_name": "Get Commit History from Nested Git Repo",
        "purpose": "测试工具能否正确读取嵌套目录中的Git仓库提交历史。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir1\\newdir2\\nested_git_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\newdir1\\\\newdir2\\\\nested_git_repo\"}"
        },
        "execution_time": 0.007999897003173828,
        "is_functional_test": true
      },
      {
        "case_name": "Get Commit History in Read-Only Git Repo",
        "purpose": "验证工具能否在只读Git仓库中安全地读取提交历史信息而不修改内容。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\"}"
        },
        "execution_time": 0.004000663757324219,
        "is_functional_test": false
      },
      {
        "case_name": "Get Commit History with Special Characters in Path",
        "purpose": "测试工具是否能处理包含特殊字符的Git仓库路径并返回正确的提交历史信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_with_@#$_name"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\repo_with_@#$_name\"}"
        },
        "execution_time": 0.009006261825561523,
        "is_functional_test": true
      },
      {
        "case_name": "Get Commit History in Non-Git Directory",
        "purpose": "验证工具在非Git目录中调用git_log是否会优雅地处理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"commit c448424977d2d5ae91a7795fd4725d2f5e2f0295\\nAuthor: pouchine <1291980381@qq.com>\\nDate:   Mon Jul 14 21:09:01 2025 +0800\\n\\n    Try commit in non-git directory\"}"
        },
        "execution_time": 0.2120206356048584,
        "is_functional_test": false
      },
      {
        "case_name": "Get Commit History on System Root Path",
        "purpose": "测试工具是否允许对系统根目录执行git_log操作，这可能是一个潜在的安全风险。",
        "args": {
          "repo_path": "C:\\"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git log\\n  stderr: 'fatal: detected dubious ownership in repository at 'C:/'\\n'C:/' is owned by:\\n\\tNT SERVICE/TrustedInstaller (S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)\\nbut the current user is:\\n\\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\\nTo add an exception for this directory, call:\\n\\n\\tgit config --global --add safe.directory C:/'\"}"
        },
        "execution_time": 0.15124130249023438,
        "is_functional_test": false
      },
      {
        "case_name": "Get Commit History with Empty Path",
        "purpose": "测试工具是否能正确校验空路径参数并返回错误提示。",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git log\\n  stderr: 'fatal: detected dubious ownership in repository at 'C:/'\\n'C:/' is owned by:\\n\\tNT SERVICE/TrustedInstaller (S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)\\nbut the current user is:\\n\\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\\nTo add an exception for this directory, call:\\n\\n\\tgit config --global --add safe.directory C:/'\"}"
        },
        "execution_time": 0.15427064895629883,
        "is_functional_test": false
      }
    ],
    "git_create_branch": [
      {
        "case_name": "Create Branch in Initialized Repo with Default Name",
        "purpose": "验证在已初始化的Git仓库中使用默认分支名创建新分支的基本功能。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.004560232162475586,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch in Nested Git Repo",
        "purpose": "测试工具是否能够在嵌套路径的Git仓库中正确创建新分支。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir1\\newdir2\\nested_git_repo",
          "branch_name": "nested-feature"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\newdir1\\\\newdir2\\\\nested_git_repo\"}"
        },
        "execution_time": 0.006009340286254883,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch with Special Characters in Name",
        "purpose": "验证工具能否处理包含特殊字符的分支名称。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "branch_name": "feature@#$_test"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.0049953460693359375,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch in Read-Only Repo",
        "purpose": "测试在只读Git仓库中尝试创建分支时，工具是否能安全地处理权限问题。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "branch_name": "readonly-feature"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\"}"
        },
        "execution_time": 0.005000591278076172,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to Create Branch Without Write Permissions",
        "purpose": "验证工具在用户没有写权限的Git仓库中是否能够优雅地处理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\restricted_write_dir",
          "branch_name": "unwritable-feature"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\restricted_write_dir\"}"
        },
        "execution_time": 0.005999565124511719,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to Create Branch in Non-Git Directory",
        "purpose": "验证工具在非Git目录中调用git_create_branch是否会正确报错。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "non-git-branch"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Created new branch: non-git-branch\"}"
        },
        "execution_time": 0.14716076850891113,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Empty Branch Name",
        "purpose": "测试空分支名称参数是否被正确校验并返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "branch_name": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"branch_name must be a non-empty string.\"}"
        },
        "execution_time": 0.002999544143676758,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch on System Root Path",
        "purpose": "测试工具是否允许在系统根目录创建Git分支，这可能是一个潜在的安全风险。",
        "args": {
          "repo_path": "C:\\",
          "branch_name": "root-feature"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.0029997825622558594,
        "is_functional_test": false
      }
    ],
    "git_checkout": [
      {
        "case_name": "Checkout to Existing Branch",
        "purpose": "验证工具能够成功切换到已存在的分支。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "branch_name": "feature-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.0039408206939697266,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout Without Specifying Repo Path",
        "purpose": "验证在未提供 repo_path 参数时，工具是否使用默认或之前初始化的仓库路径进行切换。",
        "args": {
          "repo_path": null,
          "branch_name": "feature-branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: 1 validation error for git_checkoutArguments\nrepo_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.005002260208129883,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout to Nonexistent Branch",
        "purpose": "测试尝试切换到不存在的分支时是否能正确返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "branch_name": "nonexistent-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout in Nested Repository",
        "purpose": "验证工具能否在嵌套目录中的Git仓库中正确切换分支。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir1\\newdir2\\nested_git_repo",
          "branch_name": "feature-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\newdir1\\\\newdir2\\\\nested_git_repo\"}"
        },
        "execution_time": 0.0029985904693603516,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout with Special Characters in Branch Name",
        "purpose": "测试包含特殊字符的分支名是否能被正确处理并切换。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "branch_name": "branch_with_@#$_special"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.003998517990112305,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout on System Root Path",
        "purpose": "测试工具是否允许对系统根目录执行git_checkout操作，这可能是一个潜在的安全风险。",
        "args": {
          "repo_path": "C:\\",
          "branch_name": "master"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git checkout master\\n  stderr: 'fatal: detected dubious ownership in repository at 'C:/'\\n'C:/' is owned by:\\n\\tNT SERVICE/TrustedInstaller (S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)\\nbut the current user is:\\n\\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\\nTo add an exception for this directory, call:\\n\\n\\tgit config --global --add safe.directory C:/'\"}"
        },
        "execution_time": 0.1988685131072998,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout with Empty Branch Name",
        "purpose": "测试空分支名称参数是否被正确校验并返回错误提示。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "branch_name": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"branch_name must be a non-empty string.\"}"
        },
        "execution_time": 0.003996133804321289,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout in Read-Only Git Repo",
        "purpose": "验证工具能否在只读Git仓库中安全地切换分支而不修改内容。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "branch_name": "feature-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\"}"
        },
        "execution_time": 0.006000518798828125,
        "is_functional_test": false
      }
    ],
    "git_show": [
      {
        "case_name": "Display Commit Details with Valid Repo and Hash",
        "purpose": "验证工具能够正确显示指定提交的详细信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git show a1b2c3d4\\n  stderr: 'fatal: ambiguous argument 'a1b2c3d4': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.24002432823181152,
        "is_functional_test": true
      },
      {
        "case_name": "Display Commit Details Using Default Repo Path",
        "purpose": "验证当未提供 repo_path 时，工具是否使用默认或之前初始化的仓库路径。",
        "args": {
          "repo_path": null,
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: 1 validation error for git_showArguments\nrepo_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.00499725341796875,
        "is_functional_test": true
      },
      {
        "case_name": "Display Commit with Special Characters in Repo Path",
        "purpose": "测试工具能否处理包含特殊字符的仓库路径并成功展示提交详情。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_with_@#$_name",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\repo_with_@#$_name\"}"
        },
        "execution_time": 0.004999637603759766,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Display Commit with Invalid Commit Hash",
        "purpose": "验证工具在提供无效 commit_hash 时是否能优雅地处理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "invalidhash123"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git show invalidhash123\\n  stderr: 'fatal: ambiguous argument 'invalidhash123': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.25346970558166504,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to Display Commit in Non-Git Directory",
        "purpose": "测试工具在非Git目录中调用git_show是否会返回合理错误提示。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_dir",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_dir\"}"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": false
      },
      {
        "case_name": "Display Commit on System Root Path",
        "purpose": "测试工具是否允许对系统根目录执行git_show操作，这可能是一个潜在的安全风险。",
        "args": {
          "repo_path": "C:\\",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git show a1b2c3d4\\n  stderr: 'fatal: detected dubious ownership in repository at 'C:/'\\n'C:/' is owned by:\\n\\tNT SERVICE/TrustedInstaller (S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)\\nbut the current user is:\\n\\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\\nTo add an exception for this directory, call:\\n\\n\\tgit config --global --add safe.directory C:/'\"}"
        },
        "execution_time": 0.13413524627685547,
        "is_functional_test": false
      },
      {
        "case_name": "Display Commit with Empty Commit Hash",
        "purpose": "测试空commit_hash参数是否被正确校验并返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"commit_hash must be a non-empty string.\"}"
        },
        "execution_time": 0.003997802734375,
        "is_functional_test": false
      },
      {
        "case_name": "Display Commit in Read-Only Git Repository",
        "purpose": "验证工具能否在只读Git仓库中安全地读取提交信息而不修改内容。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\"}"
        },
        "execution_time": 0.0070035457611083984,
        "is_functional_test": false
      }
    ],
    "text_write_file": [
      {
        "case_name": "Write Content to New File",
        "purpose": "验证工具能够成功将指定内容写入一个新创建的文件。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "content": "This is a test content."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Wrote content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\"}"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": true
      },
      {
        "case_name": "Overwrite Existing File Content",
        "purpose": "验证工具能够正确覆盖已有文件的内容。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "content": "This is the new content that will overwrite the old one."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Wrote content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt\"}"
        },
        "execution_time": 0.0070037841796875,
        "is_functional_test": true
      },
      {
        "case_name": "Write Empty Content to File",
        "purpose": "测试工具是否允许写入空内容到文件中。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_file.txt",
          "content": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"content must be a non-empty string.\"}"
        },
        "execution_time": 0.0049991607666015625,
        "is_functional_test": true
      },
      {
        "case_name": "Write to File in Read-Only Directory",
        "purpose": "验证工具在只读目录下写入文件是否会优雅地处理权限问题。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\test_file.txt",
          "content": "This should fail due to directory permissions."
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"[Errno 2] No such file or directory: 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\readonly_dir\\\\\\\\test_file.txt'\"}"
        },
        "execution_time": 0.00400233268737793,
        "is_functional_test": false
      },
      {
        "case_name": "Write with Special Characters in File Path",
        "purpose": "测试包含特殊字符的文件路径是否能被正确处理。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\file_with_@#$_name.txt",
          "content": "Content for special path file."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Wrote content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\file_with_@#$_name.txt\"}"
        },
        "execution_time": 0.00899815559387207,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Write with Empty File Path",
        "purpose": "验证工具是否对空文件路径进行校验并返回错误信息。",
        "args": {
          "file_path": "",
          "content": "This should not be written."
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"file_path must be a non-empty string.\"}"
        },
        "execution_time": 0.002997159957885742,
        "is_functional_test": false
      },
      {
        "case_name": "Write to System Root Path",
        "purpose": "测试工具是否允许向系统根目录写入文件，这可能是一个潜在的安全风险。",
        "args": {
          "file_path": "C:\\test_root_write.txt",
          "content": "Writing to system root directory."
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"[Errno 13] Permission denied: 'C:\\\\\\\\test_root_write.txt'\"}"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": false
      }
    ],
    "text_append_to_file": [
      {
        "case_name": "Append Content to New File",
        "purpose": "验证工具能够正确将内容追加到一个不存在的文件中，并创建该文件。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_append_file.txt",
          "content": "This is a new line added to the file."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Appended content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_append_file.txt\"}"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": true
      },
      {
        "case_name": "Append Content to Existing File",
        "purpose": "验证工具能够正确将内容追加到已存在的文件末尾，而不覆盖原有内容。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "content": "\nAdditional line appended."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Appended content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt\"}"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": true
      },
      {
        "case_name": "Append Empty Content to File",
        "purpose": "测试工具在内容为空时是否仍能成功执行追加操作。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_file.txt",
          "content": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"content must be a non-empty string.\"}"
        },
        "execution_time": 0.0030012130737304688,
        "is_functional_test": true
      },
      {
        "case_name": "Append with Special Characters in File Path",
        "purpose": "测试包含特殊字符的文件路径是否被正确处理。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\file_with_@#$_name.txt",
          "content": "\nSpecial path test content."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Appended content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\file_with_@#$_name.txt\"}"
        },
        "execution_time": 0.0029997825622558594,
        "is_functional_test": true
      },
      {
        "case_name": "Append to Read-Only File",
        "purpose": "验证工具在目标文件为只读时能否安全地处理错误或自动调整权限。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\readonly_file.txt",
          "content": "\nTrying to append to read-only file."
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"[Errno 2] No such file or directory: 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\readonly_dir\\\\\\\\readonly_file.txt'\"}"
        },
        "execution_time": 0.0029969215393066406,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt Append Without Write Permissions",
        "purpose": "测试在无写入权限的目录下尝试追加内容是否会优雅失败并返回错误信息。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\restricted_write_dir\\no_write_file.txt",
          "content": "\nContent that should not be written."
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"[Errno 2] No such file or directory: 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\restricted_write_dir\\\\\\\\no_write_file.txt'\"}"
        },
        "execution_time": 0.00299835205078125,
        "is_functional_test": false
      },
      {
        "case_name": "Append with Empty File Path",
        "purpose": "测试空文件路径参数是否被正确校验并返回错误提示。",
        "args": {
          "file_path": "",
          "content": "This should not be appended."
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"file_path must be a non-empty string.\"}"
        },
        "execution_time": 0.005002737045288086,
        "is_functional_test": false
      },
      {
        "case_name": "Append to System Root Path File",
        "purpose": "测试工具是否允许对系统根目录下的文件进行追加操作，这可能是一个潜在的安全风险。",
        "args": {
          "file_path": "C:\\system_root_test.txt",
          "content": "\nAppending to system root file."
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"[Errno 13] Permission denied: 'C:\\\\\\\\system_root_test.txt'\"}"
        },
        "execution_time": 0.006996631622314453,
        "is_functional_test": false
      }
    ],
    "text_extract_regex": [
      {
        "case_name": "Basic Regex Match Extraction",
        "purpose": "验证工具能否从文本中正确提取第一个正则匹配结果。",
        "args": {
          "text": "Commit: a1b2c3d4",
          "pattern": "commit (\\w+)"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"No match found for pattern 'commit (\\\\w+)' in the provided text.\"}"
        },
        "execution_time": 0.004822492599487305,
        "is_functional_test": true
      },
      {
        "case_name": "No Match Found Case",
        "purpose": "测试工具在没有找到匹配项时是否抛出ValueError并优雅处理错误。",
        "args": {
          "text": "No commit hash here",
          "pattern": "commit (\\w+)"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"hash\"}"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Regular Expression Pattern",
        "purpose": "验证工具对非法正则表达式模式的处理能力，如未闭合的分组。",
        "args": {
          "text": "This is a test string",
          "pattern": "(test"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"missing ), unterminated subpattern at position 0\"}"
        },
        "execution_time": 0.0055429935455322266,
        "is_functional_test": false
      },
      {
        "case_name": "Empty Text Input",
        "purpose": "测试工具在空文本输入下是否能正确校验参数并返回错误信息。",
        "args": {
          "text": "",
          "pattern": "\\d+"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"text must be a non-empty string.\"}"
        },
        "execution_time": 0.008014678955078125,
        "is_functional_test": false
      },
      {
        "case_name": "Extract Version Number from Log",
        "purpose": "验证工具能否从日志字符串中正确提取版本号。",
        "args": {
          "text": "Application started at version 2.3.5",
          "pattern": "version (\\d+\\.\\d+\\.\\d+)"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"2.3.5\"}"
        },
        "execution_time": 0.005005598068237305,
        "is_functional_test": true
      },
      {
        "case_name": "Match with Special Characters in Pattern",
        "purpose": "测试工具是否支持包含特殊字符的正则表达式模式进行匹配提取。",
        "args": {
          "text": "User input: query?search=example.com",
          "pattern": "query\\?(.*)=(.*)"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"search\"}"
        },
        "execution_time": 0.008011102676391602,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Path Traversal Attempt in Pattern",
        "purpose": "测试工具是否允许通过正则模式间接触发路径遍历等潜在安全风险。",
        "args": {
          "text": "File path: ../../etc/passwd",
          "pattern": "(\\.\\./)+(.*)"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"../\"}"
        },
        "execution_time": 0.007215976715087891,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Longest Possible Match",
        "purpose": "验证工具能否正确处理边界条件，例如最长可能的匹配提取。",
        "args": {
          "text": "abc123xyz456def789ghi",
          "pattern": "(\\d+)"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"123\"}"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 119
}