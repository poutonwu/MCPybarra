{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "qwen-max-latest-mcp_mongodb_manager",
  "server_path": "workspace/pipeline-output-servers/qwen-max-latest/mcp_mongodb_manager/refined/server.py",
  "timestamp": "2025-07-14T21:02:36.394106",
  "tools": [
    {
      "name": "mcp_list_databases",
      "description": "\n    Lists all available databases in the MongoDB instance.\n\n    Returns:\n        A JSON-formatted string containing a list of database names.\n\n    Example:\n        mcp_list_databases()\n        => '[\"admin\", \"config\", \"local\"]'\n    ",
      "args_schema": {
        "properties": {},
        "title": "mcp_list_databasesArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_list_collections",
      "description": "\n    Lists all collections within a specified database in the MongoDB instance.\n\n    Args:\n        database_name: The name of the database whose collections need to be listed.\n\n    Returns:\n        A JSON-formatted string containing a list of collection names.\n\n    Raises:\n        ValueError: If the database name is invalid.\n        RuntimeError: If an error occurs while listing collections.\n\n    Example:\n        mcp_list_collections(database_name=\"test_db\")\n        => '[\"users\", \"products\"]'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          }
        },
        "required": [
          "database_name"
        ],
        "title": "mcp_list_collectionsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_insert_document",
      "description": "\n    Inserts a new document into a specified collection within a specified database.\n\n    Args:\n        database_name: The name of the target database.\n        collection_name: The name of the target collection.\n        document: The document to insert, represented as a Python dictionary.\n\n    Returns:\n        A JSON-formatted string containing the ID of the newly inserted document.\n\n    Raises:\n        ValueError: If any argument is invalid.\n        RuntimeError: If an error occurs during document insertion.\n\n    Example:\n        mcp_insert_document(\n            database_name=\"test_db\",\n            collection_name=\"users\",\n            document={\"name\": \"Alice\", \"age\": 30}\n        )\n        => '\"65a4f8b9d3c5f2e4d8e9f0a1\"'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "document": {
            "title": "Document",
            "type": "object"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "document"
        ],
        "title": "mcp_insert_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_find_documents",
      "description": "\n    Queries documents from a specified collection within a specified database, with optional projection and result limit.\n\n    Args:\n        database_name: The name of the target database.\n        collection_name: The name of the target collection.\n        query: A query filter represented as a Python dictionary. Defaults to None.\n        projection: Specifies fields to include or exclude in the returned documents. Defaults to None.\n        limit: Limits the number of documents returned. Defaults to None.\n\n    Returns:\n        A JSON-formatted string containing a list of matching documents.\n\n    Raises:\n        ValueError: If any argument is invalid.\n        RuntimeError: If an error occurs during querying.\n\n    Example:\n        mcp_find_documents(\n            database_name=\"test_db\",\n            collection_name=\"users\",\n            query={\"age\": {\"$gt\": 25}},\n            projection={\"_id\": 0, \"name\": 1},\n            limit=2\n        )\n        => '[{\"name\": \"Alice\"}, {\"name\": \"Bob\"}]'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "default": null,
            "title": "Query",
            "type": "object"
          },
          "projection": {
            "default": null,
            "title": "Projection",
            "type": "object"
          },
          "limit": {
            "default": null,
            "title": "Limit",
            "type": "integer"
          }
        },
        "required": [
          "database_name",
          "collection_name"
        ],
        "title": "mcp_find_documentsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_update_document",
      "description": "\n    Updates one or multiple documents in a specified collection within a specified database.\n\n    Args:\n        database_name: The name of the target database.\n        collection_name: The name of the target collection.\n        filter_query: A filter to identify the documents to update.\n        update_data: The update operations to apply, represented as a Python dictionary.\n        multi: If True, updates all matching documents; otherwise, updates only the first match.\n\n    Returns:\n        A JSON-formatted string containing the number of documents modified.\n\n    Raises:\n        ValueError: If any argument is invalid.\n        RuntimeError: If an error occurs during updating.\n\n    Example:\n        mcp_update_document(\n            database_name=\"test_db\",\n            collection_name=\"users\",\n            filter_query={\"age\": {\"$lt\": 30}},\n            update_data={\"$set\": {\"status\": \"inactive\"}},\n            multi=True\n        )\n        => '3'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "filter_query": {
            "title": "Filter Query",
            "type": "object"
          },
          "update_data": {
            "title": "Update Data",
            "type": "object"
          },
          "multi": {
            "title": "Multi",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "filter_query",
          "update_data",
          "multi"
        ],
        "title": "mcp_update_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_delete_document",
      "description": "\n    Deletes one or multiple documents from a specified collection within a specified database.\n\n    Args:\n        database_name: The name of the target database.\n        collection_name: The name of the target collection.\n        filter_query: A filter to identify the documents to delete.\n        multi: If True, deletes all matching documents; otherwise, deletes only the first match.\n\n    Returns:\n        A JSON-formatted string containing the number of documents deleted.\n\n    Raises:\n        ValueError: If any argument is invalid.\n        RuntimeError: If an error occurs during deletion.\n\n    Example:\n        mcp_delete_document(\n            database_name=\"test_db\",\n            collection_name=\"users\",\n            filter_query={\"status\": \"inactive\"},\n            multi=True\n        )\n        => '2'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "filter_query": {
            "title": "Filter Query",
            "type": "object"
          },
          "multi": {
            "title": "Multi",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "filter_query",
          "multi"
        ],
        "title": "mcp_delete_documentArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "mcp_list_databases": [
      {
        "case_name": "List Databases Successfully",
        "purpose": "验证工具能够成功列出 MongoDB 实例中的所有数据库名称，并返回 JSON 格式结果。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.005000114440917969,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Database List Response",
        "purpose": "验证当 MongoDB 实例中没有可用数据库时，工具是否能正确返回空数组。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.004652500152587891,
        "is_functional_test": true
      },
      {
        "case_name": "Database Names Contain Special Characters",
        "purpose": "验证工具是否能正确处理并返回包含特殊字符的数据库名列表。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.009212493896484375,
        "is_functional_test": true
      },
      {
        "case_name": "MongoDB Instance Not Reachable",
        "purpose": "验证当 MongoDB 实例无法连接时，工具是否能优雅地处理错误并返回适当的错误信息。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.005001544952392578,
        "is_functional_test": false
      },
      {
        "case_name": "Unauthorized Access to MongoDB",
        "purpose": "验证在无权限访问 MongoDB 实例的情况下，工具是否能安全地处理认证失败情况。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.0055103302001953125,
        "is_functional_test": false
      },
      {
        "case_name": "Maximum Database Count Limit",
        "purpose": "测试工具在 MongoDB 中存在大量数据库时是否能正确处理边界条件。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.006998777389526367,
        "is_functional_test": false
      },
      {
        "case_name": "Longest Database Name Length Handling",
        "purpose": "验证工具是否能正确处理超长数据库名称的情况。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.00400090217590332,
        "is_functional_test": false
      },
      {
        "case_name": "Security Check for Sensitive Data Exposure",
        "purpose": "确保返回的数据库列表不包含敏感或内部系统数据（如密码、配置等）。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.007005214691162109,
        "is_functional_test": false
      }
    ],
    "mcp_list_collections": [
      {
        "case_name": "List Collections Successfully",
        "purpose": "验证工具能够成功列出指定数据库中的所有集合名称，并返回 JSON 格式结果。",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "[\"a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\", \"new_collection\", \"test_collection\", \"empty_docs\", \"invalid/collection*name\", \"user_profiles\", \"long_key_collection\", \"test_collection'; DROP COLLECTION test_collection;--\", \"large_data\", \"special_chars_collection\", \"binary_data_collection\", \"nonexistent_collection\", \"a_very_long_collection_name_that_exceeds_normal_limits_and_might_cause_issues\", \"users\"]"
        },
        "execution_time": 0.004999399185180664,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Collection List Response",
        "purpose": "验证当指定数据库中没有集合时，工具是否能正确返回空数组。",
        "args": {
          "database_name": "empty_db"
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.004001140594482422,
        "is_functional_test": true
      },
      {
        "case_name": "Collection Names Contain Special Characters",
        "purpose": "验证工具是否能正确处理并返回包含特殊字符的集合名列表。",
        "args": {
          "database_name": "db@#_测试"
        },
        "response": {
          "result": "[\"test_collection\", \"special_chars_collection\", \"new_collection\", \"users\"]"
        },
        "execution_time": 0.007998466491699219,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Database Name Input",
        "purpose": "验证当提供无效的数据库名称时，工具是否抛出 ValueError 异常。",
        "args": {
          "database_name": ""
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_list_collections: Invalid database name: ''. Must be a non-empty string."
        },
        "execution_time": 0.006000995635986328,
        "is_functional_test": false
      },
      {
        "case_name": "Database Does Not Exist",
        "purpose": "验证当指定的数据库不存在时，工具是否抛出 RuntimeError 错误。",
        "args": {
          "database_name": "does_not_exist_db"
        },
        "response": {
          "result": "[\"new_collection\", \"test_collection\"]"
        },
        "execution_time": 0.006998300552368164,
        "is_functional_test": false
      },
      {
        "case_name": "Security Check for Sensitive Data Exposure",
        "purpose": "确保返回的集合列表不包含敏感或内部系统数据（如密码、配置等）。",
        "args": {
          "database_name": "restricted_db"
        },
        "response": {
          "result": "[\"secure_collection\"]"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      },
      {
        "case_name": "Longest Collection Name Handling",
        "purpose": "验证工具是否能正确处理超长集合名称的情况。",
        "args": {
          "database_name": "large_db"
        },
        "response": {
          "result": "[\"large_collection\"]"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": true
      }
    ],
    "mcp_insert_document": [
      {
        "case_name": "Insert Document Successfully",
        "purpose": "验证工具能够成功将文档插入到指定数据库和集合中，并返回新插入文档的ID。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "document": {
            "name": "Alice",
            "age": 30
          }
        },
        "response": {
          "result": "\"6875002364da856800f5cacb\""
        },
        "execution_time": 0.007519960403442383,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document with Empty Database Name",
        "purpose": "验证当提供空数据库名称时，工具是否抛出 ValueError 异常。",
        "args": {
          "database_name": "",
          "collection_name": "users",
          "document": {
            "name": "Bob",
            "age": 25
          }
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_insert_document: Invalid database name: ''. Must be a non-empty string."
        },
        "execution_time": 0.002998828887939453,
        "is_functional_test": false
      },
      {
        "case_name": "Insert Document with Empty Collection Name",
        "purpose": "验证当提供空集合名称时，工具是否抛出 ValueError 异常。",
        "args": {
          "database_name": "test_db",
          "collection_name": "",
          "document": {
            "name": "Charlie",
            "age": 35
          }
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_insert_document: Invalid collection name: ''. Must be a non-empty string."
        },
        "execution_time": 0.00799870491027832,
        "is_functional_test": false
      },
      {
        "case_name": "Insert Document into Non-Existent Database",
        "purpose": "验证当目标数据库不存在时，工具是否能正确处理并插入文档（假设MongoDB自动创建）。",
        "args": {
          "database_name": "new_db",
          "collection_name": "users",
          "document": {
            "name": "David",
            "age": 40
          }
        },
        "response": {
          "result": "\"6875002364da856800f5cacc\""
        },
        "execution_time": 0.021003246307373047,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document with Special Characters in Keys",
        "purpose": "验证文档中的键包含特殊字符时是否能正确插入。",
        "args": {
          "database_name": "test_db",
          "collection_name": "special_chars_collection",
          "document": {
            "user@name": "Eve",
            "age!": 28
          }
        },
        "response": {
          "result": "\"6875002364da856800f5cacd\""
        },
        "execution_time": 0.005998134613037109,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document with Binary Data",
        "purpose": "验证文档中包含二进制数据时是否能正确插入。",
        "args": {
          "database_name": "test_db",
          "collection_name": "binary_data_collection",
          "document": {
            "file_data": {
              "$binary": {
                "base64": "SGVsbG8gd29ybGQ=",
                "subType": "00"
              }
            }
          }
        },
        "response": {
          "result": "\"6875002364da856800f5cace\""
        },
        "execution_time": 0.008000373840332031,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document with Long Field Names",
        "purpose": "验证文档中字段名非常长时是否能正确插入。",
        "args": {
          "database_name": "large_db",
          "collection_name": "long_key_collection",
          "document": {
            "a_very_long_field_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it": "value"
          }
        },
        "response": {
          "result": "\"6875002364da856800f5cacf\""
        },
        "execution_time": 0.019101381301879883,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document into Restricted Database",
        "purpose": "验证在没有权限访问的数据库中尝试插入文档是否会抛出运行时错误。",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "secure_collection",
          "document": {
            "secret": "top_secret_data"
          }
        },
        "response": {
          "result": "\"6875002364da856800f5cad0\""
        },
        "execution_time": 0.004685163497924805,
        "is_functional_test": false
      }
    ],
    "mcp_find_documents": [
      {
        "case_name": "Basic Document Query Without Filters",
        "purpose": "验证工具在未指定查询条件、投影和限制时能否正确返回集合中的所有文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users"
        },
        "response": {
          "result": "[{\"_id\": \"6872ad03424cddc98ebe1c0b\", \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6872bc93b11f255c82054b2a\", \"name\": \"John\", \"age\": 35, \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6872bc93b11f255c82054b2c\", \"user@name\": \"Eve\", \"age#\": 28, \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6872bc93b11f255c82054b2d\", \"a_very_long_key_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\": \"value\", \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6872bc93b11f255c82054b2e\", \"name\": \"Invalid\", \"age\": \"thirty\", \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6874f8d7935c390f10319632\", \"name\": \"Alice\", \"age\": 30}, {\"_id\": \"6875002364da856800f5cacb\", \"name\": \"Alice\", \"age\": 30}]"
        },
        "execution_time": 0.0059964656829833984,
        "is_functional_test": true
      },
      {
        "case_name": "Document Query With Simple Filter",
        "purpose": "验证工具是否能根据基本查询条件（如字段值匹配）正确过滤文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "age": 30
          }
        },
        "response": {
          "result": "[{\"_id\": \"6874f8d7935c390f10319632\", \"name\": \"Alice\", \"age\": 30}, {\"_id\": \"6875002364da856800f5cacb\", \"name\": \"Alice\", \"age\": 30}]"
        },
        "execution_time": 0.005845308303833008,
        "is_functional_test": true
      },
      {
        "case_name": "Document Query With Projection",
        "purpose": "验证工具是否能正确应用字段投影，仅返回指定字段。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "age": {
              "$gt": 25
            }
          },
          "projection": {
            "_id": 0,
            "name": 1
          }
        },
        "response": {
          "result": "[{\"name\": \"John\"}, {\"name\": \"Alice\"}, {\"name\": \"Alice\"}]"
        },
        "execution_time": 0.007999420166015625,
        "is_functional_test": true
      },
      {
        "case_name": "Document Query With Limit",
        "purpose": "验证工具是否能正确限制返回的文档数量。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "age": {
              "$gt": 25
            }
          },
          "limit": 2
        },
        "response": {
          "result": "[{\"_id\": \"6872bc93b11f255c82054b2a\", \"name\": \"John\", \"age\": 35, \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6874f8d7935c390f10319632\", \"name\": \"Alice\", \"age\": 30}]"
        },
        "execution_time": 0.003998279571533203,
        "is_functional_test": true
      },
      {
        "case_name": "Query With Special Characters in Database and Collection Name",
        "purpose": "验证工具是否能处理包含特殊字符的数据库名和集合名进行文档查询。",
        "args": {
          "database_name": "db@#_测试",
          "collection_name": "special_chars_collection",
          "query": {
            "name": "张三"
          }
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.006785154342651367,
        "is_functional_test": true
      },
      {
        "case_name": "Security Check for Sensitive Data Exposure",
        "purpose": "确保查询结果不暴露敏感信息，例如密码等字段。",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "secure_collection",
          "projection": {
            "password": 0
          }
        },
        "response": {
          "result": "[{\"_id\": \"6872af6d9da8b940f807d369\", \"secret_key\": \"top_secret_value\"}, {\"_id\": \"6872b2dfbde7bc28413c2751\", \"data\": \"sensitive_info\"}, {\"_id\": \"6872bc93b11f255c82054b2f\", \"name\": \"Unauthorized\", \"age\": 50}, {\"_id\": \"6872bf1e0e2fc95fbcc97ad0\", \"sensitive_data\": \"classified_info\"}, {\"_id\": \"6872c264cf57d11985b19219\", \"sensitive_data\": \"confidential_info\"}, {\"_id\": \"6874f8d7935c390f10319635\", \"sensitive_data\": \"secret\"}, {\"_id\": \"6875002364da856800f5cad0\", \"secret\": \"top_secret_data\"}]"
        },
        "execution_time": 0.009000062942504883,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Database Name Input",
        "purpose": "验证当提供无效的数据库名称时，工具是否抛出 ValueError 异常。",
        "args": {
          "database_name": "",
          "collection_name": "users"
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_find_documents: Invalid database name: ''. Must be a non-empty string."
        },
        "execution_time": 0.004999637603759766,
        "is_functional_test": false
      },
      {
        "case_name": "Database or Collection Does Not Exist",
        "purpose": "验证当指定的数据库或集合不存在时，工具是否抛出 RuntimeError 错误。",
        "args": {
          "database_name": "does_not_exist_db",
          "collection_name": "nonexistent_collection"
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.007997512817382812,
        "is_functional_test": false
      }
    ],
    "mcp_update_document": [
      {
        "case_name": "Update Single Document Successfully",
        "purpose": "验证工具能够成功更新匹配查询的第一个文档，并返回正确的修改数量。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "age": {
              "$lt": 30
            }
          },
          "update_data": {
            "$set": {
              "status": "inactive"
            }
          },
          "multi": false
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.009999275207519531,
        "is_functional_test": true
      },
      {
        "case_name": "Update Multiple Documents Successfully",
        "purpose": "验证当 multi 参数为 True 时，工具能够正确更新所有匹配的文档，并返回正确的修改数量。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "age": {
              "$lt": 30
            }
          },
          "update_data": {
            "$set": {
              "status": "inactive"
            }
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.006000518798828125,
        "is_functional_test": true
      },
      {
        "case_name": "No Matching Documents to Update",
        "purpose": "验证当 filter_query 没有匹配任何文档时，工具是否返回 '0' 并不抛出异常。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "age": {
              "$gt": 100
            }
          },
          "update_data": {
            "$set": {
              "status": "inactive"
            }
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.007000923156738281,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Database Name Input",
        "purpose": "验证当提供无效的数据库名称时，工具是否抛出 ValueError 异常。",
        "args": {
          "database_name": "",
          "collection_name": "users",
          "filter_query": {
            "age": {
              "$lt": 30
            }
          },
          "update_data": {
            "$set": {
              "status": "inactive"
            }
          },
          "multi": true
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_update_document: Invalid database name: ''. Must be a non-empty string."
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": false
      },
      {
        "case_name": "Database Does Not Exist",
        "purpose": "验证当指定的数据库不存在时，工具是否抛出 RuntimeError 错误。",
        "args": {
          "database_name": "does_not_exist_db",
          "collection_name": "users",
          "filter_query": {
            "age": {
              "$lt": 30
            }
          },
          "update_data": {
            "$set": {
              "status": "inactive"
            }
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.008001565933227539,
        "is_functional_test": false
      },
      {
        "case_name": "Collection Does Not Exist",
        "purpose": "验证当指定的集合不存在时，工具是否抛出 RuntimeError 错误。",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "filter_query": {
            "age": {
              "$lt": 30
            }
          },
          "update_data": {
            "$set": {
              "status": "inactive"
            }
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.00499725341796875,
        "is_functional_test": false
      },
      {
        "case_name": "Update with Special Characters in Filter Query",
        "purpose": "验证工具是否能处理包含特殊字符的 filter_query 进行更新操作。",
        "args": {
          "database_name": "db@#_测试",
          "collection_name": "special_chars_collection",
          "filter_query": {
            "username": "user@domain.com"
          },
          "update_data": {
            "$set": {
              "email": "new@domain.com"
            }
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.005002498626708984,
        "is_functional_test": true
      },
      {
        "case_name": "Security Check for Sensitive Data Exposure",
        "purpose": "确保更新操作不会暴露敏感或内部系统数据（如密码、配置等）。",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "secure_collection",
          "filter_query": {
            "role": "admin"
          },
          "update_data": {
            "$set": {
              "status": "deactivated"
            }
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.009007453918457031,
        "is_functional_test": false
      }
    ],
    "mcp_delete_document": [
      {
        "case_name": "Delete Single Document Successfully",
        "purpose": "验证工具能够成功删除单个匹配的文档并返回正确的删除数量。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "status": "inactive"
          },
          "multi": false
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.006009340286254883,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Multiple Documents Successfully",
        "purpose": "验证当 multi 参数为 True 时，工具能正确删除所有匹配文档并返回总数。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "role": "guest"
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.0040476322174072266,
        "is_functional_test": true
      },
      {
        "case_name": "Delete With Empty Filter Query",
        "purpose": "验证使用空 filter_query 删除所有文档的行为是否符合预期，并返回正确数量。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {},
          "multi": true
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_delete_document: Filter query must be a non-empty dictionary."
        },
        "execution_time": 0.005507946014404297,
        "is_functional_test": true
      },
      {
        "case_name": "Delete From Nonexistent Collection",
        "purpose": "验证当指定集合不存在时，工具是否抛出 RuntimeError。",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "filter_query": {
            "status": "inactive"
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.006989717483520508,
        "is_functional_test": false
      },
      {
        "case_name": "Delete With Invalid Database Name",
        "purpose": "验证当提供无效数据库名称时，工具是否抛出 ValueError。",
        "args": {
          "database_name": "",
          "collection_name": "users",
          "filter_query": {
            "status": "inactive"
          },
          "multi": true
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_delete_document: Invalid database name: ''. Must be a non-empty string."
        },
        "execution_time": 0.004998683929443359,
        "is_functional_test": false
      },
      {
        "case_name": "Delete Using Special Characters in Filter",
        "purpose": "验证工具是否能正确处理包含特殊字符的 filter_query。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "username": "user@#_测试"
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.009002447128295898,
        "is_functional_test": true
      },
      {
        "case_name": "Security Check for Unauthorized Deletion Attempt",
        "purpose": "确保无权限用户尝试删除时，工具能安全地拒绝操作并抛出异常。",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "secure_collection",
          "filter_query": {
            "access_level": "low"
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.00599980354309082,
        "is_functional_test": false
      },
      {
        "case_name": "Delete From Large Collection",
        "purpose": "验证在大型集合中执行删除操作时，工具是否能正常响应且不超时。",
        "args": {
          "database_name": "large_db",
          "collection_name": "large_collection",
          "filter_query": {
            "status": "archived"
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.009003400802612305,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 47
}