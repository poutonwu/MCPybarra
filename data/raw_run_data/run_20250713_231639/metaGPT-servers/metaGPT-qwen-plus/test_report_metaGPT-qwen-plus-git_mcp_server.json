{
  "server_name": "git_mcp_server",
  "parent_dir": "metaGPT-qwen-plus",
  "report_name": "metaGPT-qwen-plus-git_mcp_server",
  "server_path": "workspace\\metaGPT-servers\\metaGPT-qwen-plus\\git_mcp_server.py",
  "timestamp": "2025-07-13T23:16:42.036418",
  "tools": [
    {
      "name": "git_init",
      "description": "Initialize a new Git repository.\n\n    Args:\n        path: The directory path where to create the repository.\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_initArguments",
        "type": "object"
      }
    },
    {
      "name": "git_status",
      "description": "Get the status of a Git repository.\n\n    Args:\n        path: Path to the repository.\n\n    Returns:\n        A string containing the status output.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_statusArguments",
        "type": "object"
      }
    },
    {
      "name": "git_add",
      "description": "Add files to the staging area.\n\n    Args:\n        path: Path to the repository.\n        file_pattern: Pattern of files to add (default is all files).\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "file_pattern": {
            "default": ".",
            "title": "File Pattern",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_addArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_unstaged",
      "description": "Show differences in unstaged changes.\n\n    Args:\n        path: Path to the repository.\n\n    Returns:\n        A string containing the diff output.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_diff_unstagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_staged",
      "description": "Show differences in staged changes.\n\n    Args:\n        path: Path to the repository.\n\n    Returns:\n        A string containing the diff output.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_diff_stagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff",
      "description": "Compare two commits or branches.\n\n    Args:\n        path: Path to the repository.\n        commit_range: Range of commits to compare (e.g., 'HEAD~2..HEAD').\n\n    Returns:\n        A string containing the diff output.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "commit_range": {
            "title": "Commit Range",
            "type": "string"
          }
        },
        "required": [
          "path",
          "commit_range"
        ],
        "title": "git_diffArguments",
        "type": "object"
      }
    },
    {
      "name": "git_commit",
      "description": "Commit changes in the repository.\n\n    Args:\n        path: Path to the repository.\n        message: Commit message.\n        author: Optional author name and email (format: 'Name <email>').\n\n    Returns:\n        A string containing the commit hash.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "message": {
            "title": "Message",
            "type": "string"
          },
          "author": {
            "default": null,
            "title": "Author",
            "type": "string"
          }
        },
        "required": [
          "path",
          "message"
        ],
        "title": "git_commitArguments",
        "type": "object"
      }
    },
    {
      "name": "git_reset",
      "description": "Unstage changes in the repository.\n\n    Args:\n        path: Path to the repository.\n        file_path: Optional specific file to unstage. If None, unstages all.\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "file_path": {
            "default": null,
            "title": "File Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_resetArguments",
        "type": "object"
      }
    },
    {
      "name": "git_log",
      "description": "View commit history.\n\n    Args:\n        path: Path to the repository.\n        max_count: Maximum number of commits to show (default: 10).\n\n    Returns:\n        A string containing the commit history.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "max_count": {
            "default": 10,
            "title": "Max Count",
            "type": "integer"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_logArguments",
        "type": "object"
      }
    },
    {
      "name": "git_create_branch",
      "description": "Create a new branch.\n\n    Args:\n        path: Path to the repository.\n        branch_name: Name of the new branch.\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "path",
          "branch_name"
        ],
        "title": "git_create_branchArguments",
        "type": "object"
      }
    },
    {
      "name": "git_checkout",
      "description": "Switch to a different branch.\n\n    Args:\n        path: Path to the repository.\n        branch_name: Name of the branch to switch to.\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "path",
          "branch_name"
        ],
        "title": "git_checkoutArguments",
        "type": "object"
      }
    },
    {
      "name": "git_show",
      "description": "Display details of a specific commit.\n\n    Args:\n        path: Path to the repository.\n        commit_hash: Hash of the commit to show.\n\n    Returns:\n        A string containing the commit details.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "commit_hash": {
            "title": "Commit Hash",
            "type": "string"
          }
        },
        "required": [
          "path",
          "commit_hash"
        ],
        "title": "git_showArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "git_init": [
      {
        "case_name": "Initialize Git Repository in Valid Directory",
        "purpose": "验证git_init工具可以在指定的有效路径下成功初始化一个新的Git仓库。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.13638925552368164,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Git Init on Non-Existent Path",
        "purpose": "验证当提供的路径不存在时，工具是否抛出ValueError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_folder"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_folder"
        },
        "execution_time": 0.18328046798706055,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt Git Init On Read-Only Directory",
        "purpose": "验证在只读目录中尝试初始化Git仓库时是否会引发GitCommandError。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_test_file.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_init: Cmd('git') failed due to: exit code(1)\n  cmdline: git init\n  stderr: 'Failed to initialize repository: Cmd('git') not found due to: NotADirectoryError('[WinError 267] 目录名称无效。')\n  cmdline: git init'"
        },
        "execution_time": 0.004999637603759766,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repo With Default Arguments",
        "purpose": "使用默认参数测试基本功能（如果适用）。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.14456844329833984,
        "is_functional_test": true
      },
      {
        "case_name": "Test Git Init With Special Characters In Path",
        "purpose": "验证包含特殊字符的路径是否能被正确处理或是否返回预期错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#&()_dir"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#&()_dir"
        },
        "execution_time": 0.18402862548828125,
        "is_functional_test": false
      },
      {
        "case_name": "Test Git Init On Already Initialized Repository",
        "purpose": "验证在已经存在Git仓库的路径上再次运行git_init是否会正确报错。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.14029812812805176,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt Git Init on System Root",
        "purpose": "验证工具是否阻止用户在系统关键目录（如根目录）中初始化Git仓库。",
        "args": {
          "path": "C:\\"
        },
        "response": {
          "result": "Repository initialized at C:\\"
        },
        "execution_time": 0.1879289150238037,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Test - Very Long Path Name",
        "purpose": "验证工具是否能够处理非常长的路径名称，确保边界条件下的健壮性。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ_!@#$%^&*()_+{}[];':\",./<>?"
        },
        "response": {
          "error": "ToolException: Error executing tool git_init: Cmd('git') failed due to: exit code(1)\n  cmdline: git init\n  stderr: 'Failed to initialize repository: [WinError 123] 文件名、目录名或卷标语法不正确。: 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ_!@#$%^&*()_+{}[];\\':\",''"
        },
        "execution_time": 0.0050048828125,
        "is_functional_test": false
      }
    ],
    "git_status": [
      {
        "case_name": "Get Git Status in Initialized Repository",
        "purpose": "验证git_status工具可以在已初始化的Git仓库路径下成功获取状态信息。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\t.hidden_test_file.txt\n\tapp.ico\n\tcustom_screenshot.png\n\tcustom_screenshot_converted.png\n\tlong_process_screenshot.png\n\tmerged_@#$.pdf\n\tmodules.xml\n\tmulti_monitor_screenshot.png\n\tmulti_monitor_screenshot_converted.gif\n\tnature.jpeg\n\tnature_converted.jpeg\n\tnature_converted.png\n\tnonname.html\n\tpaper1.pdf\n\tpresent.html\n\tre2.doc\n\trule1.pdf\n\tsingle_file_merged_output.pdf\n\tsingle_merged_output.pdf\n\tspecial@#&()_dir/\n\tswe.pptx\n\txue.jpg\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.1531519889831543,
        "is_functional_test": true
      },
      {
        "case_name": "Get Git Status in Subdirectory of Git Repo",
        "purpose": "验证在Git仓库的子目录中执行git_status是否能正确返回仓库状态。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#&()_dir"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)"
        },
        "execution_time": 0.17502617835998535,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Git Status on Non-Existent Path",
        "purpose": "验证当提供的路径不存在时，git_status是否抛出ValueError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_folder"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)"
        },
        "execution_time": 0.11850929260253906,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt Git Status on Read-Only File",
        "purpose": "验证对只读文件路径调用git_status是否会引发GitCommandError。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_test_file.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_test_file.txt"
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Attempt Git Status on System Root",
        "purpose": "验证工具是否阻止用户在系统根目录调用git_status。",
        "args": {
          "path": "C:\\"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: Cmd('git') failed due to: exit code(128)\n  cmdline: git status\n  stderr: 'fatal: detected dubious ownership in repository at 'C:/'\n'C:/' is owned by:\n\tNT SERVICE/TrustedInstaller (S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)\nbut the current user is:\n\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\nTo add an exception for this directory, call:\n\n\tgit config --global --add safe.directory C:/'"
        },
        "execution_time": 0.17395853996276855,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status With Special Characters In Path",
        "purpose": "验证包含特殊字符的路径是否能被正确处理或是否返回预期错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#&()_dir"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)"
        },
        "execution_time": 0.21016240119934082,
        "is_functional_test": true
      },
      {
        "case_name": "Boundary Test - Very Long Path Name for Git Status",
        "purpose": "验证工具是否能够处理非常长的路径名称，确保边界条件下的健壮性。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ_!@#$%^&*()_+{}[];':\",./<>?"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ_!@#$%^&*()_+{}[];':\",./<>?"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status On Clean Repository",
        "purpose": "验证在一个干净（无修改）的Git仓库中执行git_status是否返回空状态。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\t.hidden_test_file.txt\n\tapp.ico\n\tcustom_screenshot.png\n\tcustom_screenshot_converted.png\n\tlong_process_screenshot.png\n\tmerged_@#$.pdf\n\tmodules.xml\n\tmulti_monitor_screenshot.png\n\tmulti_monitor_screenshot_converted.gif\n\tnature.jpeg\n\tnature_converted.jpeg\n\tnature_converted.png\n\tnonname.html\n\tpaper1.pdf\n\tpresent.html\n\tre2.doc\n\trule1.pdf\n\tsingle_file_merged_output.pdf\n\tsingle_merged_output.pdf\n\tspecial@#&()_dir/\n\tswe.pptx\n\txue.jpg\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.21103715896606445,
        "is_functional_test": true
      }
    ],
    "git_add": [
      {
        "case_name": "Add All Files to Staging Area Using Default Pattern",
        "purpose": "验证git_add工具在使用默认参数（添加所有文件）时能否成功将未跟踪文件添加到暂存区。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Cmd('git') failed due to: exit code(128)\n  cmdline: git add .\n  stderr: 'warning: in the working copy of 'nonname.html', LF will be replaced by CRLF the next time Git touches it\nerror: 'special@#&()_dir/' does not have a commit checked out\nfatal: adding files failed'"
        },
        "execution_time": 0.9991257190704346,
        "is_functional_test": true
      },
      {
        "case_name": "Add Specific File to Staging Area",
        "purpose": "验证git_add工具可以将指定的单个文件添加到暂存区。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_pattern": "app.ico"
        },
        "response": {
          "result": "Added 'app.ico' to staging area in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.142592191696167,
        "is_functional_test": true
      },
      {
        "case_name": "Add Multiple Files Matching Pattern",
        "purpose": "验证git_add工具能够根据通配符模式匹配并添加多个文件。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_pattern": "*.txt"
        },
        "response": {
          "result": "Added '*.txt' to staging area in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.129042387008667,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Git Add on Non-Existent Path",
        "purpose": "验证当提供的路径不存在时，git_add是否抛出ValueError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_folder"
        },
        "response": {
          "result": "Added '.' to staging area in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_folder"
        },
        "execution_time": 0.1360161304473877,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt Git Add on Read-Only Repository",
        "purpose": "验证在只读Git仓库中尝试执行git_add是否会引发GitCommandError。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_test_file.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_test_file.txt"
        },
        "execution_time": 0.00599980354309082,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Attempt Git Add in System Root",
        "purpose": "验证工具是否阻止用户在系统根目录调用git_add。",
        "args": {
          "path": "C:\\",
          "file_pattern": "*"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Cmd('git') failed due to: exit code(128)\n  cmdline: git add *\n  stderr: 'fatal: detected dubious ownership in repository at 'C:/'\n'C:/' is owned by:\n\tNT SERVICE/TrustedInstaller (S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)\nbut the current user is:\n\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\nTo add an exception for this directory, call:\n\n\tgit config --global --add safe.directory C:/'"
        },
        "execution_time": 0.17625021934509277,
        "is_functional_test": false
      },
      {
        "case_name": "Git Add With Special Characters In Path",
        "purpose": "验证包含特殊字符的路径是否能被正确处理或是否返回预期错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#&()_dir",
          "file_pattern": "test@file.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Cmd('git') failed due to: exit code(128)\n  cmdline: git add test@file.txt\n  stderr: 'fatal: pathspec 'test@file.txt' did not match any files'"
        },
        "execution_time": 0.17663097381591797,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Test - Very Long File Name for Git Add",
        "purpose": "验证工具是否能够处理非常长的文件名称，确保边界条件下的健壮性。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_pattern": "very_long_file_name_1234567890_abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ_!@#$%^&*()_+{}[];':\",./<>.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Cmd('git') failed due to: exit code(128)\n  cmdline: git add very_long_file_name_1234567890_abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ_!@#$%^&*()_+{}[];':\",./<>.txt\n  stderr: 'fatal: pathspec 'very_long_file_name_1234567890_abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ_!@#$%^&*()_+{}[];':\",./<>.txt' did not match any files'"
        },
        "execution_time": 0.1848006248474121,
        "is_functional_test": false
      }
    ],
    "git_diff_unstaged": [
      {
        "case_name": "Show Unstaged Diff in Initialized Repository",
        "purpose": "验证git_diff_unstaged工具可以在已初始化的Git仓库路径下成功显示未暂存的更改差异。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.16684675216674805,
        "is_functional_test": true
      },
      {
        "case_name": "Show Unstaged Diff in Subdirectory of Git Repo",
        "purpose": "验证在Git仓库的子目录中执行git_diff_unstaged是否能正确返回该仓库的未暂存更改差异。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#&()_dir"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.14162278175354004,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Git Diff Unstaged on Non-Existent Path",
        "purpose": "验证当提供的路径不存在时，git_diff_unstaged是否抛出ValueError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_folder"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.1251380443572998,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt Git Diff Unstaged on Read-Only File",
        "purpose": "验证对只读文件路径调用git_diff_unstaged是否会引发GitCommandError。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_test_file.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_test_file.txt"
        },
        "execution_time": 0.00500035285949707,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Attempt Git Diff Unstaged on System Root",
        "purpose": "验证工具是否阻止用户在系统根目录调用git_diff_unstaged。",
        "args": {
          "path": "C:\\"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: Cmd('git') failed due to: exit code(129)\n  cmdline: git diff\n  stderr: 'warning: Not a git repository. Use --no-index to compare two paths outside a working tree\nusage: git diff --no-index [<options>] <path> <path>\n\nDiff output format options\n    -p, --patch           generate patch\n    -s, --no-patch        suppress diff output\n    -u                    generate patch\n    -U, --unified[=<n>]   generate diffs with <n> lines context\n    -W, --[no-]function-context\n                          generate diffs with <n> lines context\n    --raw                 generate the diff in raw format\n    --patch-with-raw      synonym for '-p --raw'\n    --patch-with-stat     synonym for '-p --stat'\n    --numstat             machine friendly --stat\n    --shortstat           output only the last line of --stat\n    -X, --dirstat[=<param1>,<param2>...]\n                          output the distribution of relative amount of changes for each sub-directory\n    --cumulative          synonym for --dirstat=cumulative\n    --dirstat-by-file[=<param1>,<param2>...]\n                          synonym for --dirstat=files,<param1>,<param2>...\n    --check               warn if changes introduce conflict markers or whitespace errors\n    --summary             condensed summary such as creations, renames and mode changes\n    --name-only           show only names of changed files\n    --name-status         show only names and status of changed files\n    --stat[=<width>[,<name-width>[,<count>]]]\n                          generate diffstat\n    --stat-width <width>  generate diffstat with a given width\n    --stat-name-width <width>\n                          generate diffstat with a given name width\n    --stat-graph-width <width>\n                          generate diffstat with a given graph width\n    --stat-count <count>  generate diffstat with limited lines\n    --[no-]compact-summary\n                          generate compact summary in diffstat\n    --binary              output a binary diff that can be applied\n    --[no-]full-index     show full pre- and post-image object names on the \"index\" lines\n    --[no-]color[=<when>] show colored diff\n    --ws-error-highlight <kind>\n                          highlight whitespace errors in the 'context', 'old' or 'new' lines in the diff\n    -z                    do not munge pathnames and use NULs as output field terminators in --raw or --numstat\n    --[no-]abbrev[=<n>]   use <n> digits to display object names\n    --src-prefix <prefix> show the given source prefix instead of \"a/\"\n    --dst-prefix <prefix> show the given destination prefix instead of \"b/\"\n    --line-prefix <prefix>\n                          prepend an additional prefix to every line of output\n    --no-prefix           do not show any source or destination prefix\n    --default-prefix      use default prefixes a/ and b/\n    --inter-hunk-context <n>\n                          show context between diff hunks up to the specified number of lines\n    --output-indicator-new <char>\n                          specify the character to indicate a new line instead of '+'\n    --output-indicator-old <char>\n                          specify the character to indicate an old line instead of '-'\n    --output-indicator-context <char>\n                          specify the character to indicate a context instead of ' '\n\nDiff rename options\n    -B, --break-rewrites[=<n>[/<m>]]\n                          break complete rewrite changes into pairs of delete and create\n    -M, --find-renames[=<n>]\n                          detect renames\n    -D, --irreversible-delete\n                          omit the preimage for deletes\n    -C, --find-copies[=<n>]\n                          detect copies\n    --[no-]find-copies-harder\n                          use unmodified files as source to find copies\n    --no-renames          disable rename detection\n    --[no-]rename-empty   use empty blobs as rename source\n    --[no-]follow         continue listing the history of a file beyond renames\n    -l <n>                prevent rename/copy detection if the number of rename/copy targets exceeds given limit\n\nDiff algorithm options\n    --minimal             produce the smallest possible diff\n    -w, --ignore-all-space\n                          ignore whitespace when comparing lines\n    -b, --ignore-space-change\n                          ignore changes in amount of whitespace\n    --ignore-space-at-eol ignore changes in whitespace at EOL\n    --ignore-cr-at-eol    ignore carrier-return at the end of line\n    --ignore-blank-lines  ignore changes whose lines are all blank\n    -I, --[no-]ignore-matching-lines <regex>\n                          ignore changes whose all lines match <regex>\n    --[no-]indent-heuristic\n                          heuristic to shift diff hunk boundaries for easy reading\n    --patience            generate diff using the \"patience diff\" algorithm\n    --histogram           generate diff using the \"histogram diff\" algorithm\n    --diff-algorithm <algorithm>\n                          choose a diff algorithm\n    --anchored <text>     generate diff using the \"anchored diff\" algorithm\n    --word-diff[=<mode>]  show word diff, using <mode> to delimit changed words\n    --word-diff-regex <regex>\n                          use <regex> to decide what a word is\n    --color-words[=<regex>]\n                          equivalent to --word-diff=color --word-diff-regex=<regex>\n    --[no-]color-moved[=<mode>]\n                          moved lines of code are colored differently\n    --[no-]color-moved-ws <mode>\n                          how white spaces are ignored in --color-moved\n\nOther diff options\n    --[no-]relative[=<prefix>]\n                          when run from subdir, exclude changes outside and show relative paths\n    -a, --[no-]text       treat all files as text\n    -R                    swap two inputs, reverse the diff\n    --[no-]exit-code      exit with 1 if there were differences, 0 otherwise\n    --[no-]quiet          disable all output of the program\n    --[no-]ext-diff       allow an external diff helper to be executed\n    --[no-]textconv       run external text conversion filters when comparing binary files\n    --ignore-submodules[=<when>]\n                          ignore changes to submodules in the diff generation\n    --submodule[=<format>]\n                          specify how differences in submodules are shown\n    --ita-invisible-in-index\n                          hide 'git add -N' entries from the index\n    --ita-visible-in-index\n                          treat 'git add -N' entries as real in the index\n    -S <string>           look for differences that change the number of occurrences of the specified string\n    -G <regex>            look for differences that change the number of occurrences of the specified regex\n    --pickaxe-all         show all changes in the changeset with -S or -G\n    --pickaxe-regex       treat <string> in -S as extended POSIX regular expression\n    -O <file>             control the order in which files appear in the output\n    --rotate-to <path>    show the change in the specified path first\n    --skip-to <path>      skip the output to the specified path\n    --find-object <object-id>\n                          look for differences that change the number of occurrences of the specified object\n    --diff-filter [(A|C|D|M|R|T|U|X|B)...[*]]\n                          select files by diff type\n    --output <file>       output to a specific file\n'"
        },
        "execution_time": 0.15175509452819824,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Unstaged With Special Characters In Path",
        "purpose": "验证包含特殊字符的路径是否能被正确处理或是否返回预期错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#&()_dir"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.17118525505065918,
        "is_functional_test": true
      },
      {
        "case_name": "Boundary Test - Very Long Path Name for Git Diff Unstaged",
        "purpose": "验证工具是否能够处理非常长的路径名称，确保边界条件下的健壮性。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ_!@#$%^&*()_+{}[];':\",./<>?"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ_!@#$%^&*()_+{}[];':\",./<>?"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Unstaged On Clean Repository",
        "purpose": "验证在一个没有未暂存修改的Git仓库中执行git_diff_unstaged是否返回空结果。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.1677563190460205,
        "is_functional_test": true
      }
    ],
    "git_commit": [
      {
        "case_name": "Commit Changes in Valid Repository",
        "purpose": "验证在已初始化的Git仓库中，git_commit工具能够成功提交更改，并返回有效的commit hash。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Initial commit"
        },
        "response": {
          "result": "Committed to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles with message: Initial commit"
        },
        "execution_time": 0.2501859664916992,
        "is_functional_test": true
      },
      {
        "case_name": "Commit With Author Information",
        "purpose": "验证提交时提供author参数是否能正确写入提交信息。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Commit with author info",
          "author": "John Doe <john.doe@example.com>"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Cmd('git') failed due to: exit code(1)\n  cmdline: git commit -m Commit with author info --author=John Doe <john.doe@example.com>\n  stdout: 'On branch master\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tbasic_extracted_page.pdf\n\tcustom_screenshot.png\n\tcustom_screenshot_converted.png\n\tfull_copy_extracted.pdf\n\tfuzzy_merge_output.pdf\n\tlong_process_screenshot.png\n\tmerged_@#$.pdf\n\tmodules.xml\n\tmulti_monitor_screenshot.png\n\tmulti_monitor_screenshot_converted.gif\n\tnature.jpeg\n\tnature_converted.jpeg\n\tnature_converted.png\n\tnonname.html\n\tpaper1.pdf\n\tpresent.html\n\tre2.doc\n\trule1.pdf\n\tsingle_file_merged_output.pdf\n\tsingle_merged_output.pdf\n\tspecial@#&()_dir/\n\tswe.pptx\n\txue.jpg\n\nnothing added to commit but untracked files present (use \"git add\" to track)'"
        },
        "execution_time": 0.21116423606872559,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Commit on Non-Existent Path",
        "purpose": "验证当提供的路径不存在时，git_commit是否会抛出ValueError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_folder",
          "message": "This should fail due to invalid path"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Cmd('git') failed due to: exit code(1)\n  cmdline: git commit -m This should fail due to invalid path\n  stdout: 'On branch master\n\nInitial commit\n\nnothing to commit (create/copy files and use \"git add\" to track)'"
        },
        "execution_time": 0.28490304946899414,
        "is_functional_test": false
      },
      {
        "case_name": "Commit Without Any Changes",
        "purpose": "验证在没有修改或添加任何文件的情况下尝试提交是否会失败（空提交）。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Empty commit"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Cmd('git') failed due to: exit code(1)\n  cmdline: git commit -m Empty commit\n  stdout: 'On branch master\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tbasic_extracted_page.pdf\n\tcustom_screenshot.png\n\tcustom_screenshot_converted.png\n\tfull_copy_extracted.pdf\n\tfuzzy_merge_output.pdf\n\tlong_process_screenshot.png\n\tmerged_@#$.pdf\n\tmodules.xml\n\tmulti_monitor_screenshot.png\n\tmulti_monitor_screenshot_converted.gif\n\tnature.jpeg\n\tnature_converted.jpeg\n\tnature_converted.png\n\tnonname.html\n\tpaper1.pdf\n\tpresent.html\n\tre2.doc\n\trule1.pdf\n\tsingle_file_merged_output.pdf\n\tsingle_merged_output.pdf\n\tspecial@#&()_dir/\n\tswe.pptx\n\txue.jpg\n\nnothing added to commit but untracked files present (use \"git add\" to track)'"
        },
        "execution_time": 0.23373794555664062,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt Commit on System Root",
        "purpose": "验证工具是否阻止用户在系统根目录执行git_commit操作。",
        "args": {
          "path": "C:\\",
          "message": "System root commit attempt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Cmd('git') failed due to: exit code(128)\n  cmdline: git commit -m System root commit attempt\n  stderr: 'fatal: detected dubious ownership in repository at 'C:/'\n'C:/' is owned by:\n\tNT SERVICE/TrustedInstaller (S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)\nbut the current user is:\n\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\nTo add an exception for this directory, call:\n\n\tgit config --global --add safe.directory C:/'"
        },
        "execution_time": 0.21502232551574707,
        "is_functional_test": false
      },
      {
        "case_name": "Commit With Special Characters In Message",
        "purpose": "验证提交消息中包含特殊字符时是否能被正确处理。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Commit message with special chars: @#&()_+-=,.<>/?!~`"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Cmd('git') failed due to: exit code(1)\n  cmdline: git commit -m Commit message with special chars: @#&()_+-=,.<>/?!~`\n  stdout: 'On branch master\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tbasic_extracted_page.pdf\n\tcustom_screenshot.png\n\tcustom_screenshot_converted.png\n\tfull_copy_extracted.pdf\n\tfuzzy_merge_output.pdf\n\tlong_process_screenshot.png\n\tmerged_@#$.pdf\n\tmodules.xml\n\tmulti_monitor_screenshot.png\n\tmulti_monitor_screenshot_converted.gif\n\tnature.jpeg\n\tnature_converted.jpeg\n\tnature_converted.png\n\tnonname.html\n\tpaper1.pdf\n\tpresent.html\n\tre2.doc\n\trule1.pdf\n\tsingle_file_merged_output.pdf\n\tsingle_merged_output.pdf\n\tspecial@#&()_dir/\n\tswe.pptx\n\txue.jpg\n\nnothing added to commit but untracked files present (use \"git add\" to track)'"
        },
        "execution_time": 0.2236027717590332,
        "is_functional_test": true
      },
      {
        "case_name": "Boundary Test - Very Long Commit Message",
        "purpose": "验证非常长的提交消息是否能被工具正确处理或返回预期错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "A very long commit message that exceeds normal length limits and may cause buffer overflow or rejection by git. This message is designed to test boundary conditions for the git_commit tool."
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Cmd('git') failed due to: exit code(1)\n  cmdline: git commit -m A very long commit message that exceeds normal length limits and may cause buffer overflow or rejection by git. This message is designed to test boundary conditions for the git_commit tool.\n  stdout: 'On branch master\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tbasic_extracted_page.pdf\n\tcustom_screenshot.png\n\tcustom_screenshot_converted.png\n\tfull_copy_extracted.pdf\n\tfuzzy_merge_output.pdf\n\tlong_process_screenshot.png\n\tmerged_@#$.pdf\n\tmodules.xml\n\tmulti_monitor_screenshot.png\n\tmulti_monitor_screenshot_converted.gif\n\tnature.jpeg\n\tnature_converted.jpeg\n\tnature_converted.png\n\tnonname.html\n\tpaper1.pdf\n\tpresent.html\n\tre2.doc\n\trule1.pdf\n\tsingle_file_merged_output.pdf\n\tsingle_merged_output.pdf\n\tspecial@#&()_dir/\n\tswe.pptx\n\txue.jpg\n\nnothing added to commit but untracked files present (use \"git add\" to track)'"
        },
        "execution_time": 0.18058562278747559,
        "is_functional_test": false
      },
      {
        "case_name": "Commit With Invalid Author Format",
        "purpose": "验证author参数格式不正确时是否会引发GitCommandError或自动纠正。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Invalid author format test",
          "author": "InvalidAuthorFormatOnlyName"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Cmd('git') failed due to: exit code(128)\n  cmdline: git commit -m Invalid author format test --author=InvalidAuthorFormatOnlyName\n  stderr: 'fatal: --author 'InvalidAuthorFormatOnlyName' is not 'Name <email>' and matches no existing author'"
        },
        "execution_time": 0.15727639198303223,
        "is_functional_test": false
      }
    ],
    "git_diff_staged": [
      {
        "case_name": "Show Staged Changes Diff in Initialized Repository",
        "purpose": "验证git_diff_staged工具可以在已初始化的Git仓库路径下成功显示暂存更改的diff信息。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.11751365661621094,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Git Diff Staged on Non-Existent Path",
        "purpose": "验证当提供的路径不存在时，git_diff_staged是否抛出ValueError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_folder"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.148331880569458,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt Git Diff Staged on Read-Only File",
        "purpose": "验证对只读文件路径调用git_diff_staged是否会引发GitCommandError。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_test_file.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_test_file.txt"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Attempt Git Diff Staged on System Root",
        "purpose": "验证工具是否阻止用户在系统根目录调用git_diff_staged。",
        "args": {
          "path": "C:\\"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: Cmd('git') failed due to: exit code(129)\n  cmdline: git diff --cached\n  stderr: 'error: unknown option `cached'\nusage: git diff --no-index [<options>] <path> <path>\n\nDiff output format options\n    -p, --patch           generate patch\n    -s, --no-patch        suppress diff output\n    -u                    generate patch\n    -U, --unified[=<n>]   generate diffs with <n> lines context\n    -W, --[no-]function-context\n                          generate diffs with <n> lines context\n    --raw                 generate the diff in raw format\n    --patch-with-raw      synonym for '-p --raw'\n    --patch-with-stat     synonym for '-p --stat'\n    --numstat             machine friendly --stat\n    --shortstat           output only the last line of --stat\n    -X, --dirstat[=<param1>,<param2>...]\n                          output the distribution of relative amount of changes for each sub-directory\n    --cumulative          synonym for --dirstat=cumulative\n    --dirstat-by-file[=<param1>,<param2>...]\n                          synonym for --dirstat=files,<param1>,<param2>...\n    --check               warn if changes introduce conflict markers or whitespace errors\n    --summary             condensed summary such as creations, renames and mode changes\n    --name-only           show only names of changed files\n    --name-status         show only names and status of changed files\n    --stat[=<width>[,<name-width>[,<count>]]]\n                          generate diffstat\n    --stat-width <width>  generate diffstat with a given width\n    --stat-name-width <width>\n                          generate diffstat with a given name width\n    --stat-graph-width <width>\n                          generate diffstat with a given graph width\n    --stat-count <count>  generate diffstat with limited lines\n    --[no-]compact-summary\n                          generate compact summary in diffstat\n    --binary              output a binary diff that can be applied\n    --[no-]full-index     show full pre- and post-image object names on the \"index\" lines\n    --[no-]color[=<when>] show colored diff\n    --ws-error-highlight <kind>\n                          highlight whitespace errors in the 'context', 'old' or 'new' lines in the diff\n    -z                    do not munge pathnames and use NULs as output field terminators in --raw or --numstat\n    --[no-]abbrev[=<n>]   use <n> digits to display object names\n    --src-prefix <prefix> show the given source prefix instead of \"a/\"\n    --dst-prefix <prefix> show the given destination prefix instead of \"b/\"\n    --line-prefix <prefix>\n                          prepend an additional prefix to every line of output\n    --no-prefix           do not show any source or destination prefix\n    --default-prefix      use default prefixes a/ and b/\n    --inter-hunk-context <n>\n                          show context between diff hunks up to the specified number of lines\n    --output-indicator-new <char>\n                          specify the character to indicate a new line instead of '+'\n    --output-indicator-old <char>\n                          specify the character to indicate an old line instead of '-'\n    --output-indicator-context <char>\n                          specify the character to indicate a context instead of ' '\n\nDiff rename options\n    -B, --break-rewrites[=<n>[/<m>]]\n                          break complete rewrite changes into pairs of delete and create\n    -M, --find-renames[=<n>]\n                          detect renames\n    -D, --irreversible-delete\n                          omit the preimage for deletes\n    -C, --find-copies[=<n>]\n                          detect copies\n    --[no-]find-copies-harder\n                          use unmodified files as source to find copies\n    --no-renames          disable rename detection\n    --[no-]rename-empty   use empty blobs as rename source\n    --[no-]follow         continue listing the history of a file beyond renames\n    -l <n>                prevent rename/copy detection if the number of rename/copy targets exceeds given limit\n\nDiff algorithm options\n    --minimal             produce the smallest possible diff\n    -w, --ignore-all-space\n                          ignore whitespace when comparing lines\n    -b, --ignore-space-change\n                          ignore changes in amount of whitespace\n    --ignore-space-at-eol ignore changes in whitespace at EOL\n    --ignore-cr-at-eol    ignore carrier-return at the end of line\n    --ignore-blank-lines  ignore changes whose lines are all blank\n    -I, --[no-]ignore-matching-lines <regex>\n                          ignore changes whose all lines match <regex>\n    --[no-]indent-heuristic\n                          heuristic to shift diff hunk boundaries for easy reading\n    --patience            generate diff using the \"patience diff\" algorithm\n    --histogram           generate diff using the \"histogram diff\" algorithm\n    --diff-algorithm <algorithm>\n                          choose a diff algorithm\n    --anchored <text>     generate diff using the \"anchored diff\" algorithm\n    --word-diff[=<mode>]  show word diff, using <mode> to delimit changed words\n    --word-diff-regex <regex>\n                          use <regex> to decide what a word is\n    --color-words[=<regex>]\n                          equivalent to --word-diff=color --word-diff-regex=<regex>\n    --[no-]color-moved[=<mode>]\n                          moved lines of code are colored differently\n    --[no-]color-moved-ws <mode>\n                          how white spaces are ignored in --color-moved\n\nOther diff options\n    --[no-]relative[=<prefix>]\n                          when run from subdir, exclude changes outside and show relative paths\n    -a, --[no-]text       treat all files as text\n    -R                    swap two inputs, reverse the diff\n    --[no-]exit-code      exit with 1 if there were differences, 0 otherwise\n    --[no-]quiet          disable all output of the program\n    --[no-]ext-diff       allow an external diff helper to be executed\n    --[no-]textconv       run external text conversion filters when comparing binary files\n    --ignore-submodules[=<when>]\n                          ignore changes to submodules in the diff generation\n    --submodule[=<format>]\n                          specify how differences in submodules are shown\n    --ita-invisible-in-index\n                          hide 'git add -N' entries from the index\n    --ita-visible-in-index\n                          treat 'git add -N' entries as real in the index\n    -S <string>           look for differences that change the number of occurrences of the specified string\n    -G <regex>            look for differences that change the number of occurrences of the specified regex\n    --pickaxe-all         show all changes in the changeset with -S or -G\n    --pickaxe-regex       treat <string> in -S as extended POSIX regular expression\n    -O <file>             control the order in which files appear in the output\n    --rotate-to <path>    show the change in the specified path first\n    --skip-to <path>      skip the output to the specified path\n    --find-object <object-id>\n                          look for differences that change the number of occurrences of the specified object\n    --diff-filter [(A|C|D|M|R|T|U|X|B)...[*]]\n                          select files by diff type\n    --output <file>       output to a specific file\n'"
        },
        "execution_time": 0.14971137046813965,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Staged With Special Characters In Path",
        "purpose": "验证包含特殊字符的路径是否能被正确处理或是否返回预期错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#&()_dir"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.16503453254699707,
        "is_functional_test": true
      },
      {
        "case_name": "Boundary Test - Very Long Path Name for Git Diff Staged",
        "purpose": "验证工具是否能够处理非常长的路径名称，确保边界条件下的健壮性。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ_!@#$%^&*()_+{}[];':\",./<>?"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ_!@#$%^&*()_+{}[];':\",./<>?"
        },
        "execution_time": 0.003769397735595703,
        "is_functional_test": false
      },
      {
        "case_name": "Show Empty Staged Diff in Clean Repository",
        "purpose": "验证在一个干净（无修改）的Git仓库中执行git_diff_staged是否返回空diff输出。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.23633837699890137,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Staged in Subdirectory of Git Repo",
        "purpose": "验证在Git仓库的子目录中执行git_diff_staged是否能正确返回该仓库的暂存差异。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#&()_dir"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.16136813163757324,
        "is_functional_test": true
      }
    ],
    "git_log": [
      {
        "case_name": "Basic Git Log in Initialized Repository",
        "purpose": "验证git_log工具可以在已初始化的Git仓库路径下成功获取提交历史。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "commit e61535b6eaf74ddacdbb6f2577414e0cf588f878\nAuthor: pouchine <1291980381@qq.com>\nDate:   Sun Jul 13 23:18:48 2025 +0800\n\n    Initial commit"
        },
        "execution_time": 0.14311456680297852,
        "is_functional_test": true
      },
      {
        "case_name": "Git Log With Custom Max Count Parameter",
        "purpose": "验证git_log工具可以使用自定义的max_count参数限制显示的提交数量。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "max_count": 5
        },
        "response": {
          "result": "commit e61535b6eaf74ddacdbb6f2577414e0cf588f878\nAuthor: pouchine <1291980381@qq.com>\nDate:   Sun Jul 13 23:18:48 2025 +0800\n\n    Initial commit"
        },
        "execution_time": 0.22270584106445312,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Git Log on Non-Existent Path",
        "purpose": "验证当提供的路径不存在时，git_log是否抛出ValueError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_folder"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Cmd('git') failed due to: exit code(128)\n  cmdline: git log -n 10\n  stderr: 'fatal: your current branch 'master' does not have any commits yet'"
        },
        "execution_time": 0.14778447151184082,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt Git Log on Read-Only File",
        "purpose": "验证对只读文件路径调用git_log是否会引发GitCommandError。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_test_file.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_test_file.txt"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Attempt Git Log on System Root",
        "purpose": "验证工具是否阻止用户在系统根目录调用git_log。",
        "args": {
          "path": "C:\\"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Cmd('git') failed due to: exit code(128)\n  cmdline: git log -n 10\n  stderr: 'fatal: detected dubious ownership in repository at 'C:/'\n'C:/' is owned by:\n\tNT SERVICE/TrustedInstaller (S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)\nbut the current user is:\n\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\nTo add an exception for this directory, call:\n\n\tgit config --global --add safe.directory C:/'"
        },
        "execution_time": 0.19197702407836914,
        "is_functional_test": false
      },
      {
        "case_name": "Git Log With Special Characters In Path",
        "purpose": "验证包含特殊字符的路径是否能被正确处理或是否返回预期错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#&()_dir"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Cmd('git') failed due to: exit code(128)\n  cmdline: git log -n 10\n  stderr: 'fatal: your current branch 'master' does not have any commits yet'"
        },
        "execution_time": 0.13996362686157227,
        "is_functional_test": true
      },
      {
        "case_name": "Boundary Test - Very Long Path Name for Git Log",
        "purpose": "验证工具是否能够处理非常长的路径名称，确保边界条件下的健壮性。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ_!@#$%^&*()_+{}[];':\",./<>?"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ_!@#$%^&*()_+{}[];':\",./<>?"
        },
        "execution_time": 0.003927469253540039,
        "is_functional_test": false
      },
      {
        "case_name": "Git Log On Clean Repository",
        "purpose": "验证在一个没有提交记录的Git仓库中执行git_log是否返回空历史。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "commit e61535b6eaf74ddacdbb6f2577414e0cf588f878\nAuthor: pouchine <1291980381@qq.com>\nDate:   Sun Jul 13 23:18:48 2025 +0800\n\n    Initial commit"
        },
        "execution_time": 0.1478714942932129,
        "is_functional_test": true
      }
    ],
    "git_create_branch": [
      {
        "case_name": "Create Branch in Initialized Repository",
        "purpose": "验证git_create_branch工具可以在已初始化的Git仓库路径下成功创建一个新分支。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/test-branch"
        },
        "response": {
          "result": "Created branch 'feature/test-branch' in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.169572114944458,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Create Branch on Non-Existent Path",
        "purpose": "验证当提供的路径不存在时，git_create_branch是否抛出ValueError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_folder",
          "branch_name": "feature/test-branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Cmd('git') failed due to: exit code(128)\n  cmdline: git branch feature/test-branch\n  stderr: 'fatal: not a valid object name: 'master''"
        },
        "execution_time": 0.12828850746154785,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt Create Branch With Invalid Branch Name",
        "purpose": "验证当提供的分支名称无效时，git_create_branch是否抛出GitCommandError。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/<invalid>"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Cmd('git') failed due to: exit code(128)\n  cmdline: git branch feature/<invalid>\n  stderr: 'fatal: cannot lock ref 'refs/heads/feature/<invalid>': Unable to create 'D:/devWorkspace/MCPServer-Generator/testSystem/testFiles/.git/refs/heads/feature/<invalid>.lock': Invalid argument'"
        },
        "execution_time": 0.14035844802856445,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch in Subdirectory of Git Repo",
        "purpose": "验证在Git仓库的子目录中执行git_create_branch是否能正确创建分支。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#&()_dir",
          "branch_name": "feature/subdir-branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Cmd('git') failed due to: exit code(128)\n  cmdline: git branch feature/subdir-branch\n  stderr: 'fatal: not a valid object name: 'master''"
        },
        "execution_time": 0.11889505386352539,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt Create Branch on System Root",
        "purpose": "验证工具是否阻止用户在系统根目录调用git_create_branch。",
        "args": {
          "path": "C:\\",
          "branch_name": "feature/root-branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Cmd('git') failed due to: exit code(128)\n  cmdline: git branch feature/root-branch\n  stderr: 'fatal: detected dubious ownership in repository at 'C:/'\n'C:/' is owned by:\n\tNT SERVICE/TrustedInstaller (S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)\nbut the current user is:\n\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\nTo add an exception for this directory, call:\n\n\tgit config --global --add safe.directory C:/'"
        },
        "execution_time": 0.14162874221801758,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Test - Very Long Branch Name",
        "purpose": "验证工具是否能够处理非常长的分支名称，确保边界条件下的健壮性。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ_!@#$%^&*()_+{}[];':\",./<>?"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Cmd('git') failed due to: exit code(128)\n  cmdline: git branch feature/very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ_!@#$%^&*()_+{}[];':\",./<>?\n  stderr: 'fatal: 'feature/very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ_!@#$%^&*()_+{}[];':\",./<>?' is not a valid branch name\nhint: See `man git check-ref-format`\nhint: Disable this message with \"git config advice.refSyntax false\"'"
        },
        "execution_time": 0.17102813720703125,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch With Special Characters In Name",
        "purpose": "验证包含特殊字符的分支名称是否能被正确处理或是否返回预期错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/special@#&()_branch"
        },
        "response": {
          "result": "Created branch 'feature/special@#&()_branch' in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.21191740036010742,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Create Branch on Read-Only File Path",
        "purpose": "验证对只读文件路径调用git_create_branch是否会引发GitCommandError。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_test_file.txt",
          "branch_name": "feature/readonly-branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_test_file.txt"
        },
        "execution_time": 0.004164218902587891,
        "is_functional_test": false
      }
    ],
    "git_checkout": [
      {
        "case_name": "Checkout to an Existing Branch Successfully",
        "purpose": "验证git_checkout工具能够在指定的有效仓库路径中成功切换到已存在的分支。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/test-branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Cmd('git') failed due to: exit code(128)\n  cmdline: git checkout feature/test-branch\n  stderr: 'fatal: bad config line 7 in file .git/config'"
        },
        "execution_time": 0.3295125961303711,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout to a Non-Existent Branch",
        "purpose": "验证git_checkout工具在尝试切换到不存在的分支时是否会抛出GitCommandError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "nonexistent_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Cmd('git') failed due to: exit code(128)\n  cmdline: git checkout nonexistent_branch\n  stderr: 'fatal: bad config line 7 in file .git/config'"
        },
        "execution_time": 0.2470707893371582,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout Using Invalid Path",
        "purpose": "验证git_checkout工具在提供无效路径时是否会抛出ValueError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_folder",
          "branch_name": "master"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout master\n  stderr: 'error: pathspec 'master' did not match any file(s) known to git'"
        },
        "execution_time": 0.24068713188171387,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout in a Subdirectory of Git Repository",
        "purpose": "验证git_checkout工具是否能够在Git仓库的子目录中正确切换分支。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#&()_dir",
          "branch_name": "feature/test-branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout feature/test-branch\n  stderr: 'error: pathspec 'feature/test-branch' did not match any file(s) known to git'"
        },
        "execution_time": 0.21018481254577637,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout with Special Characters in Branch Name",
        "purpose": "验证git_checkout工具是否能够正确处理包含特殊字符的分支名称。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/special@#&()_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Cmd('git') failed due to: exit code(128)\n  cmdline: git checkout feature/special@#&()_branch\n  stderr: 'fatal: bad config line 7 in file .git/config'"
        },
        "execution_time": 0.19551539421081543,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt Checkout in System Root",
        "purpose": "验证工具是否阻止用户在系统根目录中执行git_checkout操作。",
        "args": {
          "path": "C:\\",
          "branch_name": "master"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Cmd('git') failed due to: exit code(128)\n  cmdline: git checkout master\n  stderr: 'fatal: detected dubious ownership in repository at 'C:/'\n'C:/' is owned by:\n\tNT SERVICE/TrustedInstaller (S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)\nbut the current user is:\n\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\nTo add an exception for this directory, call:\n\n\tgit config --global --add safe.directory C:/'"
        },
        "execution_time": 0.14098453521728516,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Test - Checkout with Very Long Branch Name",
        "purpose": "验证工具是否能够处理非常长的分支名称，确保边界条件下的健壮性。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ_!@#$%^&*()_+{}[];':\",./<>?"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Cmd('git') failed due to: exit code(128)\n  cmdline: git checkout very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ_!@#$%^&*()_+{}[];':\",./<>?\n  stderr: 'fatal: bad config line 7 in file .git/config'"
        },
        "execution_time": 0.15071439743041992,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout on Read-Only File Path",
        "purpose": "验证对只读文件路径调用git_checkout是否会引发GitCommandError。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_test_file.txt",
          "branch_name": "master"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_test_file.txt"
        },
        "execution_time": 0.004031658172607422,
        "is_functional_test": false
      }
    ],
    "git_diff": [
      {
        "case_name": "Basic Git Diff Between Two Commits",
        "purpose": "验证git_diff工具可以成功比较两个提交之间的差异。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_range": "HEAD~2..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff HEAD~2..HEAD\n  stderr: 'fatal: bad config line 8 in file .git/config'"
        },
        "execution_time": 0.2171642780303955,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff With Invalid Path",
        "purpose": "验证当提供的路径无效时，git_diff是否抛出ValueError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_folder",
          "commit_range": "HEAD~1..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff HEAD~1..HEAD\n  stderr: 'fatal: ambiguous argument 'HEAD~1..HEAD': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.13412785530090332,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff On Read-Only File Path",
        "purpose": "验证对只读文件路径调用git_diff是否会引发GitCommandError。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_test_file.txt",
          "commit_range": "HEAD~1..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_test_file.txt"
        },
        "execution_time": 0.0048694610595703125,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff With Special Characters In Commit Range",
        "purpose": "验证包含特殊字符的提交范围是否能被正确处理或是否返回预期错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_range": "feature/special@#&()_branch~1..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff feature/special@#&()_branch~1..HEAD\n  stderr: 'fatal: bad config line 8 in file .git/config'"
        },
        "execution_time": 0.16717243194580078,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt Git Diff on System Root",
        "purpose": "验证工具是否阻止用户在系统根目录调用git_diff。",
        "args": {
          "path": "C:\\",
          "commit_range": "HEAD~1..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Cmd('git') failed due to: exit code(129)\n  cmdline: git diff HEAD~1..HEAD\n  stderr: 'warning: Not a git repository. Use --no-index to compare two paths outside a working tree\nusage: git diff --no-index [<options>] <path> <path>\n\nDiff output format options\n    -p, --patch           generate patch\n    -s, --no-patch        suppress diff output\n    -u                    generate patch\n    -U, --unified[=<n>]   generate diffs with <n> lines context\n    -W, --[no-]function-context\n                          generate diffs with <n> lines context\n    --raw                 generate the diff in raw format\n    --patch-with-raw      synonym for '-p --raw'\n    --patch-with-stat     synonym for '-p --stat'\n    --numstat             machine friendly --stat\n    --shortstat           output only the last line of --stat\n    -X, --dirstat[=<param1>,<param2>...]\n                          output the distribution of relative amount of changes for each sub-directory\n    --cumulative          synonym for --dirstat=cumulative\n    --dirstat-by-file[=<param1>,<param2>...]\n                          synonym for --dirstat=files,<param1>,<param2>...\n    --check               warn if changes introduce conflict markers or whitespace errors\n    --summary             condensed summary such as creations, renames and mode changes\n    --name-only           show only names of changed files\n    --name-status         show only names and status of changed files\n    --stat[=<width>[,<name-width>[,<count>]]]\n                          generate diffstat\n    --stat-width <width>  generate diffstat with a given width\n    --stat-name-width <width>\n                          generate diffstat with a given name width\n    --stat-graph-width <width>\n                          generate diffstat with a given graph width\n    --stat-count <count>  generate diffstat with limited lines\n    --[no-]compact-summary\n                          generate compact summary in diffstat\n    --binary              output a binary diff that can be applied\n    --[no-]full-index     show full pre- and post-image object names on the \"index\" lines\n    --[no-]color[=<when>] show colored diff\n    --ws-error-highlight <kind>\n                          highlight whitespace errors in the 'context', 'old' or 'new' lines in the diff\n    -z                    do not munge pathnames and use NULs as output field terminators in --raw or --numstat\n    --[no-]abbrev[=<n>]   use <n> digits to display object names\n    --src-prefix <prefix> show the given source prefix instead of \"a/\"\n    --dst-prefix <prefix> show the given destination prefix instead of \"b/\"\n    --line-prefix <prefix>\n                          prepend an additional prefix to every line of output\n    --no-prefix           do not show any source or destination prefix\n    --default-prefix      use default prefixes a/ and b/\n    --inter-hunk-context <n>\n                          show context between diff hunks up to the specified number of lines\n    --output-indicator-new <char>\n                          specify the character to indicate a new line instead of '+'\n    --output-indicator-old <char>\n                          specify the character to indicate an old line instead of '-'\n    --output-indicator-context <char>\n                          specify the character to indicate a context instead of ' '\n\nDiff rename options\n    -B, --break-rewrites[=<n>[/<m>]]\n                          break complete rewrite changes into pairs of delete and create\n    -M, --find-renames[=<n>]\n                          detect renames\n    -D, --irreversible-delete\n                          omit the preimage for deletes\n    -C, --find-copies[=<n>]\n                          detect copies\n    --[no-]find-copies-harder\n                          use unmodified files as source to find copies\n    --no-renames          disable rename detection\n    --[no-]rename-empty   use empty blobs as rename source\n    --[no-]follow         continue listing the history of a file beyond renames\n    -l <n>                prevent rename/copy detection if the number of rename/copy targets exceeds given limit\n\nDiff algorithm options\n    --minimal             produce the smallest possible diff\n    -w, --ignore-all-space\n                          ignore whitespace when comparing lines\n    -b, --ignore-space-change\n                          ignore changes in amount of whitespace\n    --ignore-space-at-eol ignore changes in whitespace at EOL\n    --ignore-cr-at-eol    ignore carrier-return at the end of line\n    --ignore-blank-lines  ignore changes whose lines are all blank\n    -I, --[no-]ignore-matching-lines <regex>\n                          ignore changes whose all lines match <regex>\n    --[no-]indent-heuristic\n                          heuristic to shift diff hunk boundaries for easy reading\n    --patience            generate diff using the \"patience diff\" algorithm\n    --histogram           generate diff using the \"histogram diff\" algorithm\n    --diff-algorithm <algorithm>\n                          choose a diff algorithm\n    --anchored <text>     generate diff using the \"anchored diff\" algorithm\n    --word-diff[=<mode>]  show word diff, using <mode> to delimit changed words\n    --word-diff-regex <regex>\n                          use <regex> to decide what a word is\n    --color-words[=<regex>]\n                          equivalent to --word-diff=color --word-diff-regex=<regex>\n    --[no-]color-moved[=<mode>]\n                          moved lines of code are colored differently\n    --[no-]color-moved-ws <mode>\n                          how white spaces are ignored in --color-moved\n\nOther diff options\n    --[no-]relative[=<prefix>]\n                          when run from subdir, exclude changes outside and show relative paths\n    -a, --[no-]text       treat all files as text\n    -R                    swap two inputs, reverse the diff\n    --[no-]exit-code      exit with 1 if there were differences, 0 otherwise\n    --[no-]quiet          disable all output of the program\n    --[no-]ext-diff       allow an external diff helper to be executed\n    --[no-]textconv       run external text conversion filters when comparing binary files\n    --ignore-submodules[=<when>]\n                          ignore changes to submodules in the diff generation\n    --submodule[=<format>]\n                          specify how differences in submodules are shown\n    --ita-invisible-in-index\n                          hide 'git add -N' entries from the index\n    --ita-visible-in-index\n                          treat 'git add -N' entries as real in the index\n    -S <string>           look for differences that change the number of occurrences of the specified string\n    -G <regex>            look for differences that change the number of occurrences of the specified regex\n    --pickaxe-all         show all changes in the changeset with -S or -G\n    --pickaxe-regex       treat <string> in -S as extended POSIX regular expression\n    -O <file>             control the order in which files appear in the output\n    --rotate-to <path>    show the change in the specified path first\n    --skip-to <path>      skip the output to the specified path\n    --find-object <object-id>\n                          look for differences that change the number of occurrences of the specified object\n    --diff-filter [(A|C|D|M|R|T|U|X|B)...[*]]\n                          select files by diff type\n    --output <file>       output to a specific file\n'"
        },
        "execution_time": 0.16019940376281738,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Test - Very Long Commit Range",
        "purpose": "验证工具是否能够处理非常长的提交范围字符串，确保边界条件下的健壮性。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_range": "very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ_!@#$%^&*()_+{}[];':\",./<>?~`@very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ_!@#$%^&*()_+{}[];':\",./<>?~`"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ_!@#$%^&*()_+{}[];':\",./<>?~`@very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ_!@#$%^&*()_+{}[];':\",./<>?~`\n  stderr: 'fatal: bad config line 8 in file .git/config'"
        },
        "execution_time": 0.143233060836792,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Between Different Branches",
        "purpose": "验证git_diff工具可以在不同分支之间进行比较。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_range": "master..feature/test-branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff master..feature/test-branch\n  stderr: 'fatal: bad config line 8 in file .git/config'"
        },
        "execution_time": 0.1653757095336914,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff With Empty Commit Range",
        "purpose": "验证当提交范围为空时，git_diff是否抛出相应的错误信息。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_range": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff \n  stderr: 'fatal: bad config line 8 in file .git/config'"
        },
        "execution_time": 0.19888806343078613,
        "is_functional_test": false
      }
    ],
    "git_show": [
      {
        "case_name": "Display Details of a Valid Commit",
        "purpose": "验证git_show工具在提供有效的仓库路径和合法的commit hash时，能够正确显示提交详情。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "a819b89e3764fbe4d9e0b68755d372f38a33d6d8"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: Cmd('git') failed due to: exit code(128)\n  cmdline: git show a819b89e3764fbe4d9e0b68755d372f38a33d6d8\n  stderr: 'fatal: bad config line 8 in file .git/config'"
        },
        "execution_time": 0.1701676845550537,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Git Show with Invalid Path",
        "purpose": "验证当提供的路径不存在时，git_show是否抛出ValueError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_folder",
          "commit_hash": "a819b89e3764fbe4d9e0b68755d372f38a33d6d8"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: Cmd('git') failed due to: exit code(128)\n  cmdline: git show a819b89e3764fbe4d9e0b68755d372f38a33d6d8\n  stderr: 'fatal: bad object a819b89e3764fbe4d9e0b68755d372f38a33d6d8'"
        },
        "execution_time": 0.16749858856201172,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt Git Show with Invalid Commit Hash",
        "purpose": "验证当提供的commit hash无效时，git_show是否抛出GitCommandError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "invalid_commit_hash_123456"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: Cmd('git') failed due to: exit code(128)\n  cmdline: git show invalid_commit_hash_123456\n  stderr: 'fatal: bad config line 8 in file .git/config'"
        },
        "execution_time": 0.1744365692138672,
        "is_functional_test": false
      },
      {
        "case_name": "Git Show in Subdirectory of Repository",
        "purpose": "验证在Git仓库的子目录中执行git_show是否仍能正确显示指定提交的详细信息。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#&()_dir",
          "commit_hash": "a819b89e3764fbe4d9e0b68755d372f38a33d6d8"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: Cmd('git') failed due to: exit code(128)\n  cmdline: git show a819b89e3764fbe4d9e0b68755d372f38a33d6d8\n  stderr: 'fatal: bad object a819b89e3764fbe4d9e0b68755d372f38a33d6d8'"
        },
        "execution_time": 0.14354300498962402,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt Git Show on System Root",
        "purpose": "验证工具是否阻止用户在系统根目录调用git_show。",
        "args": {
          "path": "C:\\",
          "commit_hash": "a819b89e3764fbe4d9e0b68755d372f38a33d6d8"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: Cmd('git') failed due to: exit code(128)\n  cmdline: git show a819b89e3764fbe4d9e0b68755d372f38a33d6d8\n  stderr: 'fatal: detected dubious ownership in repository at 'C:/'\n'C:/' is owned by:\n\tNT SERVICE/TrustedInstaller (S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)\nbut the current user is:\n\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\nTo add an exception for this directory, call:\n\n\tgit config --global --add safe.directory C:/'"
        },
        "execution_time": 0.16649484634399414,
        "is_functional_test": false
      },
      {
        "case_name": "Git Show With Special Characters In Path",
        "purpose": "验证包含特殊字符的路径是否能被正确处理或是否返回预期错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#&()_dir",
          "commit_hash": "a819b89e3764fbe4d9e0b68755d372f38a33d6d8"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: Cmd('git') failed due to: exit code(128)\n  cmdline: git show a819b89e3764fbe4d9e0b68755d372f38a33d6d8\n  stderr: 'fatal: bad object a819b89e3764fbe4d9e0b68755d372f38a33d6d8'"
        },
        "execution_time": 0.12908649444580078,
        "is_functional_test": true
      },
      {
        "case_name": "Boundary Test - Very Long Path Name for Git Show",
        "purpose": "验证工具是否能够处理非常长的路径名称，确保边界条件下的健壮性。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ_!@#$%^&*()_+{}[];':\",./<>?",
          "commit_hash": "a819b89e3764fbe4d9e0b68755d372f38a33d6d8"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ_!@#$%^&*()_+{}[];':\",./<>?"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": false
      },
      {
        "case_name": "Git Show On Read-Only File Path",
        "purpose": "验证对只读文件路径调用git_show是否会引发GitCommandError。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_test_file.txt",
          "commit_hash": "a819b89e3764fbe4d9e0b68755d372f38a33d6d8"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_test_file.txt"
        },
        "execution_time": 0.005004405975341797,
        "is_functional_test": false
      }
    ],
    "git_reset": [
      {
        "case_name": "Unstage All Changes in Valid Repository",
        "purpose": "验证在有效的Git仓库中，未提供file_path参数时，git_reset工具能够成功取消暂存所有修改。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: Cmd('git') failed due to: exit code(128)\n  cmdline: git reset\n  stderr: 'fatal: bad config line 6 in file .git/config'"
        },
        "execution_time": 0.3347761631011963,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage Specific File in Staged Changes",
        "purpose": "验证当指定一个已暂存的文件路径时，git_reset工具可以仅取消暂存该文件。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\app.ico"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: Cmd('git') failed due to: exit code(128)\n  cmdline: git reset D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\app.ico\n  stderr: 'fatal: bad config line 6 in file .git/config'"
        },
        "execution_time": 0.2632112503051758,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Git Reset on Non-Existent Path",
        "purpose": "验证当提供的路径不存在时，git_reset是否抛出ValueError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_folder"
        },
        "response": {
          "result": "Unstaged all changes in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_folder"
        },
        "execution_time": 0.3808901309967041,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt Git Reset On Read-Only File",
        "purpose": "验证对只读文件路径调用git_reset是否会引发GitCommandError。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_test_file.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_test_file.txt"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      },
      {
        "case_name": "Git Reset With Special Characters In Path",
        "purpose": "验证包含特殊字符的路径是否能被正确处理或是否返回预期错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#&()_dir"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#&()_dir"
        },
        "execution_time": 0.004142284393310547,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt Git Reset on System Root",
        "purpose": "验证工具是否阻止用户在系统根目录调用git_reset。",
        "args": {
          "path": "C:\\"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: Cmd('git') failed due to: exit code(128)\n  cmdline: git reset\n  stderr: 'fatal: detected dubious ownership in repository at 'C:/'\n'C:/' is owned by:\n\tNT SERVICE/TrustedInstaller (S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)\nbut the current user is:\n\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\nTo add an exception for this directory, call:\n\n\tgit config --global --add safe.directory C:/'"
        },
        "execution_time": 0.35608386993408203,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Test - Very Long Path Name for Git Reset",
        "purpose": "验证工具是否能够处理非常长的路径名称，确保边界条件下的健壮性。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ_!@#$%^&*()_+{}[];':\",./<>?"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz_ABCDEFGHIJKLMNOPQRSTUVWXYZ_!@#$%^&*()_+{}[];':\",./<>?"
        },
        "execution_time": 0.0039980411529541016,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt Git Reset on Already Clean Repository",
        "purpose": "验证在一个干净（无暂存）的Git仓库中执行git_reset是否会正确返回空操作结果或报错。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: Cmd('git') failed due to: exit code(128)\n  cmdline: git reset\n  stderr: 'fatal: bad config line 6 in file .git/config'"
        },
        "execution_time": 0.19792890548706055,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 96
}