{
  "server_name": "server",
  "parent_dir": "git_repo_management_server_refined",
  "report_name": "git_repo_management_server_refined-server",
  "server_path": "workspace\\refinement\\git_repo_management_server_refined\\server.py",
  "timestamp": "2025-07-01T17:03:42.171567",
  "tools": [
    {
      "name": "git_init",
      "description": "初始化一个新的Git仓库。\n    \n    Args:\n        repo_path: 要初始化的仓库路径。该路径必须在允许的操作目录范围内。\n        \n    Returns:\n        成功消息。\n        \n    Raises:\n        ValueError: 如果路径无效、不在允许的目录范围或初始化失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_initArguments",
        "type": "object"
      }
    },
    {
      "name": "git_status",
      "description": "查看仓库状态。\n    \n    Args:\n        repo_path: 仓库路径。该路径必须在允许的操作目录范围内。\n        \n    Returns:\n        返回仓库状态信息。\n        \n    Raises:\n        ValueError: 如果路径无效、不是Git仓库、不在允许的目录范围或命令执行失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_statusArguments",
        "type": "object"
      }
    },
    {
      "name": "git_add",
      "description": "将文件添加到暂存区。\n    \n    Args:\n        repo_path: 仓库路径。该路径必须在允许的操作目录范围内。\n        file_path: 要添加的文件路径。该路径必须是仓库中的有效文件。\n        \n    Returns:\n        成功消息。\n        \n    Raises:\n        ValueError: 如果路径无效、文件不存在、不在允许的目录范围或添加失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "file_path": {
            "title": "File Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "file_path"
        ],
        "title": "git_addArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_unstaged",
      "description": "查看未暂存的差异。\n    \n    Args:\n        repo_path: 仓库路径。该路径必须在允许的操作目录范围内。\n        \n    Returns:\n        返回未暂存的差异信息。\n        \n    Raises:\n        ValueError: 如果路径无效、不是Git仓库、不在允许的目录范围或命令执行失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_diff_unstagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_staged",
      "description": "查看已暂存的差异。\n    \n    Args:\n        repo_path: 仓库路径。该路径必须在允许的操作目录范围内。\n        \n    Returns:\n        返回已暂存的差异信息。\n        \n    Raises:\n        ValueError: 如果路径无效、不是Git仓库、不在允许的目录范围或命令执行失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_diff_stagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff",
      "description": "比较两个提交之间的差异。\n    \n    Args:\n        repo_path: 仓库路径。该路径必须在允许的操作目录范围内。\n        commit1: 第一个提交哈希或分支名。\n        commit2: 第二个提交哈希或分支名。\n        \n    Returns:\n        返回两个提交之间的差异信息。\n        \n    Raises:\n        ValueError: 如果路径无效、不在允许的目录范围、提交无效或命令执行失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "commit1": {
            "title": "Commit1",
            "type": "string"
          },
          "commit2": {
            "title": "Commit2",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "commit1",
          "commit2"
        ],
        "title": "git_diffArguments",
        "type": "object"
      }
    },
    {
      "name": "git_commit",
      "description": "提交更改。\n    \n    Args:\n        repo_path: 仓库路径。该路径必须在允许的操作目录范围内。\n        message: 提交信息。\n        \n    Returns:\n        成功消息。\n        \n    Raises:\n        ValueError: 如果路径无效、没有更改要提交、不在允许的目录范围或提交失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "message": {
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "message"
        ],
        "title": "git_commitArguments",
        "type": "object"
      }
    },
    {
      "name": "git_reset",
      "description": "取消暂存文件。\n    \n    Args:\n        repo_path: 仓库路径。该路径必须在允许的操作目录范围内。\n        file_path: 要取消暂存的文件路径。\n        \n    Returns:\n        成功消息。\n        \n    Raises:\n        ValueError: 如果路径无效、文件不在暂存区、不在允许的目录范围或操作失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "file_path": {
            "title": "File Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "file_path"
        ],
        "title": "git_resetArguments",
        "type": "object"
      }
    },
    {
      "name": "git_log",
      "description": "查看提交历史。\n    \n    Args:\n        repo_path: 仓库路径。该路径必须在允许的操作目录范围内。\n        \n    Returns:\n        返回提交历史信息。\n        \n    Raises:\n        ValueError: 如果路径无效、不在允许的目录范围或命令执行失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_logArguments",
        "type": "object"
      }
    },
    {
      "name": "git_create_branch",
      "description": "创建新分支。\n    \n    Args:\n        repo_path: 仓库路径。该路径必须在允许的操作目录范围内。\n        branch_name: 新分支名称。\n        \n    Returns:\n        成功消息。\n        \n    Raises:\n        ValueError: 如果路径无效、分支已存在、不在允许的目录范围或创建失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "branch_name"
        ],
        "title": "git_create_branchArguments",
        "type": "object"
      }
    },
    {
      "name": "git_checkout",
      "description": "切换分支。\n    \n    Args:\n        repo_path: 仓库路径。该路径必须在允许的操作目录范围内。\n        branch_name: 要切换的分支名称。\n        \n    Returns:\n        成功消息。\n        \n    Raises:\n        ValueError: 如果路径无效、分支不存在、不在允许的目录范围或切换失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "branch_name"
        ],
        "title": "git_checkoutArguments",
        "type": "object"
      }
    },
    {
      "name": "git_show",
      "description": "显示提交的详细内容。\n    \n    Args:\n        repo_path: 仓库路径。该路径必须在允许的操作目录范围内。\n        commit_hash: 提交哈希值。\n        \n    Returns:\n        返回提交的详细信息。\n        \n    Raises:\n        ValueError: 如果路径无效、提交哈希无效、不在允许的目录范围或获取失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "commit_hash": {
            "title": "Commit Hash",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "commit_hash"
        ],
        "title": "git_showArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "git_init": [
      {
        "case_name": "Basic Git Init Success",
        "purpose": "验证在合法路径下可以成功初始化一个新的Git仓库",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "response": {
          "result": "仓库已成功初始化在: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "execution_time": 0.19733238220214844,
        "is_functional_test": true
      },
      {
        "case_name": "Git Init With Chinese Path",
        "purpose": "验证包含中文字符的路径是否能正常初始化Git仓库",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\中文文件名.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_init: 仓库初始化失败: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\中文文件名.docx"
        },
        "execution_time": 0.003506898880004883,
        "is_functional_test": true
      },
      {
        "case_name": "Git Init On File Instead Of Directory",
        "purpose": "验证传入一个文件而非目录时，工具能否正确抛出错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_document.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_init: 仓库初始化失败: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_document.docx"
        },
        "execution_time": 0.003000497817993164,
        "is_functional_test": false
      },
      {
        "case_name": "Git Init With Special Characters In Path",
        "purpose": "验证路径中包含特殊字符时是否仍可成功初始化仓库",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\new_文件#1@2025.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_init: 仓库初始化失败: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\new_文件#1@2025.docx"
        },
        "execution_time": 0.00624537467956543,
        "is_functional_test": true
      },
      {
        "case_name": "Git Init On Nonexistent Path",
        "purpose": "验证当路径不存在时，工具能否正确处理并返回错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_repo"
        },
        "response": {
          "result": "仓库已成功初始化在: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_repo"
        },
        "execution_time": 0.21030235290527344,
        "is_functional_test": false
      },
      {
        "case_name": "Git Init Outside Allowed Directory",
        "purpose": "验证尝试在不允许的目录范围外初始化仓库时是否被拒绝",
        "args": {
          "repo_path": "C:\\Program Files\\test_repo"
        },
        "response": {
          "error": "ToolException: Error executing tool git_init: 仓库初始化失败: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: C:\\Program Files\\test_repo"
        },
        "execution_time": 0.007515430450439453,
        "is_functional_test": false
      },
      {
        "case_name": "Git Init On Already Initialized Repo",
        "purpose": "验证对已经初始化过的仓库再次执行初始化操作时的行为是否符合预期",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "response": {
          "result": "仓库已成功初始化在: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "execution_time": 0.004004955291748047,
        "is_functional_test": true
      },
      {
        "case_name": "Git Init With Empty Path",
        "purpose": "验证空路径输入时是否能正确抛出异常",
        "args": {
          "repo_path": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_init: 仓库初始化失败: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: D:\\devWorkspace\\MCPServer-Generator\\workspace\\refinement\\git_repo_management_server_refined"
        },
        "execution_time": 0.00559687614440918,
        "is_functional_test": false
      },
      {
        "case_name": "Git Init With Null Path",
        "purpose": "验证null作为路径参数时是否能正确抛出异常",
        "args": {
          "repo_path": null
        },
        "response": {
          "error": "ToolException: Error executing tool git_init: 1 validation error for git_initArguments\nrepo_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.005994558334350586,
        "is_functional_test": false
      }
    ],
    "git_status": [
      {
        "case_name": "Basic Git Status Success",
        "purpose": "验证在合法且已初始化的仓库路径下是否可以成功查看Git状态",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\ta_very_long_filename_that_exceeds_the_typical_limit_for_file_paths_in_windows_systems_should_be_tested_for_boundary_conditions_and_edge_cases.docx\n\tnew file with spaces.docx\n\tnew_file.docx\n\t\"new_\\346\\226\\207\\344\\273\\266#1@2025.docx\"\n\t\"\\344\\270\\255\\346\\226\\207\\346\\226\\207\\344\\273\\266\\345\\220\\215-\\345\\211\\257\\346\\234\\254.docx\"\n\t\"\\344\\270\\255\\346\\226\\207\\346\\226\\207\\344\\273\\266\\345\\220\\215.docx\"\n\t\"\\344\\270\\255\\346\\226\\207\\346\\226\\207\\344\\273\\266\\345\\220\\215_copy.docx\"\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.23470258712768555,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status On Nonexistent Repo",
        "purpose": "验证尝试查看未初始化的目录的Git状态时是否抛出错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_repo"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)"
        },
        "execution_time": 0.21457123756408691,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status With Empty Path",
        "purpose": "验证空路径输入时是否能正确抛出异常",
        "args": {
          "repo_path": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: D:\\devWorkspace\\MCPServer-Generator\\workspace\\refinement\\git_repo_management_server_refined"
        },
        "execution_time": 0.004001140594482422,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status With Null Path",
        "purpose": "验证null作为路径参数时是否能正确抛出异常",
        "args": {
          "repo_path": null
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: 1 validation error for git_statusArguments\nrepo_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.00501251220703125,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status On File Instead Of Directory",
        "purpose": "验证传入一个文件而非目录时，工具能否正确抛出错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_document.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_document.docx"
        },
        "execution_time": 0.008512496948242188,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status Outside Allowed Directory",
        "purpose": "验证尝试查看不允许的目录范围外的仓库状态时是否被拒绝",
        "args": {
          "repo_path": "C:\\Program Files\\test_repo"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: C:\\Program Files\\test_repo"
        },
        "execution_time": 0.0052700042724609375,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status With Special Characters In Path",
        "purpose": "验证路径中包含特殊字符时是否仍可成功查看仓库状态",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\new_文件#1@2025.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\new_文件#1@2025.docx"
        },
        "execution_time": 0.007006406784057617,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status With Chinese Path",
        "purpose": "验证包含中文字符的路径是否能正常查看Git状态",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\中文文件名.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\中文文件名.docx"
        },
        "execution_time": 0.004004001617431641,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status On Unreadable Repository",
        "purpose": "验证当仓库路径权限不足时是否能正确处理并返回错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\restricted_repo"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\restricted_repo"
        },
        "execution_time": 0.0049991607666015625,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status On Nested Git Submodule",
        "purpose": "验证嵌套子模块路径是否能正常识别并返回状态",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\hooks"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tapplypatch-msg.sample\n\tcommit-msg.sample\n\tfsmonitor-watchman.sample\n\tpost-update.sample\n\tpre-applypatch.sample\n\tpre-commit.sample\n\tpre-merge-commit.sample\n\tpre-push.sample\n\tpre-rebase.sample\n\tpre-receive.sample\n\tprepare-commit-msg.sample\n\tpush-to-checkout.sample\n\tsendemail-validate.sample\n\tupdate.sample\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.5000770092010498,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status With Very Long Path",
        "purpose": "验证超长路径长度是否能被系统正常处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\very_long_directory_name_that_exceeds_normal_limit_and_may_cause_issues_in_windows_api_calls"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\very_long_directory_name_that_exceeds_normal_limit_and_may_cause_issues_in_windows_api_calls"
        },
        "execution_time": 0.009565114974975586,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status On Drive Root",
        "purpose": "验证尝试访问磁盘根目录的Git状态是否会触发安全限制",
        "args": {
          "repo_path": "D:\\"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: D:\\"
        },
        "execution_time": 0.006510019302368164,
        "is_functional_test": false
      }
    ],
    "git_add": [
      {
        "case_name": "Basic Git Add Success",
        "purpose": "验证在合法仓库中将一个存在的文件添加到暂存区是否成功",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\new_file.docx"
        },
        "response": {
          "result": "文件 D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\new_file.docx 已成功添加到暂存区"
        },
        "execution_time": 0.17514705657958984,
        "is_functional_test": true
      },
      {
        "case_name": "Git Add With Chinese File Path",
        "purpose": "验证包含中文字符的文件路径是否能正常被添加到暂存区",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\中文文件名.docx"
        },
        "response": {
          "result": "文件 D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\中文文件名.docx 已成功添加到暂存区"
        },
        "execution_time": 0.17503118515014648,
        "is_functional_test": true
      },
      {
        "case_name": "Git Add With Special Characters In File Path",
        "purpose": "验证文件路径中包含特殊字符时是否仍可成功添加到暂存区",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\new_文件#1@2025.docx"
        },
        "response": {
          "result": "文件 D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\new_文件#1@2025.docx 已成功添加到暂存区"
        },
        "execution_time": 0.23122501373291016,
        "is_functional_test": true
      },
      {
        "case_name": "Git Add Nonexistent File",
        "purpose": "验证尝试添加一个不存在的文件时工具能否正确抛出错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\nonexistent_file.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: 文件不存在: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\nonexistent_file.txt"
        },
        "execution_time": 0.004004240036010742,
        "is_functional_test": false
      },
      {
        "case_name": "Git Add File Outside Allowed Directory",
        "purpose": "验证尝试添加不在允许目录范围内的文件是否会触发安全限制",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "file_path": "C:\\Program Files\\test_file.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: C:\\Program Files\\test_file.txt"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": false
      },
      {
        "case_name": "Git Add Empty File Path",
        "purpose": "验证空文件路径输入时是否能正确抛出异常",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "file_path": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: 文件添加失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git add \n  stderr: 'fatal: empty string is not a valid pathspec. please use . instead if you meant to match all paths'"
        },
        "execution_time": 0.2128915786743164,
        "is_functional_test": false
      },
      {
        "case_name": "Git Add Null File Path",
        "purpose": "验证null作为文件路径参数时是否能正确抛出异常",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "file_path": null
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: 1 validation error for git_addArguments\nfile_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.0029981136322021484,
        "is_functional_test": false
      },
      {
        "case_name": "Git Add To Nonexistent Repo",
        "purpose": "验证尝试向未初始化的仓库添加文件时是否抛出错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_document.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: 文件添加失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git add D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_document.docx\n  stderr: 'fatal: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_document.docx: 'D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_document.docx' is outside repository at 'D:/devWorkspace/MCPServer-Generator/testSystem/testFiles/nonexistent_repo''"
        },
        "execution_time": 0.17903399467468262,
        "is_functional_test": false
      },
      {
        "case_name": "Git Add Very Long File Path",
        "purpose": "验证超长文件路径长度是否能被系统正常处理并添加",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\very_long_directory_name_that_exceeds_normal_limit_and_may_cause_issues_in_windows_api_calls\\testfile.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: 文件不存在: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\very_long_directory_name_that_exceeds_normal_limit_and_may_cause_issues_in_windows_api_calls\\testfile.txt"
        },
        "execution_time": 0.004120588302612305,
        "is_functional_test": true
      },
      {
        "case_name": "Git Add File Inside Git Submodule",
        "purpose": "验证尝试添加.git子模块中的文件时是否被拒绝以防止非法操作",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\hooks",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\hooks\\applypatch-msg.sample"
        },
        "response": {
          "result": "文件 D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\hooks\\applypatch-msg.sample 已成功添加到暂存区"
        },
        "execution_time": 0.23158669471740723,
        "is_functional_test": false
      },
      {
        "case_name": "Git Add On Restricted Access File",
        "purpose": "验证当文件权限不足时是否能正确处理并返回错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\restricted_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\restricted_repo\\locked_file.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\restricted_repo"
        },
        "execution_time": 0.00400090217590332,
        "is_functional_test": false
      },
      {
        "case_name": "Git Add Multiple Files Sequentially",
        "purpose": "验证连续多次调用git_add工具添加多个不同文件是否都能成功",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\new file with spaces.docx"
        },
        "response": {
          "result": "文件 D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\new file with spaces.docx 已成功添加到暂存区"
        },
        "execution_time": 0.21471238136291504,
        "is_functional_test": true
      }
    ],
    "git_diff_unstaged": [
      {
        "case_name": "Basic Git Diff Unstaged Success",
        "purpose": "验证在合法且已初始化的仓库路径下是否可以成功查看未暂存的差异信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "response": {
          "result": "diff --git a/new file with spaces.docx b/new file with spaces.docx\nindex fa4fdc0..618f356 100644\n--- a/new file with spaces.docx\t\n+++ b/new file with spaces.docx\t\n@@ -0,0 +1,2 @@\n+This paragraph contains   multiple spaces   and\n+line breaks.\n\\ No newline at end of file\ndiff --git a/new_file.docx b/new_file.docx\nindex fa4fdc0..3a5f234 100644\n--- a/new_file.docx\n+++ b/new_file.docx\n@@ -0,0 +1 @@\n+Level 9 Heading\ndiff --git \"a/new_\\346\\226\\207\\344\\273\\266#1@2025.docx\" \"b/new_\\346\\226\\207\\344\\273\\266#1@2025.docx\"\nindex fa4fdc0..a14a109 100644\n--- \"a/new_\\346\\226\\207\\344\\273\\266#1@2025.docx\"\n+++ \"b/new_\\346\\226\\207\\344\\273\\266#1@2025.docx\"\n@@ -0,0 +1 @@\n+This paragraph contains special characters: #, @, &, <, >, \"\".Special Char File Heading\ndiff --git \"a/\\344\\270\\255\\346\\226\\207\\346\\226\\207\\344...[截断]，共计1118字符，剩余318字符"
        },
        "execution_time": 11.50388479232788,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Unstaged On Nonexistent Repo",
        "purpose": "验证尝试查看未初始化的目录的未暂存差异时是否抛出错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_repo"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.36730456352233887,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Unstaged With Empty Path",
        "purpose": "验证空路径输入时是否能正确抛出异常",
        "args": {
          "repo_path": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: D:\\devWorkspace\\MCPServer-Generator\\workspace\\refinement\\git_repo_management_server_refined"
        },
        "execution_time": 0.011229753494262695,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Unstaged With Null Path",
        "purpose": "验证null作为路径参数时是否能正确抛出异常",
        "args": {
          "repo_path": null
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: 1 validation error for git_diff_unstagedArguments\nrepo_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.014574527740478516,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Unstaged On File Instead Of Directory",
        "purpose": "验证传入一个文件而非目录时，工具能否正确抛出错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_document.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_document.docx"
        },
        "execution_time": 0.019234418869018555,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Unstaged Outside Allowed Directory",
        "purpose": "验证尝试查看不允许的目录范围外的未暂存差异时是否被拒绝",
        "args": {
          "repo_path": "C:\\Program Files\\test_repo"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: C:\\Program Files\\test_repo"
        },
        "execution_time": 0.01474761962890625,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Unstaged With Special Characters In Path",
        "purpose": "验证路径中包含特殊字符时是否仍可成功查看未暂存差异",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\new_文件#1@2025.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\new_文件#1@2025.docx"
        },
        "execution_time": 0.017934322357177734,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Unstaged With Chinese Path",
        "purpose": "验证包含中文字符的路径是否能正常查看未暂存差异",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\中文文件名.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\中文文件名.docx"
        },
        "execution_time": 0.021908998489379883,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Unstaged On Unreadable Repository",
        "purpose": "验证当仓库路径权限不足时是否能正确处理并返回错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\restricted_repo"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\restricted_repo"
        },
        "execution_time": 0.01670360565185547,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Unstaged On Nested Git Submodule",
        "purpose": "验证嵌套子模块路径是否能正常识别并查看未暂存差异",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\hooks"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.42820143699645996,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Unstaged With Very Long Path",
        "purpose": "验证超长路径长度是否能被系统正常处理并查看未暂存差异",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\very_long_directory_name_that_exceeds_normal_limit_and_may_cause_issues_in_windows_api_calls"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\very_long_directory_name_that_exceeds_normal_limit_and_may_cause_issues_in_windows_api_calls"
        },
        "execution_time": 0.015021324157714844,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Unstaged On Drive Root",
        "purpose": "验证尝试访问磁盘根目录的未暂存差异是否会触发安全限制",
        "args": {
          "repo_path": "D:\\"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: D:\\"
        },
        "execution_time": 0.015518426895141602,
        "is_functional_test": false
      }
    ],
    "git_commit": [
      {
        "case_name": "Basic Git Commit Success",
        "purpose": "验证在合法且已初始化的仓库路径下，提交更改是否成功",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "message": "Initial commit"
        },
        "response": {
          "result": "更改已成功提交: Initial commit"
        },
        "execution_time": 0.48180437088012695,
        "is_functional_test": true
      },
      {
        "case_name": "Git Commit With Chinese Message",
        "purpose": "验证提交信息包含中文字符时是否能正常提交",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "message": "初始提交"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: 提交失败: Cmd('git') failed due to: exit code(1)\n  cmdline: git commit -m 初始提交\n  stdout: 'On branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   new file with spaces.docx\n\tmodified:   new_file.docx\n\tmodified:   \"new_\\346\\226\\207\\344\\273\\266#1@2025.docx\"\n\tmodified:   \"\\344\\270\\255\\346\\226\\207\\346\\226\\207\\344\\273\\266\\345\\220\\215.docx\"\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\ta_very_long_filename_that_exceeds_the_typical_limit_for_file_paths_in_windows_systems_should_be_tested_for_boundary_conditions_and_edge_cases.docx\n\tvery_long_output_filename_that_may_reach_system_limits_and_cause_errors_but_we_need_to_test_it_anyway.png\n\t\"\\344\\270\\255\\346\\226\\207\\346\\226\\207\\344\\273\\266\\345\\220\\215-\\345\\211\\257\\346\\234\\254.docx\"\n\t\"\\344\\270\\255\\346\\226\\207\\346\\226\\207\\344\\273\\266\\345\\220\\215_copy.docx\"\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")'"
        },
        "execution_time": 0.5176172256469727,
        "is_functional_test": true
      },
      {
        "case_name": "Git Commit With Special Characters In Message",
        "purpose": "验证提交信息中包含特殊字符时是否仍可成功提交",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "message": "Commit with special chars: #, @, &, <, >"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: 提交失败: Cmd('git') failed due to: exit code(1)\n  cmdline: git commit -m Commit with special chars: #, @, &, <, >\n  stdout: 'On branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   new file with spaces.docx\n\tmodified:   new_file.docx\n\tmodified:   \"new_\\346\\226\\207\\344\\273\\266#1@2025.docx\"\n\tmodified:   \"\\344\\270\\255\\346\\226\\207\\346\\226\\207\\344\\273\\266\\345\\220\\215.docx\"\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\ta_very_long_filename_that_exceeds_the_typical_limit_for_file_paths_in_windows_systems_should_be_tested_for_boundary_conditions_and_edge_cases.docx\n\tvery_long_output_filename_that_may_reach_system_limits_and_cause_errors_but_we_need_to_test_it_anyway.png\n\t\"\\344\\270\\255\\346\\226\\207\\346\\226\\207\\344\\273\\266\\345\\220\\215-\\345\\211\\257\\346\\234\\254.docx\"\n\t\"\\344\\270\\255\\346\\226\\207\\346\\226\\207\\344\\273\\266\\345\\220\\215_copy.docx\"\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")'"
        },
        "execution_time": 0.5845212936401367,
        "is_functional_test": true
      },
      {
        "case_name": "Git Commit On Nonexistent Repo",
        "purpose": "验证尝试向未初始化的仓库提交更改时是否抛出错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_repo",
          "message": "Invalid commit"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: 没有更改需要提交"
        },
        "execution_time": 0.3527657985687256,
        "is_functional_test": false
      },
      {
        "case_name": "Git Commit Without Changes",
        "purpose": "验证没有更改需要提交时是否能正确抛出异常",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "message": "Empty commit"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: 提交失败: Cmd('git') failed due to: exit code(1)\n  cmdline: git commit -m Empty commit\n  stdout: 'On branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   new file with spaces.docx\n\tmodified:   new_file.docx\n\tmodified:   \"new_\\346\\226\\207\\344\\273\\266#1@2025.docx\"\n\tmodified:   \"\\344\\270\\255\\346\\226\\207\\346\\226\\207\\344\\273\\266\\345\\220\\215.docx\"\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\ta_very_long_filename_that_exceeds_the_typical_limit_for_file_paths_in_windows_systems_should_be_tested_for_boundary_conditions_and_edge_cases.docx\n\tvery_long_output_filename_that_may_reach_system_limits_and_cause_errors_but_we_need_to_test_it_anyway.png\n\t\"\\344\\270\\255\\346\\226\\207\\346\\226\\207\\344\\273\\266\\345\\220\\215-\\345\\211\\257\\346\\234\\254.docx\"\n\t\"\\344\\270\\255\\346\\226\\207\\346\\226\\207\\344\\273\\266\\345\\220\\215_copy.docx\"\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")'"
        },
        "execution_time": 0.5530264377593994,
        "is_functional_test": false
      },
      {
        "case_name": "Git Commit Outside Allowed Directory",
        "purpose": "验证尝试在不允许的目录范围外提交更改时是否被拒绝",
        "args": {
          "repo_path": "C:\\Program Files\\test_repo",
          "message": "Restricted path commit"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: C:\\Program Files\\test_repo"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      },
      {
        "case_name": "Git Commit With Empty Path",
        "purpose": "验证空仓库路径输入时是否能正确抛出异常",
        "args": {
          "repo_path": "",
          "message": "Empty path commit"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: D:\\devWorkspace\\MCPServer-Generator\\workspace\\refinement\\git_repo_management_server_refined"
        },
        "execution_time": 0.005002021789550781,
        "is_functional_test": false
      },
      {
        "case_name": "Git Commit With Null Path",
        "purpose": "验证null作为仓库路径参数时是否能正确抛出异常",
        "args": {
          "repo_path": null,
          "message": "Null path commit"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: 1 validation error for git_commitArguments\nrepo_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.008001565933227539,
        "is_functional_test": false
      },
      {
        "case_name": "Git Commit With Empty Message",
        "purpose": "验证空提交信息时是否能正确抛出异常",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "message": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: 提交失败: Cmd('git') failed due to: exit code(1)\n  cmdline: git commit -m \n  stdout: 'On branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   new file with spaces.docx\n\tmodified:   new_file.docx\n\tmodified:   \"new_\\346\\226\\207\\344\\273\\266#1@2025.docx\"\n\tmodified:   \"\\344\\270\\255\\346\\226\\207\\346\\226\\207\\344\\273\\266\\345\\220\\215.docx\"\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\ta_very_long_filename_that_exceeds_the_typical_limit_for_file_paths_in_windows_systems_should_be_tested_for_boundary_conditions_and_edge_cases.docx\n\tvery_long_output_filename_that_may_reach_system_limits_and_cause_errors_but_we_need_to_test_it_anyway.png\n\t\"\\344\\270\\255\\346\\226\\207\\346\\226\\207\\344\\273\\266\\345\\220\\215-\\345\\211\\257\\346\\234\\254.docx\"\n\t\"\\344\\270\\255\\346\\226\\207\\346\\226\\207\\344\\273\\266\\345\\220\\215_copy.docx\"\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")'"
        },
        "execution_time": 0.5478017330169678,
        "is_functional_test": false
      },
      {
        "case_name": "Git Commit With Null Message",
        "purpose": "验证null作为提交信息参数时是否能正确抛出异常",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "message": null
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: 1 validation error for git_commitArguments\nmessage\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.005999565124511719,
        "is_functional_test": false
      },
      {
        "case_name": "Git Commit On Restricted Access Repository",
        "purpose": "验证当仓库路径权限不足时是否能正确处理并返回错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\restricted_repo",
          "message": "Restricted access commit"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\restricted_repo"
        },
        "execution_time": 0.011004924774169922,
        "is_functional_test": false
      },
      {
        "case_name": "Git Commit With Very Long Message",
        "purpose": "验证超长提交信息长度是否能被系统正常处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "message": "This is a very long commit message that exceeds the normal limit and may cause issues in certain systems or tools. It should still be accepted if the underlying git system supports it."
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: 提交失败: Cmd('git') failed due to: exit code(1)\n  cmdline: git commit -m This is a very long commit message that exceeds the normal limit and may cause issues in certain systems or tools. It should still be accepted if the underlying git system supports it.\n  stdout: 'On branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   new file with spaces.docx\n\tmodified:   new_file.docx\n\tmodified:   \"new_\\346\\226\\207\\344\\273\\266#1@2025.docx\"\n\tmodified:   \"\\344\\270\\255\\346\\226\\207\\346\\226\\207\\344\\273\\266\\345\\220\\215.docx\"\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\ta_very_long_filename_that_exceeds_the_typical_limit_for_file_paths_in_windows_systems_should_be_tested_for_boundary_conditions_and_edge_cases.docx\n\tvery_long_output_filename_that_may_reach_system_limits_and_cause_errors_but_we_need_to_test_it_anyway.png\n\t\"\\344\\270\\255\\346\\226\\207\\346\\226\\207\\344\\273\\266\\345\\220\\215-\\345\\211\\257\\346\\234\\254.docx\"\n\t\"\\344\\270\\255\\346\\226\\207\\346\\226\\207\\344\\273\\266\\345\\220\\215_copy.docx\"\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")'"
        },
        "execution_time": 0.5549051761627197,
        "is_functional_test": true
      }
    ],
    "git_diff_staged": [
      {
        "case_name": "Basic Git Diff Staged Success",
        "purpose": "验证在合法且已初始化的仓库路径下是否可以成功查看已暂存的差异信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.19043707847595215,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Staged On Nonexistent Repo",
        "purpose": "验证尝试查看未初始化的目录的已暂存差异时是否抛出错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_repo"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_repo"
        },
        "execution_time": 0.0050048828125,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Staged With Empty Path",
        "purpose": "验证空路径输入时是否能正确抛出异常",
        "args": {
          "repo_path": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: D:\\devWorkspace\\MCPServer-Generator\\workspace\\refinement\\git_repo_management_server_refined"
        },
        "execution_time": 0.004001140594482422,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Staged With Null Path",
        "purpose": "验证null作为路径参数时是否能正确抛出异常",
        "args": {
          "repo_path": null
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: 1 validation error for git_diff_stagedArguments\nrepo_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.0050046443939208984,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Staged On File Instead Of Directory",
        "purpose": "验证传入一个文件而非目录时，工具能否正确抛出错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_document.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_document.docx"
        },
        "execution_time": 0.009516716003417969,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Staged Outside Allowed Directory",
        "purpose": "验证尝试查看不允许的目录范围外的已暂存差异时是否被拒绝",
        "args": {
          "repo_path": "C:\\Program Files\\test_repo"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: C:\\Program Files\\test_repo"
        },
        "execution_time": 0.007999658584594727,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Staged With Special Characters In Path",
        "purpose": "验证路径中包含特殊字符时是否仍可成功查看已暂存差异",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\new_文件#1@2025.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\new_文件#1@2025.docx"
        },
        "execution_time": 0.0050008296966552734,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Staged With Chinese Path",
        "purpose": "验证包含中文字符的路径是否能正常查看已暂存差异",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\中文文件名.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\中文文件名.docx"
        },
        "execution_time": 0.007999897003173828,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Staged On Unreadable Repository",
        "purpose": "验证当仓库路径权限不足时是否能正确处理并返回错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\restricted_repo"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\restricted_repo"
        },
        "execution_time": 0.003993988037109375,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Staged On Nested Git Submodule",
        "purpose": "验证嵌套子模块路径是否能正常识别并查看已暂存差异",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\hooks"
        },
        "response": {
          "result": "diff --git a/applypatch-msg.sample b/applypatch-msg.sample\nnew file mode 100644\nindex 0000000..a5d7b84\n--- /dev/null\n+++ b/applypatch-msg.sample\n@@ -0,0 +1,15 @@\n+#!/bin/sh\n+#\n+# An example hook script to check the commit log message taken by\n+# applypatch from an e-mail message.\n+#\n+# The hook should exit with non-zero status after issuing an\n+# appropriate message if it wants to stop the commit.  The hook is\n+# allowed to edit the commit message file.\n+#\n+# To enable this hook, rename this file to \"applypatch-msg\".\n+\n+. git-sh-setup\n+commitmsg=\"$(git rev-parse --git-path hooks/commit-msg)\"\n+test -x \"$commitmsg\" && exec \"$commitmsg\" ${1+\"$@\"}\n+:"
        },
        "execution_time": 0.18436861038208008,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Staged With Very Long Path",
        "purpose": "验证超长路径长度是否能被系统正常处理并查看已暂存差异",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\very_long_directory_name_that_exceeds_normal_limit_and_may_cause_issues_in_windows_api_calls"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\very_long_directory_name_that_exceeds_normal_limit_and_may_cause_issues_in_windows_api_calls"
        },
        "execution_time": 0.004999637603759766,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Staged On Drive Root",
        "purpose": "验证尝试访问磁盘根目录的已暂存差异是否会触发安全限制",
        "args": {
          "repo_path": "D:\\"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: D:\\"
        },
        "execution_time": 0.0050106048583984375,
        "is_functional_test": false
      }
    ],
    "git_log": [
      {
        "case_name": "Basic Git Log Success",
        "purpose": "验证在合法且已初始化的仓库路径下是否可以成功查看提交历史信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "response": {
          "result": "643c1f7 Initial commit"
        },
        "execution_time": 0.13700008392333984,
        "is_functional_test": true
      },
      {
        "case_name": "Git Log On Nonexistent Repo",
        "purpose": "验证尝试查看未初始化的目录的提交历史时是否抛出错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_repo"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_repo"
        },
        "execution_time": 0.015996456146240234,
        "is_functional_test": false
      },
      {
        "case_name": "Git Log With Empty Path",
        "purpose": "验证空路径输入时是否能正确抛出异常",
        "args": {
          "repo_path": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: D:\\devWorkspace\\MCPServer-Generator\\workspace\\refinement\\git_repo_management_server_refined"
        },
        "execution_time": 0.017001628875732422,
        "is_functional_test": false
      },
      {
        "case_name": "Git Log With Null Path",
        "purpose": "验证null作为路径参数时是否能正确抛出异常",
        "args": {
          "repo_path": null
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: 1 validation error for git_logArguments\nrepo_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.023999691009521484,
        "is_functional_test": false
      },
      {
        "case_name": "Git Log On File Instead Of Directory",
        "purpose": "验证传入一个文件而非目录时，工具能否正确抛出错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_document.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_document.docx"
        },
        "execution_time": 0.03600049018859863,
        "is_functional_test": false
      },
      {
        "case_name": "Git Log Outside Allowed Directory",
        "purpose": "验证尝试查看不允许的目录范围外的提交历史时是否被拒绝",
        "args": {
          "repo_path": "C:\\Program Files\\test_repo"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: C:\\Program Files\\test_repo"
        },
        "execution_time": 0.023522377014160156,
        "is_functional_test": false
      },
      {
        "case_name": "Git Log With Special Characters In Path",
        "purpose": "验证路径中包含特殊字符时是否仍可成功查看提交历史",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\new_文件#1@2025.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\new_文件#1@2025.docx"
        },
        "execution_time": 0.028001785278320312,
        "is_functional_test": true
      },
      {
        "case_name": "Git Log With Chinese Path",
        "purpose": "验证包含中文字符的路径是否能正常查看提交历史",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\中文文件名.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\中文文件名.docx"
        },
        "execution_time": 0.0215451717376709,
        "is_functional_test": true
      },
      {
        "case_name": "Git Log On Unreadable Repository",
        "purpose": "验证当仓库路径权限不足时是否能正确处理并返回错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\restricted_repo"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\restricted_repo"
        },
        "execution_time": 0.01699972152709961,
        "is_functional_test": false
      },
      {
        "case_name": "Git Log On Nested Git Submodule",
        "purpose": "验证嵌套子模块路径是否能正常识别并查看提交历史",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git\\hooks"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: 获取提交历史失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git log --oneline\n  stderr: 'fatal: your current branch 'master' does not have any commits yet'"
        },
        "execution_time": 0.2956397533416748,
        "is_functional_test": true
      },
      {
        "case_name": "Git Log With Very Long Path",
        "purpose": "验证超长路径长度是否能被系统正常处理并查看提交历史",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\very_long_directory_name_that_exceeds_normal_limit_and_may_cause_issues_in_windows_api_calls"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\very_long_directory_name_that_exceeds_normal_limit_and_may_cause_issues_in_windows_api_calls"
        },
        "execution_time": 0.0359957218170166,
        "is_functional_test": true
      }
    ],
    "git_create_branch": [
      {
        "case_name": "Basic Git Create Branch Success",
        "purpose": "验证在合法且已初始化的仓库路径下是否可以成功创建新分支",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": "feature/new_branch"
        },
        "response": {
          "result": "分支 feature/new_branch 已成功创建"
        },
        "execution_time": 0.21941065788269043,
        "is_functional_test": true
      },
      {
        "case_name": "Git Create Branch With Chinese Name",
        "purpose": "验证包含中文字符的分支名称是否能正常创建",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": "功能/中文分支"
        },
        "response": {
          "result": "分支 功能/中文分支 已成功创建"
        },
        "execution_time": 0.16225719451904297,
        "is_functional_test": true
      },
      {
        "case_name": "Git Create Branch With Special Characters In Name",
        "purpose": "验证分支名称中包含特殊字符时是否仍可成功创建",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": "bugfix#1@2025"
        },
        "response": {
          "result": "分支 bugfix#1@2025 已成功创建"
        },
        "execution_time": 0.15019893646240234,
        "is_functional_test": true
      },
      {
        "case_name": "Git Create Branch On Nonexistent Repo",
        "purpose": "验证尝试在未初始化的仓库路径下创建分支时是否抛出错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_repo",
          "branch_name": "invalid_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_repo"
        },
        "execution_time": 0.02899909019470215,
        "is_functional_test": false
      },
      {
        "case_name": "Git Create Branch Outside Allowed Directory",
        "purpose": "验证尝试在不允许的目录范围外创建分支是否会触发安全限制",
        "args": {
          "repo_path": "C:\\Program Files\\test_repo",
          "branch_name": "restricted_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: C:\\Program Files\\test_repo"
        },
        "execution_time": 0.012692928314208984,
        "is_functional_test": false
      },
      {
        "case_name": "Git Create Branch With Empty Path",
        "purpose": "验证空仓库路径输入时是否能正确抛出异常",
        "args": {
          "repo_path": "",
          "branch_name": "empty_path_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: D:\\devWorkspace\\MCPServer-Generator\\workspace\\refinement\\git_repo_management_server_refined"
        },
        "execution_time": 0.011077642440795898,
        "is_functional_test": false
      },
      {
        "case_name": "Git Create Branch With Null Path",
        "purpose": "验证null作为仓库路径参数时是否能正确抛出异常",
        "args": {
          "repo_path": null,
          "branch_name": "null_path_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: 1 validation error for git_create_branchArguments\nrepo_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.027995586395263672,
        "is_functional_test": false
      },
      {
        "case_name": "Git Create Branch With Empty Branch Name",
        "purpose": "验证空分支名称时是否能正确抛出异常",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: 创建分支失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git branch \n  stderr: 'fatal: '' is not a valid branch name\nhint: See `man git check-ref-format`\nhint: Disable this message with \"git config advice.refSyntax false\"'"
        },
        "execution_time": 0.13699889183044434,
        "is_functional_test": false
      },
      {
        "case_name": "Git Create Branch With Null Branch Name",
        "purpose": "验证null作为分支名称参数时是否能正确抛出异常",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": null
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: 1 validation error for git_create_branchArguments\nbranch_name\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.03500032424926758,
        "is_functional_test": false
      },
      {
        "case_name": "Git Create Branch When Branch Already Exists",
        "purpose": "验证当指定分支已存在时是否能正确处理并返回错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": "master"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: 分支 master 已经存在"
        },
        "execution_time": 0.018001079559326172,
        "is_functional_test": false
      },
      {
        "case_name": "Git Create Branch On Restricted Access Repository",
        "purpose": "验证当仓库路径权限不足时是否能正确处理并返回错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\restricted_repo",
          "branch_name": "access_restricted_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\restricted_repo"
        },
        "execution_time": 0.01600027084350586,
        "is_functional_test": false
      }
    ],
    "git_checkout": [
      {
        "case_name": "Basic Git Checkout Success",
        "purpose": "验证在合法且已初始化的仓库路径下切换分支是否成功",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": "feature/new_branch"
        },
        "response": {
          "result": "已成功切换到分支 feature/new_branch"
        },
        "execution_time": 0.13063383102416992,
        "is_functional_test": true
      },
      {
        "case_name": "Git Checkout With Chinese Branch Name",
        "purpose": "验证包含中文字符的分支名称是否能正常切换",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": "功能/中文分支"
        },
        "response": {
          "result": "已成功切换到分支 功能/中文分支"
        },
        "execution_time": 0.14300036430358887,
        "is_functional_test": true
      },
      {
        "case_name": "Git Checkout With Special Characters In Branch Name",
        "purpose": "验证分支名称中包含特殊字符时是否仍可成功切换",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": "bugfix#1@2025"
        },
        "response": {
          "result": "已成功切换到分支 bugfix#1@2025"
        },
        "execution_time": 0.15556812286376953,
        "is_functional_test": true
      },
      {
        "case_name": "Git Checkout On Nonexistent Repo",
        "purpose": "验证尝试在未初始化的仓库路径下切换分支时是否抛出错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_repo",
          "branch_name": "invalid_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_repo"
        },
        "execution_time": 0.02451181411743164,
        "is_functional_test": false
      },
      {
        "case_name": "Git Checkout Outside Allowed Directory",
        "purpose": "验证尝试在不允许的目录范围外切换分支是否会触发安全限制",
        "args": {
          "repo_path": "C:\\Program Files\\test_repo",
          "branch_name": "restricted_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: C:\\Program Files\\test_repo"
        },
        "execution_time": 0.013000726699829102,
        "is_functional_test": false
      },
      {
        "case_name": "Git Checkout With Empty Path",
        "purpose": "验证空仓库路径输入时是否能正确抛出异常",
        "args": {
          "repo_path": "",
          "branch_name": "empty_path_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: D:\\devWorkspace\\MCPServer-Generator\\workspace\\refinement\\git_repo_management_server_refined"
        },
        "execution_time": 0.03299903869628906,
        "is_functional_test": false
      },
      {
        "case_name": "Git Checkout With Null Path",
        "purpose": "验证null作为仓库路径参数时是否能正确抛出异常",
        "args": {
          "repo_path": null,
          "branch_name": "null_path_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: 1 validation error for git_checkoutArguments\nrepo_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.017998456954956055,
        "is_functional_test": false
      },
      {
        "case_name": "Git Checkout With Empty Branch Name",
        "purpose": "验证空分支名称时是否能正确抛出异常",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: 分支  不存在"
        },
        "execution_time": 0.025333881378173828,
        "is_functional_test": false
      },
      {
        "case_name": "Git Checkout With Null Branch Name",
        "purpose": "验证null作为分支名称参数时是否能正确抛出异常",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": null
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: 1 validation error for git_checkoutArguments\nbranch_name\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.030711650848388672,
        "is_functional_test": false
      },
      {
        "case_name": "Git Checkout When Branch DoesNotExist",
        "purpose": "验证当指定分支不存在时是否能正确处理并返回错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": "nonexistent_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: 分支 nonexistent_branch 不存在"
        },
        "execution_time": 0.019017696380615234,
        "is_functional_test": false
      },
      {
        "case_name": "Git Checkout On Restricted Access Repository",
        "purpose": "验证当仓库路径权限不足时是否能正确处理并返回错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\restricted_repo",
          "branch_name": "access_restricted_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\restricted_repo"
        },
        "execution_time": 0.01075601577758789,
        "is_functional_test": false
      },
      {
        "case_name": "Git Checkout With Very Long Branch Name",
        "purpose": "验证超长分支名称长度是否能被系统正常处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": "this_is_a_very_long_branch_name_that_may_exceed_system_limits_and_cause_errors_but_we_need_to_test_it_anyway"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: 分支 this_is_a_very_long_branch_name_that_may_exceed_system_limits_and_cause_errors_but_we_need_to_test_it_anyway 不存在"
        },
        "execution_time": 0.02581310272216797,
        "is_functional_test": true
      }
    ],
    "git_diff": [
      {
        "case_name": "Basic Git Diff BetweenCommits Success",
        "purpose": "验证在合法且已初始化的仓库路径下，比较两个提交之间的差异是否成功",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "commit1": "643c1f7",
          "commit2": "HEAD"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.18460965156555176,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff BetweenCommits With Chinese Path",
        "purpose": "验证包含中文字符的仓库路径是否能正常执行提交差异比较",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\中文文件名.docx",
          "commit1": "643c1f7",
          "commit2": "HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\中文文件名.docx"
        },
        "execution_time": 0.05099821090698242,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff BetweenCommits With Special Characters In Path",
        "purpose": "验证路径中包含特殊字符时是否仍可成功执行提交差异比较",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\new_文件#1@2025.docx",
          "commit1": "643c1f7",
          "commit2": "HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\new_文件#1@2025.docx"
        },
        "execution_time": 0.03322649002075195,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff BetweenCommits Invalid Repo Path",
        "purpose": "验证无效仓库路径是否能正确抛出错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_repo",
          "commit1": "643c1f7",
          "commit2": "HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_repo"
        },
        "execution_time": 0.03899884223937988,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff BetweenCommits Outside Allowed Directory",
        "purpose": "验证尝试在不允许的目录范围外进行提交差异比较是否会触发安全限制",
        "args": {
          "repo_path": "C:\\Program Files\\test_repo",
          "commit1": "643c1f7",
          "commit2": "HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: C:\\Program Files\\test_repo"
        },
        "execution_time": 0.03151369094848633,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff BetweenCommits Empty Repo Path",
        "purpose": "验证空仓库路径输入时是否能正确抛出异常",
        "args": {
          "repo_path": "",
          "commit1": "643c1f7",
          "commit2": "HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: D:\\devWorkspace\\MCPServer-Generator\\workspace\\refinement\\git_repo_management_server_refined"
        },
        "execution_time": 0.01700115203857422,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff BetweenCommits Null Repo Path",
        "purpose": "验证null作为仓库路径参数时是否能正确抛出异常",
        "args": {
          "repo_path": null,
          "commit1": "643c1f7",
          "commit2": "HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: 1 validation error for git_diffArguments\nrepo_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.016001224517822266,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff BetweenCommits Invalid Commit Hash",
        "purpose": "验证无效提交哈希值是否能正确处理并返回错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "commit1": "invalid_hash",
          "commit2": "HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: 差异检查失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff invalid_hash HEAD\n  stderr: 'fatal: ambiguous argument 'invalid_hash': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.20264363288879395,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff BetweenCommits Nonexistent Commit",
        "purpose": "验证不存在的提交哈希是否能正确处理并返回错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "commit1": "abcdefg",
          "commit2": "HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: 差异检查失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff abcdefg HEAD\n  stderr: 'fatal: ambiguous argument 'abcdefg': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.2804386615753174,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff BetweenCommits Same Commit",
        "purpose": "验证两个相同的提交哈希是否能正确处理并返回无差异信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "commit1": "643c1f7",
          "commit2": "643c1f7"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.35613489151000977,
        "is_functional_test": true
      }
    ],
    "git_reset": [
      {
        "case_name": "Basic Git Reset Success",
        "purpose": "验证在合法且已初始化的仓库路径下，取消暂存文件是否成功",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\new_file.docx"
        },
        "response": {
          "result": "文件 D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\new_file.docx 已成功从暂存区移除"
        },
        "execution_time": 0.29183268547058105,
        "is_functional_test": true
      },
      {
        "case_name": "Git Reset With Chinese File Path",
        "purpose": "验证包含中文字符的文件路径是否能正常被取消暂存",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\中文文件名.docx"
        },
        "response": {
          "result": "文件 D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\中文文件名.docx 已成功从暂存区移除"
        },
        "execution_time": 0.24932193756103516,
        "is_functional_test": true
      },
      {
        "case_name": "Git Reset With Special Characters In File Path",
        "purpose": "验证文件路径中包含特殊字符时是否仍可成功取消暂存",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\new_文件#1@2025.docx"
        },
        "response": {
          "result": "文件 D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\new_文件#1@2025.docx 已成功从暂存区移除"
        },
        "execution_time": 0.24448037147521973,
        "is_functional_test": true
      },
      {
        "case_name": "Git Reset Nonexistent File",
        "purpose": "验证尝试取消暂存一个不存在的文件时工具能否正确抛出错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\nonexistent_file.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 取消暂存失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git reset D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\nonexistent_file.txt\n  stderr: 'fatal: invalid object name 'D'.'"
        },
        "execution_time": 0.2512984275817871,
        "is_functional_test": false
      },
      {
        "case_name": "Git Reset File Outside Allowed Directory",
        "purpose": "验证尝试取消暂存不在允许目录范围内的文件是否会触发安全限制",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "file_path": "C:\\Program Files\\test_file.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 取消暂存失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git reset C:\\Program Files\\test_file.txt\n  stderr: 'fatal: invalid object name 'C'.'"
        },
        "execution_time": 0.23502707481384277,
        "is_functional_test": false
      },
      {
        "case_name": "Git Reset Empty File Path",
        "purpose": "验证空文件路径输入时是否能正确抛出异常",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "file_path": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 取消暂存失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git reset \n  stderr: 'fatal: ambiguous argument '': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.2223520278930664,
        "is_functional_test": false
      },
      {
        "case_name": "Git Reset Null File Path",
        "purpose": "验证null作为文件路径参数时是否能正确抛出异常",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "file_path": null
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 1 validation error for git_resetArguments\nfile_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.03899955749511719,
        "is_functional_test": false
      },
      {
        "case_name": "Git Reset On Nonexistent Repo",
        "purpose": "验证尝试向未初始化的仓库取消暂存文件时是否抛出错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_document.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_repo"
        },
        "execution_time": 0.012996435165405273,
        "is_functional_test": false
      },
      {
        "case_name": "Git Reset On Restricted Access File",
        "purpose": "验证当文件权限不足时是否能正确处理并返回错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\restricted_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\restricted_repo\\locked_file.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\restricted_repo"
        },
        "execution_time": 0.03399968147277832,
        "is_functional_test": false
      },
      {
        "case_name": "Git Reset Very Long File Path",
        "purpose": "验证超长文件路径长度是否能被系统正常处理并取消暂存",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\very_long_directory_name_that_exceeds_normal_limit_and_may_cause_issues_in_windows_api_calls\\testfile.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 取消暂存失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git reset D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\very_long_directory_name_that_exceeds_normal_limit_and_may_cause_issues_in_windows_api_calls\\testfile.txt\n  stderr: 'fatal: invalid object name 'D'.'"
        },
        "execution_time": 0.173508882522583,
        "is_functional_test": true
      }
    ],
    "git_show": [
      {
        "case_name": "Basic Git Show Success",
        "purpose": "验证在合法且已初始化的仓库路径下，查看指定提交的详细信息是否成功",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "commit_hash": "643c1f7"
        },
        "response": {
          "result": "commit 643c1f73ff0d59e98647def8a442fff277daf68b\nAuthor: pouchine <1291980381@qq.com>\nDate:   Tue Jul 1 17:07:38 2025 +0800\n\n    Initial commit\n\ndiff --git a/new file with spaces.docx b/new file with spaces.docx\nnew file mode 100644\nindex 0000000..fa4fdc0\ndiff --git a/new_file.docx b/new_file.docx\nnew file mode 100644\nindex 0000000..fa4fdc0\ndiff --git \"a/new_\\346\\226\\207\\344\\273\\266#1@2025.docx\" \"b/new_\\346\\226\\207\\344\\273\\266#1@2025.docx\"\nnew file mode 100644\nindex 0000000..fa4fdc0\ndiff --git \"a/\\344\\270\\255\\346\\226\\207\\346\\226\\207\\344\\273\\266\\345\\220\\215.docx\" \"b/\\344\\270\\255\\346\\226\\207\\346\\226\\207\\344\\273\\266\\345\\220\\215.docx\"\nnew file mode 100644\nindex 0000000..fa4fdc0"
        },
        "execution_time": 3.813957691192627,
        "is_functional_test": true
      },
      {
        "case_name": "Git Show With Chinese Path",
        "purpose": "验证包含中文字符的仓库路径是否能正常查看提交详细信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\中文文件名.docx",
          "commit_hash": "643c1f7"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\中文文件名.docx"
        },
        "execution_time": 0.011997222900390625,
        "is_functional_test": true
      },
      {
        "case_name": "Git Show With Special Characters In Path",
        "purpose": "验证路径中包含特殊字符时是否仍可成功查看提交详细信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\new_文件#1@2025.docx",
          "commit_hash": "643c1f7"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\new_文件#1@2025.docx"
        },
        "execution_time": 0.012992620468139648,
        "is_functional_test": true
      },
      {
        "case_name": "Git Show Invalid Repo Path",
        "purpose": "验证无效仓库路径是否能正确抛出错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_repo",
          "commit_hash": "643c1f7"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: 路径不存在或不是目录: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_repo"
        },
        "execution_time": 0.010999679565429688,
        "is_functional_test": false
      },
      {
        "case_name": "Git Show Outside Allowed Directory",
        "purpose": "验证尝试在不允许的目录范围外查看提交详细信息是否会触发安全限制",
        "args": {
          "repo_path": "C:\\Program Files\\test_repo",
          "commit_hash": "643c1f7"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: C:\\Program Files\\test_repo"
        },
        "execution_time": 0.014999628067016602,
        "is_functional_test": false
      },
      {
        "case_name": "Git Show Empty Repo Path",
        "purpose": "验证空仓库路径输入时是否能正确抛出异常",
        "args": {
          "repo_path": "",
          "commit_hash": "643c1f7"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: 路径必须在允许的目录范围内: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles. 提供的路径: D:\\devWorkspace\\MCPServer-Generator\\workspace\\refinement\\git_repo_management_server_refined"
        },
        "execution_time": 0.014743328094482422,
        "is_functional_test": false
      },
      {
        "case_name": "Git Show Null Repo Path",
        "purpose": "验证null作为仓库路径参数时是否能正确抛出异常",
        "args": {
          "repo_path": null,
          "commit_hash": "643c1f7"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: 1 validation error for git_showArguments\nrepo_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.011994123458862305,
        "is_functional_test": false
      },
      {
        "case_name": "Git Show Invalid Commit Hash",
        "purpose": "验证无效提交哈希值是否能正确处理并返回错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "commit_hash": "invalid_hash"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: 获取提交信息失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git show invalid_hash\n  stderr: 'fatal: ambiguous argument 'invalid_hash': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.1578516960144043,
        "is_functional_test": false
      },
      {
        "case_name": "Git Show Nonexistent Commit",
        "purpose": "验证不存在的提交哈希是否能正确处理并返回错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "commit_hash": "abcdefg"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: 获取提交信息失败: Cmd('git') failed due to: exit code(128)\n  cmdline: git show abcdefg\n  stderr: 'fatal: ambiguous argument 'abcdefg': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.19526386260986328,
        "is_functional_test": false
      },
      {
        "case_name": "Git Show Same Commit",
        "purpose": "验证查看同一个提交的详细信息是否能正确返回结果",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "commit_hash": "643c1f7"
        },
        "response": {
          "result": "commit 643c1f73ff0d59e98647def8a442fff277daf68b\nAuthor: pouchine <1291980381@qq.com>\nDate:   Tue Jul 1 17:07:38 2025 +0800\n\n    Initial commit\n\ndiff --git a/new file with spaces.docx b/new file with spaces.docx\nnew file mode 100644\nindex 0000000..fa4fdc0\ndiff --git a/new_file.docx b/new_file.docx\nnew file mode 100644\nindex 0000000..fa4fdc0\ndiff --git \"a/new_\\346\\226\\207\\344\\273\\266#1@2025.docx\" \"b/new_\\346\\226\\207\\344\\273\\266#1@2025.docx\"\nnew file mode 100644\nindex 0000000..fa4fdc0\ndiff --git \"a/\\344\\270\\255\\346\\226\\207\\346\\226\\207\\344\\273\\266\\345\\220\\215.docx\" \"b/\\344\\270\\255\\346\\226\\207\\346\\226\\207\\344\\273\\266\\345\\220\\215.docx\"\nnew file mode 100644\nindex 0000000..fa4fdc0"
        },
        "execution_time": 3.277188301086426,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 133
}