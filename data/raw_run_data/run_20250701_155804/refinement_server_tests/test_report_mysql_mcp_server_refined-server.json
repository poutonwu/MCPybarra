{
  "server_name": "server",
  "parent_dir": "mysql_mcp_server_refined",
  "report_name": "mysql_mcp_server_refined-server",
  "server_path": "workspace\\refinement\\mysql_mcp_server_refined\\server.py",
  "timestamp": "2025-07-01T17:07:21.608206",
  "tools": [
    {
      "name": "list_resources",
      "description": "\n    列出所有可用的MySQL数据表。\n\n    功能描述:\n        获取当前数据库中所有表的列表，作为资源提供访问。\n\n    Args:\n        None\n\n    Returns:\n        str: 包含所有表名的JSON数组字符串。\n\n    Raises:\n        ConnectionError: 如果连接数据库失败。\n        RuntimeError: 如果获取表列表过程中发生错误。\n\n    示例:\n        >>> list_resources()\n        '[\"users\", \"orders\", \"products\"]'\n    ",
      "args_schema": {
        "properties": {},
        "title": "list_resourcesArguments",
        "type": "object"
      }
    },
    {
      "name": "read_resource",
      "description": "\n    读取指定表的完整数据内容。\n\n    功能描述:\n        以行和列的格式返回表中的所有记录，最多返回100条记录。\n\n    Args:\n        table_name (str): 要读取的数据表名称。必填，必须是有效的表名。\n\n    Returns:\n        str: 包含表数据的JSON字符串，格式为包含字段名的字典列表。\n\n    Raises:\n        ValueError: 如果提供的表名无效或包含特殊字符。\n        ConnectionError: 如果连接数据库失败。\n        RuntimeError: 如果查询执行失败或获取结果失败。\n\n    示例:\n        >>> read_resource(table_name=\"users\")\n        '[{\"id\": 1, \"name\": \"Alice\", \"email\": \"alice@example.com\"}, {\"id\": 2, \"name\": \"Bob\", \"email\": \"bob@example.com\"}]'\n    ",
      "args_schema": {
        "properties": {
          "table_name": {
            "title": "Table Name",
            "type": "string"
          }
        },
        "required": [
          "table_name"
        ],
        "title": "read_resourceArguments",
        "type": "object"
      }
    },
    {
      "name": "execute_sql",
      "description": "\n    执行自定义SQL查询语句。\n\n    功能描述:\n        支持各种SQL操作（如SELECT、SHOW、INSERT、UPDATE等），\n        并根据查询类型返回结构化的结果。\n\n    Args:\n        sql_query (str): 要执行的SQL查询语句。必填。\n        params (dict, optional): SQL查询的参数字典。默认为None。\n\n    Returns:\n        str: JSON字符串，包含查询结果：\n            - 对于SELECT/SHOW查询：返回包含字段名的字典列表。\n            - 对于INSERT/UPDATE/DELETE查询：返回受影响行数的字典。\n\n    Raises:\n        ValueError: 如果SQL查询为空或格式不正确。\n        ConnectionError: 如果连接数据库失败。\n        RuntimeError: 如果查询执行失败或获取结果失败。\n\n    示例:\n        >>> execute_sql(sql_query=\"SELECT * FROM users WHERE id = %(id)s\", params={\"id\": 1})\n        '[{\"id\": 1, \"name\": \"Alice\", \"email\": \"alice@example.com\"}]'\n        \n        >>> execute_sql(sql_query=\"UPDATE users SET name = %(new_name)s WHERE id = %(id)s\", params={\"new_name\": \"Charlie\", \"id\": 1})\n        '{\"affected_rows\": 1}'\n    ",
      "args_schema": {
        "properties": {
          "sql_query": {
            "title": "Sql Query",
            "type": "string"
          },
          "params": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Params"
          }
        },
        "required": [
          "sql_query"
        ],
        "title": "execute_sqlArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "list_resources": [
      {
        "case_name": "成功列出所有数据库表",
        "purpose": "验证list_resources在正常情况下能够正确返回数据库中的表列表",
        "args": {},
        "response": {
          "result": "[\"addresses\", \"companies\", \"order_items\", \"orders\", \"products\", \"reviews\", \"users\"]"
        },
        "execution_time": 0.5163650512695312,
        "is_functional_test": true
      },
      {
        "case_name": "空数据库下返回空数组",
        "purpose": "验证当数据库中没有可用表时，工具是否返回空的JSON数组",
        "args": {},
        "response": {
          "result": "[\"addresses\", \"companies\", \"order_items\", \"orders\", \"products\", \"reviews\", \"users\"]"
        },
        "execution_time": 0.19098711013793945,
        "is_functional_test": true
      },
      {
        "case_name": "包含特殊字符的表名能否被正确列出",
        "purpose": "测试数据库中存在带特殊字符（如下划线、数字等）的表名时能否被正确识别并返回",
        "args": {},
        "response": {
          "result": "[\"addresses\", \"companies\", \"order_items\", \"orders\", \"products\", \"reviews\", \"users\"]"
        },
        "execution_time": 0.19005656242370605,
        "is_functional_test": true
      },
      {
        "case_name": "连接失败时抛出ConnectionError",
        "purpose": "模拟数据库连接失败场景，验证是否会抛出ConnectionError异常",
        "args": {},
        "response": {
          "result": "[\"addresses\", \"companies\", \"order_items\", \"orders\", \"products\", \"reviews\", \"users\"]"
        },
        "execution_time": 0.17234396934509277,
        "is_functional_test": false
      },
      {
        "case_name": "获取表列表过程中出现权限错误",
        "purpose": "测试用户无权限查看表信息时，是否会抛出RuntimeError",
        "args": {},
        "response": {
          "result": "[\"addresses\", \"companies\", \"order_items\", \"orders\", \"products\", \"reviews\", \"users\"]"
        },
        "execution_time": 0.1600017547607422,
        "is_functional_test": false
      },
      {
        "case_name": "数据库服务宕机情况下的错误处理",
        "purpose": "测试数据库服务不可用时能否正确捕获异常并提示",
        "args": {},
        "response": {
          "result": "[\"addresses\", \"companies\", \"order_items\", \"orders\", \"products\", \"reviews\", \"users\"]"
        },
        "execution_time": 0.168809175491333,
        "is_functional_test": false
      },
      {
        "case_name": "SQL注入尝试安全性测试",
        "purpose": "验证工具是否对参数进行安全过滤（尽管本工具无参数，但测试是否存在潜在注入风险）",
        "args": {},
        "response": {
          "result": "[\"addresses\", \"companies\", \"order_items\", \"orders\", \"products\", \"reviews\", \"users\"]"
        },
        "execution_time": 0.15750694274902344,
        "is_functional_test": false
      },
      {
        "case_name": "最大表数量边界测试",
        "purpose": "测试数据库中存在大量表时，工具是否能正常处理并返回完整列表",
        "args": {},
        "response": {
          "result": "[\"addresses\", \"companies\", \"order_items\", \"orders\", \"products\", \"reviews\", \"users\"]"
        },
        "execution_time": 0.17129874229431152,
        "is_functional_test": true
      },
      {
        "case_name": "长表名边界测试",
        "purpose": "测试表名长度接近系统限制时是否能被正确读取和返回",
        "args": {},
        "response": {
          "result": "[\"addresses\", \"companies\", \"order_items\", \"orders\", \"products\", \"reviews\", \"users\"]"
        },
        "execution_time": 0.1778719425201416,
        "is_functional_test": true
      },
      {
        "case_name": "多语言表名支持测试",
        "purpose": "测试包含非英文字符的表名（如中文）能否被正确列出",
        "args": {},
        "response": {
          "result": "[\"addresses\", \"companies\", \"order_items\", \"orders\", \"products\", \"reviews\", \"users\"]"
        },
        "execution_time": 0.18111562728881836,
        "is_functional_test": true
      },
      {
        "case_name": "跨schema表访问测试",
        "purpose": "验证工具是否能正确列出多个schema下的表",
        "args": {},
        "response": {
          "result": "[\"addresses\", \"companies\", \"order_items\", \"orders\", \"products\", \"reviews\", \"users\"]"
        },
        "execution_time": 0.16329240798950195,
        "is_functional_test": true
      }
    ],
    "read_resource": [
      {
        "case_name": "成功读取用户表数据",
        "purpose": "验证read_resource在正常情况下能够正确返回指定表的数据内容",
        "args": {
          "table_name": "users"
        },
        "response": {
          "result": "[{\"id\": 1, \"username\": \"user1\", \"email\": \"updated_email@example.com\", \"age\": 28, \"company_id\": 1, \"created_at\": \"2025-06-30 10:43:59\"}, {\"id\": 2, \"username\": \"user2\", \"email\": \"user2@example.com\", \"age\": 35, \"company_id\": 2, \"created_at\": \"2025-06-30 10:43:59\"}, {\"id\": 3, \"username\": \"user3\", \"email\": \"user3@example.com\", \"age\": 42, \"company_id\": 3, \"created_at\": \"2025-06-30 10:43:59\"}, {\"id\": 4, \"username\": \"user4\", \"email\": \"user4@example.com\", \"age\": 25, \"company_id\": 1, \"created_at\": \"2025-06-30 10:43:59\"}, {\"id\": 5, \"username\": \"user5\", \"email\": \"user5@example.com\", \"age\": 31, \"company_id\": 2, \"created_at\": \"2025-06-30 10:43:59\"}, {\"id\": 6, \"username\": \"user6\", \"email\": \"user6@example.com\", \"age\": 29, \"company_id\": null, \"created_at\": \"2025-06-30 10:43:59\"}, {\"id\": 7, \"username\": \"new...[截断]，共计909字符，剩余109字符"
        },
        "execution_time": 0.2012958526611328,
        "is_functional_test": true
      },
      {
        "case_name": "读取不存在的表时抛出ValueError",
        "purpose": "测试当提供的表名不存在时，工具是否抛出ValueError异常",
        "args": {
          "table_name": "nonexistent_table"
        },
        "response": {
          "error": "ToolException: Error executing tool read_resource: Failed to read resource from table 'nonexistent_table': 1146 (42S02): Table 'user-db.nonexistent_table' doesn't exist"
        },
        "execution_time": 0.18378448486328125,
        "is_functional_test": false
      },
      {
        "case_name": "读取包含特殊字符的表名数据",
        "purpose": "验证工具是否能正确处理包含特殊字符（如下划线）的表名并返回数据",
        "args": {
          "table_name": "order_items"
        },
        "response": {
          "result": "[{\"id\": 1, \"order_id\": 1, \"product_id\": 1, \"quantity\": 1, \"unit_price\": \"899.99\"}, {\"id\": 2, \"order_id\": 2, \"product_id\": 4, \"quantity\": 1, \"unit_price\": \"179.99\"}, {\"id\": 3, \"order_id\": 3, \"product_id\": 5, \"quantity\": 1, \"unit_price\": \"79.99\"}, {\"id\": 4, \"order_id\": 4, \"product_id\": 7, \"quantity\": 1, \"unit_price\": \"45000.00\"}, {\"id\": 5, \"order_id\": 5, \"product_id\": 3, \"quantity\": 1, \"unit_price\": \"1299.99\"}, {\"id\": 6, \"order_id\": 6, \"product_id\": 6, \"quantity\": 1, \"unit_price\": \"49.99\"}, {\"id\": 7, \"order_id\": 7, \"product_id\": 2, \"quantity\": 1, \"unit_price\": \"249.99\"}]"
        },
        "execution_time": 0.1909193992614746,
        "is_functional_test": true
      },
      {
        "case_name": "读取空表时返回空数组",
        "purpose": "测试当指定表中没有记录时，工具是否返回空的JSON数组",
        "args": {
          "table_name": "empty_table"
        },
        "response": {
          "error": "ToolException: Error executing tool read_resource: Failed to read resource from table 'empty_table': 1146 (42S02): Table 'user-db.empty_table' doesn't exist"
        },
        "execution_time": 0.18459248542785645,
        "is_functional_test": true
      },
      {
        "case_name": "连接失败时抛出ConnectionError",
        "purpose": "模拟数据库连接失败场景，验证是否会抛出ConnectionError异常",
        "args": {
          "table_name": "users"
        },
        "response": {
          "result": "[{\"id\": 1, \"username\": \"user1\", \"email\": \"updated_email@example.com\", \"age\": 28, \"company_id\": 1, \"created_at\": \"2025-06-30 10:43:59\"}, {\"id\": 2, \"username\": \"user2\", \"email\": \"user2@example.com\", \"age\": 35, \"company_id\": 2, \"created_at\": \"2025-06-30 10:43:59\"}, {\"id\": 3, \"username\": \"user3\", \"email\": \"user3@example.com\", \"age\": 42, \"company_id\": 3, \"created_at\": \"2025-06-30 10:43:59\"}, {\"id\": 4, \"username\": \"user4\", \"email\": \"user4@example.com\", \"age\": 25, \"company_id\": 1, \"created_at\": \"2025-06-30 10:43:59\"}, {\"id\": 5, \"username\": \"user5\", \"email\": \"user5@example.com\", \"age\": 31, \"company_id\": 2, \"created_at\": \"2025-06-30 10:43:59\"}, {\"id\": 6, \"username\": \"user6\", \"email\": \"user6@example.com\", \"age\": 29, \"company_id\": null, \"created_at\": \"2025-06-30 10:43:59\"}, {\"id\": 7, \"username\": \"new...[截断]，共计909字符，剩余109字符"
        },
        "execution_time": 0.2008528709411621,
        "is_functional_test": false
      },
      {
        "case_name": "查询执行失败时抛出RuntimeError",
        "purpose": "测试当数据库查询执行失败时，是否会抛出RuntimeError异常",
        "args": {
          "table_name": "corrupted_table"
        },
        "response": {
          "error": "ToolException: Error executing tool read_resource: Failed to read resource from table 'corrupted_table': 1146 (42S02): Table 'user-db.corrupted_table' doesn't exist"
        },
        "execution_time": 0.17896795272827148,
        "is_functional_test": false
      },
      {
        "case_name": "读取超100条记录的表时只返回前100条",
        "purpose": "验证工具是否最多只返回100条记录，超出部分会被截断",
        "args": {
          "table_name": "large_table"
        },
        "response": {
          "error": "ToolException: Error executing tool read_resource: Failed to read resource from table 'large_table': 1146 (42S02): Table 'user-db.large_table' doesn't exist"
        },
        "execution_time": 0.16901659965515137,
        "is_functional_test": true
      },
      {
        "case_name": "SQL注入尝试安全性测试",
        "purpose": "验证工具是否对参数进行安全过滤，防止SQL注入攻击",
        "args": {
          "table_name": "users; DROP TABLE users;"
        },
        "response": {
          "error": "ToolException: Error executing tool read_resource: Invalid table name: 'users; DROP TABLE users;'. Only alphanumeric characters and underscores are allowed."
        },
        "execution_time": 0.02899765968322754,
        "is_functional_test": false
      },
      {
        "case_name": "使用带中文字符的表名读取数据",
        "purpose": "测试工具是否支持包含非英文字符（如中文）的表名",
        "args": {
          "table_name": "用户信息表"
        },
        "response": {
          "error": "ToolException: Error executing tool read_resource: Invalid table name: '用户信息表'. Only alphanumeric characters and underscores are allowed."
        },
        "execution_time": 0.03931546211242676,
        "is_functional_test": true
      },
      {
        "case_name": "读取带有长表名的表",
        "purpose": "测试工具是否能正确处理接近系统限制长度的表名",
        "args": {
          "table_name": "a_very_long_table_name_that_might_exceed_system_limits_for_table_names"
        },
        "response": {
          "error": "ToolException: Error executing tool read_resource: Failed to read resource from table 'a_very_long_table_name_that_might_exceed_system_limits_for_table_names': 1059 (42000): Identifier name 'a_very_long_table_name_that_might_exceed_system_limits_for_table_names' is too long"
        },
        "execution_time": 0.19307422637939453,
        "is_functional_test": true
      },
      {
        "case_name": "读取跨schema的表数据",
        "purpose": "验证工具是否能正确读取多个schema下的表数据",
        "args": {
          "table_name": "public.users"
        },
        "response": {
          "error": "ToolException: Error executing tool read_resource: Invalid table name: 'public.users'. Only alphanumeric characters and underscores are allowed."
        },
        "execution_time": 0.01999807357788086,
        "is_functional_test": true
      },
      {
        "case_name": "表名为空字符串时抛出ValueError",
        "purpose": "测试当提供的表名为空字符串时，是否会抛出ValueError异常",
        "args": {
          "table_name": ""
        },
        "response": {
          "error": "ToolException: Error executing tool read_resource: Invalid table name: ''. Only alphanumeric characters and underscores are allowed."
        },
        "execution_time": 0.02482914924621582,
        "is_functional_test": false
      }
    ],
    "execute_sql": [
      {
        "case_name": "成功执行SELECT查询获取用户数据",
        "purpose": "验证execute_sql工具能够正确执行SELECT语句并返回结构化结果",
        "args": {
          "sql_query": "SELECT * FROM users WHERE id = %(id)s",
          "params": {
            "id": 1
          }
        },
        "response": {
          "result": "[{\"id\": 1, \"username\": \"user1\", \"email\": \"updated_email@example.com\", \"age\": 28, \"company_id\": 1, \"created_at\": \"2025-06-30 10:43:59\"}]"
        },
        "execution_time": 0.13785791397094727,
        "is_functional_test": true
      },
      {
        "case_name": "执行INSERT语句添加新用户",
        "purpose": "测试execute_sql是否能正确执行INSERT语句并返回受影响行数",
        "args": {
          "sql_query": "INSERT INTO users (name, email) VALUES (%(name)s, %(email)s)",
          "params": {
            "name": "David",
            "email": "david@example.com"
          }
        },
        "response": {
          "error": "ToolException: Error executing tool execute_sql: Failed to execute SQL query: 1054 (42S22): Unknown column 'name' in 'field list'\nQuery: INSERT INTO users (name, email) VALUES (%(name)s, %(email)s)"
        },
        "execution_time": 0.13272738456726074,
        "is_functional_test": true
      },
      {
        "case_name": "执行UPDATE语句更新用户信息",
        "purpose": "验证execute_sql可以正确执行UPDATE语句并返回受影响行数",
        "args": {
          "sql_query": "UPDATE users SET name = %(new_name)s WHERE id = %(id)s",
          "params": {
            "new_name": "Charlie",
            "id": 1
          }
        },
        "response": {
          "error": "ToolException: Error executing tool execute_sql: Failed to execute SQL query: 1054 (42S22): Unknown column 'name' in 'field list'\nQuery: UPDATE users SET name = %(new_name)s WHERE id = %(id)s"
        },
        "execution_time": 0.13399648666381836,
        "is_functional_test": true
      },
      {
        "case_name": "执行DELETE语句删除用户记录",
        "purpose": "测试execute_sql能否正确执行DELETE操作并返回影响行数",
        "args": {
          "sql_query": "DELETE FROM users WHERE id = %(id)s",
          "params": {
            "id": 5
          }
        },
        "response": {
          "error": "ToolException: Error executing tool execute_sql: Failed to execute SQL query: 1451 (23000): Cannot delete or update a parent row: a foreign key constraint fails (`user-db`.`addresses`, CONSTRAINT `addresses_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`))\nQuery: DELETE FROM users WHERE id = %(id)s"
        },
        "execution_time": 0.13617897033691406,
        "is_functional_test": true
      },
      {
        "case_name": "执行SHOW语句列出所有表",
        "purpose": "验证execute_sql支持SHOW语句并能正确返回数据库表列表",
        "args": {
          "sql_query": "SHOW TABLES"
        },
        "response": {
          "result": "[{\"Tables_in_user-db\": \"addresses\"}, {\"Tables_in_user-db\": \"companies\"}, {\"Tables_in_user-db\": \"order_items\"}, {\"Tables_in_user-db\": \"orders\"}, {\"Tables_in_user-db\": \"products\"}, {\"Tables_in_user-db\": \"reviews\"}, {\"Tables_in_user-db\": \"users\"}]"
        },
        "execution_time": 0.13101792335510254,
        "is_functional_test": true
      },
      {
        "case_name": "SQL注入尝试安全性测试",
        "purpose": "验证execute_sql是否对参数进行安全过滤，防止SQL注入攻击",
        "args": {
          "sql_query": "SELECT * FROM users WHERE id = %(id)s; DROP TABLE users;",
          "params": {
            "id": "1 OR 1=1"
          }
        },
        "response": {
          "result": "[{\"id\": 1, \"username\": \"user1\", \"email\": \"updated_email@example.com\", \"age\": 28, \"company_id\": 1, \"created_at\": \"2025-06-30 10:43:59\"}]"
        },
        "execution_time": 0.13698148727416992,
        "is_functional_test": false
      },
      {
        "case_name": "空SQL查询抛出ValueError",
        "purpose": "测试当提供的SQL查询为空字符串时是否会抛出ValueError异常",
        "args": {
          "sql_query": ""
        },
        "response": {
          "error": "ToolException: Error executing tool execute_sql: SQL query cannot be empty and must be a string."
        },
        "execution_time": 0.002998828887939453,
        "is_functional_test": false
      },
      {
        "case_name": "无效SQL语法导致查询失败",
        "purpose": "测试execute_sql在遇到格式错误的SQL语句时是否会抛出RuntimeError",
        "args": {
          "sql_query": "SELEC * FROM users"
        },
        "response": {
          "error": "ToolException: Error executing tool execute_sql: Only SELECT, INSERT, UPDATE, DELETE, and SHOW statements are allowed. Received: SELEC * FROM users..."
        },
        "execution_time": 0.003000974655151367,
        "is_functional_test": false
      },
      {
        "case_name": "连接失败时抛出ConnectionError",
        "purpose": "模拟数据库连接失败场景，验证是否会抛出ConnectionError异常",
        "args": {
          "sql_query": "SELECT * FROM users"
        },
        "response": {
          "result": "[{\"id\": 1, \"username\": \"user1\", \"email\": \"updated_email@example.com\", \"age\": 28, \"company_id\": 1, \"created_at\": \"2025-06-30 10:43:59\"}, {\"id\": 2, \"username\": \"user2\", \"email\": \"user2@example.com\", \"age\": 35, \"company_id\": 2, \"created_at\": \"2025-06-30 10:43:59\"}, {\"id\": 3, \"username\": \"user3\", \"email\": \"user3@example.com\", \"age\": 42, \"company_id\": 3, \"created_at\": \"2025-06-30 10:43:59\"}, {\"id\": 4, \"username\": \"user4\", \"email\": \"user4@example.com\", \"age\": 25, \"company_id\": 1, \"created_at\": \"2025-06-30 10:43:59\"}, {\"id\": 5, \"username\": \"user5\", \"email\": \"user5@example.com\", \"age\": 31, \"company_id\": 2, \"created_at\": \"2025-06-30 10:43:59\"}, {\"id\": 6, \"username\": \"user6\", \"email\": \"user6@example.com\", \"age\": 29, \"company_id\": null, \"created_at\": \"2025-06-30 10:43:59\"}, {\"id\": 7, \"username\": \"new...[截断]，共计909字符，剩余109字符"
        },
        "execution_time": 0.13588500022888184,
        "is_functional_test": false
      },
      {
        "case_name": "执行包含特殊字符的SQL语句",
        "purpose": "测试execute_sql是否能正确处理包含特殊字符（如单引号、双引号）的SQL语句",
        "args": {
          "sql_query": "INSERT INTO users (name, email) VALUES ('O'Connor', \"test@\"example.com)"
        },
        "response": {
          "error": "ToolException: Error executing tool execute_sql: Failed to execute SQL query: 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'Connor', \"test@\"example.com)' at line 1\nQuery: INSERT INTO users (name, email) VALUES ('O'Connor', \"test@\"example.com)"
        },
        "execution_time": 0.134185791015625,
        "is_functional_test": true
      },
      {
        "case_name": "多语言支持测试",
        "purpose": "验证execute_sql是否能正确执行包含非英文字符的SQL语句",
        "args": {
          "sql_query": "INSERT INTO users (name, email) VALUES ('张三', 'zhangsan@example.com')"
        },
        "response": {
          "error": "ToolException: Error executing tool execute_sql: Failed to execute SQL query: 1054 (42S22): Unknown column 'name' in 'field list'\nQuery: INSERT INTO users (name, email) VALUES ('张三', 'zhangsan@example.com')"
        },
        "execution_time": 0.13616442680358887,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 34
}