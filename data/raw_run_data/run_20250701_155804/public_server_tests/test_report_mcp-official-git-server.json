{
  "server_name": "server",
  "parent_dir": "mcp-official-git",
  "report_name": "mcp-official-git-server",
  "server_path": "workspace\\public-mcp-servers\\mcp-official-git\\server.py",
  "timestamp": "2025-07-01T15:58:08.282338",
  "tools": [
    {
      "name": "git_status",
      "description": "Shows the working tree status",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "GitStatus",
        "type": "object"
      }
    },
    {
      "name": "git_diff_unstaged",
      "description": "Shows changes in the working directory that are not yet staged",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "GitDiffUnstaged",
        "type": "object"
      }
    },
    {
      "name": "git_diff_staged",
      "description": "Shows changes that are staged for commit",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "GitDiffStaged",
        "type": "object"
      }
    },
    {
      "name": "git_diff",
      "description": "Shows differences between branches or commits",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "target": {
            "title": "Target",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "target"
        ],
        "title": "GitDiff",
        "type": "object"
      }
    },
    {
      "name": "git_commit",
      "description": "Records changes to the repository",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "message": {
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "message"
        ],
        "title": "GitCommit",
        "type": "object"
      }
    },
    {
      "name": "git_add",
      "description": "Adds file contents to the staging area",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "files": {
            "items": {
              "type": "string"
            },
            "title": "Files",
            "type": "array"
          }
        },
        "required": [
          "repo_path",
          "files"
        ],
        "title": "GitAdd",
        "type": "object"
      }
    },
    {
      "name": "git_reset",
      "description": "Unstages all staged changes",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "GitReset",
        "type": "object"
      }
    },
    {
      "name": "git_log",
      "description": "Shows the commit logs",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "max_count": {
            "default": 10,
            "title": "Max Count",
            "type": "integer"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "GitLog",
        "type": "object"
      }
    },
    {
      "name": "git_create_branch",
      "description": "Creates a new branch from an optional base branch",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          },
          "base_branch": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Base Branch"
          }
        },
        "required": [
          "repo_path",
          "branch_name"
        ],
        "title": "GitCreateBranch",
        "type": "object"
      }
    },
    {
      "name": "git_checkout",
      "description": "Switches branches",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "branch_name"
        ],
        "title": "GitCheckout",
        "type": "object"
      }
    },
    {
      "name": "git_show",
      "description": "Shows the contents of a commit",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "revision": {
            "title": "Revision",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "revision"
        ],
        "title": "GitShow",
        "type": "object"
      }
    },
    {
      "name": "git_init",
      "description": "Initialize a new Git repository",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "GitInit",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "git_init": [
      {
        "case_name": "Initialize Git repository in new directory",
        "purpose": "验证 git_init 能否在指定路径初始化一个新的 Git 仓库",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "response": {
          "result": "Initialized empty Git repository in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git"
        },
        "execution_time": 0.20235800743103027,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git repository with existing directory",
        "purpose": "测试 git_init 是否可以在一个已有文件的目录中初始化 Git 仓库",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Initialized empty Git repository in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "execution_time": 0.1708235740661621,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git repository in empty directory",
        "purpose": "测试 git_init 在空目录中是否可以正常初始化 Git 仓库",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir"
        },
        "response": {
          "result": "Initialized empty Git repository in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir\\.git"
        },
        "execution_time": 0.20000815391540527,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git repository with long path name",
        "purpose": "验证 git_init 是否支持长路径名",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz"
        },
        "response": {
          "result": "Initialized empty Git repository in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz\\.git"
        },
        "execution_time": 0.1715717315673828,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git repository with special characters in path",
        "purpose": "测试 git_init 是否能处理包含特殊字符的路径",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_with_!@#$%^&*()_+"
        },
        "response": {
          "result": "Error initializing repository: [WinError 123] 文件名、目录名或卷标语法不正确。: 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\repo_with_!@#$%^&*()_+'"
        },
        "execution_time": 0.003010988235473633,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git repository on restricted access directory",
        "purpose": "测试 git_init 在无写入权限的目录下是否能安全处理错误",
        "args": {
          "repo_path": "C:\\Program Files\\restricted_dir"
        },
        "response": {
          "result": "Error initializing repository: [WinError 5] 拒绝访问。: 'C:\\\\Program Files\\\\restricted_dir'"
        },
        "execution_time": 0.0019981861114501953,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git repository with invalid path format",
        "purpose": "测试 git_init 对无效路径格式的处理能力",
        "args": {
          "repo_path": "invalid/<path>:name"
        },
        "response": {
          "result": "Error initializing repository: [WinError 123] 文件名、目录名或卷标语法不正确。: 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\workspace\\\\public-mcp-servers\\\\mcp-official-git\\\\invalid\\\\<path>:name'"
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git repository with null repo_path",
        "purpose": "测试 git_init 是否能正确校验空路径参数",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "Initialized empty Git repository in D:\\devWorkspace\\MCPServer-Generator\\workspace\\public-mcp-servers\\mcp-official-git\\.git"
        },
        "execution_time": 0.2121129035949707,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git repository with very short path name",
        "purpose": "测试 git_init 是否支持最短有效路径长度",
        "args": {
          "repo_path": "D:\\a"
        },
        "response": {
          "result": "Initialized empty Git repository in D:\\a\\.git"
        },
        "execution_time": 0.21012377738952637,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git repository with UNC network path",
        "purpose": "测试 git_init 是否支持网络路径（UNC）",
        "args": {
          "repo_path": "\\\\localhost\\shared\\network_repo"
        },
        "response": {
          "result": "Error initializing repository: [WinError 67] 找不到网络名。: '\\\\\\\\localhost\\\\shared\\\\'"
        },
        "execution_time": 4.1508448123931885,
        "is_functional_test": true
      }
    ],
    "git_status": [
      {
        "case_name": "Check status of clean Git repository",
        "purpose": "验证 git_status 在干净的 Git 仓库中是否能正确显示工作树状态",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "response": {
          "result": "Repository status:\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tnew_file.docx\n\t\"new_\\346\\226\\207\\344\\273\\266#1@2025.docx\"\n\t\"\\344\\270\\255\\346\\226\\207\\346\\226\\207\\344\\273\\266\\345\\220\\215.docx\"\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.2811238765716553,
        "is_functional_test": true
      },
      {
        "case_name": "Check status after modifying tracked file",
        "purpose": "测试 git_status 是否能检测到已跟踪文件的修改",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "response": {
          "result": "Repository status:\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tnew_file.docx\n\t\"new_\\346\\226\\207\\344\\273\\266#1@2025.docx\"\n\t\"\\344\\270\\255\\346\\226\\207\\346\\226\\207\\344\\273\\266\\345\\220\\215.docx\"\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.22831296920776367,
        "is_functional_test": true
      },
      {
        "case_name": "Check status with untracked files",
        "purpose": "验证 git_status 是否能正确报告未跟踪文件的存在",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "response": {
          "result": "Repository status:\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tnew_file.docx\n\t\"new_\\346\\226\\207\\344\\273\\266#1@2025.docx\"\n\t\"\\344\\270\\255\\346\\226\\207\\346\\226\\207\\344\\273\\266\\345\\220\\215.docx\"\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.15625643730163574,
        "is_functional_test": true
      },
      {
        "case_name": "Check status in empty directory without git init",
        "purpose": "测试 git_status 在未初始化的空目录中的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir"
        },
        "response": {
          "result": "Repository status:\nOn branch master\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)"
        },
        "execution_time": 0.11878466606140137,
        "is_functional_test": true
      },
      {
        "case_name": "Check status on restricted access directory",
        "purpose": "测试 git_status 在无读取权限的目录下是否能安全处理错误",
        "args": {
          "repo_path": "C:\\Program Files\\restricted_dir"
        },
        "response": {
          "error": "ToolException: C:\\Program Files\\restricted_dir"
        },
        "execution_time": 0.002493143081665039,
        "is_functional_test": false
      },
      {
        "case_name": "Check status with invalid path format",
        "purpose": "测试 git_status 对无效路径格式的处理能力",
        "args": {
          "repo_path": "invalid/<path>:name"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\workspace\\public-mcp-servers\\mcp-official-git\\invalid\\<path>:name"
        },
        "execution_time": 0.0020058155059814453,
        "is_functional_test": false
      },
      {
        "case_name": "Check status with special characters in path",
        "purpose": "测试 git_status 是否能处理包含特殊字符的路径",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_with_!@#$%^&*()_+"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_with_!@#$%^&*()_+"
        },
        "execution_time": 0.0025069713592529297,
        "is_functional_test": false
      },
      {
        "case_name": "Check status with very long path name",
        "purpose": "验证 git_status 是否支持长路径名",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz"
        },
        "response": {
          "result": "Repository status:\nOn branch master\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)"
        },
        "execution_time": 0.11855840682983398,
        "is_functional_test": true
      },
      {
        "case_name": "Check status with UNC network path",
        "purpose": "测试 git_status 是否支持网络路径（UNC）",
        "args": {
          "repo_path": "\\\\localhost\\shared\\network_repo"
        },
        "response": {
          "error": "ToolException: \\\\localhost\\shared\\network_repo"
        },
        "execution_time": 0.003728151321411133,
        "is_functional_test": false
      },
      {
        "case_name": "Check status with null repo_path",
        "purpose": "测试 git_status 是否能正确校验空路径参数",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "Repository status:\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\t.gitignore\n\t.python-version\n\tDockerfile\n\tLICENSE\n\tREADME.md\n\t__init__.py\n\t__main__.py\n\tpyproject.toml\n\tserver.py\n\ttests/\n\tuv.lock\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.17694997787475586,
        "is_functional_test": false
      },
      {
        "case_name": "Check status in existing non-empty git repository",
        "purpose": "验证 git_status 能否在已有提交记录的仓库中正确显示状态",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Repository status:\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\t2023.nlposs-1.24.pdf\n\tResultReport.xml\n\tapp.ico\n\tcode (1).html\n\tempty_dir/\n\texisting_document.docx\n\tmas.png\n\tmulti_merged_output.zip\n\tnature_image.jpg\n\tnew_repo/\n\tvery_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz/\n\t\"\\344\\270\\223\\345\\210\\2511_\\345\\211\\257\\346\\234\\254.docx\"\n\t\"\\345\\237\\216\\345\\270\\202\\351\\201\\223\\350\\267\\257\\347\\256\\241\\347\\220\\206\\346\\235\\241\\344\\276\\213.pdf\"\n\t\"\\345\\267\\245\\344\\270\\232\\351\\227\\256\\347\\255\\224.mp4\"\n\t\"\\346\\231\\272\\350\\203\\275\\350\\275\\257\\344\\273\\266\\345\\267\\245.pptx\"\n\t\"\\346\\234\\272\\346\\242\\260\\350\\256\\276\\345\\244\\207\\347\\262\\276\\347\\256\\200.csv\"\n\t\"\\347\\247\\257\\345\\210\\206.jpg\"\n\t\"\\351\\231\\204\\344\\273\\2661\\357\\274\\2...[截断]，共计1177字符，剩余377字符"
        },
        "execution_time": 0.11451864242553711,
        "is_functional_test": true
      }
    ],
    "git_diff_unstaged": [
      {
        "case_name": "Show unstaged changes in new repository",
        "purpose": "验证 git_diff_unstaged 是否能正确显示新仓库中未暂存的修改",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "response": {
          "result": "Unstaged changes:\n"
        },
        "execution_time": 0.14511847496032715,
        "is_functional_test": true
      },
      {
        "case_name": "Show unstaged changes in existing non-empty repository",
        "purpose": "测试 git_diff_unstaged 在已有提交记录的仓库中是否能正确显示未暂存的更改",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Unstaged changes:\n"
        },
        "execution_time": 0.14220142364501953,
        "is_functional_test": true
      },
      {
        "case_name": "Show unstaged changes with special characters in path",
        "purpose": "测试 git_diff_unstaged 是否能处理包含特殊字符的路径",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_with_!@#$%^&*()_+"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_with_!@#$%^&*()_+"
        },
        "execution_time": 0.003509521484375,
        "is_functional_test": false
      },
      {
        "case_name": "Show unstaged changes in empty directory without git init",
        "purpose": "测试 git_diff_unstaged 在未初始化的空目录中的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir"
        },
        "response": {
          "result": "Unstaged changes:\n"
        },
        "execution_time": 0.12151885032653809,
        "is_functional_test": false
      },
      {
        "case_name": "Show unstaged changes with very long path name",
        "purpose": "验证 git_diff_unstaged 是否支持长路径名",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz"
        },
        "response": {
          "result": "Unstaged changes:\n"
        },
        "execution_time": 0.1474614143371582,
        "is_functional_test": true
      },
      {
        "case_name": "Show unstaged changes with null repo_path",
        "purpose": "测试 git_diff_unstaged 是否能正确校验空路径参数",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "Unstaged changes:\n"
        },
        "execution_time": 0.14857792854309082,
        "is_functional_test": false
      },
      {
        "case_name": "Show unstaged changes on restricted access directory",
        "purpose": "测试 git_diff_unstaged 在无读取权限的目录下是否能安全处理错误",
        "args": {
          "repo_path": "C:\\Program Files\\restricted_dir"
        },
        "response": {
          "error": "ToolException: C:\\Program Files\\restricted_dir"
        },
        "execution_time": 0.002003908157348633,
        "is_functional_test": false
      },
      {
        "case_name": "Show unstaged changes with invalid path format",
        "purpose": "测试 git_diff_unstaged 对无效路径格式的处理能力",
        "args": {
          "repo_path": "invalid/<path>:name"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\workspace\\public-mcp-servers\\mcp-official-git\\invalid\\<path>:name"
        },
        "execution_time": 0.002000093460083008,
        "is_functional_test": false
      },
      {
        "case_name": "Show unstaged changes with UNC network path",
        "purpose": "测试 git_diff_unstaged 是否支持网络路径（UNC）",
        "args": {
          "repo_path": "\\\\localhost\\shared\\network_repo"
        },
        "response": {
          "error": "ToolException: \\\\localhost\\shared\\network_repo"
        },
        "execution_time": 4.12785267829895,
        "is_functional_test": false
      },
      {
        "case_name": "Show unstaged changes in repository with binary files",
        "purpose": "验证 git_diff_unstaged 能否正确显示二进制文件的未暂存更改",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "response": {
          "result": "Unstaged changes:\n"
        },
        "execution_time": 0.1670830249786377,
        "is_functional_test": true
      },
      {
        "case_name": "Show unstaged changes in repository with large number of files",
        "purpose": "测试 git_diff_unstaged 在包含大量文件的仓库中是否能正常工作",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Unstaged changes:\n"
        },
        "execution_time": 0.16281604766845703,
        "is_functional_test": true
      },
      {
        "case_name": "Show unstaged changes in repository with Unicode filenames",
        "purpose": "验证 git_diff_unstaged 是否能正确处理包含Unicode字符的文件名",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "response": {
          "result": "Unstaged changes:\n"
        },
        "execution_time": 0.16472911834716797,
        "is_functional_test": true
      }
    ],
    "git_add": [
      {
        "case_name": "Add single file to staging area",
        "purpose": "验证 git_add 能否将单个文件添加到暂存区",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\new_file.docx"
          ]
        },
        "response": {
          "result": "Files staged successfully"
        },
        "execution_time": 0.010515451431274414,
        "is_functional_test": true
      },
      {
        "case_name": "Add multiple files to staging area",
        "purpose": "测试 git_add 是否能一次添加多个文件到暂存区",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\new_file.docx",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\中文文件名.docx"
          ]
        },
        "response": {
          "result": "Files staged successfully"
        },
        "execution_time": 0.014397144317626953,
        "is_functional_test": true
      },
      {
        "case_name": "Add file with Unicode filename to staging area",
        "purpose": "验证 git_add 是否能正确处理包含Unicode字符的文件名",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\new_文件#1@2025.docx"
          ]
        },
        "response": {
          "result": "Files staged successfully"
        },
        "execution_time": 0.01403355598449707,
        "is_functional_test": true
      },
      {
        "case_name": "Add non-existent file to staging area",
        "purpose": "测试 git_add 在尝试添加不存在的文件时是否能安全处理错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\nonexistent_file.txt"
          ]
        },
        "response": {
          "error": "ToolException: [WinError 2] 系统找不到指定的文件。: 'nonexistent_file.txt'"
        },
        "execution_time": 0.009508848190307617,
        "is_functional_test": false
      },
      {
        "case_name": "Add file to restricted access repository",
        "purpose": "测试 git_add 在无写入权限的目录下是否能安全处理错误",
        "args": {
          "repo_path": "C:\\Program Files\\restricted_dir",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_document.docx"
          ]
        },
        "response": {
          "error": "ToolException: C:\\Program Files\\restricted_dir"
        },
        "execution_time": 0.007969379425048828,
        "is_functional_test": false
      },
      {
        "case_name": "Add file with special characters in path",
        "purpose": "测试 git_add 是否能处理包含特殊字符的路径",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_with_!@#$%^&*()_+",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_with_!@#$%^&*()_+\\testfile.txt"
          ]
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_with_!@#$%^&*()_+"
        },
        "execution_time": 0.012348175048828125,
        "is_functional_test": false
      },
      {
        "case_name": "Add very large number of files to staging area",
        "purpose": "测试 git_add 在一次性添加大量文件时的稳定性",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\2023.nlposs-1.24.pdf",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\app.ico",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\code (1).html",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_document.docx",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\mas.png"
          ]
        },
        "response": {
          "result": "Files staged successfully"
        },
        "execution_time": 0.031052112579345703,
        "is_functional_test": true
      },
      {
        "case_name": "Add file to empty repository",
        "purpose": "验证 git_add 在空仓库中能否正常工作",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir\\testfile.txt"
          ]
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir"
        },
        "execution_time": 0.011507987976074219,
        "is_functional_test": true
      },
      {
        "case_name": "Add file with very long path name",
        "purpose": "验证 git_add 是否支持长路径名",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz\\testfile.txt"
          ]
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz"
        },
        "execution_time": 0.006996631622314453,
        "is_functional_test": true
      },
      {
        "case_name": "Add file with null repo_path",
        "purpose": "测试 git_add 是否能正确校验空路径参数",
        "args": {
          "repo_path": "",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_document.docx"
          ]
        },
        "response": {
          "error": "ToolException: Absolute path 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_document.docx' is not in git repository at 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\workspace\\\\public-mcp-servers\\\\mcp-official-git'"
        },
        "execution_time": 0.008569955825805664,
        "is_functional_test": false
      },
      {
        "case_name": "Add binary file to staging area",
        "purpose": "验证 git_add 是否能正确处理二进制文件",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_image.jpg"
          ]
        },
        "response": {
          "error": "ToolException: Absolute path 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature_image.jpg' is not in git repository at 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_repo'"
        },
        "execution_time": 0.009508848190307617,
        "is_functional_test": true
      },
      {
        "case_name": "Add file from UNC network path",
        "purpose": "测试 git_add 是否支持网络路径（UNC）",
        "args": {
          "repo_path": "\\\\localhost\\shared\\network_repo",
          "files": [
            "\\\\localhost\\shared\\network_repo\\testfile.txt"
          ]
        },
        "response": {
          "error": "ToolException: \\\\localhost\\shared\\network_repo"
        },
        "execution_time": 4.112987041473389,
        "is_functional_test": false
      }
    ],
    "git_diff_staged": [
      {
        "case_name": "Show staged changes in repository with staged files",
        "purpose": "验证 git_diff_staged 能否正确显示已暂存的修改",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "response": {
          "result": "Staged changes:\ndiff --git a/new_file.docx b/new_file.docx\nnew file mode 100644\nindex 0000000..118ca73\ndiff --git \"a/new_\\346\\226\\207\\344\\273\\266#1@2025.docx\" \"b/new_\\346\\226\\207\\344\\273\\266#1@2025.docx\"\nnew file mode 100644\nindex 0000000..118ca73\ndiff --git \"a/\\344\\270\\255\\346\\226\\207\\346\\226\\207\\344\\273\\266\\345\\220\\215.docx\" \"b/\\344\\270\\255\\346\\226\\207\\346\\226\\207\\344\\273\\266\\345\\220\\215.docx\"\nnew file mode 100644\nindex 0000000..118ca73"
        },
        "execution_time": 4.169127941131592,
        "is_functional_test": true
      },
      {
        "case_name": "Show staged changes in clean repository",
        "purpose": "测试 git_diff_staged 在干净的仓库中是否返回空结果",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": true
      },
      {
        "case_name": "Show staged changes with special characters in path",
        "purpose": "测试 git_diff_staged 是否能处理包含特殊字符的路径",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_with_!@#$%^&*()_+"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_with_!@#$%^&*()_+"
        },
        "execution_time": 0.005032539367675781,
        "is_functional_test": false
      },
      {
        "case_name": "Show staged changes on restricted access directory",
        "purpose": "测试 git_diff_staged 在无读取权限的目录下是否能安全处理错误",
        "args": {
          "repo_path": "C:\\Program Files\\restricted_dir"
        },
        "response": {
          "error": "ToolException: C:\\Program Files\\restricted_dir"
        },
        "execution_time": 0.008554458618164062,
        "is_functional_test": false
      },
      {
        "case_name": "Show staged changes with invalid path format",
        "purpose": "测试 git_diff_staged 对无效路径格式的处理能力",
        "args": {
          "repo_path": "invalid/<path>:name"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\workspace\\public-mcp-servers\\mcp-official-git\\invalid\\<path>:name"
        },
        "execution_time": 0.009363174438476562,
        "is_functional_test": false
      },
      {
        "case_name": "Show staged changes with very long path name",
        "purpose": "验证 git_diff_staged 是否支持长路径名",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz"
        },
        "execution_time": 0.005126476287841797,
        "is_functional_test": true
      },
      {
        "case_name": "Show staged changes with null repo_path",
        "purpose": "测试 git_diff_staged 是否能正确校验空路径参数",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "Staged changes:\n"
        },
        "execution_time": 0.28629517555236816,
        "is_functional_test": false
      },
      {
        "case_name": "Show staged changes from UNC network path",
        "purpose": "测试 git_diff_staged 是否支持网络路径（UNC）",
        "args": {
          "repo_path": "\\\\localhost\\shared\\network_repo"
        },
        "response": {
          "error": "ToolException: \\\\localhost\\shared\\network_repo"
        },
        "execution_time": 0.009032249450683594,
        "is_functional_test": false
      },
      {
        "case_name": "Show staged changes in repository with Unicode filenames",
        "purpose": "验证 git_diff_staged 是否能正确处理包含Unicode字符的文件名",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "response": {
          "result": "Staged changes:\ndiff --git a/new_file.docx b/new_file.docx\nnew file mode 100644\nindex 0000000..118ca73\ndiff --git \"a/new_\\346\\226\\207\\344\\273\\266#1@2025.docx\" \"b/new_\\346\\226\\207\\344\\273\\266#1@2025.docx\"\nnew file mode 100644\nindex 0000000..118ca73\ndiff --git \"a/\\344\\270\\255\\346\\226\\207\\346\\226\\207\\344\\273\\266\\345\\220\\215.docx\" \"b/\\344\\270\\255\\346\\226\\207\\346\\226\\207\\344\\273\\266\\345\\220\\215.docx\"\nnew file mode 100644\nindex 0000000..118ca73"
        },
        "execution_time": 3.3013863563537598,
        "is_functional_test": true
      },
      {
        "case_name": "Show staged changes in repository with binary files",
        "purpose": "验证 git_diff_staged 能否正确显示二进制文件的暂存更改",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "response": {
          "result": "Staged changes:\ndiff --git a/new_file.docx b/new_file.docx\nnew file mode 100644\nindex 0000000..118ca73\ndiff --git \"a/new_\\346\\226\\207\\344\\273\\266#1@2025.docx\" \"b/new_\\346\\226\\207\\344\\273\\266#1@2025.docx\"\nnew file mode 100644\nindex 0000000..118ca73\ndiff --git \"a/\\344\\270\\255\\346\\226\\207\\346\\226\\207\\344\\273\\266\\345\\220\\215.docx\" \"b/\\344\\270\\255\\346\\226\\207\\346\\226\\207\\344\\273\\266\\345\\220\\215.docx\"\nnew file mode 100644\nindex 0000000..118ca73"
        },
        "execution_time": 3.53680419921875,
        "is_functional_test": true
      }
    ],
    "git_commit": [
      {
        "case_name": "Commit changes to a Git repository with valid parameters",
        "purpose": "验证 git_commit 是否能正确提交更改到 Git 仓库",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "message": "Initial commit"
        },
        "response": {
          "result": "Changes committed successfully with hash c9192ca7def085a8404daca305f9dac48c41d9d8"
        },
        "execution_time": 0.5234165191650391,
        "is_functional_test": true
      },
      {
        "case_name": "Commit changes with empty message",
        "purpose": "测试 git_commit 在提交信息为空时是否能正确校验参数",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "message": ""
        },
        "response": {
          "result": "Changes committed successfully with hash c8538ac18d2ef6cd3ec6a729e6a8966a7e65eea5"
        },
        "execution_time": 0.48812413215637207,
        "is_functional_test": false
      },
      {
        "case_name": "Commit changes in a restricted access directory",
        "purpose": "测试 git_commit 在无写入权限的目录下是否能安全处理错误",
        "args": {
          "repo_path": "C:\\Program Files\\restricted_dir",
          "message": "Test commit"
        },
        "response": {
          "error": "ToolException: C:\\Program Files\\restricted_dir"
        },
        "execution_time": 0.0020020008087158203,
        "is_functional_test": false
      },
      {
        "case_name": "Commit changes with special characters in path",
        "purpose": "测试 git_commit 是否能处理包含特殊字符的路径",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_with_!@#$%^&*()_+",
          "message": "Commit with special path"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_with_!@#$%^&*()_+"
        },
        "execution_time": 0.0034220218658447266,
        "is_functional_test": false
      },
      {
        "case_name": "Commit changes with very long path name",
        "purpose": "验证 git_commit 是否支持长路径名",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz",
          "message": "Commit with long path"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz"
        },
        "execution_time": 0.004007101058959961,
        "is_functional_test": true
      },
      {
        "case_name": "Commit changes with null repo_path",
        "purpose": "测试 git_commit 是否能正确校验空路径参数",
        "args": {
          "repo_path": "",
          "message": "Null path test"
        },
        "response": {
          "result": "Changes committed successfully with hash a0fa09f9cd4e1f1a13c0eac3d0c66f7f0b12f85b"
        },
        "execution_time": 0.4704911708831787,
        "is_functional_test": false
      },
      {
        "case_name": "Commit changes in a clean repository",
        "purpose": "验证 git_commit 能否在干净的仓库中正常工作",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir",
          "message": "Clean repo commit"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir"
        },
        "execution_time": 0.0029985904693603516,
        "is_functional_test": true
      },
      {
        "case_name": "Commit changes with binary files",
        "purpose": "验证 git_commit 是否能正确提交二进制文件",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "message": "Binary file commit"
        },
        "response": {
          "result": "Changes committed successfully with hash d210957ce1192da2a41df13b82cfb2cd7830dc7a"
        },
        "execution_time": 0.4505960941314697,
        "is_functional_test": true
      },
      {
        "case_name": "Commit changes with Unicode filenames",
        "purpose": "验证 git_commit 是否能正确处理包含Unicode字符的文件名",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "message": "Unicode filename commit"
        },
        "response": {
          "result": "Changes committed successfully with hash 3d89173d944b5ffe883ae25e928b10fb2d53ee69"
        },
        "execution_time": 0.39588069915771484,
        "is_functional_test": true
      },
      {
        "case_name": "Commit changes using UNC network path",
        "purpose": "测试 git_commit 是否支持网络路径（UNC）",
        "args": {
          "repo_path": "\\\\localhost\\shared\\network_repo",
          "message": "UNC path commit"
        },
        "response": {
          "error": "ToolException: \\\\localhost\\shared\\network_repo"
        },
        "execution_time": 4.088757514953613,
        "is_functional_test": false
      }
    ],
    "git_log": [
      {
        "case_name": "Basic git log retrieval with default max count",
        "purpose": "验证 git_log 在使用默认 max_count 参数时能否正确显示提交日志",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "response": {
          "result": "Commit history:\nCommit: 3d89173d944b5ffe883ae25e928b10fb2d53ee69\nAuthor: pouchine\nDate: 2025-07-01 16:03:01+08:00\nMessage: Unicode filename commit\n\nCommit: d210957ce1192da2a41df13b82cfb2cd7830dc7a\nAuthor: pouchine\nDate: 2025-07-01 16:03:01+08:00\nMessage: Binary file commit\n\nCommit: c8538ac18d2ef6cd3ec6a729e6a8966a7e65eea5\nAuthor: pouchine\nDate: 2025-07-01 16:03:00+08:00\nMessage: \n\nCommit: c9192ca7def085a8404daca305f9dac48c41d9d8\nAuthor: pouchine\nDate: 2025-07-01 16:02:59+08:00\nMessage: Initial commit\n"
        },
        "execution_time": 0.9151077270507812,
        "is_functional_test": true
      },
      {
        "case_name": "Git log retrieval with specified max count",
        "purpose": "测试 git_log 是否能根据指定的 max_count 显示相应数量的提交记录",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "max_count": 5
        },
        "response": {
          "result": "Commit history:\nCommit: 3d89173d944b5ffe883ae25e928b10fb2d53ee69\nAuthor: pouchine\nDate: 2025-07-01 16:03:01+08:00\nMessage: Unicode filename commit\n\nCommit: d210957ce1192da2a41df13b82cfb2cd7830dc7a\nAuthor: pouchine\nDate: 2025-07-01 16:03:01+08:00\nMessage: Binary file commit\n\nCommit: c8538ac18d2ef6cd3ec6a729e6a8966a7e65eea5\nAuthor: pouchine\nDate: 2025-07-01 16:03:00+08:00\nMessage: \n\nCommit: c9192ca7def085a8404daca305f9dac48c41d9d8\nAuthor: pouchine\nDate: 2025-07-01 16:02:59+08:00\nMessage: Initial commit\n"
        },
        "execution_time": 1.001286506652832,
        "is_functional_test": true
      },
      {
        "case_name": "Git log on empty repository",
        "purpose": "验证 git_log 在空仓库中是否能优雅地返回空结果",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir"
        },
        "execution_time": 0.009514093399047852,
        "is_functional_test": true
      },
      {
        "case_name": "Git log with special characters in path",
        "purpose": "测试 git_log 是否能处理包含特殊字符的路径",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_with_!@#$%^&*()_+"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_with_!@#$%^&*()_+"
        },
        "execution_time": 0.005510807037353516,
        "is_functional_test": false
      },
      {
        "case_name": "Git log on restricted access directory",
        "purpose": "测试 git_log 在无读取权限的目录下是否能安全处理错误",
        "args": {
          "repo_path": "C:\\Program Files\\restricted_dir"
        },
        "response": {
          "error": "ToolException: C:\\Program Files\\restricted_dir"
        },
        "execution_time": 0.010541915893554688,
        "is_functional_test": false
      },
      {
        "case_name": "Git log with invalid path format",
        "purpose": "测试 git_log 对无效路径格式的处理能力",
        "args": {
          "repo_path": "invalid/<path>:name"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\workspace\\public-mcp-servers\\mcp-official-git\\invalid\\<path>:name"
        },
        "execution_time": 0.012763500213623047,
        "is_functional_test": false
      },
      {
        "case_name": "Git log with very long path name",
        "purpose": "验证 git_log 是否支持长路径名",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz"
        },
        "execution_time": 0.009099483489990234,
        "is_functional_test": true
      },
      {
        "case_name": "Git log with null repo_path",
        "purpose": "测试 git_log 是否能正确校验空路径参数",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "Commit history:\nCommit: a0fa09f9cd4e1f1a13c0eac3d0c66f7f0b12f85b\nAuthor: pouchine\nDate: 2025-07-01 16:03:00+08:00\nMessage: Null path test\n"
        },
        "execution_time": 0.8265864849090576,
        "is_functional_test": false
      },
      {
        "case_name": "Git log from UNC network path",
        "purpose": "测试 git_log 是否支持网络路径（UNC）",
        "args": {
          "repo_path": "\\\\localhost\\shared\\network_repo"
        },
        "response": {
          "error": "ToolException: \\\\localhost\\shared\\network_repo"
        },
        "execution_time": 0.023052692413330078,
        "is_functional_test": false
      },
      {
        "case_name": "Git log in repository with Unicode filenames",
        "purpose": "验证 git_log 是否能正确处理包含Unicode字符的文件名",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "response": {
          "result": "Commit history:\nCommit: 3d89173d944b5ffe883ae25e928b10fb2d53ee69\nAuthor: pouchine\nDate: 2025-07-01 16:03:01+08:00\nMessage: Unicode filename commit\n\nCommit: d210957ce1192da2a41df13b82cfb2cd7830dc7a\nAuthor: pouchine\nDate: 2025-07-01 16:03:01+08:00\nMessage: Binary file commit\n\nCommit: c8538ac18d2ef6cd3ec6a729e6a8966a7e65eea5\nAuthor: pouchine\nDate: 2025-07-01 16:03:00+08:00\nMessage: \n\nCommit: c9192ca7def085a8404daca305f9dac48c41d9d8\nAuthor: pouchine\nDate: 2025-07-01 16:02:59+08:00\nMessage: Initial commit\n"
        },
        "execution_time": 0.7122457027435303,
        "is_functional_test": true
      }
    ],
    "git_diff": [
      {
        "case_name": "Show differences between two branches",
        "purpose": "验证 git_diff 是否能正确显示两个分支之间的差异",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "target": "main..feature"
        },
        "response": {
          "error": "ToolException: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff main..feature\n  stderr: 'fatal: ambiguous argument 'main..feature': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.34700679779052734,
        "is_functional_test": true
      },
      {
        "case_name": "Show differences between two commits",
        "purpose": "测试 git_diff 是否能正确显示两次提交之间的差异",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "target": "abc1234..def5678"
        },
        "response": {
          "error": "ToolException: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff abc1234..def5678\n  stderr: 'fatal: ambiguous argument 'abc1234..def5678': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.2649390697479248,
        "is_functional_test": true
      },
      {
        "case_name": "Show differences with special characters in path",
        "purpose": "测试 git_diff 是否能处理包含特殊字符的路径",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_with_!@#$%^&*()_+",
          "target": "main..feature"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_with_!@#$%^&*()_+"
        },
        "execution_time": 0.007001161575317383,
        "is_functional_test": false
      },
      {
        "case_name": "Show differences on restricted access directory",
        "purpose": "测试 git_diff 在无读取权限的目录下是否能安全处理错误",
        "args": {
          "repo_path": "C:\\Program Files\\restricted_dir",
          "target": "main..feature"
        },
        "response": {
          "error": "ToolException: C:\\Program Files\\restricted_dir"
        },
        "execution_time": 0.010512351989746094,
        "is_functional_test": false
      },
      {
        "case_name": "Show differences with invalid path format",
        "purpose": "测试 git_diff 对无效路径格式的处理能力",
        "args": {
          "repo_path": "invalid/<path>:name",
          "target": "main..feature"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\workspace\\public-mcp-servers\\mcp-official-git\\invalid\\<path>:name"
        },
        "execution_time": 0.008522987365722656,
        "is_functional_test": false
      },
      {
        "case_name": "Show differences with very long path name",
        "purpose": "验证 git_diff 是否支持长路径名",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz",
          "target": "main..feature"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz"
        },
        "execution_time": 0.010029077529907227,
        "is_functional_test": true
      },
      {
        "case_name": "Show differences with null repo_path",
        "purpose": "测试 git_diff 是否能正确校验空路径参数",
        "args": {
          "repo_path": "",
          "target": "main..feature"
        },
        "response": {
          "error": "ToolException: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff main..feature\n  stderr: 'fatal: ambiguous argument 'main..feature': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.3124094009399414,
        "is_functional_test": false
      },
      {
        "case_name": "Show differences from UNC network path",
        "purpose": "测试 git_diff 是否支持网络路径（UNC）",
        "args": {
          "repo_path": "\\\\localhost\\shared\\network_repo",
          "target": "main..feature"
        },
        "response": {
          "error": "ToolException: \\\\localhost\\shared\\network_repo"
        },
        "execution_time": 4.140016317367554,
        "is_functional_test": false
      }
    ],
    "git_create_branch": [
      {
        "case_name": "Create new branch from default base (master)",
        "purpose": "验证 git_create_branch 能否在默认 base_branch 参数下成功创建新分支",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": "feature/new-feature"
        },
        "response": {
          "result": "Created branch 'feature/new-feature' from 'master'"
        },
        "execution_time": 0.260134220123291,
        "is_functional_test": true
      },
      {
        "case_name": "Create new branch from specified base branch",
        "purpose": "测试 git_create_branch 是否能从指定的 base_branch 成功创建新分支",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": "bugfix/issue-123",
          "base_branch": "develop"
        },
        "response": {
          "error": "ToolException: No item found with id 'develop'"
        },
        "execution_time": 0.009507179260253906,
        "is_functional_test": true
      },
      {
        "case_name": "Create branch with invalid repository path",
        "purpose": "测试 git_create_branch 在无效仓库路径下是否能安全处理错误",
        "args": {
          "repo_path": "C:\\invalid\\path\\to\\repo",
          "branch_name": "test-branch"
        },
        "response": {
          "error": "ToolException: C:\\invalid\\path\\to\\repo"
        },
        "execution_time": 0.013513326644897461,
        "is_functional_test": false
      },
      {
        "case_name": "Create branch with special characters in name",
        "purpose": "验证 git_create_branch 是否支持包含特殊字符的分支名",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": "release/v1.0#beta"
        },
        "response": {
          "result": "Created branch 'release/v1.0#beta' from 'master'"
        },
        "execution_time": 0.22405672073364258,
        "is_functional_test": true
      },
      {
        "case_name": "Create branch with very long name",
        "purpose": "测试 git_create_branch 是否能处理非常长的分支名称",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": "very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz_0987654321_zxcvbnm"
        },
        "response": {
          "result": "Created branch 'very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz_0987654321_zxcvbnm' from 'master'"
        },
        "execution_time": 0.3748478889465332,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to create duplicate branch",
        "purpose": "测试 git_create_branch 在尝试创建已存在的分支时是否能正确报错",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": "master"
        },
        "response": {
          "result": "Created branch 'master' from 'master'"
        },
        "execution_time": 0.25812339782714844,
        "is_functional_test": false
      },
      {
        "case_name": "Create branch in restricted access directory",
        "purpose": "测试 git_create_branch 在无写入权限目录下是否能安全处理错误",
        "args": {
          "repo_path": "C:\\Program Files\\restricted_dir",
          "branch_name": "test-branch"
        },
        "response": {
          "error": "ToolException: C:\\Program Files\\restricted_dir"
        },
        "execution_time": 0.01153254508972168,
        "is_functional_test": false
      },
      {
        "case_name": "Create branch with null repository path",
        "purpose": "测试 git_create_branch 是否能正确校验空仓库路径参数",
        "args": {
          "repo_path": "",
          "branch_name": "test-branch"
        },
        "response": {
          "result": "Created branch 'test-branch' from 'master'"
        },
        "execution_time": 0.3253622055053711,
        "is_functional_test": false
      },
      {
        "case_name": "Create branch using UNC network path",
        "purpose": "验证 git_create_branch 是否支持网络路径（UNC）",
        "args": {
          "repo_path": "\\\\localhost\\shared\\network_repo",
          "branch_name": "network-feature"
        },
        "response": {
          "error": "ToolException: \\\\localhost\\shared\\network_repo"
        },
        "execution_time": 0.0183260440826416,
        "is_functional_test": false
      },
      {
        "case_name": "Create branch with Unicode characters in name",
        "purpose": "测试 git_create_branch 是否能正确处理包含Unicode字符的分支名",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": "功能/特性分支"
        },
        "response": {
          "result": "Created branch '功能/特性分支' from 'master'"
        },
        "execution_time": 0.30748510360717773,
        "is_functional_test": true
      }
    ],
    "git_checkout": [
      {
        "case_name": "Checkout existing branch in valid repository",
        "purpose": "验证 git_checkout 能否在有效仓库中成功切换已存在的分支",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": "feature/new-feature"
        },
        "response": {
          "result": "Switched to branch 'feature/new-feature'"
        },
        "execution_time": 0.2164156436920166,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout non-existent branch in valid repository",
        "purpose": "测试 git_checkout 在尝试切换到不存在的分支时是否能安全处理错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": "nonexistent-branch"
        },
        "response": {
          "error": "ToolException: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout nonexistent-branch\n  stderr: 'error: pathspec 'nonexistent-branch' did not match any file(s) known to git'"
        },
        "execution_time": 0.23065757751464844,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout branch with special characters in name",
        "purpose": "测试 git_checkout 是否能正确处理包含特殊字符的分支名",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": "release/v1.0#beta"
        },
        "response": {
          "result": "Switched to branch 'release/v1.0#beta'"
        },
        "execution_time": 0.23035192489624023,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout branch in restricted access directory",
        "purpose": "测试 git_checkout 在无读取权限的目录下是否能安全处理错误",
        "args": {
          "repo_path": "C:\\Program Files\\restricted_dir",
          "branch_name": "master"
        },
        "response": {
          "error": "ToolException: C:\\Program Files\\restricted_dir"
        },
        "execution_time": 0.024363279342651367,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout branch with invalid repository path",
        "purpose": "测试 git_checkout 对无效仓库路径的处理能力",
        "args": {
          "repo_path": "invalid/<path>:name",
          "branch_name": "master"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\workspace\\public-mcp-servers\\mcp-official-git\\invalid\\<path>:name"
        },
        "execution_time": 0.02060389518737793,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout branch with very long name",
        "purpose": "验证 git_checkout 是否支持非常长的分支名称",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": "very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz_0987654321_zxcvbnm"
        },
        "response": {
          "result": "Switched to branch 'very_long_branch_name_1234567890_abcdefghijklmnopqrstuvwxyz_0987654321_zxcvbnm'"
        },
        "execution_time": 0.2677164077758789,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout branch with Unicode characters in name",
        "purpose": "验证 git_checkout 是否能正确处理包含Unicode字符的分支名",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": "功能/特性分支"
        },
        "response": {
          "result": "Switched to branch '功能/特性分支'"
        },
        "execution_time": 0.26837849617004395,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout branch with null repository path",
        "purpose": "测试 git_checkout 是否能正确校验空仓库路径参数",
        "args": {
          "repo_path": "",
          "branch_name": "master"
        },
        "response": {
          "result": "Switched to branch 'master'"
        },
        "execution_time": 0.24366021156311035,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout branch using UNC network path",
        "purpose": "测试 git_checkout 是否支持网络路径（UNC）",
        "args": {
          "repo_path": "\\\\localhost\\shared\\network_repo",
          "branch_name": "feature/network"
        },
        "response": {
          "error": "ToolException: \\\\localhost\\shared\\network_repo"
        },
        "execution_time": 4.137495279312134,
        "is_functional_test": false
      }
    ],
    "git_show": [
      {
        "case_name": "Show contents of a valid commit",
        "purpose": "验证 git_show 能否正确显示指定提交的内容",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "revision": "HEAD"
        },
        "response": {
          "result": "Commit: 3d89173d944b5ffe883ae25e928b10fb2d53ee69\nAuthor: pouchine\nDate: 2025-07-01 16:03:01+08:00\nMessage: Unicode filename commit\n"
        },
        "execution_time": 0.5898330211639404,
        "is_functional_test": true
      },
      {
        "case_name": "Show contents of a non-existent commit",
        "purpose": "测试 git_show 在尝试查看不存在的提交时是否能安全处理错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "revision": "nonexistent-commit-hash"
        },
        "response": {
          "error": "ToolException: Ref 'nonexistent-commit-hash' did not resolve to an object"
        },
        "execution_time": 0.005514860153198242,
        "is_functional_test": false
      },
      {
        "case_name": "Show contents with special characters in repo path",
        "purpose": "测试 git_show 是否能处理包含特殊字符的仓库路径",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_with_!@#$%^&*()_+",
          "revision": "HEAD"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_with_!@#$%^&*()_+"
        },
        "execution_time": 0.002999544143676758,
        "is_functional_test": false
      },
      {
        "case_name": "Show contents on restricted access directory",
        "purpose": "测试 git_show 在无读取权限的目录下是否能安全处理错误",
        "args": {
          "repo_path": "C:\\Program Files\\restricted_dir",
          "revision": "HEAD"
        },
        "response": {
          "error": "ToolException: C:\\Program Files\\restricted_dir"
        },
        "execution_time": 0.0019989013671875,
        "is_functional_test": false
      },
      {
        "case_name": "Show contents with invalid repository path",
        "purpose": "测试 git_show 对无效仓库路径的处理能力",
        "args": {
          "repo_path": "invalid/<path>:name",
          "revision": "HEAD"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\workspace\\public-mcp-servers\\mcp-official-git\\invalid\\<path>:name"
        },
        "execution_time": 0.002332925796508789,
        "is_functional_test": false
      },
      {
        "case_name": "Show contents with very long path name",
        "purpose": "验证 git_show 是否支持长路径名",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz",
          "revision": "HEAD"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz"
        },
        "execution_time": 0.0029990673065185547,
        "is_functional_test": true
      },
      {
        "case_name": "Show contents with null repository path",
        "purpose": "测试 git_show 是否能正确校验空仓库路径参数",
        "args": {
          "repo_path": "",
          "revision": "HEAD"
        },
        "response": {
          "result": "Commit: a0fa09f9cd4e1f1a13c0eac3d0c66f7f0b12f85b\nAuthor: pouchine\nDate: 2025-07-01 16:03:00+08:00\nMessage: Null path test\n"
        },
        "execution_time": 0.7645599842071533,
        "is_functional_test": false
      },
      {
        "case_name": "Show contents using UNC network path",
        "purpose": "测试 git_show 是否支持网络路径（UNC）",
        "args": {
          "repo_path": "\\\\localhost\\shared\\network_repo",
          "revision": "HEAD"
        },
        "response": {
          "error": "ToolException: \\\\localhost\\shared\\network_repo"
        },
        "execution_time": 0.009003877639770508,
        "is_functional_test": false
      },
      {
        "case_name": "Show contents with Unicode branch name",
        "purpose": "验证 git_show 是否能正确处理包含Unicode字符的分支名",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "revision": "功能/特性分支"
        },
        "response": {
          "result": "Commit: 3d89173d944b5ffe883ae25e928b10fb2d53ee69\nAuthor: pouchine\nDate: 2025-07-01 16:03:01+08:00\nMessage: Unicode filename commit\n"
        },
        "execution_time": 0.5909931659698486,
        "is_functional_test": true
      }
    ],
    "git_reset": [
      {
        "case_name": "Reset unstaged changes in valid repository",
        "purpose": "验证 git_reset 是否能在有效仓库中成功取消暂存所有已暂存的更改",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "response": {
          "result": "All staged changes reset"
        },
        "execution_time": 0.29085612297058105,
        "is_functional_test": true
      },
      {
        "case_name": "Reset unstaged changes with special characters in path",
        "purpose": "测试 git_reset 是否能处理包含特殊字符的路径",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_with_!@#$%^&*()_+"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo_with_!@#$%^&*()_+"
        },
        "execution_time": 0.0030012130737304688,
        "is_functional_test": false
      },
      {
        "case_name": "Reset unstaged changes on restricted access directory",
        "purpose": "测试 git_reset 在无写入权限的目录下是否能安全处理错误",
        "args": {
          "repo_path": "C:\\Program Files\\restricted_dir"
        },
        "response": {
          "error": "ToolException: C:\\Program Files\\restricted_dir"
        },
        "execution_time": 0.002516508102416992,
        "is_functional_test": false
      },
      {
        "case_name": "Reset unstaged changes with invalid repository path",
        "purpose": "测试 git_reset 对无效仓库路径的处理能力",
        "args": {
          "repo_path": "invalid/<path>:name"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\workspace\\public-mcp-servers\\mcp-official-git\\invalid\\<path>:name"
        },
        "execution_time": 0.0029997825622558594,
        "is_functional_test": false
      },
      {
        "case_name": "Reset unstaged changes with very long path name",
        "purpose": "验证 git_reset 是否支持长路径名",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_1234567890_abcdefghijklmnopqrstuvwxyz"
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": true
      },
      {
        "case_name": "Reset unstaged changes with null repository path",
        "purpose": "测试 git_reset 是否能正确校验空仓库路径参数",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "All staged changes reset"
        },
        "execution_time": 0.3058907985687256,
        "is_functional_test": false
      },
      {
        "case_name": "Reset unstaged changes using UNC network path",
        "purpose": "测试 git_reset 是否支持网络路径（UNC）",
        "args": {
          "repo_path": "\\\\localhost\\shared\\network_repo"
        },
        "response": {
          "error": "ToolException: \\\\localhost\\shared\\network_repo"
        },
        "execution_time": 4.096741437911987,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 118
}