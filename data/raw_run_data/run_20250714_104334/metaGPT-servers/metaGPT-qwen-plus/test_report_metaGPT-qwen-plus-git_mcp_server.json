{
  "server_name": "git_mcp_server",
  "parent_dir": "metaGPT-qwen-plus",
  "report_name": "metaGPT-qwen-plus-git_mcp_server",
  "server_path": "workspace\\metaGPT-servers\\metaGPT-qwen-plus\\git_mcp_server.py",
  "timestamp": "2025-07-14T10:43:37.698582",
  "tools": [
    {
      "name": "git_init",
      "description": "Initialize a new Git repository.\n\n    Args:\n        path: The directory path where to create the repository.\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_initArguments",
        "type": "object"
      }
    },
    {
      "name": "git_status",
      "description": "Get the status of a Git repository.\n\n    Args:\n        path: Path to the repository.\n\n    Returns:\n        A string containing the status output.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_statusArguments",
        "type": "object"
      }
    },
    {
      "name": "git_add",
      "description": "Add files to the staging area.\n\n    Args:\n        path: Path to the repository.\n        file_pattern: Pattern of files to add (default is all files).\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "file_pattern": {
            "default": ".",
            "title": "File Pattern",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_addArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_unstaged",
      "description": "Show differences in unstaged changes.\n\n    Args:\n        path: Path to the repository.\n\n    Returns:\n        A string containing the diff output.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_diff_unstagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_staged",
      "description": "Show differences in staged changes.\n\n    Args:\n        path: Path to the repository.\n\n    Returns:\n        A string containing the diff output.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_diff_stagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff",
      "description": "Compare two commits or branches.\n\n    Args:\n        path: Path to the repository.\n        commit_range: Range of commits to compare (e.g., 'HEAD~2..HEAD').\n\n    Returns:\n        A string containing the diff output.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "commit_range": {
            "title": "Commit Range",
            "type": "string"
          }
        },
        "required": [
          "path",
          "commit_range"
        ],
        "title": "git_diffArguments",
        "type": "object"
      }
    },
    {
      "name": "git_commit",
      "description": "Commit changes in the repository.\n\n    Args:\n        path: Path to the repository.\n        message: Commit message.\n        author: Optional author name and email (format: 'Name <email>').\n\n    Returns:\n        A string containing the commit hash.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "message": {
            "title": "Message",
            "type": "string"
          },
          "author": {
            "default": null,
            "title": "Author",
            "type": "string"
          }
        },
        "required": [
          "path",
          "message"
        ],
        "title": "git_commitArguments",
        "type": "object"
      }
    },
    {
      "name": "git_reset",
      "description": "Unstage changes in the repository.\n\n    Args:\n        path: Path to the repository.\n        file_path: Optional specific file to unstage. If None, unstages all.\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "file_path": {
            "default": null,
            "title": "File Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_resetArguments",
        "type": "object"
      }
    },
    {
      "name": "git_log",
      "description": "View commit history.\n\n    Args:\n        path: Path to the repository.\n        max_count: Maximum number of commits to show (default: 10).\n\n    Returns:\n        A string containing the commit history.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "max_count": {
            "default": 10,
            "title": "Max Count",
            "type": "integer"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_logArguments",
        "type": "object"
      }
    },
    {
      "name": "git_create_branch",
      "description": "Create a new branch.\n\n    Args:\n        path: Path to the repository.\n        branch_name: Name of the new branch.\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "path",
          "branch_name"
        ],
        "title": "git_create_branchArguments",
        "type": "object"
      }
    },
    {
      "name": "git_checkout",
      "description": "Switch to a different branch.\n\n    Args:\n        path: Path to the repository.\n        branch_name: Name of the branch to switch to.\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "path",
          "branch_name"
        ],
        "title": "git_checkoutArguments",
        "type": "object"
      }
    },
    {
      "name": "git_show",
      "description": "Display details of a specific commit.\n\n    Args:\n        path: Path to the repository.\n        commit_hash: Hash of the commit to show.\n\n    Returns:\n        A string containing the commit details.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "commit_hash": {
            "title": "Commit Hash",
            "type": "string"
          }
        },
        "required": [
          "path",
          "commit_hash"
        ],
        "title": "git_showArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "git_init": [
      {
        "case_name": "Initialize Git Repository in Valid Directory",
        "purpose": "验证是否可以在指定的有效目录中成功初始化一个新的Git仓库",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.26197242736816406,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository in Empty Directory",
        "purpose": "验证在一个空目录中初始化Git仓库的功能是否正常",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_test.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_init: Cmd('git') failed due to: exit code(1)\n  cmdline: git init\n  stderr: 'Failed to initialize repository: Cmd('git') not found due to: NotADirectoryError('[WinError 267] 目录名称无效。')\n  cmdline: git init'"
        },
        "execution_time": 0.0049991607666015625,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Initialize Git in Non-Existent Path",
        "purpose": "验证工具在路径不存在时能否正确抛出ValueError",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_folder"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_folder"
        },
        "execution_time": 0.25536227226257324,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git in Path with Special Characters",
        "purpose": "验证带有特殊字符的路径是否能正确处理或返回合理错误信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test#files@123"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test#files@123"
        },
        "execution_time": 0.27243804931640625,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Attempt to Initialize Git in System Root",
        "purpose": "验证工具是否阻止在系统关键路径（如C盘根目录）中初始化Git仓库",
        "args": {
          "path": "C:\\"
        },
        "response": {
          "result": "Repository initialized at C:\\"
        },
        "execution_time": 0.26806020736694336,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository in Read-Only Directory",
        "purpose": "验证在只读目录中尝试初始化Git仓库是否会正确处理错误",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\present.html"
        },
        "response": {
          "error": "ToolException: Error executing tool git_init: Cmd('git') failed due to: exit code(1)\n  cmdline: git init\n  stderr: 'Failed to initialize repository: Cmd('git') not found due to: NotADirectoryError('[WinError 267] 目录名称无效。')\n  cmdline: git init'"
        },
        "execution_time": 0.006508827209472656,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git in Deeply Nested Valid Path",
        "purpose": "测试工具对深层嵌套有效路径的支持能力",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\subdir1\\subdir2\\subdir3\\subdir4"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\subdir1\\subdir2\\subdir3\\subdir4"
        },
        "execution_time": 0.28046083450317383,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository in Path Containing Unicode",
        "purpose": "验证包含Unicode字符的路径是否支持Git初始化",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文件夹"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文件夹"
        },
        "execution_time": 0.28667116165161133,
        "is_functional_test": false
      }
    ],
    "git_status": [
      {
        "case_name": "Check Git Status in Initialized Repository",
        "purpose": "验证能否正确获取已初始化Git仓库的状态信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\t68078d40e08a19b806665fee_1745325376_auto_driving_system.csv\n\tapp.ico\n\tapp_converted.gif\n\tcs.csv\n\tcustom_output/\n\tempty_content_test.txt\n\tincludeempty.csv\n\tinspector.zip\n\tmerged_output.pdf\n\tmodules.xml\n\tnature.jpeg\n\tnature_converted.jpeg\n\tnonname.html\n\tpaper1.pdf\n\tpresent.html\n\tre2.doc\n\tsample1.pdf\n\tsingle_merged_output.pdf\n\tspreadsheet.csv\n\tswe.pptx\n\ttmp.csv\n\twhole_framework.pdf\n\txue.jpg\n\txue_converted.png\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.30413055419921875,
        "is_functional_test": true
      },
      {
        "case_name": "Check Git Status in Subdirectory Repository",
        "purpose": "验证在子目录中初始化的Git仓库是否能正常返回状态信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\subdir1\\subdir2\\subdir3\\subdir4"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\subdir1\\subdir2\\subdir3\\subdir4"
        },
        "execution_time": 0.007005929946899414,
        "is_functional_test": true
      },
      {
        "case_name": "Check Git Status in Unicode Path Repository",
        "purpose": "验证包含Unicode字符路径的Git仓库能否正确返回状态信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文件夹"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文件夹"
        },
        "execution_time": 0.004047393798828125,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Check Git Status in Non-Repository Directory",
        "purpose": "验证工具是否能正确处理未初始化为Git仓库的目录并抛出合理错误",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_test.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_test.txt"
        },
        "execution_time": 0.005002498626708984,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Check Git Status in System Root",
        "purpose": "验证系统关键路径（如C盘根目录）是否允许执行git status操作",
        "args": {
          "path": "C:\\"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: Cmd('git') failed due to: exit code(128)\n  cmdline: git status\n  stderr: 'fatal: detected dubious ownership in repository at 'C:/'\n'C:/' is owned by:\n\tNT SERVICE/TrustedInstaller (S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)\nbut the current user is:\n\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\nTo add an exception for this directory, call:\n\n\tgit config --global --add safe.directory C:/'"
        },
        "execution_time": 0.3296995162963867,
        "is_functional_test": false
      },
      {
        "case_name": "Check Git Status with Special Characters in Path",
        "purpose": "验证带有特殊字符的路径是否能正确处理或返回合理错误信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles@123"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles@123"
        },
        "execution_time": 0.0060307979583740234,
        "is_functional_test": false
      },
      {
        "case_name": "Check Git Status in Deeply Nested Valid Repository",
        "purpose": "测试工具对深层嵌套且有效Git仓库路径的支持能力",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\subdir1\\subdir2\\subdir3\\subdir4"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\subdir1\\subdir2\\subdir3\\subdir4"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": true
      },
      {
        "case_name": "Check Git Status in Read-Only File Path",
        "purpose": "验证当提供一个只读文件路径而非目录时，工具是否能正确处理错误",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\present.html"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\present.html"
        },
        "execution_time": 0.007517337799072266,
        "is_functional_test": false
      }
    ],
    "git_add": [
      {
        "case_name": "Add All Files to Staging Area in Valid Repository",
        "purpose": "验证在已初始化的Git仓库中是否可以成功将所有文件添加到暂存区（使用默认file_pattern）",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Added '.' to staging area in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.6433258056640625,
        "is_functional_test": true
      },
      {
        "case_name": "Add Specific File Pattern to Staging Area",
        "purpose": "验证是否可以通过指定文件模式（如*.csv）将符合条件的文件添加到暂存区",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_pattern": "*.csv"
        },
        "response": {
          "result": "Added '*.csv' to staging area in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.28156065940856934,
        "is_functional_test": true
      },
      {
        "case_name": "Add Single File to Staging Area",
        "purpose": "验证是否可以将单个具体文件添加到暂存区",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_pattern": "present.html"
        },
        "response": {
          "result": "Added 'present.html' to staging area in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.31356072425842285,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Add Files in Non-Repository Directory",
        "purpose": "验证在未初始化为Git仓库的目录中尝试添加文件是否会抛出合理错误",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_folder",
          "file_pattern": "*.*"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Cmd('git') failed due to: exit code(128)\n  cmdline: git add *.*\n  stderr: 'fatal: pathspec '*.*' did not match any files'"
        },
        "execution_time": 0.2941901683807373,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Attempt to Add Files in System Root",
        "purpose": "验证系统关键路径（如C盘根目录）是否允许执行git add操作",
        "args": {
          "path": "C:\\",
          "file_pattern": "*.*"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Cmd('git') failed due to: exit code(128)\n  cmdline: git add *.*\n  stderr: 'fatal: detected dubious ownership in repository at 'C:/'\n'C:/' is owned by:\n\tNT SERVICE/TrustedInstaller (S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)\nbut the current user is:\n\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\nTo add an exception for this directory, call:\n\n\tgit config --global --add safe.directory C:/'"
        },
        "execution_time": 0.2566490173339844,
        "is_functional_test": false
      },
      {
        "case_name": "Add Files with Special Characters in Path",
        "purpose": "验证带有特殊字符的路径是否能正确处理或返回合理错误信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles@123",
          "file_pattern": "*.*"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles@123"
        },
        "execution_time": 0.004513263702392578,
        "is_functional_test": false
      },
      {
        "case_name": "Add Files in Unicode Path Repository",
        "purpose": "验证包含Unicode字符路径的Git仓库能否正确添加文件",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文件夹",
          "file_pattern": "*.*"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文件夹"
        },
        "execution_time": 0.0040318965911865234,
        "is_functional_test": false
      },
      {
        "case_name": "Add Files in Deeply Nested Valid Repository",
        "purpose": "测试工具对深层嵌套且有效Git仓库路径的支持能力",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\subdir1\\subdir2\\subdir3\\subdir4",
          "file_pattern": "*.*"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\subdir1\\subdir2\\subdir3\\subdir4"
        },
        "execution_time": 0.006512641906738281,
        "is_functional_test": true
      }
    ],
    "git_diff_unstaged": [
      {
        "case_name": "Show Unstaged Diff in Initialized Repository",
        "purpose": "验证在已初始化的Git仓库中能否正确显示未暂存的修改差异信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.19477009773254395,
        "is_functional_test": true
      },
      {
        "case_name": "Show Unstaged Diff in Deeply Nested Valid Repository",
        "purpose": "验证工具是否能正确处理深层嵌套有效路径并显示 unstaged diff",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\subdir1\\subdir2\\subdir3\\subdir4"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\subdir1\\subdir2\\subdir3\\subdir4"
        },
        "execution_time": 0.004433870315551758,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Show Unstaged Diff in Non-Repository Directory",
        "purpose": "验证工具是否能正确处理非Git仓库目录并抛出合理错误",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_test.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_test.txt"
        },
        "execution_time": 0.0035042762756347656,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Attempt to Show Unstaged Diff in System Root",
        "purpose": "验证系统关键路径（如C盘根目录）是否允许执行git diff --cached操作",
        "args": {
          "path": "C:\\"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: Cmd('git') failed due to: exit code(129)\n  cmdline: git diff\n  stderr: 'warning: Not a git repository. Use --no-index to compare two paths outside a working tree\nusage: git diff --no-index [<options>] <path> <path>\n\nDiff output format options\n    -p, --patch           generate patch\n    -s, --no-patch        suppress diff output\n    -u                    generate patch\n    -U, --unified[=<n>]   generate diffs with <n> lines context\n    -W, --[no-]function-context\n                          generate diffs with <n> lines context\n    --raw                 generate the diff in raw format\n    --patch-with-raw      synonym for '-p --raw'\n    --patch-with-stat     synonym for '-p --stat'\n    --numstat             machine friendly --stat\n    --shortstat           output only the last line of --stat\n    -X, --dirstat[=<param1>,<param2>...]\n                          output the distribution of relative amount of changes for each sub-directory\n    --cumulative          synonym for --dirstat=cumulative\n    --dirstat-by-file[=<param1>,<param2>...]\n                          synonym for --dirstat=files,<param1>,<param2>...\n    --check               warn if changes introduce conflict markers or whitespace errors\n    --summary             condensed summary such as creations, renames and mode changes\n    --name-only           show only names of changed files\n    --name-status         show only names and status of changed files\n    --stat[=<width>[,<name-width>[,<count>]]]\n                          generate diffstat\n    --stat-width <width>  generate diffstat with a given width\n    --stat-name-width <width>\n                          generate diffstat with a given name width\n    --stat-graph-width <width>\n                          generate diffstat with a given graph width\n    --stat-count <count>  generate diffstat with limited lines\n    --[no-]compact-summary\n                          generate compact summary in diffstat\n    --binary              output a binary diff that can be applied\n    --[no-]full-index     show full pre- and post-image object names on the \"index\" lines\n    --[no-]color[=<when>] show colored diff\n    --ws-error-highlight <kind>\n                          highlight whitespace errors in the 'context', 'old' or 'new' lines in the diff\n    -z                    do not munge pathnames and use NULs as output field terminators in --raw or --numstat\n    --[no-]abbrev[=<n>]   use <n> digits to display object names\n    --src-prefix <prefix> show the given source prefix instead of \"a/\"\n    --dst-prefix <prefix> show the given destination prefix instead of \"b/\"\n    --line-prefix <prefix>\n                          prepend an additional prefix to every line of output\n    --no-prefix           do not show any source or destination prefix\n    --default-prefix      use default prefixes a/ and b/\n    --inter-hunk-context <n>\n                          show context between diff hunks up to the specified number of lines\n    --output-indicator-new <char>\n                          specify the character to indicate a new line instead of '+'\n    --output-indicator-old <char>\n                          specify the character to indicate an old line instead of '-'\n    --output-indicator-context <char>\n                          specify the character to indicate a context instead of ' '\n\nDiff rename options\n    -B, --break-rewrites[=<n>[/<m>]]\n                          break complete rewrite changes into pairs of delete and create\n    -M, --find-renames[=<n>]\n                          detect renames\n    -D, --irreversible-delete\n                          omit the preimage for deletes\n    -C, --find-copies[=<n>]\n                          detect copies\n    --[no-]find-copies-harder\n                          use unmodified files as source to find copies\n    --no-renames          disable rename detection\n    --[no-]rename-empty   use empty blobs as rename source\n    --[no-]follow         continue listing the history of a file beyond renames\n    -l <n>                prevent rename/copy detection if the number of rename/copy targets exceeds given limit\n\nDiff algorithm options\n    --minimal             produce the smallest possible diff\n    -w, --ignore-all-space\n                          ignore whitespace when comparing lines\n    -b, --ignore-space-change\n                          ignore changes in amount of whitespace\n    --ignore-space-at-eol ignore changes in whitespace at EOL\n    --ignore-cr-at-eol    ignore carrier-return at the end of line\n    --ignore-blank-lines  ignore changes whose lines are all blank\n    -I, --[no-]ignore-matching-lines <regex>\n                          ignore changes whose all lines match <regex>\n    --[no-]indent-heuristic\n                          heuristic to shift diff hunk boundaries for easy reading\n    --patience            generate diff using the \"patience diff\" algorithm\n    --histogram           generate diff using the \"histogram diff\" algorithm\n    --diff-algorithm <algorithm>\n                          choose a diff algorithm\n    --anchored <text>     generate diff using the \"anchored diff\" algorithm\n    --word-diff[=<mode>]  show word diff, using <mode> to delimit changed words\n    --word-diff-regex <regex>\n                          use <regex> to decide what a word is\n    --color-words[=<regex>]\n                          equivalent to --word-diff=color --word-diff-regex=<regex>\n    --[no-]color-moved[=<mode>]\n                          moved lines of code are colored differently\n    --[no-]color-moved-ws <mode>\n                          how white spaces are ignored in --color-moved\n\nOther diff options\n    --[no-]relative[=<prefix>]\n                          when run from subdir, exclude changes outside and show relative paths\n    -a, --[no-]text       treat all files as text\n    -R                    swap two inputs, reverse the diff\n    --[no-]exit-code      exit with 1 if there were differences, 0 otherwise\n    --[no-]quiet          disable all output of the program\n    --[no-]ext-diff       allow an external diff helper to be executed\n    --[no-]textconv       run external text conversion filters when comparing binary files\n    --ignore-submodules[=<when>]\n                          ignore changes to submodules in the diff generation\n    --submodule[=<format>]\n                          specify how differences in submodules are shown\n    --ita-invisible-in-index\n                          hide 'git add -N' entries from the index\n    --ita-visible-in-index\n                          treat 'git add -N' entries as real in the index\n    -S <string>           look for differences that change the number of occurrences of the specified string\n    -G <regex>            look for differences that change the number of occurrences of the specified regex\n    --pickaxe-all         show all changes in the changeset with -S or -G\n    --pickaxe-regex       treat <string> in -S as extended POSIX regular expression\n    -O <file>             control the order in which files appear in the output\n    --rotate-to <path>    show the change in the specified path first\n    --skip-to <path>      skip the output to the specified path\n    --find-object <object-id>\n                          look for differences that change the number of occurrences of the specified object\n    --diff-filter [(A|C|D|M|R|T|U|X|B)...[*]]\n                          select files by diff type\n    --output <file>       output to a specific file\n'"
        },
        "execution_time": 0.21528339385986328,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Diff with Special Characters in Path",
        "purpose": "验证带有特殊字符的路径是否能正确处理或返回合理错误信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles@123"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles@123"
        },
        "execution_time": 0.008521318435668945,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Diff in Unicode Path Repository",
        "purpose": "验证包含Unicode字符路径的Git仓库能否正确返回diff输出",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文件夹"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文件夹"
        },
        "execution_time": 0.007354736328125,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Show Unstaged Diff with Invalid Path",
        "purpose": "验证工具在无效路径下是否能正确抛出ValueError",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_folder"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.2081773281097412,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Diff in Read-Only File Path",
        "purpose": "验证当提供一个只读文件路径而非目录时，工具是否能正确处理错误",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\present.html"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\present.html"
        },
        "execution_time": 0.0049991607666015625,
        "is_functional_test": false
      }
    ],
    "git_commit": [
      {
        "case_name": "Commit Changes in Valid Repository",
        "purpose": "验证在已初始化的Git仓库中是否能正常提交更改",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Initial commit"
        },
        "response": {
          "result": "Committed to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles with message: Initial commit"
        },
        "execution_time": 0.6039388179779053,
        "is_functional_test": true
      },
      {
        "case_name": "Commit with Author Information",
        "purpose": "验证能否使用指定作者信息进行提交",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Commit with author",
          "author": "John Doe <john.doe@example.com>"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Cmd('git') failed due to: exit code(1)\n  cmdline: git commit -m Commit with author --author=John Doe <john.doe@example.com>\n  stdout: 'On branch master\nChanges not staged for commit:\n  (use \"git add/rm <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tdeleted:    empty_content_test.txt\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tbasic_merged_output.pdf\n\tfuzzy_merged_output.pdf\n\tsingle_file_merged_output.pdf\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")'"
        },
        "execution_time": 0.27195000648498535,
        "is_functional_test": true
      },
      {
        "case_name": "Commit in Deeply Nested Valid Repository",
        "purpose": "测试工具对深层嵌套有效Git仓库路径的支持能力",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\subdir1\\subdir2\\subdir3\\subdir4",
          "message": "Nested directory commit"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\subdir1\\subdir2\\subdir3\\subdir4"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": true
      },
      {
        "case_name": "Commit in Unicode Path Repository",
        "purpose": "验证包含Unicode字符路径的Git仓库是否支持提交操作",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文件夹",
          "message": "Unicode path commit"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文件夹"
        },
        "execution_time": 0.004511356353759766,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Commit in Non-Repository Directory",
        "purpose": "验证工具是否能正确处理未初始化为Git仓库的目录并抛出合理错误",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_test.txt",
          "message": "Invalid path commit"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_test.txt"
        },
        "execution_time": 0.007546186447143555,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Attempt to Commit in System Root",
        "purpose": "验证系统关键路径（如C盘根目录）是否允许执行git commit操作",
        "args": {
          "path": "C:\\",
          "message": "Root directory commit"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Cmd('git') failed due to: exit code(128)\n  cmdline: git commit -m Root directory commit\n  stderr: 'fatal: detected dubious ownership in repository at 'C:/'\n'C:/' is owned by:\n\tNT SERVICE/TrustedInstaller (S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)\nbut the current user is:\n\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\nTo add an exception for this directory, call:\n\n\tgit config --global --add safe.directory C:/'"
        },
        "execution_time": 0.28674817085266113,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Empty Message",
        "purpose": "验证工具是否能正确处理空提交信息的情况",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Cmd('git') failed due to: exit code(1)\n  cmdline: git commit -m \n  stdout: 'On branch master\nChanges not staged for commit:\n  (use \"git add/rm <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tdeleted:    empty_content_test.txt\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tbasic_merged_output.pdf\n\tfuzzy_merged_output.pdf\n\tsingle_file_merged_output.pdf\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")'"
        },
        "execution_time": 0.25945472717285156,
        "is_functional_test": false
      },
      {
        "case_name": "Commit in Read-Only File Path",
        "purpose": "验证当提供一个只读文件路径而非目录时，工具是否能正确处理错误",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\present.html",
          "message": "Read-only file path commit attempt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\present.html"
        },
        "execution_time": 0.0050013065338134766,
        "is_functional_test": false
      }
    ],
    "git_diff_staged": [
      {
        "case_name": "Show Staged Changes in Valid Repository",
        "purpose": "验证是否能正确显示有效Git仓库中已暂存的更改差异信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.3700063228607178,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Show Staged Changes in Non-Repository Path",
        "purpose": "验证工具在非Git仓库路径下执行git diff --staged时能否正确抛出错误",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_folder"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.35084962844848633,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes in Deeply Nested Valid Repository",
        "purpose": "测试工具对深层嵌套且有效Git仓库路径的支持能力并获取暂存区差异信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\subdir1\\subdir2\\subdir3\\subdir4"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\subdir1\\subdir2\\subdir3\\subdir4"
        },
        "execution_time": 0.004508256912231445,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt to Show Staged Changes in System Root",
        "purpose": "验证系统关键路径（如C盘根目录）是否允许执行git diff --staged操作",
        "args": {
          "path": "C:\\"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: Cmd('git') failed due to: exit code(129)\n  cmdline: git diff --cached\n  stderr: 'error: unknown option `cached'\nusage: git diff --no-index [<options>] <path> <path>\n\nDiff output format options\n    -p, --patch           generate patch\n    -s, --no-patch        suppress diff output\n    -u                    generate patch\n    -U, --unified[=<n>]   generate diffs with <n> lines context\n    -W, --[no-]function-context\n                          generate diffs with <n> lines context\n    --raw                 generate the diff in raw format\n    --patch-with-raw      synonym for '-p --raw'\n    --patch-with-stat     synonym for '-p --stat'\n    --numstat             machine friendly --stat\n    --shortstat           output only the last line of --stat\n    -X, --dirstat[=<param1>,<param2>...]\n                          output the distribution of relative amount of changes for each sub-directory\n    --cumulative          synonym for --dirstat=cumulative\n    --dirstat-by-file[=<param1>,<param2>...]\n                          synonym for --dirstat=files,<param1>,<param2>...\n    --check               warn if changes introduce conflict markers or whitespace errors\n    --summary             condensed summary such as creations, renames and mode changes\n    --name-only           show only names of changed files\n    --name-status         show only names and status of changed files\n    --stat[=<width>[,<name-width>[,<count>]]]\n                          generate diffstat\n    --stat-width <width>  generate diffstat with a given width\n    --stat-name-width <width>\n                          generate diffstat with a given name width\n    --stat-graph-width <width>\n                          generate diffstat with a given graph width\n    --stat-count <count>  generate diffstat with limited lines\n    --[no-]compact-summary\n                          generate compact summary in diffstat\n    --binary              output a binary diff that can be applied\n    --[no-]full-index     show full pre- and post-image object names on the \"index\" lines\n    --[no-]color[=<when>] show colored diff\n    --ws-error-highlight <kind>\n                          highlight whitespace errors in the 'context', 'old' or 'new' lines in the diff\n    -z                    do not munge pathnames and use NULs as output field terminators in --raw or --numstat\n    --[no-]abbrev[=<n>]   use <n> digits to display object names\n    --src-prefix <prefix> show the given source prefix instead of \"a/\"\n    --dst-prefix <prefix> show the given destination prefix instead of \"b/\"\n    --line-prefix <prefix>\n                          prepend an additional prefix to every line of output\n    --no-prefix           do not show any source or destination prefix\n    --default-prefix      use default prefixes a/ and b/\n    --inter-hunk-context <n>\n                          show context between diff hunks up to the specified number of lines\n    --output-indicator-new <char>\n                          specify the character to indicate a new line instead of '+'\n    --output-indicator-old <char>\n                          specify the character to indicate an old line instead of '-'\n    --output-indicator-context <char>\n                          specify the character to indicate a context instead of ' '\n\nDiff rename options\n    -B, --break-rewrites[=<n>[/<m>]]\n                          break complete rewrite changes into pairs of delete and create\n    -M, --find-renames[=<n>]\n                          detect renames\n    -D, --irreversible-delete\n                          omit the preimage for deletes\n    -C, --find-copies[=<n>]\n                          detect copies\n    --[no-]find-copies-harder\n                          use unmodified files as source to find copies\n    --no-renames          disable rename detection\n    --[no-]rename-empty   use empty blobs as rename source\n    --[no-]follow         continue listing the history of a file beyond renames\n    -l <n>                prevent rename/copy detection if the number of rename/copy targets exceeds given limit\n\nDiff algorithm options\n    --minimal             produce the smallest possible diff\n    -w, --ignore-all-space\n                          ignore whitespace when comparing lines\n    -b, --ignore-space-change\n                          ignore changes in amount of whitespace\n    --ignore-space-at-eol ignore changes in whitespace at EOL\n    --ignore-cr-at-eol    ignore carrier-return at the end of line\n    --ignore-blank-lines  ignore changes whose lines are all blank\n    -I, --[no-]ignore-matching-lines <regex>\n                          ignore changes whose all lines match <regex>\n    --[no-]indent-heuristic\n                          heuristic to shift diff hunk boundaries for easy reading\n    --patience            generate diff using the \"patience diff\" algorithm\n    --histogram           generate diff using the \"histogram diff\" algorithm\n    --diff-algorithm <algorithm>\n                          choose a diff algorithm\n    --anchored <text>     generate diff using the \"anchored diff\" algorithm\n    --word-diff[=<mode>]  show word diff, using <mode> to delimit changed words\n    --word-diff-regex <regex>\n                          use <regex> to decide what a word is\n    --color-words[=<regex>]\n                          equivalent to --word-diff=color --word-diff-regex=<regex>\n    --[no-]color-moved[=<mode>]\n                          moved lines of code are colored differently\n    --[no-]color-moved-ws <mode>\n                          how white spaces are ignored in --color-moved\n\nOther diff options\n    --[no-]relative[=<prefix>]\n                          when run from subdir, exclude changes outside and show relative paths\n    -a, --[no-]text       treat all files as text\n    -R                    swap two inputs, reverse the diff\n    --[no-]exit-code      exit with 1 if there were differences, 0 otherwise\n    --[no-]quiet          disable all output of the program\n    --[no-]ext-diff       allow an external diff helper to be executed\n    --[no-]textconv       run external text conversion filters when comparing binary files\n    --ignore-submodules[=<when>]\n                          ignore changes to submodules in the diff generation\n    --submodule[=<format>]\n                          specify how differences in submodules are shown\n    --ita-invisible-in-index\n                          hide 'git add -N' entries from the index\n    --ita-visible-in-index\n                          treat 'git add -N' entries as real in the index\n    -S <string>           look for differences that change the number of occurrences of the specified string\n    -G <regex>            look for differences that change the number of occurrences of the specified regex\n    --pickaxe-all         show all changes in the changeset with -S or -G\n    --pickaxe-regex       treat <string> in -S as extended POSIX regular expression\n    -O <file>             control the order in which files appear in the output\n    --rotate-to <path>    show the change in the specified path first\n    --skip-to <path>      skip the output to the specified path\n    --find-object <object-id>\n                          look for differences that change the number of occurrences of the specified object\n    --diff-filter [(A|C|D|M|R|T|U|X|B)...[*]]\n                          select files by diff type\n    --output <file>       output to a specific file\n'"
        },
        "execution_time": 0.32413268089294434,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes with Special Characters in Path",
        "purpose": "验证带有特殊字符的路径是否能正确处理或返回合理错误信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles@123"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles@123"
        },
        "execution_time": 0.004118680953979492,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes in Unicode Path Repository",
        "purpose": "验证包含Unicode字符路径的Git仓库能否正确返回暂存区差异信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文件夹"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文件夹"
        },
        "execution_time": 0.004000663757324219,
        "is_functional_test": true
      },
      {
        "case_name": "Check Error Handling for Invalid Path Format",
        "purpose": "验证工具是否能正确识别并拒绝无效或格式错误的路径输入",
        "args": {
          "path": "invalid/path/with/invalid*chars"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: Invalid repository path: invalid/path/with/invalid*chars"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes in Read-Only File Path",
        "purpose": "验证当提供一个只读文件路径而非目录时，工具是否能正确处理错误",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\present.html"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\present.html"
        },
        "execution_time": 0.008535623550415039,
        "is_functional_test": false
      }
    ],
    "git_log": [
      {
        "case_name": "View Commit History in Valid Repository",
        "purpose": "验证能否正确查看已初始化Git仓库的提交历史",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "commit af89289f4ad394d2817a679d20f80b7f67497f98\nAuthor: pouchine <1291980381@qq.com>\nDate:   Mon Jul 14 10:46:08 2025 +0800\n\n    Initial commit"
        },
        "execution_time": 0.33765649795532227,
        "is_functional_test": true
      },
      {
        "case_name": "View Limited Number of Commits Using Default Max Count",
        "purpose": "验证使用默认max_count参数值时能否正确显示限定数量的提交记录",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "commit af89289f4ad394d2817a679d20f80b7f67497f98\nAuthor: pouchine <1291980381@qq.com>\nDate:   Mon Jul 14 10:46:08 2025 +0800\n\n    Initial commit"
        },
        "execution_time": 0.2869114875793457,
        "is_functional_test": true
      },
      {
        "case_name": "View Specific Number of Commits Using Custom Max Count",
        "purpose": "验证自定义max_count参数是否能正确限制提交历史显示的数量",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "max_count": 5
        },
        "response": {
          "result": "commit af89289f4ad394d2817a679d20f80b7f67497f98\nAuthor: pouchine <1291980381@qq.com>\nDate:   Mon Jul 14 10:46:08 2025 +0800\n\n    Initial commit"
        },
        "execution_time": 0.2774190902709961,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to View Commit History in Non-Repository Directory",
        "purpose": "验证工具在非Git仓库目录中调用git_log是否会抛出合理错误",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_test.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_test.txt"
        },
        "execution_time": 0.0049991607666015625,
        "is_functional_test": false
      },
      {
        "case_name": "Check Git Log in Unicode Path Repository",
        "purpose": "验证包含Unicode字符路径的Git仓库能否正确返回提交历史",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文件夹"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文件夹"
        },
        "execution_time": 0.009521961212158203,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt to View Commit History in System Root",
        "purpose": "验证系统关键路径（如C盘根目录）是否允许执行git log操作",
        "args": {
          "path": "C:\\"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Cmd('git') failed due to: exit code(128)\n  cmdline: git log -n 10\n  stderr: 'fatal: detected dubious ownership in repository at 'C:/'\n'C:/' is owned by:\n\tNT SERVICE/TrustedInstaller (S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)\nbut the current user is:\n\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\nTo add an exception for this directory, call:\n\n\tgit config --global --add safe.directory C:/'"
        },
        "execution_time": 0.3169128894805908,
        "is_functional_test": false
      },
      {
        "case_name": "View Commit History with Special Characters in Path",
        "purpose": "验证带有特殊字符的路径是否能正确处理或返回合理错误信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles@123"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles@123"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": false
      },
      {
        "case_name": "View Commit History in Deeply Nested Valid Repository",
        "purpose": "测试工具对深层嵌套且有效Git仓库路径的支持能力",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\subdir1\\subdir2\\subdir3\\subdir4"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\subdir1\\subdir2\\subdir3\\subdir4"
        },
        "execution_time": 0.004515171051025391,
        "is_functional_test": true
      }
    ],
    "git_create_branch": [
      {
        "case_name": "Create New Branch in Initialized Repository",
        "purpose": "验证在已初始化的Git仓库中是否能成功创建一个新分支",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/new-feature"
        },
        "response": {
          "result": "Created branch 'feature/new-feature' in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.20971179008483887,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Create Branch in Non-Repository Path",
        "purpose": "验证当提供的路径不是一个Git仓库时，工具是否能正确抛出错误",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_folder",
          "branch_name": "invalid/path/test"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Cmd('git') failed due to: exit code(128)\n  cmdline: git branch invalid/path/test\n  stderr: 'fatal: not a valid object name: 'master''"
        },
        "execution_time": 0.2006676197052002,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Invalid Name Format",
        "purpose": "验证使用非法格式的分支名称是否会触发合理的错误处理",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "invalid/<branch>*name?"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Cmd('git') failed due to: exit code(128)\n  cmdline: git branch invalid/<branch>*name?\n  stderr: 'fatal: 'invalid/<branch>*name?' is not a valid branch name\nhint: See `man git check-ref-format`\nhint: Disable this message with \"git config advice.refSyntax false\"'"
        },
        "execution_time": 0.20301103591918945,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch in Deeply Nested Valid Repository",
        "purpose": "测试工具对深层嵌套且有效的Git仓库路径的支持能力，并尝试创建分支",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\subdir1\\subdir2\\subdir3\\subdir4",
          "branch_name": "nested/branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\subdir1\\subdir2\\subdir3\\subdir4"
        },
        "execution_time": 0.003998517990112305,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt to Create Branch in System Root",
        "purpose": "验证系统关键路径（如C盘根目录）是否允许执行git branch操作",
        "args": {
          "path": "C:\\",
          "branch_name": "system/root-branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Cmd('git') failed due to: exit code(128)\n  cmdline: git branch system/root-branch\n  stderr: 'fatal: detected dubious ownership in repository at 'C:/'\n'C:/' is owned by:\n\tNT SERVICE/TrustedInstaller (S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)\nbut the current user is:\n\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\nTo add an exception for this directory, call:\n\n\tgit config --global --add safe.directory C:/'"
        },
        "execution_time": 0.259979248046875,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch in Unicode Path Repository",
        "purpose": "验证包含Unicode字符路径的Git仓库能否正确支持分支创建",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文件夹",
          "branch_name": "测试分支"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文件夹"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch Using Special Characters in Branch Name",
        "purpose": "验证带有特殊字符的分支名称是否能被正确处理或返回合理错误信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "branch@name#with!special$chars"
        },
        "response": {
          "result": "Created branch 'branch@name#with!special$chars' in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.2596626281738281,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch in Read-Only File Path",
        "purpose": "验证当提供一个只读文件路径而非目录时，工具是否能正确处理错误",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\present.html",
          "branch_name": "readonly/branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\present.html"
        },
        "execution_time": 0.0060083866119384766,
        "is_functional_test": false
      }
    ],
    "git_checkout": [
      {
        "case_name": "Checkout to Existing Branch in Valid Repository",
        "purpose": "验证能否成功切换到Git仓库中已存在的分支",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "master"
        },
        "response": {
          "result": "Switched to branch 'master' in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.4395418167114258,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout to Nonexistent Branch in Valid Repository",
        "purpose": "验证尝试切换到不存在的分支时是否抛出GitCommandError",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "nonexistent_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout nonexistent_branch\n  stderr: 'error: pathspec 'nonexistent_branch' did not match any file(s) known to git'"
        },
        "execution_time": 0.2824721336364746,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout in Subdirectory Git Repository",
        "purpose": "验证深层嵌套子目录中的Git仓库是否支持分支切换操作",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\subdir1\\subdir2\\subdir3\\subdir4",
          "branch_name": "main"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\subdir1\\subdir2\\subdir3\\subdir4"
        },
        "execution_time": 0.0035021305084228516,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout with Special Characters in Branch Name",
        "purpose": "验证带有特殊字符的分支名是否能正确处理或返回合理错误信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature@name#with!special$chars"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout feature@name#with!special$chars\n  stderr: 'error: pathspec 'feature@name#with!special$chars' did not match any file(s) known to git'"
        },
        "execution_time": 0.3189401626586914,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Checkout in System Root Repository",
        "purpose": "验证系统关键路径（如C盘根目录）中是否允许执行git checkout操作",
        "args": {
          "path": "C:\\",
          "branch_name": "main"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Cmd('git') failed due to: exit code(128)\n  cmdline: git checkout main\n  stderr: 'fatal: detected dubious ownership in repository at 'C:/'\n'C:/' is owned by:\n\tNT SERVICE/TrustedInstaller (S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)\nbut the current user is:\n\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\nTo add an exception for this directory, call:\n\n\tgit config --global --add safe.directory C:/'"
        },
        "execution_time": 0.17969369888305664,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout in Read-Only File Path",
        "purpose": "验证当提供一个只读文件路径而非Git仓库时，工具是否能正确处理错误",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\present.html",
          "branch_name": "master"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\present.html"
        },
        "execution_time": 0.004004716873168945,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout in Unicode Path Repository",
        "purpose": "验证包含Unicode字符路径的Git仓库是否支持分支切换操作",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文件夹",
          "branch_name": "zh_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文件夹"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout in Deeply Nested Valid Repository",
        "purpose": "测试工具对深层嵌套且有效Git仓库路径的支持能力",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\subdir1\\subdir2\\subdir3\\subdir4",
          "branch_name": "nested_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\subdir1\\subdir2\\subdir3\\subdir4"
        },
        "execution_time": 0.006495475769042969,
        "is_functional_test": true
      }
    ],
    "git_diff": [
      {
        "case_name": "Basic Git Diff Between Two Commits",
        "purpose": "验证是否可以成功获取两个提交之间的差异信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_range": "HEAD~2..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff HEAD~2..HEAD\n  stderr: 'fatal: ambiguous argument 'HEAD~2..HEAD': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.15522265434265137,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff with Invalid Path",
        "purpose": "验证工具在提供无效路径时能否正确抛出ValueError",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_folder",
          "commit_range": "HEAD~2..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff HEAD~2..HEAD\n  stderr: 'fatal: ambiguous argument 'HEAD~2..HEAD': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.15629100799560547,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff with Invalid Commit Range",
        "purpose": "验证工具在提交范围格式错误时能否正确处理并返回合理错误",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_range": "invalid-range"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff invalid-range\n  stderr: 'fatal: ambiguous argument 'invalid-range': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.1891765594482422,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff in Repository with Special Characters in Path",
        "purpose": "验证带有特殊字符的路径是否能正确执行git diff操作",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles#with@special!chars",
          "commit_range": "HEAD~1..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles#with@special!chars"
        },
        "execution_time": 0.003353595733642578,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt Git Diff in System Root",
        "purpose": "验证系统关键路径（如C盘根目录）是否允许执行git diff操作",
        "args": {
          "path": "C:\\",
          "commit_range": "HEAD~1..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Cmd('git') failed due to: exit code(129)\n  cmdline: git diff HEAD~1..HEAD\n  stderr: 'warning: Not a git repository. Use --no-index to compare two paths outside a working tree\nusage: git diff --no-index [<options>] <path> <path>\n\nDiff output format options\n    -p, --patch           generate patch\n    -s, --no-patch        suppress diff output\n    -u                    generate patch\n    -U, --unified[=<n>]   generate diffs with <n> lines context\n    -W, --[no-]function-context\n                          generate diffs with <n> lines context\n    --raw                 generate the diff in raw format\n    --patch-with-raw      synonym for '-p --raw'\n    --patch-with-stat     synonym for '-p --stat'\n    --numstat             machine friendly --stat\n    --shortstat           output only the last line of --stat\n    -X, --dirstat[=<param1>,<param2>...]\n                          output the distribution of relative amount of changes for each sub-directory\n    --cumulative          synonym for --dirstat=cumulative\n    --dirstat-by-file[=<param1>,<param2>...]\n                          synonym for --dirstat=files,<param1>,<param2>...\n    --check               warn if changes introduce conflict markers or whitespace errors\n    --summary             condensed summary such as creations, renames and mode changes\n    --name-only           show only names of changed files\n    --name-status         show only names and status of changed files\n    --stat[=<width>[,<name-width>[,<count>]]]\n                          generate diffstat\n    --stat-width <width>  generate diffstat with a given width\n    --stat-name-width <width>\n                          generate diffstat with a given name width\n    --stat-graph-width <width>\n                          generate diffstat with a given graph width\n    --stat-count <count>  generate diffstat with limited lines\n    --[no-]compact-summary\n                          generate compact summary in diffstat\n    --binary              output a binary diff that can be applied\n    --[no-]full-index     show full pre- and post-image object names on the \"index\" lines\n    --[no-]color[=<when>] show colored diff\n    --ws-error-highlight <kind>\n                          highlight whitespace errors in the 'context', 'old' or 'new' lines in the diff\n    -z                    do not munge pathnames and use NULs as output field terminators in --raw or --numstat\n    --[no-]abbrev[=<n>]   use <n> digits to display object names\n    --src-prefix <prefix> show the given source prefix instead of \"a/\"\n    --dst-prefix <prefix> show the given destination prefix instead of \"b/\"\n    --line-prefix <prefix>\n                          prepend an additional prefix to every line of output\n    --no-prefix           do not show any source or destination prefix\n    --default-prefix      use default prefixes a/ and b/\n    --inter-hunk-context <n>\n                          show context between diff hunks up to the specified number of lines\n    --output-indicator-new <char>\n                          specify the character to indicate a new line instead of '+'\n    --output-indicator-old <char>\n                          specify the character to indicate an old line instead of '-'\n    --output-indicator-context <char>\n                          specify the character to indicate a context instead of ' '\n\nDiff rename options\n    -B, --break-rewrites[=<n>[/<m>]]\n                          break complete rewrite changes into pairs of delete and create\n    -M, --find-renames[=<n>]\n                          detect renames\n    -D, --irreversible-delete\n                          omit the preimage for deletes\n    -C, --find-copies[=<n>]\n                          detect copies\n    --[no-]find-copies-harder\n                          use unmodified files as source to find copies\n    --no-renames          disable rename detection\n    --[no-]rename-empty   use empty blobs as rename source\n    --[no-]follow         continue listing the history of a file beyond renames\n    -l <n>                prevent rename/copy detection if the number of rename/copy targets exceeds given limit\n\nDiff algorithm options\n    --minimal             produce the smallest possible diff\n    -w, --ignore-all-space\n                          ignore whitespace when comparing lines\n    -b, --ignore-space-change\n                          ignore changes in amount of whitespace\n    --ignore-space-at-eol ignore changes in whitespace at EOL\n    --ignore-cr-at-eol    ignore carrier-return at the end of line\n    --ignore-blank-lines  ignore changes whose lines are all blank\n    -I, --[no-]ignore-matching-lines <regex>\n                          ignore changes whose all lines match <regex>\n    --[no-]indent-heuristic\n                          heuristic to shift diff hunk boundaries for easy reading\n    --patience            generate diff using the \"patience diff\" algorithm\n    --histogram           generate diff using the \"histogram diff\" algorithm\n    --diff-algorithm <algorithm>\n                          choose a diff algorithm\n    --anchored <text>     generate diff using the \"anchored diff\" algorithm\n    --word-diff[=<mode>]  show word diff, using <mode> to delimit changed words\n    --word-diff-regex <regex>\n                          use <regex> to decide what a word is\n    --color-words[=<regex>]\n                          equivalent to --word-diff=color --word-diff-regex=<regex>\n    --[no-]color-moved[=<mode>]\n                          moved lines of code are colored differently\n    --[no-]color-moved-ws <mode>\n                          how white spaces are ignored in --color-moved\n\nOther diff options\n    --[no-]relative[=<prefix>]\n                          when run from subdir, exclude changes outside and show relative paths\n    -a, --[no-]text       treat all files as text\n    -R                    swap two inputs, reverse the diff\n    --[no-]exit-code      exit with 1 if there were differences, 0 otherwise\n    --[no-]quiet          disable all output of the program\n    --[no-]ext-diff       allow an external diff helper to be executed\n    --[no-]textconv       run external text conversion filters when comparing binary files\n    --ignore-submodules[=<when>]\n                          ignore changes to submodules in the diff generation\n    --submodule[=<format>]\n                          specify how differences in submodules are shown\n    --ita-invisible-in-index\n                          hide 'git add -N' entries from the index\n    --ita-visible-in-index\n                          treat 'git add -N' entries as real in the index\n    -S <string>           look for differences that change the number of occurrences of the specified string\n    -G <regex>            look for differences that change the number of occurrences of the specified regex\n    --pickaxe-all         show all changes in the changeset with -S or -G\n    --pickaxe-regex       treat <string> in -S as extended POSIX regular expression\n    -O <file>             control the order in which files appear in the output\n    --rotate-to <path>    show the change in the specified path first\n    --skip-to <path>      skip the output to the specified path\n    --find-object <object-id>\n                          look for differences that change the number of occurrences of the specified object\n    --diff-filter [(A|C|D|M|R|T|U|X|B)...[*]]\n                          select files by diff type\n    --output <file>       output to a specific file\n'"
        },
        "execution_time": 0.23973608016967773,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff in Deeply Nested Valid Repository",
        "purpose": "测试工具对深层嵌套且有效Git仓库路径的支持能力",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\subdir1\\subdir2\\subdir3\\subdir4",
          "commit_range": "HEAD~1..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\subdir1\\subdir2\\subdir3\\subdir4"
        },
        "execution_time": 0.004794597625732422,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff with Unicode Path Repository",
        "purpose": "验证包含Unicode字符路径的Git仓库能否正确执行diff操作",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文件夹",
          "commit_range": "HEAD~1..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文件夹"
        },
        "execution_time": 0.006949663162231445,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff on Read-Only File Path",
        "purpose": "验证当提供一个只读文件路径而非目录时，工具是否能正确处理错误",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\present.html",
          "commit_range": "HEAD~1..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\present.html"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": false
      }
    ],
    "git_show": [
      {
        "case_name": "Display Details of a Valid Commit",
        "purpose": "验证能否成功显示指定有效提交的详细信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "68078d40e08a19b806665fee"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: Cmd('git') failed due to: exit code(128)\n  cmdline: git show 68078d40e08a19b806665fee\n  stderr: 'fatal: ambiguous argument '68078d40e08a19b806665fee': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.2609283924102783,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Show Commit in Non-Repository Directory",
        "purpose": "验证在未初始化为Git仓库的目录中调用git_show是否能正确抛出错误",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_folder",
          "commit_hash": "abc1234"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: Cmd('git') failed due to: exit code(128)\n  cmdline: git show abc1234\n  stderr: 'fatal: ambiguous argument 'abc1234': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.17271137237548828,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit with Invalid Hash Format",
        "purpose": "验证使用无效格式的commit_hash参数时工具是否能正确处理错误",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "invalid_hash_format"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: Cmd('git') failed due to: exit code(128)\n  cmdline: git show invalid_hash_format\n  stderr: 'fatal: ambiguous argument 'invalid_hash_format': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.28307223320007324,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Show Commit in System Root",
        "purpose": "验证系统关键路径（如C盘根目录）是否允许执行git show操作",
        "args": {
          "path": "C:\\",
          "commit_hash": "abc1234"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: Cmd('git') failed due to: exit code(128)\n  cmdline: git show abc1234\n  stderr: 'fatal: detected dubious ownership in repository at 'C:/'\n'C:/' is owned by:\n\tNT SERVICE/TrustedInstaller (S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)\nbut the current user is:\n\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\nTo add an exception for this directory, call:\n\n\tgit config --global --add safe.directory C:/'"
        },
        "execution_time": 0.21248173713684082,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit with Special Characters in Path",
        "purpose": "验证带有特殊字符的路径是否能正确处理或返回合理错误信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles@123",
          "commit_hash": "abc1234"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles@123"
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": true
      },
      {
        "case_name": "Show Commit in Unicode Path Repository",
        "purpose": "验证包含Unicode字符路径的Git仓库能否正确返回提交详情",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文件夹",
          "commit_hash": "abc1234"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文件夹"
        },
        "execution_time": 0.003509998321533203,
        "is_functional_test": true
      },
      {
        "case_name": "Show Commit in Deeply Nested Valid Repository",
        "purpose": "测试工具对深层嵌套且有效Git仓库路径的支持能力",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\subdir1\\subdir2\\subdir3\\subdir4",
          "commit_hash": "abc1234"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\subdir1\\subdir2\\subdir3\\subdir4"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": true
      },
      {
        "case_name": "Show Commit Using Read-Only File Path",
        "purpose": "验证当提供一个只读文件路径而非目录时，工具是否能正确处理错误",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\present.html",
          "commit_hash": "abc1234"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\present.html"
        },
        "execution_time": 0.0035097599029541016,
        "is_functional_test": false
      }
    ],
    "git_reset": [
      {
        "case_name": "Unstage All Changes in Valid Repository",
        "purpose": "验证在有效Git仓库中不指定文件时，能否成功取消暂存所有更改",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Unstaged all changes in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.3551366329193115,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage Specific File in Staged Changes",
        "purpose": "验证能否成功取消暂存指定的特定文件",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\present.html"
        },
        "response": {
          "result": "Unstaged changes for D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\present.html in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.2570016384124756,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Unstage in Non-Repository Path",
        "purpose": "验证工具是否能正确处理无效Git仓库路径并抛出合理错误",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_folder"
        },
        "response": {
          "result": "Unstaged all changes in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_folder"
        },
        "execution_time": 0.20743799209594727,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage with Invalid File Path",
        "purpose": "验证当提供的文件路径不存在时，工具是否能正确处理错误",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: Cmd('git') failed due to: exit code(128)\n  cmdline: git reset D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt\n  stderr: 'fatal: invalid object name 'D'.'"
        },
        "execution_time": 0.19055509567260742,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Attempt to Unstage in System Root",
        "purpose": "验证系统关键路径（如C盘根目录）是否禁止执行git reset操作",
        "args": {
          "path": "C:\\",
          "file_path": "important_system_file.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: Cmd('git') failed due to: exit code(128)\n  cmdline: git reset important_system_file.txt\n  stderr: 'fatal: detected dubious ownership in repository at 'C:/'\n'C:/' is owned by:\n\tNT SERVICE/TrustedInstaller (S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)\nbut the current user is:\n\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\nTo add an exception for this directory, call:\n\n\tgit config --global --add safe.directory C:/'"
        },
        "execution_time": 0.1705341339111328,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage in Path with Special Characters",
        "purpose": "验证带有特殊字符的路径是否能正确处理或返回合理错误信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles@123",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles@123\\sample1.pdf"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles@123"
        },
        "execution_time": 0.003512859344482422,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage in Deeply Nested Valid Repository",
        "purpose": "测试工具对深层嵌套且有效Git仓库路径的支持能力",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\subdir1\\subdir2\\subdir3\\subdir4",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\subdir1\\subdir2\\subdir3\\subdir4\\sample1.pdf"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\subdir1\\subdir2\\subdir3\\subdir4"
        },
        "execution_time": 0.00600123405456543,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage in Unicode Path Repository",
        "purpose": "验证包含Unicode字符路径的Git仓库能否正确执行git reset操作",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文件夹",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文件夹\\test.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文文件夹"
        },
        "execution_time": 0.0032448768615722656,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 96
}