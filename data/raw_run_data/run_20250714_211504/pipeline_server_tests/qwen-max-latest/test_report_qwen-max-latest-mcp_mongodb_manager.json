{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "qwen-max-latest-mcp_mongodb_manager",
  "server_path": "workspace/pipeline-output-servers/qwen-max-latest/mcp_mongodb_manager/refined/server.py",
  "timestamp": "2025-07-14T21:19:48.760030",
  "tools": [
    {
      "name": "mcp_list_databases",
      "description": "\n    Lists all available databases in the MongoDB instance.\n\n    Returns:\n        A JSON-formatted string containing a list of database names.\n\n    Example:\n        mcp_list_databases()\n        => '[\"admin\", \"config\", \"local\"]'\n    ",
      "args_schema": {
        "properties": {},
        "title": "mcp_list_databasesArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_list_collections",
      "description": "\n    Lists all collections within a specified database in the MongoDB instance.\n\n    Args:\n        database_name: The name of the database whose collections need to be listed.\n\n    Returns:\n        A JSON-formatted string containing a list of collection names.\n\n    Raises:\n        ValueError: If the database name is invalid.\n        RuntimeError: If an error occurs while listing collections.\n\n    Example:\n        mcp_list_collections(database_name=\"test_db\")\n        => '[\"users\", \"products\"]'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          }
        },
        "required": [
          "database_name"
        ],
        "title": "mcp_list_collectionsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_insert_document",
      "description": "\n    Inserts a new document into a specified collection within a specified database.\n\n    Args:\n        database_name: The name of the target database.\n        collection_name: The name of the target collection.\n        document: The document to insert, represented as a Python dictionary.\n\n    Returns:\n        A JSON-formatted string containing the ID of the newly inserted document.\n\n    Raises:\n        ValueError: If any argument is invalid.\n        RuntimeError: If an error occurs during document insertion.\n\n    Example:\n        mcp_insert_document(\n            database_name=\"test_db\",\n            collection_name=\"users\",\n            document={\"name\": \"Alice\", \"age\": 30}\n        )\n        => '\"65a4f8b9d3c5f2e4d8e9f0a1\"'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "document": {
            "title": "Document",
            "type": "object"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "document"
        ],
        "title": "mcp_insert_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_find_documents",
      "description": "\n    Queries documents from a specified collection within a specified database, with optional projection and result limit.\n\n    Args:\n        database_name: The name of the target database.\n        collection_name: The name of the target collection.\n        query: A query filter represented as a Python dictionary. Defaults to None.\n        projection: Specifies fields to include or exclude in the returned documents. Defaults to None.\n        limit: Limits the number of documents returned. Defaults to None.\n\n    Returns:\n        A JSON-formatted string containing a list of matching documents.\n\n    Raises:\n        ValueError: If any argument is invalid.\n        RuntimeError: If an error occurs during querying.\n\n    Example:\n        mcp_find_documents(\n            database_name=\"test_db\",\n            collection_name=\"users\",\n            query={\"age\": {\"$gt\": 25}},\n            projection={\"_id\": 0, \"name\": 1},\n            limit=2\n        )\n        => '[{\"name\": \"Alice\"}, {\"name\": \"Bob\"}]'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "default": null,
            "title": "Query",
            "type": "object"
          },
          "projection": {
            "default": null,
            "title": "Projection",
            "type": "object"
          },
          "limit": {
            "default": null,
            "title": "Limit",
            "type": "integer"
          }
        },
        "required": [
          "database_name",
          "collection_name"
        ],
        "title": "mcp_find_documentsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_update_document",
      "description": "\n    Updates one or multiple documents in a specified collection within a specified database.\n\n    Args:\n        database_name: The name of the target database.\n        collection_name: The name of the target collection.\n        filter_query: A filter to identify the documents to update.\n        update_data: The update operations to apply, represented as a Python dictionary.\n        multi: If True, updates all matching documents; otherwise, updates only the first match.\n\n    Returns:\n        A JSON-formatted string containing the number of documents modified.\n\n    Raises:\n        ValueError: If any argument is invalid.\n        RuntimeError: If an error occurs during updating.\n\n    Example:\n        mcp_update_document(\n            database_name=\"test_db\",\n            collection_name=\"users\",\n            filter_query={\"age\": {\"$lt\": 30}},\n            update_data={\"$set\": {\"status\": \"inactive\"}},\n            multi=True\n        )\n        => '3'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "filter_query": {
            "title": "Filter Query",
            "type": "object"
          },
          "update_data": {
            "title": "Update Data",
            "type": "object"
          },
          "multi": {
            "title": "Multi",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "filter_query",
          "update_data",
          "multi"
        ],
        "title": "mcp_update_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_delete_document",
      "description": "\n    Deletes one or multiple documents from a specified collection within a specified database.\n\n    Args:\n        database_name: The name of the target database.\n        collection_name: The name of the target collection.\n        filter_query: A filter to identify the documents to delete.\n        multi: If True, deletes all matching documents; otherwise, deletes only the first match.\n\n    Returns:\n        A JSON-formatted string containing the number of documents deleted.\n\n    Raises:\n        ValueError: If any argument is invalid.\n        RuntimeError: If an error occurs during deletion.\n\n    Example:\n        mcp_delete_document(\n            database_name=\"test_db\",\n            collection_name=\"users\",\n            filter_query={\"status\": \"inactive\"},\n            multi=True\n        )\n        => '2'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "filter_query": {
            "title": "Filter Query",
            "type": "object"
          },
          "multi": {
            "title": "Multi",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "filter_query",
          "multi"
        ],
        "title": "mcp_delete_documentArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "mcp_list_databases": [
      {
        "case_name": "List Databases Successfully",
        "purpose": "验证工具能够成功列出 MongoDB 实例中的所有数据库名称",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"new_db\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.006999969482421875,
        "is_functional_test": true
      },
      {
        "case_name": "List Databases with No Databases",
        "purpose": "验证当 MongoDB 实例中没有数据库时，工具是否能正确返回空数组",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"new_db\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.008000373840332031,
        "is_functional_test": true
      },
      {
        "case_name": "List Databases with Special Characters in Names",
        "purpose": "验证工具是否能正确处理包含特殊字符的数据库名称",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"new_db\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.004999637603759766,
        "is_functional_test": true
      },
      {
        "case_name": "List Databases with Long Names",
        "purpose": "验证工具是否能处理数据库名称长度较大的情况",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"new_db\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.009006500244140625,
        "is_functional_test": true
      },
      {
        "case_name": "List Databases with Unicode Names",
        "purpose": "验证工具是否能处理包含 Unicode 字符的数据库名称",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"new_db\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": true
      },
      {
        "case_name": "List Databases when MongoDB is Unreachable",
        "purpose": "验证当 MongoDB 实例无法连接时，工具是否能正确处理错误",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"new_db\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": false
      },
      {
        "case_name": "List Databases with Invalid Permissions",
        "purpose": "验证当用户没有权限访问数据库列表时，工具是否能返回安全错误",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"new_db\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.0039980411529541016,
        "is_functional_test": false
      },
      {
        "case_name": "List Huge Number of Databases",
        "purpose": "验证工具在数据库数量极大时的边界处理能力",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"new_db\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.006000518798828125,
        "is_functional_test": false
      }
    ],
    "mcp_list_collections": [
      {
        "case_name": "List Collections Successfully",
        "purpose": "验证工具能够成功列出指定数据库中的所有集合名称",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "[\"a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\", \"new_collection\", \"test_collection\", \"empty_docs\", \"invalid/collection*name\", \"user_profiles\", \"long_key_collection\", \"test_collection'; DROP COLLECTION test_collection;--\", \"large_data\", \"special_chars_collection\", \"binary_data_collection\", \"nonexistent_collection\", \"a_very_long_collection_name_that_exceeds_normal_limits_and_might_cause_issues\", \"users\"]"
        },
        "execution_time": 0.004998922348022461,
        "is_functional_test": true
      },
      {
        "case_name": "List Collections from Database with No Collections",
        "purpose": "验证当指定数据库中没有集合时，工具是否能正确返回空数组",
        "args": {
          "database_name": "empty_db"
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.0060045719146728516,
        "is_functional_test": true
      },
      {
        "case_name": "List Collections with Special Characters in Names",
        "purpose": "验证工具是否能正确处理包含特殊字符的集合名称",
        "args": {
          "database_name": "db@#_测试"
        },
        "response": {
          "result": "[\"test_collection\", \"special_chars_collection\", \"new_collection\", \"users\"]"
        },
        "execution_time": 0.004509687423706055,
        "is_functional_test": true
      },
      {
        "case_name": "List Collections with Unicode Names",
        "purpose": "验证工具是否能处理包含 Unicode 字符的集合名称",
        "args": {
          "database_name": "智能软件工"
        },
        "response": {
          "result": "[\"\\u7528\\u6237\\u4fe1\\u606f\"]"
        },
        "execution_time": 0.0040013790130615234,
        "is_functional_test": true
      },
      {
        "case_name": "List Collections with Invalid Database Name",
        "purpose": "验证当传入无效的数据库名称时，工具是否抛出 ValueError",
        "args": {
          "database_name": ""
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_list_collections: Invalid database name: ''. Must be a non-empty string."
        },
        "execution_time": 0.006001949310302734,
        "is_functional_test": false
      },
      {
        "case_name": "List Collections from Non-Existent Database",
        "purpose": "验证当指定数据库不存在时，工具是否能正确处理错误",
        "args": {
          "database_name": "does_not_exist_db"
        },
        "response": {
          "result": "[\"new_collection\", \"test_collection\"]"
        },
        "execution_time": 0.00751948356628418,
        "is_functional_test": false
      },
      {
        "case_name": "List Collections when MongoDB is Unreachable",
        "purpose": "验证当 MongoDB 实例无法连接时，工具是否能正确处理运行时错误",
        "args": {
          "database_name": "offline_db"
        },
        "response": {
          "result": "[\"users\"]"
        },
        "execution_time": 0.009002208709716797,
        "is_functional_test": false
      },
      {
        "case_name": "List Huge Number of Collections",
        "purpose": "验证工具在集合数量极大时的边界处理能力",
        "args": {
          "database_name": "large_db"
        },
        "response": {
          "result": "[\"long_key_collection\", \"large_collection\"]"
        },
        "execution_time": 0.004997968673706055,
        "is_functional_test": false
      }
    ],
    "mcp_insert_document": [
      {
        "case_name": "Insert Document Successfully",
        "purpose": "验证工具能够成功将文档插入到指定数据库和集合中",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "document": {
            "name": "Alice",
            "age": 30
          }
        },
        "response": {
          "result": "\"687504276a35f1f5a6f322c1\""
        },
        "execution_time": 0.005714893341064453,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document with Empty Database Name",
        "purpose": "验证当传入空字符串作为数据库名称时，工具是否抛出 ValueError",
        "args": {
          "database_name": "",
          "collection_name": "users",
          "document": {
            "name": "Bob",
            "age": 25
          }
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_insert_document: Invalid database name: ''. Must be a non-empty string."
        },
        "execution_time": 0.003000497817993164,
        "is_functional_test": false
      },
      {
        "case_name": "Insert Document with Empty Collection Name",
        "purpose": "验证当传入空字符串作为集合名称时，工具是否抛出 ValueError",
        "args": {
          "database_name": "test_db",
          "collection_name": "",
          "document": {
            "name": "Charlie",
            "age": 35
          }
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_insert_document: Invalid collection name: ''. Must be a non-empty string."
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": false
      },
      {
        "case_name": "Insert Document into Non-Existent Database",
        "purpose": "验证当目标数据库不存在时，工具是否能正确处理错误情况",
        "args": {
          "database_name": "does_not_exist_db",
          "collection_name": "users",
          "document": {
            "name": "David",
            "age": 40
          }
        },
        "response": {
          "result": "\"687504276a35f1f5a6f322c2\""
        },
        "execution_time": 0.019052743911743164,
        "is_functional_test": false
      },
      {
        "case_name": "Insert Document into Non-Existent Collection",
        "purpose": "验证当目标集合不存在时，工具是否自动创建集合并插入文档",
        "args": {
          "database_name": "test_db",
          "collection_name": "new_collection",
          "document": {
            "name": "Eve",
            "age": 28
          }
        },
        "response": {
          "result": "\"687504276a35f1f5a6f322c3\""
        },
        "execution_time": 0.0039975643157958984,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document with Special Characters in Keys",
        "purpose": "验证工具是否能正确处理包含特殊字符的文档字段名",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "document": {
            "user#id": 1,
            "full-name": "Frank Lin"
          }
        },
        "response": {
          "result": "\"687504276a35f1f5a6f322c4\""
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document with Unicode Content",
        "purpose": "验证工具是否能正确处理包含 Unicode 字符的文档内容",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "document": {
            "name": "张三",
            "introduction": "智能软件工程师"
          }
        },
        "response": {
          "result": "\"687504276a35f1f5a6f322c5\""
        },
        "execution_time": 0.007002830505371094,
        "is_functional_test": true
      }
    ],
    "mcp_find_documents": [
      {
        "case_name": "Basic Document Query Without Filters",
        "purpose": "验证在不使用查询条件、投影和限制数量的情况下，能否成功从指定集合中检索文档",
        "args": {
          "database_name": "test_db",
          "collection_name": "users"
        },
        "response": {
          "result": "[{\"_id\": \"6872ad03424cddc98ebe1c0b\", \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6872bc93b11f255c82054b2a\", \"name\": \"John\", \"age\": 35, \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6872bc93b11f255c82054b2c\", \"user@name\": \"Eve\", \"age#\": 28, \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6872bc93b11f255c82054b2d\", \"a_very_long_key_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\": \"value\", \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6872bc93b11f255c82054b2e\", \"name\": \"Invalid\", \"age\": \"thirty\", \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6874f8d7935c390f10319632\", \"name\": \"Alice\", \"age\": 30}, {\"_id\": \"6875002364da856800f5cacb\", \"name\": \"Alice\", \"age\": 30}, {\"_id\": \"687504276a35f1f5a6f322c1\", \"name\": \"Alice\", \"age\": 30}, {\"_id\": \"687504276a35f1f5a6f322c4\", \"user#id\": 1, \"full-name\": \"Frank Lin\"}, {\"_id\": \"687504276a35f1f5a6f322c5\", \"name\": \"\\u5f20\\u4e09\", \"introduction\": \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\\u7a0b\\u5e08\"}]"
        },
        "execution_time": 0.007001399993896484,
        "is_functional_test": true
      },
      {
        "case_name": "Query With Simple Filter",
        "purpose": "验证工具能够根据简单过滤条件（如等值匹配）正确查询文档",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "name": "Alice"
          }
        },
        "response": {
          "result": "[{\"_id\": \"6874f8d7935c390f10319632\", \"name\": \"Alice\", \"age\": 30}, {\"_id\": \"6875002364da856800f5cacb\", \"name\": \"Alice\", \"age\": 30}, {\"_id\": \"687504276a35f1f5a6f322c1\", \"name\": \"Alice\", \"age\": 30}]"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": true
      },
      {
        "case_name": "Query With Projection",
        "purpose": "验证工具支持字段投影功能，仅返回指定字段",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "age": {
              "$gt": 25
            }
          },
          "projection": {
            "_id": 0,
            "name": 1
          }
        },
        "response": {
          "result": "[{\"name\": \"John\"}, {\"name\": \"Alice\"}, {\"name\": \"Alice\"}, {\"name\": \"Alice\"}]"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": true
      },
      {
        "case_name": "Query With Limit",
        "purpose": "验证工具支持通过 limit 参数限制返回的文档数量",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "age": {
              "$gt": 25
            }
          },
          "limit": 2
        },
        "response": {
          "result": "[{\"_id\": \"6872bc93b11f255c82054b2a\", \"name\": \"John\", \"age\": 35, \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6874f8d7935c390f10319632\", \"name\": \"Alice\", \"age\": 30}]"
        },
        "execution_time": 0.005001068115234375,
        "is_functional_test": true
      },
      {
        "case_name": "Query With Complex Filter",
        "purpose": "验证工具支持使用复杂查询操作符（如 $and 和 $in）进行组合查询",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "$and": [
              {
                "age": {
                  "$gte": 20
                }
              },
              {
                "name": {
                  "$in": [
                    "Alice",
                    "Bob"
                  ]
                }
              }
            ]
          }
        },
        "response": {
          "result": "[{\"_id\": \"6874f8d7935c390f10319632\", \"name\": \"Alice\", \"age\": 30}, {\"_id\": \"6875002364da856800f5cacb\", \"name\": \"Alice\", \"age\": 30}, {\"_id\": \"687504276a35f1f5a6f322c1\", \"name\": \"Alice\", \"age\": 30}]"
        },
        "execution_time": 0.005000114440917969,
        "is_functional_test": true
      },
      {
        "case_name": "Query With Invalid Database Name",
        "purpose": "验证当传入无效数据库名称时，工具是否抛出 ValueError",
        "args": {
          "database_name": "",
          "collection_name": "users"
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_find_documents: Invalid database name: ''. Must be a non-empty string."
        },
        "execution_time": 0.006997585296630859,
        "is_functional_test": false
      },
      {
        "case_name": "Query From Non-Existent Collection",
        "purpose": "验证当查询一个不存在的集合时，工具是否能优雅处理错误",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection"
        },
        "response": {
          "result": "[{\"_id\": \"686395fe8bb57d80cdb0c4a3\", \"key\": \"updated_value\"}, {\"_id\": \"68710caed665c89a8d5748ba\", \"name\": \"Alice\", \"email\": \"alice@example.com\"}, {\"_id\": \"68710cc7ea7bb66ae341045d\", \"data\": \"new collection should be created\"}, {\"_id\": \"687258207c1609156ee10ee2\", \"key\": \"value\"}, {\"_id\": \"687259cf14abe8d498d2f50a\", \"key\": \"value\"}, {\"_id\": \"68729041dc66f8998dec5876\", \"key\": \"value\"}, {\"_id\": \"687291c80d1fbb52f4c8c1b4\", \"key\": \"value\"}, {\"_id\": \"6872ad03424cddc98ebe1c09\", \"name\": \"Bob\", \"age\": 30}, {\"_id\": \"6872b2dfbde7bc28413c274f\", \"key\": \"value\"}, {\"_id\": \"6872bc93b11f255c82054b2b\", \"name\": \"Charlie\", \"age\": 35}, {\"_id\": \"6872bf1e0e2fc95fbcc97acf\", \"key\": \"value\"}, {\"_id\": \"6872c264cf57d11985b19217\", \"key\": \"value\"}, {\"_id\": \"6874f8d7935c390f10319633\", \"username\": \"new_user\"}]"
        },
        "execution_time": 0.005377292633056641,
        "is_functional_test": false
      },
      {
        "case_name": "Query With Special Characters in Field Names",
        "purpose": "验证工具能够处理包含特殊字符的字段名的查询",
        "args": {
          "database_name": "test_db",
          "collection_name": "special_chars_collection",
          "query": {
            "field@#_测试": "value_with_@#_测试"
          }
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.005007505416870117,
        "is_functional_test": true
      },
      {
        "case_name": "Query With Large Result Set",
        "purpose": "验证工具在返回大量结果时的边界处理能力",
        "args": {
          "database_name": "large_db",
          "collection_name": "large_collection",
          "limit": 1000
        },
        "response": {
          "result": "[{\"_id\": \"68616ca7c9e50bdcecfe6e7e\", \"content\": \"A very long string that exceeds normal document size limits and may cause performance issues.\", \"metadata\": {\"tags\": [\"large\", \"document\", \"performance\"], \"size\": \"huge\"}, \"data\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {\"_id\": \"687259cf14abe8d498d2f50c\", \"data\": \"a_very_long_string_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\"}]"
        },
        "execution_time": 0.005994319915771484,
        "is_functional_test": false
      },
      {
        "case_name": "Query With Invalid JSON Format in Query",
        "purpose": "验证工具是否能检测并拒绝格式错误的查询参数",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": "invalid_query_format"
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_find_documents: 1 validation error for mcp_find_documentsArguments\nquery\n  Input should be a valid dictionary [type=dict_type, input_value='invalid_query_format', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/dict_type"
        },
        "execution_time": 0.006001472473144531,
        "is_functional_test": false
      },
      {
        "case_name": "Query With Injection Attempt in Query",
        "purpose": "验证工具是否安全地处理潜在的注入攻击尝试",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "$where": "function() { return true; }"
          }
        },
        "response": {
          "result": "[{\"_id\": \"6872ad03424cddc98ebe1c0b\", \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6872bc93b11f255c82054b2a\", \"name\": \"John\", \"age\": 35, \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6872bc93b11f255c82054b2c\", \"user@name\": \"Eve\", \"age#\": 28, \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6872bc93b11f255c82054b2d\", \"a_very_long_key_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\": \"value\", \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6872bc93b11f255c82054b2e\", \"name\": \"Invalid\", \"age\": \"thirty\", \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6874f8d7935c390f10319632\", \"name\": \"Alice\", \"age\": 30}, {\"_id\": \"6875002364da856800f5cacb\", \"name\": \"Alice\", \"age\": 30}, {\"_id\": \"687504276a35f1f5a6f322c1\", \"name\": \"Alice\", \"age\": 30}, {\"_id\": \"687504276a35f1f5a6f322c4\", \"user#id\": 1, \"full-name\": \"Frank Lin\"}, {\"_id\": \"687504276a35f1f5a6f322c5\", \"name\": \"\\u5f20\\u4e09\", \"introduction\": \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\\u7a0b\\u5e08\"}]"
        },
        "execution_time": 0.017000198364257812,
        "is_functional_test": false
      },
      {
        "case_name": "Query With Negative Limit Value",
        "purpose": "验证工具是否能正确处理负数 limit 参数的情况",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "limit": -1
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_find_documents: Limit must be a positive integer or None."
        },
        "execution_time": 0.0069980621337890625,
        "is_functional_test": false
      },
      {
        "case_name": "Query With Null Projection",
        "purpose": "验证当 projection 参数为 None 时，工具是否返回完整文档",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "age": {
              "$lt": 30
            }
          },
          "projection": null
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_find_documents: 1 validation error for mcp_find_documentsArguments\nprojection\n  Input should be a valid dictionary [type=dict_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/dict_type"
        },
        "execution_time": 0.007998466491699219,
        "is_functional_test": true
      },
      {
        "case_name": "Query When MongoDB is Unreachable",
        "purpose": "验证当 MongoDB 实例无法连接时，工具是否能正确处理运行时错误",
        "args": {
          "database_name": "offline_db",
          "collection_name": "users"
        },
        "response": {
          "result": "[{\"_id\": \"6872ad03424cddc98ebe1c0d\", \"name\": \"Eve\", \"age\": 50}, {\"_id\": \"6874f8d7935c390f10319636\", \"name\": \"Offline User\"}]"
        },
        "execution_time": 0.0040013790130615234,
        "is_functional_test": false
      },
      {
        "case_name": "Query With Invalid Permissions",
        "purpose": "验证当用户没有权限访问目标数据库或集合时，工具是否能正确抛出异常",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "users"
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.005002260208129883,
        "is_functional_test": false
      },
      {
        "case_name": "Query With Very Long Database and Collection Names",
        "purpose": "验证工具是否能处理极长的数据库和集合名称",
        "args": {
          "database_name": "a_very_long_database_name_that_exceeds_normal_limits_and_might_cause_issues",
          "collection_name": "a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it"
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_find_documents: Failed to find documents: db name must be at most 63 characters, found: 75, full error: {'ok': 0.0, 'errmsg': 'db name must be at most 63 characters, found: 75', 'code': 73, 'codeName': 'InvalidNamespace'}"
        },
        "execution_time": 0.0070111751556396484,
        "is_functional_test": true
      }
    ],
    "mcp_update_document": [
      {
        "case_name": "Update Single Document Successfully",
        "purpose": "验证工具能够成功更新匹配查询的第一个文档",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "age": {
              "$lt": 30
            }
          },
          "update_data": {
            "$set": {
              "status": "inactive"
            }
          },
          "multi": false
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": true
      },
      {
        "case_name": "Update Multiple Documents Successfully",
        "purpose": "验证工具在 multi=True 时能正确更新所有匹配的文档",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "age": {
              "$lt": 30
            }
          },
          "update_data": {
            "$set": {
              "status": "inactive"
            }
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": true
      },
      {
        "case_name": "Update Document with Invalid Database Name",
        "purpose": "验证当传入无效数据库名称时，工具是否抛出 ValueError",
        "args": {
          "database_name": "",
          "collection_name": "users",
          "filter_query": {
            "age": {
              "$lt": 30
            }
          },
          "update_data": {
            "$set": {
              "status": "inactive"
            }
          },
          "multi": true
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_update_document: Invalid database name: ''. Must be a non-empty string."
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": false
      },
      {
        "case_name": "Update Document in Non-Existent Collection",
        "purpose": "验证当集合不存在时，工具是否能处理错误情况",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "filter_query": {
            "age": {
              "$lt": 30
            }
          },
          "update_data": {
            "$set": {
              "status": "inactive"
            }
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.0029997825622558594,
        "is_functional_test": false
      },
      {
        "case_name": "Update Document with Special Characters in Filter Query",
        "purpose": "验证工具是否能正确处理包含特殊字符的 filter_query",
        "args": {
          "database_name": "db@#_测试",
          "collection_name": "special_chars_collection",
          "filter_query": {
            "name": "user@#$_1"
          },
          "update_data": {
            "$set": {
              "email": "user@example.com"
            }
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.0034465789794921875,
        "is_functional_test": true
      },
      {
        "case_name": "Update Document with Unicode Fields",
        "purpose": "验证工具是否能处理包含 Unicode 字符的字段名和值",
        "args": {
          "database_name": "智能软件工",
          "collection_name": "用户信息",
          "filter_query": {
            "姓名": "张三"
          },
          "update_data": {
            "$set": {
              "状态": "停用"
            }
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.006002664566040039,
        "is_functional_test": true
      },
      {
        "case_name": "Update Document when MongoDB is Unreachable",
        "purpose": "验证当 MongoDB 实例不可达时，工具是否能处理运行时错误",
        "args": {
          "database_name": "offline_db",
          "collection_name": "users",
          "filter_query": {
            "age": {
              "$lt": 30
            }
          },
          "update_data": {
            "$set": {
              "status": "inactive"
            }
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.005997657775878906,
        "is_functional_test": false
      },
      {
        "case_name": "Update Huge Number of Documents",
        "purpose": "验证工具在需要更新大量文档时的边界处理能力",
        "args": {
          "database_name": "large_db",
          "collection_name": "large_collection",
          "filter_query": {
            "category": "default"
          },
          "update_data": {
            "$set": {
              "category": "updated"
            }
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.004599571228027344,
        "is_functional_test": false
      }
    ],
    "mcp_delete_document": [
      {
        "case_name": "Delete Single Document Successfully",
        "purpose": "验证工具能够成功删除单个匹配文档",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "status": "inactive"
          },
          "multi": false
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.004997968673706055,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Multiple Documents Successfully",
        "purpose": "验证工具能够成功删除多个匹配文档",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "status": "inactive"
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.009998559951782227,
        "is_functional_test": true
      },
      {
        "case_name": "Delete with Empty Filter Query",
        "purpose": "验证空过滤条件是否能正确删除所有文档（当 multi=True 时）",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {},
          "multi": true
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_delete_document: Filter query must be a non-empty dictionary."
        },
        "execution_time": 0.0039980411529541016,
        "is_functional_test": true
      },
      {
        "case_name": "Delete with Invalid Database Name",
        "purpose": "验证传入无效数据库名称时是否抛出 ValueError",
        "args": {
          "database_name": "",
          "collection_name": "users",
          "filter_query": {
            "status": "inactive"
          },
          "multi": true
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_delete_document: Invalid database name: ''. Must be a non-empty string."
        },
        "execution_time": 0.006002902984619141,
        "is_functional_test": false
      },
      {
        "case_name": "Delete from Non-Existent Collection",
        "purpose": "验证从不存在的集合中删除文档时是否抛出 RuntimeError",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "filter_query": {
            "status": "inactive"
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.0069980621337890625,
        "is_functional_test": false
      },
      {
        "case_name": "Delete with Special Characters in Filter",
        "purpose": "验证包含特殊字符的 filter_query 是否能被正确处理",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "username": "user@#_测试"
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": true
      },
      {
        "case_name": "Delete with Unicode Collection Name",
        "purpose": "验证使用包含 Unicode 字符的集合名进行删除操作是否正常",
        "args": {
          "database_name": "智能软件工",
          "collection_name": "用户信息",
          "filter_query": {
            "active": false
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.007998943328857422,
        "is_functional_test": true
      },
      {
        "case_name": "Delete from Huge Collection",
        "purpose": "验证在包含大量文档的集合中执行删除操作时的行为",
        "args": {
          "database_name": "large_db",
          "collection_name": "large_collection",
          "filter_query": {
            "status": "inactive"
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 55
}