{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "qwen-max-latest-mcp_git_repository_manager",
  "server_path": "workspace/pipeline-output-servers/qwen-max-latest/mcp_git_repository_manager/refined/server.py",
  "timestamp": "2025-07-14T21:24:42.872766",
  "tools": [
    {
      "name": "git_init",
      "description": "\n            Initializes a new Git repository in the specified directory.\n\n            Args:\n                repo_path (str): The path where the new Git repository should be initialized.\n\n            Returns:\n                A string confirming the successful initialization of the Git repository.\n\n            Example:\n                git_init(repo_path=\"/path/to/new/repo\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_initArguments",
        "type": "object"
      }
    },
    {
      "name": "git_status",
      "description": "\n            Checks the status of the working tree in the specified Git repository.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n\n            Returns:\n                A string containing the status information of the repository.\n\n            Example:\n                git_status(repo_path=\"/path/to/existing/repo\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          }
        },
        "title": "git_statusArguments",
        "type": "object"
      }
    },
    {
      "name": "git_add",
      "description": "\n            Adds files to the staging area of the specified Git repository.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                file_pattern (str): The pattern or specific file(s) to add to the staging area.\n\n            Returns:\n                A string confirming the successful addition of files to the staging area.\n\n            Example:\n                git_add(repo_path=\"/path/to/existing/repo\", file_pattern=\"*.py\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "file_pattern": {
            "default": "*",
            "title": "File Pattern",
            "type": "string"
          }
        },
        "title": "git_addArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_unstaged",
      "description": "\n            Shows changes in the working tree not yet staged for the next commit.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n\n            Returns:\n                A string containing the diff of unstaged changes.\n\n            Example:\n                git_diff_unstaged(repo_path=\"/path/to/existing/repo\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          }
        },
        "title": "git_diff_unstagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_staged",
      "description": "\n            Shows changes between the staging area and the latest commit.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n\n            Returns:\n                A string containing the diff of staged changes.\n\n            Example:\n                git_diff_staged(repo_path=\"/path/to/existing/repo\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          }
        },
        "title": "git_diff_stagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff",
      "description": "\n            Compares differences between two branches or commits.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                source_ref (str): The source branch or commit hash.\n                target_ref (str): The target branch or commit hash.\n\n            Returns:\n                A string containing the diff between the specified references.\n\n            Example:\n                git_diff(repo_path=\"/path/to/existing/repo\", source_ref=\"main\", target_ref=\"feature-branch\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "source_ref": {
            "default": "main",
            "title": "Source Ref",
            "type": "string"
          },
          "target_ref": {
            "default": "feature-branch",
            "title": "Target Ref",
            "type": "string"
          }
        },
        "title": "git_diffArguments",
        "type": "object"
      }
    },
    {
      "name": "git_commit",
      "description": "\n            Records changes to the repository by creating a new commit.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                message (str): The commit message describing the changes.\n\n            Returns:\n                A string confirming the successful creation of a new commit.\n\n            Example:\n                git_commit(repo_path=\"/path/to/existing/repo\", message=\"Add new feature\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "message": {
            "default": "Commit changes",
            "title": "Message",
            "type": "string"
          }
        },
        "title": "git_commitArguments",
        "type": "object"
      }
    },
    {
      "name": "git_reset",
      "description": "\n            Removes files from the staging area without altering the working directory.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                file_pattern (str): The pattern or specific file(s) to unstage.\n\n            Returns:\n                A string confirming the successful unstaging of files.\n\n            Example:\n                git_reset(repo_path=\"/path/to/existing/repo\", file_pattern=\"*.py\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "file_pattern": {
            "default": "*",
            "title": "File Pattern",
            "type": "string"
          }
        },
        "title": "git_resetArguments",
        "type": "object"
      }
    },
    {
      "name": "git_log",
      "description": "\n            Displays the commit history of the specified Git repository.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n\n            Returns:\n                A string containing the commit history.\n\n            Example:\n                git_log(repo_path=\"/path/to/existing/repo\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          }
        },
        "title": "git_logArguments",
        "type": "object"
      }
    },
    {
      "name": "git_create_branch",
      "description": "\n            Creates a new branch in the specified Git repository.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                branch_name (str): The name of the new branch to create.\n\n            Returns:\n                A string confirming the successful creation of the new branch.\n\n            Example:\n                git_create_branch(repo_path=\"/path/to/existing/repo\", branch_name=\"new-feature\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "branch_name": {
            "default": "new-feature",
            "title": "Branch Name",
            "type": "string"
          }
        },
        "title": "git_create_branchArguments",
        "type": "object"
      }
    },
    {
      "name": "git_checkout",
      "description": "\n            Switches the current working branch to the specified branch.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                branch_name (str): The name of the branch to switch to.\n\n            Returns:\n                A string confirming the successful checkout of the specified branch.\n\n            Example:\n                git_checkout(repo_path=\"/path/to/existing/repo\", branch_name=\"feature-branch\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "branch_name": {
            "default": "feature-branch",
            "title": "Branch Name",
            "type": "string"
          }
        },
        "title": "git_checkoutArguments",
        "type": "object"
      }
    },
    {
      "name": "git_show",
      "description": "\n            Displays detailed information about a specific commit.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                commit_hash (str): The hash of the commit to display details for.\n\n            Returns:\n                A string containing the detailed information about the specified commit.\n\n            Example:\n                git_show(repo_path=\"/path/to/existing/repo\", commit_hash=\"a1b2c3d4\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "commit_hash": {
            "default": "a1b2c3d4",
            "title": "Commit Hash",
            "type": "string"
          }
        },
        "title": "git_showArguments",
        "type": "object"
      }
    },
    {
      "name": "text_write_file",
      "description": "\n            Writes content to a specified file. If the file exists, it will be overwritten.\n\n            Args:\n                file_path (str): The path to the file that will be created or overwritten.\n                content (str): The content to write into the file.\n\n            Returns:\n                A success message indicating the file was written.\n\n            Raises:\n                ValueError: If any of the inputs are invalid.\n\n            Example:\n                text_write_file(file_path=\"/tmp/test.txt\", content=\"Hello World\")\n            ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "content"
        ],
        "title": "text_write_fileArguments",
        "type": "object"
      }
    },
    {
      "name": "text_append_to_file",
      "description": "\n            Appends content to a specified file. If the file does not exist, it will be created.\n\n            Args:\n                file_path (str): The path to the file that will be appended to.\n                content (str): The content to append to the file.\n\n            Returns:\n                A success message indicating the file was appended to.\n\n            Raises:\n                ValueError: If any of the inputs are invalid.\n\n            Example:\n                text_append_to_file(file_path=\"/tmp/test.txt\", content=\"\nAdditional line\")\n            ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "content"
        ],
        "title": "text_append_to_fileArguments",
        "type": "object"
      }
    },
    {
      "name": "text_extract_regex",
      "description": "\n            Extracts the first match of a regular expression pattern from the given text.\n\n            Args:\n                text (str): The text to search within.\n                pattern (str): The regular expression pattern to search for.\n\n            Returns:\n                A string containing the matched group, or an error if no match is found.\n\n            Raises:\n                ValueError: If any of the inputs are invalid or no match is found.\n\n            Example:\n                text_extract_regex(text=\"Commit: a1b2c3d4\", pattern=\"commit (\\w+)\")\n            ",
      "args_schema": {
        "properties": {
          "text": {
            "title": "Text",
            "type": "string"
          },
          "pattern": {
            "title": "Pattern",
            "type": "string"
          }
        },
        "required": [
          "text",
          "pattern"
        ],
        "title": "text_extract_regexArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "git_init": [
      {
        "case_name": "Initialize Git Repository in New Folder",
        "purpose": "验证工具可以在指定目录中成功初始化一个新的Git仓库。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_folder"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Initialized Git repository at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_folder\"}"
        },
        "execution_time": 0.14554572105407715,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository in Output Folder with Special Characters",
        "purpose": "测试路径中包含特殊字符的文件夹是否可以正常初始化Git仓库。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output@folder#1"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Initialized Git repository at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output@folder#1\"}"
        },
        "execution_time": 0.1637132167816162,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Initialize Git Repository in Read-Only Directory",
        "purpose": "验证工具在只读目录下无法初始化Git仓库时能否正确处理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Initialized Git repository at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\"}"
        },
        "execution_time": 0.16146135330200195,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository in Nonexistent Directory",
        "purpose": "测试当目标目录不存在时，工具是否能优雅地处理该错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_dir"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Initialized Git repository at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_dir\"}"
        },
        "execution_time": 0.2439272403717041,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository in Root Directory (Boundary Case)",
        "purpose": "测试边界情况：尝试在系统根目录中初始化Git仓库（模拟最小权限环境下的行为）。",
        "args": {
          "repo_path": "D:\\"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Initialized Git repository at D:\\\\\"}"
        },
        "execution_time": 0.19513893127441406,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository in Temp File Path",
        "purpose": "验证工具在临时文件所在路径初始化仓库的安全性与兼容性。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_output.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') not found due to: NotADirectoryError('[WinError 267] \\u76ee\\u5f55\\u540d\\u79f0\\u65e0\\u6548\\u3002')\\n  cmdline: git init\"}"
        },
        "execution_time": 0.00500035285949707,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository in Invalid Output Directory",
        "purpose": "测试无效输出目录是否被正确识别并返回错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_output_dir"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Initialized Git repository at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_output_dir\"}"
        },
        "execution_time": 0.30315375328063965,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository in Empty Content File Path",
        "purpose": "验证空内容文件所在路径是否影响Git仓库初始化。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') not found due to: NotADirectoryError('[WinError 267] \\u76ee\\u5f55\\u540d\\u79f0\\u65e0\\u6548\\u3002')\\n  cmdline: git init\"}"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": true
      }
    ],
    "text_write_file": [
      {
        "case_name": "Write Content to New File",
        "purpose": "验证工具可以成功将内容写入一个新创建的文件。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_output.txt",
          "content": "This is a test content for new file."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Wrote content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_output.txt\"}"
        },
        "execution_time": 0.0059986114501953125,
        "is_functional_test": true
      },
      {
        "case_name": "Overwrite Existing File Content",
        "purpose": "验证工具可以成功覆盖已存在的文件内容。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_file.txt",
          "content": "New content to overwrite the existing file."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Wrote content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_file.txt\"}"
        },
        "execution_time": 0.00400233268737793,
        "is_functional_test": true
      },
      {
        "case_name": "Write with Special Characters in File Path",
        "purpose": "测试路径中包含特殊字符的文件是否能被正确写入内容。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\file_with_@#$_special.txt",
          "content": "Content written to a file with special characters in path."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Wrote content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\file_with_@#$_special.txt\"}"
        },
        "execution_time": 0.007005929946899414,
        "is_functional_test": true
      },
      {
        "case_name": "Write Empty Content to File",
        "purpose": "验证空内容能否被成功写入文件，清空原有内容。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\basic_document_copy.docx",
          "content": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"content must be a non-empty string.\"}"
        },
        "execution_time": 0.0059969425201416016,
        "is_functional_test": true
      },
      {
        "case_name": "Write Content to Nonexistent File",
        "purpose": "验证当目标文件不存在时，工具是否能创建并写入内容。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.txt",
          "content": "Content for a new file that did not exist before."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Wrote content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.txt\"}"
        },
        "execution_time": 0.00699925422668457,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Write to Read-Only File",
        "purpose": "验证工具在尝试写入只读文件时是否能够正确处理错误。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\locked_file.txt",
          "content": "This should fail because the file is read-only."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Wrote content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\\\\locked_file.txt\"}"
        },
        "execution_time": 0.0060079097747802734,
        "is_functional_test": false
      },
      {
        "case_name": "Write with Null or Invalid File Path",
        "purpose": "测试传入空或无效文件路径时工具是否能抛出合理错误。",
        "args": {
          "file_path": "",
          "content": "Test content with invalid file path."
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"file_path must be a non-empty string.\"}"
        },
        "execution_time": 0.0059969425201416016,
        "is_functional_test": false
      }
    ],
    "git_status": [
      {
        "case_name": "Check Status of Initialized Git Repository",
        "purpose": "验证工具可以正确获取已初始化Git仓库的状态信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_folder"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_folder\"}"
        },
        "execution_time": 0.004292964935302734,
        "is_functional_test": true
      },
      {
        "case_name": "Check Status Without Specifying Repo Path (Use Default)",
        "purpose": "测试未指定repo_path参数时是否使用默认仓库路径。",
        "args": {
          "repo_path": null
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: 1 validation error for git_statusArguments\nrepo_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.010998964309692383,
        "is_functional_test": true
      },
      {
        "case_name": "Check Status of Non-Git Directory",
        "purpose": "验证工具在非Git目录中调用git_status时能否正确识别并返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"On branch master\\n\\nNo commits yet\\n\\nUntracked files:\\n  (use \\\"git add <file>...\\\" to include in what will be committed)\\n\\tedge_locked_file.png\\n\\tlocked_contour.png\\n\\tlocked_cropped.png\\n\\tlocked_file.docx\\n\\tlocked_file.jpg\\n\\tlocked_file.txt\\n\\tlocked_resized.jpg\\n\\tlocked_thresholded.png\\n\\treadonly_test.jpg\\n\\tscreenshot_readonly.png\\n\\tunauthorized_copy.docx\\n\\t~$cked_file.docx\\n\\nnothing added to commit but untracked files present (use \\\"git add\\\" to track)\"}"
        },
        "execution_time": 0.1460714340209961,
        "is_functional_test": false
      },
      {
        "case_name": "Check Status with Special Characters in Repo Path",
        "purpose": "测试路径中包含特殊字符的Git仓库是否能被正常识别状态。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output@folder#1"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output@folder#1\"}"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": true
      },
      {
        "case_name": "Check Status on Read-Only Git Repository",
        "purpose": "验证工具在只读Git仓库中能否正确读取状态或处理权限问题。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"On branch master\\n\\nNo commits yet\\n\\nUntracked files:\\n  (use \\\"git add <file>...\\\" to include in what will be committed)\\n\\tedge_locked_file.png\\n\\tlocked_contour.png\\n\\tlocked_cropped.png\\n\\tlocked_file.docx\\n\\tlocked_file.jpg\\n\\tlocked_file.txt\\n\\tlocked_resized.jpg\\n\\tlocked_thresholded.png\\n\\treadonly_test.jpg\\n\\tscreenshot_readonly.png\\n\\tunauthorized_copy.docx\\n\\t~$cked_file.docx\\n\\nnothing added to commit but untracked files present (use \\\"git add\\\" to track)\"}"
        },
        "execution_time": 0.16260361671447754,
        "is_functional_test": false
      },
      {
        "case_name": "Check Status of Git Repository in Root Directory",
        "purpose": "测试工具在系统根目录中的Git仓库能否正确获取状态，验证边界情况。",
        "args": {
          "repo_path": "D:\\"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git status\\n  stderr: 'fatal: detected dubious ownership in repository at 'D:/'\\n'D:/' is owned by:\\n\\tNT AUTHORITY/SYSTEM (S-1-5-18)\\nbut the current user is:\\n\\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\\nTo add an exception for this directory, call:\\n\\n\\tgit config --global --add safe.directory D:/'\"}"
        },
        "execution_time": 0.11568784713745117,
        "is_functional_test": false
      },
      {
        "case_name": "Check Status with Invalid or Null Repo Path",
        "purpose": "验证工具在传入空或无效repo_path时是否能抛出合理错误。",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_output_dir\"}"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      },
      {
        "case_name": "Check Status of Temp File Instead of Directory",
        "purpose": "测试将文件路径而非目录路径作为Git仓库路径时工具的行为。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_output.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_output.txt\"}"
        },
        "execution_time": 0.007001161575317383,
        "is_functional_test": false
      }
    ],
    "git_add": [
      {
        "case_name": "Add Specific File to Staging Area",
        "purpose": "验证工具可以成功将指定文件添加到Git暂存区。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_folder",
          "file_pattern": "nested_file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_folder\"}"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": true
      },
      {
        "case_name": "Add All Files Using Default Pattern",
        "purpose": "使用默认通配符 '*' 添加所有文件到已初始化的Git仓库中。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output@folder#1",
          "file_pattern": "*"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output@folder#1\"}"
        },
        "execution_time": 0.004999876022338867,
        "is_functional_test": true
      },
      {
        "case_name": "Add Python Files Only",
        "purpose": "测试仅添加匹配模式 '*.py' 的文件到暂存区。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "file_pattern": "*.py"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Added *.py to staging area.\"}"
        },
        "execution_time": 0.007998466491699219,
        "is_functional_test": true
      },
      {
        "case_name": "Add Without Specifying Repository Path",
        "purpose": "验证在未提供 repo_path 参数时，工具是否使用最近一次初始化的仓库路径。",
        "args": {
          "file_pattern": "*.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_output_dir\"}"
        },
        "execution_time": 0.004999876022338867,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Add in Read-Only Directory",
        "purpose": "测试在只读目录下尝试添加文件到Git暂存区时的行为是否符合预期。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "file_pattern": "locked_file.txt"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Added locked_file.txt to staging area.\"}"
        },
        "execution_time": 0.008999824523925781,
        "is_functional_test": false
      },
      {
        "case_name": "Add Nonexistent File Pattern",
        "purpose": "验证当提供的文件模式不存在时，工具是否能正确处理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_dir",
          "file_pattern": "*.xyz"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Added *.xyz to staging area.\"}"
        },
        "execution_time": 0.004999876022338867,
        "is_functional_test": false
      },
      {
        "case_name": "Add File with Special Characters in Path",
        "purpose": "测试路径中包含特殊字符的文件是否能被正确添加到Git暂存区。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\file_with_@#$_special.txt",
          "file_pattern": "file_with_@#$_special.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\file_with_@#$_special.txt\"}"
        },
        "execution_time": 0.010000228881835938,
        "is_functional_test": true
      },
      {
        "case_name": "Add Empty or Invalid File Pattern",
        "purpose": "测试传入空或无效文件模式时工具是否能抛出合理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_folder",
          "file_pattern": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"file_pattern must be a non-empty string.\"}"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      }
    ],
    "git_diff_unstaged": [
      {
        "case_name": "Show Unstaged Changes in Valid Git Repository",
        "purpose": "验证工具能够正确显示已初始化Git仓库中未暂存的修改。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_folder"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_folder\"}"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": true
      },
      {
        "case_name": "Show Unstaged Changes with Default Repo Path",
        "purpose": "测试当未提供repo_path参数时，工具是否使用默认或最近初始化的仓库路径。",
        "args": {},
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_output_dir\"}"
        },
        "execution_time": 0.0025064945220947266,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Diff in Non-Git Directory",
        "purpose": "验证在未初始化为Git仓库的目录中执行该命令时能否返回合理错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\"}"
        },
        "execution_time": 0.0029990673065185547,
        "is_functional_test": false
      },
      {
        "case_name": "Diff Unstaged Changes in Read-Only Git Repository",
        "purpose": "测试在只读Git仓库中尝试查看未暂存更改时的行为是否符合预期。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\"}"
        },
        "execution_time": 0.12600064277648926,
        "is_functional_test": false
      },
      {
        "case_name": "Diff with Special Characters in Repository Path",
        "purpose": "验证包含特殊字符的Git仓库路径是否能被工具正确处理。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output@folder#1"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output@folder#1\"}"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": true
      },
      {
        "case_name": "Diff in Empty Git Repository",
        "purpose": "测试在一个刚初始化但没有任何提交记录的空Git仓库中调用该命令是否会正常返回（无变更）。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_dir"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\"}"
        },
        "execution_time": 0.17301511764526367,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Diff on Invalid File System Path",
        "purpose": "测试传入无效或非目录路径时，工具是否能优雅地处理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_output.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_output.txt\"}"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": false
      },
      {
        "case_name": "Diff in Root Git Repository (Boundary Case)",
        "purpose": "验证边界情况：在根目录下Git仓库中查看未暂存更改的行为是否符合预期。",
        "args": {
          "repo_path": "D:\\"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git diff\\n  stderr: 'warning: Not a git repository. Use --no-index to compare two paths outside a working tree\\nusage: git diff --no-index [<options>] <path> <path>\\n\\nDiff output format options\\n    -p, --patch           generate patch\\n    -s, --no-patch        suppress diff output\\n    -u                    generate patch\\n    -U, --unified[=<n>]   generate diffs with <n> lines context\\n    -W, --[no-]function-context\\n                          generate diffs with <n> lines context\\n    --raw                 generate the diff in raw format\\n    --patch-with-raw      synonym for '-p --raw'\\n    --patch-with-stat     synonym for '-p --stat'\\n    --numstat             machine friendly --stat\\n    --shortstat           output only the last line of --stat\\n    -X, --dirstat[=<param1>,<param2>...]\\n                          output the distribution of relative amount of changes for each sub-directory\\n    --cumulative          synonym for --dirstat=cumulative\\n    --dirstat-by-file[=<param1>,<param2>...]\\n                          synonym for --dirstat=files,<param1>,<param2>...\\n    --check               warn if changes introduce conflict markers or whitespace errors\\n    --summary             condensed summary such as creations, renames and mode changes\\n    --name-only           show only names ...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计7614字符，剩余6214字符"
        },
        "execution_time": 0.17000079154968262,
        "is_functional_test": false
      }
    ],
    "git_commit": [
      {
        "case_name": "Commit Changes in Initialized Repository",
        "purpose": "验证工具可以在已初始化的Git仓库中成功创建一个新的提交。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_folder",
          "message": "Add new feature"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_folder\"}"
        },
        "execution_time": 0.004069089889526367,
        "is_functional_test": true
      },
      {
        "case_name": "Commit with Default Message in Valid Repo",
        "purpose": "测试使用默认提交信息在有效仓库中执行提交操作是否成功。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output@folder#1"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output@folder#1\"}"
        },
        "execution_time": 0.005007266998291016,
        "is_functional_test": true
      },
      {
        "case_name": "Commit in Non-Git Directory",
        "purpose": "验证尝试在未初始化为Git仓库的目录中提交是否会正确处理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "message": "Attempt commit in non-git directory"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Created new commit: d7726ee4e5ac5c9a0d7d34bf58b93be8482eb9dd\"}"
        },
        "execution_time": 0.2570362091064453,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Empty Message",
        "purpose": "测试空提交信息是否被拒绝并返回合理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_folder",
          "message": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"message must be a non-empty string.\"}"
        },
        "execution_time": 0.003998756408691406,
        "is_functional_test": false
      },
      {
        "case_name": "Commit in Read-Only Repository",
        "purpose": "验证在只读Git仓库中提交更改是否能正确处理权限错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "message": "Try to commit in read-only repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Created new commit: 8c74024de66ab6a89cc40b8e40c6523094d9a88e\"}"
        },
        "execution_time": 0.30071187019348145,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Special Characters in Message",
        "purpose": "测试提交信息中包含特殊字符（如引号、换行符等）时是否正常处理。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_folder",
          "message": "Fix bug #456\nUpdate dependencies"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_folder\"}"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": true
      },
      {
        "case_name": "Commit Without Specifying Repository Path",
        "purpose": "验证工具在未指定仓库路径时能否使用之前初始化的默认仓库进行提交。",
        "args": {
          "message": "Use default repository path for commit"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_output_dir\"}"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": true
      },
      {
        "case_name": "Commit in Temp File Path Directory",
        "purpose": "测试尝试在临时文件所在目录进行提交操作的安全性与兼容性。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_output.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_output.txt\"}"
        },
        "execution_time": 0.0070056915283203125,
        "is_functional_test": false
      }
    ],
    "git_log": [
      {
        "case_name": "Display Commit History in Initialized Repository",
        "purpose": "验证工具可以成功显示已初始化Git仓库的提交历史。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_folder"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_folder\"}"
        },
        "execution_time": 0.003917694091796875,
        "is_functional_test": true
      },
      {
        "case_name": "Display Commit History with Default Repository Path",
        "purpose": "测试工具在未指定路径时使用默认仓库并正确显示提交历史。",
        "args": {},
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_output_dir\"}"
        },
        "execution_time": 0.004000663757324219,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Display Commit History in Non-Git Directory",
        "purpose": "验证工具在非Git目录下能否优雅地处理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"commit 8c74024de66ab6a89cc40b8e40c6523094d9a88e\\nAuthor: pouchine <1291980381@qq.com>\\nDate:   Mon Jul 14 21:27:00 2025 +0800\\n\\n    Try to commit in read-only repo\\n\\ncommit d7726ee4e5ac5c9a0d7d34bf58b93be8482eb9dd\\nAuthor: pouchine <1291980381@qq.com>\\nDate:   Mon Jul 14 21:27:00 2025 +0800\\n\\n    Attempt commit in non-git directory\"}"
        },
        "execution_time": 0.13002347946166992,
        "is_functional_test": false
      },
      {
        "case_name": "Display Commit History in Repository with Special Characters",
        "purpose": "测试路径中包含特殊字符的Git仓库是否能正常获取提交历史。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output@folder#1"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output@folder#1\"}"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Display Commit History in Read-Only Git Directory",
        "purpose": "验证工具在只读Git目录下是否能正确处理访问权限问题。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"commit 8c74024de66ab6a89cc40b8e40c6523094d9a88e\\nAuthor: pouchine <1291980381@qq.com>\\nDate:   Mon Jul 14 21:27:00 2025 +0800\\n\\n    Try to commit in read-only repo\\n\\ncommit d7726ee4e5ac5c9a0d7d34bf58b93be8482eb9dd\\nAuthor: pouchine <1291980381@qq.com>\\nDate:   Mon Jul 14 21:27:00 2025 +0800\\n\\n    Attempt commit in non-git directory\"}"
        },
        "execution_time": 0.16472554206848145,
        "is_functional_test": false
      },
      {
        "case_name": "Display Commit History in Root Git Repository",
        "purpose": "测试系统根目录下的Git仓库是否能返回有效提交历史。",
        "args": {
          "repo_path": "D:\\"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git log\\n  stderr: 'fatal: detected dubious ownership in repository at 'D:/'\\n'D:/' is owned by:\\n\\tNT AUTHORITY/SYSTEM (S-1-5-18)\\nbut the current user is:\\n\\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\\nTo add an exception for this directory, call:\\n\\n\\tgit config --global --add safe.directory D:/'\"}"
        },
        "execution_time": 0.14664435386657715,
        "is_functional_test": true
      },
      {
        "case_name": "Display Commit History for Empty Git Repository",
        "purpose": "验证空Git仓库（无提交记录）是否能正确返回空历史。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_output_dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_output_dir\"}"
        },
        "execution_time": 0.004002094268798828,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Display Commit History with Invalid File Path",
        "purpose": "测试传入无效文件路径时工具是否能抛出合理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.txt\"}"
        },
        "execution_time": 0.0060045719146728516,
        "is_functional_test": false
      }
    ],
    "git_diff_staged": [
      {
        "case_name": "Show Staged Diff in Initialized Repository",
        "purpose": "验证在已初始化的Git仓库中，工具能够正确显示暂存区与最新提交之间的差异。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_folder"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_folder\"}"
        },
        "execution_time": 0.0035049915313720703,
        "is_functional_test": true
      },
      {
        "case_name": "Show Staged Diff Using Default Repo Path",
        "purpose": "验证工具在未提供 repo_path 参数时是否使用默认路径（即最近初始化的仓库）。",
        "args": {},
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_output_dir\"}"
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Show Staged Diff in Non-Git Directory",
        "purpose": "测试当指定路径不是一个 Git 仓库时，工具是否能优雅地处理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\"}"
        },
        "execution_time": 0.11909604072570801,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Diff with Special Characters in Path",
        "purpose": "测试路径中包含特殊字符时，git_diff_staged 是否仍能正常工作。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output@folder#1"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output@folder#1\"}"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": true
      },
      {
        "case_name": "Show Staged Diff in Empty Repository",
        "purpose": "验证在一个没有任何提交的新仓库中调用 git_diff_staged 时的行为是否符合预期。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff HEAD\\n  stderr: 'fatal: ambiguous argument 'HEAD': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.12760281562805176,
        "is_functional_test": true
      },
      {
        "case_name": "Show Staged Diff in Read-Only Repository",
        "purpose": "测试在只读权限的 Git 仓库目录下执行 git_diff_staged 是否能正确处理权限问题。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\"}"
        },
        "execution_time": 0.16333937644958496,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Diff with Invalid Repository Path",
        "purpose": "验证当传入无效或不存在的仓库路径时，工具是否能抛出合理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_output_dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_output_dir\"}"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Diff in Root Directory",
        "purpose": "边界测试：尝试在系统根目录执行 git_diff_staged，验证其行为是否安全且无副作用。",
        "args": {
          "repo_path": "D:\\"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git diff HEAD\\n  stderr: 'warning: Not a git repository. Use --no-index to compare two paths outside a working tree\\nusage: git diff --no-index [<options>] <path> <path>\\n\\nDiff output format options\\n    -p, --patch           generate patch\\n    -s, --no-patch        suppress diff output\\n    -u                    generate patch\\n    -U, --unified[=<n>]   generate diffs with <n> lines context\\n    -W, --[no-]function-context\\n                          generate diffs with <n> lines context\\n    --raw                 generate the diff in raw format\\n    --patch-with-raw      synonym for '-p --raw'\\n    --patch-with-stat     synonym for '-p --stat'\\n    --numstat             machine friendly --stat\\n    --shortstat           output only the last line of --stat\\n    -X, --dirstat[=<param1>,<param2>...]\\n                          output the distribution of relative amount of changes for each sub-directory\\n    --cumulative          synonym for --dirstat=cumulative\\n    --dirstat-by-file[=<param1>,<param2>...]\\n                          synonym for --dirstat=files,<param1>,<param2>...\\n    --check               warn if changes introduce conflict markers or whitespace errors\\n    --summary             condensed summary such as creations, renames and mode changes\\n    --name-only           show only n...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计7619字符，剩余6219字符"
        },
        "execution_time": 0.15000009536743164,
        "is_functional_test": false
      }
    ],
    "git_reset": [
      {
        "case_name": "Reset Specific File Pattern in Valid Repository",
        "purpose": "验证工具可以成功从暂存区移除符合指定文件模式的文件。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_folder",
          "file_pattern": "*.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_folder\"}"
        },
        "execution_time": 0.00400090217590332,
        "is_functional_test": true
      },
      {
        "case_name": "Reset All Files Using Default File Pattern",
        "purpose": "验证使用默认文件模式 '*' 可以正确取消暂存所有已暂存的文件。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output@folder#1",
          "file_pattern": "*"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output@folder#1\"}"
        },
        "execution_time": 0.007005214691162109,
        "is_functional_test": true
      },
      {
        "case_name": "Reset Without Specifying Repository Path (Use Default)",
        "purpose": "验证未提供 repo_path 参数时，工具是否使用最近初始化的仓库路径。",
        "args": {
          "file_pattern": "*.csv"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_output_dir\"}"
        },
        "execution_time": 0.007997751235961914,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Reset in Nonexistent Git Repository",
        "purpose": "测试在不存在的 Git 仓库中执行 reset 操作时是否能正确处理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_dir",
          "file_pattern": "*.docx"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Unstaged *.docx.\"}"
        },
        "execution_time": 0.15884613990783691,
        "is_functional_test": false
      },
      {
        "case_name": "Reset with Special Characters in File Pattern",
        "purpose": "验证包含特殊字符的文件模式能否被正确解析并取消暂存对应文件。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "file_pattern": "*_locked_*"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Unstaged *_locked_*.\"}"
        },
        "execution_time": 0.14099955558776855,
        "is_functional_test": true
      },
      {
        "case_name": "Reset with Empty File Pattern Parameter",
        "purpose": "测试空文件模式参数是否被正确拒绝，并返回有意义的错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_folder",
          "file_pattern": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"file_pattern must be a non-empty string.\"}"
        },
        "execution_time": 0.0029990673065185547,
        "is_functional_test": false
      },
      {
        "case_name": "Reset in Root Directory to Test Boundary Condition",
        "purpose": "测试边界情况：尝试在系统根目录中执行 git reset 命令以验证最小权限环境下的行为。",
        "args": {
          "repo_path": "D:\\",
          "file_pattern": "*"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git reset -- *\\n  stderr: 'fatal: detected dubious ownership in repository at 'D:/'\\n'D:/' is owned by:\\n\\tNT AUTHORITY/SYSTEM (S-1-5-18)\\nbut the current user is:\\n\\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\\nTo add an exception for this directory, call:\\n\\n\\tgit config --global --add safe.directory D:/'\"}"
        },
        "execution_time": 0.12227725982666016,
        "is_functional_test": false
      },
      {
        "case_name": "Reset Operation on Read-Only Repository",
        "purpose": "验证工具在只读仓库目录下执行 reset 操作时是否能够正确处理权限错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "file_pattern": "*.png"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Unstaged *.png.\"}"
        },
        "execution_time": 0.1419999599456787,
        "is_functional_test": false
      }
    ],
    "git_create_branch": [
      {
        "case_name": "Create New Branch in Previously Initialized Repository",
        "purpose": "验证在之前已初始化的Git仓库中创建新分支的基本功能。",
        "args": {
          "branch_name": "new-feature"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_output_dir\"}"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": true
      },
      {
        "case_name": "Create New Branch in Specified Valid Repository Path",
        "purpose": "测试指定有效路径的Git仓库中是否可以成功创建新分支。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_folder",
          "branch_name": "feature-xyz"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_folder\"}"
        },
        "execution_time": 0.00800180435180664,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Create Branch in Nonexistent Git Repository",
        "purpose": "验证当指定路径不存在时，工具是否能正确处理错误并返回提示信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_dir",
          "branch_name": "bugfix"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.00700068473815918,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Special Characters in Name",
        "purpose": "测试分支名称包含特殊字符时是否能被正确接受或拒绝（取决于Git规范）。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output@folder#1",
          "branch_name": "feature/with/slashes"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output@folder#1\"}"
        },
        "execution_time": 0.006995439529418945,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Create Branch in Read-Only Directory",
        "purpose": "验证在只读目录中的Git仓库是否无法创建新分支，并能正确处理权限错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "branch_name": "read-only-test"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Created new branch: read-only-test\"}"
        },
        "execution_time": 0.13399958610534668,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch Using Default Branch Name",
        "purpose": "验证使用默认分支名参数能否成功创建新分支。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_folder"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_folder\"}"
        },
        "execution_time": 0.0029954910278320312,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Create Branch Without Repo Path or Prior Initialization",
        "purpose": "测试既未提供仓库路径也未预先初始化仓库时，工具是否能优雅地处理错误。",
        "args": {
          "branch_name": "unattached-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_output_dir\"}"
        },
        "execution_time": 0.004009246826171875,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch at Root Directory (Boundary Case)",
        "purpose": "测试边界情况：尝试在系统根目录中创建分支（模拟最小权限环境下的行为）。",
        "args": {
          "repo_path": "D:\\",
          "branch_name": "root-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.005994558334350586,
        "is_functional_test": false
      }
    ],
    "git_checkout": [
      {
        "case_name": "Checkout to Valid Branch in Initialized Repository",
        "purpose": "验证在已初始化的仓库中切换到指定有效分支的基本功能是否正常。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_folder",
          "branch_name": "feature-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_folder\"}"
        },
        "execution_time": 0.0033686161041259766,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout Using Default Repo Path and Default Branch Name",
        "purpose": "验证使用默认参数（无 repo_path，使用之前初始化的路径）和默认分支名进行 checkout 是否成功。",
        "args": {
          "repo_path": null,
          "branch_name": "feature-branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: 1 validation error for git_checkoutArguments\nrepo_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.003005504608154297,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout to Nonexistent Branch",
        "purpose": "测试尝试切换到不存在的分支时是否能正确返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_folder",
          "branch_name": "nonexistent-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_folder\"}"
        },
        "execution_time": 0.003000497817993164,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout in Repository with Special Characters in Path",
        "purpose": "验证在包含特殊字符的路径仓库中切换分支是否成功。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output@folder#1",
          "branch_name": "feature-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output@folder#1\"}"
        },
        "execution_time": 0.0070002079010009766,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout Without Initializing Repository First",
        "purpose": "测试在未初始化 Git 仓库的情况下执行 checkout 是否能优雅处理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\uninitialized_dir",
          "branch_name": "feature-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\uninitialized_dir\"}"
        },
        "execution_time": 0.0046842098236083984,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout in Read-Only Repository Directory",
        "purpose": "验证工具在只读目录中的 Git 仓库切换分支时是否能正确处理权限问题。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "branch_name": "feature-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(1)\\n  cmdline: git checkout feature-branch\\n  stderr: 'error: pathspec 'feature-branch' did not match any file(s) known to git'\"}"
        },
        "execution_time": 0.14329123497009277,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout with Null or Empty Repo Path",
        "purpose": "测试传入空或 null 的 repo_path 参数时工具是否抛出合理错误。",
        "args": {
          "repo_path": "",
          "branch_name": "feature-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_output_dir\"}"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout with Long Branch Name Containing Special Characters",
        "purpose": "测试分支名称长度极限及特殊字符支持情况下的 checkout 行为。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_folder",
          "branch_name": "this-is-a-very-long-branch-name-with-special-characters!@#$%^&*()"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_folder\"}"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      }
    ],
    "git_diff": [
      {
        "case_name": "Compare Differences Between Two Branches Using Default Repo",
        "purpose": "验证工具能否在未指定 repo_path 的情况下，正确比较两个分支的差异。",
        "args": {
          "source_ref": "main",
          "target_ref": "feature-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_output_dir\"}"
        },
        "execution_time": 0.004999876022338867,
        "is_functional_test": true
      },
      {
        "case_name": "Compare Differences Between Two Commits in Specified Repository",
        "purpose": "验证工具可以正确比较指定仓库中两个提交之间的差异。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_folder",
          "source_ref": "abc1234",
          "target_ref": "def5678"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_folder\"}"
        },
        "execution_time": 0.003995656967163086,
        "is_functional_test": true
      },
      {
        "case_name": "Compare Branch and Commit in Valid Repository",
        "purpose": "验证工具是否支持一个参数为分支、另一个为提交哈希的混合比较模式。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output@folder#1",
          "source_ref": "main",
          "target_ref": "ghi90ab"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output@folder#1\"}"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Diff on Nonexistent Branch",
        "purpose": "测试当目标或源引用不存在时，工具是否能优雅处理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_folder",
          "source_ref": "nonexistent-branch",
          "target_ref": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_folder\"}"
        },
        "execution_time": 0.002999544143676758,
        "is_functional_test": false
      },
      {
        "case_name": "Run Git Diff in Read-Only Repository",
        "purpose": "验证工具在只读仓库目录下执行 diff 操作时的行为。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "source_ref": "main",
          "target_ref": "feature-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff main..feature-branch\\n  stderr: 'fatal: ambiguous argument 'main..feature-branch': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.10400152206420898,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff with Special Characters in Ref Names",
        "purpose": "测试包含特殊字符的分支/提交名称是否被正确解析并用于比较。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_folder",
          "source_ref": "release/v1.0@beta",
          "target_ref": "dev#experimental"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_folder\"}"
        },
        "execution_time": 0.004491090774536133,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Without Initializing Repository",
        "purpose": "测试未初始化 Git 仓库的情况下调用 git_diff 是否返回合理错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_dir",
          "source_ref": "main",
          "target_ref": "feature-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff main..feature-branch\\n  stderr: 'fatal: ambiguous argument 'main..feature-branch': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.14242911338806152,
        "is_functional_test": false
      },
      {
        "case_name": "Diff Comparison of Same Branch or Commit",
        "purpose": "验证工具对相同分支或提交进行 diff 时返回空结果或无差异信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_folder",
          "source_ref": "main",
          "target_ref": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_folder\"}"
        },
        "execution_time": 0.003932476043701172,
        "is_functional_test": true
      }
    ],
    "git_show": [
      {
        "case_name": "Show Details of a Specific Commit",
        "purpose": "验证工具能够正确显示指定提交的详细信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_folder",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_folder\"}"
        },
        "execution_time": 0.0041735172271728516,
        "is_functional_test": true
      },
      {
        "case_name": "Show Commit Details with Default Repo Path",
        "purpose": "验证工具在未指定 repo_path 时使用默认仓库路径并成功显示提交信息。",
        "args": {
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_output_dir\"}"
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": true
      },
      {
        "case_name": "Show Commit with Invalid Commit Hash",
        "purpose": "测试工具在提供无效提交哈希时是否能优雅地处理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_folder",
          "commit_hash": "invalid_hash_123"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_folder\"}"
        },
        "execution_time": 0.008007287979125977,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit in Non-Existent Git Repository",
        "purpose": "测试工具在指定的仓库路径不存在时是否能正确返回错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_dir",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git show a1b2c3d4\\n  stderr: 'fatal: ambiguous argument 'a1b2c3d4': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.11947298049926758,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit in Read-Only Repository",
        "purpose": "验证工具在只读仓库中是否能正常显示提交信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git show a1b2c3d4\\n  stderr: 'fatal: ambiguous argument 'a1b2c3d4': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.15070199966430664,
        "is_functional_test": true
      },
      {
        "case_name": "Show Commit with Special Characters in Commit Hash",
        "purpose": "测试工具是否能正确处理包含特殊字符的提交哈希。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_folder",
          "commit_hash": "a1b2c3!@#"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_folder\"}"
        },
        "execution_time": 0.0039980411529541016,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit in Repository with Special Characters in Path",
        "purpose": "验证路径中包含特殊字符的仓库是否能正常显示提交信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output@folder#1",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output@folder#1\"}"
        },
        "execution_time": 0.00500798225402832,
        "is_functional_test": true
      },
      {
        "case_name": "Show Commit with Empty Commit Hash",
        "purpose": "测试工具在提交哈希为空时是否能正确抛出错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_folder",
          "commit_hash": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"commit_hash must be a non-empty string.\"}"
        },
        "execution_time": 0.00800013542175293,
        "is_functional_test": false
      }
    ],
    "text_append_to_file": [
      {
        "case_name": "Append Content to New File",
        "purpose": "验证工具可以成功将内容追加到一个新创建的文件中。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_append_file.txt",
          "content": "\nThis is the first line appended."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Appended content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_append_file.txt\"}"
        },
        "execution_time": 0.00799870491027832,
        "is_functional_test": true
      },
      {
        "case_name": "Append Content to Existing File",
        "purpose": "验证工具可以成功将内容追加到已存在的文件中。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer\\testSystem\\testFiles\\existing_append_file.txt",
          "content": "\nThis is an additional line."
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"[Errno 2] No such file or directory: 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\existing_append_file.txt'\"}"
        },
        "execution_time": 0.0050013065338134766,
        "is_functional_test": true
      },
      {
        "case_name": "Append Empty Content to File",
        "purpose": "测试尝试追加空内容时是否能正确抛出错误。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_file.txt",
          "content": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"content must be a non-empty string.\"}"
        },
        "execution_time": 0.004998445510864258,
        "is_functional_test": false
      },
      {
        "case_name": "Append with Special Characters in File Path",
        "purpose": "测试路径中包含特殊字符的文件是否能被正确追加内容。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\file_with_@#$_special.txt",
          "content": "\nContent appended to a file with special characters in path."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Appended content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\file_with_@#$_special.txt\"}"
        },
        "execution_time": 0.007999420166015625,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Append to Read-Only File",
        "purpose": "验证工具在尝试向只读文件追加内容时是否能够正确处理错误。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\locked_file.txt",
          "content": "\nThis should fail because the file is read-only."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Appended content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\\\\locked_file.txt\"}"
        },
        "execution_time": 0.010000944137573242,
        "is_functional_test": false
      },
      {
        "case_name": "Append with Null or Invalid File Path",
        "purpose": "测试传入空或无效文件路径时工具是否能抛出合理错误。",
        "args": {
          "file_path": "",
          "content": "\nTest content with invalid file path."
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"file_path must be a non-empty string.\"}"
        },
        "execution_time": 0.00800180435180664,
        "is_functional_test": false
      },
      {
        "case_name": "Append Content to Nonexistent File",
        "purpose": "验证当目标文件不存在时，工具是否能创建并追加内容。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_append.txt",
          "content": "\nContent for a new file that did not exist before."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Appended content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_append.txt\"}"
        },
        "execution_time": 0.006998300552368164,
        "is_functional_test": true
      },
      {
        "case_name": "Append Long Content to File",
        "purpose": "测试追加大量文本内容时工具的行为。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\long_content_append.txt",
          "content": "\nThis is a very long content line repeated multiple times for testing purposes. This is a very long content line repeated multiple times for testing purposes."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Appended content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\long_content_append.txt\"}"
        },
        "execution_time": 0.007811307907104492,
        "is_functional_test": true
      }
    ],
    "text_extract_regex": [
      {
        "case_name": "Basic Regex Extraction from Valid Text",
        "purpose": "验证工具能否从给定文本中提取第一个匹配的正则表达式模式。",
        "args": {
          "text": "Commit: a1b2c3d4",
          "pattern": "commit (\\w+)"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"No match found for pattern 'commit (\\\\w+)' in the provided text.\"}"
        },
        "execution_time": 0.009887218475341797,
        "is_functional_test": true
      },
      {
        "case_name": "Regex Match with Case Insensitivity Flag",
        "purpose": "测试正则表达式是否支持不区分大小写的匹配。",
        "args": {
          "text": "Error occurred at 10:45 AM",
          "pattern": "(?i)error"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"no such group\"}"
        },
        "execution_time": 0.003000497817993164,
        "is_functional_test": true
      },
      {
        "case_name": "No Match Found in Text",
        "purpose": "验证当没有匹配项时，工具是否抛出ValueError。",
        "args": {
          "text": "This is a sample text without any match.",
          "pattern": "\\d{4}"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"No match found for pattern '\\\\d{4}' in the provided text.\"}"
        },
        "execution_time": 0.0029997825622558594,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Regular Expression Pattern",
        "purpose": "测试无效的正则表达式模式是否被正确捕获并返回错误。",
        "args": {
          "text": "Some random text here",
          "pattern": "[a-z"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"unterminated character set at position 0\"}"
        },
        "execution_time": 0.004001140594482422,
        "is_functional_test": false
      },
      {
        "case_name": "Empty Text Input",
        "purpose": "测试空文本输入是否引发参数验证错误。",
        "args": {
          "text": "",
          "pattern": "\\w+"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"text must be a non-empty string.\"}"
        },
        "execution_time": 0.006008148193359375,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Regex Pattern",
        "purpose": "验证包含特殊字符的正则表达式是否能正常处理。",
        "args": {
          "text": "URL: https://example.com/page?query=test",
          "pattern": "https?:\\/\\/[^\\s]+"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"no such group\"}"
        },
        "execution_time": 0.004991769790649414,
        "is_functional_test": true
      },
      {
        "case_name": "Boundary Test - Match Entire String",
        "purpose": "测试正则表达式匹配整个字符串的情况。",
        "args": {
          "text": "abc123xyz",
          "pattern": "^abc\\d+xyz$"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"no such group\"}"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt Code Injection via Pattern",
        "purpose": "验证工具是否能够防止通过正则表达式进行潜在的代码注入攻击。",
        "args": {
          "text": "Sample text with no code execution",
          "pattern": ".*; rm -rf / .*"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"No match found for pattern '.*; rm -rf / .*' in the provided text.\"}"
        },
        "execution_time": 0.0070018768310546875,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 119
}