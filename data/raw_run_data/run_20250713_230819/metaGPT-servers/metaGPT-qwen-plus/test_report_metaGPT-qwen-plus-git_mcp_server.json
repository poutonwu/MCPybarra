{
  "server_name": "git_mcp_server",
  "parent_dir": "metaGPT-qwen-plus",
  "report_name": "metaGPT-qwen-plus-git_mcp_server",
  "server_path": "workspace\\metaGPT-servers\\metaGPT-qwen-plus\\git_mcp_server.py",
  "timestamp": "2025-07-13T23:08:22.628174",
  "tools": [
    {
      "name": "git_init",
      "description": "Initialize a new Git repository.\n\n    Args:\n        path: The directory path where to create the repository.\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_initArguments",
        "type": "object"
      }
    },
    {
      "name": "git_status",
      "description": "Get the status of a Git repository.\n\n    Args:\n        path: Path to the repository.\n\n    Returns:\n        A string containing the status output.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_statusArguments",
        "type": "object"
      }
    },
    {
      "name": "git_add",
      "description": "Add files to the staging area.\n\n    Args:\n        path: Path to the repository.\n        file_pattern: Pattern of files to add (default is all files).\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "file_pattern": {
            "default": ".",
            "title": "File Pattern",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_addArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_unstaged",
      "description": "Show differences in unstaged changes.\n\n    Args:\n        path: Path to the repository.\n\n    Returns:\n        A string containing the diff output.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_diff_unstagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_staged",
      "description": "Show differences in staged changes.\n\n    Args:\n        path: Path to the repository.\n\n    Returns:\n        A string containing the diff output.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_diff_stagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff",
      "description": "Compare two commits or branches.\n\n    Args:\n        path: Path to the repository.\n        commit_range: Range of commits to compare (e.g., 'HEAD~2..HEAD').\n\n    Returns:\n        A string containing the diff output.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "commit_range": {
            "title": "Commit Range",
            "type": "string"
          }
        },
        "required": [
          "path",
          "commit_range"
        ],
        "title": "git_diffArguments",
        "type": "object"
      }
    },
    {
      "name": "git_commit",
      "description": "Commit changes in the repository.\n\n    Args:\n        path: Path to the repository.\n        message: Commit message.\n        author: Optional author name and email (format: 'Name <email>').\n\n    Returns:\n        A string containing the commit hash.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "message": {
            "title": "Message",
            "type": "string"
          },
          "author": {
            "default": null,
            "title": "Author",
            "type": "string"
          }
        },
        "required": [
          "path",
          "message"
        ],
        "title": "git_commitArguments",
        "type": "object"
      }
    },
    {
      "name": "git_reset",
      "description": "Unstage changes in the repository.\n\n    Args:\n        path: Path to the repository.\n        file_path: Optional specific file to unstage. If None, unstages all.\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "file_path": {
            "default": null,
            "title": "File Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_resetArguments",
        "type": "object"
      }
    },
    {
      "name": "git_log",
      "description": "View commit history.\n\n    Args:\n        path: Path to the repository.\n        max_count: Maximum number of commits to show (default: 10).\n\n    Returns:\n        A string containing the commit history.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "max_count": {
            "default": 10,
            "title": "Max Count",
            "type": "integer"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_logArguments",
        "type": "object"
      }
    },
    {
      "name": "git_create_branch",
      "description": "Create a new branch.\n\n    Args:\n        path: Path to the repository.\n        branch_name: Name of the new branch.\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "path",
          "branch_name"
        ],
        "title": "git_create_branchArguments",
        "type": "object"
      }
    },
    {
      "name": "git_checkout",
      "description": "Switch to a different branch.\n\n    Args:\n        path: Path to the repository.\n        branch_name: Name of the branch to switch to.\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "path",
          "branch_name"
        ],
        "title": "git_checkoutArguments",
        "type": "object"
      }
    },
    {
      "name": "git_show",
      "description": "Display details of a specific commit.\n\n    Args:\n        path: Path to the repository.\n        commit_hash: Hash of the commit to show.\n\n    Returns:\n        A string containing the commit details.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "commit_hash": {
            "title": "Commit Hash",
            "type": "string"
          }
        },
        "required": [
          "path",
          "commit_hash"
        ],
        "title": "git_showArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "git_init": [
      {
        "case_name": "Initialize Git Repository in Valid Directory",
        "purpose": "验证工具能够在指定的有效路径中成功初始化一个新的 Git 仓库",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\"
        },
        "execution_time": 0.2646493911743164,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository in Empty Path",
        "purpose": "测试工具对空路径参数的处理",
        "args": {
          "path": ""
        },
        "response": {
          "result": "Repository initialized at "
        },
        "execution_time": 0.18788576126098633,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository in Non-Existent Path",
        "purpose": "测试工具对无效路径的处理",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir\\"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir\\"
        },
        "execution_time": 0.1536719799041748,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository in Hidden File Path",
        "purpose": "测试工具是否能处理包含隐藏文件的路径",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_new_file.txt"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_new_file.txt"
        },
        "execution_time": 0.17914104461669922,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository with Special Characters in Path",
        "purpose": "测试工具是否能处理包含特殊字符的路径",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$_filename test.txt"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$_filename test.txt"
        },
        "execution_time": 0.1676502227783203,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository in Read-Only Directory",
        "purpose": "测试工具对无写权限路径的处理能力",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\"
        },
        "execution_time": 0.1805131435394287,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository in Very Long Path",
        "purpose": "测试工具对超长路径的支持情况",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\this_is_a_very_long_file_name_that_tests_the_boundary_conditions_of_the_tool.txt"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\this_is_a_very_long_file_name_that_tests_the_boundary_conditions_of_the_tool.txt"
        },
        "execution_time": 0.15912079811096191,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository with Null Path",
        "purpose": "测试工具对 null 参数的处理",
        "args": {
          "path": null
        },
        "response": {
          "error": "ToolException: Error executing tool git_init: 1 validation error for git_initArguments\npath\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.003000497817993164,
        "is_functional_test": false
      }
    ],
    "git_status": [
      {
        "case_name": "Get Git Status in Initialized Repository",
        "purpose": "验证工具能够正确获取已初始化 Git 仓库的状态信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\t.hidden_test_file.txt\n\tapp.ico\n\tmodules.xml\n\tnature.jpeg\n\tnature_converted.png\n\tnonname.html\n\tpaper1.pdf\n\tpresent.html\n\tre2.doc\n\trule1.pdf\n\tswe.pptx\n\ttest_mskanji.csv\n\txue.jpg\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.19228386878967285,
        "is_functional_test": true
      },
      {
        "case_name": "Get Git Status in Non-Initialized Directory",
        "purpose": "测试工具对未初始化 Git 仓库的目录处理能力",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\non_git_dir\\"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\non_git_dir\\"
        },
        "execution_time": 0.003998756408691406,
        "is_functional_test": false
      },
      {
        "case_name": "Get Git Status with Invalid Path",
        "purpose": "测试工具对无效路径参数的处理",
        "args": {
          "path": "invalid_path_123456"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: Invalid repository path: invalid_path_123456"
        },
        "execution_time": 0.00400233268737793,
        "is_functional_test": false
      },
      {
        "case_name": "Get Git Status with Null Path",
        "purpose": "测试工具对 null 参数的处理",
        "args": {
          "path": null
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: 1 validation error for git_statusArguments\npath\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.005992412567138672,
        "is_functional_test": false
      },
      {
        "case_name": "Get Git Status in Read-Only Directory",
        "purpose": "测试工具在无写权限目录中获取 Git 状态的能力",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      },
      {
        "case_name": "Get Git Status with Special Characters in Path",
        "purpose": "测试工具是否能处理包含特殊字符的路径下的 Git 状态查询",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$_filename test.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$_filename test.txt"
        },
        "execution_time": 0.008005380630493164,
        "is_functional_test": true
      },
      {
        "case_name": "Get Git Status in Very Long Path",
        "purpose": "测试工具对超长路径下 Git 状态的支持情况",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\this_is_a_very_long_file_name_that_tests_the_boundary_conditions_of_the_tool.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\this_is_a_very_long_file_name_that_tests_the_boundary_conditions_of_the_tool.txt"
        },
        "execution_time": 0.004995107650756836,
        "is_functional_test": true
      },
      {
        "case_name": "Get Git Status in Hidden File Path",
        "purpose": "测试工具是否能处理包含隐藏文件路径的 Git 状态查询",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_new_file.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_new_file.txt"
        },
        "execution_time": 0.003998756408691406,
        "is_functional_test": true
      }
    ],
    "git_add": [
      {
        "case_name": "Add All Files to Staging Area in Valid Repository",
        "purpose": "验证工具能够在已初始化的 Git 仓库中成功将所有文件添加到暂存区",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\"
        },
        "response": {
          "result": "Added '.' to staging area in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\"
        },
        "execution_time": 0.9552733898162842,
        "is_functional_test": true
      },
      {
        "case_name": "Add Specific File Pattern to Staging Area",
        "purpose": "验证工具能够正确使用文件匹配模式将指定类型文件添加到暂存区",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\",
          "file_pattern": "*.txt"
        },
        "response": {
          "result": "Added '*.txt' to staging area in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\"
        },
        "execution_time": 0.16110754013061523,
        "is_functional_test": true
      },
      {
        "case_name": "Add Hidden Files to Staging Area",
        "purpose": "测试工具是否能处理包含隐藏文件的路径并将其添加到暂存区",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\",
          "file_pattern": ".*"
        },
        "response": {
          "result": "Added '.*' to staging area in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\"
        },
        "execution_time": 0.1372697353363037,
        "is_functional_test": true
      },
      {
        "case_name": "Add Files with Special Characters in Path",
        "purpose": "测试工具是否能处理包含特殊字符的文件路径并添加到暂存区",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$_filename test.txt",
          "file_pattern": "."
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$_filename test.txt"
        },
        "execution_time": 0.004997968673706055,
        "is_functional_test": true
      },
      {
        "case_name": "Add Files in Read-Only Directory",
        "purpose": "测试工具在无写权限目录下执行 git add 的错误处理能力",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\",
          "file_pattern": "."
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\"
        },
        "execution_time": 0.002995014190673828,
        "is_functional_test": false
      },
      {
        "case_name": "Add Files with Null Path",
        "purpose": "测试工具对 null 路径参数的处理",
        "args": {
          "path": null,
          "file_pattern": "."
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: 1 validation error for git_addArguments\npath\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.004503011703491211,
        "is_functional_test": false
      },
      {
        "case_name": "Add Files in Non-Existent Repository",
        "purpose": "测试工具对无效或不存在的 Git 仓库路径的处理",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_repo\\",
          "file_pattern": "."
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_repo\\"
        },
        "execution_time": 0.0070037841796875,
        "is_functional_test": false
      },
      {
        "case_name": "Add Very Long File Name to Staging Area",
        "purpose": "测试工具对超长文件名路径的支持情况",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\this_is_a_very_long_file_name_that_tests_the_boundary_conditions_of_the_tool.txt",
          "file_pattern": "."
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\this_is_a_very_long_file_name_that_tests_the_boundary_conditions_of_the_tool.txt"
        },
        "execution_time": 0.00500035285949707,
        "is_functional_test": true
      }
    ],
    "git_diff_unstaged": [
      {
        "case_name": "Show Unstaged Diff in Initialized Repository",
        "purpose": "验证工具能够正确显示已初始化 Git 仓库中未暂存的更改差异",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.14281177520751953,
        "is_functional_test": true
      },
      {
        "case_name": "Show Unstaged Diff with Invalid Repository Path",
        "purpose": "测试工具对无效 Git 仓库路径的处理能力",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\non_git_dir\\"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\non_git_dir\\"
        },
        "execution_time": 0.0039980411529541016,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Diff with Null Path",
        "purpose": "测试工具对 null 参数的处理",
        "args": {
          "path": null
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: 1 validation error for git_diff_unstagedArguments\npath\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.004011392593383789,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Diff with Special Characters in Path",
        "purpose": "测试工具是否能处理包含特殊字符的路径下的 unstaged diff 查询",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$_filename test.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$_filename test.txt"
        },
        "execution_time": 0.006998300552368164,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Diff in Read-Only Directory",
        "purpose": "测试工具在无写权限目录中获取 unstaged diff 的能力",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\"
        },
        "execution_time": 0.003728151321411133,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Diff in Very Long Path",
        "purpose": "测试工具对超长路径下 unstaged diff 的支持情况",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\this_is_a_very_long_file_name_that_tests_the_boundary_conditions_of_the_tool.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\this_is_a_very_long_file_name_that_tests_the_boundary_conditions_of_the_tool.txt"
        },
        "execution_time": 0.00418543815612793,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Diff in Hidden File Path",
        "purpose": "测试工具是否能处理包含隐藏文件路径的 unstaged diff 查询",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_new_file.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_new_file.txt"
        },
        "execution_time": 0.005988359451293945,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Diff Without Any Changes",
        "purpose": "验证工具在没有 unstaged 更改时返回空或适当提示信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.15403056144714355,
        "is_functional_test": true
      }
    ],
    "git_commit": [
      {
        "case_name": "Commit Changes in Valid Repository with Minimal Parameters",
        "purpose": "验证在有效 Git 仓库中使用最小参数集提交更改的基本功能",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\",
          "message": "Initial commit"
        },
        "response": {
          "result": "Committed to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\ with message: Initial commit"
        },
        "execution_time": 0.3535430431365967,
        "is_functional_test": true
      },
      {
        "case_name": "Commit Changes in Valid Repository with Author",
        "purpose": "验证在有效 Git 仓库中使用自定义作者信息提交更改的功能",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\",
          "message": "Commit with author",
          "author": "John Doe <john.doe@example.com>"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Cmd('git') failed due to: exit code(1)\n  cmdline: git commit -m Commit with author --author=John Doe <john.doe@example.com>\n  stdout: 'On branch master\nChanges not staged for commit:\n  (use \"git add/rm <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tdeleted:    test_mskanji.csv\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tempty_pages_output.pdf\n\textracted_basic.pdf\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")'"
        },
        "execution_time": 0.14967989921569824,
        "is_functional_test": true
      },
      {
        "case_name": "Commit Changes in Non-Existent Repository",
        "purpose": "测试工具对无效路径（不存在的仓库）的处理能力",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir\\",
          "message": "Test commit in non-existent repo"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Cmd('git') failed due to: exit code(1)\n  cmdline: git commit -m Test commit in non-existent repo\n  stdout: 'On branch master\n\nInitial commit\n\nnothing to commit (create/copy files and use \"git add\" to track)'"
        },
        "execution_time": 0.18947720527648926,
        "is_functional_test": false
      },
      {
        "case_name": "Commit Changes with Empty Message",
        "purpose": "测试工具对空提交消息的处理能力",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\",
          "message": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Cmd('git') failed due to: exit code(1)\n  cmdline: git commit -m \n  stdout: 'On branch master\nChanges not staged for commit:\n  (use \"git add/rm <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tdeleted:    test_mskanji.csv\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tempty_pages_output.pdf\n\textracted_basic.pdf\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")'"
        },
        "execution_time": 0.22152161598205566,
        "is_functional_test": false
      },
      {
        "case_name": "Commit Changes with Null Path",
        "purpose": "测试工具对 null 路径参数的处理",
        "args": {
          "path": null,
          "message": "Test commit with null path"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: 1 validation error for git_commitArguments\npath\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.007508277893066406,
        "is_functional_test": false
      },
      {
        "case_name": "Commit Changes with Special Characters in Path",
        "purpose": "测试工具是否能处理包含特殊字符的路径下的提交操作",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$_filename test.txt",
          "message": "Commit in special path"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$_filename test.txt"
        },
        "execution_time": 0.01800227165222168,
        "is_functional_test": true
      },
      {
        "case_name": "Commit Changes in Read-Only Directory",
        "purpose": "测试工具在无写权限目录中执行提交操作的能力",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\",
          "message": "Test commit in read-only directory"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\"
        },
        "execution_time": 0.006003141403198242,
        "is_functional_test": false
      },
      {
        "case_name": "Commit Changes with Long Commit Message",
        "purpose": "测试工具对超长提交消息的处理能力",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\",
          "message": "This is a very long commit message that exceeds typical length limits and tests how the system handles long messages. This is only for testing purposes and should not cause any errors."
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Cmd('git') failed due to: exit code(1)\n  cmdline: git commit -m This is a very long commit message that exceeds typical length limits and tests how the system handles long messages. This is only for testing purposes and should not cause any errors.\n  stdout: 'On branch master\nChanges not staged for commit:\n  (use \"git add/rm <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tdeleted:    test_mskanji.csv\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tempty_pages_output.pdf\n\textracted_basic.pdf\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")'"
        },
        "execution_time": 0.1738736629486084,
        "is_functional_test": true
      }
    ],
    "git_diff_staged": [
      {
        "case_name": "Show Staged Changes in Valid Repository",
        "purpose": "验证工具能够在已初始化的 Git 仓库中正确显示暂存区的差异信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.1617276668548584,
        "is_functional_test": true
      },
      {
        "case_name": "Show Staged Changes with Invalid Path",
        "purpose": "测试工具对无效路径参数的处理能力",
        "args": {
          "path": "invalid_path_123456"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: Invalid repository path: invalid_path_123456"
        },
        "execution_time": 0.003000497817993164,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes in Non-Initialized Directory",
        "purpose": "测试工具对未初始化 Git 仓库的目录处理能力",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\non_git_dir\\"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\non_git_dir\\"
        },
        "execution_time": 0.004000663757324219,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes with Null Path",
        "purpose": "测试工具对 null 参数的处理",
        "args": {
          "path": null
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: 1 validation error for git_diff_stagedArguments\npath\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.0069980621337890625,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes in Read-Only Directory",
        "purpose": "测试工具在无写权限目录中获取暂存区差异的能力",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\"
        },
        "execution_time": 0.00699925422668457,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes with Special Characters in Path",
        "purpose": "测试工具是否能处理包含特殊字符的路径下的暂存区差异查询",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$_filename test.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$_filename test.txt"
        },
        "execution_time": 0.005002260208129883,
        "is_functional_test": true
      },
      {
        "case_name": "Show Staged Changes in Very Long Path",
        "purpose": "测试工具对超长路径下暂存区差异的支持情况",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\this_is_a_very_long_file_name_that_tests_the_boundary_conditions_of_the_tool.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\this_is_a_very_long_file_name_that_tests_the_boundary_conditions_of_the_tool.txt"
        },
        "execution_time": 0.003000497817993164,
        "is_functional_test": true
      },
      {
        "case_name": "Show Staged Changes in Hidden File Path",
        "purpose": "测试工具是否能处理包含隐藏文件路径的暂存区差异查询",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_new_file.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_new_file.txt"
        },
        "execution_time": 0.004001140594482422,
        "is_functional_test": true
      }
    ],
    "git_log": [
      {
        "case_name": "View Commit History in Valid Repository",
        "purpose": "验证工具能够成功在有效的 Git 仓库中查看提交历史（使用默认 max_count）",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\"
        },
        "response": {
          "result": "commit a62cf0415f1218e4b5c3e4b91e4c7b0cc2e17cc7\nAuthor: pouchine <1291980381@qq.com>\nDate:   Sun Jul 13 23:10:03 2025 +0800\n\n    Initial commit"
        },
        "execution_time": 0.15729379653930664,
        "is_functional_test": true
      },
      {
        "case_name": "View Commit History with Custom Max Count",
        "purpose": "验证工具能够根据指定的 max_count 参数显示提交历史",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\",
          "max_count": 5
        },
        "response": {
          "result": "commit a62cf0415f1218e4b5c3e4b91e4c7b0cc2e17cc7\nAuthor: pouchine <1291980381@qq.com>\nDate:   Sun Jul 13 23:10:03 2025 +0800\n\n    Initial commit"
        },
        "execution_time": 0.13427019119262695,
        "is_functional_test": true
      },
      {
        "case_name": "View Commit History in Non-Initialized Directory",
        "purpose": "测试工具对未初始化 Git 仓库的目录处理能力",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\non_git_dir\\"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\non_git_dir\\"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      },
      {
        "case_name": "View Commit History with Invalid Path",
        "purpose": "测试工具对无效路径参数的处理",
        "args": {
          "path": "invalid_path_123456"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Invalid repository path: invalid_path_123456"
        },
        "execution_time": 0.005002498626708984,
        "is_functional_test": false
      },
      {
        "case_name": "View Commit History with Null Path",
        "purpose": "测试工具对 null 参数的处理",
        "args": {
          "path": null
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: 1 validation error for git_logArguments\npath\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.004989147186279297,
        "is_functional_test": false
      },
      {
        "case_name": "View Commit History with Zero Max Count",
        "purpose": "测试工具对 max_count = 0 的边界情况处理",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\",
          "max_count": 0
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.16005229949951172,
        "is_functional_test": true
      },
      {
        "case_name": "View Commit History with Negative Max Count",
        "purpose": "测试工具对负数 max_count 参数的处理",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\",
          "max_count": -5
        },
        "response": {
          "result": "commit a62cf0415f1218e4b5c3e4b91e4c7b0cc2e17cc7\nAuthor: pouchine <1291980381@qq.com>\nDate:   Sun Jul 13 23:10:03 2025 +0800\n\n    Initial commit"
        },
        "execution_time": 0.17320036888122559,
        "is_functional_test": false
      },
      {
        "case_name": "View Commit History with Special Characters in Path",
        "purpose": "测试工具是否能处理包含特殊字符的路径下的提交历史查看",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$_filename test.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$_filename test.txt"
        },
        "execution_time": 0.004998922348022461,
        "is_functional_test": true
      }
    ],
    "git_create_branch": [
      {
        "case_name": "Create Branch in Initialized Repository",
        "purpose": "验证工具能够在已初始化的 Git 仓库中成功创建一个新分支",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\",
          "branch_name": "feature/test-branch"
        },
        "response": {
          "result": "Created branch 'feature/test-branch' in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\"
        },
        "execution_time": 0.1703777313232422,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch with Empty Name",
        "purpose": "测试工具对空分支名称参数的处理",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\",
          "branch_name": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Cmd('git') failed due to: exit code(128)\n  cmdline: git branch \n  stderr: 'fatal: '' is not a valid branch name\nhint: See `man git check-ref-format`\nhint: Disable this message with \"git config advice.refSyntax false\"'"
        },
        "execution_time": 0.18023228645324707,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch in Non-Existent Path",
        "purpose": "测试工具对无效路径的处理能力",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir\\",
          "branch_name": "feature/invalid-path-test"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Cmd('git') failed due to: exit code(128)\n  cmdline: git branch feature/invalid-path-test\n  stderr: 'fatal: not a valid object name: 'master''"
        },
        "execution_time": 0.18662238121032715,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch in Read-Only Directory",
        "purpose": "测试工具在无写权限目录下创建分支的能力",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\",
          "branch_name": "feature/readonly-test"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\"
        },
        "execution_time": 0.006988525390625,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Special Characters in Name",
        "purpose": "测试工具是否能处理包含特殊字符的分支名称",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\",
          "branch_name": "feature@#$_test-branch"
        },
        "response": {
          "result": "Created branch 'feature@#$_test-branch' in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\"
        },
        "execution_time": 0.20495963096618652,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch in Hidden File Path",
        "purpose": "测试工具是否能处理隐藏文件路径下的分支创建",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_new_file.txt",
          "branch_name": "feature/hidden-path-test"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_new_file.txt"
        },
        "execution_time": 0.004999876022338867,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch in Very Long Path",
        "purpose": "测试工具对超长路径支持情况下的分支创建",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\this_is_a_very_long_file_name_that_tests_the_boundary_conditions_of_the_tool.txt",
          "branch_name": "feature/long-path-test"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\this_is_a_very_long_file_name_that_tests_the_boundary_conditions_of_the_tool.txt"
        },
        "execution_time": 0.005000591278076172,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch with Null Parameters",
        "purpose": "测试工具对 null 参数的处理",
        "args": {
          "path": null,
          "branch_name": null
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: 2 validation errors for git_create_branchArguments\npath\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type\nbranch_name\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.00500035285949707,
        "is_functional_test": false
      }
    ],
    "git_checkout": [
      {
        "case_name": "Checkout to Existing Branch in Valid Repository",
        "purpose": "验证工具能够在已初始化的 Git 仓库中成功切换到存在的分支",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\",
          "branch_name": "feature/test-branch"
        },
        "response": {
          "result": "Switched to branch 'feature/test-branch' in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\"
        },
        "execution_time": 0.15302562713623047,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout to Non-Existent Branch",
        "purpose": "测试工具尝试切换到不存在的分支时的行为",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\",
          "branch_name": "nonexistent_branch_123456"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout nonexistent_branch_123456\n  stderr: 'error: pathspec 'nonexistent_branch_123456' did not match any file(s) known to git'"
        },
        "execution_time": 0.13770270347595215,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout with Invalid Repository Path",
        "purpose": "测试工具在无效路径下执行 checkout 操作的错误处理能力",
        "args": {
          "path": "invalid_path_123456",
          "branch_name": "master"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Invalid repository path: invalid_path_123456"
        },
        "execution_time": 0.0040013790130615234,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout with Null Path Parameter",
        "purpose": "测试工具对 null 类型路径参数的处理",
        "args": {
          "path": null,
          "branch_name": "master"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: 1 validation error for git_checkoutArguments\npath\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.006000518798828125,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout with Empty Branch Name",
        "purpose": "测试工具对空分支名参数的处理",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\",
          "branch_name": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Cmd('git') failed due to: exit code(128)\n  cmdline: git checkout \n  stderr: 'fatal: empty string is not a valid pathspec. please use . instead if you meant to match all paths'"
        },
        "execution_time": 0.16994857788085938,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout in Read-Only Directory",
        "purpose": "测试工具在只读目录中执行 checkout 操作的能力",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\",
          "branch_name": "master"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\"
        },
        "execution_time": 0.0037064552307128906,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout with Special Characters in Branch Name",
        "purpose": "测试工具是否能处理包含特殊字符的分支名进行切换操作",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\",
          "branch_name": "feature@#$_test-branch"
        },
        "response": {
          "result": "Switched to branch 'feature@#$_test-branch' in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\"
        },
        "execution_time": 0.17052388191223145,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout in Hidden File Path",
        "purpose": "测试工具是否能处理隐藏文件路径下的分支切换操作",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_new_file.txt",
          "branch_name": "master"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.hidden_new_file.txt"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      }
    ],
    "git_diff": [
      {
        "case_name": "Compare Two Valid Commits in Initialized Repository",
        "purpose": "验证工具能够成功比较两个有效的提交之间的差异",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\",
          "commit_range": "HEAD~2..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff HEAD~2..HEAD\n  stderr: 'fatal: ambiguous argument 'HEAD~2..HEAD': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.1780242919921875,
        "is_functional_test": true
      },
      {
        "case_name": "Compare Commits with Invalid Path",
        "purpose": "测试工具对无效仓库路径的处理能力",
        "args": {
          "path": "invalid_path_123456",
          "commit_range": "HEAD~2..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Invalid repository path: invalid_path_123456"
        },
        "execution_time": 0.004999637603759766,
        "is_functional_test": false
      },
      {
        "case_name": "Compare Commits with Null Path",
        "purpose": "测试工具对 null 路径参数的处理",
        "args": {
          "path": null,
          "commit_range": "HEAD~2..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: 1 validation error for git_diffArguments\npath\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.009002447128295898,
        "is_functional_test": false
      },
      {
        "case_name": "Compare Commits with Empty Commit Range",
        "purpose": "测试工具对空提交范围参数的处理",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\",
          "commit_range": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff \n  stderr: 'fatal: ambiguous argument '': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.1784496307373047,
        "is_functional_test": false
      },
      {
        "case_name": "Compare Commits Using Special Characters in Path",
        "purpose": "测试工具是否能处理包含特殊字符的路径下的 diff 操作",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$_filename test.txt",
          "commit_range": "HEAD~2..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$_filename test.txt"
        },
        "execution_time": 0.005197048187255859,
        "is_functional_test": true
      },
      {
        "case_name": "Compare Commits in Read-Only Directory",
        "purpose": "测试工具在无写权限目录中执行 diff 的能力",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\",
          "commit_range": "HEAD~2..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\"
        },
        "execution_time": 0.002999544143676758,
        "is_functional_test": false
      },
      {
        "case_name": "Compare Commits with Very Long Commit Range",
        "purpose": "测试工具对超长提交范围字符串的支持情况",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\",
          "commit_range": "a_very_long_commit_range_string_that_tests_the_boundary_conditions_of_the_tool"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff a_very_long_commit_range_string_that_tests_the_boundary_conditions_of_the_tool\n  stderr: 'fatal: ambiguous argument 'a_very_long_commit_range_string_that_tests_the_boundary_conditions_of_the_tool': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.14952683448791504,
        "is_functional_test": true
      },
      {
        "case_name": "Compare Commits with Malicious File in .git Directory",
        "purpose": "测试工具是否能安全处理包含恶意文件的 .git 目录下的 diff 请求",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\malicious_file.txt",
          "commit_range": "HEAD~2..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\malicious_file.txt"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": false
      }
    ],
    "git_show": [
      {
        "case_name": "Show Details of a Valid Commit",
        "purpose": "验证工具能够成功显示一个有效提交的详细信息",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\",
          "commit_hash": "a819b89e3764fbe4d9e0b68755d372f38a33d6d8"
        },
        "response": {
          "error": "Tool call 'git_show' was cancelled."
        },
        "execution_time": 50.01037645339966,
        "is_functional_test": true
      },
      {
        "case_name": "Show Details with Invalid Path",
        "purpose": "测试工具对无效仓库路径的处理能力",
        "args": {
          "path": "invalid_path_123456",
          "commit_hash": "a819b89e3764fbe4d9e0b68755d372f38a33d6d8"
        },
        "response": {
          "error": "McpError: Connection closed"
        },
        "execution_time": 0.10420870780944824,
        "is_functional_test": false
      },
      {
        "case_name": "Show Details with Null Path",
        "purpose": "测试工具对 null 路径参数的处理",
        "args": {
          "path": null,
          "commit_hash": "a819b89e3764fbe4d9e0b68755d372f38a33d6d8"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0019991397857666016,
        "is_functional_test": false
      },
      {
        "case_name": "Show Details with Empty Path",
        "purpose": "测试工具对空路径参数的处理",
        "args": {
          "path": "",
          "commit_hash": "a819b89e3764fbe4d9e0b68755d372f38a33d6d8"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0010004043579101562,
        "is_functional_test": false
      },
      {
        "case_name": "Show Details with Invalid Commit Hash",
        "purpose": "测试工具对无效提交哈希值的处理",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\",
          "commit_hash": "invalid_commit_hash_123456"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0019991397857666016,
        "is_functional_test": false
      },
      {
        "case_name": "Show Details in Read-Only Repository",
        "purpose": "测试工具在只读 Git 仓库中显示提交详情的能力",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\",
          "commit_hash": "a819b89e3764fbe4d9e0b68755d372f38a33d6d8"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0009992122650146484,
        "is_functional_test": false
      },
      {
        "case_name": "Show Details with Special Characters in Path",
        "purpose": "测试工具是否能处理包含特殊字符的路径下的提交详情查询",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$_filename test.txt",
          "commit_hash": "a819b89e3764fbe4d9e0b68755d372f38a33d6d8"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.001001119613647461,
        "is_functional_test": true
      },
      {
        "case_name": "Show Details in Very Long Path",
        "purpose": "测试工具对超长路径下提交详情的支持情况",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\this_is_a_very_long_file_name_that_tests_the_boundary_conditions_of_the_tool.txt",
          "commit_hash": "a819b89e3764fbe4d9e0b68755d372f38a33d6d8"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.003003358840942383,
        "is_functional_test": true
      }
    ],
    "git_reset": [
      {
        "case_name": "Unstage All Changes in Valid Repository",
        "purpose": "验证工具能够在有效的 Git 仓库中成功取消暂存所有更改",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0010008811950683594,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage Specific File in Valid Repository",
        "purpose": "验证工具能够在有效的 Git 仓库中成功取消暂存指定文件",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0009992122650146484,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage Changes in Non-Existent Repository",
        "purpose": "测试工具对无效 Git 仓库路径的处理能力",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\non_git_dir\\"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0010008811950683594,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage Changes with Null Path",
        "purpose": "测试工具对 null 路径参数的处理",
        "args": {
          "path": null
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.00099945068359375,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage Changes in Read-Only Directory",
        "purpose": "测试工具在无写权限目录中取消暂存更改的能力",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage File with Special Characters in Path",
        "purpose": "测试工具是否能处理包含特殊字符的文件路径取消暂存操作",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$_filename test.txt",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$_filename test.txt"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.00099945068359375,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage Changes in Very Long Path",
        "purpose": "测试工具对超长路径下取消暂存的支持情况",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\this_is_a_very_long_file_name_that_tests_the_boundary_conditions_of_the_tool.txt"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0010035037994384766,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage Nonexistent File",
        "purpose": "测试工具对尝试取消暂存不存在文件的处理",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0010004043579101562,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 96
}