{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "deepseek-v3-mcp_git_repository_manager",
  "server_path": "workspace/pipeline-output-servers/deepseek-v3/mcp_git_repository_manager/refined/server.py",
  "timestamp": "2025-07-16T12:07:28.771994",
  "tools": [
    {
      "name": "git_init",
      "description": "\n    Initialize a new Git repository in the specified directory.\n\n    Args:\n        directory: The path where the Git repository will be initialized.\n\n    Returns:\n        A string indicating the success or failure of the initialization.\n\n    Raises:\n        ValueError: If the directory is invalid.\n        GitCommandError: If Git initialization fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          }
        },
        "required": [
          "directory"
        ],
        "title": "git_initArguments",
        "type": "object"
      }
    },
    {
      "name": "text_write",
      "description": "\n    Write content to a specified file.\n\n    Args:\n        file_path: The path to the file that should be created or overwritten.\n        content: The content to write into the file.\n\n    Returns:\n        A confirmation message indicating success or an error message.\n\n    Raises:\n        ValueError: If the file path is invalid.\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "content"
        ],
        "title": "text_writeArguments",
        "type": "object"
      }
    },
    {
      "name": "git_status",
      "description": "\n    Display the current state of the Git repository.\n\n    Args:\n        directory: The path to the Git repository.\n\n    Returns:\n        A string containing the status information.\n\n    Raises:\n        ValueError: If the directory is invalid.\n        GitCommandError: If Git status fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          }
        },
        "required": [
          "directory"
        ],
        "title": "git_statusArguments",
        "type": "object"
      }
    },
    {
      "name": "git_add",
      "description": "\n    Add specified files to the Git staging area.\n\n    Args:\n        directory: The path to the Git repository.\n        files: A list of file paths to add to the staging area.\n\n    Returns:\n        A string confirming the files were added or an error message.\n\n    Raises:\n        ValueError: If the directory or files are invalid.\n        GitCommandError: If Git add fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "files": {
            "items": {
              "type": "string"
            },
            "title": "Files",
            "type": "array"
          }
        },
        "required": [
          "directory",
          "files"
        ],
        "title": "git_addArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_unstaged",
      "description": "\n    Show the differences between the working directory and the last commit (unstaged changes).\n\n    Args:\n        directory: The path to the Git repository.\n\n    Returns:\n        A string detailing the unstaged differences.\n\n    Raises:\n        ValueError: If the directory is invalid.\n        GitCommandError: If Git diff fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          }
        },
        "required": [
          "directory"
        ],
        "title": "git_diff_unstagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_staged",
      "description": "\n    Show the differences between the staging area and the last commit (staged changes).\n\n    Args:\n        directory: The path to the Git repository.\n\n    Returns:\n        A string detailing the staged differences.\n\n    Raises:\n        ValueError: If the directory is invalid.\n        GitCommandError: If Git diff fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          }
        },
        "required": [
          "directory"
        ],
        "title": "git_diff_stagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff",
      "description": "\n    Compare differences between branches, commits, or files.\n\n    Args:\n        directory: The path to the Git repository.\n        source: The source branch, commit, or file.\n        target: The target branch, commit, or file.\n\n    Returns:\n        A string detailing the differences.\n\n    Raises:\n        ValueError: If the directory, source, or target is invalid.\n        GitCommandError: If Git diff fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "source": {
            "title": "Source",
            "type": "string"
          },
          "target": {
            "title": "Target",
            "type": "string"
          }
        },
        "required": [
          "directory",
          "source",
          "target"
        ],
        "title": "git_diffArguments",
        "type": "object"
      }
    },
    {
      "name": "git_commit",
      "description": "\n    Commit the staged changes to the repository with a message.\n\n    Args:\n        directory: The path to the Git repository.\n        message: The commit message.\n\n    Returns:\n        A string confirming the commit or an error message.\n\n    Raises:\n        ValueError: If the directory or message is invalid.\n        GitCommandError: If Git commit fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "message": {
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "directory",
          "message"
        ],
        "title": "git_commitArguments",
        "type": "object"
      }
    },
    {
      "name": "git_reset",
      "description": "\n    Unstage files from the staging area.\n\n    Args:\n        directory: The path to the Git repository.\n        files: A list of file paths to unstage.\n\n    Returns:\n        A string confirming the reset or an error message.\n\n    Raises:\n        ValueError: If the directory or files are invalid.\n        GitCommandError: If Git reset fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "files": {
            "items": {
              "type": "string"
            },
            "title": "Files",
            "type": "array"
          }
        },
        "required": [
          "directory",
          "files"
        ],
        "title": "git_resetArguments",
        "type": "object"
      }
    },
    {
      "name": "git_log",
      "description": "\n    Display the commit history of the repository.\n\n    Args:\n        directory: The path to the Git repository.\n\n    Returns:\n        A string containing the commit history.\n\n    Raises:\n        ValueError: If the directory is invalid.\n        GitCommandError: If Git log fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          }
        },
        "required": [
          "directory"
        ],
        "title": "git_logArguments",
        "type": "object"
      }
    },
    {
      "name": "git_create_branch",
      "description": "\n    Create a new branch in the repository.\n\n    Args:\n        directory: The path to the Git repository.\n        branch_name: The name of the new branch.\n\n    Returns:\n        A string confirming the branch creation or an error message.\n\n    Raises:\n        ValueError: If the directory or branch name is invalid.\n        GitCommandError: If Git branch creation fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "directory",
          "branch_name"
        ],
        "title": "git_create_branchArguments",
        "type": "object"
      }
    },
    {
      "name": "git_checkout",
      "description": "\n    Switch to a specified branch or commit.\n\n    Args:\n        directory: The path to the Git repository.\n        target: The branch name or commit hash to switch to.\n\n    Returns:\n        A string confirming the checkout or an error message.\n\n    Raises:\n        ValueError: If the directory or target is invalid.\n        GitCommandError: If Git checkout fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "target": {
            "title": "Target",
            "type": "string"
          }
        },
        "required": [
          "directory",
          "target"
        ],
        "title": "git_checkoutArguments",
        "type": "object"
      }
    },
    {
      "name": "git_show",
      "description": "\n    Display detailed information about a specific commit.\n\n    Args:\n        directory: The path to the Git repository.\n        commit_hash: The hash of the commit to display.\n\n    Returns:\n        A string containing the commit details.\n\n    Raises:\n        ValueError: If the directory or commit hash is invalid.\n        GitCommandError: If Git show fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "commit_hash": {
            "title": "Commit Hash",
            "type": "string"
          }
        },
        "required": [
          "directory",
          "commit_hash"
        ],
        "title": "git_showArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "git_init": [
      {
        "case_name": "Initialize Git in Valid Directory",
        "purpose": "Verify git_init successfully initializes a new Git repository in a valid directory.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Git repository initialized successfully in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.2511470317840576,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Initialize Git in Non-Existent Directory",
        "purpose": "Test error handling when attempting to initialize Git in a non-existent directory.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "Git repository initialized successfully in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "execution_time": 0.23704886436462402,
        "is_functional_test": false
      },
      {
        "case_name": "Fail to Initialize Git with Invalid Path Characters",
        "purpose": "Test if the tool properly handles invalid path characters in directory name.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\<invalid>|path"
        },
        "response": {
          "error": "ToolException: Error executing tool git_init: [WinError 123] 文件名、目录名或卷标语法不正确。: 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\<invalid>|path'"
        },
        "execution_time": 0.004030466079711914,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git in Directory with Special Characters",
        "purpose": "Ensure Git initialization works in directories with special characters in the path.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_papers"
        },
        "response": {
          "result": "Git repository initialized successfully in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_papers"
        },
        "execution_time": 0.2958862781524658,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Git Init Without Write Permissions",
        "purpose": "Simulate attempt to initialize Git in a read-only directory to verify proper error handling.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\locked_directory"
        },
        "response": {
          "result": "Git repository initialized successfully in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\locked_directory"
        },
        "execution_time": 0.2601504325866699,
        "is_functional_test": false
      },
      {
        "case_name": "Git Init on Already Initialized Repository",
        "purpose": "Test behavior when trying to re-initialize an existing Git repository.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Git repository initialized successfully in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.24317169189453125,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git in Long Path Directory",
        "purpose": "Verify ability to handle very long file paths for Git initialization.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
        },
        "response": {
          "result": "Git repository initialized successfully in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
        },
        "execution_time": 0.2689380645751953,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Git Init with Empty Directory Parameter",
        "purpose": "Check validation of empty input for directory parameter.",
        "args": {
          "directory": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_init: [WinError 3] 系统找不到指定的路径。: ''"
        },
        "execution_time": 0.003899097442626953,
        "is_functional_test": false
      }
    ],
    "text_write": [
      {
        "case_name": "Write Text to New File",
        "purpose": "Verify text_write successfully creates a new file and writes content into it.",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "content": "This is a test content written by the text_write tool."
        },
        "response": {
          "result": "Successfully wrote content to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt"
        },
        "execution_time": 0.004998922348022461,
        "is_functional_test": true
      },
      {
        "case_name": "Overwrite Existing File Content",
        "purpose": "Ensure text_write correctly overwrites an existing file with new content.",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "content": "New content that replaces previous data."
        },
        "response": {
          "result": "Successfully wrote content to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
        },
        "execution_time": 0.006012916564941406,
        "is_functional_test": true
      },
      {
        "case_name": "Write Empty Content to File",
        "purpose": "Test behavior when writing empty string to a file.",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_file.txt",
          "content": ""
        },
        "response": {
          "result": "Successfully wrote content to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_file.txt"
        },
        "execution_time": 0.003998517990112305,
        "is_functional_test": true
      },
      {
        "case_name": "Write to File in Git Initialized Directory",
        "purpose": "Confirm text_write works properly in a directory that has been initialized as a Git repository.",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_papers\\git_initialized_file.txt",
          "content": "Content for file inside git-initialized directory"
        },
        "response": {
          "result": "Successfully wrote content to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_papers\\git_initialized_file.txt"
        },
        "execution_time": 0.0038192272186279297,
        "is_functional_test": true
      },
      {
        "case_name": "Write to File with Special Characters in Path",
        "purpose": "Validate correct handling of special characters in file path during write operation.",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#&characters!_file.txt",
          "content": "Testing special characters in file path"
        },
        "response": {
          "result": "Successfully wrote content to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#&characters!_file.txt"
        },
        "execution_time": 0.004884004592895508,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Write to Read-Only Directory",
        "purpose": "Simulate attempt to write file to a read-only directory to verify error handling.",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\locked_directory\\readonly_test.txt",
          "content": "This should fail due to directory permissions"
        },
        "response": {
          "result": "Successfully wrote content to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\locked_directory\\readonly_test.txt"
        },
        "execution_time": 0.007150411605834961,
        "is_functional_test": false
      },
      {
        "case_name": "Write File with Invalid Path Characters",
        "purpose": "Test if tool properly rejects invalid file path characters.",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\<invalid>|path.txt",
          "content": "Should not be written due to invalid path"
        },
        "response": {
          "result": "Error writing to file: [Errno 22] Invalid argument: 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\<invalid>|path.txt'"
        },
        "execution_time": 0.003504514694213867,
        "is_functional_test": false
      },
      {
        "case_name": "Write to Very Long File Path",
        "purpose": "Verify ability to handle very long file paths during write operation.",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\very_long_path_file.txt",
          "content": "Testing file write with extremely long path"
        },
        "response": {
          "result": "Successfully wrote content to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\very_long_path_file.txt"
        },
        "execution_time": 0.0060329437255859375,
        "is_functional_test": true
      }
    ],
    "git_status": [
      {
        "case_name": "Check Git Status in Initialized Repository",
        "purpose": "Verify git_status successfully retrieves status information from a properly initialized Git repository.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\t20250509-154554.mp4\n\t2507.10550v1.pdf\n\t68078d40e08a19b806665fee_1745325376_auto_driving_system.csv\n\taaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.docx\n\taaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.png\n\taaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/\n\taaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_copy.docx\n\taaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_downloaded.txt\n\tapp.ico\n\tcopy_@special#name.docx\n\tcopy_@special#name.png\n\tcopy_of_nonexistent_document.docx\n\tcopy_of_saved_document.docx\n\tcrop_result_@special#name.png\n\tcropped_output.png\n\tcropped_zero_corner.png\n\tcs.csv\n\tcustom_papers/\n\tcustom_screenshot.png\n\tdownloaded_file.txt\n\tempty_content_file.txt\n\tempty_image.png\n\texisting_file.txt\n\textracted_negative_pages.pdf\n\thit.gif\n\thit.jpeg\n\ticon_a_green_checkmark_icon.png\n\ticon_a_yellow_star_icon.png\n\tincludeempty.csv\n\tinspector.zip\n\tlargefile_downloaded.iso\n\tmerged_output_@special#name.pdf\n\tmerged_output_basic.pdf\n\tmerged_output_fuzzy_ordered.pdf\n\tmerged_output_large_files.pdf\n\tmerged_output_s...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计2038字符，剩余638字符"
        },
        "execution_time": 0.24799132347106934,
        "is_functional_test": true
      },
      {
        "case_name": "Check Git Status in Subdirectory with Git Init",
        "purpose": "Ensure git_status works correctly in a subdirectory that has been initialized as a Git repository.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_papers"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\t2507.10550v1.pdf\n\tgit_initialized_file.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.2940654754638672,
        "is_functional_test": true
      },
      {
        "case_name": "Check Git Status in Non-Git Directory",
        "purpose": "Test behavior when attempting to get Git status in a directory that is not a Git repository.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tvery_long_path_file.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.2719392776489258,
        "is_functional_test": false
      },
      {
        "case_name": "Check Git Status in Read-Only Directory",
        "purpose": "Simulate attempt to check Git status in a read-only directory to verify proper error handling.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\locked_directory"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\treadonly_test.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.28264498710632324,
        "is_functional_test": false
      },
      {
        "case_name": "Fail to Check Git Status with Invalid Path Characters",
        "purpose": "Test if the tool properly handles invalid characters in directory path during Git status check.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\<invalid>|path"
        },
        "response": {
          "result": "Error getting Git status: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\<invalid>|path"
        },
        "execution_time": 0.004008054733276367,
        "is_functional_test": false
      },
      {
        "case_name": "Check Git Status with Empty Directory Parameter",
        "purpose": "Validate correct parameter validation when directory argument is empty.",
        "args": {
          "directory": ""
        },
        "response": {
          "result": "Error getting Git status: Directory does not exist: "
        },
        "execution_time": 0.010560035705566406,
        "is_functional_test": false
      },
      {
        "case_name": "Check Git Status in Long Path Directory",
        "purpose": "Verify ability to handle very long file paths when checking Git status.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tvery_long_path_file.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.24825143814086914,
        "is_functional_test": true
      },
      {
        "case_name": "Check Git Status in Directory with Special Characters",
        "purpose": "Ensure git_status works correctly in directories containing special characters in their path.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#&characters!"
        },
        "response": {
          "result": "Error getting Git status: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#&characters!"
        },
        "execution_time": 0.003998756408691406,
        "is_functional_test": true
      }
    ],
    "git_add": [
      {
        "case_name": "Add Single File to Git Staging Area",
        "purpose": "Verify git_add successfully adds a single file to the Git staging area in a valid repository.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt"
          ]
        },
        "response": {
          "result": "Added files to staging area: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt"
        },
        "execution_time": 0.006548643112182617,
        "is_functional_test": true
      },
      {
        "case_name": "Add Multiple Files to Git Staging Area",
        "purpose": "Verify git_add can add multiple files to the Git staging area in a valid repository.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_file.txt"
          ]
        },
        "response": {
          "result": "Added files to staging area: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt, D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_file.txt"
        },
        "execution_time": 0.008602142333984375,
        "is_functional_test": true
      },
      {
        "case_name": "Add File with Special Characters in Path",
        "purpose": "Test git_add behavior when adding a file with special characters in its path.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#&characters!_file.txt"
          ]
        },
        "response": {
          "result": "Added files to staging area: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#&characters!_file.txt"
        },
        "execution_time": 0.008774757385253906,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Add File to Non-Existent Git Directory",
        "purpose": "Test error handling when attempting to add files to a non-existent Git repository directory.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt"
          ]
        },
        "response": {
          "result": "Error adding files to Git: Absolute path 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt' is not in git repository at 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\nonexistent_dir'"
        },
        "execution_time": 0.007873296737670898,
        "is_functional_test": false
      },
      {
        "case_name": "Fail to Add File with Invalid Path Characters",
        "purpose": "Test error handling when attempting to add a file with invalid path characters.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\<invalid>|path.txt"
          ]
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: [WinError 123] 文件名、目录名或卷标语法不正确。: '<invalid>|path.txt'"
        },
        "execution_time": 0.005884885787963867,
        "is_functional_test": false
      },
      {
        "case_name": "Add File to Read-Only Git Directory",
        "purpose": "Simulate adding a file to a read-only Git directory to verify proper error handling.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\locked_directory",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt"
          ]
        },
        "response": {
          "result": "Error adding files to Git: Absolute path 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt' is not in git repository at 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\locked_directory'"
        },
        "execution_time": 0.008053302764892578,
        "is_functional_test": false
      },
      {
        "case_name": "Add Very Long Path File to Git Staging Area",
        "purpose": "Verify git_add can handle very long file paths when adding to the staging area.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\very_long_path_file.txt"
          ]
        },
        "response": {
          "result": "Added files to staging area: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\very_long_path_file.txt"
        },
        "execution_time": 0.0090179443359375,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Add Empty File List",
        "purpose": "Test validation when attempting to add an empty list of files to the Git staging area.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": []
        },
        "response": {
          "result": "Added files to staging area: "
        },
        "execution_time": 0.011065244674682617,
        "is_functional_test": false
      }
    ],
    "git_diff_unstaged": [
      {
        "case_name": "Show Unstaged Changes in Valid Git Directory",
        "purpose": "Verify git_diff_unstaged successfully shows unstaged changes in a valid Git-initialized directory with modified files.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_papers"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.24189114570617676,
        "is_functional_test": true
      },
      {
        "case_name": "Show No Unstaged Changes in Clean Repository",
        "purpose": "Ensure git_diff_unstaged returns an empty string when there are no unstaged changes in a clean Git repository.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.24787020683288574,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Show Diff in Non-Existent Directory",
        "purpose": "Test error handling when attempting to show unstaged changes in a non-existent directory.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.25000667572021484,
        "is_functional_test": false
      },
      {
        "case_name": "Fail to Show Diff with Invalid Path Characters",
        "purpose": "Test if the tool properly handles invalid characters in the directory path for git_diff_unstaged.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\<invalid>|path"
        },
        "response": {
          "result": "Error getting unstaged differences: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\<invalid>|path"
        },
        "execution_time": 0.005999326705932617,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Changes in Directory with Special Characters",
        "purpose": "Ensure git_diff_unstaged works correctly when the directory path contains special characters.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#&characters!"
        },
        "response": {
          "result": "Error getting unstaged differences: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#&characters!"
        },
        "execution_time": 0.0040149688720703125,
        "is_functional_test": true
      },
      {
        "case_name": "Show Unstaged Changes in Long Path Directory",
        "purpose": "Verify git_diff_unstaged can handle very long file paths without errors.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.2503387928009033,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Show Diff in Read-Only Directory",
        "purpose": "Test if git_diff_unstaged properly handles read-only directory permissions and returns appropriate error.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\locked_directory"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.2343130111694336,
        "is_functional_test": false
      },
      {
        "case_name": "Fail to Show Diff with Empty Directory Parameter",
        "purpose": "Check validation of empty input for directory parameter in git_diff_unstaged.",
        "args": {
          "directory": ""
        },
        "response": {
          "result": "Error getting unstaged differences: Directory does not exist: "
        },
        "execution_time": 0.004397869110107422,
        "is_functional_test": false
      }
    ],
    "git_diff_staged": [
      {
        "case_name": "Show Staged Changes in Valid Git Repository",
        "purpose": "Verify git_diff_staged successfully shows staged changes in a valid Git repository.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "diff --git a/empty_content_file.txt b/empty_content_file.txt\nnew file mode 100644\nindex 0000000..e69de29\ndiff --git a/existing_file.txt b/existing_file.txt\nnew file mode 100644\nindex 0000000..8efaf07\n--- /dev/null\n+++ b/existing_file.txt\n@@ -0,0 +1 @@\n+New content that replaces previous data.\n\\ No newline at end of file\ndiff --git a/new_test_file.txt b/new_test_file.txt\nnew file mode 100644\nindex 0000000..7a46a95\n--- /dev/null\n+++ b/new_test_file.txt\n@@ -0,0 +1 @@\n+This is a test content written by the text_write tool.\n\\ No newline at end of file\ndiff --git a/special@#&characters!_file.txt b/special@#&characters!_file.txt\nnew file mode 100644\nindex 0000000..edab93d\n--- /dev/null\n+++ b/special@#&characters!_file.txt\n@@ -0,0 +1 @@\n+Testing special characters in file path\n\\ No newline at end of file"
        },
        "execution_time": 0.2665729522705078,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Show Staged Changes in Non-Existent Directory",
        "purpose": "Test error handling when attempting to show staged changes in a non-existent directory.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "diff --git a/test.txt b/test.txt\nnew file mode 100644\nindex 0000000..1526227\n--- /dev/null\n+++ b/test.txt\n@@ -0,0 +1 @@\n+Test content for invalid path.\n\\ No newline at end of file"
        },
        "execution_time": 0.2391188144683838,
        "is_functional_test": false
      },
      {
        "case_name": "Fail to Show Staged Changes with Invalid Path Characters",
        "purpose": "Test if the tool properly handles invalid path characters in directory name during git diff operation.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\<invalid>|path"
        },
        "response": {
          "result": "Error getting staged differences: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\<invalid>|path"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes in Long Path Directory",
        "purpose": "Verify ability to handle very long file paths for git_diff_staged operations.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
        },
        "response": {
          "result": "diff --git a/very_long_path_file.txt b/very_long_path_file.txt\nnew file mode 100644\nindex 0000000..c7475c5\n--- /dev/null\n+++ b/very_long_path_file.txt\n@@ -0,0 +1 @@\n+Testing file write with extremely long path\n\\ No newline at end of file"
        },
        "execution_time": 0.2608048915863037,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Show Staged Changes with Empty Directory Parameter",
        "purpose": "Check validation of empty input for directory parameter during git_diff_staged execution.",
        "args": {
          "directory": ""
        },
        "response": {
          "result": "Error getting staged differences: Directory does not exist: "
        },
        "execution_time": 0.0038788318634033203,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes in Read-Only Git Repository",
        "purpose": "Simulate attempt to view staged changes in a read-only Git repository to verify proper error handling.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\locked_directory"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.2635209560394287,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes in Special Character Path",
        "purpose": "Ensure git_diff_staged works correctly with directories containing special characters in the path.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#&characters!"
        },
        "response": {
          "result": "Error getting staged differences: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#&characters!"
        },
        "execution_time": 0.005027294158935547,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Show Staged Changes Without Git Initialization",
        "purpose": "Test behavior when trying to show staged changes in a directory that is not initialized as a Git repository.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_papers"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.2693910598754883,
        "is_functional_test": false
      }
    ],
    "git_commit": [
      {
        "case_name": "Commit Staged Changes in Valid Repository",
        "purpose": "Verify git_commit successfully commits staged changes in a valid Git repository with a standard commit message.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Initial commit of test files"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Ref '--cached' did not resolve to an object"
        },
        "execution_time": 0.006808757781982422,
        "is_functional_test": true
      },
      {
        "case_name": "Commit with Empty Message",
        "purpose": "Test error handling when attempting to commit with an empty commit message.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Ref '--cached' did not resolve to an object"
        },
        "execution_time": 0.006852388381958008,
        "is_functional_test": false
      },
      {
        "case_name": "Commit in Non-Existent Directory",
        "purpose": "Verify proper error handling when trying to commit in a directory that does not exist.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "message": "This should fail due to missing directory"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Ref '--cached' did not resolve to an object"
        },
        "execution_time": 0.00954580307006836,
        "is_functional_test": false
      },
      {
        "case_name": "Commit in Read-Only Repository",
        "purpose": "Simulate attempt to commit in a read-only Git repository to verify proper error handling.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\locked_directory",
          "message": "Attempting commit in locked directory"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Ref '--cached' did not resolve to an object"
        },
        "execution_time": 0.010122299194335938,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Special Characters in Message",
        "purpose": "Ensure git_commit handles special characters in the commit message correctly.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_papers",
          "message": "Commit message with special characters: @#&!{}[]<>|`^~%"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Ref '--cached' did not resolve to an object"
        },
        "execution_time": 0.006506681442260742,
        "is_functional_test": true
      },
      {
        "case_name": "Commit in Long Path Repository",
        "purpose": "Verify ability to perform Git commit in a directory with very long file path.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "message": "Commit in long path directory"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Ref '--cached' did not resolve to an object"
        },
        "execution_time": 0.00705265998840332,
        "is_functional_test": true
      },
      {
        "case_name": "Commit Without Staged Changes",
        "purpose": "Test behavior when attempting to commit without any staged changes in the repository.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Empty commit attempt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Ref '--cached' did not resolve to an object"
        },
        "execution_time": 0.005009889602661133,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Invalid Path Characters",
        "purpose": "Test if the tool properly rejects paths containing invalid characters during commit.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\<invalid>|path",
          "message": "Should fail due to invalid path"
        },
        "response": {
          "result": "Error committing changes: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\<invalid>|path"
        },
        "execution_time": 0.007014036178588867,
        "is_functional_test": false
      }
    ],
    "git_log": [
      {
        "case_name": "Display Commit History in Valid Git Directory",
        "purpose": "Verify git_log successfully displays commit history from a valid Git repository directory.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Error getting commit history: Cmd('git') failed due to: exit code(128)\n  cmdline: git log\n  stderr: 'fatal: your current branch 'master' does not have any commits yet'"
        },
        "execution_time": 0.17979812622070312,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Display Commit History in Non-Git Directory",
        "purpose": "Test error handling when attempting to display commit history in a directory that is not a Git repository.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "Error getting commit history: Cmd('git') failed due to: exit code(128)\n  cmdline: git log\n  stderr: 'fatal: your current branch 'master' does not have any commits yet'"
        },
        "execution_time": 0.23395586013793945,
        "is_functional_test": false
      },
      {
        "case_name": "Display Commit History with Special Characters in Path",
        "purpose": "Ensure git_log works correctly with directories containing special characters in the path.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_papers"
        },
        "response": {
          "result": "Error getting commit history: Cmd('git') failed due to: exit code(128)\n  cmdline: git log\n  stderr: 'fatal: your current branch 'master' does not have any commits yet'"
        },
        "execution_time": 0.24782252311706543,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Display Commit History with Invalid Path Characters",
        "purpose": "Test if git_log properly handles invalid path characters in directory name.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\<invalid>|path"
        },
        "response": {
          "result": "Error getting commit history: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\<invalid>|path"
        },
        "execution_time": 0.004796743392944336,
        "is_functional_test": false
      },
      {
        "case_name": "Display Commit History in Long Path Directory",
        "purpose": "Verify ability to handle very long file paths for displaying Git commit history.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
        },
        "response": {
          "result": "Error getting commit history: Cmd('git') failed due to: exit code(128)\n  cmdline: git log\n  stderr: 'fatal: your current branch 'master' does not have any commits yet'"
        },
        "execution_time": 0.25929856300354004,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Display Commit History with Empty Directory Parameter",
        "purpose": "Check validation of empty input for directory parameter.",
        "args": {
          "directory": ""
        },
        "response": {
          "result": "Error getting commit history: Directory does not exist: "
        },
        "execution_time": 0.005027055740356445,
        "is_functional_test": false
      },
      {
        "case_name": "Display Commit History from Already Initialized Repository",
        "purpose": "Test git_log behavior on an existing Git repository after initialization.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Error getting commit history: Cmd('git') failed due to: exit code(128)\n  cmdline: git log\n  stderr: 'fatal: your current branch 'master' does not have any commits yet'"
        },
        "execution_time": 0.24381732940673828,
        "is_functional_test": true
      },
      {
        "case_name": "Access Git Log from Read-Only Directory",
        "purpose": "Simulate attempt to access Git log from a read-only directory to verify proper error handling.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\locked_directory"
        },
        "response": {
          "result": "Error getting commit history: Cmd('git') failed due to: exit code(128)\n  cmdline: git log\n  stderr: 'fatal: your current branch 'master' does not have any commits yet'"
        },
        "execution_time": 0.23426318168640137,
        "is_functional_test": false
      }
    ],
    "git_diff": [
      {
        "case_name": "Basic Git Diff Between Two Branches",
        "purpose": "Verify git_diff works correctly when comparing two branches in an initialized Git repository.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source": "main",
          "target": "feature-branch"
        },
        "response": {
          "result": "Error comparing differences: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff main feature-branch\n  stderr: 'fatal: ambiguous argument 'main': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.20722150802612305,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Between Specific Commits",
        "purpose": "Test git_diff with specific commit hashes to ensure it can compare differences between two commits.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source": "abc1234",
          "target": "def5678"
        },
        "response": {
          "result": "Error comparing differences: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff abc1234 def5678\n  stderr: 'fatal: ambiguous argument 'abc1234': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.2537345886230469,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Between Files in Same Commit",
        "purpose": "Ensure git_diff can compare differences between two files within the same directory/repository.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source": "file1.txt",
          "target": "file2.txt"
        },
        "response": {
          "result": "Error comparing differences: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff file1.txt file2.txt\n  stderr: 'fatal: ambiguous argument 'file1.txt': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.23440170288085938,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Using Mixed Comparison Types",
        "purpose": "Test git_diff using a mix of branch and file inputs to validate flexible comparison support.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source": "main",
          "target": "file1.txt"
        },
        "response": {
          "result": "Error comparing differences: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff main file1.txt\n  stderr: 'fatal: ambiguous argument 'main': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.23595905303955078,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff on Non-Existent Directory",
        "purpose": "Check error handling when attempting git_diff on a non-existent directory.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "source": "main",
          "target": "feature-branch"
        },
        "response": {
          "result": "Error comparing differences: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff main feature-branch\n  stderr: 'fatal: ambiguous argument 'main': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.2238924503326416,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff with Invalid Characters in Path",
        "purpose": "Test if git_diff properly handles invalid characters in directory path.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\<invalid>|path",
          "source": "main",
          "target": "feature-branch"
        },
        "response": {
          "result": "Error comparing differences: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\<invalid>|path"
        },
        "execution_time": 0.005942344665527344,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff with Very Long Path",
        "purpose": "Validate git_diff behavior with very long directory paths.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "source": "main",
          "target": "feature-branch"
        },
        "response": {
          "result": "Error comparing differences: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff main feature-branch\n  stderr: 'fatal: ambiguous argument 'main': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.23872733116149902,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff with Empty Parameters",
        "purpose": "Check validation for empty input parameters.",
        "args": {
          "directory": "",
          "source": "",
          "target": ""
        },
        "response": {
          "result": "Error comparing differences: Directory does not exist: "
        },
        "execution_time": 0.003509521484375,
        "is_functional_test": false
      }
    ],
    "git_reset": [
      {
        "case_name": "Unstage Single File from Staging Area",
        "purpose": "Verify git_reset successfully unstages a single file in a valid Git repository.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt"
          ]
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 'IndexFile' object has no attribute 'unstage'"
        },
        "execution_time": 0.011696577072143555,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage Multiple Files from Staging Area",
        "purpose": "Ensure git_reset can unstage multiple files at once in a valid Git repository.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_papers",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_papers\\git_initialized_file.txt",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_papers\\2507.10550v1.pdf"
          ]
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 'IndexFile' object has no attribute 'unstage'"
        },
        "execution_time": 0.01638507843017578,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Unstage File in Non-Existent Directory",
        "purpose": "Test error handling when attempting to unstage files in a non-existent directory.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "files": [
            "test_file.txt"
          ]
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 'IndexFile' object has no attribute 'unstage'"
        },
        "execution_time": 0.011420965194702148,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt Unstage with Invalid File Path Characters",
        "purpose": "Test if the tool properly handles invalid characters in file paths during unstage operation.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\<invalid>|path.txt"
          ]
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 'IndexFile' object has no attribute 'unstage'"
        },
        "execution_time": 0.010820150375366211,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage File in Read-Only Repository",
        "purpose": "Simulate attempt to unstage file in a read-only Git repository to verify proper error handling.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\locked_directory",
          "files": [
            "locked_file.txt"
          ]
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 'IndexFile' object has no attribute 'unstage'"
        },
        "execution_time": 0.010993480682373047,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage File from Long Path Directory",
        "purpose": "Verify ability to handle very long file paths during git reset operation.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\\very_long_path_file.txt"
          ]
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 'IndexFile' object has no attribute 'unstage'"
        },
        "execution_time": 0.01229405403137207,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage Empty File List",
        "purpose": "Check validation of empty input for files parameter in git_reset.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": []
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 'IndexFile' object has no attribute 'unstage'"
        },
        "execution_time": 0.008384227752685547,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage File with Special Characters in Path",
        "purpose": "Validate correct handling of special characters in file path during unstage operation.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#&characters!.png"
          ]
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 'IndexFile' object has no attribute 'unstage'"
        },
        "execution_time": 0.011115312576293945,
        "is_functional_test": true
      }
    ],
    "git_create_branch": [
      {
        "case_name": "Create Branch in Initialized Repository",
        "purpose": "Verify git_create_branch successfully creates a new branch in an already initialized Git repository.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/test-branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Ref 'HEAD' did not resolve to an object"
        },
        "execution_time": 0.004986763000488281,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Create Branch in Non-Existent Directory",
        "purpose": "Test error handling when attempting to create a branch in a non-existent directory.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "branch_name": "feature/nonexistent"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Ref 'HEAD' did not resolve to an object"
        },
        "execution_time": 0.00859212875366211,
        "is_functional_test": false
      },
      {
        "case_name": "Fail to Create Branch with Invalid Name Characters",
        "purpose": "Test if the tool properly handles invalid characters in branch name.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "invalid/<branch>|name"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Ref 'HEAD' did not resolve to an object"
        },
        "execution_time": 0.008695363998413086,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Special Characters in Name",
        "purpose": "Ensure git_create_branch works correctly when branch name contains special characters.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/special@#&branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Ref 'HEAD' did not resolve to an object"
        },
        "execution_time": 0.011018991470336914,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Create Branch Without Write Permissions",
        "purpose": "Simulate attempt to create a branch in a read-only directory to verify proper error handling.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\locked_directory",
          "branch_name": "feature/readonly-check"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Ref 'HEAD' did not resolve to an object"
        },
        "execution_time": 0.004641532897949219,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch on Already Existing Branch",
        "purpose": "Test behavior when trying to create a branch that already exists.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "main"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Ref 'HEAD' did not resolve to an object"
        },
        "execution_time": 0.008975028991699219,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch in Long Path Directory",
        "purpose": "Verify ability to handle very long file paths when creating a new branch.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "branch_name": "feature/long-path-test"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Ref 'HEAD' did not resolve to an object"
        },
        "execution_time": 0.006216526031494141,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Branch Creation with Empty Parameters",
        "purpose": "Check validation of empty input for both directory and branch name parameters.",
        "args": {
          "directory": "",
          "branch_name": ""
        },
        "response": {
          "result": "Error creating branch: Directory does not exist: "
        },
        "execution_time": 0.009029150009155273,
        "is_functional_test": false
      }
    ],
    "git_checkout": [
      {
        "case_name": "Checkout Valid Branch in Initialized Repository",
        "purpose": "Verify git_checkout successfully switches to a valid branch in an already initialized Git repository.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "target": "main"
        },
        "response": {
          "result": "Error checking out: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout main\n  stderr: 'error: pathspec 'main' did not match any file(s) known to git'"
        },
        "execution_time": 0.25397181510925293,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout Commit Hash in Git Repository",
        "purpose": "Ensure git_checkout works correctly when switching to a specific commit hash.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "target": "7a46a9511b2dd107b70225ef657ad2344b17dc40"
        },
        "response": {
          "result": "Error checking out: Cmd('git') failed due to: exit code(128)\n  cmdline: git checkout 7a46a9511b2dd107b70225ef657ad2344b17dc40\n  stderr: 'fatal: unable to read tree (7a46a9511b2dd107b70225ef657ad2344b17dc40)'"
        },
        "execution_time": 0.20066070556640625,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Checkout Nonexistent Branch",
        "purpose": "Test error handling when attempting to checkout a non-existent branch.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "target": "nonexistent_branch"
        },
        "response": {
          "result": "Error checking out: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout nonexistent_branch\n  stderr: 'error: pathspec 'nonexistent_branch' did not match any file(s) known to git'"
        },
        "execution_time": 0.21506190299987793,
        "is_functional_test": false
      },
      {
        "case_name": "Fail with Invalid Directory Path",
        "purpose": "Validate tool raises error when provided with an invalid directory path.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\invalid_dir",
          "target": "main"
        },
        "response": {
          "result": "Error checking out: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\invalid_dir"
        },
        "execution_time": 0.0039980411529541016,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout in Repository with Special Characters in Path",
        "purpose": "Ensure git_checkout works properly in a directory path containing special characters.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#&characters!",
          "target": "main"
        },
        "response": {
          "result": "Error checking out: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#&characters!"
        },
        "execution_time": 0.009399175643920898,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Checkout with Empty Target",
        "purpose": "Check validation of empty input for target parameter.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "target": ""
        },
        "response": {
          "result": "Error checking out: Cmd('git') failed due to: exit code(128)\n  cmdline: git checkout \n  stderr: 'fatal: empty string is not a valid pathspec. please use . instead if you meant to match all paths'"
        },
        "execution_time": 0.2525768280029297,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout in Long Path Repository",
        "purpose": "Verify ability to handle very long file paths during git checkout operation.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "target": "main"
        },
        "response": {
          "result": "Error checking out: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout main\n  stderr: 'error: pathspec 'main' did not match any file(s) known to git'"
        },
        "execution_time": 0.24613165855407715,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Checkout on Read-Only Repository",
        "purpose": "Simulate attempt to perform checkout on a read-only Git repository to verify proper error handling.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\locked_directory",
          "target": "main"
        },
        "response": {
          "result": "Error checking out: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout main\n  stderr: 'error: pathspec 'main' did not match any file(s) known to git'"
        },
        "execution_time": 0.25195789337158203,
        "is_functional_test": false
      }
    ],
    "git_show": [
      {
        "case_name": "Show Details of Valid Commit in Initialized Repository",
        "purpose": "Verify git_show successfully displays detailed information about a valid commit in an initialized Git repository.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "8e07503712db1a4f6cc5e5521b0e1f8e00ea6"
        },
        "response": {
          "result": "Error showing commit details: Cmd('git') failed due to: exit code(128)\n  cmdline: git show 8e07503712db1a4f6cc5e5521b0e1f8e00ea6\n  stderr: 'fatal: ambiguous argument '8e07503712db1a4f6cc5e5521b0e1f8e00ea6': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.18035340309143066,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Show Commit with Invalid Directory",
        "purpose": "Test error handling when attempting to show a commit in a non-existent directory.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "commit_hash": "8e07503712db1a4f6cc5e5521b0e1f8e00ea6"
        },
        "response": {
          "result": "Error showing commit details: Cmd('git') failed due to: exit code(128)\n  cmdline: git show 8e07503712db1a4f6cc5e5521b0e1f8e00ea6\n  stderr: 'fatal: ambiguous argument '8e07503712db1a4f6cc5e5521b0e1f8e00ea6': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.22791242599487305,
        "is_functional_test": false
      },
      {
        "case_name": "Fail to Show Commit with Invalid Hash",
        "purpose": "Test error handling when using an invalid commit hash.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "invalid_commit_hash_123"
        },
        "response": {
          "result": "Error showing commit details: Cmd('git') failed due to: exit code(128)\n  cmdline: git show invalid_commit_hash_123\n  stderr: 'fatal: ambiguous argument 'invalid_commit_hash_123': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.2287137508392334,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit in Long Path Directory",
        "purpose": "Verify ability to display commit details from a very long file path.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa",
          "commit_hash": "c7475c5721e5cc6d40be64b45eccfd5001e05aba"
        },
        "response": {
          "result": "Testing file write with extremely long path"
        },
        "execution_time": 0.2472059726715088,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Show Commit with Special Characters in Directory",
        "purpose": "Test if the tool properly handles invalid characters in directory path during git_show.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\<invalid>|path",
          "commit_hash": "8e07503712db1a4f6cc5e5521b0e1f8e00ea6"
        },
        "response": {
          "result": "Error showing commit details: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\<invalid>|path"
        },
        "execution_time": 0.00299835205078125,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit in Read-Only Directory",
        "purpose": "Simulate attempt to show commit in a read-only directory to verify proper error handling or access behavior.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\locked_directory",
          "commit_hash": "edab93d8f22d173c0e30c3410ffbd0752d2810b6"
        },
        "response": {
          "result": "Error showing commit details: Cmd('git') failed due to: exit code(128)\n  cmdline: git show edab93d8f22d173c0e30c3410ffbd0752d2810b6\n  stderr: 'fatal: bad object edab93d8f22d173c0e30c3410ffbd0752d2810b6'"
        },
        "execution_time": 0.2552168369293213,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit with Empty Hash Parameter",
        "purpose": "Check validation of empty input for commit hash parameter.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": ""
        },
        "response": {
          "result": "Error showing commit details: Cmd('git') failed due to: exit code(128)\n  cmdline: git show \n  stderr: 'fatal: ambiguous argument '': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.22770214080810547,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit from Git-Initialized Subdirectory",
        "purpose": "Ensure git_show works correctly in a subdirectory that has been initialized as a Git repository.",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\custom_papers",
          "commit_hash": "pre-commit.sample"
        },
        "response": {
          "result": "Error showing commit details: Cmd('git') failed due to: exit code(128)\n  cmdline: git show pre-commit.sample\n  stderr: 'fatal: ambiguous argument 'pre-commit.sample': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.2398064136505127,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 104
}