{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "deepseek-v3-mcp_ssh_automation_manager",
  "server_path": "workspace/pipeline-output-servers/deepseek-v3/mcp_ssh_automation_manager/refined/server.py",
  "timestamp": "2025-07-16T12:05:06.659812",
  "tools": [
    {
      "name": "connect",
      "description": "\n    Establishes an SSH connection to a remote server.\n\n    Args:\n        hostname: The remote server's hostname or IP address.\n        username: The username for authentication.\n        password: The password for authentication (required if private_key is not provided).\n        private_key: The path to the private key file for authentication (required if password is not provided).\n        port: The SSH port (default: 22).\n\n    Returns:\n        A unique session_id for the active SSH session.\n\n    Raises:\n        ValueError: If neither password nor private_key is provided.\n        paramiko.AuthenticationException: If the authentication fails.\n        paramiko.SSHException: If the SSH connection fails for other reasons.\n    ",
      "args_schema": {
        "properties": {
          "hostname": {
            "default": "10.70.5.21",
            "title": "Hostname",
            "type": "string"
          },
          "username": {
            "default": "pengbocheng",
            "title": "Username",
            "type": "string"
          },
          "password": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": "123456",
            "title": "Password"
          },
          "private_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Private Key"
          },
          "port": {
            "default": 26002,
            "title": "Port",
            "type": "integer"
          }
        },
        "title": "connectArguments",
        "type": "object"
      }
    },
    {
      "name": "disconnect",
      "description": "\n    Disconnects the specified SSH session and releases resources.\n\n    Args:\n        session_id: The unique identifier of the SSH session to disconnect.\n\n    Returns:\n        A status message indicating the session termination.\n\n    Raises:\n        KeyError: If the session_id does not exist.\n    ",
      "args_schema": {
        "properties": {
          "session_id": {
            "title": "Session Id",
            "type": "string"
          }
        },
        "required": [
          "session_id"
        ],
        "title": "disconnectArguments",
        "type": "object"
      }
    },
    {
      "name": "list_sessions",
      "description": "\n    Lists all currently active SSH sessions.\n\n    Returns:\n        A list of dictionaries, each containing session_id, hostname, username, and status.\n    ",
      "args_schema": {
        "properties": {},
        "title": "list_sessionsArguments",
        "type": "object"
      }
    },
    {
      "name": "execute",
      "description": "\n    Executes a command on the specified SSH session.\n\n    Args:\n        session_id: The unique identifier of the SSH session.\n        command: The command to execute.\n        stdin: Standard input to pass to the command (default: None).\n        timeout: Maximum execution time in seconds (default: None for no timeout).\n\n    Returns:\n        A dictionary containing stdout, stderr, and exit_status.\n\n    Raises:\n        KeyError: If the session_id does not exist.\n        paramiko.SSHException: If the command execution fails.\n    ",
      "args_schema": {
        "properties": {
          "session_id": {
            "title": "Session Id",
            "type": "string"
          },
          "command": {
            "title": "Command",
            "type": "string"
          },
          "stdin": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Stdin"
          },
          "timeout": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Timeout"
          }
        },
        "required": [
          "session_id",
          "command"
        ],
        "title": "executeArguments",
        "type": "object"
      }
    },
    {
      "name": "upload",
      "description": "\n    Uploads a local file to a specified path on the remote SSH server.\n\n    Args:\n        session_id: The unique identifier of the SSH session.\n        local_path: The path to the local file.\n        remote_path: The destination path on the remote server.\n\n    Returns:\n        A status message indicating the upload result.\n\n    Raises:\n        KeyError: If the session_id does not exist.\n        FileNotFoundError: If the local file doesn't exist.\n        paramiko.SSHException: If the file upload fails.\n    ",
      "args_schema": {
        "properties": {
          "session_id": {
            "title": "Session Id",
            "type": "string"
          },
          "local_path": {
            "title": "Local Path",
            "type": "string"
          },
          "remote_path": {
            "title": "Remote Path",
            "type": "string"
          }
        },
        "required": [
          "session_id",
          "local_path",
          "remote_path"
        ],
        "title": "uploadArguments",
        "type": "object"
      }
    },
    {
      "name": "download",
      "description": "\n    Downloads a file from the remote SSH server to a specified local path.\n\n    Args:\n        session_id: The unique identifier of the SSH session.\n        remote_path: The path to the file on the remote server.\n        local_path: The destination path on the local machine.\n\n    Returns:\n        A status message indicating the download result.\n\n    Raises:\n        KeyError: If the session_id does not exist.\n        paramiko.SSHException: If the file download fails.\n    ",
      "args_schema": {
        "properties": {
          "session_id": {
            "title": "Session Id",
            "type": "string"
          },
          "remote_path": {
            "title": "Remote Path",
            "type": "string"
          },
          "local_path": {
            "title": "Local Path",
            "type": "string"
          }
        },
        "required": [
          "session_id",
          "remote_path",
          "local_path"
        ],
        "title": "downloadArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "connect": [
      {
        "case_name": "Successful SSH connection with default parameters",
        "purpose": "验证使用默认参数能够成功建立SSH连接并返回session_id",
        "args": {
          "hostname": "10.70.5.21",
          "username": "pengbocheng",
          "password": "123456",
          "port": 26002
        },
        "response": {
          "result": "session_1"
        },
        "execution_time": 0.25393080711364746,
        "is_functional_test": true
      },
      {
        "case_name": "SSH connection with valid private key",
        "purpose": "验证使用私钥文件进行SSH连接时能够成功建立连接",
        "args": {
          "hostname": "10.70.5.21",
          "username": "pengbocheng",
          "private_key": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_private_key.pem",
          "port": 26002
        },
        "response": {
          "error": "ToolException: Error executing tool connect: SSH connection failed: Private key file not found: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_private_key.pem"
        },
        "execution_time": 0.0054988861083984375,
        "is_functional_test": true
      },
      {
        "case_name": "SSH connection fails with invalid credentials",
        "purpose": "验证使用错误的密码进行连接时，抛出AuthenticationException",
        "args": {
          "hostname": "10.70.5.21",
          "username": "pengbocheng",
          "password": "wrong_password"
        },
        "response": {
          "result": "session_2"
        },
        "execution_time": 0.25103211402893066,
        "is_functional_test": false
      },
      {
        "case_name": "SSH connection fails with missing authentication",
        "purpose": "验证既不提供密码也不提供私钥时，抛出ValueError",
        "args": {
          "hostname": "10.70.5.21",
          "username": "pengbocheng"
        },
        "response": {
          "result": "session_3"
        },
        "execution_time": 0.2482891082763672,
        "is_functional_test": false
      },
      {
        "case_name": "SSH connection to invalid hostname",
        "purpose": "验证连接到无效主机名时抛出SSHException",
        "args": {
          "hostname": "invalid.hostname.example",
          "username": "pengbocheng",
          "password": "123456"
        },
        "response": {
          "error": "ToolException: Error executing tool connect: SSH connection failed: [Errno 11001] getaddrinfo failed"
        },
        "execution_time": 0.013642072677612305,
        "is_functional_test": false
      },
      {
        "case_name": "SSH connection using special characters in username",
        "purpose": "验证用户名包含特殊字符时能否正确处理",
        "args": {
          "hostname": "10.70.5.21",
          "username": "user@special#name",
          "password": "123456"
        },
        "response": {
          "error": "ToolException: Error executing tool connect: Authentication failed."
        },
        "execution_time": 2.438133478164673,
        "is_functional_test": true
      },
      {
        "case_name": "SSH connection with port at maximum allowed value",
        "purpose": "验证端口为最大有效值65535时能否建立连接",
        "args": {
          "hostname": "10.70.5.21",
          "username": "pengbocheng",
          "password": "123456",
          "port": 65535
        },
        "response": {
          "error": "ToolException: Error executing tool connect: SSH connection failed: [Errno None] Unable to connect to port 65535 on 10.70.5.21"
        },
        "execution_time": 2.0539870262145996,
        "is_functional_test": true
      },
      {
        "case_name": "SSH connection with port at minimum allowed value",
        "purpose": "验证端口为最小有效值1时能否建立连接",
        "args": {
          "hostname": "10.70.5.21",
          "username": "pengbocheng",
          "password": "123456",
          "port": 1
        },
        "response": {
          "error": "ToolException: Error executing tool connect: SSH connection failed: [Errno None] Unable to connect to port 1 on 10.70.5.21"
        },
        "execution_time": 2.049516439437866,
        "is_functional_test": true
      }
    ],
    "list_sessions": [
      {
        "case_name": "List sessions after successful SSH connection",
        "purpose": "验证在成功建立SSH连接后，list_sessions能正确列出活动的会话",
        "args": {},
        "response": [
          "{\n  \"session_id\": \"session_1\",\n  \"hostname\": \"10.70.5.21\",\n  \"username\": \"pengbocheng\",\n  \"status\": \"active\"\n}",
          "{\n  \"session_id\": \"session_2\",\n  \"hostname\": \"10.70.5.21\",\n  \"username\": \"pengbocheng\",\n  \"status\": \"active\"\n}",
          "{\n  \"session_id\": \"session_3\",\n  \"hostname\": \"10.70.5.21\",\n  \"username\": \"pengbocheng\",\n  \"status\": \"active\"\n}"
        ],
        "execution_time": 0.004000186920166016,
        "is_functional_test": true
      },
      {
        "case_name": "List sessions with no active connections",
        "purpose": "验证没有活跃SSH连接时，list_sessions返回空列表",
        "args": {},
        "response": [
          "{\n  \"session_id\": \"session_1\",\n  \"hostname\": \"10.70.5.21\",\n  \"username\": \"pengbocheng\",\n  \"status\": \"active\"\n}",
          "{\n  \"session_id\": \"session_2\",\n  \"hostname\": \"10.70.5.21\",\n  \"username\": \"pengbocheng\",\n  \"status\": \"active\"\n}",
          "{\n  \"session_id\": \"session_3\",\n  \"hostname\": \"10.70.5.21\",\n  \"username\": \"pengbocheng\",\n  \"status\": \"active\"\n}"
        ],
        "execution_time": 0.007022857666015625,
        "is_functional_test": true
      },
      {
        "case_name": "List sessions after failed authentication",
        "purpose": "验证即使有认证失败的尝试，list_sessions仍仅列出成功的会话",
        "args": {},
        "response": [
          "{\n  \"session_id\": \"session_1\",\n  \"hostname\": \"10.70.5.21\",\n  \"username\": \"pengbocheng\",\n  \"status\": \"active\"\n}",
          "{\n  \"session_id\": \"session_2\",\n  \"hostname\": \"10.70.5.21\",\n  \"username\": \"pengbocheng\",\n  \"status\": \"active\"\n}",
          "{\n  \"session_id\": \"session_3\",\n  \"hostname\": \"10.70.5.21\",\n  \"username\": \"pengbocheng\",\n  \"status\": \"active\"\n}"
        ],
        "execution_time": 0.005372762680053711,
        "is_functional_test": true
      },
      {
        "case_name": "List sessions after multiple valid connections",
        "purpose": "验证多个有效SSH连接建立后，list_sessions能正确列出所有会话",
        "args": {},
        "response": [
          "{\n  \"session_id\": \"session_1\",\n  \"hostname\": \"10.70.5.21\",\n  \"username\": \"pengbocheng\",\n  \"status\": \"active\"\n}",
          "{\n  \"session_id\": \"session_2\",\n  \"hostname\": \"10.70.5.21\",\n  \"username\": \"pengbocheng\",\n  \"status\": \"active\"\n}",
          "{\n  \"session_id\": \"session_3\",\n  \"hostname\": \"10.70.5.21\",\n  \"username\": \"pengbocheng\",\n  \"status\": \"active\"\n}"
        ],
        "execution_time": 0.004351615905761719,
        "is_functional_test": true
      },
      {
        "case_name": "List sessions in secure environment",
        "purpose": "验证工具不会泄露敏感信息如完整私钥或密码在输出中",
        "args": {},
        "response": [
          "{\n  \"session_id\": \"session_1\",\n  \"hostname\": \"10.70.5.21\",\n  \"username\": \"pengbocheng\",\n  \"status\": \"active\"\n}",
          "{\n  \"session_id\": \"session_2\",\n  \"hostname\": \"10.70.5.21\",\n  \"username\": \"pengbocheng\",\n  \"status\": \"active\"\n}",
          "{\n  \"session_id\": \"session_3\",\n  \"hostname\": \"10.70.5.21\",\n  \"username\": \"pengbocheng\",\n  \"status\": \"active\"\n}"
        ],
        "execution_time": 0.00500798225402832,
        "is_functional_test": false
      },
      {
        "case_name": "List sessions during concurrent access",
        "purpose": "验证并发访问下list_sessions返回一致且完整的会话列表",
        "args": {},
        "response": [
          "{\n  \"session_id\": \"session_1\",\n  \"hostname\": \"10.70.5.21\",\n  \"username\": \"pengbocheng\",\n  \"status\": \"active\"\n}",
          "{\n  \"session_id\": \"session_2\",\n  \"hostname\": \"10.70.5.21\",\n  \"username\": \"pengbocheng\",\n  \"status\": \"active\"\n}",
          "{\n  \"session_id\": \"session_3\",\n  \"hostname\": \"10.70.5.21\",\n  \"username\": \"pengbocheng\",\n  \"status\": \"active\"\n}"
        ],
        "execution_time": 0.005997896194458008,
        "is_functional_test": false
      },
      {
        "case_name": "List sessions with invalid or corrupted session data",
        "purpose": "验证系统遇到损坏的会话数据时，list_sessions仍能处理并跳过无效条目",
        "args": {},
        "response": [
          "{\n  \"session_id\": \"session_1\",\n  \"hostname\": \"10.70.5.21\",\n  \"username\": \"pengbocheng\",\n  \"status\": \"active\"\n}",
          "{\n  \"session_id\": \"session_2\",\n  \"hostname\": \"10.70.5.21\",\n  \"username\": \"pengbocheng\",\n  \"status\": \"active\"\n}",
          "{\n  \"session_id\": \"session_3\",\n  \"hostname\": \"10.70.5.21\",\n  \"username\": \"pengbocheng\",\n  \"status\": \"active\"\n}"
        ],
        "execution_time": 0.005131244659423828,
        "is_functional_test": false
      },
      {
        "case_name": "List sessions with special characters in usernames",
        "purpose": "验证用户名包含特殊字符时，list_sessions仍能正确显示该会话信息",
        "args": {},
        "response": [
          "{\n  \"session_id\": \"session_1\",\n  \"hostname\": \"10.70.5.21\",\n  \"username\": \"pengbocheng\",\n  \"status\": \"active\"\n}",
          "{\n  \"session_id\": \"session_2\",\n  \"hostname\": \"10.70.5.21\",\n  \"username\": \"pengbocheng\",\n  \"status\": \"active\"\n}",
          "{\n  \"session_id\": \"session_3\",\n  \"hostname\": \"10.70.5.21\",\n  \"username\": \"pengbocheng\",\n  \"status\": \"active\"\n}"
        ],
        "execution_time": 0.007397890090942383,
        "is_functional_test": true
      }
    ],
    "execute": [
      {
        "case_name": "Execute command successfully with valid session and default parameters",
        "purpose": "验证使用有效的session_id和简单命令能成功执行并返回结果",
        "args": {
          "session_id": "session_1",
          "command": "echo 'Hello World'"
        },
        "response": {
          "result": "{\n  \"stdout\": \"Hello World\",\n  \"stderr\": \"\",\n  \"exit_status\": 0\n}"
        },
        "execution_time": 0.01508331298828125,
        "is_functional_test": true
      },
      {
        "case_name": "Execute command with stdin input",
        "purpose": "验证带标准输入的命令执行能正确传递输入并返回结果",
        "args": {
          "session_id": "session_1",
          "command": "cat",
          "stdin": "This is standard input"
        },
        "response": {
          "result": "{\n  \"stdout\": \"This is standard input\",\n  \"stderr\": \"\",\n  \"exit_status\": 0\n}"
        },
        "execution_time": 0.05184054374694824,
        "is_functional_test": true
      },
      {
        "case_name": "Execute command with timeout",
        "purpose": "验证超时参数能正确限制命令执行时间",
        "args": {
          "session_id": "session_1",
          "command": "sleep 5 && echo 'Done'",
          "timeout": 3
        },
        "response": {
          "error": "ToolException: Error executing tool execute: Command execution failed: "
        },
        "execution_time": 3.0461530685424805,
        "is_functional_test": true
      },
      {
        "case_name": "Execute command with special characters in command",
        "purpose": "验证包含特殊字符的命令能被正确解析和执行",
        "args": {
          "session_id": "session_1",
          "command": "echo \"Special @#$%^&*()! characters\""
        },
        "response": {
          "result": "{\n  \"stdout\": \"Special @#$%^&*()! characters\",\n  \"stderr\": \"\",\n  \"exit_status\": 0\n}"
        },
        "execution_time": 0.044792890548706055,
        "is_functional_test": true
      },
      {
        "case_name": "Execute command with non-existent session ID",
        "purpose": "验证使用不存在的session_id会抛出KeyError",
        "args": {
          "session_id": "non_existent_session",
          "command": "ls"
        },
        "response": {
          "error": "ToolException: Error executing tool execute: 'Session non_existent_session not found.'"
        },
        "execution_time": 0.005669593811035156,
        "is_functional_test": false
      },
      {
        "case_name": "Execute invalid command",
        "purpose": "验证执行无效命令会返回非零退出状态码和错误信息",
        "args": {
          "session_id": "session_1",
          "command": "invalid_command_123"
        },
        "response": {
          "result": "{\n  \"stdout\": \"\",\n  \"stderr\": \"bash: line 1: invalid_command_123: command not found\",\n  \"exit_status\": 127\n}"
        },
        "execution_time": 0.041230201721191406,
        "is_functional_test": false
      },
      {
        "case_name": "Execute command that requires elevated privileges",
        "purpose": "验证无权限执行敏感命令时能否安全处理",
        "args": {
          "session_id": "session_1",
          "command": "sudo rm -rf /"
        },
        "response": {
          "result": "{\n  \"stdout\": \"\",\n  \"stderr\": \"sudo: a terminal is required to read the password; either use the -S option to read from standard input or configure an askpass helper\\nsudo: a password is required\",\n  \"exit_status\": 1\n}"
        },
        "execution_time": 0.056554317474365234,
        "is_functional_test": false
      }
    ],
    "upload": [
      {
        "case_name": "Successful file upload with valid session and existing file",
        "purpose": "验证使用有效的session_id和存在的本地文件能够成功上传文件",
        "args": {
          "session_id": "session_1",
          "local_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "remote_path": "/home/pengbocheng/uploaded_file.txt"
        },
        "response": {
          "result": "File D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt uploaded to /home/pengbocheng/uploaded_file.txt successfully."
        },
        "execution_time": 0.02108001708984375,
        "is_functional_test": true
      },
      {
        "case_name": "File upload fails with non-existent session",
        "purpose": "验证使用不存在的session_id时抛出KeyError",
        "args": {
          "session_id": "invalid_session",
          "local_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "remote_path": "/home/pengbocheng/uploaded_file.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool upload: 'Session invalid_session not found.'"
        },
        "execution_time": 0.0060040950775146484,
        "is_functional_test": false
      },
      {
        "case_name": "File upload fails with non-existent local file",
        "purpose": "验证当本地文件不存在时抛出FileNotFoundError",
        "args": {
          "session_id": "session_1",
          "local_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt",
          "remote_path": "/home/pengbocheng/uploaded_file.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool upload: Local file not found: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt"
        },
        "execution_time": 0.0041446685791015625,
        "is_functional_test": false
      },
      {
        "case_name": "File upload with special characters in remote path",
        "purpose": "验证远程路径包含特殊字符时能否正确处理",
        "args": {
          "session_id": "session_1",
          "local_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "remote_path": "/home/pengbocheng/upload@special#name.txt"
        },
        "response": {
          "result": "File D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt uploaded to /home/pengbocheng/upload@special#name.txt successfully."
        },
        "execution_time": 0.04416298866271973,
        "is_functional_test": true
      },
      {
        "case_name": "File upload with maximum allowed filename length",
        "purpose": "验证上传文件名长度达到系统最大限制时的行为",
        "args": {
          "session_id": "session_1",
          "local_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.docx",
          "remote_path": "/home/pengbocheng/very_long_filename_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.docx"
        },
        "response": {
          "result": "File D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.docx uploaded to /home/pengbocheng/very_long_filename_aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.docx successfully."
        },
        "execution_time": 0.05895590782165527,
        "is_functional_test": true
      },
      {
        "case_name": "File upload fails due to network interruption",
        "purpose": "验证网络中断时上传失败并抛出paramiko.SSHException",
        "args": {
          "session_id": "session_1",
          "local_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "remote_path": "/home/pengbocheng/uploaded_file.txt"
        },
        "response": {
          "result": "File D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt uploaded to /home/pengbocheng/uploaded_file.txt successfully."
        },
        "execution_time": 0.05478549003601074,
        "is_functional_test": false
      },
      {
        "case_name": "File upload with empty remote path",
        "purpose": "验证远程路径为空时工具能否正确处理错误",
        "args": {
          "session_id": "session_1",
          "local_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "remote_path": ""
        },
        "response": {
          "error": "ToolException: Error executing tool upload: File upload failed: [Errno 2] No such file"
        },
        "execution_time": 0.05122256278991699,
        "is_functional_test": false
      },
      {
        "case_name": "File upload with leading and trailing whitespace in paths",
        "purpose": "验证本地和远程路径包含前后空格时能否正确处理",
        "args": {
          "session_id": "session_1",
          "local_path": "  D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt  ",
          "remote_path": "  /home/pengbocheng/uploaded_file.txt  "
        },
        "response": {
          "error": "ToolException: Error executing tool upload: Local file not found:   D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt  "
        },
        "execution_time": 0.0060045719146728516,
        "is_functional_test": true
      }
    ],
    "download": [
      {
        "case_name": "Successful file download with valid session and paths",
        "purpose": "验证使用有效的session_id、远程路径和本地路径时，文件能成功下载",
        "args": {
          "session_id": "session_1",
          "remote_path": "/home/pengbocheng/testfile.txt",
          "local_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\downloaded_file.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool download: File download failed: [Errno 2] No such file"
        },
        "execution_time": 0.016252756118774414,
        "is_functional_test": true
      },
      {
        "case_name": "Download fails with invalid session_id",
        "purpose": "验证使用无效的session_id时，工具抛出KeyError",
        "args": {
          "session_id": "invalid_session",
          "remote_path": "/home/pengbocheng/testfile.txt",
          "local_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\downloaded_file.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool download: 'Session invalid_session not found.'"
        },
        "execution_time": 0.00299835205078125,
        "is_functional_test": false
      },
      {
        "case_name": "Download fails when remote file does not exist",
        "purpose": "验证尝试下载不存在的远程文件时，工具抛出paramiko.SSHException",
        "args": {
          "session_id": "session_1",
          "remote_path": "/home/pengbocheng/nonexistent_file.txt",
          "local_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\downloaded_file.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool download: File download failed: [Errno 2] No such file"
        },
        "execution_time": 0.0516810417175293,
        "is_functional_test": false
      },
      {
        "case_name": "Download fails due to insufficient local permissions",
        "purpose": "验证本地路径无写权限时，下载失败并抛出异常",
        "args": {
          "session_id": "session_1",
          "remote_path": "/home/pengbocheng/testfile.txt",
          "local_path": "C:\\Windows\\system32\\downloaded_file.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool download: File download failed: [Errno 13] Permission denied: 'C:\\\\Windows\\\\system32\\\\downloaded_file.txt'"
        },
        "execution_time": 0.050008296966552734,
        "is_functional_test": false
      },
      {
        "case_name": "Download a large file to test performance",
        "purpose": "验证工具能够处理大文件下载操作",
        "args": {
          "session_id": "session_1",
          "remote_path": "/home/pengbocheng/largefile.iso",
          "local_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\largefile_downloaded.iso"
        },
        "response": {
          "error": "ToolException: Error executing tool download: File download failed: [Errno 2] No such file"
        },
        "execution_time": 0.05600595474243164,
        "is_functional_test": true
      },
      {
        "case_name": "Download file with special characters in remote path",
        "purpose": "验证远程路径包含特殊字符时工具仍能正确处理",
        "args": {
          "session_id": "session_1",
          "remote_path": "/home/pengbocheng/@special#name_file.txt",
          "local_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_name_downloaded.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool download: File download failed: [Errno 2] No such file"
        },
        "execution_time": 0.054663658142089844,
        "is_functional_test": true
      },
      {
        "case_name": "Download file with maximum allowed path length",
        "purpose": "验证工具对最大允许长度的路径进行下载时是否正常",
        "args": {
          "session_id": "session_1",
          "remote_path": "/home/pengbocheng/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.txt",
          "local_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_downloaded.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool download: File download failed: [Errno 2] No such file"
        },
        "execution_time": 0.05291891098022461,
        "is_functional_test": true
      },
      {
        "case_name": "Download file to existing local path",
        "purpose": "验证目标本地路径已存在同名文件时，下载是否会覆盖或报错（根据实现预期）",
        "args": {
          "session_id": "session_1",
          "remote_path": "/home/pengbocheng/testfile.txt",
          "local_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool download: File download failed: [Errno 2] No such file"
        },
        "execution_time": 0.052004098892211914,
        "is_functional_test": true
      }
    ],
    "disconnect": [
      {
        "case_name": "Disconnect valid SSH session",
        "purpose": "验证能够成功断开一个有效的SSH会话并释放资源",
        "args": {
          "session_id": "session_1"
        },
        "response": {
          "result": "Session session_1 disconnected successfully."
        },
        "execution_time": 0.0035037994384765625,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to disconnect non-existent session",
        "purpose": "验证尝试断开不存在的会话时是否抛出KeyError",
        "args": {
          "session_id": "nonexistent_session"
        },
        "response": {
          "error": "ToolException: Error executing tool disconnect: 'Session nonexistent_session not found.'"
        },
        "execution_time": 0.005115509033203125,
        "is_functional_test": true
      },
      {
        "case_name": "Disconnect multiple sessions sequentially",
        "purpose": "验证可以连续断开多个已存在的SSH会话",
        "args": {
          "session_id": "session_2"
        },
        "response": {
          "result": "Session session_2 disconnected successfully."
        },
        "execution_time": 0.007587909698486328,
        "is_functional_test": true
      },
      {
        "case_name": "Disconnect session with special characters in session ID",
        "purpose": "验证包含特殊字符的session_id能否被正确处理",
        "args": {
          "session_id": "session@special#id"
        },
        "response": {
          "error": "ToolException: Error executing tool disconnect: 'Session session@special#id not found.'"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": true
      },
      {
        "case_name": "Disconnect session after invalid authentication attempts",
        "purpose": "验证即使存在无效认证尝试，仍能正常断开有效会话",
        "args": {
          "session_id": "session_3"
        },
        "response": {
          "result": "Session session_3 disconnected successfully."
        },
        "execution_time": 0.007647514343261719,
        "is_functional_test": true
      },
      {
        "case_name": "Disconnect session with empty session ID",
        "purpose": "验证空session_id输入时是否返回错误信息",
        "args": {
          "session_id": ""
        },
        "response": {
          "error": "ToolException: Error executing tool disconnect: 'Session  not found.'"
        },
        "execution_time": 0.005876064300537109,
        "is_functional_test": false
      },
      {
        "case_name": "Disconnect session during concurrent access",
        "purpose": "验证在并发访问下断开会话是否仍保持一致性",
        "args": {
          "session_id": "session_1"
        },
        "response": {
          "error": "ToolException: Error executing tool disconnect: 'Session session_1 not found.'"
        },
        "execution_time": 0.002997875213623047,
        "is_functional_test": false
      },
      {
        "case_name": "Disconnect session with corrupted session data",
        "purpose": "验证系统遇到损坏的会话数据时能否安全地断开连接",
        "args": {
          "session_id": "corrupted_session"
        },
        "response": {
          "error": "ToolException: Error executing tool disconnect: 'Session corrupted_session not found.'"
        },
        "execution_time": 0.0073583126068115234,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 47
}