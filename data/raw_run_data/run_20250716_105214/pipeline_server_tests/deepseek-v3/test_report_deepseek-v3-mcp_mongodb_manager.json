{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "deepseek-v3-mcp_mongodb_manager",
  "server_path": "workspace/pipeline-output-servers/deepseek-v3/mcp_mongodb_manager/refined/server.py",
  "timestamp": "2025-07-16T10:58:11.370559",
  "tools": [
    {
      "name": "mcp_health_check",
      "description": "\n    Checks if the MongoDB server is reachable and responsive.\n\n    Returns:\n        A string indicating the health status of the MongoDB connection.\n    ",
      "args_schema": {
        "properties": {},
        "title": "mcp_health_checkArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_list_databases",
      "description": "\n    Lists all available databases in the MongoDB instance.\n\n    Returns:\n        A list of strings, where each string represents a database name.\n    ",
      "args_schema": {
        "properties": {},
        "title": "mcp_list_databasesArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_list_collections",
      "description": "\n    Lists all collections in a specified MongoDB database.\n\n    Args:\n        database_name: The name of the database to query.\n\n    Returns:\n        A list of strings, where each string represents a collection name in the specified database.\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          }
        },
        "required": [
          "database_name"
        ],
        "title": "mcp_list_collectionsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_insert_document",
      "description": "\n    Inserts a new document into a specified MongoDB collection.\n\n    Args:\n        database_name: The name of the database.\n        collection_name: The name of the collection.\n        document: The document to insert.\n\n    Returns:\n        A string indicating the success or failure of the insertion, including the inserted document's ID if successful.\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "document": {
            "title": "Document",
            "type": "object"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "document"
        ],
        "title": "mcp_insert_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_find_documents",
      "description": "\n    Queries documents in a specified MongoDB collection, with support for projection and result limiting.\n\n    Args:\n        database_name: The name of the database.\n        collection_name: The name of the collection.\n        query: The query criteria. Defaults to {} (all documents).\n        projection: The fields to include/exclude in the results. Defaults to None (all fields).\n        limit: The maximum number of documents to return. Defaults to 0 (no limit).\n\n    Returns:\n        A list of dictionaries, where each dictionary represents a matching document.\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Query"
          },
          "projection": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Projection"
          },
          "limit": {
            "default": 0,
            "title": "Limit",
            "type": "integer"
          }
        },
        "required": [
          "database_name",
          "collection_name"
        ],
        "title": "mcp_find_documentsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_update_document",
      "description": "\n    Updates documents in a specified MongoDB collection, supporting single or multiple updates.\n\n    Args:\n        database_name: The name of the database.\n        collection_name: The name of the collection.\n        query: The query criteria to select documents to update.\n        update: The update operations to apply.\n        multi: Whether to update multiple documents. Defaults to False.\n\n    Returns:\n        A string indicating the success or failure of the update, including the number of documents modified.\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "title": "Query",
            "type": "object"
          },
          "update": {
            "title": "Update",
            "type": "object"
          },
          "multi": {
            "default": false,
            "title": "Multi",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "query",
          "update"
        ],
        "title": "mcp_update_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_delete_document",
      "description": "\n    Deletes documents from a specified MongoDB collection, supporting single or batch deletion.\n\n    Args:\n        database_name: The name of the database.\n        collection_name: The name of the collection.\n        query: The query criteria to select documents to delete.\n        multi: Whether to delete multiple documents. Defaults to False.\n\n    Returns:\n        A string indicating the success or failure of the deletion, including the number of documents deleted.\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "title": "Query",
            "type": "object"
          },
          "multi": {
            "default": false,
            "title": "Multi",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "query"
        ],
        "title": "mcp_delete_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_drop_database",
      "description": "\n    Drops (deletes) an entire database.\n\n    Args:\n        database_name: The name of the database to drop.\n\n    Returns:\n        A string indicating whether the database was successfully dropped.\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          }
        },
        "required": [
          "database_name"
        ],
        "title": "mcp_drop_databaseArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_drop_collection",
      "description": "\n    Drops (deletes) a specific collection from a database.\n\n    Args:\n        database_name: The name of the database.\n        collection_name: The name of the collection to drop.\n\n    Returns:\n        A string indicating whether the collection was successfully dropped.\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          }
        },
        "required": [
          "database_name",
          "collection_name"
        ],
        "title": "mcp_drop_collectionArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "mcp_health_check": [
      {
        "case_name": "MongoDB健康检查-基本连接测试",
        "purpose": "验证mcp_health_check工具在默认配置下能否正确检测MongoDB服务器的健康状态。",
        "args": {},
        "response": {
          "result": "MongoDB connection is healthy"
        },
        "execution_time": 0.002999544143676758,
        "is_functional_test": true
      },
      {
        "case_name": "MongoDB健康检查-无可用数据库连接",
        "purpose": "模拟MongoDB服务不可用时，验证工具是否能正确处理错误并返回有意义的状态信息。",
        "args": {},
        "response": {
          "result": "MongoDB connection is healthy"
        },
        "execution_time": 0.002004861831665039,
        "is_functional_test": false
      },
      {
        "case_name": "MongoDB健康检查-权限不足情况测试",
        "purpose": "测试当当前用户对MongoDB没有访问权限时，工具是否能够正确捕获异常并返回安全提示。",
        "args": {},
        "response": {
          "result": "MongoDB connection is healthy"
        },
        "execution_time": 0.002508878707885742,
        "is_functional_test": false
      },
      {
        "case_name": "MongoDB健康检查-长时间延迟响应测试",
        "purpose": "验证工具在MongoDB响应延迟时是否具有超时机制或适当的容错能力。",
        "args": {},
        "response": {
          "result": "MongoDB connection is healthy"
        },
        "execution_time": 0.0020008087158203125,
        "is_functional_test": false
      }
    ],
    "mcp_list_databases": [
      {
        "case_name": "列出MongoDB所有数据库-基本功能测试",
        "purpose": "验证mcp_list_databases工具在无参数情况下能否正确列出MongoDB实例中的所有数据库。",
        "args": {},
        "response": [
          "admin",
          "config",
          "local",
          "智能软件工"
        ],
        "execution_time": 0.004000425338745117,
        "is_functional_test": true
      },
      {
        "case_name": "列出MongoDB所有数据库-空数据库环境测试",
        "purpose": "验证当MongoDB中没有任何数据库时，工具是否能正确返回空列表而不报错。",
        "args": {},
        "response": [
          "admin",
          "config",
          "local",
          "智能软件工"
        ],
        "execution_time": 0.0021495819091796875,
        "is_functional_test": true
      },
      {
        "case_name": "列出MongoDB所有数据库-权限不足情况测试",
        "purpose": "测试当前用户对MongoDB没有访问权限时，工具是否能够正确捕获异常并返回安全提示。",
        "args": {},
        "response": [
          "admin",
          "config",
          "local",
          "智能软件工"
        ],
        "execution_time": 0.0030007362365722656,
        "is_functional_test": false
      },
      {
        "case_name": "列出MongoDB所有数据库-连接中断测试",
        "purpose": "模拟MongoDB服务不可用时，验证工具是否能正确处理错误并返回有意义的状态信息。",
        "args": {},
        "response": [
          "admin",
          "config",
          "local",
          "智能软件工"
        ],
        "execution_time": 0.001999378204345703,
        "is_functional_test": false
      },
      {
        "case_name": "列出MongoDB所有数据库-超时响应测试",
        "purpose": "验证工具在MongoDB响应延迟时是否具有超时机制或适当的容错能力。",
        "args": {},
        "response": [
          "admin",
          "config",
          "local",
          "智能软件工"
        ],
        "execution_time": 0.002000093460083008,
        "is_functional_test": false
      }
    ],
    "mcp_list_collections": [
      {
        "case_name": "列出指定数据库集合-基本功能测试",
        "purpose": "验证mcp_list_collections工具能否正确列出指定数据库中的所有集合。",
        "args": {
          "database_name": "智能软件工"
        },
        "response": {
          "result": "用户信息"
        },
        "execution_time": 0.0029997825622558594,
        "is_functional_test": true
      },
      {
        "case_name": "列出指定数据库集合-空数据库测试",
        "purpose": "验证当指定的数据库中没有任何集合时，工具是否能正确返回空列表而不报错。",
        "args": {
          "database_name": "test_empty_db"
        },
        "response": {
          "result": "Database 'test_empty_db' does not exist"
        },
        "execution_time": 0.0029997825622558594,
        "is_functional_test": true
      },
      {
        "case_name": "列出指定数据库集合-权限不足情况测试",
        "purpose": "测试当前用户对目标数据库没有访问权限时，工具是否能够正确捕获异常并返回安全提示。",
        "args": {
          "database_name": "restricted_db"
        },
        "response": {
          "result": "Database 'restricted_db' does not exist"
        },
        "execution_time": 0.0020112991333007812,
        "is_functional_test": false
      },
      {
        "case_name": "列出指定数据库集合-无效数据库名称测试",
        "purpose": "验证工具在传入不存在的数据库名称时是否能正确处理错误并返回有意义的信息。",
        "args": {
          "database_name": "nonexistent_db"
        },
        "response": {
          "result": "Database 'nonexistent_db' does not exist"
        },
        "execution_time": 0.0029997825622558594,
        "is_functional_test": false
      },
      {
        "case_name": "列出指定数据库集合-连接中断测试",
        "purpose": "模拟MongoDB服务不可用时，验证工具是否能正确处理错误并返回有意义的状态信息。",
        "args": {
          "database_name": "智能软件工"
        },
        "response": {
          "result": "用户信息"
        },
        "execution_time": 0.0030012130737304688,
        "is_functional_test": false
      },
      {
        "case_name": "列出指定数据库集合-超时响应测试",
        "purpose": "验证工具在MongoDB响应延迟时是否具有超时机制或适当的容错能力。",
        "args": {
          "database_name": "智能软件工"
        },
        "response": {
          "result": "用户信息"
        },
        "execution_time": 0.0019996166229248047,
        "is_functional_test": false
      },
      {
        "case_name": "列出指定数据库集合-特殊字符数据库名测试",
        "purpose": "验证工具在传入包含特殊字符的数据库名称时是否能正确处理参数或返回合理错误。",
        "args": {
          "database_name": "db_with_@special#chars"
        },
        "response": {
          "result": "Database 'db_with_@special#chars' does not exist"
        },
        "execution_time": 0.003364086151123047,
        "is_functional_test": false
      },
      {
        "case_name": "列出指定数据库集合-最大长度数据库名测试",
        "purpose": "测试工具对数据库名称最大长度的支持，确保其不会因名称过长而崩溃或抛出异常。",
        "args": {
          "database_name": "a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6A1B2C3D4E5F6G7H8I9J0K1L2M3N4O5P6Q7R8S9T0U1V2W3X4Y5Z6"
        },
        "response": {
          "result": "Database 'a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6A1B2C3D4E5F6G7H8I9J0K1L2M3N4O5P6Q7R8S9T0U1V2W3X4Y5Z6' does not exist"
        },
        "execution_time": 0.002000093460083008,
        "is_functional_test": false
      }
    ],
    "mcp_insert_document": [
      {
        "case_name": "插入文档-基本功能测试",
        "purpose": "验证mcp_insert_document工具在指定数据库和集合中能否正确插入一个新文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "document": {
            "name": "Test Document",
            "content": "This is a test document."
          }
        },
        "response": {
          "result": "Document inserted successfully with ID: 687715868ef8e30bfb8aff70"
        },
        "execution_time": 0.01694631576538086,
        "is_functional_test": true
      },
      {
        "case_name": "插入文档-空文档测试",
        "purpose": "验证当插入的文档内容为空对象时，工具是否能正确处理并返回插入成功。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "document": {}
        },
        "response": {
          "result": "Document inserted successfully with ID: 687715868ef8e30bfb8aff71"
        },
        "execution_time": 0.002000093460083008,
        "is_functional_test": true
      },
      {
        "case_name": "插入文档-特殊字符字段名测试",
        "purpose": "测试插入包含特殊字符字段名的文档时，工具是否能正确处理。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "document": {
            "field@name": "value",
            "another-field": 123
          }
        },
        "response": {
          "result": "Document inserted successfully with ID: 687715868ef8e30bfb8aff72"
        },
        "execution_time": 0.0024433135986328125,
        "is_functional_test": true
      },
      {
        "case_name": "插入文档-权限不足情况测试",
        "purpose": "测试当前用户对目标数据库或集合没有写入权限时，工具是否能正确捕获异常并返回安全提示。",
        "args": {
          "database_name": "admin",
          "collection_name": "system.users",
          "document": {
            "username": "hacker",
            "password": "123456"
          }
        },
        "response": {
          "result": "Document inserted successfully with ID: 687715868ef8e30bfb8aff73"
        },
        "execution_time": 0.019812583923339844,
        "is_functional_test": false
      },
      {
        "case_name": "插入文档-无效数据库名称测试",
        "purpose": "验证当提供的数据库名称无效或不存在时，工具是否能优雅地处理错误。",
        "args": {
          "database_name": "invalid_db_name",
          "collection_name": "test_collection",
          "document": {
            "name": "Test Document"
          }
        },
        "response": {
          "result": "Document inserted successfully with ID: 687715868ef8e30bfb8aff74"
        },
        "execution_time": 0.015004396438598633,
        "is_functional_test": false
      },
      {
        "case_name": "插入文档-无效集合名称测试",
        "purpose": "验证当提供的集合名称无效或不存在时，工具是否能优雅地处理错误。",
        "args": {
          "database_name": "test_db",
          "collection_name": "invalid_collection_name",
          "document": {
            "name": "Test Document"
          }
        },
        "response": {
          "result": "Document inserted successfully with ID: 687715868ef8e30bfb8aff75"
        },
        "execution_time": 0.0160219669342041,
        "is_functional_test": false
      },
      {
        "case_name": "插入文档-特殊数据库和集合名称测试",
        "purpose": "测试插入文档到包含特殊字符的数据库和集合中，验证工具是否能正确处理。",
        "args": {
          "database_name": "db_with_@",
          "collection_name": "collection-with-special-chars",
          "document": {
            "name": "SpecialCharTest"
          }
        },
        "response": {
          "result": "Document inserted successfully with ID: 687715868ef8e30bfb8aff76"
        },
        "execution_time": 0.013673067092895508,
        "is_functional_test": true
      }
    ],
    "mcp_find_documents": [
      {
        "case_name": "查询文档-基本功能测试",
        "purpose": "验证mcp_find_documents工具在默认参数下能否正确从指定集合中查询所有文档。",
        "args": {
          "database_name": "智能软件工",
          "collection_name": "test_collection"
        },
        "response": {
          "result": "{\n  \"error\": \"Collection 'test_collection' does not exist in database '智能软件工'\"\n}"
        },
        "execution_time": 0.002666473388671875,
        "is_functional_test": true
      },
      {
        "case_name": "查询文档-带查询条件测试",
        "purpose": "验证mcp_find_documents工具能否根据提供的查询条件筛选匹配的文档。",
        "args": {
          "database_name": "智能软件工",
          "collection_name": "test_collection",
          "query": {
            "status": "active"
          }
        },
        "response": {
          "result": "{\n  \"error\": \"Collection 'test_collection' does not exist in database '智能软件工'\"\n}"
        },
        "execution_time": 0.0035071372985839844,
        "is_functional_test": true
      },
      {
        "case_name": "查询文档-字段投影测试",
        "purpose": "验证mcp_find_documents工具是否支持字段过滤（projection）功能，仅返回指定字段。",
        "args": {
          "database_name": "智能软件工",
          "collection_name": "test_collection",
          "projection": {
            "name": 1,
            "_id": 0
          }
        },
        "response": {
          "result": "{\n  \"error\": \"Collection 'test_collection' does not exist in database '智能软件工'\"\n}"
        },
        "execution_time": 0.0030167102813720703,
        "is_functional_test": true
      },
      {
        "case_name": "查询文档-限制返回数量测试",
        "purpose": "验证mcp_find_documents工具的limit参数是否能正确限制返回结果的数量。",
        "args": {
          "database_name": "智能软件工",
          "collection_name": "test_collection",
          "limit": 5
        },
        "response": {
          "result": "{\n  \"error\": \"Collection 'test_collection' does not exist in database '智能软件工'\"\n}"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": true
      },
      {
        "case_name": "查询文档-组合查询条件与投影测试",
        "purpose": "验证mcp_find_documents工具能否同时使用query和projection参数进行复合查询。",
        "args": {
          "database_name": "智能软件工",
          "collection_name": "test_collection",
          "query": {
            "category": "technology"
          },
          "projection": {
            "title": 1,
            "author": 1,
            "_id": 0
          }
        },
        "response": {
          "result": "{\n  \"error\": \"Collection 'test_collection' does not exist in database '智能软件工'\"\n}"
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": true
      },
      {
        "case_name": "查询文档-数据库不存在测试",
        "purpose": "验证当指定的数据库不存在时，工具是否能优雅地处理错误并返回空列表或错误提示。",
        "args": {
          "database_name": "nonexistent_db",
          "collection_name": "test_collection"
        },
        "response": {
          "result": "{\n  \"error\": \"Database 'nonexistent_db' does not exist\"\n}"
        },
        "execution_time": 0.002139568328857422,
        "is_functional_test": false
      },
      {
        "case_name": "查询文档-集合不存在测试",
        "purpose": "验证当指定的集合不存在时，工具是否能优雅地处理错误并返回空列表。",
        "args": {
          "database_name": "智能软件工",
          "collection_name": "nonexistent_collection"
        },
        "response": {
          "result": "{\n  \"error\": \"Collection 'nonexistent_collection' does not exist in database '智能软件工'\"\n}"
        },
        "execution_time": 0.0020003318786621094,
        "is_functional_test": false
      },
      {
        "case_name": "查询文档-权限不足情况测试",
        "purpose": "验证当前用户对MongoDB没有读取权限时，工具是否能够捕获异常并返回安全提示。",
        "args": {
          "database_name": "智能软件工",
          "collection_name": "test_collection"
        },
        "response": {
          "result": "{\n  \"error\": \"Collection 'test_collection' does not exist in database '智能软件工'\"\n}"
        },
        "execution_time": 0.0029990673065185547,
        "is_functional_test": false
      },
      {
        "case_name": "查询文档-最大限制值边界测试",
        "purpose": "验证mcp_find_documents工具能否处理最大整数作为limit参数的值而不崩溃。",
        "args": {
          "database_name": "智能软件工",
          "collection_name": "test_collection",
          "limit": 2147483647
        },
        "response": {
          "result": "{\n  \"error\": \"Collection 'test_collection' does not exist in database '智能软件工'\"\n}"
        },
        "execution_time": 0.0032739639282226562,
        "is_functional_test": false
      },
      {
        "case_name": "查询文档-特殊字符数据库名测试",
        "purpose": "验证mcp_find_documents工具能否处理包含特殊字符的数据库名称。",
        "args": {
          "database_name": "db_with_@special#chars",
          "collection_name": "test_collection"
        },
        "response": {
          "result": "{\n  \"error\": \"Database 'db_with_@special#chars' does not exist\"\n}"
        },
        "execution_time": 0.0030040740966796875,
        "is_functional_test": false
      },
      {
        "case_name": "查询文档-非法JSON格式查询参数测试",
        "purpose": "验证工具是否能检测到非法的查询参数格式并返回明确的错误信息。",
        "args": {
          "database_name": "智能软件工",
          "collection_name": "test_collection",
          "query": "invalid_query_string"
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_find_documents: 1 validation error for mcp_find_documentsArguments\nquery\n  Input should be a valid dictionary [type=dict_type, input_value='invalid_query_string', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/dict_type"
        },
        "execution_time": 0.0020012855529785156,
        "is_functional_test": false
      },
      {
        "case_name": "查询文档-空查询结果测试",
        "purpose": "验证当没有文档满足查询条件时，工具是否返回空列表而不是错误。",
        "args": {
          "database_name": "智能软件工",
          "collection_name": "test_collection",
          "query": {
            "nonexistent_field": "value"
          }
        },
        "response": {
          "result": "{\n  \"error\": \"Collection 'test_collection' does not exist in database '智能软件工'\"\n}"
        },
        "execution_time": 0.0019996166229248047,
        "is_functional_test": true
      },
      {
        "case_name": "查询文档-混合字段排除与包含测试",
        "purpose": "验证mcp_find_documents工具是否能正确处理混合包含/排除字段的情况。",
        "args": {
          "database_name": "智能软件工",
          "collection_name": "test_collection",
          "projection": {
            "name": 1,
            "password": 0,
            "_id": 0
          }
        },
        "response": {
          "result": "{\n  \"error\": \"Collection 'test_collection' does not exist in database '智能软件工'\"\n}"
        },
        "execution_time": 0.0026330947875976562,
        "is_functional_test": true
      },
      {
        "case_name": "查询文档-负数Limit参数测试",
        "purpose": "验证当传入负数作为limit参数时，工具是否能正确处理并返回错误或忽略该参数。",
        "args": {
          "database_name": "智能软件工",
          "collection_name": "test_collection",
          "limit": -1
        },
        "response": {
          "result": "{\n  \"error\": \"Collection 'test_collection' does not exist in database '智能软件工'\"\n}"
        },
        "execution_time": 0.0030012130737304688,
        "is_functional_test": false
      },
      {
        "case_name": "查询文档-连接中断测试",
        "purpose": "模拟MongoDB服务不可用时，验证工具是否能正确处理连接中断并返回有意义的状态信息。",
        "args": {
          "database_name": "智能软件工",
          "collection_name": "test_collection"
        },
        "response": {
          "result": "{\n  \"error\": \"Collection 'test_collection' does not exist in database '智能软件工'\"\n}"
        },
        "execution_time": 0.002998828887939453,
        "is_functional_test": false
      }
    ],
    "mcp_update_document": [
      {
        "case_name": "更新文档-基本单文档更新测试",
        "purpose": "验证mcp_update_document工具在提供有效数据库、集合、查询和更新操作时能否正确更新单个文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {
            "name": "Alice"
          },
          "update": {
            "$set": {
              "age": 30
            }
          },
          "multi": false
        },
        "response": {
          "result": "Successfully updated 0 document(s)"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": true
      },
      {
        "case_name": "更新文档-多文档更新测试",
        "purpose": "验证当multi参数设置为True时，mcp_update_document能否正确更新多个符合条件的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {
            "status": "active"
          },
          "update": {
            "$set": {
              "status": "inactive"
            }
          },
          "multi": true
        },
        "response": {
          "result": "Successfully updated 0 document(s)"
        },
        "execution_time": 0.0020012855529785156,
        "is_functional_test": true
      },
      {
        "case_name": "更新文档-空更新操作测试",
        "purpose": "测试当update参数为空时，工具是否能正确处理并返回错误信息。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {
            "name": "Bob"
          },
          "update": {},
          "multi": false
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_update_document: update cannot be empty"
        },
        "execution_time": 0.0023069381713867188,
        "is_functional_test": false
      },
      {
        "case_name": "更新文档-无效数据库名称测试",
        "purpose": "验证当数据库名称无效或不存在时，工具是否能够正确捕获异常并返回错误信息。",
        "args": {
          "database_name": "invalid_db",
          "collection_name": "test_collection",
          "query": {
            "name": "Charlie"
          },
          "update": {
            "$set": {
              "age": 25
            }
          },
          "multi": false
        },
        "response": {
          "result": "Successfully updated 0 document(s)"
        },
        "execution_time": 0.003002643585205078,
        "is_functional_test": false
      },
      {
        "case_name": "更新文档-权限不足情况测试",
        "purpose": "测试当前用户对MongoDB集合没有写权限时，工具是否能够正确捕获异常并返回安全提示。",
        "args": {
          "database_name": "secure_db",
          "collection_name": "restricted_collection",
          "query": {
            "name": "David"
          },
          "update": {
            "$set": {
              "age": 40
            }
          },
          "multi": false
        },
        "response": {
          "result": "Successfully updated 0 document(s)"
        },
        "execution_time": 0.0030024051666259766,
        "is_functional_test": false
      },
      {
        "case_name": "更新文档-特殊字符字段更新测试",
        "purpose": "验证工具是否支持更新包含特殊字符的字段名。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {
            "user.id": "123"
          },
          "update": {
            "$set": {
              "user.name": "NewName"
            }
          },
          "multi": false
        },
        "response": {
          "result": "Successfully updated 0 document(s)"
        },
        "execution_time": 0.002500295639038086,
        "is_functional_test": true
      },
      {
        "case_name": "更新文档-更新不存在的文档测试",
        "purpose": "测试当查询条件不匹配任何文档时，工具是否能正确返回更新失败信息。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {
            "name": "NonExistentUser"
          },
          "update": {
            "$set": {
              "age": 50
            }
          },
          "multi": false
        },
        "response": {
          "result": "Successfully updated 0 document(s)"
        },
        "execution_time": 0.003004312515258789,
        "is_functional_test": true
      },
      {
        "case_name": "更新文档-超大更新数据测试",
        "purpose": "验证工具在处理大量更新数据时是否能正常响应，防止内存溢出或超时。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {
            "name": "LargeDataUser"
          },
          "update": {
            "$set": {
              "data": "a_very_large_string_that_contains_thousands_of_characters_repeat
            }
          },
          "multi": false
        },
        "response": {
          "result": "Successfully updated 0 document(s)"
        },
        "execution_time": 0.0029997825622558594,
        "is_functional_test": true
      }
    ],
    "mcp_delete_document": [
      {
        "case_name": "删除文档-单个文档删除测试",
        "purpose": "验证mcp_delete_document工具在提供有效数据库、集合和查询条件下，是否能正确删除单个匹配的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {
            "name": "test_doc"
          },
          "multi": false
        },
        "response": {
          "result": "Successfully deleted 0 document(s)"
        },
        "execution_time": 0.002967357635498047,
        "is_functional_test": true
      },
      {
        "case_name": "删除文档-批量删除测试",
        "purpose": "验证当multi参数设置为True时，工具能否正确删除所有匹配查询条件的多个文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {
            "category": "temp"
          },
          "multi": true
        },
        "response": {
          "result": "Successfully deleted 0 document(s)"
        },
        "execution_time": 0.004000663757324219,
        "is_functional_test": true
      },
      {
        "case_name": "删除文档-使用默认multi参数测试",
        "purpose": "验证当不指定multi参数时，默认行为是否为仅删除一个文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {
            "status": "draft"
          }
        },
        "response": {
          "result": "Successfully deleted 0 document(s)"
        },
        "execution_time": 0.00469207763671875,
        "is_functional_test": true
      },
      {
        "case_name": "删除文档-无效数据库名称测试",
        "purpose": "验证当提供不存在的数据库名称时，工具是否能优雅处理错误并返回有意义的信息。",
        "args": {
          "database_name": "invalid_db",
          "collection_name": "test_collection",
          "query": {
            "name": "test_doc"
          },
          "multi": false
        },
        "response": {
          "result": "Successfully deleted 0 document(s)"
        },
        "execution_time": 0.0029990673065185547,
        "is_functional_test": false
      },
      {
        "case_name": "删除文档-无效集合名称测试",
        "purpose": "验证当提供不存在的集合名称时，工具是否能正确处理错误情况。",
        "args": {
          "database_name": "test_db",
          "collection_name": "invalid_collection",
          "query": {
            "name": "test_doc"
          },
          "multi": false
        },
        "response": {
          "result": "Successfully deleted 0 document(s)"
        },
        "execution_time": 0.0019998550415039062,
        "is_functional_test": false
      },
      {
        "case_name": "删除文档-无权限访问数据库测试",
        "purpose": "测试当前用户对目标数据库没有写权限时，工具是否能够正确捕获异常并返回安全提示。",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "restricted_collection",
          "query": {
            "user": "guest"
          },
          "multi": false
        },
        "response": {
          "result": "Successfully deleted 0 document(s)"
        },
        "execution_time": 0.0030219554901123047,
        "is_functional_test": false
      },
      {
        "case_name": "删除文档-特殊字符查询测试",
        "purpose": "验证工具是否能正确处理包含特殊字符的查询条件，如正则表达式或中文键值。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {
            "文件名": "测试文档.docx"
          },
          "multi": true
        },
        "response": {
          "result": "Successfully deleted 0 document(s)"
        },
        "execution_time": 0.003000497817993164,
        "is_functional_test": true
      },
      {
        "case_name": "删除文档-空查询条件测试",
        "purpose": "验证当查询条件为空对象时，工具是否能根据multi参数决定是删除单条还是全部文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {},
          "multi": true
        },
        "response": {
          "result": "Successfully deleted 3 document(s)"
        },
        "execution_time": 0.002000570297241211,
        "is_functional_test": true
      }
    ],
    "mcp_drop_collection": [
      {
        "case_name": "删除集合-基本功能测试",
        "purpose": "验证mcp_drop_collection工具在提供有效的数据库名和集合名时能否成功删除指定集合。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection"
        },
        "response": {
          "result": "Collection 'test_collection' has been dropped successfully from database 'test_db'"
        },
        "execution_time": 0.004911661148071289,
        "is_functional_test": true
      },
      {
        "case_name": "删除集合-集合不存在情况测试",
        "purpose": "验证当指定的集合不存在时，工具是否能正确处理并返回合理的提示信息。",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection"
        },
        "response": {
          "result": "Collection 'nonexistent_collection' does not exist in database 'test_db'"
        },
        "execution_time": 0.0029997825622558594,
        "is_functional_test": false
      },
      {
        "case_name": "删除集合-数据库不存在情况测试",
        "purpose": "验证当指定的数据库不存在时，工具是否能正确捕获错误并返回有意义的状态信息。",
        "args": {
          "database_name": "nonexistent_db",
          "collection_name": "test_collection"
        },
        "response": {
          "result": "Database 'nonexistent_db' does not exist"
        },
        "execution_time": 0.0030498504638671875,
        "is_functional_test": false
      },
      {
        "case_name": "删除集合-权限不足情况测试",
        "purpose": "测试当前用户对目标数据库没有删除权限时，工具是否能够正确捕获异常并返回安全提示。",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "secure_collection"
        },
        "response": {
          "result": "Database 'restricted_db' does not exist"
        },
        "execution_time": 0.0020034313201904297,
        "is_functional_test": false
      },
      {
        "case_name": "删除集合-连接中断测试",
        "purpose": "模拟MongoDB服务不可用时，验证工具是否能正确处理连接失败并返回有意义的错误信息。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection"
        },
        "response": {
          "result": "Collection 'test_collection' does not exist in database 'test_db'"
        },
        "execution_time": 0.0019989013671875,
        "is_functional_test": false
      },
      {
        "case_name": "删除集合-特殊字符集合名测试",
        "purpose": "验证工具是否能正确处理包含特殊字符的集合名，确保不会因格式问题导致操作失败。",
        "args": {
          "database_name": "test_db",
          "collection_name": "collection_!@#$%^&*"
        },
        "response": {
          "result": "Collection 'collection_!@#$%^&*' does not exist in database 'test_db'"
        },
        "execution_time": 0.0030002593994140625,
        "is_functional_test": true
      },
      {
        "case_name": "删除集合-空字符串参数测试",
        "purpose": "测试当传入空字符串作为数据库或集合名称时，工具是否能正确校验参数并返回错误提示。",
        "args": {
          "database_name": "",
          "collection_name": ""
        },
        "response": {
          "result": "Database '' does not exist"
        },
        "execution_time": 0.002390146255493164,
        "is_functional_test": false
      }
    ],
    "mcp_drop_database": [
      {
        "case_name": "删除数据库-基本功能测试",
        "purpose": "验证mcp_drop_database工具在提供有效数据库名称时能否正确删除指定数据库。",
        "args": {
          "database_name": "智能软件工"
        },
        "response": {
          "result": "Database '智能软件工' has been dropped successfully"
        },
        "execution_time": 0.008014917373657227,
        "is_functional_test": true
      },
      {
        "case_name": "删除数据库-尝试删除系统保留数据库",
        "purpose": "验证当尝试删除MongoDB系统保留数据库（如admin）时，工具是否能安全拒绝操作并返回错误提示。",
        "args": {
          "database_name": "admin"
        },
        "response": {
          "result": "Error dropping database: Dropping the 'admin' database is prohibited., full error: {'ok': 0.0, 'errmsg': \"Dropping the 'admin' database is prohibited.\", 'code': 20, 'codeName': 'IllegalOperation'}"
        },
        "execution_time": 0.0030014514923095703,
        "is_functional_test": false
      },
      {
        "case_name": "删除数据库-权限不足情况测试",
        "purpose": "验证当前用户对目标数据库没有删除权限时，工具是否能够捕获异常并返回安全提示。",
        "args": {
          "database_name": "智能软件工"
        },
        "response": {
          "result": "Database '智能软件工' does not exist"
        },
        "execution_time": 0.009063720703125,
        "is_functional_test": false
      },
      {
        "case_name": "删除数据库-无效数据库名称测试",
        "purpose": "验证当提供不存在的数据库名称时，工具是否能正确处理错误并返回有意义的状态信息。",
        "args": {
          "database_name": "nonexistent_db"
        },
        "response": {
          "result": "Database 'nonexistent_db' does not exist"
        },
        "execution_time": 0.004015207290649414,
        "is_functional_test": false
      },
      {
        "case_name": "删除数据库-空数据库名称参数测试",
        "purpose": "验证当未提供数据库名称或为空字符串时，工具是否能正确校验参数并返回错误信息。",
        "args": {
          "database_name": ""
        },
        "response": {
          "result": "Database '' does not exist"
        },
        "execution_time": 0.002000093460083008,
        "is_functional_test": false
      },
      {
        "case_name": "删除数据库-特殊字符数据库名称测试",
        "purpose": "验证工具是否能正确处理包含特殊字符的数据库名称，确保删除操作正常执行。",
        "args": {
          "database_name": "db_with_!@#$%^&*"
        },
        "response": {
          "result": "Database 'db_with_!@#$%^&*' does not exist"
        },
        "execution_time": 0.0029985904693603516,
        "is_functional_test": true
      },
      {
        "case_name": "删除数据库-连接中断模拟测试",
        "purpose": "模拟MongoDB服务不可用时，验证工具是否能正确处理连接失败并返回有意义的错误信息。",
        "args": {
          "database_name": "智能软件工"
        },
        "response": {
          "result": "Database '智能软件工' does not exist"
        },
        "execution_time": 0.004609584808349609,
        "is_functional_test": false
      },
      {
        "case_name": "删除数据库-超时响应测试",
        "purpose": "验证工具在MongoDB响应延迟时是否具有超时机制或适当的容错能力。",
        "args": {
          "database_name": "智能软件工"
        },
        "response": {
          "result": "Database '智能软件工' does not exist"
        },
        "execution_time": 0.0029973983764648438,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 70
}