{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "deepseek-v3-mcp_git_repository_manager",
  "server_path": "workspace/pipeline-output-servers/deepseek-v3/mcp_git_repository_manager/refined/server.py",
  "timestamp": "2025-07-16T11:03:37.503659",
  "tools": [
    {
      "name": "git_init",
      "description": "\n    Initialize a new Git repository in the specified directory.\n\n    Args:\n        directory: The path where the Git repository will be initialized.\n\n    Returns:\n        A string indicating the success or failure of the initialization.\n\n    Raises:\n        ValueError: If the directory is invalid.\n        GitCommandError: If Git initialization fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          }
        },
        "required": [
          "directory"
        ],
        "title": "git_initArguments",
        "type": "object"
      }
    },
    {
      "name": "text_write",
      "description": "\n    Write content to a specified file.\n\n    Args:\n        file_path: The path to the file that should be created or overwritten.\n        content: The content to write into the file.\n\n    Returns:\n        A confirmation message indicating success or an error message.\n\n    Raises:\n        ValueError: If the file path is invalid.\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "content"
        ],
        "title": "text_writeArguments",
        "type": "object"
      }
    },
    {
      "name": "git_status",
      "description": "\n    Display the current state of the Git repository.\n\n    Args:\n        directory: The path to the Git repository.\n\n    Returns:\n        A string containing the status information.\n\n    Raises:\n        ValueError: If the directory is invalid.\n        GitCommandError: If Git status fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          }
        },
        "required": [
          "directory"
        ],
        "title": "git_statusArguments",
        "type": "object"
      }
    },
    {
      "name": "git_add",
      "description": "\n    Add specified files to the Git staging area.\n\n    Args:\n        directory: The path to the Git repository.\n        files: A list of file paths to add to the staging area.\n\n    Returns:\n        A string confirming the files were added or an error message.\n\n    Raises:\n        ValueError: If the directory or files are invalid.\n        GitCommandError: If Git add fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "files": {
            "items": {
              "type": "string"
            },
            "title": "Files",
            "type": "array"
          }
        },
        "required": [
          "directory",
          "files"
        ],
        "title": "git_addArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_unstaged",
      "description": "\n    Show the differences between the working directory and the last commit (unstaged changes).\n\n    Args:\n        directory: The path to the Git repository.\n\n    Returns:\n        A string detailing the unstaged differences.\n\n    Raises:\n        ValueError: If the directory is invalid.\n        GitCommandError: If Git diff fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          }
        },
        "required": [
          "directory"
        ],
        "title": "git_diff_unstagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_staged",
      "description": "\n    Show the differences between the staging area and the last commit (staged changes).\n\n    Args:\n        directory: The path to the Git repository.\n\n    Returns:\n        A string detailing the staged differences.\n\n    Raises:\n        ValueError: If the directory is invalid.\n        GitCommandError: If Git diff fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          }
        },
        "required": [
          "directory"
        ],
        "title": "git_diff_stagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff",
      "description": "\n    Compare differences between branches, commits, or files.\n\n    Args:\n        directory: The path to the Git repository.\n        source: The source branch, commit, or file.\n        target: The target branch, commit, or file.\n\n    Returns:\n        A string detailing the differences.\n\n    Raises:\n        ValueError: If the directory, source, or target is invalid.\n        GitCommandError: If Git diff fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "source": {
            "title": "Source",
            "type": "string"
          },
          "target": {
            "title": "Target",
            "type": "string"
          }
        },
        "required": [
          "directory",
          "source",
          "target"
        ],
        "title": "git_diffArguments",
        "type": "object"
      }
    },
    {
      "name": "git_commit",
      "description": "\n    Commit the staged changes to the repository with a message.\n\n    Args:\n        directory: The path to the Git repository.\n        message: The commit message.\n\n    Returns:\n        A string confirming the commit or an error message.\n\n    Raises:\n        ValueError: If the directory or message is invalid.\n        GitCommandError: If Git commit fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "message": {
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "directory",
          "message"
        ],
        "title": "git_commitArguments",
        "type": "object"
      }
    },
    {
      "name": "git_reset",
      "description": "\n    Unstage files from the staging area.\n\n    Args:\n        directory: The path to the Git repository.\n        files: A list of file paths to unstage.\n\n    Returns:\n        A string confirming the reset or an error message.\n\n    Raises:\n        ValueError: If the directory or files are invalid.\n        GitCommandError: If Git reset fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "files": {
            "items": {
              "type": "string"
            },
            "title": "Files",
            "type": "array"
          }
        },
        "required": [
          "directory",
          "files"
        ],
        "title": "git_resetArguments",
        "type": "object"
      }
    },
    {
      "name": "git_log",
      "description": "\n    Display the commit history of the repository.\n\n    Args:\n        directory: The path to the Git repository.\n\n    Returns:\n        A string containing the commit history.\n\n    Raises:\n        ValueError: If the directory is invalid.\n        GitCommandError: If Git log fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          }
        },
        "required": [
          "directory"
        ],
        "title": "git_logArguments",
        "type": "object"
      }
    },
    {
      "name": "git_create_branch",
      "description": "\n    Create a new branch in the repository.\n\n    Args:\n        directory: The path to the Git repository.\n        branch_name: The name of the new branch.\n\n    Returns:\n        A string confirming the branch creation or an error message.\n\n    Raises:\n        ValueError: If the directory or branch name is invalid.\n        GitCommandError: If Git branch creation fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "directory",
          "branch_name"
        ],
        "title": "git_create_branchArguments",
        "type": "object"
      }
    },
    {
      "name": "git_checkout",
      "description": "\n    Switch to a specified branch or commit.\n\n    Args:\n        directory: The path to the Git repository.\n        target: The branch name or commit hash to switch to.\n\n    Returns:\n        A string confirming the checkout or an error message.\n\n    Raises:\n        ValueError: If the directory or target is invalid.\n        GitCommandError: If Git checkout fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "target": {
            "title": "Target",
            "type": "string"
          }
        },
        "required": [
          "directory",
          "target"
        ],
        "title": "git_checkoutArguments",
        "type": "object"
      }
    },
    {
      "name": "git_show",
      "description": "\n    Display detailed information about a specific commit.\n\n    Args:\n        directory: The path to the Git repository.\n        commit_hash: The hash of the commit to display.\n\n    Returns:\n        A string containing the commit details.\n\n    Raises:\n        ValueError: If the directory or commit hash is invalid.\n        GitCommandError: If Git show fails.\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          },
          "commit_hash": {
            "title": "Commit Hash",
            "type": "string"
          }
        },
        "required": [
          "directory",
          "commit_hash"
        ],
        "title": "git_showArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "git_init": [
      {
        "case_name": "Initialize Git Repository in Valid Directory",
        "purpose": "验证工具能否在有效目录中成功初始化一个新的Git仓库。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Git repository initialized successfully in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.18264341354370117,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Git Initialization in Non-Existent Directory",
        "purpose": "验证工具是否能正确处理无效目录路径的情况，并抛出ValueError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "Git repository initialized successfully in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "execution_time": 0.1681375503540039,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git in Nested Subdirectory with Long Path",
        "purpose": "验证工具能否在嵌套的深层子目录中成功初始化Git仓库。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z"
        },
        "response": {
          "result": "Git repository initialized successfully in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z"
        },
        "execution_time": 0.1510934829711914,
        "is_functional_test": true
      },
      {
        "case_name": "Git Initialization with Special Characters in Path",
        "purpose": "验证包含特殊字符的路径是否能被正确处理。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\image_with_!@#$%^&.png"
        },
        "response": {
          "result": "Error initializing Git repository: Path is not a directory: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\image_with_!@#$%^&.png"
        },
        "execution_time": 0.002998828887939453,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Git Init on Read-Only Directory",
        "purpose": "验证工具是否能优雅地处理目标目录为只读的情况。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Git repository initialized successfully in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.24745798110961914,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git in Empty Directory",
        "purpose": "验证空目录中初始化Git仓库的功能是否正常。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir"
        },
        "response": {
          "result": "Git repository initialized successfully in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir"
        },
        "execution_time": 0.16069912910461426,
        "is_functional_test": true
      },
      {
        "case_name": "Git Init Fails Due to Permission Denial",
        "purpose": "验证工具是否能正确处理权限不足导致的Git初始化失败。",
        "args": {
          "directory": "C:\\Windows\\System32"
        },
        "response": {
          "result": "Error initializing Git repository: Cmd('git') failed due to: exit code(1)\n  cmdline: git init\n  stderr: 'C:/Windows/System32/.git: Permission denied'"
        },
        "execution_time": 0.14224958419799805,
        "is_functional_test": false
      },
      {
        "case_name": "Git Init in Directory with Unicode Characters",
        "purpose": "验证工具是否支持包含Unicode字符的路径。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文测试路径"
        },
        "response": {
          "result": "Git repository initialized successfully in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文测试路径"
        },
        "execution_time": 0.15613627433776855,
        "is_functional_test": true
      }
    ],
    "text_write": [
      {
        "case_name": "Write Content to New File in Valid Path",
        "purpose": "验证工具能否在有效路径中创建新文件并写入内容。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "content": "This is a test content written by text_write tool."
        },
        "response": {
          "result": "Successfully wrote content to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt"
        },
        "execution_time": 0.004559993743896484,
        "is_functional_test": true
      },
      {
        "case_name": "Overwrite Existing File with New Content",
        "purpose": "验证工具能否覆盖已有文件的内容。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "content": "This is overwritten content."
        },
        "response": {
          "result": "Successfully wrote content to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
        },
        "execution_time": 0.004514932632446289,
        "is_functional_test": true
      },
      {
        "case_name": "Write to File in Nested Subdirectory",
        "purpose": "验证工具是否能在深层嵌套目录中写入文件。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z\\nested_test_file.txt",
          "content": "Content written to deeply nested file path."
        },
        "response": {
          "result": "Successfully wrote content to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z\\nested_test_file.txt"
        },
        "execution_time": 0.008043289184570312,
        "is_functional_test": true
      },
      {
        "case_name": "Write Content to File with Unicode Characters in Path",
        "purpose": "验证工具是否支持包含Unicode字符的路径。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文测试路径\\unicode_test_output.txt",
          "content": "This file has Unicode characters in its path."
        },
        "response": {
          "result": "Successfully wrote content to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文测试路径\\unicode_test_output.txt"
        },
        "execution_time": 0.00500178337097168,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Write to Invalid File Path",
        "purpose": "验证工具是否能正确处理无效文件路径的情况，并抛出ValueError。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir\\test.txt",
          "content": "Test content for invalid path."
        },
        "response": {
          "result": "Successfully wrote content to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir\\test.txt"
        },
        "execution_time": 0.007086277008056641,
        "is_functional_test": false
      },
      {
        "case_name": "Write to Read-Only Directory",
        "purpose": "验证工具是否能优雅地处理目标目录为只读的情况。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\locked_file.txt",
          "content": "Attempting to write to read-only directory."
        },
        "response": {
          "result": "Successfully wrote content to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\locked_file.txt"
        },
        "execution_time": 0.004076480865478516,
        "is_functional_test": false
      },
      {
        "case_name": "Write Empty Content to Valid File",
        "purpose": "验证工具是否能处理空内容写入操作。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_file.txt",
          "content": ""
        },
        "response": {
          "result": "Successfully wrote content to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_file.txt"
        },
        "execution_time": 0.004001140594482422,
        "is_functional_test": true
      },
      {
        "case_name": "Write Special Characters in File Content",
        "purpose": "验证工具是否能正确写入包含特殊字符的内容。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_content_file.txt",
          "content": "!@#$%^&*()_+{}[]|\\:;\"'<>,.?/"
        },
        "response": {
          "result": "Successfully wrote content to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_content_file.txt"
        },
        "execution_time": 0.00706934928894043,
        "is_functional_test": true
      }
    ],
    "git_status": [
      {
        "case_name": "Check Git Status in Initialized Repository",
        "purpose": "验证工具能否在已初始化的Git仓库中正确获取状态信息。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\t20250507-151716.png\n\t20250509-154554.mp4\n\t2507.10550v1.pdf\n\t68078d40e08a19b806665fee_1745325376_auto_driving_system.csv\n\ta/\n\tapp.ico\n\tblurred_output.png\n\tcs.csv\n\tdownloaded_testfile.txt\n\tedge_hit.png\n\tedge_max_threshold.png\n\tedge_min_threshold.png\n\tedge_xue.png\n\tempty_content_file.txt\n\texisting_file.txt\n\tfull_metadata.docx\n\tfull_metadata.pdf\n\thit.jpeg\n\thit.png\n\ticons_custom/\n\timage_with_!@#$%^&.png\n\tincludeempty.csv\n\tinspector.zip\n\tmodules.xml\n\tnew_test_file.txt\n\tnonname.html\n\tpaper1.pdf\n\tpresent.html\n\tre2.doc\n\treadonly_dir/\n\tresized_hit.png\n\tsample1.pdf\n\tsaved_document.docx\n\tsharpened_output.png\n\tspecial_content_file.txt\n\tspreadsheet.csv\n\tswe.pptx\n\ttest_output.png\n\ttest_output.txt\n\ttmp.csv\n\tunicode_test.txt\n\tunopened_save.docx\n\twhole_framework.pdf\n\txue.jpeg\n\txue.jpg\n\txue.png\n\t~$paper1.pdf\n\t\"\\344\\270\\255\\346\\226\\207\\346\\265\\213\\350\\257\\225\\350\\267\\257\\345\\276\\204/\"\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.21172237396240234,
        "is_functional_test": true
      },
      {
        "case_name": "Check Git Status with Empty Repository",
        "purpose": "验证空Git仓库中的状态信息是否被正确返回。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir"
        },
        "response": {
          "result": "Error getting Git status: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir"
        },
        "execution_time": 0.0031261444091796875,
        "is_functional_test": true
      },
      {
        "case_name": "Check Git Status in Unicode Path Repository",
        "purpose": "验证包含Unicode字符路径的Git仓库状态是否能被正确读取。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文测试路径"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文测试路径"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": true
      },
      {
        "case_name": "Check Git Status in Nested Subdirectory",
        "purpose": "验证深层嵌套目录中的Git仓库状态是否能被正确获取。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z"
        },
        "execution_time": 0.004023551940917969,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Git Status on Non-Git Directory",
        "purpose": "验证工具是否能正确处理未初始化为Git仓库的目录，并抛出GitCommandError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "execution_time": 0.005005836486816406,
        "is_functional_test": false
      },
      {
        "case_name": "Check Git Status with Special Characters in Path",
        "purpose": "验证包含特殊字符的路径是否能被正确处理并获取Git状态。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\image_with_!@#$%^&.png"
        },
        "response": {
          "result": "Error getting Git status: Path is not a directory: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\image_with_!@#$%^&.png"
        },
        "execution_time": 0.006306171417236328,
        "is_functional_test": false
      },
      {
        "case_name": "Check Git Status in Read-Only Directory",
        "purpose": "验证工具是否能优雅地处理目标目录为只读的情况。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "execution_time": 0.0035047531127929688,
        "is_functional_test": false
      },
      {
        "case_name": "Check Git Status with Invalid Directory Path",
        "purpose": "验证工具是否能正确处理无效目录路径的情况，并抛出ValueError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\ttest.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.17664003372192383,
        "is_functional_test": false
      }
    ],
    "git_add": [
      {
        "case_name": "Add Single File to Git Staging Area",
        "purpose": "验证工具能否在已初始化的Git仓库中成功将单个文件添加到暂存区。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt"
          ]
        },
        "response": {
          "result": "Added files to staging area: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt"
        },
        "execution_time": 0.005524396896362305,
        "is_functional_test": true
      },
      {
        "case_name": "Add Multiple Files to Staging Area",
        "purpose": "验证工具能否正确处理多个文件的添加操作。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_content_file.txt"
          ]
        },
        "response": {
          "result": "Added files to staging area: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt, D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_content_file.txt"
        },
        "execution_time": 0.010681629180908203,
        "is_functional_test": true
      },
      {
        "case_name": "Add File in Nested Subdirectory",
        "purpose": "验证工具能否将嵌套子目录中的文件添加到暂存区。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z\\nested_test_file.txt"
          ]
        },
        "response": {
          "result": "Added files to staging area: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z\\nested_test_file.txt"
        },
        "execution_time": 0.005020856857299805,
        "is_functional_test": true
      },
      {
        "case_name": "Add File with Unicode Characters in Path",
        "purpose": "验证工具是否支持将包含Unicode字符路径的文件添加到暂存区。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文测试路径\\unicode_test_output.txt"
          ]
        },
        "response": {
          "result": "Added files to staging area: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文测试路径\\unicode_test_output.txt"
        },
        "execution_time": 0.008976459503173828,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Add File to Non-Existent Git Repository",
        "purpose": "验证工具是否能正确处理目标目录未初始化为Git仓库的情况。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir\\test.txt"
          ]
        },
        "response": {
          "result": "Added files to staging area: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir\\test.txt"
        },
        "execution_time": 0.005114555358886719,
        "is_functional_test": false
      },
      {
        "case_name": "Add Non-Existent File to Git Staging Area",
        "purpose": "验证工具是否能优雅处理尝试添加不存在的文件的情况。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt"
          ]
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: [WinError 2] 系统找不到指定的文件。: 'nonexistent_file.txt'"
        },
        "execution_time": 0.008028745651245117,
        "is_functional_test": false
      },
      {
        "case_name": "Add File with Special Characters in Name",
        "purpose": "验证工具是否能正确处理文件名包含特殊字符的情况。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\image_with_!@#$%^&.png"
          ]
        },
        "response": {
          "result": "Added files to staging area: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\image_with_!@#$%^&.png"
        },
        "execution_time": 0.006090402603149414,
        "is_functional_test": true
      },
      {
        "case_name": "Add File in Read-Only Directory",
        "purpose": "验证工具是否能处理添加文件到只读目录的情况。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\locked_file.txt"
          ]
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": false
      }
    ],
    "git_diff_unstaged": [
      {
        "case_name": "Show Unstaged Changes in Valid Git Repository",
        "purpose": "验证工具能否在有效Git仓库中显示未暂存的更改。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.1929621696472168,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Show Unstaged Changes in Non-Git Directory",
        "purpose": "验证工具是否能正确处理非Git目录的情况，并抛出GitCommandError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.1366405487060547,
        "is_functional_test": false
      },
      {
        "case_name": "Show Diff in Deeply Nested Git Subdirectory",
        "purpose": "验证工具能否在深层嵌套的Git子目录中正常显示未暂存的差异。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z"
        },
        "execution_time": 0.00403904914855957,
        "is_functional_test": true
      },
      {
        "case_name": "Show Unstaged Changes with Special Characters in Path",
        "purpose": "验证路径中包含特殊字符时，工具是否仍能正确显示未暂存的差异。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\image_with_!@#$%^&.png"
        },
        "response": {
          "result": "Error getting unstaged differences: Path is not a directory: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\image_with_!@#$%^&.png"
        },
        "execution_time": 0.004021644592285156,
        "is_functional_test": true
      },
      {
        "case_name": "Handle Read-Only Git Repository Directory",
        "purpose": "验证工具在只读Git仓库目录下是否能优雅地处理错误。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "execution_time": 0.0049991607666015625,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Changes in Empty Git Repository",
        "purpose": "验证空的Git仓库中调用该工具是否会返回无差异信息。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir"
        },
        "response": {
          "result": "Error getting unstaged differences: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir"
        },
        "execution_time": 0.008074522018432617,
        "is_functional_test": true
      },
      {
        "case_name": "Diff Fails Due to Permission Denial",
        "purpose": "验证工具是否能正确处理权限不足导致的Git diff失败情况。",
        "args": {
          "directory": "C:\\Windows\\System32"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: C:\\Windows\\System32"
        },
        "execution_time": 0.005029439926147461,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Changes in Unicode Path Directory",
        "purpose": "验证工具是否支持包含Unicode字符的Git仓库路径。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文测试路径"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文测试路径"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": true
      }
    ],
    "git_diff_staged": [
      {
        "case_name": "Show Staged Changes in Valid Git Repository",
        "purpose": "验证工具能否正确显示有效Git仓库中暂存区与最后一次提交之间的差异。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "diff --git a/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z/nested_test_file.txt b/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z/nested_test_file.txt\nnew file mode 100644\nindex 0000000..40ab68b\n--- /dev/null\n+++ b/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z/nested_test_file.txt\n@@ -0,0 +1 @@\n+Content written to deeply nested file path.\n\\ No newline at end of file\ndiff --git a/existing_file.txt b/existing_file.txt\nnew file mode 100644\nindex 0000000..628baa0\n--- /dev/null\n+++ b/existing_file.txt\n@@ -0,0 +1 @@\n+This is overwritten content.\n\\ No newline at end of file\ndiff --git a/image_with_!@#$%^&.png b/image_with_!@#$%^&.png\nnew file mode 100644\nindex 0000000..4d34017\n--- /dev/null\n+++ b/image_with_!@#$%^&.png\n@@ -0,0 +1 @@\n+iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8z8BQDwAEhQGAqESMIAAAAABJRU5ErkJggg==\n\\ No newline at end of file\ndiff --git a/new_test_file.txt b/new_test_file.txt\nnew file mode 100644\nindex 0000000..66316d2\n--- /dev/null\n+++ b/new_test_file.txt\n@@ -0,0 +1 @@\n+This is a test content written by text_write tool.\n\\ No newline at end of file\ndiff --git a/special_content_file.txt b/special_content_file.txt\nnew file mode 100644\nindex 0000000..17bf09a\n--- /dev/null\n+++ b/special_content_file.txt\n@@ -0,0 +1 @@\n+!@#$%^&*()_+{}[]|\\:;\"'<>,.?/\n\\ No newline at end of file\ndiff --git \"a/\\344\\270\\255\\346\\226\\207\\346\\265\\213\\350\\257\\225\\350\\26...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计1795字符，剩余395字符"
        },
        "execution_time": 0.16003012657165527,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt git_diff_staged on Non-Git Directory",
        "purpose": "验证工具是否能优雅地处理非Git目录的情况，并抛出适当的错误。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "diff --git a/test.txt b/test.txt\nnew file mode 100644\nindex 0000000..1526227\n--- /dev/null\n+++ b/test.txt\n@@ -0,0 +1 @@\n+Test content for invalid path.\n\\ No newline at end of file"
        },
        "execution_time": 0.14401745796203613,
        "is_functional_test": false
      },
      {
        "case_name": "git_diff_staged with Unicode Path Repository",
        "purpose": "验证工具是否支持包含Unicode字符的路径下的Git暂存区差异查看功能。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文测试路径"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文测试路径"
        },
        "execution_time": 0.0037648677825927734,
        "is_functional_test": true
      },
      {
        "case_name": "git_diff_staged in Deeply Nested Subdirectory",
        "purpose": "验证工具是否能在深层嵌套子目录中的Git仓库中正确显示暂存区差异。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": true
      },
      {
        "case_name": "git_diff_staged Fails Due to Permission Denial",
        "purpose": "验证工具是否能正确处理权限不足导致的Git diff失败情况。",
        "args": {
          "directory": "C:\\Windows\\System32"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: C:\\Windows\\System32"
        },
        "execution_time": 0.003502368927001953,
        "is_functional_test": false
      },
      {
        "case_name": "git_diff_staged with Special Characters in Path",
        "purpose": "验证工具是否能处理包含特殊字符的路径。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\image_with_!@#$%^&.png"
        },
        "response": {
          "result": "Error getting staged differences: Path is not a directory: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\image_with_!@#$%^&.png"
        },
        "execution_time": 0.0031621456146240234,
        "is_functional_test": true
      },
      {
        "case_name": "git_diff_staged on Read-Only Git Repository",
        "purpose": "验证工具是否能优雅地处理目标Git仓库为只读的情况。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "execution_time": 0.004000663757324219,
        "is_functional_test": false
      },
      {
        "case_name": "git_diff_staged in Empty Directory",
        "purpose": "验证工具是否能正确处理空目录（未初始化为Git仓库）的情况。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir"
        },
        "response": {
          "result": "Error getting staged differences: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir"
        },
        "execution_time": 0.003372669219970703,
        "is_functional_test": false
      }
    ],
    "git_commit": [
      {
        "case_name": "Commit Staged Changes with Valid Message",
        "purpose": "验证工具能否在有效目录中成功提交暂存的更改并使用有效的提交信息。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Initial commit"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Ref '--cached' did not resolve to an object"
        },
        "execution_time": 0.004999637603759766,
        "is_functional_test": true
      },
      {
        "case_name": "Commit Without Staged Changes",
        "purpose": "验证在没有暂存更改的情况下尝试提交是否会失败，并返回适当的错误消息。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Empty commit"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Ref '--cached' did not resolve to an object"
        },
        "execution_time": 0.004018545150756836,
        "is_functional_test": true
      },
      {
        "case_name": "Commit in Nested Subdirectory",
        "purpose": "验证工具是否能在深层嵌套目录中成功提交暂存更改。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z",
          "message": "Nested directory commit"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z"
        },
        "execution_time": 0.004004478454589844,
        "is_functional_test": true
      },
      {
        "case_name": "Commit in Directory with Unicode Path",
        "purpose": "验证工具是否支持包含Unicode字符的路径中的提交操作。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文测试路径",
          "message": "Unicode path commit"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文测试路径"
        },
        "execution_time": 0.0030002593994140625,
        "is_functional_test": true
      },
      {
        "case_name": "Commit with Empty Message",
        "purpose": "验证工具是否能正确处理空提交信息的情况，并抛出ValueError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Ref '--cached' did not resolve to an object"
        },
        "execution_time": 0.00529932975769043,
        "is_functional_test": false
      },
      {
        "case_name": "Commit in Non-Existent Directory",
        "purpose": "验证工具是否能优雅地处理无效或不存在的目标目录情况。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "message": "Commit to non-existent directory"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Ref '--cached' did not resolve to an object"
        },
        "execution_time": 0.003997802734375,
        "is_functional_test": false
      },
      {
        "case_name": "Commit in Read-Only Directory",
        "purpose": "验证工具是否能处理目标目录为只读的情况，并抛出GitCommandError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "message": "Read-only directory commit attempt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "execution_time": 0.005018949508666992,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Special Characters in Message",
        "purpose": "验证提交信息中包含特殊字符时是否能被正确处理。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Commit message with !@#$%^&*()_+{}[]|\\:;\"'<>,.?/ characters"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Ref '--cached' did not resolve to an object"
        },
        "execution_time": 0.006003379821777344,
        "is_functional_test": true
      }
    ],
    "git_log": [
      {
        "case_name": "Display Commit History in Valid Git Repository",
        "purpose": "验证工具能否在有效Git仓库目录中正确显示提交历史。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Error getting commit history: Cmd('git') failed due to: exit code(128)\n  cmdline: git log\n  stderr: 'fatal: your current branch 'master' does not have any commits yet'"
        },
        "execution_time": 0.19205737113952637,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Git Log in Non-Existent Directory",
        "purpose": "验证工具是否能正确处理无效目录路径的情况，并抛出ValueError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "Error getting commit history: Cmd('git') failed due to: exit code(128)\n  cmdline: git log\n  stderr: 'fatal: your current branch 'master' does not have any commits yet'"
        },
        "execution_time": 0.14845871925354004,
        "is_functional_test": false
      },
      {
        "case_name": "Display Commit History in Nested Subdirectory with Long Path",
        "purpose": "验证工具能否在嵌套的深层子目录中显示提交历史。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": true
      },
      {
        "case_name": "Git Log with Special Characters in Path",
        "purpose": "验证包含特殊字符的路径是否能被正确处理。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\image_with_!@#$%^&.png"
        },
        "response": {
          "result": "Error getting commit history: Path is not a directory: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\image_with_!@#$%^&.png"
        },
        "execution_time": 0.003555774688720703,
        "is_functional_test": false
      },
      {
        "case_name": "Display Git Log in Read-Only Directory",
        "purpose": "验证工具是否能优雅地处理目标目录为只读的情况。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "execution_time": 0.0029985904693603516,
        "is_functional_test": false
      },
      {
        "case_name": "Git Log in Empty Git Repository",
        "purpose": "验证空Git仓库中是否能正确显示空的提交历史。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir"
        },
        "response": {
          "result": "Error getting commit history: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir"
        },
        "execution_time": 0.0033402442932128906,
        "is_functional_test": true
      },
      {
        "case_name": "Git Log Fails Due to Permission Denial",
        "purpose": "验证工具是否能正确处理权限不足导致的Git log失败。",
        "args": {
          "directory": "C:\\Windows\\System32"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: C:\\Windows\\System32"
        },
        "execution_time": 0.0030126571655273438,
        "is_functional_test": false
      },
      {
        "case_name": "Git Log in Directory with Unicode Characters",
        "purpose": "验证工具是否支持包含Unicode字符的路径。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文测试路径"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文测试路径"
        },
        "execution_time": 0.0035066604614257812,
        "is_functional_test": true
      }
    ],
    "git_diff": [
      {
        "case_name": "Compare Two Valid Branches in Git Repository",
        "purpose": "验证工具能否正确比较两个有效Git分支之间的差异。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source": "main",
          "target": "develop"
        },
        "response": {
          "result": "Error comparing differences: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff main develop\n  stderr: 'fatal: ambiguous argument 'main': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.1764683723449707,
        "is_functional_test": true
      },
      {
        "case_name": "Compare Specific Commit with a Branch",
        "purpose": "验证工具能否正确比较特定提交与分支之间的差异。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source": "abc1234",
          "target": "main"
        },
        "response": {
          "result": "Error comparing differences: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff abc1234 main\n  stderr: 'fatal: ambiguous argument 'abc1234': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.12340784072875977,
        "is_functional_test": true
      },
      {
        "case_name": "Compare Two Specific Files in Repository",
        "purpose": "验证工具能否正确比较两个具体文件之间的差异。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "target": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.20293235778808594,
        "is_functional_test": true
      },
      {
        "case_name": "Compare Files with Unicode Characters in Path",
        "purpose": "验证工具是否支持包含Unicode字符的文件路径比较。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文测试路径",
          "source": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文测试路径\\unicode_test_output.txt",
          "target": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文测试路径\\unicode_test_output.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文测试路径"
        },
        "execution_time": 0.018677473068237305,
        "is_functional_test": true
      },
      {
        "case_name": "Compare with Invalid Directory",
        "purpose": "验证工具是否能正确处理无效目录路径的情况，并抛出ValueError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "source": "main",
          "target": "develop"
        },
        "response": {
          "result": "Error comparing differences: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff main develop\n  stderr: 'fatal: ambiguous argument 'main': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.35891222953796387,
        "is_functional_test": false
      },
      {
        "case_name": "Compare with Invalid Branch Name",
        "purpose": "验证工具是否能正确处理无效分支名称的情况，并抛出GitCommandError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source": "invalid_branch",
          "target": "main"
        },
        "response": {
          "result": "Error comparing differences: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff invalid_branch main\n  stderr: 'fatal: ambiguous argument 'invalid_branch': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.3079850673675537,
        "is_functional_test": false
      },
      {
        "case_name": "Compare Files with Special Characters in Names",
        "purpose": "验证工具是否能正确处理包含特殊字符的文件名比较。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\image_with_!@#$%^&.png",
          "target": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\thresholded_!@#$%^&.png"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.31433844566345215,
        "is_functional_test": true
      },
      {
        "case_name": "Compare Empty File with Non-Empty File",
        "purpose": "验证工具是否能正确识别空文件与非空文件之间的差异。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_file.txt",
          "target": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.2577073574066162,
        "is_functional_test": true
      }
    ],
    "git_reset": [
      {
        "case_name": "Unstage Single File from Staging Area",
        "purpose": "验证工具能否成功从暂存区移除单个文件。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt"
          ]
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 'IndexFile' object has no attribute 'unstage'"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage Multiple Files from Staging Area",
        "purpose": "验证工具能否一次性从暂存区移除多个文件。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_content_file.txt"
          ]
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 'IndexFile' object has no attribute 'unstage'"
        },
        "execution_time": 0.00503993034362793,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Unstage on Non-Existent File",
        "purpose": "验证工具是否能正确处理尝试移除不存在的文件的情况，并抛出错误。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt"
          ]
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 'IndexFile' object has no attribute 'unstage'"
        },
        "execution_time": 0.008004188537597656,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage File in Nested Subdirectory",
        "purpose": "验证工具是否能处理深层嵌套目录中的文件暂存移除操作。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z\\nested_test_file.txt"
          ]
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z"
        },
        "execution_time": 0.003976345062255859,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage File with Special Characters in Path",
        "purpose": "验证包含特殊字符的文件路径是否能被正确处理。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\image_with_!@#$%^&.png",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\image_with_!@#$%^&.png"
          ]
        },
        "response": {
          "result": "Error unstaging files: Path is not a directory: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\image_with_!@#$%^&.png"
        },
        "execution_time": 0.002999544143676758,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage File in Read-Only Directory",
        "purpose": "验证工具是否能优雅地处理目标目录为只读的情况。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\locked_file.txt"
          ]
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "execution_time": 0.00719451904296875,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage Empty File List",
        "purpose": "验证工具是否能处理空文件列表输入的情况。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": []
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 'IndexFile' object has no attribute 'unstage'"
        },
        "execution_time": 0.004004955291748047,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage File in Unicode Path Directory",
        "purpose": "验证工具是否支持包含Unicode字符的路径。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文测试路径",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文测试路径\\unicode_test_output.txt"
          ]
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文测试路径"
        },
        "execution_time": 0.0042726993560791016,
        "is_functional_test": true
      }
    ],
    "git_create_branch": [
      {
        "case_name": "Create New Branch in Initialized Repository",
        "purpose": "验证工具能否在已初始化的Git仓库中成功创建新分支。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/new_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Ref 'HEAD' did not resolve to an object"
        },
        "execution_time": 0.0049991607666015625,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Create Branch in Non-Existent Directory",
        "purpose": "验证工具是否能正确处理目录不存在的情况，并抛出ValueError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "branch_name": "invalid/branch/name"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Ref 'HEAD' did not resolve to an object"
        },
        "execution_time": 0.005025386810302734,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Invalid Name Characters",
        "purpose": "验证工具是否拒绝包含非法字符的分支名称。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "invalid<branch|name>"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Ref 'HEAD' did not resolve to an object"
        },
        "execution_time": 0.008212089538574219,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch in Deeply Nested Subdirectory",
        "purpose": "验证工具是否能在深层嵌套路径的Git仓库中创建分支。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z",
          "branch_name": "deep_nested_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z"
        },
        "execution_time": 0.0050013065338134766,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch with Unicode Name",
        "purpose": "验证工具是否支持使用Unicode字符命名分支。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文测试路径",
          "branch_name": "功能测试分支"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文测试路径"
        },
        "execution_time": 0.004014253616333008,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Create Branch in Read-Only Git Directory",
        "purpose": "验证工具是否能优雅地处理目标Git目录为只读的情况。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "branch_name": "readonly_branch_attempt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "execution_time": 0.007002353668212891,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Empty Name",
        "purpose": "验证工具是否拒绝空分支名并抛出适当的错误。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Ref 'HEAD' did not resolve to an object"
        },
        "execution_time": 0.006006479263305664,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Special Characters in Path",
        "purpose": "验证工具是否能处理包含特殊字符的路径中的分支创建操作。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\image_with_!@#$%^&.png",
          "branch_name": "special_path_branch"
        },
        "response": {
          "result": "Error creating branch: Path is not a directory: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\image_with_!@#$%^&.png"
        },
        "execution_time": 0.003954172134399414,
        "is_functional_test": true
      }
    ],
    "git_checkout": [
      {
        "case_name": "Checkout Valid Branch in Initialized Repository",
        "purpose": "验证工具能否在已初始化的Git仓库中成功切换到指定的有效分支。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "target": "main"
        },
        "response": {
          "result": "Error checking out: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout main\n  stderr: 'error: pathspec 'main' did not match any file(s) known to git'"
        },
        "execution_time": 0.13652920722961426,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout to Non-Existent Branch",
        "purpose": "验证工具是否能正确处理无效的分支名并抛出GitCommandError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "target": "invalid_branch"
        },
        "response": {
          "result": "Error checking out: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout invalid_branch\n  stderr: 'error: pathspec 'invalid_branch' did not match any file(s) known to git'"
        },
        "execution_time": 0.14798808097839355,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout Using Commit Hash",
        "purpose": "验证工具能否使用有效的提交哈希进行检出操作。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "target": "a1b2c3d4e5f67890abcdef1234567890abcd"
        },
        "response": {
          "result": "Error checking out: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout a1b2c3d4e5f67890abcdef1234567890abcd\n  stderr: 'error: pathspec 'a1b2c3d4e5f67890abcdef1234567890abcd' did not match any file(s) known to git'"
        },
        "execution_time": 0.11322855949401855,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout in Empty Directory",
        "purpose": "验证工具是否能在空目录中执行Git checkout操作时返回错误信息。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir",
          "target": "main"
        },
        "response": {
          "result": "Error checking out: Directory does not exist: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_dir"
        },
        "execution_time": 0.0041997432708740234,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout with Special Characters in Target",
        "purpose": "验证工具是否能正确处理包含特殊字符的目标参数（如符号或空格）。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "target": "feature/!@#$%^&*()"
        },
        "response": {
          "result": "Error checking out: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout feature/!@#$%^&*()\n  stderr: 'error: pathspec 'feature/!@#$%^&*()' did not match any file(s) known to git'"
        },
        "execution_time": 0.15944504737854004,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout in Read-Only Repository",
        "purpose": "验证工具是否能优雅地处理目标仓库为只读的情况。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "target": "main"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "execution_time": 0.003349781036376953,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout with Unicode Path and Target",
        "purpose": "验证工具是否支持路径和目标参数中包含Unicode字符。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文测试路径",
          "target": "功能分支"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文测试路径"
        },
        "execution_time": 0.004004478454589844,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout Without Git Initialization",
        "purpose": "验证工具是否能检测未初始化的Git仓库并返回错误信息。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "target": "main"
        },
        "response": {
          "result": "Error checking out: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout main\n  stderr: 'error: pathspec 'main' did not match any file(s) known to git'"
        },
        "execution_time": 0.1744856834411621,
        "is_functional_test": false
      }
    ],
    "git_show": [
      {
        "case_name": "Display Details of Valid Commit in Initialized Repository",
        "purpose": "验证工具能否在已初始化的Git仓库中正确显示指定有效提交的详细信息。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "4d340178c77090b83513b90118a1dcc01fd0a069"
        },
        "response": {
          "result": "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8z8BQDwAEhQGAqESMIAAAAABJRU5ErkJggg=="
        },
        "execution_time": 0.1841750144958496,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Show Commit in Non-Existent Directory",
        "purpose": "验证工具是否能正确处理目录不存在的情况，并抛出ValueError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "commit_hash": "4d340178c77090b83513b90118a1dcc01fd0a069"
        },
        "response": {
          "result": "Error showing commit details: Cmd('git') failed due to: exit code(128)\n  cmdline: git show 4d340178c77090b83513b90118a1dcc01fd0a069\n  stderr: 'fatal: bad object 4d340178c77090b83513b90118a1dcc01fd0a069'"
        },
        "execution_time": 0.2079927921295166,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit with Invalid Commit Hash",
        "purpose": "验证工具是否能正确处理无效的commit hash并抛出GitCommandError。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "invalid_commit_hash_123456"
        },
        "response": {
          "result": "Error showing commit details: Cmd('git') failed due to: exit code(128)\n  cmdline: git show invalid_commit_hash_123456\n  stderr: 'fatal: ambiguous argument 'invalid_commit_hash_123456': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.2207779884338379,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit in Deeply Nested Git Repository",
        "purpose": "验证工具能否在深层嵌套的Git仓库中成功展示提交详情。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z",
          "commit_hash": "628baa00110ce62bd2a6ac121bc14c1d7709f51d"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a\\b\\c\\d\\e\\f\\g\\h\\i\\j\\k\\l\\m\\n\\o\\p\\q\\r\\s\\t\\u\\v\\w\\x\\y\\z"
        },
        "execution_time": 0.00351715087890625,
        "is_functional_test": true
      },
      {
        "case_name": "Show Commit in Repository with Unicode Path",
        "purpose": "验证包含Unicode字符路径的Git仓库是否能正常显示提交详情。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文测试路径",
          "commit_hash": "40ab68b2fc899d47bcdf3348a99617bae49c4e33"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文测试路径"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": true
      },
      {
        "case_name": "Show Commit with Special Characters in Hash (if supported)",
        "purpose": "验证工具是否支持带有特殊字符的commit hash（如果Git允许）。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "!@#$%^&*()_+{}[]|\\:;\"'<>,.?/"
        },
        "response": {
          "result": "Error showing commit details: Cmd('git') failed due to: exit code(128)\n  cmdline: git show !@#$%^&*()_+{}[]|\\:;\"'<>,.?/\n  stderr: 'fatal: your current branch 'master' does not have any commits yet'"
        },
        "execution_time": 0.1387922763824463,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit in Read-Only Git Repository",
        "purpose": "验证工具是否能优雅地处理Git仓库目录为只读的情况。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "commit_hash": "66316d2c2e33ff8ade4c3c9e097c980850b41598"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "execution_time": 0.003815174102783203,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit with Empty Hash Value",
        "purpose": "验证工具是否能正确处理空字符串作为commit hash的情况。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": ""
        },
        "response": {
          "result": "Error showing commit details: Cmd('git') failed due to: exit code(128)\n  cmdline: git show \n  stderr: 'fatal: ambiguous argument '': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.1903088092803955,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 104
}