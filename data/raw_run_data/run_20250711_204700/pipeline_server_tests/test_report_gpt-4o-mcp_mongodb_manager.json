{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "gpt-4o-mcp_mongodb_manager",
  "server_path": "workspace/pipeline-output-servers/gpt-4o/mcp_mongodb_manager/refined/server.py",
  "timestamp": "2025-07-11T21:05:59.227433",
  "tools": [
    {
      "name": "mcp_list_databases",
      "description": "\n    Lists all available databases in the MongoDB server.\n\n    Returns:\n        str: A JSON string containing a list of database names.\n\n    Example:\n        >>> mcp_list_databases()\n        '[\"admin\", \"local\", \"my_database\"]'\n    ",
      "args_schema": {
        "properties": {},
        "title": "mcp_list_databasesArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_list_collections",
      "description": "\n    Lists all collections within a specified database.\n\n    Args:\n        database_name (str): The name of the database to query.\n\n    Returns:\n        str: A JSON string containing a list of collection names.\n\n    Example:\n        >>> mcp_list_collections(\"my_database\")\n        '[\"users\", \"orders\", \"products\"]'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          }
        },
        "required": [
          "database_name"
        ],
        "title": "mcp_list_collectionsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_insert_document",
      "description": "\n    Inserts a new document into a specified MongoDB database and collection.\n\n    Args:\n        database_name (str): The name of the database.\n        collection_name (str): The name of the collection.\n        document (dict): The document to insert.\n\n    Returns:\n        str: A JSON string containing the ID of the inserted document.\n\n    Raises:\n        ValueError: If collection name is invalid\n\n    Example:\n        >>> mcp_insert_document(\"my_database\", \"users\", {\"name\": \"John\", \"age\": 30})\n        '{\"_id\": \"63a1b2c3d4e5f67890\"}'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "document": {
            "title": "Document",
            "type": "object"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "document"
        ],
        "title": "mcp_insert_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_find_documents",
      "description": "\n    Queries documents in a specified MongoDB database and collection, with support for filtering, projection, and limiting the number of results.\n\n    Args:\n        database_name (str): The name of the database.\n        collection_name (str): The name of the collection.\n        filter (dict, optional): The filter criteria for the query.\n        projection (dict, optional): The fields to include or exclude.\n        limit (int, optional): The maximum number of documents to return.\n\n    Returns:\n        str: A JSON string containing a list of documents matching the query criteria.\n\n    Raises:\n        ValueError: If collection name is invalid\n\n    Example:\n        >>> mcp_find_documents(\"my_database\", \"users\", {\"age\": {\"$gte\": 25}}, {\"name\": 1, \"_id\": 0}, 10)\n        '[{\"name\": \"John\"}, {\"name\": \"Jane\"}]'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "filter": {
            "default": null,
            "title": "Filter",
            "type": "object"
          },
          "projection": {
            "default": null,
            "title": "Projection",
            "type": "object"
          },
          "limit": {
            "default": 0,
            "title": "Limit",
            "type": "integer"
          }
        },
        "required": [
          "database_name",
          "collection_name"
        ],
        "title": "mcp_find_documentsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_update_document",
      "description": "\n    Updates documents in a specified MongoDB database and collection, with support for single or multiple document updates.\n\n    Args:\n        database_name (str): The name of the database.\n        collection_name (str): The name of the collection.\n        filter (dict): The filter criteria to match documents for updating.\n        update (dict): The update operations to apply.\n        multi (bool, optional): If true, updates all matching documents; otherwise, updates only the first match.\n\n    Returns:\n        str: A JSON string containing the count of documents updated.\n\n    Raises:\n        ValueError: If collection name is invalid\n\n    Example:\n        >>> mcp_update_document(\"my_database\", \"users\", {\"name\": \"John\"}, {\"$set\": {\"age\": 35}}, True)\n        '{\"updated_count\": 1}'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "filter": {
            "title": "Filter",
            "type": "object"
          },
          "update": {
            "title": "Update",
            "type": "object"
          },
          "multi": {
            "default": false,
            "title": "Multi",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "filter",
          "update"
        ],
        "title": "mcp_update_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_delete_document",
      "description": "\n    Deletes documents in a specified MongoDB database and collection, with support for single or multiple document deletions.\n\n    Args:\n        database_name (str): The name of the database.\n        collection_name (str): The name of the collection.\n        filter (dict): The filter criteria to match documents for deletion.\n        multi (bool, optional): If true, deletes all matching documents; otherwise, deletes only the first match.\n\n    Returns:\n        str: A JSON string containing the count of documents deleted.\n\n    Raises:\n        ValueError: If collection name is invalid\n\n    Example:\n        >>> mcp_delete_document(\"my_database\", \"users\", {\"age\": {\"$lt\": 20}}, True)\n        '{\"deleted_count\": 2}'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "filter": {
            "title": "Filter",
            "type": "object"
          },
          "multi": {
            "default": false,
            "title": "Multi",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "filter"
        ],
        "title": "mcp_delete_documentArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "mcp_list_databases": [
      {
        "case_name": "List Databases Successfully",
        "purpose": "验证工具能够成功列出 MongoDB 中的所有数据库（基本功能测试）。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]"
        },
        "execution_time": 0.0050048828125,
        "is_functional_test": true
      },
      {
        "case_name": "List Databases with No Databases Present",
        "purpose": "验证当 MongoDB 中没有任何数据库时，工具返回空数组。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]"
        },
        "execution_time": 0.010586977005004883,
        "is_functional_test": true
      },
      {
        "case_name": "List Databases with Special Characters in Names",
        "purpose": "验证数据库名包含特殊字符时，工具是否能正确处理并返回 JSON 格式。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]"
        },
        "execution_time": 0.004926919937133789,
        "is_functional_test": true
      },
      {
        "case_name": "List Databases When Server is Unreachable",
        "purpose": "验证 MongoDB 服务器不可达时，工具是否能正确处理错误并返回有意义的错误信息。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]"
        },
        "execution_time": 0.0055103302001953125,
        "is_functional_test": false
      },
      {
        "case_name": "List Databases with Invalid Authentication",
        "purpose": "验证当工具尝试访问 MongoDB 服务器但认证失败时的错误处理情况。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]"
        },
        "execution_time": 0.00920414924621582,
        "is_functional_test": false
      },
      {
        "case_name": "List Databases from a Locked User Account",
        "purpose": "验证当 MongoDB 用户账户被锁定时，工具是否能优雅处理错误。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]"
        },
        "execution_time": 0.007513284683227539,
        "is_functional_test": false
      },
      {
        "case_name": "List Databases with Minimal Privileges",
        "purpose": "验证工具在 MongoDB 用户权限受限的情况下是否能安全处理请求。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]"
        },
        "execution_time": 0.01057577133178711,
        "is_functional_test": false
      },
      {
        "case_name": "List Databases with Long Response Time",
        "purpose": "验证工具在 MongoDB 响应延迟时是否能正确处理超时或延迟。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]"
        },
        "execution_time": 0.006999015808105469,
        "is_functional_test": false
      },
      {
        "case_name": "List Databases with Empty Response",
        "purpose": "验证工具在 MongoDB 返回空响应时是否能正确解析并返回空数组。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]"
        },
        "execution_time": 0.0034482479095458984,
        "is_functional_test": false
      },
      {
        "case_name": "List Databases with Maximum Database Count",
        "purpose": "验证当 MongoDB 中存在大量数据库时，工具是否能正确返回所有数据库名。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": true
      },
      {
        "case_name": "List Databases with Unicode Database Names",
        "purpose": "验证数据库名包含 Unicode 字符（如中文、日文等）时，工具是否能正确处理。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]"
        },
        "execution_time": 0.0075225830078125,
        "is_functional_test": true
      },
      {
        "case_name": "List Databases on MongoDB with TLS/SSL Enabled",
        "purpose": "验证工具在 MongoDB 使用 TLS/SSL 加密连接时是否能正常工作。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]"
        },
        "execution_time": 0.00550532341003418,
        "is_functional_test": true
      }
    ],
    "mcp_list_collections": [
      {
        "case_name": "List Collections Successfully",
        "purpose": "验证工具能够成功列出指定数据库中的所有集合（基本功能测试）。",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "[\"a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\", \"new_collection\", \"test_collection\", \"invalid/collection*name\", \"user_profiles\", \"long_key_collection\", \"large_data\", \"special_chars_collection\", \"binary_data_collection\", \"nonexistent_collection\", \"a_very_long_collection_name_that_exceeds_normal_limits_and_might_cause_issues\", \"users\"]"
        },
        "execution_time": 0.010790824890136719,
        "is_functional_test": true
      },
      {
        "case_name": "List Collections from Empty Database",
        "purpose": "验证当指定数据库中没有任何集合时，工具返回空数组。",
        "args": {
          "database_name": "empty_database"
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.0036995410919189453,
        "is_functional_test": true
      },
      {
        "case_name": "List Collections with Special Characters in Name",
        "purpose": "验证数据库名包含特殊字符时，工具是否能正确处理并返回集合列表。",
        "args": {
          "database_name": "db@#_测试"
        },
        "response": {
          "result": "[\"test_collection\"]"
        },
        "execution_time": 0.008026361465454102,
        "is_functional_test": true
      },
      {
        "case_name": "List Collections with Unicode Database Name",
        "purpose": "验证数据库名包含 Unicode 字符（如中文）时，工具是否能正确处理。",
        "args": {
          "database_name": "智能软件工"
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.0046405792236328125,
        "is_functional_test": true
      },
      {
        "case_name": "List Collections with Invalid Database Name",
        "purpose": "验证使用无效数据库名称时，工具是否能正确返回错误信息。",
        "args": {
          "database_name": "invalid/dbname"
        },
        "response": {
          "result": "{\"error\": \"Failed to list collections: database names cannot contain the character '/'. Check if database exists and MongoDB service is running.\"}"
        },
        "execution_time": 0.0070455074310302734,
        "is_functional_test": false
      },
      {
        "case_name": "List Collections When Database Does Not Exist",
        "purpose": "验证尝试访问不存在的数据库时，工具是否能优雅地返回空数组或错误信息。",
        "args": {
          "database_name": "does_not_exist_db"
        },
        "response": {
          "result": "[\"new_collection\", \"test_collection\"]"
        },
        "execution_time": 0.004999399185180664,
        "is_functional_test": false
      },
      {
        "case_name": "List Collections with Null Database Name",
        "purpose": "验证传入 null 或空字符串作为数据库名时，工具是否能正确处理错误。",
        "args": {
          "database_name": ""
        },
        "response": {
          "result": "{\"error\": \"Failed to list collections: database name cannot be the empty string. Check if database exists and MongoDB service is running.\"}"
        },
        "execution_time": 0.0035097599029541016,
        "is_functional_test": false
      },
      {
        "case_name": "List Collections When Server is Unreachable",
        "purpose": "验证 MongoDB 服务器不可达时，工具是否能正确处理连接失败的情况。",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "[\"a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\", \"new_collection\", \"test_collection\", \"invalid/collection*name\", \"user_profiles\", \"long_key_collection\", \"large_data\", \"special_chars_collection\", \"binary_data_collection\", \"nonexistent_collection\", \"a_very_long_collection_name_that_exceeds_normal_limits_and_might_cause_issues\", \"users\"]"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": false
      },
      {
        "case_name": "List Collections with Invalid Authentication",
        "purpose": "验证当工具尝试访问 MongoDB 但认证失败时的错误处理情况。",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "[\"a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\", \"new_collection\", \"test_collection\", \"invalid/collection*name\", \"user_profiles\", \"long_key_collection\", \"large_data\", \"special_chars_collection\", \"binary_data_collection\", \"nonexistent_collection\", \"a_very_long_collection_name_that_exceeds_normal_limits_and_might_cause_issues\", \"users\"]"
        },
        "execution_time": 0.0065419673919677734,
        "is_functional_test": false
      },
      {
        "case_name": "List Collections with Minimal Privileges",
        "purpose": "验证在用户权限受限的情况下，工具是否能安全处理集合查询请求。",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "[\"a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\", \"new_collection\", \"test_collection\", \"invalid/collection*name\", \"user_profiles\", \"long_key_collection\", \"large_data\", \"special_chars_collection\", \"binary_data_collection\", \"nonexistent_collection\", \"a_very_long_collection_name_that_exceeds_normal_limits_and_might_cause_issues\", \"users\"]"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      },
      {
        "case_name": "List Collections on MongoDB with TLS/SSL Enabled",
        "purpose": "验证工具在 MongoDB 使用 TLS/SSL 加密连接时是否能正常工作。",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "[\"a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\", \"new_collection\", \"test_collection\", \"invalid/collection*name\", \"user_profiles\", \"long_key_collection\", \"large_data\", \"special_chars_collection\", \"binary_data_collection\", \"nonexistent_collection\", \"a_very_long_collection_name_that_exceeds_normal_limits_and_might_cause_issues\", \"users\"]"
        },
        "execution_time": 0.00551152229309082,
        "is_functional_test": true
      }
    ],
    "mcp_insert_document": [
      {
        "case_name": "Insert Document Successfully",
        "purpose": "验证工具能够成功将文档插入到指定的数据库和集合中（基本功能测试）。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "document": {
            "name": "John",
            "age": 30
          }
        },
        "response": {
          "result": "{\"_id\": \"68710caed665c89a8d5748b9\"}"
        },
        "execution_time": 0.025028228759765625,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document into Non-Existent Collection",
        "purpose": "验证工具能否在目标集合不存在时自动创建集合并插入文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "document": {
            "name": "Alice",
            "email": "alice@example.com"
          }
        },
        "response": {
          "result": "{\"_id\": \"68710caed665c89a8d5748ba\"}"
        },
        "execution_time": 0.01651930809020996,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document with Special Characters in Collection Name",
        "purpose": "验证集合名包含特殊字符时，工具是否能正确处理。",
        "args": {
          "database_name": "test_db",
          "collection_name": "invalid/collection*name",
          "document": {
            "key": "value"
          }
        },
        "response": {
          "result": "{\"error\": \"Insert operation failed: Invalid characters in collection name: 'invalid/collection*name'. Collection names cannot contain slashes, dots, quotes, or special characters. Check collection name validity and MongoDB connection.\"}"
        },
        "execution_time": 0.008005619049072266,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document with Unicode Collection Name",
        "purpose": "验证集合名包含 Unicode 字符（如中文）时，工具是否能正确处理。",
        "args": {
          "database_name": "智能软件工",
          "collection_name": "用户信息",
          "document": {
            "用户名": "张三",
            "年龄": 28
          }
        },
        "response": {
          "result": "{\"_id\": \"68710caed665c89a8d5748bb\"}"
        },
        "execution_time": 0.040207624435424805,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Empty Document",
        "purpose": "验证插入空文档时工具是否能正常处理。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "document": {}
        },
        "response": {
          "result": "{\"_id\": \"68710caed665c89a8d5748bc\"}"
        },
        "execution_time": 0.02025628089904785,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document with Invalid Collection Name",
        "purpose": "验证使用非法集合名称时，工具是否能正确返回错误信息。",
        "args": {
          "database_name": "test_db",
          "collection_name": "invalid/collection*name",
          "document": {
            "name": "Invalid"
          }
        },
        "response": {
          "result": "{\"error\": \"Insert operation failed: Invalid characters in collection name: 'invalid/collection*name'. Collection names cannot contain slashes, dots, quotes, or special characters. Check collection name validity and MongoDB connection.\"}"
        },
        "execution_time": 0.02140331268310547,
        "is_functional_test": false
      },
      {
        "case_name": "Insert Document When Database Does Not Exist",
        "purpose": "验证尝试插入文档到不存在的数据库时，工具是否能自动创建数据库并插入文档。",
        "args": {
          "database_name": "does_not_exist_db",
          "collection_name": "new_collection",
          "document": {
            "name": "Bob"
          }
        },
        "response": {
          "result": "{\"_id\": \"68710caed665c89a8d5748bd\"}"
        },
        "execution_time": 0.023487567901611328,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document with Null Database Name",
        "purpose": "验证传入 null 或空字符串作为数据库名时，工具是否能正确处理错误。",
        "args": {
          "database_name": "",
          "collection_name": "users",
          "document": {
            "name": "ErrorTest"
          }
        },
        "response": {
          "result": "{\"error\": \"Insert operation failed: database name cannot be the empty string. Check collection name validity and MongoDB connection.\"}"
        },
        "execution_time": 0.02858757972717285,
        "is_functional_test": false
      },
      {
        "case_name": "Insert Document When Server is Unreachable",
        "purpose": "验证 MongoDB 服务器不可达时，工具是否能正确处理连接失败的情况。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "document": {
            "name": "OfflineUser"
          }
        },
        "response": {
          "result": "{\"_id\": \"68710caed665c89a8d5748be\"}"
        },
        "execution_time": 0.03059220314025879,
        "is_functional_test": false
      },
      {
        "case_name": "Insert Document with Invalid Authentication",
        "purpose": "验证当工具尝试访问 MongoDB 但认证失败时的错误处理情况。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "document": {
            "name": "AuthFail"
          }
        },
        "response": {
          "result": "{\"_id\": \"68710caed665c89a8d5748bf\"}"
        },
        "execution_time": 0.045749664306640625,
        "is_functional_test": false
      }
    ],
    "mcp_find_documents": [
      {
        "case_name": "Basic Query Without Filter",
        "purpose": "验证工具能够成功查询指定数据库和集合中的文档，不使用过滤条件、投影和限制。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users"
        },
        "response": {
          "result": "[{\"_id\": \"68710caed665c89a8d5748b9\", \"name\": \"John\", \"age\": 30}, {\"_id\": \"68710caed665c89a8d5748bc\"}, {\"_id\": \"68710caed665c89a8d5748be\", \"name\": \"OfflineUser\"}, {\"_id\": \"68710caed665c89a8d5748bf\", \"name\": \"AuthFail\"}]"
        },
        "execution_time": 0.03302884101867676,
        "is_functional_test": true
      },
      {
        "case_name": "Query With Simple Filter",
        "purpose": "验证工具能够正确应用简单的过滤条件进行文档查询。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "age": {
              "$gte": 25
            }
          }
        },
        "response": {
          "result": "[{\"_id\": \"68710caed665c89a8d5748b9\", \"name\": \"John\", \"age\": 30}]"
        },
        "execution_time": 0.015608787536621094,
        "is_functional_test": true
      },
      {
        "case_name": "Query With Projection Including Fields",
        "purpose": "验证工具在使用投影参数时能正确返回指定字段。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "age": {
              "$gte": 25
            }
          },
          "projection": {
            "name": 1,
            "_id": 0
          }
        },
        "response": {
          "result": "[{\"name\": \"John\"}]"
        },
        "execution_time": 0.017560482025146484,
        "is_functional_test": true
      },
      {
        "case_name": "Query With Limit Parameter",
        "purpose": "验证工具在设置 limit 参数时能正确限制返回的文档数量。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "limit": 5
        },
        "response": {
          "result": "[{\"_id\": \"68710caed665c89a8d5748b9\", \"name\": \"John\", \"age\": 30}, {\"_id\": \"68710caed665c89a8d5748bc\"}, {\"_id\": \"68710caed665c89a8d5748be\", \"name\": \"OfflineUser\"}, {\"_id\": \"68710caed665c89a8d5748bf\", \"name\": \"AuthFail\"}]"
        },
        "execution_time": 0.016620159149169922,
        "is_functional_test": true
      },
      {
        "case_name": "Query With Complex Filter Conditions",
        "purpose": "验证工具支持复杂的 MongoDB 查询条件（如嵌套操作符）。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "$and": [
              {
                "age": {
                  "$gte": 25
                }
              },
              {
                "status": "active"
              }
            ]
          }
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.03711843490600586,
        "is_functional_test": true
      },
      {
        "case_name": "Query With Invalid Collection Name",
        "purpose": "验证当提供无效的集合名称时，工具是否抛出 ValueError。",
        "args": {
          "database_name": "test_db",
          "collection_name": ""
        },
        "response": {
          "result": "{\"error\": \"Find operation failed: Collection name cannot be empty. Check collection name validity and MongoDB connection.\"}"
        },
        "execution_time": 0.04321646690368652,
        "is_functional_test": false
      },
      {
        "case_name": "Query From Nonexistent Database",
        "purpose": "验证当数据库不存在时，工具是否能优雅地处理并返回空结果。",
        "args": {
          "database_name": "does_not_exist_db",
          "collection_name": "users"
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.017032384872436523,
        "is_functional_test": false
      },
      {
        "case_name": "Query With Special Characters in Database or Collection Name",
        "purpose": "验证数据库名和集合名包含特殊字符时，工具是否能正确处理。",
        "args": {
          "database_name": "db@#_测试",
          "collection_name": "special_chars_collection"
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.010579347610473633,
        "is_functional_test": true
      },
      {
        "case_name": "Query With Unicode Field Names in Projection",
        "purpose": "验证投影中包含 Unicode 字段名时，工具是否能正确解析。",
        "args": {
          "database_name": "智能软件工",
          "collection_name": "test_collection",
          "projection": {
            "姓名": 1,
            "_id": 0
          }
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.032949209213256836,
        "is_functional_test": true
      },
      {
        "case_name": "Query When Server is Unreachable",
        "purpose": "验证 MongoDB 服务器不可达时，工具是否能正确处理连接失败的情况。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users"
        },
        "response": {
          "result": "[{\"_id\": \"68710caed665c89a8d5748b9\", \"name\": \"John\", \"age\": 30}, {\"_id\": \"68710caed665c89a8d5748bc\"}, {\"_id\": \"68710caed665c89a8d5748be\", \"name\": \"OfflineUser\"}, {\"_id\": \"68710caed665c89a8d5748bf\", \"name\": \"AuthFail\"}]"
        },
        "execution_time": 0.023038387298583984,
        "is_functional_test": false
      },
      {
        "case_name": "Query With Maximum Limit Value",
        "purpose": "验证工具在设置最大 limit 值时的行为是否符合预期。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "limit": 1000000
        },
        "response": {
          "result": "[{\"_id\": \"68710caed665c89a8d5748b9\", \"name\": \"John\", \"age\": 30}, {\"_id\": \"68710caed665c89a8d5748bc\"}, {\"_id\": \"68710caed665c89a8d5748be\", \"name\": \"OfflineUser\"}, {\"_id\": \"68710caed665c89a8d5748bf\", \"name\": \"AuthFail\"}]"
        },
        "execution_time": 0.012851953506469727,
        "is_functional_test": true
      },
      {
        "case_name": "Query With Binary Data",
        "purpose": "验证工具在集合中存在二进制数据时是否能正常返回结果。",
        "args": {
          "database_name": "test_db",
          "collection_name": "binary_data_collection"
        },
        "response": {
          "result": "[{\"_id\": \"6863b714e63a60df7d661770\", \"file_data\": {\"$binary\": {\"base64\": \"VXBkYXRlZCBieXRlcw==\", \"subType\": \"00\"}}}]"
        },
        "execution_time": 0.016173362731933594,
        "is_functional_test": true
      }
    ],
    "mcp_update_document": [
      {
        "case_name": "Update Single Document Successfully",
        "purpose": "验证工具能够成功更新单个匹配文档（基本功能测试）。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "name": "John"
          },
          "update": {
            "$set": {
              "age": 35
            }
          },
          "multi": false
        },
        "response": {
          "result": "{\"updated_count\": 1}"
        },
        "execution_time": 0.012075424194335938,
        "is_functional_test": true
      },
      {
        "case_name": "Update Multiple Documents Successfully",
        "purpose": "验证当 multi=True 时，工具能正确更新所有匹配文档（基本功能测试）。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "status": "active"
          },
          "update": {
            "$set": {
              "status": "inactive"
            }
          },
          "multi": true
        },
        "response": {
          "result": "{\"updated_count\": 0}"
        },
        "execution_time": 0.02151966094970703,
        "is_functional_test": true
      },
      {
        "case_name": "Update with Default Multi Parameter",
        "purpose": "验证不传 multi 参数时，默认只更新第一个匹配文档（使用默认值）。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "role": "admin"
          },
          "update": {
            "$inc": {
              "login_count": 1
            }
          }
        },
        "response": {
          "result": "{\"updated_count\": 0}"
        },
        "execution_time": 0.013884544372558594,
        "is_functional_test": true
      },
      {
        "case_name": "Update with Invalid Collection Name",
        "purpose": "验证传入无效集合名时，工具是否抛出 ValueError（错误处理测试）。",
        "args": {
          "database_name": "test_db",
          "collection_name": "invalid/collection*name",
          "filter": {
            "_id": 1
          },
          "update": {
            "$set": {
              "value": "updated"
            }
          }
        },
        "response": {
          "result": "{\"error\": \"Update operation failed: Invalid characters in collection name: 'invalid/collection*name'. Collection names cannot contain slashes, dots, quotes, or special characters. Check collection name validity and MongoDB connection.\"}"
        },
        "execution_time": 0.010519266128540039,
        "is_functional_test": false
      },
      {
        "case_name": "Update Nonexistent Database",
        "purpose": "验证尝试更新不存在数据库中的集合时的错误处理（错误处理测试）。",
        "args": {
          "database_name": "does_not_exist_db",
          "collection_name": "users",
          "filter": {
            "name": "John"
          },
          "update": {
            "$set": {
              "age": 35
            }
          },
          "multi": true
        },
        "response": {
          "result": "{\"updated_count\": 0}"
        },
        "execution_time": 0.018535375595092773,
        "is_functional_test": false
      },
      {
        "case_name": "Update with Special Characters in Filter",
        "purpose": "验证 filter 包含特殊字符时能否正确执行查询并更新（边界条件测试）。",
        "args": {
          "database_name": "test_db",
          "collection_name": "special_chars_collection",
          "filter": {
            "key@#_测试": "value!中文"
          },
          "update": {
            "$set": {
              "key@#_测试": "new_value"
            }
          },
          "multi": true
        },
        "response": {
          "result": "{\"updated_count\": 0}"
        },
        "execution_time": 0.02255702018737793,
        "is_functional_test": true
      },
      {
        "case_name": "Update with Unicode Field Names",
        "purpose": "验证字段名包含 Unicode 字符时，更新操作是否正常（边界条件测试）。",
        "args": {
          "database_name": "智能软件工",
          "collection_name": "user_profiles",
          "filter": {
            "用户名": "张三"
          },
          "update": {
            "$set": {
              "年龄": 28
            }
          }
        },
        "response": {
          "result": "{\"updated_count\": 0}"
        },
        "execution_time": 0.028591156005859375,
        "is_functional_test": true
      },
      {
        "case_name": "Update with Empty Update Object",
        "purpose": "验证 update 参数为空对象时，工具是否无副作用（安全性测试）。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "name": "Alice"
          },
          "update": {}
        },
        "response": {
          "result": "{\"error\": \"Update operation failed: update cannot be empty. Check collection name validity and MongoDB connection.\"}"
        },
        "execution_time": 0.04138588905334473,
        "is_functional_test": true
      },
      {
        "case_name": "Update with Malformed Update Operator",
        "purpose": "验证使用非法或未定义的更新操作符时的错误处理（错误处理测试）。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "name": "Bob"
          },
          "update": {
            "$invalid_operator": {
              "field": "value"
            }
          }
        },
        "response": {
          "result": "{\"error\": \"Update operation failed: Unknown modifier: $invalid_operator. Expected a valid update modifier or pipeline-style update specified as an array, full error: {'index': 0, 'code': 9, 'errmsg': 'Unknown modifier: $invalid_operator. Expected a valid update modifier or pipeline-style update specified as an array'}. Check collection name validity and MongoDB connection.\"}"
        },
        "execution_time": 0.03235626220703125,
        "is_functional_test": false
      },
      {
        "case_name": "Update with Very Long Filter and Update Fields",
        "purpose": "验证超长字段名和值在 filter 和 update 中是否被正确处理（边界条件测试）。",
        "args": {
          "database_name": "test_db",
          "collection_name": "long_key_collection",
          "filter": {
            "a_very_long_field_name_that_may_exceed_the_limit_of_mongodb_and_cause_issues": "some_value"
          },
          "update": {
            "$set": {
              "a_very_long_field_name_that_may_exceed_the_limit_of_mongodb_and_cause_issues": "updated_value"
            }
          }
        },
        "response": {
          "result": "{\"updated_count\": 0}"
        },
        "execution_time": 0.017063140869140625,
        "is_functional_test": true
      },
      {
        "case_name": "Update When MongoDB Server is Unreachable",
        "purpose": "验证 MongoDB 服务器不可达时，工具是否能正确处理连接失败（错误处理测试）。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "name": "John"
          },
          "update": {
            "$set": {
              "age": 35
            }
          },
          "multi": true
        },
        "response": {
          "result": "{\"updated_count\": 0}"
        },
        "execution_time": 0.02913689613342285,
        "is_functional_test": false
      },
      {
        "case_name": "Update with Minimal User Privileges",
        "purpose": "验证在用户权限受限的情况下，工具是否能安全地拒绝更新请求（安全性测试）。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "name": "John"
          },
          "update": {
            "$set": {
              "age": 35
            }
          },
          "multi": true
        },
        "response": {
          "result": "{\"updated_count\": 0}"
        },
        "execution_time": 0.01782846450805664,
        "is_functional_test": false
      }
    ],
    "mcp_delete_document": [
      {
        "case_name": "Delete Single Document Successfully",
        "purpose": "验证工具能够成功删除匹配过滤条件的第一个文档（基本功能测试）。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "age": {
              "$lt": 20
            }
          },
          "multi": false
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.01801776885986328,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Multiple Documents Successfully",
        "purpose": "验证工具在 multi=True 模式下能正确删除所有匹配的文档（基本功能测试）。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "status": "inactive"
          },
          "multi": true
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.021023035049438477,
        "is_functional_test": true
      },
      {
        "case_name": "Delete with Empty Filter",
        "purpose": "验证使用空过滤器时，是否能正确删除匹配的文档（默认行为取决于集合数据）。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {},
          "multi": true
        },
        "response": {
          "result": "{\"deleted_count\": 4}"
        },
        "execution_time": 0.024018526077270508,
        "is_functional_test": true
      },
      {
        "case_name": "Delete from Non-Existent Collection",
        "purpose": "验证尝试从不存在的集合中删除文档时，工具是否能优雅处理错误。",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "filter": {
            "name": "John Doe"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.016366243362426758,
        "is_functional_test": false
      },
      {
        "case_name": "Delete with Invalid Collection Name",
        "purpose": "验证使用包含非法字符的集合名称时，是否抛出 ValueError 异常。",
        "args": {
          "database_name": "test_db",
          "collection_name": "invalid/collection*name",
          "filter": {
            "name": "Test User"
          }
        },
        "response": {
          "result": "{\"error\": \"Delete operation failed: Invalid characters in collection name: 'invalid/collection*name'. Collection names cannot contain slashes, dots, quotes, or special characters. Check collection name validity and MongoDB connection.\"}"
        },
        "execution_time": 0.028697967529296875,
        "is_functional_test": false
      },
      {
        "case_name": "Delete with Special Characters in Filter",
        "purpose": "验证过滤器包含特殊字符时，能否正确执行删除操作。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "username": "user@domain.com"
          },
          "multi": true
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.0460355281829834,
        "is_functional_test": true
      },
      {
        "case_name": "Delete with Unicode Collection Name",
        "purpose": "验证集合名包含 Unicode 字符时，工具是否能正确处理并删除文档。",
        "args": {
          "database_name": "db@#_测试",
          "collection_name": "用户信息",
          "filter": {
            "name": "张三"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.03503918647766113,
        "is_functional_test": true
      },
      {
        "case_name": "Delete When MongoDB Server is Unreachable",
        "purpose": "验证 MongoDB 服务器不可达时，工具是否能正确处理连接失败的情况。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "age": {
              "$gt": 30
            }
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.028539657592773438,
        "is_functional_test": false
      },
      {
        "case_name": "Delete with Invalid Authentication",
        "purpose": "验证当 MongoDB 认证失败时，删除操作是否能正确处理错误。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "role": "admin"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.025542497634887695,
        "is_functional_test": false
      },
      {
        "case_name": "Delete from Locked User Account",
        "purpose": "验证当 MongoDB 用户账户被锁定时，删除操作是否能正确处理错误。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "locked": true
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.03439164161682129,
        "is_functional_test": false
      },
      {
        "case_name": "Delete with Minimal Privileges",
        "purpose": "验证在权限受限的情况下，删除操作是否被拒绝或安全处理。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter": {
            "role": "guest"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.02553415298461914,
        "is_functional_test": false
      },
      {
        "case_name": "Delete with Long Response Time",
        "purpose": "验证在 MongoDB 响应延迟时，工具是否能正确处理超时或延迟。",
        "args": {
          "database_name": "large_db",
          "collection_name": "big_collection",
          "filter": {
            "timestamp": {
              "$lt": "2020-01-01"
            }
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.03253340721130371,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 69
}