{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "gemini-2.5-pro-mcp_git_repository_manager",
  "server_path": "workspace/pipeline-output-servers/gemini-2.5-pro/mcp_git_repository_manager/refined/server.py",
  "timestamp": "2025-07-11T21:22:59.568098",
  "tools": [
    {
      "name": "git_init",
      "description": "\n    Initializes a new Git repository at the specified path.\n\n    This function creates an empty Git repository in the given directory. If the\n    directory does not exist, it will be created. If a Git repository already\n    exists at the path, an error will be returned.\n\n    Args:\n        repo_path (str): The local directory path to initialize as a Git repository.\n                         Example: \"/path/to/my-repo\"\n\n    Returns:\n        str: A JSON string confirming the repository initialization or reporting an error.\n             On success: '{\"status\": \"success\", \"message\": \"Repository initialized at /path/to/my-repo\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_initArguments",
        "type": "object"
      }
    },
    {
      "name": "git_status",
      "description": "\n    Shows the working tree status of a Git repository.\n\n    This function provides a summary of the current state of the repository,\n    including untracked files, changes not staged for commit, and changes\n    to be committed.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n\n    Returns:\n        str: A JSON string containing the Git repository's current status or an error message.\n             On success: '{\"status\": \"success\", \"data\": \"status output\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_statusArguments",
        "type": "object"
      }
    },
    {
      "name": "git_add",
      "description": "\n    Adds file changes to the staging area (index).\n\n    This function stages changes in a specific file or all changes in the\n    working directory, preparing them for the next commit.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        file_path (str): The file path to add to the staging area. Use '.' to add all changes.\n                         Example: \"my_file.py\" or \".\"\n\n    Returns:\n        str: A JSON string confirming the addition or reporting an error.\n             On success: '{\"status\": \"success\", \"message\": \"Added 'my_file.py' to the staging area.\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "file_path": {
            "title": "File Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "file_path"
        ],
        "title": "git_addArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_unstaged",
      "description": "\n    Shows changes in the working directory that are not yet staged.\n\n    This function displays the differences between the files in the working\n    directory and the staging area (index). It highlights modifications that\n    have not been added for commit.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n\n    Returns:\n        str: A JSON string containing the diff of unstaged changes or an error message.\n             On success: '{\"status\": \"success\", \"data\": \"diff output\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_diff_unstagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_staged",
      "description": "\n    Shows changes that are staged but not yet committed.\n\n    This function displays the differences between the staging area (index) and\n    the last commit (HEAD). It shows what will be included in the next commit.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n\n    Returns:\n        str: A JSON string containing the diff of staged changes or an error message.\n             On success: '{\"status\": \"success\", \"data\": \"diff output\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_diff_stagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff",
      "description": "\n    Compares differences between two branches, commits, or a branch and the working directory.\n\n    This function provides a flexible way to see the changes between different\n    points in the repository's history.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        base (str): The base branch or commit hash for comparison.\n                    Example: \"main\"\n        compare (str, optional): The branch or commit hash to compare with the base.\n                                 If not provided, compares the base with the current\n                                 working directory.\n                                 Example: \"develop\"\n\n    Returns:\n        str: A JSON string containing the diff between the two references or an error message.\n             On success: '{\"status\": \"success\", \"data\": \"diff output\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "base": {
            "title": "Base",
            "type": "string"
          },
          "compare": {
            "default": null,
            "title": "Compare",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "base"
        ],
        "title": "git_diffArguments",
        "type": "object"
      }
    },
    {
      "name": "git_commit",
      "description": "\n    Records staged changes to the repository.\n\n    This function creates a new commit containing the content of the staging area\n    (index) along with a descriptive commit message. An error is returned if\n    there are no changes staged for commit.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        message (str): The commit message.\n                       Example: \"feat: Add new feature\"\n\n    Returns:\n        str: A JSON string containing the new commit's hash or an error message.\n             On success: '{\"status\": \"success\", \"commit_hash\": \"a1b2c3d4...\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "message": {
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "message"
        ],
        "title": "git_commitArguments",
        "type": "object"
      }
    },
    {
      "name": "git_reset",
      "description": "\n    Unstages files from the staging area (index).\n\n    This function removes files from the staging area, effectively undoing a\n    'git add' command. It does not modify the working directory.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        file_path (str, optional): The specific file path to remove from the staging area.\n                                   If not provided, all files are unstaged.\n                                   Example: \"my_file.py\"\n\n    Returns:\n        str: A JSON string confirming the reset or reporting an error.\n             On success: '{\"status\": \"success\", \"message\": \"Unstaged 'my_file.py'.\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "file_path": {
            "default": null,
            "title": "File Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_resetArguments",
        "type": "object"
      }
    },
    {
      "name": "git_log",
      "description": "\n    Shows the commit history of the current branch.\n\n    This function retrieves a list of the most recent commits, providing details\n    such as commit hash, author, date, and message for each.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        max_count (int, optional): The maximum number of log entries to show.\n                                   Defaults to 10. Example: 5\n\n    Returns:\n        str: A JSON string containing the formatted commit history log or an error message.\n             On success: '{\"status\": \"success\", \"data\": [{\"hash\": ..., \"author\": ..., \"date\": ..., \"message\": ...}]}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "max_count": {
            "default": 10,
            "title": "Max Count",
            "type": "integer"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_logArguments",
        "type": "object"
      }
    },
    {
      "name": "git_create_branch",
      "description": "\n    Creates a new branch in the repository.\n\n    The new branch is created pointing to the current HEAD commit. This function\n    does not switch to the new branch.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        branch_name (str): The name of the new branch to create.\n                           Example: \"feature/new-branch\"\n\n    Returns:\n        str: A JSON string confirming the branch creation or reporting an error.\n             On success: '{\"status\": \"success\", \"message\": \"Branch 'feature/new-branch' created.\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Branch 'feature/new-branch' already exists.\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "branch_name"
        ],
        "title": "git_create_branchArguments",
        "type": "object"
      }
    },
    {
      "name": "git_checkout",
      "description": "\n    Switches to a specified branch, updating the working directory.\n\n    This function changes the current active branch to the one specified. The\n    files in the working directory will be updated to match the version in\n    the new branch.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        branch_name (str): The name of the branch to switch to.\n                           Example: \"main\"\n\n    Returns:\n        str: A JSON string confirming the branch switch or reporting an error.\n             On success: '{\"status\": \"success\", \"message\": \"Switched to branch 'main'.\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Branch 'main' not found.\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "branch_name"
        ],
        "title": "git_checkoutArguments",
        "type": "object"
      }
    },
    {
      "name": "git_show",
      "description": "\n    Shows details and changes of a specific commit.\n\n    This function provides metadata (author, date, message) and the patch\n    (diff) for a given commit hash.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        commit_hash (str): The hash of the commit to view details for. Can be a short hash.\n                           Example: \"a1b2c3d4\"\n\n    Returns:\n        str: A JSON string containing detailed information about the specified commit or an error message.\n             On success: '{\"status\": \"success\", \"data\": {\"hash\": ..., \"author\": ..., \"date\": ..., \"message\": ..., \"diff\": ...}}'\n             On failure: '{\"status\": \"error\", \"message\": \"Commit with hash 'a1b2c3d4' not found.\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "commit_hash": {
            "title": "Commit Hash",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "commit_hash"
        ],
        "title": "git_showArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "git_init": [
      {
        "case_name": "Initialize Git Repository in New Directory",
        "purpose": "验证工具能够在指定路径初始化一个新的Git仓库，路径不存在时自动创建并初始化成功。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Repository initialized at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.1472172737121582,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository in Existing Empty Directory",
        "purpose": "验证工具在已存在的空目录中正确初始化Git仓库。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository already exists at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\"}"
        },
        "execution_time": 0.004506587982177734,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Initialize Git Repository in NonEmpty Directory",
        "purpose": "验证工具不能在一个非空目录中初始化Git仓库，并返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Repository initialized at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\"}"
        },
        "execution_time": 0.17044687271118164,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Initialize Git Repository in Read-Only Directory",
        "purpose": "验证工具无法在只读目录中初始化Git仓库，并返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository already exists at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.004352569580078125,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Initialize Git Repository with Invalid Path Characters",
        "purpose": "测试包含非法字符的路径是否被拒绝，并返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\<invalid>dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"[WinError 123] \\u6587\\u4ef6\\u540d\\u3001\\u76ee\\u5f55\\u540d\\u6216\\u5377\\u6807\\u8bed\\u6cd5\\u4e0d\\u6b63\\u786e\\u3002: 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\<invalid>dir'\"}"
        },
        "execution_time": 0.004843711853027344,
        "is_functional_test": false
      },
      {
        "case_name": "Fail to Initialize Git Repository with Null Path",
        "purpose": "验证当传入空字符串作为路径时是否报错。",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Repository initialized at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\workspace\\\\pipeline-output-servers\\\\gemini-2.5-pro\\\\mcp_git_repository_manager\\\\refined\"}"
        },
        "execution_time": 0.13829565048217773,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository with Long Path Name",
        "purpose": "验证工具能否处理超长路径名的仓库初始化。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_that_still_works_for_initializing_git_repository_1234567890"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Repository initialized at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_directory_name_that_still_works_for_initializing_git_repository_1234567890\"}"
        },
        "execution_time": 0.179276704788208,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Initialize Git Repository Already Initialized",
        "purpose": "验证当目标路径已经是一个Git仓库时是否报错。",
        "args": {
          "repo_path": ".git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Repository initialized at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\workspace\\\\pipeline-output-servers\\\\gemini-2.5-pro\\\\mcp_git_repository_manager\\\\refined\"}"
        },
        "execution_time": 0.18184757232666016,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository Using Unicode Path",
        "purpose": "测试使用Unicode字符组成的路径是否可以正常初始化Git仓库。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文git仓库"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Repository initialized at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\\\u4e2d\\u6587git\\u4ed3\\u5e93\"}"
        },
        "execution_time": 0.23916029930114746,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Initialize Git Repository Without Write Permissions",
        "purpose": "验证工具在无写权限的目录下是否无法初始化Git仓库。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository already exists at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.02708292007446289,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository in Root Drive",
        "purpose": "测试工具是否允许在根驱动器路径下初始化Git仓库（边界情况）。",
        "args": {
          "repo_path": "D:\\"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository already exists at D:\\\\\"}"
        },
        "execution_time": 0.04855918884277344,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Initialize Git Repository With Special Characters In Path",
        "purpose": "验证包含特殊符号的路径是否导致初始化失败。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\path@#%&()_with_special_chars"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Repository initialized at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\path@#%&()_with_special_chars\"}"
        },
        "execution_time": 0.2641277313232422,
        "is_functional_test": false
      }
    ],
    "git_status": [
      {
        "case_name": "Get Git Status in Valid Repository",
        "purpose": "验证工具能够正确获取一个已初始化Git仓库的工作区状态。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\"}"
        },
        "execution_time": 0.004427194595336914,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Get Git Status in Non-Repository Directory",
        "purpose": "验证当指定路径不是一个Git仓库时，工具是否返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Invalid Git repository: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\"}"
        },
        "execution_time": 0.002998828887939453,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Get Git Status with Invalid Path Characters",
        "purpose": "测试包含非法字符的路径是否导致工具报错。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\<invalid>dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\<invalid>dir\"}"
        },
        "execution_time": 0.0035161972045898438,
        "is_functional_test": false
      },
      {
        "case_name": "Fail to Get Git Status with Empty Path",
        "purpose": "验证当传入空字符串作为路径时是否报错。",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: \"}"
        },
        "execution_time": 0.007012605667114258,
        "is_functional_test": false
      },
      {
        "case_name": "Get Git Status in Repository with Untracked Files",
        "purpose": "验证工具是否能检测并报告未跟踪文件的状态。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.007012605667114258,
        "is_functional_test": true
      },
      {
        "case_name": "Get Git Status in Repository with Staged Changes",
        "purpose": "验证工具能否识别并报告已暂存但尚未提交的更改。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\"}"
        },
        "execution_time": 0.005513191223144531,
        "is_functional_test": true
      },
      {
        "case_name": "Get Git Status in Repository with Modified Files",
        "purpose": "验证工具能否识别工作目录中已修改但未暂存的文件。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\"}"
        },
        "execution_time": 0.0039975643157958984,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Get Git Status in Read-Only Directory",
        "purpose": "验证工具在只读目录下无法获取Git状态，并返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.006518363952636719,
        "is_functional_test": false
      },
      {
        "case_name": "Get Git Status with Long Path Name",
        "purpose": "验证工具能否处理超长路径名的Git仓库状态查询。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_that_still_works_for_initializing_git_repository_1234567890"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_directory_name_that_still_works_for_initializing_git_repository_1234567890\"}"
        },
        "execution_time": 0.003506898880004883,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Get Git Status Without Read Permissions",
        "purpose": "验证工具在无读权限的目录下是否无法获取Git状态。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      },
      {
        "case_name": "Get Git Status Using Unicode Path",
        "purpose": "测试使用Unicode字符组成的路径是否可以正常获取Git状态。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文git仓库"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\\\u4e2d\\u6587git\\u4ed3\\u5e93\"}"
        },
        "execution_time": 0.007510185241699219,
        "is_functional_test": true
      },
      {
        "case_name": "Get Git Status in Root Drive Repository",
        "purpose": "测试工具是否允许在根驱动器路径下获取Git仓库状态。",
        "args": {
          "repo_path": "D:\\"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"An unexpected error occurred: Cmd('git') failed due to: exit code(128)\\n  cmdline: git status\\n  stderr: 'fatal: detected dubious ownership in repository at 'D:/'\\n'D:/' is owned by:\\n\\tNT AUTHORITY/SYSTEM (S-1-5-18)\\nbut the current user is:\\n\\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\\nTo add an exception for this directory, call:\\n\\n\\tgit config --global --add safe.directory D:/'\"}"
        },
        "execution_time": 0.13597536087036133,
        "is_functional_test": true
      }
    ],
    "git_add": [
      {
        "case_name": "Add Single File to Staging Area",
        "purpose": "验证工具能够将指定的单个文件添加到Git暂存区。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.004507541656494141,
        "is_functional_test": true
      },
      {
        "case_name": "Add All Changes to Staging Area",
        "purpose": "验证使用 '.' 参数时，工具能否将工作目录中的所有更改添加到暂存区。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "file_path": "."
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Add File in Non-Existent Repository",
        "purpose": "验证当指定的仓库路径不存在时，工具是否返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_repo\"}"
        },
        "execution_time": 0.007513523101806641,
        "is_functional_test": false
      },
      {
        "case_name": "Fail to Add Non-Existent File",
        "purpose": "验证尝试添加一个不存在的文件时，工具是否能正确报错。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.003998756408691406,
        "is_functional_test": false
      },
      {
        "case_name": "Add File with Unicode Path",
        "purpose": "测试工具能否处理包含Unicode字符的文件路径并成功添加到暂存区。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文git仓库",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文测试文档.docx"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\\\u4e2d\\u6587git\\u4ed3\\u5e93\"}"
        },
        "execution_time": 0.00450897216796875,
        "is_functional_test": true
      },
      {
        "case_name": "Add File with Special Characters in Name",
        "purpose": "验证工具能否处理文件名中包含特殊字符的情况，并正确将其添加到暂存区。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\file@#%&()_detected.jpg"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.005586147308349609,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Add File Without Read Permissions",
        "purpose": "验证工具在无读权限的文件上执行add操作时是否失败并返回错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir\\locked_file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.003000497817993164,
        "is_functional_test": false
      },
      {
        "case_name": "Add Empty File",
        "purpose": "验证工具能否将空文件添加到暂存区而不报错。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.002999544143676758,
        "is_functional_test": true
      },
      {
        "case_name": "Add Large File to Staging Area",
        "purpose": "测试工具是否能处理大文件的添加操作而不崩溃。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\multi_merged_output.zip"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.007898092269897461,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Add File in Locked Repository",
        "purpose": "验证当Git仓库被锁定时，工具是否无法添加文件并返回错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\locked_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.docx"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\locked_repo\"}"
        },
        "execution_time": 0.004500150680541992,
        "is_functional_test": false
      },
      {
        "case_name": "Add File with Long Path Name",
        "purpose": "验证工具能否处理超长路径名称的文件添加操作。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_that_still_works_for_initializing_git_repository_1234567890\\long_named_file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.004003286361694336,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Add File Using Null File Path",
        "purpose": "验证当传入空字符串作为文件路径时，工具是否报错。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "file_path": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.0075299739837646484,
        "is_functional_test": false
      }
    ],
    "git_diff_unstaged": [
      {
        "case_name": "Show Unstaged Changes in Valid Repository",
        "purpose": "验证工具能够正确显示一个已初始化Git仓库中未暂存的更改。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.0039980411529541016,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Show Unstaged Changes in Non-Repository Directory",
        "purpose": "验证当指定路径不是一个Git仓库时，工具是否返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Invalid Git repository: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\"}"
        },
        "execution_time": 0.004126548767089844,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Show Unstaged Changes with Invalid Path Characters",
        "purpose": "测试包含非法字符的路径是否导致工具报错。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\<invalid>dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\<invalid>dir\"}"
        },
        "execution_time": 0.006007671356201172,
        "is_functional_test": false
      },
      {
        "case_name": "Fail to Show Unstaged Changes with Empty Path",
        "purpose": "验证当传入空字符串作为路径时是否报错。",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: \"}"
        },
        "execution_time": 0.005002021789550781,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Changes in Repository with Modified Files",
        "purpose": "验证工具能否识别工作目录中已修改但未暂存的文件并展示差异。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"\"}"
        },
        "execution_time": 0.18604564666748047,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Show Unstaged Changes in Read-Only Directory",
        "purpose": "验证工具在只读目录下无法获取Git状态，并返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Changes with Long Path Name",
        "purpose": "验证工具能否处理超长路径名的Git仓库并成功获取未暂存更改。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_that_still_works_for_initializing_git_repository_1234567890"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_directory_name_that_still_works_for_initializing_git_repository_1234567890\"}"
        },
        "execution_time": 0.003509044647216797,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Show Unstaged Changes Without Read Permissions",
        "purpose": "验证工具在无读权限的目录下是否无法获取未暂存更改。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.007002830505371094,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Changes Using Unicode Path",
        "purpose": "测试使用Unicode字符组成的路径是否可以正常获取未暂存更改。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文git仓库"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\\\u4e2d\\u6587git\\u4ed3\\u5e93\"}"
        },
        "execution_time": 0.007110118865966797,
        "is_functional_test": true
      },
      {
        "case_name": "Show Unstaged Changes in Root Drive Repository",
        "purpose": "测试工具是否允许在根驱动器路径下获取Git仓库的未暂存更改。",
        "args": {
          "repo_path": "D:\\"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"An unexpected error occurred: Cmd('git') failed due to: exit code(129)\\n  cmdline: git diff\\n  stderr: 'warning: Not a git repository. Use --no-index to compare two paths outside a working tree\\nusage: git diff --no-index [<options>] <path> <path>\\n\\nDiff output format options\\n    -p, --patch           generate patch\\n    -s, --no-patch        suppress diff output\\n    -u                    generate patch\\n    -U, --unified[=<n>]   generate diffs with <n> lines context\\n    -W, --[no-]function-context\\n                          generate diffs with <n> lines context\\n    --raw                 generate the diff in raw format\\n    --patch-with-raw      synonym for '-p --raw'\\n    --patch-with-stat     synonym for '-p --stat'\\n    --numstat             machine friendly --stat\\n    --shortstat           output only the last line of --stat\\n    -X, --dirstat[=<param1>,<param2>...]\\n                          output the distribution of relative amount of changes for each sub-directory\\n    --cumulative          synonym for --dirstat=cumulative\\n    --dirstat-by-file[=<param1>,<param2>...]\\n                          synonym for --dirstat=files,<param1>,<param2>...\\n    --check               warn if changes introduce conflict markers or whitespace errors\\n    --summary             condensed summary such as creations, renames and mode changes\\n    --name-only           show only names of changed files\\n    --name-status         show only names and status of changed files\\n    --stat[=<width>[,<name-width>[,<count>]]]\\n                          generate diffstat\\n    --stat-width <width>  generate diffstat with a given width\\n    --stat-name-width <width>\\n                          generate diffstat with a given name width\\n    --stat-graph-width <width>\\n                          generate diffstat with a given graph width\\n    --stat-count <count>  generate diffstat with limited lines\\n    --[no-]compact-summary\\n                          generate compact summary in diffstat\\n    --binary              output a binary diff that can be applied\\n    --[no-]full-index     show full pre- and post-image object names on the \\\"index\\\" lines\\n    --[no-]color[=<when>] show colored diff\\n    --ws-error-highlight <kind>\\n                          highlight whitespace errors in the 'context', 'old' or 'new' lines in the diff\\n    -z                    do not munge pathnames and use NULs as output field terminators in --raw or --numstat\\n    --[no-]abbrev[=<n>]   use <n> digits to display object names\\n    --src-prefix <prefix> show the given source prefix instead of \\\"a/\\\"\\n    --dst-prefix <prefix> show the given destination prefix instead of \\\"b/\\\"\\n    --line-prefix <prefix>\\n                          prepend an additional prefix to every line of output\\n    --no-prefix           do not show any source or destination prefix\\n    --default-prefix      use default prefixes a/ and b/\\n    --inter-hunk-context <n>\\n                          show context between diff hunks up to the specified number of lines\\n    --output-indicator-new <char>\\n                          specify the character to indicate a new line instead of '+'\\n    --output-indicator-old <char>\\n                          specify the character to indicate an old line instead of '-'\\n    --output-indicator-context <char>\\n                          specify the character to indicate a context instead of ' '\\n\\nDiff rename options\\n    -B, --break-rewrites[=<n>[/<m>]]\\n                          break complete rewrite changes into pairs of delete and create\\n    -M, --find-renames[=<n>]\\n                          detect renames\\n    -D, --irreversible-delete\\n                          omit the preimage for deletes\\n    -C, --find-copies[=<n>]\\n                          detect copies\\n    --[no-]find-copies-harder\\n                          use unmodified files as source to find copies\\n    --no-renames          disable rename detection\\n    --[no-]rename-empty   use empty blobs as rename source\\n    --[no-]follow         continue listing the history of a file beyond renames\\n    -l <n>                prevent rename/copy detection if the number of rename/copy targets exceeds given limit\\n\\nDiff algorithm options\\n    --minimal             produce the smallest possible diff\\n    -w, --ignore-all-space\\n                          ignore whitespace when comparing lines\\n    -b, --ignore-space-change\\n                          ignore changes in amount of whitespace\\n    --ignore-space-at-eol ignore changes in whitespace at EOL\\n    --ignore-cr-at-eol    ignore carrier-return at the end of line\\n    --ignore-blank-lines  ignore changes whose lines are all blank\\n    -I, --[no-]ignore-matching-lines <regex>\\n                          ignore changes whose all lines match <regex>\\n    --[no-]indent-heuristic\\n                          heuristic to shift diff hunk boundaries for easy reading\\n    --patience            generate diff using the \\\"patience diff\\\" algorithm\\n    --histogram           generate diff using the \\\"histogram diff\\\" algorithm\\n    --diff-algorithm <algorithm>\\n                          choose a diff algorithm\\n    --anchored <text>     generate diff using the \\\"anchored diff\\\" algorithm\\n    --word-diff[=<mode>]  show word diff, using <mode> to delimit changed words\\n    --word-diff-regex <regex>\\n                          use <regex> to decide what a word is\\n    --color-words[=<regex>]\\n                          equivalent to --word-diff=color --word-diff-regex=<regex>\\n    --[no-]color-moved[=<mode>]\\n                          moved lines of code are colored differently\\n    --[no-]color-moved-ws <mode>\\n                          how white spaces are ignored in --color-moved\\n\\nOther diff options\\n    --[no-]relative[=<prefix>]\\n                          when run from subdir, exclude changes outside and show relative paths\\n    -a, --[no-]text       treat all files as text\\n    -R                    swap...[截断]，共计7644字符，剩余1644字符"
        },
        "execution_time": 0.1989917755126953,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Show Unstaged Changes with Special Characters In Path",
        "purpose": "验证包含特殊符号的路径是否导致工具报错。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\path@#%&()_with_special_chars"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\path@#%&()_with_special_chars\"}"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": false
      },
      {
        "case_name": "Fail to Show Unstaged Changes When Git Is Not Installed",
        "purpose": "验证系统中未安装Git时是否能返回预期错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.004931926727294922,
        "is_functional_test": false
      }
    ],
    "git_diff_staged": [
      {
        "case_name": "Show Staged Changes in Valid Repository",
        "purpose": "验证工具能够正确显示已暂存但未提交的更改。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"diff --git a/../code (1).html b/../code (1).html\\nnew file mode 100644\\nindex 0000000..26884ab\\n--- /dev/null\\n+++ b/../code (1).html\\t\\n@@ -0,0 +1,5 @@\\n+\\ufeff<!DOCTYPE html>\\r\\n+<html lang=\\\"zh-CN\\\">\\r\\n+<p>\\u4f7f\\u7528utf-8\\u7f16\\u7801\\u63d2\\u5165\\u7684HTML\\u6bb5\\u843d</p>\\r\\n+\\r\\n+<!-- \\u63d2\\u5165\\u7684\\u6ce8\\u91ca -->\\r\\ndiff --git a/../hit.png b/../hit.png\\nnew file mode 100644\\nindex 0000000..6d70f16\\nBinary files /dev/null and b/../hit.png differ\\ndiff --git a/../nature.jpg b/../nature.jpg\\nnew file mode 100644\\nindex 0000000..db3560c\\nBinary files /dev/null and b/../nature.jpg differ\\ndiff --git a/file@#%&()_screenshot.png b/file@#%&()_screenshot.png\\nnew file mode 100644\\nindex 0000000..f337d91\\nBinary files /dev/null and b/file@#%&()_screenshot.png differ\\ndiff --git a/very_long_path_that_still_works_for_saving_screenshot_1234567890.png b/very_long_path_that_still_works_for_saving_screenshot_1234567890.png\\nnew file mode 100644\\nindex 0000000..28e602a\\nBinary files /dev/null and b/very_long_path_that_still_works_for_saving_screenshot_1234567890.png differ\"}"
        },
        "execution_time": 0.11941862106323242,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Show Staged Changes in Non-Repository Directory",
        "purpose": "验证当指定路径不是一个Git仓库时，工具是否返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Invalid Git repository: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\"}"
        },
        "execution_time": 0.0029969215393066406,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Show Staged Changes with Invalid Path Characters",
        "purpose": "测试包含非法字符的路径是否导致工具报错。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\<invalid>dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\<invalid>dir\"}"
        },
        "execution_time": 0.007415056228637695,
        "is_functional_test": false
      },
      {
        "case_name": "Fail to Show Staged Changes with Empty Path",
        "purpose": "验证当传入空字符串作为路径时是否报错。",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: \"}"
        },
        "execution_time": 0.0066716670989990234,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes in Repository with Modified Files",
        "purpose": "验证工具能否识别并报告已暂存的修改文件。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.0030891895294189453,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Show Staged Changes in Read-Only Directory",
        "purpose": "验证工具在只读目录下无法获取暂存更改，并返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.00400090217590332,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes with Long Path Name",
        "purpose": "验证工具能否处理超长路径名的Git仓库暂存差异查询。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_that_still_works_for_initializing_git_repository_1234567890"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_directory_name_that_still_works_for_initializing_git_repository_1234567890\"}"
        },
        "execution_time": 0.00708460807800293,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Show Staged Changes Without Read Permissions",
        "purpose": "验证工具在无读权限的目录下是否无法获取暂存差异。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.004503726959228516,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes Using Unicode Path",
        "purpose": "测试使用Unicode字符组成的路径是否可以正常获取暂存差异。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文git仓库"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\\\u4e2d\\u6587git\\u4ed3\\u5e93\"}"
        },
        "execution_time": 0.004004716873168945,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Show Staged Changes in NonExistent Directory",
        "purpose": "验证当路径不存在时是否返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_dir\"}"
        },
        "execution_time": 0.006525754928588867,
        "is_functional_test": true
      },
      {
        "case_name": "Show Staged Changes in Root Drive Repository",
        "purpose": "测试工具是否允许在根驱动器路径下获取暂存差异。",
        "args": {
          "repo_path": "D:\\"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"An unexpected error occurred: Cmd('git') failed due to: exit code(129)\\n  cmdline: git diff --staged\\n  stderr: 'error: unknown option `staged'\\nusage: git diff --no-index [<options>] <path> <path>\\n\\nDiff output format options\\n    -p, --patch           generate patch\\n    -s, --no-patch        suppress diff output\\n    -u                    generate patch\\n    -U, --unified[=<n>]   generate diffs with <n> lines context\\n    -W, --[no-]function-context\\n                          generate diffs with <n> lines context\\n    --raw                 generate the diff in raw format\\n    --patch-with-raw      synonym for '-p --raw'\\n    --patch-with-stat     synonym for '-p --stat'\\n    --numstat             machine friendly --stat\\n    --shortstat           output only the last line of --stat\\n    -X, --dirstat[=<param1>,<param2>...]\\n                          output the distribution of relative amount of changes for each sub-directory\\n    --cumulative          synonym for --dirstat=cumulative\\n    --dirstat-by-file[=<param1>,<param2>...]\\n                          synonym for --dirstat=files,<param1>,<param2>...\\n    --check               warn if changes introduce conflict markers or whitespace errors\\n    --summary             condensed summary such as creations, renames and mode changes\\n    --name-only           show only names of changed files\\n    --name-status         show only names and status of changed files\\n    --stat[=<width>[,<name-width>[,<count>]]]\\n                          generate diffstat\\n    --stat-width <width>  generate diffstat with a given width\\n    --stat-name-width <width>\\n                          generate diffstat with a given name width\\n    --stat-graph-width <width>\\n                          generate diffstat with a given graph width\\n    --stat-count <count>  generate diffstat with limited lines\\n    --[no-]compact-summary\\n                          generate compact summary in diffstat\\n    --binary              output a binary diff that can be applied\\n    --[no-]full-index     show full pre- and post-image object names on the \\\"index\\\" lines\\n    --[no-]color[=<when>] show colored diff\\n    --ws-error-highlight <kind>\\n                          highlight whitespace errors in the 'context', 'old' or 'new' lines in the diff\\n    -z                    do not munge pathnames and use NULs as output field terminators in --raw or --numstat\\n    --[no-]abbrev[=<n>]   use <n> digits to display object names\\n    --src-prefix <prefix> show the given source prefix instead of \\\"a/\\\"\\n    --dst-prefix <prefix> show the given destination prefix instead of \\\"b/\\\"\\n    --line-prefix <prefix>\\n                          prepend an additional prefix to every line of output\\n    --no-prefix           do not show any source or destination prefix\\n    --default-prefix      use default prefixes a/ and b/\\n    --inter-hunk-context <n>\\n                          show context between diff hunks up to the specified number of lines\\n    --output-indicator-new <char>\\n                          specify the character to indicate a new line instead of '+'\\n    --output-indicator-old <char>\\n                          specify the character to indicate an old line instead of '-'\\n    --output-indicator-context <char>\\n                          specify the character to indicate a context instead of ' '\\n\\nDiff rename options\\n    -B, --break-rewrites[=<n>[/<m>]]\\n                          break complete rewrite changes into pairs of delete and create\\n    -M, --find-renames[=<n>]\\n                          detect renames\\n    -D, --irreversible-delete\\n                          omit the preimage for deletes\\n    -C, --find-copies[=<n>]\\n                          detect copies\\n    --[no-]find-copies-harder\\n                          use unmodified files as source to find copies\\n    --no-renames          disable rename detection\\n    --[no-]rename-empty   use empty blobs as rename source\\n    --[no-]follow         continue listing the history of a file beyond renames\\n    -l <n>                prevent rename/copy detection if the number of rename/copy targets exceeds given limit\\n\\nDiff algorithm options\\n    --minimal             produce the smallest possible diff\\n    -w, --ignore-all-space\\n                          ignore whitespace when comparing lines\\n    -b, --ignore-space-change\\n                          ignore changes in amount of whitespace\\n    --ignore-space-at-eol ignore changes in whitespace at EOL\\n    --ignore-cr-at-eol    ignore carrier-return at the end of line\\n    --ignore-blank-lines  ignore changes whose lines are all blank\\n    -I, --[no-]ignore-matching-lines <regex>\\n                          ignore changes whose all lines match <regex>\\n    --[no-]indent-heuristic\\n                          heuristic to shift diff hunk boundaries for easy reading\\n    --patience            generate diff using the \\\"patience diff\\\" algorithm\\n    --histogram           generate diff using the \\\"histogram diff\\\" algorithm\\n    --diff-algorithm <algorithm>\\n                          choose a diff algorithm\\n    --anchored <text>     generate diff using the \\\"anchored diff\\\" algorithm\\n    --word-diff[=<mode>]  show word diff, using <mode> to delimit changed words\\n    --word-diff-regex <regex>\\n                          use <regex> to decide what a word is\\n    --color-words[=<regex>]\\n                          equivalent to --word-diff=color --word-diff-regex=<regex>\\n    --[no-]color-moved[=<mode>]\\n                          moved lines of code are colored differently\\n    --[no-]color-moved-ws <mode>\\n                          how white spaces are ignored in --color-moved\\n\\nOther diff options\\n    --[no-]relative[=<prefix>]\\n                          when run from subdir, exclude changes outside and show relative paths\\n    -a, --[no-]text       treat all files as text\\n    -R                    swap two inputs, reverse the diff\\n    --[no-]exit-cod...[截断]，共计7594字符，剩余1594字符"
        },
        "execution_time": 0.12124991416931152,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Show Staged Changes With Special Characters In Path",
        "purpose": "验证包含特殊符号的路径是否导致获取暂存差异失败。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\path@#%&()_with_special_chars"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\path@#%&()_with_special_chars\"}"
        },
        "execution_time": 0.003005504608154297,
        "is_functional_test": false
      }
    ],
    "git_commit": [
      {
        "case_name": "Commit Staged Changes in Valid Repository",
        "purpose": "验证在已初始化的Git仓库中，暂存更改后可以成功提交并生成对应的commit hash。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "message": "feat: Add new feature"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.0045130252838134766,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Commit Without Staged Changes",
        "purpose": "验证在没有暂存任何更改的情况下尝试提交会返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "message": "chore: Empty commit"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.002504587173461914,
        "is_functional_test": true
      },
      {
        "case_name": "Commit With Empty Message",
        "purpose": "验证提交时使用空消息是否会返回错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "message": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.0029952526092529297,
        "is_functional_test": false
      },
      {
        "case_name": "Commit In Non-Existent Repository",
        "purpose": "验证向一个不存在的仓库路径提交更改时是否返回错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_repo",
          "message": "docs: Update documentation"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_repo\"}"
        },
        "execution_time": 0.006525993347167969,
        "is_functional_test": false
      },
      {
        "case_name": "Commit With Special Characters in Message",
        "purpose": "验证提交信息中包含特殊字符（如!@#$%^&*）是否能正常处理。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "message": "fix: !@#$%^&* test commit message"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.004981517791748047,
        "is_functional_test": true
      },
      {
        "case_name": "Commit In Read-Only Repository",
        "purpose": "验证在只读权限的Git仓库中提交更改是否失败，并返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir",
          "message": "perf: Optimize performance"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.005509853363037109,
        "is_functional_test": false
      },
      {
        "case_name": "Commit With Very Long Message",
        "purpose": "验证提交信息长度极限是否被正确处理。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "message": "perf: This is a very long commit message that exceeds normal length limits for testing purposes. It should still be accepted by the system."
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.00549769401550293,
        "is_functional_test": true
      },
      {
        "case_name": "Commit With Unicode Message",
        "purpose": "验证提交信息中包含Unicode字符（如中文、日文等）是否能正常处理。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "message": "feat: 添加新功能"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.0029997825622558594,
        "is_functional_test": true
      },
      {
        "case_name": "Commit With Invalid Path Characters",
        "purpose": "验证提交操作时传入包含非法字符的仓库路径是否报错。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\<invalid>dir",
          "message": "docs: Fix typo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\<invalid>dir\"}"
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": false
      },
      {
        "case_name": "Commit In Root Drive Repository",
        "purpose": "测试在根驱动器路径下进行提交操作是否可行。",
        "args": {
          "repo_path": "D:\\",
          "message": "Initial commit in root directory"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"SHA is empty, possible dubious ownership in the repository at D:\\\\.\\n            If this is unintended run:\\n\\n                      \\\"git config --global --add safe.directory D:\\\\\\\" \"}"
        },
        "execution_time": 0.15684771537780762,
        "is_functional_test": true
      },
      {
        "case_name": "Commit Without Write Permissions",
        "purpose": "验证无写权限的用户是否无法执行提交操作。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir",
          "message": "ci: Add GitHub workflow"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.004506587982177734,
        "is_functional_test": false
      },
      {
        "case_name": "Commit With Null Repo Path",
        "purpose": "验证当仓库路径为空字符串时是否返回错误。",
        "args": {
          "repo_path": "",
          "message": "style: Format code"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: \"}"
        },
        "execution_time": 0.0030045509338378906,
        "is_functional_test": false
      }
    ],
    "git_log": [
      {
        "case_name": "Get Git Log in Valid Repository with Default Count",
        "purpose": "验证工具能够正确获取一个已初始化Git仓库的默认数量（10）的提交历史记录。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": [{\"hash\": \"711b818c40451b7415ec0f34a33e9b0ca53d1807\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-11T21:26:45+08:00\", \"message\": \"Trailing spaces in path commit\"}, {\"hash\": \"7076648a6f96b39362d17059bddf210ce55725ed\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-11T21:26:44+08:00\", \"message\": \"\"}, {\"hash\": \"45015b805d40e0b8598a53f32012393ed96be1c8\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-11T21:26:43+08:00\", \"message\": \"Initial commit\"}]}"
        },
        "execution_time": 0.380129337310791,
        "is_functional_test": true
      },
      {
        "case_name": "Get Git Log in Valid Repository with Custom Count",
        "purpose": "验证工具能够正确获取一个已初始化Git仓库的指定数量（5）的提交历史记录。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\.git",
          "max_count": 5
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": [{\"hash\": \"711b818c40451b7415ec0f34a33e9b0ca53d1807\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-11T21:26:45+08:00\", \"message\": \"Trailing spaces in path commit\"}, {\"hash\": \"7076648a6f96b39362d17059bddf210ce55725ed\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-11T21:26:44+08:00\", \"message\": \"\"}, {\"hash\": \"45015b805d40e0b8598a53f32012393ed96be1c8\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-11T21:26:43+08:00\", \"message\": \"Initial commit\"}]}"
        },
        "execution_time": 0.42784881591796875,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Get Git Log in Non-Repository Directory",
        "purpose": "验证当指定路径不是一个Git仓库时，工具是否返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Invalid Git repository: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\"}"
        },
        "execution_time": 0.004324197769165039,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Get Git Log with Invalid Path Characters",
        "purpose": "测试包含非法字符的路径是否导致工具报错。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\<invalid>dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\<invalid>dir\"}"
        },
        "execution_time": 0.002507925033569336,
        "is_functional_test": false
      },
      {
        "case_name": "Fail to Get Git Log with Empty Path",
        "purpose": "验证当传入空字符串作为路径时是否报错。",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: \"}"
        },
        "execution_time": 0.0030002593994140625,
        "is_functional_test": false
      },
      {
        "case_name": "Fail to Get Git Log with Zero Max Count",
        "purpose": "验证当max_count为0时是否返回错误或合理提示。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\.git",
          "max_count": 0
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": []}"
        },
        "execution_time": 0.2804112434387207,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Get Git Log with Negative Max Count",
        "purpose": "验证当max_count为负数时是否返回错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\.git",
          "max_count": -5
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": [{\"hash\": \"711b818c40451b7415ec0f34a33e9b0ca53d1807\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-11T21:26:45+08:00\", \"message\": \"Trailing spaces in path commit\"}, {\"hash\": \"7076648a6f96b39362d17059bddf210ce55725ed\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-11T21:26:44+08:00\", \"message\": \"\"}, {\"hash\": \"45015b805d40e0b8598a53f32012393ed96be1c8\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-11T21:26:43+08:00\", \"message\": \"Initial commit\"}]}"
        },
        "execution_time": 0.4102187156677246,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Get Git Log with Very Large Max Count",
        "purpose": "验证工具能否处理非常大的max_count值并优雅地处理。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\.git",
          "max_count": 99999999
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": [{\"hash\": \"711b818c40451b7415ec0f34a33e9b0ca53d1807\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-11T21:26:45+08:00\", \"message\": \"Trailing spaces in path commit\"}, {\"hash\": \"7076648a6f96b39362d17059bddf210ce55725ed\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-11T21:26:44+08:00\", \"message\": \"\"}, {\"hash\": \"45015b805d40e0b8598a53f32012393ed96be1c8\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-11T21:26:43+08:00\", \"message\": \"Initial commit\"}]}"
        },
        "execution_time": 0.4537813663482666,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Get Git Log Without Read Permissions",
        "purpose": "验证工具在无读权限的目录下是否无法获取Git日志。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir\\.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\\\\.git\"}"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": false
      },
      {
        "case_name": "Get Git Log Using Unicode Path",
        "purpose": "测试使用Unicode字符组成的路径是否可以正常获取Git提交历史。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文保存文档.docx\\.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\\\u4e2d\\u6587\\u4fdd\\u5b58\\u6587\\u6863.docx\\\\.git\"}"
        },
        "execution_time": 0.00350189208984375,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Get Git Log with Special Characters In Path",
        "purpose": "验证包含特殊符号的路径是否导致工具报错。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\path@#%&()_with_special_chars\\.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\path@#%&()_with_special_chars\\\\.git\"}"
        },
        "execution_time": 0.007008790969848633,
        "is_functional_test": false
      },
      {
        "case_name": "Get Git Log in Root Drive Repository",
        "purpose": "测试工具是否允许在根驱动器路径下获取Git仓库提交历史。",
        "args": {
          "repo_path": "D:\\\\.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Reference at 'refs/heads/master' does not exist\"}"
        },
        "execution_time": 0.006514787673950195,
        "is_functional_test": true
      }
    ],
    "git_diff": [
      {
        "case_name": "Compare Base Branch with Working Directory",
        "purpose": "验证工具能够正确比较基础分支与工作目录之间的差异。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "base": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.005509614944458008,
        "is_functional_test": true
      },
      {
        "case_name": "Compare Two Specific Commits",
        "purpose": "验证工具可以正确比较两个指定的提交之间的差异。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "base": "abc1234",
          "compare": "def5678"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": true
      },
      {
        "case_name": "Compare Branch and Commit",
        "purpose": "验证工具能够在分支和特定提交之间进行差异比较。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "base": "main",
          "compare": "abc1234"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.0040018558502197266,
        "is_functional_test": true
      },
      {
        "case_name": "Compare Two Branches",
        "purpose": "验证工具能够在两个不同分支之间进行差异比较。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "base": "main",
          "compare": "develop"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.008129358291625977,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Compare with Invalid Repository Path",
        "purpose": "验证当提供无效仓库路径时，工具是否返回错误信息。",
        "args": {
          "repo_path": "D:\\invalid\\path\\to\\repo",
          "base": "main",
          "compare": "develop"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\invalid\\\\path\\\\to\\\\repo\"}"
        },
        "execution_time": 0.005030632019042969,
        "is_functional_test": false
      },
      {
        "case_name": "Fail to Compare with Nonexistent Base Reference",
        "purpose": "验证当基础引用（如分支或提交）不存在时，工具是否报错。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "base": "nonexistent_branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.00650477409362793,
        "is_functional_test": false
      },
      {
        "case_name": "Fail to Compare with Invalid Commit Hash",
        "purpose": "验证使用非法的commit hash时，工具是否能正确识别并报错。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "base": "invalid_hash_commit",
          "compare": "another_invalid_hash"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.003997325897216797,
        "is_functional_test": false
      },
      {
        "case_name": "Compare With Unicode Characters in Branch Names",
        "purpose": "测试带有Unicode字符的分支名是否被支持并能正常比较差异。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "base": "main",
          "compare": "feature/中文分支"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.004999637603759766,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Compare in Read-Only Repository",
        "purpose": "验证在只读Git仓库中无法执行diff操作，并返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir",
          "base": "main",
          "compare": "develop"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.00702667236328125,
        "is_functional_test": false
      },
      {
        "case_name": "Compare Using Long Branch or Commit Name",
        "purpose": "验证工具能否处理超长分支名或commit hash的diff操作。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "base": "very_long_branch_name_that_still_works_for_comparison",
          "compare": "another_very_long_branch_name_or_commit_hash"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.004106283187866211,
        "is_functional_test": true
      },
      {
        "case_name": "Compare With Special Characters in References",
        "purpose": "验证包含特殊符号的分支名或commit hash是否导致比较失败。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "base": "main",
          "compare": "branch@{upstream}"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.004002094268798828,
        "is_functional_test": false
      },
      {
        "case_name": "Fail to Compare When No Changes Exist",
        "purpose": "验证当两个参考点没有差异时，工具是否返回空结果或提示信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "base": "main",
          "compare": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.007196187973022461,
        "is_functional_test": true
      }
    ],
    "git_reset": [
      {
        "case_name": "Unstage Specific File Successfully",
        "purpose": "验证工具能够成功从暂存区移除指定文件",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "file_path": "test_output.docx"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"An unexpected error occurred: Cmd('git') failed due to: exit code(128)\\n  cmdline: git read-tree --index-output=D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\.git\\\\tmp5pziwkun HEAD\\n  stderr: 'error: invalid path '../code (1).html''\"}"
        },
        "execution_time": 0.16624045372009277,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage All Files When File Path Not Provided",
        "purpose": "验证当未提供文件路径时，工具能够移除所有暂存文件",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"An unexpected error occurred: Cmd('git') failed due to: exit code(128)\\n  cmdline: git read-tree --index-output=D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\.git\\\\tmp06_fpqij HEAD\\n  stderr: 'error: invalid path '../code (1).html''\"}"
        },
        "execution_time": 0.1445939540863037,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Unstage File in Non-Existent Repository",
        "purpose": "验证当仓库路径不存在时，工具是否返回错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_repo",
          "file_path": "test_output.docx"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_repo\"}"
        },
        "execution_time": 0.002998828887939453,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Unstage Non-Existent File",
        "purpose": "验证当文件路径不存在时，工具是否返回错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "file_path": "nonexistent_file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"An unexpected error occurred: Cmd('git') failed due to: exit code(128)\\n  cmdline: git read-tree --index-output=D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\.git\\\\tmpbrgrnn5x HEAD\\n  stderr: 'error: invalid path '../code (1).html''\"}"
        },
        "execution_time": 0.15095829963684082,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage File With Unicode Path",
        "purpose": "测试使用Unicode字符组成的路径是否可以正常取消暂存文件",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文保存文档.docx\\.git",
          "file_path": "中文测试文档.docx"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\\\u4e2d\\u6587\\u4fdd\\u5b58\\u6587\\u6863.docx\\\\.git\"}"
        },
        "execution_time": 0.008510351181030273,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Unstage File With Invalid Path Characters",
        "purpose": "验证包含非法字符的路径是否导致取消暂存失败",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "file_path": "<invalid>file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"An unexpected error occurred: Cmd('git') failed due to: exit code(128)\\n  cmdline: git read-tree --index-output=D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\.git\\\\tmp44wnqtcj HEAD\\n  stderr: 'error: invalid path '../code (1).html''\"}"
        },
        "execution_time": 0.16254878044128418,
        "is_functional_test": false
      },
      {
        "case_name": "Fail to Unstage File in Read-Only Repository",
        "purpose": "验证工具在只读仓库中是否无法取消暂存文件",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir",
          "file_path": "test_output.docx"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.0030059814453125,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage File in Long Path Repository",
        "purpose": "验证工具能否处理超长路径名的Git仓库取消暂存操作",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_that_still_works_for_initializing_git_repository_1234567890",
          "file_path": "test_output.docx"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_directory_name_that_still_works_for_initializing_git_repository_1234567890\"}"
        },
        "execution_time": 0.0045125484466552734,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Unstage File With Empty Repo Path",
        "purpose": "验证当仓库路径为空字符串时是否报错",
        "args": {
          "repo_path": "",
          "file_path": "test_output.docx"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: \"}"
        },
        "execution_time": 0.003000974655151367,
        "is_functional_test": false
      },
      {
        "case_name": "Fail to Unstage File Without Write Permissions",
        "purpose": "验证工具在无写权限的目录下是否无法取消暂存文件",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir",
          "file_path": "test_output.docx"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.002999544143676758,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage File in Root Drive Repository",
        "purpose": "测试工具是否允许在根驱动器路径下取消暂存文件",
        "args": {
          "repo_path": "D:\\",
          "file_path": "test_output.docx"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"An unexpected error occurred: Cmd('git') failed due to: exit code(128)\\n  cmdline: git read-tree --index-output=D:\\\\.git\\\\tmp2ecy60ww HEAD\\n  stderr: 'fatal: detected dubious ownership in repository at 'D:/'\\n'D:/' is owned by:\\n\\tNT AUTHORITY/SYSTEM (S-1-5-18)\\nbut the current user is:\\n\\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\\nTo add an exception for this directory, call:\\n\\n\\tgit config --global --add safe.directory D:/'\"}"
        },
        "execution_time": 0.17408394813537598,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Unstage File With Special Characters In Path",
        "purpose": "验证包含特殊符号的路径是否导致取消暂存失败",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "file_path": "path@#%&()_with_special_chars.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"An unexpected error occurred: Cmd('git') failed due to: exit code(128)\\n  cmdline: git read-tree --index-output=D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\.git\\\\tmpuf1hrur3 HEAD\\n  stderr: 'error: invalid path '../code (1).html''\"}"
        },
        "execution_time": 0.20458102226257324,
        "is_functional_test": false
      }
    ],
    "git_create_branch": [
      {
        "case_name": "Create Branch in Valid Repository",
        "purpose": "验证工具能够在已存在的Git仓库中成功创建一个新分支，且不切换到该分支。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "branch_name": "feature/new-feature"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Branch 'feature/new-feature' created.\"}"
        },
        "execution_time": 0.25618624687194824,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Create Branch in Non-Repository Directory",
        "purpose": "验证当指定路径不是一个Git仓库时，工具是否返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/experimental"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Invalid Git repository: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\"}"
        },
        "execution_time": 0.003508329391479492,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Create Already Existing Branch",
        "purpose": "验证当目标分支名已经存在时，工具是否正确报错并阻止重复创建。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "branch_name": "master"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Branch 'master' already exists.\"}"
        },
        "execution_time": 0.008507490158081055,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Create Branch with Empty Name",
        "purpose": "验证当传入空字符串作为分支名称时是否报错。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "branch_name": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"An unexpected error occurred: Lock at 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\output\\\\\\\\.git\\\\\\\\refs\\\\\\\\heads\\\\\\\\.lock' could not be obtained\"}"
        },
        "execution_time": 0.25951600074768066,
        "is_functional_test": false
      },
      {
        "case_name": "Fail to Create Branch with Invalid Characters",
        "purpose": "测试包含非法字符的分支名是否被拒绝，并返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "branch_name": "feature/<invalid>name"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"An unexpected error occurred: Lock at 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\output\\\\\\\\.git\\\\\\\\refs\\\\\\\\heads\\\\\\\\feature\\\\\\\\<invalid>name.lock' could not be obtained\"}"
        },
        "execution_time": 0.16466856002807617,
        "is_functional_test": false
      },
      {
        "case_name": "Fail to Create Branch in Read-Only Repository",
        "purpose": "验证在只读目录下的Git仓库中是否无法创建新分支。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir",
          "branch_name": "feature/readonly-test"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.004001140594482422,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch Using Unicode Name",
        "purpose": "测试使用Unicode字符组成的分支名是否可以正常创建。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\输出\\中文git初始化测试",
          "branch_name": "功能/新特性分支"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"An unexpected error occurred: Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.004022121429443359,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Create Branch in NonExistent Repository Path",
        "purpose": "验证当提供的仓库路径不存在时，工具是否返回错误而不是自动创建。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_repo",
          "branch_name": "feature/testing"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_repo\"}"
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": true
      },
      {
        "case_name": "Create Long Branch Name",
        "purpose": "验证工具能否处理超长分支名的创建操作。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "branch_name": "feature/this_is_a_very_long_branch_name_that_still_should_work_without_any_issue"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Branch 'feature/this_is_a_very_long_branch_name_that_still_should_work_without_any_issue' created.\"}"
        },
        "execution_time": 0.13631868362426758,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Create Branch Without Write Permissions",
        "purpose": "验证工具在无写权限的目录下是否无法创建新分支。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir",
          "branch_name": "feature/unwritable"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.009190559387207031,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch in Unicode Path Repository",
        "purpose": "测试在包含Unicode字符的路径中的Git仓库是否能正常创建分支。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\输出\\中文保存文档.docx",
          "branch_name": "feature/test-branch"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Branch 'feature/test-branch' created.\"}"
        },
        "execution_time": 0.16483259201049805,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Create Branch with Null Repository Path",
        "purpose": "验证当传入空字符串作为仓库路径时是否报错。",
        "args": {
          "repo_path": "",
          "branch_name": "feature/null-path-test"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: \"}"
        },
        "execution_time": 0.004573822021484375,
        "is_functional_test": false
      }
    ],
    "git_checkout": [
      {
        "case_name": "Switch to Existing Branch in Valid Repository",
        "purpose": "验证工具能够成功切换到已存在的分支。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "branch_name": "feature/test-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Branch 'feature/test-branch' not found.\"}"
        },
        "execution_time": 0.005506277084350586,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Switch to Nonexistent Branch",
        "purpose": "验证当指定的分支不存在时，工具是否返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "branch_name": "nonexistent-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Branch 'nonexistent-branch' not found.\"}"
        },
        "execution_time": 0.00500035285949707,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Switch with Invalid Repository Path",
        "purpose": "验证当仓库路径无效或不存在时，工具是否报错。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_repo",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_repo\"}"
        },
        "execution_time": 0.0032186508178710938,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Switch with Empty Branch Name",
        "purpose": "验证当分支名称为空字符串时是否报错。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "branch_name": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Branch '' not found.\"}"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": false
      },
      {
        "case_name": "Switch to Default Branch (e.g., main)",
        "purpose": "验证工具能否正确切换到默认分支（如 main）。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Branch 'main' not found.\"}"
        },
        "execution_time": 0.007521867752075195,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Switch in Read-Only Repository",
        "purpose": "验证在只读Git仓库中是否无法切换分支，并返回错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir\\.git",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\\\\.git\"}"
        },
        "execution_time": 0.003998756408691406,
        "is_functional_test": false
      },
      {
        "case_name": "Switch to Branch with Special Characters in Name",
        "purpose": "测试包含特殊字符的分支名是否可以正常切换。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "branch_name": "feature@#%&()_test"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Switched to branch 'feature@#%&()_test'.\"}"
        },
        "execution_time": 0.16598033905029297,
        "is_functional_test": true
      },
      {
        "case_name": "Switch to Long Branch Name",
        "purpose": "验证工具是否支持切换到具有超长名称的分支。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "branch_name": "very_long_branch_name_that_still_works_for_creating_a_new_branch_1234567890"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Switched to branch 'very_long_branch_name_that_still_works_for_creating_a_new_branch_1234567890'.\"}"
        },
        "execution_time": 0.1954355239868164,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Switch with Null Repository Path",
        "purpose": "验证当传入空字符串作为仓库路径时是否报错。",
        "args": {
          "repo_path": "",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: \"}"
        },
        "execution_time": 0.004004478454589844,
        "is_functional_test": false
      },
      {
        "case_name": "Fail to Switch Due to File System Lock",
        "purpose": "模拟文件系统锁定导致的切换失败情况，并验证错误处理机制。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\locked_repo",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\locked_repo\"}"
        },
        "execution_time": 0.0029990673065185547,
        "is_functional_test": false
      },
      {
        "case_name": "Switch to Nested Branch",
        "purpose": "验证工具能否切换到嵌套层级的分支（如 feature/new-feature）。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "branch_name": "feature/new-feature"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Switched to branch 'feature/new-feature'.\"}"
        },
        "execution_time": 0.20364952087402344,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Switch in Corrupted Git Repository",
        "purpose": "验证在损坏的Git仓库中执行切换操作是否会返回适当的错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\corrupted_repo",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\corrupted_repo\"}"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": false
      }
    ],
    "git_show": [
      {
        "case_name": "Show Details of a Valid Commit",
        "purpose": "验证工具能够正确显示一个有效提交的详细信息，包括作者、日期、消息和差异内容。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"An unexpected error occurred: Ref 'a1b2c3d4' did not resolve to an object\"}"
        },
        "execution_time": 0.14501309394836426,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Show Details of Non-Existent Commit",
        "purpose": "验证当提交哈希不存在时，工具是否返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "commit_hash": "invalidhash123"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"An unexpected error occurred: Ref 'invalidhash123' did not resolve to an object\"}"
        },
        "execution_time": 0.007065296173095703,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Show Commit with Empty Repository Path",
        "purpose": "验证当仓库路径为空字符串时，工具是否返回错误信息。",
        "args": {
          "repo_path": "",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: \"}"
        },
        "execution_time": 0.004999876022338867,
        "is_functional_test": false
      },
      {
        "case_name": "Fail to Show Commit with Invalid Repository Path",
        "purpose": "验证当仓库路径包含非法字符时，工具是否返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\<invalid>dir",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\<invalid>dir\"}"
        },
        "execution_time": 0.007355928421020508,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit Details with Unicode Repository Path",
        "purpose": "验证使用包含Unicode字符的路径时，工具是否能正确显示提交信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文git初始化测试",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\\\u4e2d\\u6587git\\u521d\\u59cb\\u5316\\u6d4b\\u8bd5\"}"
        },
        "execution_time": 0.004505634307861328,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Show Commit in Read-Only Repository",
        "purpose": "验证工具在只读Git仓库中是否无法显示提交信息，并返回错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.0059986114501953125,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit with Long Repository Path",
        "purpose": "验证工具是否能处理超长路径名的Git仓库并正确显示提交信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_that_still_works_for_initializing_git_repository_1234567890",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_directory_name_that_still_works_for_initializing_git_repository_1234567890\"}"
        },
        "execution_time": 0.004422664642333984,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Show Commit with Special Characters in Hash",
        "purpose": "验证当提交哈希包含非法字符时，工具是否返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "commit_hash": "a1b2c3d4@invalid"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"An unexpected error occurred: BadObject: Couldn't find reference named 'a1b2c3d4'\"}"
        },
        "execution_time": 0.11508750915527344,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 140
}