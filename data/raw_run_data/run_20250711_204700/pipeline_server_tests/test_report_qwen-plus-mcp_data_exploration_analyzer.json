{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "qwen-plus-mcp_data_exploration_analyzer",
  "server_path": "workspace/pipeline-output-servers/qwen-plus/mcp_data_exploration_analyzer/refined/server.py",
  "timestamp": "2025-07-11T20:57:33.397273",
  "tools": [
    {
      "name": "load_csv",
      "description": "\n    加载 CSV 文件数据并将其存储在内存中，支持多个数据集同时操作。\n\n    Args:\n        file_path: CSV 文件的路径。\n        dataset_name: 用于标识该数据集的名称（可选，默认为文件名）。\n\n    Returns:\n        一个包含状态、消息和数据集名称的 JSON 字符串。\n\n    示例:\n        load_csv(file_path=\"data.csv\", dataset_name=\"my_dataset\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "dataset_name": {
            "default": null,
            "title": "Dataset Name",
            "type": "string"
          }
        },
        "required": [
          "file_path"
        ],
        "title": "load_csvArguments",
        "type": "object"
      }
    },
    {
      "name": "run_script",
      "description": "\n    执行用户提供的 Python 数据分析脚本，支持使用 pandas、numpy、scipy、sklearn 和 statsmodels 等数据分析库，并将处理结果保存到内存中供后续操作。\n\n    Args:\n        script_code: 要执行的 Python 脚本代码。\n        dataset_name: 指定要使用的数据集名称。\n\n    Returns:\n        一个包含状态、脚本输出和处理后数据集名称的 JSON 字符串。\n\n    示例:\n        run_script(script_code=\"df.describe()\", dataset_name=\"my_dataset\")\n    ",
      "args_schema": {
        "properties": {
          "script_code": {
            "title": "Script Code",
            "type": "string"
          },
          "dataset_name": {
            "title": "Dataset Name",
            "type": "string"
          }
        },
        "required": [
          "script_code",
          "dataset_name"
        ],
        "title": "run_scriptArguments",
        "type": "object"
      }
    },
    {
      "name": "generate_exploration_plan",
      "description": "\n    自动分析数据结构并生成数据探索计划，提供深度洞察的数据可视化建议。\n\n    Args:\n        dataset_name: 需要进行探索的数据集名称。\n\n    Returns:\n        一个包含状态、探索计划和可视化建议的 JSON 字符串。\n\n    示例:\n        generate_exploration_plan(dataset_name=\"my_dataset\")\n    ",
      "args_schema": {
        "properties": {
          "dataset_name": {
            "title": "Dataset Name",
            "type": "string"
          }
        },
        "required": [
          "dataset_name"
        ],
        "title": "generate_exploration_planArguments",
        "type": "object"
      }
    },
    {
      "name": "execute_visualization",
      "description": "\n    根据生成的数据探索计划执行数据可视化任务。\n\n    Args:\n        plan_id: 指定要执行的探索计划 ID。\n\n    Returns:\n        一个包含状态和可视化结果的 JSON 字符串。\n\n    示例:\n        execute_visualization(plan_id=\"exploration_plan_0001\")\n    ",
      "args_schema": {
        "properties": {
          "plan_id": {
            "title": "Plan Id",
            "type": "string"
          }
        },
        "required": [
          "plan_id"
        ],
        "title": "execute_visualizationArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "load_csv": [
      {
        "case_name": "加载CSV文件并使用默认数据集名称",
        "purpose": "验证工具可以成功加载一个CSV文件，并使用默认的数据集名称（即文件名）存储在内存中。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\机械设备精简.csv"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"成功加载 1524 行数据到数据集 '机械设备精简'\", \"dataset_name\": \"机械设备精简\"}"
        },
        "execution_time": 0.011689424514770508,
        "is_functional_test": true
      },
      {
        "case_name": "加载CSV文件并指定自定义数据集名称",
        "purpose": "验证工具可以加载CSV文件并使用用户提供的dataset_name参数进行标识。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\机械设备精简.csv",
          "dataset_name": "my_dataset"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"成功加载 1524 行数据到数据集 'my_dataset'\", \"dataset_name\": \"my_dataset\"}"
        },
        "execution_time": 0.007153511047363281,
        "is_functional_test": true
      },
      {
        "case_name": "尝试加载非CSV文件",
        "purpose": "验证工具是否能够正确拒绝非CSV格式的文件输入。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"加载 CSV 时发生错误: 仅支持 CSV 文件格式。\", \"traceback\": \"Traceback (most recent call last):\\n  File \\\"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\workspace\\\\pipeline-output-servers\\\\qwen-plus\\\\mcp_data_exploration_analyzer\\\\refined\\\\server.py\\\", line 81, in load_csv\\n    raise ValueError(\\\"仅支持 CSV 文件格式。\\\")\\nValueError: 仅支持 CSV 文件格式。\\n\"}"
        },
        "execution_time": 0.005478858947753906,
        "is_functional_test": false
      },
      {
        "case_name": "加载不存在的CSV文件",
        "purpose": "验证工具是否能优雅处理试图加载不存在的文件的情况。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.csv"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"加载 CSV 时发生错误: 文件 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.csv' 不存在。\", \"traceback\": \"Traceback (most recent call last):\\n  File \\\"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\workspace\\\\pipeline-output-servers\\\\qwen-plus\\\\mcp_data_exploration_analyzer\\\\refined\\\\server.py\\\", line 78, in load_csv\\n    raise FileNotFoundError(f\\\"文件 '{file_path}' 不存在。\\\")\\nFileNotFoundError: 文件 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.csv' 不存在。\\n\"}"
        },
        "execution_time": 0.006415605545043945,
        "is_functional_test": false
      },
      {
        "case_name": "加载带有特殊字符的文件名",
        "purpose": "验证工具是否支持包含特殊字符的文件路径。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\converted images 中文\\xue.bmp"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"加载 CSV 时发生错误: 仅支持 CSV 文件格式。\", \"traceback\": \"Traceback (most recent call last):\\n  File \\\"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\workspace\\\\pipeline-output-servers\\\\qwen-plus\\\\mcp_data_exploration_analyzer\\\\refined\\\\server.py\\\", line 81, in load_csv\\n    raise ValueError(\\\"仅支持 CSV 文件格式。\\\")\\nValueError: 仅支持 CSV 文件格式。\\n\"}"
        },
        "execution_time": 0.004382610321044922,
        "is_functional_test": true
      },
      {
        "case_name": "加载超长文件名的CSV文件",
        "purpose": "验证工具是否能够处理具有极长文件名的CSV文件。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a_very_long_output_file_name_that_may_exceed_buffer_limits_123456789012345678901234567890.pdf"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"加载 CSV 时发生错误: 仅支持 CSV 文件格式。\", \"traceback\": \"Traceback (most recent call last):\\n  File \\\"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\workspace\\\\pipeline-output-servers\\\\qwen-plus\\\\mcp_data_exploration_analyzer\\\\refined\\\\server.py\\\", line 81, in load_csv\\n    raise ValueError(\\\"仅支持 CSV 文件格式。\\\")\\nValueError: 仅支持 CSV 文件格式。\\n\"}"
        },
        "execution_time": 0.007513761520385742,
        "is_functional_test": true
      },
      {
        "case_name": "尝试加载被锁定的CSV文件",
        "purpose": "验证工具是否能够处理无法访问的锁定文件。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\locked_file.pdf"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"加载 CSV 时发生错误: 仅支持 CSV 文件格式。\", \"traceback\": \"Traceback (most recent call last):\\n  File \\\"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\workspace\\\\pipeline-output-servers\\\\qwen-plus\\\\mcp_data_exploration_analyzer\\\\refined\\\\server.py\\\", line 81, in load_csv\\n    raise ValueError(\\\"仅支持 CSV 文件格式。\\\")\\nValueError: 仅支持 CSV 文件格式。\\n\"}"
        },
        "execution_time": 0.0050144195556640625,
        "is_functional_test": false
      },
      {
        "case_name": "加载空CSV文件",
        "purpose": "验证工具是否能正确处理内容为空的CSV文件。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\执行结果文本.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"加载 CSV 时发生错误: 仅支持 CSV 文件格式。\", \"traceback\": \"Traceback (most recent call last):\\n  File \\\"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\workspace\\\\pipeline-output-servers\\\\qwen-plus\\\\mcp_data_exploration_analyzer\\\\refined\\\\server.py\\\", line 81, in load_csv\\n    raise ValueError(\\\"仅支持 CSV 文件格式。\\\")\\nValueError: 仅支持 CSV 文件格式。\\n\"}"
        },
        "execution_time": 0.004071712493896484,
        "is_functional_test": true
      },
      {
        "case_name": "多次调用load_csv加载多个CSV文件",
        "purpose": "验证工具是否支持同时加载多个不同的CSV文件，并分别使用不同dataset_name进行区分。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\机械设备精简.csv",
          "dataset_name": "dataset1"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"成功加载 1524 行数据到数据集 'dataset1'\", \"dataset_name\": \"dataset1\"}"
        },
        "execution_time": 0.010871648788452148,
        "is_functional_test": true
      },
      {
        "case_name": "使用空字符串作为dataset_name",
        "purpose": "验证工具是否允许空字符串作为数据集名称，或是否自动替换为默认值。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\机械设备精简.csv",
          "dataset_name": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"加载 CSV 时发生错误: 'dataset_name' 必须是有效的字符串。\", \"traceback\": \"Traceback (most recent call last):\\n  File \\\"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\workspace\\\\pipeline-output-servers\\\\qwen-plus\\\\mcp_data_exploration_analyzer\\\\refined\\\\server.py\\\", line 75, in load_csv\\n    raise ValueError(\\\"'dataset_name' 必须是有效的字符串。\\\")\\nValueError: 'dataset_name' 必须是有效的字符串。\\n\"}"
        },
        "execution_time": 0.0045146942138671875,
        "is_functional_test": true
      },
      {
        "case_name": "加载带Unicode字符的CSV文件",
        "purpose": "验证工具是否支持加载包含Unicode字符的文件名的CSV文件。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\《上海市道路交通管理条例》.pdf"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"加载 CSV 时发生错误: 仅支持 CSV 文件格式。\", \"traceback\": \"Traceback (most recent call last):\\n  File \\\"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\workspace\\\\pipeline-output-servers\\\\qwen-plus\\\\mcp_data_exploration_analyzer\\\\refined\\\\server.py\\\", line 81, in load_csv\\n    raise ValueError(\\\"仅支持 CSV 文件格式。\\\")\\nValueError: 仅支持 CSV 文件格式。\\n\"}"
        },
        "execution_time": 0.0050046443939208984,
        "is_functional_test": true
      },
      {
        "case_name": "加载CSV文件时注入恶意路径尝试",
        "purpose": "验证工具是否对文件路径进行安全校验，防止路径穿越攻击。",
        "args": {
          "file_path": "..\\..\\malicious.csv"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"加载 CSV 时发生错误: 文件 '..\\\\..\\\\malicious.csv' 不存在。\", \"traceback\": \"Traceback (most recent call last):\\n  File \\\"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\workspace\\\\pipeline-output-servers\\\\qwen-plus\\\\mcp_data_exploration_analyzer\\\\refined\\\\server.py\\\", line 78, in load_csv\\n    raise FileNotFoundError(f\\\"文件 '{file_path}' 不存在。\\\")\\nFileNotFoundError: 文件 '..\\\\..\\\\malicious.csv' 不存在。\\n\"}"
        },
        "execution_time": 0.0065152645111083984,
        "is_functional_test": false
      }
    ],
    "run_script": [
      {
        "case_name": "执行简单描述统计脚本",
        "purpose": "验证run_script工具能够成功执行基本的pandas描述性统计分析脚本。",
        "args": {
          "script_code": "df.describe()",
          "dataset_name": "机械设备精简"
        },
        "response": {
          "result": "{\"status\": \"success\", \"output\": \"\", \"result_dataset_name\": null}"
        },
        "execution_time": 0.008098363876342773,
        "is_functional_test": true
      },
      {
        "case_name": "使用numpy计算列均值",
        "purpose": "验证run_script支持numpy库，可以对数据集中的某一列进行均值计算。",
        "args": {
          "script_code": "import numpy as np\nnp.mean(df['价格'])",
          "dataset_name": "机械设备精简"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"执行脚本时发生错误: '价格'\", \"traceback\": \"Traceback (most recent call last):\\n  File \\\"C:\\\\Users\\\\PS\\\\.conda\\\\envs\\\\agent_lab\\\\Lib\\\\site-packages\\\\pandas\\\\core\\\\indexes\\\\base.py\\\", line 3805, in get_loc\\n    return self._engine.get_loc(casted_key)\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n  File \\\"index.pyx\\\", line 167, in pandas._libs.index.IndexEngine.get_loc\\n  File \\\"index.pyx\\\", line 196, in pandas._libs.index.IndexEngine.get_loc\\n  File \\\"pandas\\\\\\\\_libs\\\\\\\\hashtable_class_helper.pxi\\\", line 7081, in pandas._libs.hashtable.PyObjectHashTable.get_item\\n  File \\\"pandas\\\\\\\\_libs\\\\\\\\hashtable_class_helper.pxi\\\", line 7089, in pandas._libs.hashtable.PyObjectHashTable.get_item\\nKeyError: '价格'\\n\\nThe above exception was the direct cause of the following exception:\\n\\nTraceback (most recent call last):\\n  File \\\"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\workspace\\\\pipeline-output-servers\\\\qwen-plus\\\\mcp_data_exploration_analyzer\\\\refined\\\\server.py\\\", line 176, in run_script\\n    exec(compiled_code, namespace)\\n  File \\\"<string>\\\", line 2, in <module>\\n  File \\\"C:\\\\Users\\\\PS\\\\.conda\\\\envs\\\\agent_lab\\\\Lib\\\\site-packages\\\\pandas\\\\core\\\\frame.py\\\", line 4102, in __getitem__\\n    indexer = self.columns.get_loc(key)\\n              ^^^^^^^^^^^^^^^^^^^^^^^^^\\n  File \\\"C:\\\\Users\\\\PS\\\\.conda\\\\envs\\\\agent_lab\\\\Lib\\\\site-packages\\\\pandas\\\\core\\\\indexes\\\\base.py\\\", line 3812, in get_loc\\n    raise KeyError(key) from err\\nKeyError: '价格'\\n\"}"
        },
        "execution_time": 0.008005142211914062,
        "is_functional_test": true
      },
      {
        "case_name": "使用sklearn标准化数据",
        "purpose": "验证run_script支持sklearn库，可以执行特征标准化操作。",
        "args": {
          "script_code": "from sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\ndf_scaled = scaler.fit_transform(df[['价格', '数量']])",
          "dataset_name": "机械设备精简"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"执行脚本时发生错误: \\\"None of [Index(['价格', '数量'], dtype='object')] are in the [columns]\\\"\", \"traceback\": \"Traceback (most recent call last):\\n  File \\\"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\workspace\\\\pipeline-output-servers\\\\qwen-plus\\\\mcp_data_exploration_analyzer\\\\refined\\\\server.py\\\", line 176, in run_script\\n    exec(compiled_code, namespace)\\n  File \\\"<string>\\\", line 3, in <module>\\n  File \\\"C:\\\\Users\\\\PS\\\\.conda\\\\envs\\\\agent_lab\\\\Lib\\\\site-packages\\\\pandas\\\\core\\\\frame.py\\\", line 4108, in __getitem__\\n    indexer = self.columns._get_indexer_strict(key, \\\"columns\\\")[1]\\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n  File \\\"C:\\\\Users\\\\PS\\\\.conda\\\\envs\\\\agent_lab\\\\Lib\\\\site-packages\\\\pandas\\\\core\\\\indexes\\\\base.py\\\", line 6200, in _get_indexer_strict\\n    self._raise_if_missing(keyarr, indexer, axis_name)\\n  File \\\"C:\\\\Users\\\\PS\\\\.conda\\\\envs\\\\agent_lab\\\\Lib\\\\site-packages\\\\pandas\\\\core\\\\indexes\\\\base.py\\\", line 6249, in _raise_if_missing\\n    raise KeyError(f\\\"None of [{key}] are in the [{axis_name}]\\\")\\nKeyError: \\\"None of [Index(['价格', '数量'], dtype='object')] are in the [columns]\\\"\\n\"}"
        },
        "execution_time": 0.012052536010742188,
        "is_functional_test": true
      },
      {
        "case_name": "使用statsmodels拟合线性回归模型",
        "purpose": "验证run_script支持statsmodels库，能进行基础的统计建模。",
        "args": {
          "script_code": "import statsmodels.api as sm\nX = sm.add_constant(df['数量'])\ny = df['价格']\nmodel = sm.OLS(y, X).fit()",
          "dataset_name": "机械设备精简"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"执行脚本时发生错误: '数量'\", \"traceback\": \"Traceback (most recent call last):\\n  File \\\"C:\\\\Users\\\\PS\\\\.conda\\\\envs\\\\agent_lab\\\\Lib\\\\site-packages\\\\pandas\\\\core\\\\indexes\\\\base.py\\\", line 3805, in get_loc\\n    return self._engine.get_loc(casted_key)\\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n  File \\\"index.pyx\\\", line 167, in pandas._libs.index.IndexEngine.get_loc\\n  File \\\"index.pyx\\\", line 196, in pandas._libs.index.IndexEngine.get_loc\\n  File \\\"pandas\\\\\\\\_libs\\\\\\\\hashtable_class_helper.pxi\\\", line 7081, in pandas._libs.hashtable.PyObjectHashTable.get_item\\n  File \\\"pandas\\\\\\\\_libs\\\\\\\\hashtable_class_helper.pxi\\\", line 7089, in pandas._libs.hashtable.PyObjectHashTable.get_item\\nKeyError: '数量'\\n\\nThe above exception was the direct cause of the following exception:\\n\\nTraceback (most recent call last):\\n  File \\\"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\workspace\\\\pipeline-output-servers\\\\qwen-plus\\\\mcp_data_exploration_analyzer\\\\refined\\\\server.py\\\", line 176, in run_script\\n    exec(compiled_code, namespace)\\n  File \\\"<string>\\\", line 2, in <module>\\n  File \\\"C:\\\\Users\\\\PS\\\\.conda\\\\envs\\\\agent_lab\\\\Lib\\\\site-packages\\\\pandas\\\\core\\\\frame.py\\\", line 4102, in __getitem__\\n    indexer = self.columns.get_loc(key)\\n              ^^^^^^^^^^^^^^^^^^^^^^^^^\\n  File \\\"C:\\\\Users\\\\PS\\\\.conda\\\\envs\\\\agent_lab\\\\Lib\\\\site-packages\\\\pandas\\\\core\\\\indexes\\\\base.py\\\", line 3812, in get_loc\\n    raise KeyError(key) from err\\nKeyError: '数量'\\n\"}"
        },
        "execution_time": 0.007505655288696289,
        "is_functional_test": true
      },
      {
        "case_name": "尝试执行无效Python代码",
        "purpose": "验证run_script是否能正确捕获并报告语法错误或无效的Python代码。",
        "args": {
          "script_code": "this is invalid python code",
          "dataset_name": "机械设备精简"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"执行脚本时发生错误: invalid syntax (<string>, line 1)\", \"traceback\": \"Traceback (most recent call last):\\n  File \\\"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\workspace\\\\pipeline-output-servers\\\\qwen-plus\\\\mcp_data_exploration_analyzer\\\\refined\\\\server.py\\\", line 175, in run_script\\n    compiled_code = compile(script_code, '<string>', 'exec')\\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n  File \\\"<string>\\\", line 1\\n    this is invalid python code\\n                    ^^^^^^\\nSyntaxError: invalid syntax\\n\"}"
        },
        "execution_time": 0.006998538970947266,
        "is_functional_test": false
      },
      {
        "case_name": "在不存在的数据集上运行脚本",
        "purpose": "验证run_script能否优雅处理指定但未加载的数据集请求。",
        "args": {
          "script_code": "df.head()",
          "dataset_name": "nonexistent_dataset"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"执行脚本时发生错误: 数据集 'nonexistent_dataset' 不存在，请先使用 load_csv 加载数据。\", \"traceback\": \"Traceback (most recent call last):\\n  File \\\"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\workspace\\\\pipeline-output-servers\\\\qwen-plus\\\\mcp_data_exploration_analyzer\\\\refined\\\\server.py\\\", line 150, in run_script\\n    raise ValueError(f\\\"数据集 '{dataset_name}' 不存在，请先使用 load_csv 加载数据。\\\")\\nValueError: 数据集 'nonexistent_dataset' 不存在，请先使用 load_csv 加载数据。\\n\"}"
        },
        "execution_time": 0.003998756408691406,
        "is_functional_test": false
      },
      {
        "case_name": "尝试注入系统命令执行代码",
        "purpose": "验证run_script是否安全地限制了潜在危险代码的执行，如os.system调用。",
        "args": {
          "script_code": "import os\nos.system('dir')",
          "dataset_name": "机械设备精简"
        },
        "response": {
          "error": "Tool call 'run_script' was cancelled."
        },
        "execution_time": 0.011077880859375,
        "is_functional_test": false
      },
      {
        "case_name": "执行空脚本代码",
        "purpose": "验证run_script是否对空脚本参数进行有效校验并返回合理错误信息。",
        "args": {
          "script_code": "",
          "dataset_name": "机械设备精简"
        },
        "response": {
          "error": "Tool call 'run_script' was cancelled."
        },
        "execution_time": 0.0019998550415039062,
        "is_functional_test": false
      },
      {
        "case_name": "使用特殊字符命名数据集执行脚本",
        "purpose": "验证run_script是否支持包含特殊字符的数据集名称。",
        "args": {
          "script_code": "df.columns.tolist()",
          "dataset_name": "my_dataset@2023"
        },
        "response": {
          "error": "Tool call 'run_script' was cancelled."
        },
        "execution_time": 0.001001596450805664,
        "is_functional_test": true
      },
      {
        "case_name": "处理超大数据量时的性能测试",
        "purpose": "验证run_script是否能处理大规模数据集（例如10万行以上）。",
        "args": {
          "script_code": "df.groupby('类别').size()",
          "dataset_name": "机械设备精简"
        },
        "response": {
          "error": "Tool call 'run_script' was cancelled."
        },
        "execution_time": 0.0007152557373046875,
        "is_functional_test": true
      },
      {
        "case_name": "多次连续执行不同脚本",
        "purpose": "验证run_script是否支持同一数据集上的连续多次脚本操作且结果一致。",
        "args": {
          "script_code": "df.sort_values(by='价格', ascending=False)",
          "dataset_name": "机械设备精简"
        },
        "response": {
          "error": "Tool call 'run_script' was cancelled."
        },
        "execution_time": 0.0015077590942382812,
        "is_functional_test": true
      },
      {
        "case_name": "使用非字符串类型作为数据集名称",
        "purpose": "验证run_script是否对dataset_name参数进行类型检查并拒绝非法输入。",
        "args": {
          "script_code": "df.head()",
          "dataset_name": 12345
        },
        "response": {
          "error": "Tool call 'run_script' was cancelled."
        },
        "execution_time": 0.0010035037994384766,
        "is_functional_test": false
      }
    ],
    "generate_exploration_plan": [
      {
        "case_name": "生成默认数据集的探索计划",
        "purpose": "验证工具能够为已加载的默认数据集生成有效的探索计划和可视化建议。",
        "args": {
          "dataset_name": "机械设备精简"
        },
        "response": {
          "error": "Tool call 'generate_exploration_plan' was cancelled."
        },
        "execution_time": 0.0010056495666503906,
        "is_functional_test": true
      },
      {
        "case_name": "生成自定义数据集的探索计划",
        "purpose": "验证工具能够为使用自定义名称的数据集（如 'my_dataset'）生成探索计划。",
        "args": {
          "dataset_name": "my_dataset"
        },
        "response": {
          "error": "Tool call 'generate_exploration_plan' was cancelled."
        },
        "execution_time": 0.00099945068359375,
        "is_functional_test": true
      },
      {
        "case_name": "在未加载的数据集上生成探索计划",
        "purpose": "验证工具是否能优雅处理对未加载数据集的探索计划请求。",
        "args": {
          "dataset_name": "nonexistent_dataset"
        },
        "response": {
          "error": "Tool call 'generate_exploration_plan' was cancelled."
        },
        "execution_time": 0.0010001659393310547,
        "is_functional_test": false
      },
      {
        "case_name": "使用空字符串作为数据集名称",
        "purpose": "验证工具是否对空字符串类型的 dataset_name 参数进行有效校验并返回错误信息。",
        "args": {
          "dataset_name": ""
        },
        "response": {
          "error": "Tool call 'generate_exploration_plan' was cancelled."
        },
        "execution_time": 0.0009999275207519531,
        "is_functional_test": false
      },
      {
        "case_name": "使用特殊字符命名的数据集生成探索计划",
        "purpose": "验证工具是否支持包含特殊字符的数据集名称，如 '@', '#', '!' 等。",
        "args": {
          "dataset_name": "my_dataset@2023"
        },
        "response": {
          "error": "Tool call 'generate_exploration_plan' was cancelled."
        },
        "execution_time": 0.0009996891021728516,
        "is_functional_test": true
      },
      {
        "case_name": "使用非字符串类型参数调用工具",
        "purpose": "验证工具是否拒绝非字符串类型的 dataset_name 参数输入。",
        "args": {
          "dataset_name": 12345
        },
        "response": {
          "error": "Tool call 'generate_exploration_plan' was cancelled."
        },
        "execution_time": 0.001504659652709961,
        "is_functional_test": false
      },
      {
        "case_name": "尝试注入路径穿越攻击参数",
        "purpose": "验证工具是否对恶意路径输入进行安全过滤，防止路径穿越攻击。",
        "args": {
          "dataset_name": "..\\..\\malicious_dataset"
        },
        "response": {
          "error": "Tool call 'generate_exploration_plan' was cancelled."
        },
        "execution_time": 0.001004934310913086,
        "is_functional_test": false
      },
      {
        "case_name": "生成超大数据量数据集的探索计划",
        "purpose": "验证工具能否处理大规模数据集（例如10万行以上）并生成合理的探索计划。",
        "args": {
          "dataset_name": "large_dataset"
        },
        "response": {
          "error": "Tool call 'generate_exploration_plan' was cancelled."
        },
        "execution_time": 0.002191781997680664,
        "is_functional_test": true
      },
      {
        "case_name": "多次连续调用生成探索计划",
        "purpose": "验证工具是否支持多次连续调用生成不同数据集的探索计划且结果一致。",
        "args": {
          "dataset_name": "机械设备精简"
        },
        "response": {
          "error": "Tool call 'generate_exploration_plan' was cancelled."
        },
        "execution_time": 0.0006835460662841797,
        "is_functional_test": true
      },
      {
        "case_name": "生成带有中文字符的数据集探索计划",
        "purpose": "验证工具是否支持包含中文字符的数据集名称。",
        "args": {
          "dataset_name": "我的数据集"
        },
        "response": {
          "error": "Tool call 'generate_exploration_plan' was cancelled."
        },
        "execution_time": 0.002519369125366211,
        "is_functional_test": true
      },
      {
        "case_name": "生成极长数据集名称的探索计划",
        "purpose": "验证工具是否能够处理具有极长名称的数据集。",
        "args": {
          "dataset_name": "a_very_long_dataset_name_that_may_exceed_buffer_limits_123456789012345678901234567890"
        },
        "response": {
          "error": "Tool call 'generate_exploration_plan' was cancelled."
        },
        "execution_time": 0.0010006427764892578,
        "is_functional_test": true
      }
    ],
    "execute_visualization": [
      {
        "case_name": "执行有效的数据可视化计划",
        "purpose": "验证execute_visualization工具能够根据一个已存在的探索计划ID成功执行可视化任务。",
        "args": {
          "plan_id": "exploration_plan_0001"
        },
        "response": {
          "error": "Tool call 'execute_visualization' was cancelled."
        },
        "execution_time": 0.000989675521850586,
        "is_functional_test": true
      },
      {
        "case_name": "使用不存在的探索计划ID执行可视化",
        "purpose": "验证当提供的plan_id不存在时，execute_visualization能否优雅地返回错误信息。",
        "args": {
          "plan_id": "nonexistent_plan"
        },
        "response": {
          "error": "Tool call 'execute_visualization' was cancelled."
        },
        "execution_time": 0.0008428096771240234,
        "is_functional_test": false
      },
      {
        "case_name": "尝试注入恶意计划ID",
        "purpose": "验证execute_visualization是否对plan_id参数进行安全校验，防止路径穿越或命令注入攻击。",
        "args": {
          "plan_id": "../malicious_plan"
        },
        "response": {
          "error": "Tool call 'execute_visualization' was cancelled."
        },
        "execution_time": 0.001005411148071289,
        "is_functional_test": false
      },
      {
        "case_name": "使用空字符串作为plan_id",
        "purpose": "验证execute_visualization是否对plan_id参数进行非空校验并返回合理错误信息。",
        "args": {
          "plan_id": ""
        },
        "response": {
          "error": "Tool call 'execute_visualization' was cancelled."
        },
        "execution_time": 0.0015034675598144531,
        "is_functional_test": false
      },
      {
        "case_name": "使用特殊字符命名的plan_id执行可视化",
        "purpose": "验证execute_visualization是否支持包含特殊字符的plan_id。",
        "args": {
          "plan_id": "plan@2023#test"
        },
        "response": {
          "error": "Tool call 'execute_visualization' was cancelled."
        },
        "execution_time": 0.001001119613647461,
        "is_functional_test": true
      },
      {
        "case_name": "使用超长plan_id执行可视化",
        "purpose": "验证execute_visualization是否能处理极长的plan_id输入。",
        "args": {
          "plan_id": "a_very_long_plan_id_that_may_exceed_buffer_limits_123456789012345678901234567890"
        },
        "response": {
          "error": "Tool call 'execute_visualization' was cancelled."
        },
        "execution_time": 0.001001596450805664,
        "is_functional_test": true
      },
      {
        "case_name": "连续多次调用execute_visualization",
        "purpose": "验证execute_visualization是否支持连续多次调用并保持行为一致性。",
        "args": {
          "plan_id": "exploration_plan_0001"
        },
        "response": {
          "error": "Tool call 'execute_visualization' was cancelled."
        },
        "execution_time": 0.0020012855529785156,
        "is_functional_test": true
      },
      {
        "case_name": "在未定义计划的情况下调用可视化",
        "purpose": "验证execute_visualization能否正确处理没有可用计划的情况。",
        "args": {
          "plan_id": "undefined_plan"
        },
        "response": {
          "error": "Tool call 'execute_visualization' was cancelled."
        },
        "execution_time": 0.0019881725311279297,
        "is_functional_test": false
      },
      {
        "case_name": "使用非字符串类型plan_id执行可视化",
        "purpose": "验证execute_visualization是否对plan_id参数进行类型检查并拒绝非法输入。",
        "args": {
          "plan_id": 12345
        },
        "response": {
          "error": "Tool call 'execute_visualization' was cancelled."
        },
        "execution_time": 0.0020105838775634766,
        "is_functional_test": false
      },
      {
        "case_name": "执行可视化后返回结果结构验证",
        "purpose": "验证execute_visualization返回的结果是否符合预期格式（包含status和result字段）。",
        "args": {
          "plan_id": "exploration_plan_0001"
        },
        "response": {
          "error": "Tool call 'execute_visualization' was cancelled."
        },
        "execution_time": 0.0019965171813964844,
        "is_functional_test": true
      },
      {
        "case_name": "可视化计划中包含无效数据源",
        "purpose": "验证execute_visualization能否检测到计划中引用的无效数据集并返回错误。",
        "args": {
          "plan_id": "exploration_plan_invalid_dataset"
        },
        "response": {
          "error": "Tool call 'execute_visualization' was cancelled."
        },
        "execution_time": 0.0010006427764892578,
        "is_functional_test": false
      },
      {
        "case_name": "可视化计划包含复杂图表类型",
        "purpose": "验证execute_visualization是否能正确处理包含多图层、多维度的复杂可视化计划。",
        "args": {
          "plan_id": "exploration_plan_complex_chart"
        },
        "response": {
          "error": "Tool call 'execute_visualization' was cancelled."
        },
        "execution_time": 0.0009996891021728516,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 47
}