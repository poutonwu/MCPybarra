{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "gpt-4o-mcp_git_repo_manager",
  "server_path": "workspace/pipeline-output-servers/gpt-4o/mcp_git_repo_manager/refined/server.py",
  "timestamp": "2025-07-11T21:22:57.568951",
  "tools": [
    {
      "name": "git_init",
      "description": "\n    Initializes a new Git repository in the specified directory.\n\n    Args:\n        directory (str): The path to the directory where the repository should be initialized. Example: '/path/to/new/repo'.\n\n    Returns:\n        str: Confirmation message indicating success or failure.\n\n    Example:\n        git_init(directory='/path/to/new/repo')\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          }
        },
        "required": [
          "directory"
        ],
        "title": "git_initArguments",
        "type": "object"
      }
    },
    {
      "name": "git_status",
      "description": "\n    Retrieves the status of the Git repository, showing changes in the working directory and staged files.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n\n    Returns:\n        dict: A dictionary containing the status of files (e.g., staged, unstaged, modified).\n\n    Example:\n        git_status(repository_path='/path/to/repo')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          }
        },
        "required": [
          "repository_path"
        ],
        "title": "git_statusArguments",
        "type": "object"
      }
    },
    {
      "name": "git_add",
      "description": "\n    Adds specified files to the staging area.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        files (list of str): List of file paths to add to the staging area. Accepts both relative and absolute paths.\n\n    Returns:\n        str: Confirmation message indicating the files added to the staging area.\n\n    Example:\n        git_add(repository_path='/path/to/repo', files=['file1.txt', 'file2.txt'])\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "files": {
            "items": {},
            "title": "Files",
            "type": "array"
          }
        },
        "required": [
          "repository_path",
          "files"
        ],
        "title": "git_addArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_unstaged",
      "description": "\n    Displays the differences in files that are not staged for commit.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n\n    Returns:\n        str: A string showing the diff of unstaged changes.\n\n    Example:\n        git_diff_unstaged(repository_path='/path/to/repo')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          }
        },
        "required": [
          "repository_path"
        ],
        "title": "git_diff_unstagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_staged",
      "description": "\n    Displays the differences in files that are staged for commit.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n\n    Returns:\n        str: A string showing the diff of staged changes.\n\n    Example:\n        git_diff_staged(repository_path='/path/to/repo')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          }
        },
        "required": [
          "repository_path"
        ],
        "title": "git_diff_stagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff",
      "description": "\n    Compares two branches or commits and displays the differences.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        reference1 (str): The first branch or commit to compare. Example: 'HEAD'.\n        reference2 (str): The second branch or commit to compare. Example: 'HEAD~1'.\n\n    Returns:\n        str: A string showing the diff between the two references.\n\n    Example:\n        git_diff(repository_path='/path/to/repo', reference1='HEAD', reference2='HEAD~1')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "reference1": {
            "title": "Reference1",
            "type": "string"
          },
          "reference2": {
            "title": "Reference2",
            "type": "string"
          }
        },
        "required": [
          "repository_path",
          "reference1",
          "reference2"
        ],
        "title": "git_diffArguments",
        "type": "object"
      }
    },
    {
      "name": "git_commit",
      "description": "\n    Commits staged changes to the repository.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        message (str): Commit message describing the changes. Example: 'Initial commit'.\n\n    Returns:\n        str: Confirmation message with the commit hash.\n\n    Example:\n        git_commit(repository_path='/path/to/repo', message='Initial commit')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "message": {
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "repository_path",
          "message"
        ],
        "title": "git_commitArguments",
        "type": "object"
      }
    },
    {
      "name": "git_reset",
      "description": "\n    Removes files from the staging area.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        files (list of str): List of file paths to remove from the staging area. Accepts both relative and absolute paths.\n\n    Returns:\n        str: Confirmation message indicating the files reset.\n\n    Example:\n        git_reset(repository_path='/path/to/repo', files=['file1.txt', 'file2.txt'])\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "files": {
            "items": {},
            "title": "Files",
            "type": "array"
          }
        },
        "required": [
          "repository_path",
          "files"
        ],
        "title": "git_resetArguments",
        "type": "object"
      }
    },
    {
      "name": "git_log",
      "description": "\n    Displays the commit history of the repository.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n\n    Returns:\n        list: A list of dictionaries, each containing commit details (e.g., hash, author, date, message).\n\n    Example:\n        git_log(repository_path='/path/to/repo')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          }
        },
        "required": [
          "repository_path"
        ],
        "title": "git_logArguments",
        "type": "object"
      }
    },
    {
      "name": "git_create_branch",
      "description": "\n    Creates a new branch in the repository.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        branch_name (str): Name of the new branch. Example: 'new-feature'.\n\n    Returns:\n        str: Confirmation message indicating success or failure.\n\n    Example:\n        git_create_branch(repository_path='/path/to/repo', branch_name='new-feature')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "repository_path",
          "branch_name"
        ],
        "title": "git_create_branchArguments",
        "type": "object"
      }
    },
    {
      "name": "git_checkout",
      "description": "\n    Switches the current branch in the repository.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        branch_name (str): Name of the branch to switch to. Example: 'main'.\n\n    Returns:\n        str: Confirmation message indicating the branch switched.\n\n    Example:\n        git_checkout(repository_path='/path/to/repo', branch_name='main')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "repository_path",
          "branch_name"
        ],
        "title": "git_checkoutArguments",
        "type": "object"
      }
    },
    {
      "name": "git_show",
      "description": "\n    Displays detailed information about a specific commit.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        commit_hash (str): The hash of the commit to display. Example: 'abc123'. If None, shows info for HEAD.\n\n    Returns:\n        dict: A dictionary containing commit details (e.g., hash, author, date, message, changes).\n\n    Example:\n        git_show(repository_path='/path/to/repo', commit_hash='abc123')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "commit_hash": {
            "title": "Commit Hash",
            "type": "string"
          }
        },
        "required": [
          "repository_path",
          "commit_hash"
        ],
        "title": "git_showArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "git_init": [
      {
        "case_name": "Initialize Git Repository in Valid Directory",
        "purpose": "验证工具能够在指定的有效目录中成功初始化一个新的Git仓库",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output"
        },
        "response": {
          "result": "{\"message\": \"Initialized new Git repository at: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\"}"
        },
        "execution_time": 0.12122178077697754,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository in Empty Path",
        "purpose": "测试当提供空字符串作为目录路径时的错误处理",
        "args": {
          "directory": ""
        },
        "response": {
          "result": "{\"message\": \"Initialized new Git repository at: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\workspace\\\\pipeline-output-servers\\\\gpt-4o\\\\mcp_git_repo_manager\\\\refined\"}"
        },
        "execution_time": 0.1223592758178711,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository in Nonexistent Directory",
        "purpose": "验证工具在尝试初始化不存在的目录时是否能正确返回错误信息",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "{\"message\": \"Initialized new Git repository at: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\nonexistent_dir\"}"
        },
        "execution_time": 0.1963188648223877,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository in Read-only Directory",
        "purpose": "测试工具在只读目录中初始化Git仓库时的行为",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir"
        },
        "response": {
          "result": "{\"message\": \"Initialized new Git repository at: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.16570305824279785,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository with Special Characters in Path",
        "purpose": "验证工具能否处理包含特殊字符的路径",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\file@#%&()_screenshot.png"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') not found due to: NotADirectoryError('[WinError 267] \\u76ee\\u5f55\\u540d\\u79f0\\u65e0\\u6548\\u3002')\\n  cmdline: git init\"}"
        },
        "execution_time": 0.004511356353759766,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository in Root Directory",
        "purpose": "测试在根目录下初始化Git仓库的行为，以检查边界条件",
        "args": {
          "directory": "D:\\"
        },
        "response": {
          "result": "{\"message\": \"Initialized new Git repository at: D:\\\\\"}"
        },
        "execution_time": 0.18637824058532715,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository with Long Path",
        "purpose": "验证工具是否能够处理超长路径的目录初始化请求",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\very_long_path_that_still_works_for_saving_screenshot_1234567890.png"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') not found due to: NotADirectoryError('[WinError 267] \\u76ee\\u5f55\\u540d\\u79f0\\u65e0\\u6548\\u3002')\\n  cmdline: git init\"}"
        },
        "execution_time": 0.003998756408691406,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository in Chinese Named Directory",
        "purpose": "测试工具对中文命名目录的支持情况",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\输出\\中文保存文档.docx"
        },
        "response": {
          "result": "{\"message\": \"Initialized new Git repository at: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\\\u8f93\\u51fa\\\\\\u4e2d\\u6587\\u4fdd\\u5b58\\u6587\\u6863.docx\"}"
        },
        "execution_time": 0.16499662399291992,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository with Null Parameter",
        "purpose": "验证工具在参数为null时的错误处理机制",
        "args": {
          "directory": null
        },
        "response": {
          "error": "ToolException: Error executing tool git_init: 1 validation error for git_initArguments\ndirectory\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository in File Instead of Directory",
        "purpose": "测试工具在试图将文件作为目录进行初始化时的行为",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') not found due to: NotADirectoryError('[WinError 267] \\u76ee\\u5f55\\u540d\\u79f0\\u65e0\\u6548\\u3002')\\n  cmdline: git init\"}"
        },
        "execution_time": 0.00400090217590332,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository in Unicode Path",
        "purpose": "验证工具是否支持Unicode格式的路径",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\智能软件工.pptx"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') not found due to: NotADirectoryError('[WinError 267] \\u76ee\\u5f55\\u540d\\u79f0\\u65e0\\u6548\\u3002')\\n  cmdline: git init\"}"
        },
        "execution_time": 0.009000062942504883,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository with Trailing Spaces",
        "purpose": "测试工具是否能正确处理带有尾随空格的目录路径",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output   "
        },
        "response": {
          "result": "{\"message\": \"Initialized new Git repository at: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\"}"
        },
        "execution_time": 0.21537208557128906,
        "is_functional_test": true
      }
    ],
    "git_status": [
      {
        "case_name": "Get Git Status in Initialized Repository",
        "purpose": "验证工具能够在已初始化的Git仓库中成功获取状态信息",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.29359865188598633,
        "is_functional_test": true
      },
      {
        "case_name": "Get Git Status with Empty Path",
        "purpose": "测试当提供空字符串作为仓库路径时的错误处理",
        "args": {
          "repository_path": ""
        },
        "response": {
          "result": "{\"error\": \"Repository not found: \"}"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": false
      },
      {
        "case_name": "Get Git Status in Nonexistent Directory",
        "purpose": "验证工具在尝试获取不存在目录的Git状态时是否能正确返回错误信息",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.2021036148071289,
        "is_functional_test": false
      },
      {
        "case_name": "Get Git Status in Read-only Directory",
        "purpose": "测试工具在只读目录中获取Git状态的行为",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir"
        },
        "response": {
          "result": "{\"error\": \"Repository not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.003133058547973633,
        "is_functional_test": false
      },
      {
        "case_name": "Get Git Status with Special Characters in Path",
        "purpose": "验证工具能否处理包含特殊字符的路径并正确返回状态信息",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\file@#%&()_screenshot.png"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\file@#%&()_screenshot.png\"}"
        },
        "execution_time": 0.003000974655151367,
        "is_functional_test": true
      },
      {
        "case_name": "Get Git Status in Root Directory",
        "purpose": "测试在根目录下获取Git状态的行为，以检查边界条件",
        "args": {
          "repository_path": "D:\\"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git diff --abbrev=40 --full-index -M --raw -z --no-color\"}"
        },
        "execution_time": 0.19117069244384766,
        "is_functional_test": true
      },
      {
        "case_name": "Get Git Status with Long Path",
        "purpose": "验证工具是否能够处理超长路径的目录状态请求",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\very_long_path_that_still_works_for_saving_screenshot_1234567890.png"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\very_long_path_that_still_works_for_saving_screenshot_1234567890.png\"}"
        },
        "execution_time": 0.004022121429443359,
        "is_functional_test": true
      },
      {
        "case_name": "Get Git Status in Chinese Named Directory",
        "purpose": "测试工具对中文命名目录的支持情况",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\输出\\中文保存文档.docx"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.18176031112670898,
        "is_functional_test": true
      },
      {
        "case_name": "Get Git Status with Null Parameter",
        "purpose": "验证工具在参数为null时的错误处理机制",
        "args": {
          "repository_path": null
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: 1 validation error for git_statusArguments\nrepository_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.004999876022338867,
        "is_functional_test": false
      },
      {
        "case_name": "Get Git Status in File Instead of Directory",
        "purpose": "测试工具在试图将文件作为目录获取Git状态时的行为",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.jpg\"}"
        },
        "execution_time": 0.004236698150634766,
        "is_functional_test": false
      },
      {
        "case_name": "Get Git Status in Unicode Path",
        "purpose": "验证工具是否支持Unicode格式的路径",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\智能软件工.pptx"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5.pptx\"}"
        },
        "execution_time": 0.0075016021728515625,
        "is_functional_test": true
      }
    ],
    "git_add": [
      {
        "case_name": "Add Valid Files to Staging Area",
        "purpose": "验证工具能够成功将指定的有效文件添加到Git暂存区",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\code (1).html"
          ]
        },
        "response": {
          "result": "{\"message\": \"Added files to staging area: ['..\\\\\\\\nature.jpg', '..\\\\\\\\code (1).html']\"}"
        },
        "execution_time": 0.009143829345703125,
        "is_functional_test": true
      },
      {
        "case_name": "Add File with Special Characters to Staging Area",
        "purpose": "测试工具是否能正确处理包含特殊字符的文件路径并将其添加到暂存区",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\file@#%&()_screenshot.png"
          ]
        },
        "response": {
          "result": "{\"message\": \"Added files to staging area: ['file@#%&()_screenshot.png']\"}"
        },
        "execution_time": 0.011322259902954102,
        "is_functional_test": true
      },
      {
        "case_name": "Add Nonexistent File to Staging Area",
        "purpose": "验证工具在尝试添加不存在的文件时是否能正确返回错误信息",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"[WinError 2] \\u7cfb\\u7edf\\u627e\\u4e0d\\u5230\\u6307\\u5b9a\\u7684\\u6587\\u4ef6\\u3002: '..\\\\\\\\nonexistent_file.txt'\"}"
        },
        "execution_time": 0.004004478454589844,
        "is_functional_test": false
      },
      {
        "case_name": "Add File in Read-only Repository",
        "purpose": "测试工具在只读仓库目录中添加文件的行为",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg"
          ]
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.008145809173583984,
        "is_functional_test": false
      },
      {
        "case_name": "Add File with Empty Repository Path",
        "purpose": "测试当提供空字符串作为仓库路径时的错误处理",
        "args": {
          "repository_path": "",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg"
          ]
        },
        "response": {
          "result": "{\"message\": \"Added files to staging area: ['..\\\\\\\\..\\\\\\\\..\\\\\\\\..\\\\\\\\..\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\nature.jpg']\"}"
        },
        "execution_time": 0.009564399719238281,
        "is_functional_test": false
      },
      {
        "case_name": "Add File with Null Parameters",
        "purpose": "验证工具在参数为null时的错误处理机制",
        "args": {
          "repository_path": null,
          "files": null
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: 2 validation errors for git_addArguments\nrepository_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type\nfiles\n  Input should be a valid list [type=list_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/list_type"
        },
        "execution_time": 0.007005214691162109,
        "is_functional_test": false
      },
      {
        "case_name": "Add File in Unicode Path Repository",
        "purpose": "验证工具是否支持Unicode格式的仓库路径和文件路径",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\输出\\中文保存文档.docx",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\中文测试文档.docx"
          ]
        },
        "response": {
          "result": "{\"message\": \"Added files to staging area: ['..\\\\\\\\..\\\\\\\\\\u4e2d\\u6587\\u6d4b\\u8bd5\\u6587\\u6863.docx']\"}"
        },
        "execution_time": 0.0900728702545166,
        "is_functional_test": true
      },
      {
        "case_name": "Add File with Long Path",
        "purpose": "验证工具是否能够处理超长路径的文件添加操作",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\very_long_path_that_still_works_for_saving_screenshot_1234567890.png"
          ]
        },
        "response": {
          "result": "{\"message\": \"Added files to staging area: ['very_long_path_that_still_works_for_saving_screenshot_1234567890.png']\"}"
        },
        "execution_time": 0.012983560562133789,
        "is_functional_test": true
      },
      {
        "case_name": "Add File to Nonexistent Repository",
        "purpose": "测试工具在尝试向不存在的仓库添加文件时是否能正确返回错误信息",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg"
          ]
        },
        "response": {
          "result": "{\"message\": \"Added files to staging area: ['..\\\\\\\\testFiles\\\\\\\\nature.jpg']\"}"
        },
        "execution_time": 0.00850987434387207,
        "is_functional_test": false
      },
      {
        "case_name": "Add File with Trailing Spaces in Repository Path",
        "purpose": "测试工具是否能正确处理带有尾随空格的仓库路径",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output   ",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg"
          ]
        },
        "response": {
          "result": "{\"message\": \"Added files to staging area: ['..\\\\\\\\nature.jpg']\"}"
        },
        "execution_time": 0.010593652725219727,
        "is_functional_test": true
      },
      {
        "case_name": "Add Multiple Files to Staging Area",
        "purpose": "验证工具能否一次性添加多个文件到暂存区",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\code (1).html",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png"
          ]
        },
        "response": {
          "result": "{\"message\": \"Added files to staging area: ['..\\\\\\\\nature.jpg', '..\\\\\\\\code (1).html', '..\\\\\\\\hit.png']\"}"
        },
        "execution_time": 0.011531829833984375,
        "is_functional_test": true
      },
      {
        "case_name": "Add File to Root Directory Repository",
        "purpose": "测试在根目录下添加文件到Git暂存区的行为，以检查边界条件",
        "args": {
          "repository_path": "D:\\",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg"
          ]
        },
        "response": {
          "result": "{\"message\": \"Added files to staging area: ['devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\nature.jpg']\"}"
        },
        "execution_time": 0.007529497146606445,
        "is_functional_test": true
      }
    ],
    "git_diff_unstaged": [
      {
        "case_name": "Display Unstaged Changes in Initialized Repository",
        "purpose": "验证工具能够在已初始化的Git仓库中成功显示未暂存的更改差异信息",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output"
        },
        "response": {
          "result": "{\"unstaged_diff\": []}"
        },
        "execution_time": 0.12938785552978516,
        "is_functional_test": true
      },
      {
        "case_name": "Display Unstaged Changes with Empty Path",
        "purpose": "测试当提供空字符串作为仓库路径时是否能正确返回错误信息",
        "args": {
          "repository_path": ""
        },
        "response": {
          "result": "{\"unstaged_diff\": []}"
        },
        "execution_time": 0.12702393531799316,
        "is_functional_test": false
      },
      {
        "case_name": "Display Unstaged Changes in Nonexistent Directory",
        "purpose": "验证工具在尝试获取不存在目录的未暂存更改差异时是否能正确返回错误信息",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "{\"unstaged_diff\": []}"
        },
        "execution_time": 0.15390968322753906,
        "is_functional_test": false
      },
      {
        "case_name": "Display Unstaged Changes in Read-only Directory",
        "purpose": "测试工具在只读目录中显示未暂存更改的行为",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.004001140594482422,
        "is_functional_test": false
      },
      {
        "case_name": "Display Unstaged Changes with Special Characters in Path",
        "purpose": "验证工具能否处理包含特殊字符的路径并正确显示未暂存更改差异",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\file@#%&()_screenshot.png"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\file@#%&()_screenshot.png\"}"
        },
        "execution_time": 0.0065097808837890625,
        "is_functional_test": true
      },
      {
        "case_name": "Display Unstaged Changes in Root Directory",
        "purpose": "测试在根目录下显示未暂存更改的行为，以检查边界条件",
        "args": {
          "repository_path": "D:\\"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git diff --abbrev=40 --full-index -M --raw -z --no-color\"}"
        },
        "execution_time": 0.17128944396972656,
        "is_functional_test": true
      },
      {
        "case_name": "Display Unstaged Changes with Long Path",
        "purpose": "验证工具是否能够处理超长路径的目录并正确显示未暂存更改差异",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\very_long_path_that_still_works_for_saving_screenshot_1234567890.png"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\very_long_path_that_still_works_for_saving_screenshot_1234567890.png\"}"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": true
      },
      {
        "case_name": "Display Unstaged Changes in Chinese Named Directory",
        "purpose": "测试工具对中文命名目录的支持情况，并验证其显示未暂存更改的能力",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\输出\\中文保存文档.docx"
        },
        "response": {
          "result": "{\"unstaged_diff\": []}"
        },
        "execution_time": 0.2370738983154297,
        "is_functional_test": true
      },
      {
        "case_name": "Display Unstaged Changes with Null Parameter",
        "purpose": "验证工具在参数为null时的错误处理机制",
        "args": {
          "repository_path": null
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: 1 validation error for git_diff_unstagedArguments\nrepository_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.002999544143676758,
        "is_functional_test": false
      },
      {
        "case_name": "Display Unstaged Changes in File Instead of Directory",
        "purpose": "测试工具在试图将文件作为目录显示未暂存更改时的行为",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.jpg\"}"
        },
        "execution_time": 0.0045108795166015625,
        "is_functional_test": false
      },
      {
        "case_name": "Display Unstaged Changes in Unicode Path",
        "purpose": "验证工具是否支持Unicode格式的路径并正确显示未暂存更改差异",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\智能软件工.pptx"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5.pptx\"}"
        },
        "execution_time": 0.008515596389770508,
        "is_functional_test": true
      },
      {
        "case_name": "Display Unstaged Changes with Trailing Spaces in Path",
        "purpose": "测试工具是否能正确处理带有尾随空格的目录路径并显示未暂存更改差异",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output   "
        },
        "response": {
          "result": "{\"unstaged_diff\": []}"
        },
        "execution_time": 0.2134864330291748,
        "is_functional_test": true
      }
    ],
    "git_diff_staged": [
      {
        "case_name": "Display Staged Changes in Valid Repository",
        "purpose": "验证工具能够在已初始化的Git仓库中成功显示暂存区的差异信息",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.004999637603759766,
        "is_functional_test": true
      },
      {
        "case_name": "Display Staged Changes with Empty Path",
        "purpose": "测试当提供空字符串作为仓库路径时的错误处理",
        "args": {
          "repository_path": ""
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.00501704216003418,
        "is_functional_test": false
      },
      {
        "case_name": "Display Staged Changes in Nonexistent Directory",
        "purpose": "验证工具在尝试获取不存在目录的暂存区差异时是否能正确返回错误信息",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.009058475494384766,
        "is_functional_test": false
      },
      {
        "case_name": "Display Staged Changes in Read-only Directory",
        "purpose": "测试工具在只读目录中获取暂存区差异的行为",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.005006313323974609,
        "is_functional_test": false
      },
      {
        "case_name": "Display Staged Changes with Special Characters in Path",
        "purpose": "验证工具能否处理包含特殊字符的路径并正确返回暂存区差异信息",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\file@#%&()_screenshot.png"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\file@#%&()_screenshot.png\"}"
        },
        "execution_time": 0.005486488342285156,
        "is_functional_test": true
      },
      {
        "case_name": "Display Staged Changes in Root Directory",
        "purpose": "测试在根目录下获取暂存区差异的行为，以检查边界条件",
        "args": {
          "repository_path": "D:\\"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.005000114440917969,
        "is_functional_test": true
      },
      {
        "case_name": "Display Staged Changes with Long Path",
        "purpose": "验证工具是否能够处理超长路径的目录请求并返回暂存区差异信息",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\very_long_path_that_still_works_for_saving_screenshot_1234567890.png"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\very_long_path_that_still_works_for_saving_screenshot_1234567890.png\"}"
        },
        "execution_time": 0.006510019302368164,
        "is_functional_test": true
      },
      {
        "case_name": "Display Staged Changes in Chinese Named Directory",
        "purpose": "测试工具对中文命名目录的支持情况",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\输出\\中文保存文档.docx"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.003996372222900391,
        "is_functional_test": true
      },
      {
        "case_name": "Display Staged Changes with Null Parameter",
        "purpose": "验证工具在参数为null时的错误处理机制",
        "args": {
          "repository_path": null
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: 1 validation error for git_diff_stagedArguments\nrepository_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.004358530044555664,
        "is_functional_test": false
      },
      {
        "case_name": "Display Staged Changes in File Instead of Directory",
        "purpose": "测试工具在试图将文件作为目录获取暂存区差异时的行为",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.jpg\"}"
        },
        "execution_time": 0.006036996841430664,
        "is_functional_test": false
      },
      {
        "case_name": "Display Staged Changes in Unicode Path",
        "purpose": "验证工具是否支持Unicode格式的路径",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\智能软件工.pptx"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5.pptx\"}"
        },
        "execution_time": 0.0040018558502197266,
        "is_functional_test": true
      },
      {
        "case_name": "Display Staged Changes with Trailing Spaces",
        "purpose": "测试工具是否能正确处理带有尾随空格的目录路径",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output   "
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.005510568618774414,
        "is_functional_test": true
      }
    ],
    "git_commit": [
      {
        "case_name": "Commit Staged Changes in Valid Repository",
        "purpose": "验证工具能够在有效的Git仓库中成功提交暂存的更改",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "message": "Initial commit"
        },
        "response": {
          "result": "{\"message\": \"Created new commit: 45015b805d40e0b8598a53f32012393ed96be1c8\"}"
        },
        "execution_time": 0.23250222206115723,
        "is_functional_test": true
      },
      {
        "case_name": "Commit with Empty Message",
        "purpose": "测试当提交信息为空时的错误处理",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "message": ""
        },
        "response": {
          "result": "{\"message\": \"Created new commit: 7076648a6f96b39362d17059bddf210ce55725ed\"}"
        },
        "execution_time": 0.285114049911499,
        "is_functional_test": false
      },
      {
        "case_name": "Commit to Nonexistent Repository",
        "purpose": "验证工具在尝试向不存在的仓库提交时是否能正确返回错误信息",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "message": "Test commit"
        },
        "response": {
          "result": "{\"message\": \"Created new commit: afd395ebc5afef2e88e6f18bc45c77e8f07021ec\"}"
        },
        "execution_time": 0.27582454681396484,
        "is_functional_test": false
      },
      {
        "case_name": "Commit in Read-only Directory",
        "purpose": "测试工具在只读目录中提交更改的行为",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir",
          "message": "Read-only directory test commit"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.013016223907470703,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Special Characters in Path",
        "purpose": "验证工具能否处理包含特殊字符的仓库路径并正确提交",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\file@#%&()_screenshot.png",
          "message": "Special characters in path commit"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\file@#%&()_screenshot.png\"}"
        },
        "execution_time": 0.004510164260864258,
        "is_functional_test": true
      },
      {
        "case_name": "Commit in Root Directory",
        "purpose": "测试在根目录下进行提交操作，以检查边界条件",
        "args": {
          "repository_path": "D:\\",
          "message": "Root directory commit"
        },
        "response": {
          "result": "{\"error\": \"SHA is empty, possible dubious ownership in the repository at D:\\\\.\\n            If this is unintended run:\\n\\n                      \\\"git config --global --add safe.directory D:\\\\\\\" \"}"
        },
        "execution_time": 0.19038820266723633,
        "is_functional_test": true
      },
      {
        "case_name": "Commit with Long Path",
        "purpose": "验证工具是否能够处理超长路径的仓库提交请求",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\very_long_path_that_still_works_for_saving_screenshot_1234567890.png",
          "message": "Long path commit"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\very_long_path_that_still_works_for_saving_screenshot_1234567890.png\"}"
        },
        "execution_time": 0.004000663757324219,
        "is_functional_test": true
      },
      {
        "case_name": "Commit in Chinese Named Directory",
        "purpose": "测试工具对中文命名目录的支持情况下的提交功能",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\输出\\中文保存文档.docx",
          "message": "中文目录提交测试"
        },
        "response": {
          "result": "{\"message\": \"Created new commit: 19d0d22bcf197c29ebca474587d904d93c33811c\"}"
        },
        "execution_time": 0.29903626441955566,
        "is_functional_test": true
      },
      {
        "case_name": "Commit with Null Parameter",
        "purpose": "验证工具在参数为null时的错误处理机制",
        "args": {
          "repository_path": null,
          "message": "Null parameter test"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: 1 validation error for git_commitArguments\nrepository_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": false
      },
      {
        "case_name": "Commit in File Instead of Directory",
        "purpose": "测试工具在试图将文件作为仓库路径进行提交时的行为",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg",
          "message": "File instead of directory commit"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.jpg\"}"
        },
        "execution_time": 0.0045070648193359375,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Unicode Path",
        "purpose": "验证工具是否支持Unicode格式的仓库路径进行提交",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\智能软件工.pptx",
          "message": "Unicode path commit"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5.pptx\"}"
        },
        "execution_time": 0.003000974655151367,
        "is_functional_test": true
      },
      {
        "case_name": "Commit with Trailing Spaces in Path",
        "purpose": "测试工具是否能正确处理带有尾随空格的仓库路径",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output   ",
          "message": "Trailing spaces in path commit"
        },
        "response": {
          "result": "{\"message\": \"Created new commit: 711b818c40451b7415ec0f34a33e9b0ca53d1807\"}"
        },
        "execution_time": 0.2940247058868408,
        "is_functional_test": true
      }
    ],
    "git_log": [
      {
        "case_name": "Get Git Log in Initialized Repository",
        "purpose": "验证工具能够在已初始化的Git仓库中成功获取提交历史记录",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output"
        },
        "response": {
          "result": "[{\"hash\": \"711b818c40451b7415ec0f34a33e9b0ca53d1807\", \"author\": \"pouchine\", \"date\": 1752240405, \"message\": \"Trailing spaces in path commit\"}, {\"hash\": \"7076648a6f96b39362d17059bddf210ce55725ed\", \"author\": \"pouchine\", \"date\": 1752240404, \"message\": \"\"}, {\"hash\": \"45015b805d40e0b8598a53f32012393ed96be1c8\", \"author\": \"pouchine\", \"date\": 1752240403, \"message\": \"Initial commit\"}]"
        },
        "execution_time": 0.425795316696167,
        "is_functional_test": true
      },
      {
        "case_name": "Get Git Log with Empty Path",
        "purpose": "测试当提供空字符串作为仓库路径时的错误处理",
        "args": {
          "repository_path": ""
        },
        "response": {
          "result": "{\"error\": \"Reference at 'refs/heads/master' does not exist\"}"
        },
        "execution_time": 0.012103796005249023,
        "is_functional_test": false
      },
      {
        "case_name": "Get Git Log in Nonexistent Directory",
        "purpose": "验证工具在尝试获取不存在目录的Git日志时是否能正确返回错误信息",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "[{\"hash\": \"afd395ebc5afef2e88e6f18bc45c77e8f07021ec\", \"author\": \"pouchine\", \"date\": 1752240404, \"message\": \"Test commit\"}]"
        },
        "execution_time": 0.39743757247924805,
        "is_functional_test": false
      },
      {
        "case_name": "Get Git Log in Read-only Directory",
        "purpose": "测试工具在只读目录中获取Git日志的行为",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.0039825439453125,
        "is_functional_test": false
      },
      {
        "case_name": "Get Git Log with Special Characters in Path",
        "purpose": "验证工具能否处理包含特殊字符的路径并正确返回日志信息",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\file@#%&()_screenshot.png"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\file@#%&()_screenshot.png\"}"
        },
        "execution_time": 0.0050048828125,
        "is_functional_test": true
      },
      {
        "case_name": "Get Git Log in Root Directory",
        "purpose": "测试在根目录下获取Git日志的行为，以检查边界条件",
        "args": {
          "repository_path": "D:\\"
        },
        "response": {
          "result": "{\"error\": \"Reference at 'refs/heads/master' does not exist\"}"
        },
        "execution_time": 0.007514476776123047,
        "is_functional_test": true
      },
      {
        "case_name": "Get Git Log with Long Path",
        "purpose": "验证工具是否能够处理超长路径的目录日志请求",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\very_long_path_that_still_works_for_saving_screenshot_1234567890.png"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\very_long_path_that_still_works_for_saving_screenshot_1234567890.png\"}"
        },
        "execution_time": 0.0065135955810546875,
        "is_functional_test": true
      },
      {
        "case_name": "Get Git Log in Chinese Named Directory",
        "purpose": "测试工具对中文命名目录的支持情况",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\输出\\中文保存文档.docx"
        },
        "response": {
          "result": "[{\"hash\": \"19d0d22bcf197c29ebca474587d904d93c33811c\", \"author\": \"pouchine\", \"date\": 1752240404, \"message\": \"\\u4e2d\\u6587\\u76ee\\u5f55\\u63d0\\u4ea4\\u6d4b\\u8bd5\"}]"
        },
        "execution_time": 0.5063261985778809,
        "is_functional_test": true
      },
      {
        "case_name": "Get Git Log with Null Parameter",
        "purpose": "验证工具在参数为null时的错误处理机制",
        "args": {
          "repository_path": null
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: 1 validation error for git_logArguments\nrepository_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.0030517578125,
        "is_functional_test": false
      },
      {
        "case_name": "Get Git Log in File Instead of Directory",
        "purpose": "测试工具在试图将文件作为目录获取Git日志时的行为",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.jpg\"}"
        },
        "execution_time": 0.006002187728881836,
        "is_functional_test": false
      },
      {
        "case_name": "Get Git Log in Unicode Path",
        "purpose": "验证工具是否支持Unicode格式的路径",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\智能软件工.pptx"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5.pptx\"}"
        },
        "execution_time": 0.005003929138183594,
        "is_functional_test": true
      },
      {
        "case_name": "Get Git Log with Trailing Spaces",
        "purpose": "测试工具是否能正确处理带有尾随空格的目录路径",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output   "
        },
        "response": {
          "result": "[{\"hash\": \"711b818c40451b7415ec0f34a33e9b0ca53d1807\", \"author\": \"pouchine\", \"date\": 1752240405, \"message\": \"Trailing spaces in path commit\"}, {\"hash\": \"7076648a6f96b39362d17059bddf210ce55725ed\", \"author\": \"pouchine\", \"date\": 1752240404, \"message\": \"\"}, {\"hash\": \"45015b805d40e0b8598a53f32012393ed96be1c8\", \"author\": \"pouchine\", \"date\": 1752240403, \"message\": \"Initial commit\"}]"
        },
        "execution_time": 0.4745140075683594,
        "is_functional_test": true
      }
    ],
    "git_diff": [
      {
        "case_name": "Compare Two Valid Commits in Initialized Repository",
        "purpose": "验证工具能够正确比较两个有效的提交并返回差异信息",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "reference1": "HEAD",
          "reference2": "HEAD~1"
        },
        "response": {
          "result": "{\"diff\": []}"
        },
        "execution_time": 0.2530784606933594,
        "is_functional_test": true
      },
      {
        "case_name": "Compare Branch and Commit in Chinese Named Directory",
        "purpose": "测试在中文命名目录中比较分支与提交的功能是否正常",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\输出\\中文保存文档.docx",
          "reference1": "master",
          "reference2": "HEAD~1"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff-tree 19d0d22bcf197c29ebca474587d904d93c33811c HEAD~1 -r --abbrev=40 --full-index -M --raw -z --no-color\"}"
        },
        "execution_time": 0.32640910148620605,
        "is_functional_test": true
      },
      {
        "case_name": "Compare Two Nonexistent References",
        "purpose": "验证当提供的两个引用都不存在时，工具是否能优雅地处理错误",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "reference1": "nonexistent_branch1",
          "reference2": "nonexistent_branch2"
        },
        "response": {
          "result": "{\"error\": \"Ref 'nonexistent_branch1' did not resolve to an object\"}"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      },
      {
        "case_name": "Compare with Empty Reference1",
        "purpose": "测试当reference1为空字符串时的参数验证机制",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "reference1": "",
          "reference2": "HEAD~1"
        },
        "response": {
          "result": "{\"error\": \"Ref 'Invalid revision spec '^0' - not enough parent commits to reach '^0'' did not resolve to an object\"}"
        },
        "execution_time": 0.027933120727539062,
        "is_functional_test": false
      },
      {
        "case_name": "Compare with Empty Reference2",
        "purpose": "测试当reference2为空字符串时的参数验证机制",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "reference1": "HEAD",
          "reference2": ""
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff-tree 711b818c40451b7415ec0f34a33e9b0ca53d1807  -r --abbrev=40 --full-index -M --raw -z --no-color\"}"
        },
        "execution_time": 0.3090856075286865,
        "is_functional_test": false
      },
      {
        "case_name": "Compare Using Special Characters in References",
        "purpose": "验证工具能否处理包含特殊字符的reference名称",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "reference1": "feature/branch@{u}",
          "reference2": "HEAD~1"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: a bytes-like object is required, not 'str'"
        },
        "execution_time": 0.0046062469482421875,
        "is_functional_test": true
      },
      {
        "case_name": "Compare in Read-only Directory",
        "purpose": "测试工具在只读目录中执行diff操作的行为",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir",
          "reference1": "HEAD",
          "reference2": "HEAD~1"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.004008293151855469,
        "is_functional_test": false
      },
      {
        "case_name": "Compare Across Unicode Paths",
        "purpose": "验证工具是否支持Unicode格式路径下的diff操作",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\智能软件工.pptx",
          "reference1": "HEAD",
          "reference2": "HEAD~1"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5.pptx\"}"
        },
        "execution_time": 0.006505727767944336,
        "is_functional_test": true
      },
      {
        "case_name": "Compare Using Null Repository Path",
        "purpose": "测试当仓库路径为null时的错误处理机制",
        "args": {
          "repository_path": null,
          "reference1": "HEAD",
          "reference2": "HEAD~1"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: 1 validation error for git_diffArguments\nrepository_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      },
      {
        "case_name": "Compare in File Instead of Repository",
        "purpose": "测试将文件路径误作为仓库路径时的行为",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg",
          "reference1": "HEAD",
          "reference2": "HEAD~1"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.jpg\"}"
        },
        "execution_time": 0.006520271301269531,
        "is_functional_test": false
      },
      {
        "case_name": "Compare with Very Long References",
        "purpose": "验证工具是否能够处理非常长的reference名称",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "reference1": "very_long_branch_name_that_still_works_for_testing_purposes_1234567890",
          "reference2": "HEAD~1"
        },
        "response": {
          "result": "{\"error\": \"Ref 'very_long_branch_name_that_still_works_for_testing_purposes_1234567890' did not resolve to an object\"}"
        },
        "execution_time": 0.005003213882446289,
        "is_functional_test": true
      },
      {
        "case_name": "Compare in Root Directory",
        "purpose": "测试在根目录下执行diff操作的行为，以检查边界条件",
        "args": {
          "repository_path": "D:\\",
          "reference1": "HEAD",
          "reference2": "HEAD~1"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.007120609283447266,
        "is_functional_test": false
      }
    ],
    "git_reset": [
      {
        "case_name": "Reset Single File in Staging Area",
        "purpose": "验证工具能够从暂存区中移除单个文件",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg"
          ]
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git reset --files=..\\\\nature.jpg\\n  stderr: 'error: unknown option `files=..\\\\nature.jpg'\\nusage: git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]\\n   or: git reset [-q] [<tree-ish>] [--] <pathspec>...\\n   or: git reset [-q] [--pathspec-from-file [--pathspec-file-nul]] [<tree-ish>]\\n   or: git reset --patch [<tree-ish>] [--] [<pathspec>...]\\n   or: DEPRECATED: git reset [-q] [--stdin [-z]] [<tree-ish>]\\n\\n    -q, --[no-]quiet      be quiet, only report errors\\n    --no-refresh          skip refreshing the index after reset\\n    --refresh             opposite of --no-refresh\\n    --mixed               reset HEAD and index\\n    --soft                reset only HEAD\\n    --hard                reset HEAD, index and working tree\\n    --merge               reset HEAD, index and working tree\\n    --keep                reset HEAD but keep local changes\\n    --[no-]recurse-submodules[=<reset>]\\n                          control recursive updating of submodules\\n    -p, --[no-]patch      select hunks interactively\\n    -N, --[no-]intent-to-add\\n                          record only the fact that removed paths will be added later\\n    --[no-]pathspec-from-file <file>\\n                          read pathspec from file\\n    --[no-]pathspec-file-nul\\n                          with --pathspec-from-file, pathspec elements are separated with NUL character\\n    -z                    DEPRECATED (use --pathspec-file-nul instead): paths are separated with NUL character\\n    --[no-]stdin          DEPRECATED (use --pathspec-from-file=- instead): read paths from <stdin>\\n'\"}"
        },
        "execution_time": 0.2054920196533203,
        "is_functional_test": true
      },
      {
        "case_name": "Reset Multiple Files in Staging Area",
        "purpose": "验证工具能够从暂存区中移除多个文件",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png"
          ]
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git reset --files=..\\\\nature.jpg --files=..\\\\hit.png\\n  stderr: 'error: unknown option `files=..\\\\nature.jpg'\\nusage: git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]\\n   or: git reset [-q] [<tree-ish>] [--] <pathspec>...\\n   or: git reset [-q] [--pathspec-from-file [--pathspec-file-nul]] [<tree-ish>]\\n   or: git reset --patch [<tree-ish>] [--] [<pathspec>...]\\n   or: DEPRECATED: git reset [-q] [--stdin [-z]] [<tree-ish>]\\n\\n    -q, --[no-]quiet      be quiet, only report errors\\n    --no-refresh          skip refreshing the index after reset\\n    --refresh             opposite of --no-refresh\\n    --mixed               reset HEAD and index\\n    --soft                reset only HEAD\\n    --hard                reset HEAD, index and working tree\\n    --merge               reset HEAD, index and working tree\\n    --keep                reset HEAD but keep local changes\\n    --[no-]recurse-submodules[=<reset>]\\n                          control recursive updating of submodules\\n    -p, --[no-]patch      select hunks interactively\\n    -N, --[no-]intent-to-add\\n                          record only the fact that removed paths will be added later\\n    --[no-]pathspec-from-file <file>\\n                          read pathspec from file\\n    --[no-]pathspec-file-nul\\n                          with --pathspec-from-file, pathspec elements are separated with NUL character\\n    -z                    DEPRECATED (use --pathspec-file-nul instead): paths are separated with NUL character\\n    --[no-]stdin          DEPRECATED (use --pathspec-from-file=- instead): read paths from <stdin>\\n'\"}"
        },
        "execution_time": 0.1393575668334961,
        "is_functional_test": true
      },
      {
        "case_name": "Reset Nonexistent File",
        "purpose": "测试尝试移除不存在于暂存区的文件时的行为",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git reset --files=..\\\\nonexistent_file.txt\\n  stderr: 'error: unknown option `files=..\\\\nonexistent_file.txt'\\nusage: git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]\\n   or: git reset [-q] [<tree-ish>] [--] <pathspec>...\\n   or: git reset [-q] [--pathspec-from-file [--pathspec-file-nul]] [<tree-ish>]\\n   or: git reset --patch [<tree-ish>] [--] [<pathspec>...]\\n   or: DEPRECATED: git reset [-q] [--stdin [-z]] [<tree-ish>]\\n\\n    -q, --[no-]quiet      be quiet, only report errors\\n    --no-refresh          skip refreshing the index after reset\\n    --refresh             opposite of --no-refresh\\n    --mixed               reset HEAD and index\\n    --soft                reset only HEAD\\n    --hard                reset HEAD, index and working tree\\n    --merge               reset HEAD, index and working tree\\n    --keep                reset HEAD but keep local changes\\n    --[no-]recurse-submodules[=<reset>]\\n                          control recursive updating of submodules\\n    -p, --[no-]patch      select hunks interactively\\n    -N, --[no-]intent-to-add\\n                          record only the fact that removed paths will be added later\\n    --[no-]pathspec-from-file <file>\\n                          read pathspec from file\\n    --[no-]pathspec-file-nul\\n                          with --pathspec-from-file, pathspec elements are separated with NUL character\\n    -z                    DEPRECATED (use --pathspec-file-nul instead): paths are separated with NUL character\\n    --[no-]stdin          DEPRECATED (use --pathspec-from-file=- instead): read paths from <stdin>\\n'\"}"
        },
        "execution_time": 0.1338496208190918,
        "is_functional_test": false
      },
      {
        "case_name": "Reset File with Special Characters",
        "purpose": "验证工具是否能正确处理路径中包含特殊字符的文件重置操作",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\file@#%&()_screenshot.png"
          ]
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git reset --files=..\\\\file@#%&()_screenshot.png\\n  stderr: 'error: unknown option `files=..\\\\file@#%&()_screenshot.png'\\nusage: git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]\\n   or: git reset [-q] [<tree-ish>] [--] <pathspec>...\\n   or: git reset [-q] [--pathspec-from-file [--pathspec-file-nul]] [<tree-ish>]\\n   or: git reset --patch [<tree-ish>] [--] [<pathspec>...]\\n   or: DEPRECATED: git reset [-q] [--stdin [-z]] [<tree-ish>]\\n\\n    -q, --[no-]quiet      be quiet, only report errors\\n    --no-refresh          skip refreshing the index after reset\\n    --refresh             opposite of --no-refresh\\n    --mixed               reset HEAD and index\\n    --soft                reset only HEAD\\n    --hard                reset HEAD, index and working tree\\n    --merge               reset HEAD, index and working tree\\n    --keep                reset HEAD but keep local changes\\n    --[no-]recurse-submodules[=<reset>]\\n                          control recursive updating of submodules\\n    -p, --[no-]patch      select hunks interactively\\n    -N, --[no-]intent-to-add\\n                          record only the fact that removed paths will be added later\\n    --[no-]pathspec-from-file <file>\\n                          read pathspec from file\\n    --[no-]pathspec-file-nul\\n                          with --pathspec-from-file, pathspec elements are separated with NUL character\\n    -z                    DEPRECATED (use --pathspec-file-nul instead): paths are separated with NUL character\\n    --[no-]stdin          DEPRECATED (use --pathspec-from-file=- instead): read paths from <stdin>\\n'\"}"
        },
        "execution_time": 0.1543593406677246,
        "is_functional_test": true
      },
      {
        "case_name": "Reset File in Chinese Named Directory",
        "purpose": "测试中文命名目录中的文件重置功能",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\输出\\中文git初始化测试",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\输出\\中文写入测试.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git reset --files=..\\\\\\u4e2d\\u6587\\u5199\\u5165\\u6d4b\\u8bd5.txt\\n  stderr: 'error: unknown option `files=..\\\\\\u4e2d\\u6587\\u5199\\u5165\\u6d4b\\u8bd5.txt'\\nusage: git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]\\n   or: git reset [-q] [<tree-ish>] [--] <pathspec>...\\n   or: git reset [-q] [--pathspec-from-file [--pathspec-file-nul]] [<tree-ish>]\\n   or: git reset --patch [<tree-ish>] [--] [<pathspec>...]\\n   or: DEPRECATED: git reset [-q] [--stdin [-z]] [<tree-ish>]\\n\\n    -q, --[no-]quiet      be quiet, only report errors\\n    --no-refresh          skip refreshing the index after reset\\n    --refresh             opposite of --no-refresh\\n    --mixed               reset HEAD and index\\n    --soft                reset only HEAD\\n    --hard                reset HEAD, index and working tree\\n    --merge               reset HEAD, index and working tree\\n    --keep                reset HEAD but keep local changes\\n    --[no-]recurse-submodules[=<reset>]\\n                          control recursive updating of submodules\\n    -p, --[no-]patch      select hunks interactively\\n    -N, --[no-]intent-to-add\\n                          record only the fact that removed paths will be added later\\n    --[no-]pathspec-from-file <file>\\n                          read pathspec from file\\n    --[no-]pathspec-file-nul\\n                          with --pathspec-from-file, pathspec elements are separated with NUL character\\n    -z                    DEPRECATED (use --pathspec-file-nul instead): paths are separated with NUL character\\n    --[no-]stdin          DEPRECATED (use --pathspec-from-file=- instead): read paths from <stdin>\\n'\"}"
        },
        "execution_time": 0.14162254333496094,
        "is_functional_test": true
      },
      {
        "case_name": "Reset File with Empty Repository Path",
        "purpose": "验证当仓库路径为空字符串时的错误处理机制",
        "args": {
          "repository_path": "",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg"
          ]
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git reset --files=..\\\\..\\\\..\\\\..\\\\..\\\\testSystem\\\\testFiles\\\\nature.jpg\\n  stderr: 'error: unknown option `files=..\\\\..\\\\..\\\\..\\\\..\\\\testSystem\\\\testFiles\\\\nature.jpg'\\nusage: git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]\\n   or: git reset [-q] [<tree-ish>] [--] <pathspec>...\\n   or: git reset [-q] [--pathspec-from-file [--pathspec-file-nul]] [<tree-ish>]\\n   or: git reset --patch [<tree-ish>] [--] [<pathspec>...]\\n   or: DEPRECATED: git reset [-q] [--stdin [-z]] [<tree-ish>]\\n\\n    -q, --[no-]quiet      be quiet, only report errors\\n    --no-refresh          skip refreshing the index after reset\\n    --refresh             opposite of --no-refresh\\n    --mixed               reset HEAD and index\\n    --soft                reset only HEAD\\n    --hard                reset HEAD, index and working tree\\n    --merge               reset HEAD, index and working tree\\n    --keep                reset HEAD but keep local changes\\n    --[no-]recurse-submodules[=<reset>]\\n                          control recursive updating of submodules\\n    -p, --[no-]patch      select hunks interactively\\n    -N, --[no-]intent-to-add\\n                          record only the fact that removed paths will be added later\\n    --[no-]pathspec-from-file <file>\\n                          read pathspec from file\\n    --[no-]pathspec-file-nul\\n                          with --pathspec-from-file, pathspec elements are separated with NUL character\\n    -z                    DEPRECATED (use --pathspec-file-nul instead): paths are separated with NUL character\\n    --[no-]stdin          DEPRECATED (use --pathspec-from-file=- instead): read paths from <stdin>\\n'\"}"
        },
        "execution_time": 0.1718308925628662,
        "is_functional_test": false
      },
      {
        "case_name": "Reset File in Nonexistent Repository",
        "purpose": "测试尝试在不存在的Git仓库中进行文件重置时的行为",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg"
          ]
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git reset --files=..\\\\testFiles\\\\nature.jpg\\n  stderr: 'error: unknown option `files=..\\\\testFiles\\\\nature.jpg'\\nusage: git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]\\n   or: git reset [-q] [<tree-ish>] [--] <pathspec>...\\n   or: git reset [-q] [--pathspec-from-file [--pathspec-file-nul]] [<tree-ish>]\\n   or: git reset --patch [<tree-ish>] [--] [<pathspec>...]\\n   or: DEPRECATED: git reset [-q] [--stdin [-z]] [<tree-ish>]\\n\\n    -q, --[no-]quiet      be quiet, only report errors\\n    --no-refresh          skip refreshing the index after reset\\n    --refresh             opposite of --no-refresh\\n    --mixed               reset HEAD and index\\n    --soft                reset only HEAD\\n    --hard                reset HEAD, index and working tree\\n    --merge               reset HEAD, index and working tree\\n    --keep                reset HEAD but keep local changes\\n    --[no-]recurse-submodules[=<reset>]\\n                          control recursive updating of submodules\\n    -p, --[no-]patch      select hunks interactively\\n    -N, --[no-]intent-to-add\\n                          record only the fact that removed paths will be added later\\n    --[no-]pathspec-from-file <file>\\n                          read pathspec from file\\n    --[no-]pathspec-file-nul\\n                          with --pathspec-from-file, pathspec elements are separated with NUL character\\n    -z                    DEPRECATED (use --pathspec-file-nul instead): paths are separated with NUL character\\n    --[no-]stdin          DEPRECATED (use --pathspec-from-file=- instead): read paths from <stdin>\\n'\"}"
        },
        "execution_time": 0.19351768493652344,
        "is_functional_test": false
      },
      {
        "case_name": "Reset File with Null Repository Path",
        "purpose": "验证参数为null时的错误处理机制",
        "args": {
          "repository_path": null,
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg"
          ]
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 1 validation error for git_resetArguments\nrepository_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": false
      },
      {
        "case_name": "Reset File with Null Files List",
        "purpose": "验证当文件列表为null时的错误处理机制",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "files": null
        },
        "response": {
          "error": "ToolException: Error executing tool git_reset: 1 validation error for git_resetArguments\nfiles\n  Input should be a valid list [type=list_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/list_type"
        },
        "execution_time": 0.006524324417114258,
        "is_functional_test": false
      },
      {
        "case_name": "Reset File in Read-only Repository",
        "purpose": "测试在只读Git仓库中进行文件重置时的行为",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg"
          ]
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.00750422477722168,
        "is_functional_test": false
      },
      {
        "case_name": "Reset Empty File List",
        "purpose": "验证当提供空文件列表时的错误处理机制",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "files": []
        },
        "response": {
          "result": "{\"message\": \"Removed files from staging area: []\"}"
        },
        "execution_time": 0.1803429126739502,
        "is_functional_test": false
      },
      {
        "case_name": "Reset File Using Relative Paths",
        "purpose": "验证工具是否支持使用相对路径进行文件重置",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "files": [
            "..\\testFiles\\nature.jpg"
          ]
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git reset --files=..\\\\testFiles\\\\nature.jpg\\n  stderr: 'error: unknown option `files=..\\\\testFiles\\\\nature.jpg'\\nusage: git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]\\n   or: git reset [-q] [<tree-ish>] [--] <pathspec>...\\n   or: git reset [-q] [--pathspec-from-file [--pathspec-file-nul]] [<tree-ish>]\\n   or: git reset --patch [<tree-ish>] [--] [<pathspec>...]\\n   or: DEPRECATED: git reset [-q] [--stdin [-z]] [<tree-ish>]\\n\\n    -q, --[no-]quiet      be quiet, only report errors\\n    --no-refresh          skip refreshing the index after reset\\n    --refresh             opposite of --no-refresh\\n    --mixed               reset HEAD and index\\n    --soft                reset only HEAD\\n    --hard                reset HEAD, index and working tree\\n    --merge               reset HEAD, index and working tree\\n    --keep                reset HEAD but keep local changes\\n    --[no-]recurse-submodules[=<reset>]\\n                          control recursive updating of submodules\\n    -p, --[no-]patch      select hunks interactively\\n    -N, --[no-]intent-to-add\\n                          record only the fact that removed paths will be added later\\n    --[no-]pathspec-from-file <file>\\n                          read pathspec from file\\n    --[no-]pathspec-file-nul\\n                          with --pathspec-from-file, pathspec elements are separated with NUL character\\n    -z                    DEPRECATED (use --pathspec-file-nul instead): paths are separated with NUL character\\n    --[no-]stdin          DEPRECATED (use --pathspec-from-file=- instead): read paths from <stdin>\\n'\"}"
        },
        "execution_time": 0.17145514488220215,
        "is_functional_test": true
      }
    ],
    "git_create_branch": [
      {
        "case_name": "Create Branch in Valid Repository",
        "purpose": "验证工具能够在已存在的Git仓库中成功创建新分支",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "branch_name": "new-feature"
        },
        "response": {
          "result": "{\"message\": \"Created new branch: new-feature\"}"
        },
        "execution_time": 0.1253190040588379,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch with Empty Repository Path",
        "purpose": "测试当提供空字符串作为仓库路径时的错误处理",
        "args": {
          "repository_path": "",
          "branch_name": "new-feature"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.0042667388916015625,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch in Nonexistent Repository",
        "purpose": "验证工具在尝试在不存在的目录中创建分支时是否能正确返回错误信息",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "branch_name": "new-feature"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\nonexistent_dir\"}"
        },
        "execution_time": 0.006521701812744141,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Empty Branch Name",
        "purpose": "测试当提供空字符串作为分支名称时的错误处理",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "branch_name": ""
        },
        "response": {
          "result": "{\"error\": \"[WinError 183] \\u5f53\\u6587\\u4ef6\\u5df2\\u5b58\\u5728\\u65f6\\uff0c\\u65e0\\u6cd5\\u521b\\u5efa\\u8be5\\u6587\\u4ef6\\u3002: 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\output\\\\\\\\.git\\\\\\\\refs\\\\\\\\heads\\\\\\\\.lock' -> 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\output\\\\\\\\.git\\\\\\\\refs\\\\\\\\heads\\\\\\\\'\"}"
        },
        "execution_time": 0.16588091850280762,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Special Characters in Branch Name",
        "purpose": "验证工具能否处理包含特殊字符的分支名称",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "branch_name": "feature@#%&()_test"
        },
        "response": {
          "result": "{\"message\": \"Created new branch: feature@#%&()_test\"}"
        },
        "execution_time": 0.24783539772033691,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch in Read-only Directory",
        "purpose": "测试工具在只读目录中创建分支的行为",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir",
          "branch_name": "new-feature"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.0035130977630615234,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Null Repository Path",
        "purpose": "验证工具在参数为null时的错误处理机制",
        "args": {
          "repository_path": null,
          "branch_name": "new-feature"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: 1 validation error for git_create_branchArguments\nrepository_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.004000663757324219,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Null Branch Name",
        "purpose": "验证工具在分支名称参数为null时的错误处理机制",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "branch_name": null
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: 1 validation error for git_create_branchArguments\nbranch_name\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.006520271301269531,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch in File Instead of Directory",
        "purpose": "测试工具在试图将文件作为目录创建分支时的行为",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg",
          "branch_name": "new-feature"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.jpg\"}"
        },
        "execution_time": 0.005501985549926758,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Long Branch Name",
        "purpose": "验证工具是否能够处理超长分支名称",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "branch_name": "very_long_branch_name_that_still_works_for_creating_a_new_branch_1234567890"
        },
        "response": {
          "result": "{\"message\": \"Created new branch: very_long_branch_name_that_still_works_for_creating_a_new_branch_1234567890\"}"
        },
        "execution_time": 0.2625114917755127,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch with Chinese Branch Name",
        "purpose": "测试工具对中文命名分支的支持情况",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\输出",
          "branch_name": "中文特性分支"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\\\u8f93\\u51fa\"}"
        },
        "execution_time": 0.01252293586730957,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch in Unicode Path Repository",
        "purpose": "验证工具是否支持在Unicode格式的路径中创建分支",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\智能软件工.pptx",
          "branch_name": "unicode-branch"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5.pptx\"}"
        },
        "execution_time": 0.007527351379394531,
        "is_functional_test": true
      }
    ],
    "git_checkout": [
      {
        "case_name": "Switch to Existing Branch in Initialized Repository",
        "purpose": "验证工具能够在已初始化的Git仓库中成功切换到存在的分支",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "branch_name": "master"
        },
        "response": {
          "result": "{\"message\": \"Switched to branch: master\"}"
        },
        "execution_time": 0.13814640045166016,
        "is_functional_test": true
      },
      {
        "case_name": "Switch to Nonexistent Branch",
        "purpose": "测试工具在尝试切换到不存在的分支时是否能正确返回错误信息",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "branch_name": "nonexistent_branch"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(1)\\n  cmdline: git checkout nonexistent_branch\\n  stderr: 'error: pathspec 'nonexistent_branch' did not match any file(s) known to git'\"}"
        },
        "execution_time": 0.1400012969970703,
        "is_functional_test": false
      },
      {
        "case_name": "Switch with Empty Repository Path",
        "purpose": "测试当提供空字符串作为仓库路径时的错误处理",
        "args": {
          "repository_path": "",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(1)\\n  cmdline: git checkout main\\n  stderr: 'error: pathspec 'main' did not match any file(s) known to git'\"}"
        },
        "execution_time": 0.1441969871520996,
        "is_functional_test": false
      },
      {
        "case_name": "Switch in Nonexistent Directory",
        "purpose": "验证工具在尝试在不存在的目录中执行分支切换时的行为",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\nonexistent_dir\"}"
        },
        "execution_time": 0.006005764007568359,
        "is_functional_test": false
      },
      {
        "case_name": "Switch in Read-only Directory",
        "purpose": "测试工具在只读目录中执行分支切换的行为",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.0075147151947021484,
        "is_functional_test": false
      },
      {
        "case_name": "Switch with Special Characters in Branch Name",
        "purpose": "验证工具能否处理包含特殊字符的分支名称",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "branch_name": "feature@#%&()_test"
        },
        "response": {
          "result": "{\"message\": \"Switched to branch: feature@#%&()_test\"}"
        },
        "execution_time": 0.19176292419433594,
        "is_functional_test": true
      },
      {
        "case_name": "Switch in Root Directory",
        "purpose": "测试在根目录下执行分支切换的行为，以检查边界条件",
        "args": {
          "repository_path": "D:\\",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git checkout main\\n  stderr: 'fatal: detected dubious ownership in repository at 'D:/'\\n'D:/' is owned by:\\n\\tNT AUTHORITY/SYSTEM (S-1-5-18)\\nbut the current user is:\\n\\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\\nTo add an exception for this directory, call:\\n\\n\\tgit config --global --add safe.directory D:/'\"}"
        },
        "execution_time": 0.21349692344665527,
        "is_functional_test": false
      },
      {
        "case_name": "Switch with Long Branch Name",
        "purpose": "验证工具是否能够处理超长分支名称",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "branch_name": "very_long_branch_name_that_still_works_for_creating_a_new_branch_1234567890"
        },
        "response": {
          "result": "{\"message\": \"Switched to branch: very_long_branch_name_that_still_works_for_creating_a_new_branch_1234567890\"}"
        },
        "execution_time": 0.19472408294677734,
        "is_functional_test": true
      },
      {
        "case_name": "Switch in Chinese Named Directory",
        "purpose": "测试工具对中文命名目录的支持情况",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\输出\\中文git初始化测试",
          "branch_name": "master"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(1)\\n  cmdline: git checkout master\\n  stderr: 'error: pathspec 'master' did not match any file(s) known to git'\"}"
        },
        "execution_time": 0.1545884609222412,
        "is_functional_test": true
      },
      {
        "case_name": "Switch with Null Parameter",
        "purpose": "验证工具在参数为null时的错误处理机制",
        "args": {
          "repository_path": null,
          "branch_name": "main"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: 1 validation error for git_checkoutArguments\nrepository_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      },
      {
        "case_name": "Switch in File Instead of Directory",
        "purpose": "测试工具在试图将文件作为目录进行分支切换时的行为",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.jpg\"}"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": false
      },
      {
        "case_name": "Switch with Unicode Path and Branch",
        "purpose": "验证工具是否支持Unicode格式的路径和分支名",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\智能软件工.pptx",
          "branch_name": "新特性开发"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5.pptx\"}"
        },
        "execution_time": 0.004101276397705078,
        "is_functional_test": true
      }
    ],
    "git_show": [
      {
        "case_name": "Show Commit Details Using Default HEAD",
        "purpose": "验证工具在未指定commit_hash时是否能正确显示HEAD提交的详细信息",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: 1 validation error for git_showArguments\ncommit_hash\n  Field required [type=missing, input_value={'repository_path': 'D:\\\\...tem\\\\testFiles\\\\output'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.0062732696533203125,
        "is_functional_test": true
      },
      {
        "case_name": "Show Commit Details for Specific Hash",
        "purpose": "验证工具能否根据提供的commit_hash正确展示指定提交的详细信息",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "commit_hash": "abc123"
        },
        "response": {
          "result": "{\"error\": \"Ref 'abc123' did not resolve to an object\"}"
        },
        "execution_time": 0.17519187927246094,
        "is_functional_test": true
      },
      {
        "case_name": "Show Commit in Chinese Named Repository",
        "purpose": "测试工具是否支持中文命名仓库中的提交信息展示",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\输出\\中文git初始化测试",
          "commit_hash": "abc123"
        },
        "response": {
          "result": "{\"error\": \"Ref 'abc123' did not resolve to an object\"}"
        },
        "execution_time": 0.2777833938598633,
        "is_functional_test": true
      },
      {
        "case_name": "Show Commit with Special Characters in Path",
        "purpose": "验证工具能否处理路径中包含特殊字符的提交信息请求",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output\\file@#%&()_screenshot.png",
          "commit_hash": "abc123"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output\\\\file@#%&()_screenshot.png\"}"
        },
        "execution_time": 0.011934518814086914,
        "is_functional_test": true
      },
      {
        "case_name": "Show Commit in Read-only Directory",
        "purpose": "测试工具在只读目录中获取提交信息的行为",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir",
          "commit_hash": "abc123"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.00903940200805664,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit with Invalid Commit Hash",
        "purpose": "验证工具在提供无效commit_hash时是否能正确返回错误信息",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output",
          "commit_hash": "invalidhash123"
        },
        "response": {
          "result": "{\"error\": \"Ref 'invalidhash123' did not resolve to an object\"}"
        },
        "execution_time": 0.0070018768310546875,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit in Nonexistent Repository",
        "purpose": "验证工具在尝试访问不存在的仓库时是否能优雅地处理错误",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_repo",
          "commit_hash": "abc123"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\nonexistent_repo\"}"
        },
        "execution_time": 0.006945133209228516,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit with Null Parameters",
        "purpose": "测试工具在参数为null时的错误处理机制",
        "args": {
          "repository_path": null,
          "commit_hash": null
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: 2 validation errors for git_showArguments\nrepository_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type\ncommit_hash\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.006520509719848633,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 139
}