{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "gemini-2.5-pro-mcp_mongodb_database_manager",
  "server_path": "workspace/pipeline-output-servers/gemini-2.5-pro/mcp_mongodb_database_manager/refined/server.py",
  "timestamp": "2025-07-11T21:06:39.080564",
  "tools": [
    {
      "name": "mcp_list_databases",
      "description": "\n    Lists the names of all available databases on the MongoDB server.\n\n    Returns:\n        A JSON string representing a list of database names.\n        Example: '[\"admin\", \"config\", \"local\", \"mydatabase\"]'\n    ",
      "args_schema": {
        "properties": {},
        "title": "mcp_list_databasesArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_list_collections",
      "description": "\n    Lists the names of all collections within a specified database.\n\n    Args:\n        database_name (str): The name of the database to inspect.\n\n    Returns:\n        A JSON string representing a list of collection names.\n        Example: '[\"users\", \"products\", \"orders\"]'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          }
        },
        "required": [
          "database_name"
        ],
        "title": "mcp_list_collectionsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_insert_document",
      "description": "\n    Inserts a new document into a specified collection.\n\n    Args:\n        database_name (str): The name of the target database.\n        collection_name (str): The name of the target collection.\n        document (dict): The document to be inserted.\n\n    Returns:\n        A JSON string containing the string representation of the newly inserted document's _id.\n        Example: '{\"inserted_id\": \"64c9a3e6e7e4a4c4de54d7e1\"}'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "document": {
            "title": "Document",
            "type": "object"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "document"
        ],
        "title": "mcp_insert_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_find_documents",
      "description": "\n    Finds documents matching a specific query within a collection.\n\n    Args:\n        database_name (str): The name of the database to query.\n        collection_name (str): The name of the collection to query.\n        query (dict): The MongoDB query filter. Use {} to match all documents.\n        projection (dict, optional): The projection specification. Defaults to None.\n        limit (int, optional): The maximum number of documents to return. Defaults to 100.\n\n    Returns:\n        A JSON string representing a list of documents that match the query.\n        Example: '[{\"_id\": \"64c9a3e6e7e4a4c4de54d7e1\", \"name\": \"John Doe\"}]'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "title": "Query",
            "type": "object"
          },
          "projection": {
            "default": null,
            "title": "Projection",
            "type": "object"
          },
          "limit": {
            "default": 100,
            "title": "Limit",
            "type": "integer"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "query"
        ],
        "title": "mcp_find_documentsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_update_document",
      "description": "\n    Updates one or more documents that match a specified filter.\n\n    Args:\n        database_name (str): The name of the database for the update.\n        collection_name (str): The name of the collection for the update.\n        query (dict): The filter to select the document(s) to update.\n        update (dict): The update operations to be applied (e.g., using '$set').\n        update_many (bool, optional): If True, updates all matching documents. Defaults to False.\n\n    Returns:\n        A JSON string with the count of matched and modified documents.\n        Example: '{\"matched_count\": 1, \"modified_count\": 1}'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "title": "Query",
            "type": "object"
          },
          "update": {
            "title": "Update",
            "type": "object"
          },
          "update_many": {
            "default": false,
            "title": "Update Many",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "query",
          "update"
        ],
        "title": "mcp_update_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_delete_document",
      "description": "\n    Deletes one or more documents that match a specified filter.\n\n    Args:\n        database_name (str): The name of the database from which to delete.\n        collection_name (str): The name of the collection from which to delete.\n        query (dict): The filter to select the document(s) for deletion.\n        delete_many (bool, optional): If True, deletes all matching documents. Defaults to False.\n\n    Returns:\n        A JSON string containing the number of documents deleted.\n        Example: '{\"deleted_count\": 1}'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "title": "Query",
            "type": "object"
          },
          "delete_many": {
            "default": false,
            "title": "Delete Many",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "query"
        ],
        "title": "mcp_delete_documentArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "mcp_list_databases": [
      {
        "case_name": "List All Databases Successfully",
        "purpose": "验证工具能够正确列出 MongoDB 中的所有数据库名称（正常功能）。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]"
        },
        "execution_time": 0.00751185417175293,
        "is_functional_test": true
      },
      {
        "case_name": "Verify Default Database Presence",
        "purpose": "确认默认数据库如 admin、local 是否出现在返回的数据库列表中。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]"
        },
        "execution_time": 0.004998207092285156,
        "is_functional_test": true
      },
      {
        "case_name": "Check Empty Database List",
        "purpose": "在没有创建用户数据库的情况下，验证是否只返回系统数据库。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]"
        },
        "execution_time": 0.0057413578033447266,
        "is_functional_test": true
      },
      {
        "case_name": "Test JSON Format of Response",
        "purpose": "确保返回结果为标准 JSON 格式字符串，并且是字符串类型的数组。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]"
        },
        "execution_time": 0.0064961910247802734,
        "is_functional_test": true
      },
      {
        "case_name": "Test With No Connection to MongoDB",
        "purpose": "验证当无法连接到 MongoDB 服务时，工具是否能优雅处理错误。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]"
        },
        "execution_time": 0.007009983062744141,
        "is_functional_test": false
      },
      {
        "case_name": "Unauthorized Access Attempt",
        "purpose": "测试无权限访问 MongoDB 服务器时的行为，验证是否拒绝非法访问。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]"
        },
        "execution_time": 0.0040051937103271484,
        "is_functional_test": false
      },
      {
        "case_name": "MongoDB Server Down Handling",
        "purpose": "验证当 MongoDB 服务未启动时，工具是否返回有意义的错误信息。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]"
        },
        "execution_time": 0.005003452301025391,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Injection Attempt",
        "purpose": "尝试注入恶意参数（虽然该工具无参数），防止未来扩展中的漏洞风险。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]"
        },
        "execution_time": 0.008019208908081055,
        "is_functional_test": false
      },
      {
        "case_name": "Test with Long Path File Reference (Non-Applicable)",
        "purpose": "验证工具是否忽略与文件路径相关的潜在干扰（非功能性相关，仅边界测试）。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]"
        },
        "execution_time": 0.004057407379150391,
        "is_functional_test": false
      },
      {
        "case_name": "Test Special Character in DB Name (If Exists)",
        "purpose": "如果存在包含特殊字符的数据库名，验证是否能被正确识别并返回。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]"
        },
        "execution_time": 0.0050051212310791016,
        "is_functional_test": true
      },
      {
        "case_name": "Test Unicode Characters in DB Names",
        "purpose": "如果存在使用中文或其他 Unicode 字符命名的数据库，验证是否能正确返回。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]"
        },
        "execution_time": 0.005510091781616211,
        "is_functional_test": true
      },
      {
        "case_name": "Test Maximum Number of Databases",
        "purpose": "模拟存在大量数据库的情况，验证工具是否仍能正确返回所有数据库名。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\"]"
        },
        "execution_time": 0.002999544143676758,
        "is_functional_test": true
      }
    ],
    "mcp_list_collections": [
      {
        "case_name": "List Collections Successfully in Test Database",
        "purpose": "验证工具能够正确列出指定数据库中的所有集合名称（正常功能）。",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "[\"a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\", \"new_collection\", \"test_collection\", \"invalid/collection*name\", \"user_profiles\", \"long_key_collection\", \"large_data\", \"special_chars_collection\", \"binary_data_collection\", \"nonexistent_collection\", \"a_very_long_collection_name_that_exceeds_normal_limits_and_might_cause_issues\", \"users\"]"
        },
        "execution_time": 0.0050182342529296875,
        "is_functional_test": true
      },
      {
        "case_name": "Verify Empty Collection List in New Database",
        "purpose": "验证在没有创建集合的新数据库中，工具是否返回空数组。",
        "args": {
          "database_name": "db_empty"
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.0070188045501708984,
        "is_functional_test": true
      },
      {
        "case_name": "Test JSON Format of Response",
        "purpose": "确保返回结果为标准 JSON 格式字符串，并且是字符串类型的数组。",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "[\"a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\", \"new_collection\", \"test_collection\", \"invalid/collection*name\", \"user_profiles\", \"long_key_collection\", \"large_data\", \"special_chars_collection\", \"binary_data_collection\", \"nonexistent_collection\", \"a_very_long_collection_name_that_exceeds_normal_limits_and_might_cause_issues\", \"users\"]"
        },
        "execution_time": 0.004511833190917969,
        "is_functional_test": true
      },
      {
        "case_name": "Check Special Character in Collection Name",
        "purpose": "如果存在包含特殊字符的集合名，验证是否能被正确识别并返回。",
        "args": {
          "database_name": "db@#_测试"
        },
        "response": {
          "result": "[\"test_collection\"]"
        },
        "execution_time": 0.00600743293762207,
        "is_functional_test": true
      },
      {
        "case_name": "Test Unicode Characters in Collection Names",
        "purpose": "如果存在使用中文或其他 Unicode 字符命名的集合，验证是否能正确返回。",
        "args": {
          "database_name": "mcp-test"
        },
        "response": {
          "result": "[\"users\", \"test\"]"
        },
        "execution_time": 0.004956722259521484,
        "is_functional_test": true
      },
      {
        "case_name": "Test Maximum Number of Collections",
        "purpose": "模拟存在大量集合的情况，验证工具是否仍能正确返回所有集合名。",
        "args": {
          "database_name": "large_db"
        },
        "response": {
          "result": "[\"large_collection\"]"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": true
      },
      {
        "case_name": "Unauthorized Access to Database",
        "purpose": "测试无权限访问特定数据库时的行为，验证是否拒绝非法访问。",
        "args": {
          "database_name": "admin"
        },
        "response": {
          "result": "[\"system.version\", \"system_logs\"]"
        },
        "execution_time": 0.003513336181640625,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Injection Attempt via DB Name",
        "purpose": "尝试通过数据库名注入恶意内容，防止未来扩展中的漏洞风险。",
        "args": {
          "database_name": "test_db'; DROP DATABASE test_db;--"
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_list_collections: An unexpected error occurred while listing collections: database names cannot contain the character ' '"
        },
        "execution_time": 0.0030002593994140625,
        "is_functional_test": false
      },
      {
        "case_name": "Test With Invalid Database Name",
        "purpose": "验证当传入无效或不存在的数据库名时，工具是否能优雅处理错误。",
        "args": {
          "database_name": "invalid_database"
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.006536006927490234,
        "is_functional_test": false
      },
      {
        "case_name": "Test With No Connection to MongoDB",
        "purpose": "验证当无法连接到 MongoDB 服务时，工具是否能优雅处理错误。",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "[\"a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\", \"new_collection\", \"test_collection\", \"invalid/collection*name\", \"user_profiles\", \"long_key_collection\", \"large_data\", \"special_chars_collection\", \"binary_data_collection\", \"nonexistent_collection\", \"a_very_long_collection_name_that_exceeds_normal_limits_and_might_cause_issues\", \"users\"]"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      },
      {
        "case_name": "MongoDB Server Down Handling",
        "purpose": "验证当 MongoDB 服务未启动时，工具是否返回有意义的错误信息。",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "[\"a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\", \"new_collection\", \"test_collection\", \"invalid/collection*name\", \"user_profiles\", \"long_key_collection\", \"large_data\", \"special_chars_collection\", \"binary_data_collection\", \"nonexistent_collection\", \"a_very_long_collection_name_that_exceeds_normal_limits_and_might_cause_issues\", \"users\"]"
        },
        "execution_time": 0.003518342971801758,
        "is_functional_test": false
      },
      {
        "case_name": "Test with Long Path File Reference (Non-Applicable)",
        "purpose": "验证工具是否忽略与文件路径相关的潜在干扰（非功能性相关，仅边界测试）。",
        "args": {
          "database_name": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\deep\\nested\\path\\long_path_test.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_list_collections: An unexpected error occurred while listing collections: database names cannot contain the character '.'"
        },
        "execution_time": 0.005997419357299805,
        "is_functional_test": false
      }
    ],
    "mcp_insert_document": [
      {
        "case_name": "Insert Document Successfully",
        "purpose": "验证工具能够成功将文档插入指定数据库和集合中（正常功能）。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "document": {
            "name": "John Doe",
            "age": 30,
            "email": "john.doe@example.com"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"68710cc7ea7bb66ae3410459\"}"
        },
        "execution_time": 0.009505748748779297,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document with Special Characters in DB Name",
        "purpose": "验证包含特殊字符的数据库名是否能正确处理并插入文档。",
        "args": {
          "database_name": "db@#_测试",
          "collection_name": "test_collection",
          "document": {
            "key": "value"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"68710cc7ea7bb66ae341045a\"}"
        },
        "execution_time": 0.009507894515991211,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document with Unicode Collection Name",
        "purpose": "验证使用 Unicode 字符命名的集合是否能正确插入文档。",
        "args": {
          "database_name": "mcp-test",
          "collection_name": "用户信息",
          "document": {
            "用户名": "张三",
            "年龄": 28
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"68710cc7ea7bb66ae341045b\"}"
        },
        "execution_time": 0.022012710571289062,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Empty Document",
        "purpose": "验证空文档是否能被正确插入到指定集合中。",
        "args": {
          "database_name": "test_db",
          "collection_name": "empty_docs",
          "document": {}
        },
        "response": {
          "result": "{\"inserted_id\": \"68710cc7ea7bb66ae341045c\"}"
        },
        "execution_time": 0.044764041900634766,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document into Nonexistent Collection",
        "purpose": "验证向不存在的集合中插入文档时，是否自动创建集合并插入文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "document": {
            "data": "new collection should be created"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"68710cc7ea7bb66ae341045d\"}"
        },
        "execution_time": 0.011024951934814453,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document with Invalid Database Name",
        "purpose": "验证当传入非法数据库名时，工具是否能优雅处理错误。",
        "args": {
          "database_name": "invalid/db*name",
          "collection_name": "test_collection",
          "document": {
            "key": "value"
          }
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_insert_document: An unexpected error occurred during document insertion: database names cannot contain the character '/'"
        },
        "execution_time": 0.016033172607421875,
        "is_functional_test": false
      },
      {
        "case_name": "Insert Document with Unauthorized Access",
        "purpose": "验证无权限访问目标数据库时，是否拒绝插入操作。",
        "args": {
          "database_name": "admin",
          "collection_name": "system_logs",
          "document": {
            "log": "security test"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"68710cc7ea7bb66ae341045e\"}"
        },
        "execution_time": 0.02611517906188965,
        "is_functional_test": false
      },
      {
        "case_name": "Insert Document When MongoDB is Down",
        "purpose": "验证当 MongoDB 服务未启动时，是否返回有意义的错误信息。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "document": {
            "key": "value"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"68710cc7ea7bb66ae341045f\"}"
        },
        "execution_time": 0.022022724151611328,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Injection Attempt via Collection Name",
        "purpose": "尝试通过集合名注入恶意内容，防止未来扩展中的漏洞风险。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection'; DROP COLLECTION test_collection;--",
          "document": {
            "key": "injection attempt"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"68710cc7ea7bb66ae3410460\"}"
        },
        "execution_time": 0.03630566596984863,
        "is_functional_test": false
      },
      {
        "case_name": "Insert Document Using Long Collection Name",
        "purpose": "验证插入到具有超长名称的集合中是否仍能正常工作。",
        "args": {
          "database_name": "test_db",
          "collection_name": "a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it",
          "document": {
            "key": "value"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"68710cc7ea7bb66ae3410461\"}"
        },
        "execution_time": 0.02901768684387207,
        "is_functional_test": true
      }
    ],
    "mcp_find_documents": [
      {
        "case_name": "Basic Document Search with Empty Query",
        "purpose": "验证使用空查询时能否正确返回集合中的文档（默认参数）。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {}
        },
        "response": {
          "result": "[{\"_id\": \"68710cc7ea7bb66ae3410459\", \"name\": \"John Doe\", \"age\": 30, \"email\": \"john.doe@example.com\"}, {\"_id\": \"68710cc7ea7bb66ae341045f\", \"key\": \"value\"}]"
        },
        "execution_time": 0.010520696640014648,
        "is_functional_test": true
      },
      {
        "case_name": "Search Document by Exact Field Match",
        "purpose": "验证通过精确字段匹配能正确检索到文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "user_profiles",
          "query": {
            "name": "John Doe"
          }
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.02565789222717285,
        "is_functional_test": true
      },
      {
        "case_name": "Use Projection to Filter Returned Fields",
        "purpose": "验证投影参数是否能限制返回的字段。",
        "args": {
          "database_name": "test_db",
          "collection_name": "user_profiles",
          "query": {
            "name": "Jane Smith"
          },
          "projection": {
            "name": 1,
            "_id": 0
          }
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.0227510929107666,
        "is_functional_test": true
      },
      {
        "case_name": "Limit Number of Results",
        "purpose": "验证限制返回结果数量的功能是否有效。",
        "args": {
          "database_name": "test_db",
          "collection_name": "large_data",
          "query": {},
          "limit": 5
        },
        "response": {
          "result": "[{\"_id\": \"6863baf659bb2ac32446e719\", \"data\": \"A very long string that simulates a large document payload for testing purposes. This should be accepted by the tool.\"}]"
        },
        "execution_time": 0.03823971748352051,
        "is_functional_test": true
      },
      {
        "case_name": "Query with No Matching Documents",
        "purpose": "验证当查询条件无匹配时，工具是否返回空数组。",
        "args": {
          "database_name": "test_db",
          "collection_name": "user_profiles",
          "query": {
            "name": "Nonexistent User"
          }
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.012511968612670898,
        "is_functional_test": true
      },
      {
        "case_name": "Test Unicode Characters in Query",
        "purpose": "验证包含中文等Unicode字符的查询是否能正确执行。",
        "args": {
          "database_name": "mcp-test",
          "collection_name": "test",
          "query": {
            "username": "张三"
          }
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.027562856674194336,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt Query Injection via Query",
        "purpose": "测试是否可以注入恶意查询内容以尝试非法访问或破坏数据检索。",
        "args": {
          "database_name": "test_db",
          "collection_name": "user_profiles",
          "query": {
            "$where": "function() { return true; }"
          }
        },
        "response": {
          "result": "[{\"_id\": \"686270e9bbc02d17137de7e7\", \"username\": \"bob\", \"profile\": {\"email\": \"bob@example.com\", \"roles\": [\"user\", \"admin\"], \"preferences\": {\"theme\": \"dark\", \"notifications\": false}}, \"email\": \"new_email@example.com\", \"login_count\": 1}, {\"_id\": \"6862805e2f114bff869d582d\", \"username\": \"new_user\", \"age\": 25, \"email\": \"new.user@example.com\"}, {\"_id\": \"686283db7aa9857b67610a70\", \"username\": \"bob\", \"email\": \"bob@example.com\", \"preferences\": {\"theme\": \"dark\", \"notifications\": true}}]"
        },
        "execution_time": 0.09424090385437012,
        "is_functional_test": false
      },
      {
        "case_name": "Unauthorized Access to Database",
        "purpose": "测试无权限访问特定数据库时的行为，验证是否拒绝非法访问。",
        "args": {
          "database_name": "admin",
          "collection_name": "system.version",
          "query": {}
        },
        "response": {
          "result": "[{\"_id\": \"featureCompatibilityVersion\", \"version\": \"8.0\"}, {\"_id\": \"68626d55029e5cd2f7c9b28f\", \"key\": \"test_key\", \"value\": \"test_value\"}, {\"_id\": \"6863b714e63a60df7d661771\", \"test\": \"unauthorized\"}]"
        },
        "execution_time": 0.026988506317138672,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Database Name Handling",
        "purpose": "验证传入无效数据库名称时是否能优雅处理错误。",
        "args": {
          "database_name": "invalid/db*name",
          "collection_name": "test_collection",
          "query": {}
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_find_documents: An unexpected error occurred while finding documents: database names cannot contain the character '/'"
        },
        "execution_time": 0.028364896774291992,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Collection Name Handling",
        "purpose": "验证传入无效集合名称时是否能优雅处理错误。",
        "args": {
          "database_name": "test_db",
          "collection_name": "invalid/collection*name",
          "query": {}
        },
        "response": {
          "result": "[{\"_id\": \"68626d54029e5cd2f7c9b28d\", \"title\": \"\\u6d4b\\u8bd5\\u6587\\u6863\"}]"
        },
        "execution_time": 0.025960206985473633,
        "is_functional_test": false
      },
      {
        "case_name": "No Connection to MongoDB Server",
        "purpose": "验证在无法连接MongoDB服务时是否能正确返回错误信息。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {}
        },
        "response": {
          "result": "[{\"_id\": \"68710cc7ea7bb66ae3410459\", \"name\": \"John Doe\", \"age\": 30, \"email\": \"john.doe@example.com\"}, {\"_id\": \"68710cc7ea7bb66ae341045f\", \"key\": \"value\"}]"
        },
        "execution_time": 0.027118444442749023,
        "is_functional_test": false
      },
      {
        "case_name": "Maximum Limit Boundary Test",
        "purpose": "验证极限值（如最大允许的 limit 值）是否被正确处理。",
        "args": {
          "database_name": "test_db",
          "collection_name": "large_data",
          "query": {},
          "limit": 1000000
        },
        "response": {
          "result": "[{\"_id\": \"6863baf659bb2ac32446e719\", \"data\": \"A very long string that simulates a large document payload for testing purposes. This should be accepted by the tool.\"}]"
        },
        "execution_time": 0.024547338485717773,
        "is_functional_test": true
      }
    ],
    "mcp_update_document": [
      {
        "case_name": "Update Single Document Successfully",
        "purpose": "验证工具能够正确更新匹配查询条件的单个文档（默认update_many=False）。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "username": "john_doe"
          },
          "update": {
            "$set": {
              "email": "john_new@example.com"
            }
          }
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.012509346008300781,
        "is_functional_test": true
      },
      {
        "case_name": "Update Multiple Documents Successfully",
        "purpose": "验证当设置update_many=True时，工具能够正确更新所有匹配查询条件的多个文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "role": "user"
          },
          "update": {
            "$set": {
              "role": "member"
            }
          },
          "update_many": true
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.01351165771484375,
        "is_functional_test": true
      },
      {
        "case_name": "No Matching Documents Updated",
        "purpose": "验证当没有文档匹配查询条件时，工具返回0匹配和修改计数。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "username": "nonexistent_user"
          },
          "update": {
            "$set": {
              "status": "inactive"
            }
          }
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.014311075210571289,
        "is_functional_test": true
      },
      {
        "case_name": "Partial Update Using $inc Operator",
        "purpose": "验证使用MongoDB操作符如$inc进行部分更新的功能是否正常。",
        "args": {
          "database_name": "test_db",
          "collection_name": "orders",
          "query": {
            "order_id": "12345"
          },
          "update": {
            "$inc": {
              "quantity": 1
            }
          }
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.010514259338378906,
        "is_functional_test": true
      },
      {
        "case_name": "Update With Special Characters in Field Names",
        "purpose": "验证字段名包含特殊字符时的更新功能是否正常。",
        "args": {
          "database_name": "db@#_测试",
          "collection_name": "test_collection",
          "query": {
            "field@#_测试": "old_value"
          },
          "update": {
            "$set": {
              "field@#_测试": "new_value"
            }
          }
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.017582416534423828,
        "is_functional_test": true
      },
      {
        "case_name": "Unicode Value Update Test",
        "purpose": "验证可以成功更新包含中文等Unicode值的文档字段。",
        "args": {
          "database_name": "mcp-test",
          "collection_name": "users",
          "query": {
            "name": "张三"
          },
          "update": {
            "$set": {
              "name": "李四"
            }
          }
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.029540538787841797,
        "is_functional_test": true
      },
      {
        "case_name": "Unauthorized Access to Database During Update",
        "purpose": "验证在无权限访问指定数据库时，工具能否拒绝非法更新请求。",
        "args": {
          "database_name": "admin",
          "collection_name": "system.version",
          "query": {},
          "update": {
            "$set": {
              "version": "2.0"
            }
          }
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_update_document: An unexpected error occurred during document update: Invalid featureCompatibilityVersion document in admin.system.version: { _id: \"featureCompatibilityVersion\", version: \"2.0\" }. See https://docs.mongodb.com/master/release-notes/7.0-compatibility/#feature-compatibility. :: caused by :: Invalid feature compatibility version value '2.0'; expected '7.0' or '7.3' or '8.0'. See https://docs.mongodb.com/master/release-notes/7.0-compatibility/#feature-compatibility., full error: {'index': 0, 'code': 4926900, 'errmsg': 'Invalid featureCompatibilityVersion document in admin.system.version: { _id: \"featureCompatibilityVersion\", version: \"2.0\" }. See https://docs.mongodb.com/master/release-notes/7.0-compatibility/#feature-compatibility. :: caused by :: Invalid feature compatibility version value \\'2.0\\'; expected \\'7.0\\' or \\'7.3\\' or \\'8.0\\'. See https://docs.mongodb.com/master/release-notes/7.0-compatibility/#feature-compatibility.'}"
        },
        "execution_time": 0.015024662017822266,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Injection Attempt via Query or Update",
        "purpose": "尝试通过构造恶意查询或更新内容来执行注入攻击，验证工具的安全性。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "$where": "function() { return true; }"
          },
          "update": {
            "$set": {
              "isAdmin": true
            },
            "$eval": "malicious_code();"
          }
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_update_document: An unexpected error occurred during document update: Unknown modifier: $eval. Expected a valid update modifier or pipeline-style update specified as an array, full error: {'index': 0, 'code': 9, 'errmsg': 'Unknown modifier: $eval. Expected a valid update modifier or pipeline-style update specified as an array'}"
        },
        "execution_time": 0.014541387557983398,
        "is_functional_test": false
      },
      {
        "case_name": "Update with Invalid Database Name",
        "purpose": "验证当提供无效数据库名称时，工具能否优雅处理错误。",
        "args": {
          "database_name": "invalid/db*name",
          "collection_name": "users",
          "query": {
            "username": "john_doe"
          },
          "update": {
            "$set": {
              "email": "john_new@example.com"
            }
          }
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_update_document: An unexpected error occurred during document update: database names cannot contain the character '/'"
        },
        "execution_time": 0.01713109016418457,
        "is_functional_test": false
      },
      {
        "case_name": "Update with Non-Existent Collection",
        "purpose": "验证对不存在的集合执行更新操作时的行为是否符合预期。",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "query": {
            "key": "value"
          },
          "update": {
            "$set": {
              "key": "updated_value"
            }
          }
        },
        "response": {
          "result": "{\"matched_count\": 1, \"modified_count\": 1}"
        },
        "execution_time": 0.044835567474365234,
        "is_functional_test": false
      },
      {
        "case_name": "Update with Long Key and Value",
        "purpose": "验证更新包含超长键名和值的文档是否正常。",
        "args": {
          "database_name": "large_db",
          "collection_name": "large_collection",
          "query": {
            "a_very_long_key_that_may_exceed_normal_limits_and_cause_issues": "old_value"
          },
          "update": {
            "$set": {
              "a_very_long_key_that_may_exceed_normal_limits_and_cause_issues": "a_very_long_value_string_that_may_be_too_large_for_some_systems_to_handle_properly"
            }
          }
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.032541513442993164,
        "is_functional_test": true
      },
      {
        "case_name": "Update Without Connection to MongoDB",
        "purpose": "验证在无法连接到MongoDB服务时，工具是否能优雅处理错误。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "username": "john_doe"
          },
          "update": {
            "$set": {
              "email": "john_new@example.com"
            }
          }
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.021053552627563477,
        "is_functional_test": false
      }
    ],
    "mcp_delete_document": [
      {
        "case_name": "Basic Document Deletion with Single Match",
        "purpose": "验证在匹配单个文档时，工具能够正确删除该文档并返回删除计数。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {
            "name": "John Doe"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 1}"
        },
        "execution_time": 0.0045108795166015625,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Multiple Documents Matching Query",
        "purpose": "验证当 delete_many=True 时，工具能删除所有匹配的文档，并返回正确的删除数量。",
        "args": {
          "database_name": "test_db",
          "collection_name": "user_profiles",
          "query": {
            "status": "inactive"
          },
          "delete_many": true
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.016554594039916992,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Delete Without Matching Document",
        "purpose": "验证当查询不匹配任何文档时，工具返回删除数量为0。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {
            "name": "Nonexistent User"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.008121252059936523,
        "is_functional_test": true
      },
      {
        "case_name": "Delete With Default Delete Many Behavior",
        "purpose": "验证默认参数 delete_many=False 是否仅删除第一个匹配文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "role": "guest"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.016016244888305664,
        "is_functional_test": true
      },
      {
        "case_name": "Delete From Non-Existent Collection",
        "purpose": "验证尝试从不存在的集合中删除文档时，是否安全处理并返回删除计数为0。",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "query": {
            "id": 123
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.0075168609619140625,
        "is_functional_test": false
      },
      {
        "case_name": "Unauthorized Access to Database During Deletion",
        "purpose": "测试无权限访问目标数据库时，删除操作是否被拒绝并返回适当错误。",
        "args": {
          "database_name": "admin",
          "collection_name": "system_logs",
          "query": {
            "level": "error"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.015022754669189453,
        "is_functional_test": false
      },
      {
        "case_name": "Delete With Special Characters in Query",
        "purpose": "验证使用包含特殊字符的查询条件时，能否正确解析并执行删除。",
        "args": {
          "database_name": "db@#_测试",
          "collection_name": "special_chars_collection",
          "query": {
            "username": "user@domain.com"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.00798797607421875,
        "is_functional_test": true
      },
      {
        "case_name": "Delete With Unicode Characters in Query",
        "purpose": "验证使用中文或其他 Unicode 字符作为查询条件时，能否正确删除文档。",
        "args": {
          "database_name": "mcp-test",
          "collection_name": "users",
          "query": {
            "昵称": "张三"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.007500410079956055,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt Query Injection",
        "purpose": "尝试通过构造恶意查询注入攻击，验证工具是否对输入进行安全过滤或转义。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "$where": "function() { return true; }"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.013161420822143555,
        "is_functional_test": false
      },
      {
        "case_name": "Test Delete With Invalid JSON Query",
        "purpose": "验证传入格式错误的查询对象（如非字典结构）时，工具是否报错。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": "invalid_query_string"
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_delete_document: 1 validation error for mcp_delete_documentArguments\nquery\n  Input should be a valid dictionary [type=dict_type, input_value='invalid_query_string', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/dict_type"
        },
        "execution_time": 0.012519598007202148,
        "is_functional_test": false
      },
      {
        "case_name": "MongoDB Server Down Handling During Deletion",
        "purpose": "验证 MongoDB 服务未运行时，工具是否返回有意义的错误信息而非崩溃。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "status": "pending"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.01533365249633789,
        "is_functional_test": false
      },
      {
        "case_name": "Delete From Empty Collection",
        "purpose": "验证从空集合中删除文档时，工具是否安全处理并返回 deleted_count: 0。",
        "args": {
          "database_name": "db_empty",
          "collection_name": "empty_collection",
          "query": {}
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.01611614227294922,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 70
}