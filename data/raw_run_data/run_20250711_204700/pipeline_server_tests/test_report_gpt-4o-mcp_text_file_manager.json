{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "gpt-4o-mcp_text_file_manager",
  "server_path": "workspace/pipeline-output-servers/gpt-4o/mcp_text_file_manager/refined/server.py",
  "timestamp": "2025-07-11T21:01:04.487748",
  "tools": [
    {
      "name": "get_text_file_contents",
      "description": "\n    Reads the content of a text file within a specified line range and returns the file's hash for concurrency control.\n\n    Args:\n        file_path (str): Path to the text file.\n        start_line (int, optional): The starting line number (inclusive). Defaults to None.\n        end_line (int, optional): The ending line number (inclusive). Defaults to None.\n\n    Returns:\n        str: JSON string containing 'content' and 'hash'.\n\n    Example:\n        get_text_file_contents(\"example.txt\", start_line=1, end_line=5)\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "start_line": {
            "default": null,
            "title": "Start Line",
            "type": "integer"
          },
          "end_line": {
            "default": null,
            "title": "End Line",
            "type": "integer"
          }
        },
        "required": [
          "file_path"
        ],
        "title": "get_text_file_contentsArguments",
        "type": "object"
      }
    },
    {
      "name": "create_text_file",
      "description": "\n    Creates a new text file and writes the provided content to it.\n\n    Args:\n        file_path (str): Path where the new file should be created.\n        content (str): The content to write to the new file.\n\n    Returns:\n        str: Success message.\n\n    Example:\n        create_text_file(\"new_file.txt\", \"Hello, World!\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "content"
        ],
        "title": "create_text_fileArguments",
        "type": "object"
      }
    },
    {
      "name": "append_text_file_contents",
      "description": "\n    Appends content to an existing text file.\n\n    Args:\n        file_path (str): Path to the existing text file.\n        content (str): The content to append to the file.\n\n    Returns:\n        str: Success message.\n\n    Example:\n        append_text_file_contents(\"example.txt\", \"Additional text.\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "content"
        ],
        "title": "append_text_file_contentsArguments",
        "type": "object"
      }
    },
    {
      "name": "delete_text_file_contents",
      "description": "\n    Deletes content within a specified line range in a text file.\n\n    Args:\n        file_path (str): Path to the text file.\n        start_line (int): The starting line number (inclusive).\n        end_line (int): The ending line number (inclusive).\n\n    Returns:\n        str: Success message.\n\n    Example:\n        delete_text_file_contents(\"example.txt\", start_line=2, end_line=4)\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "start_line": {
            "title": "Start Line",
            "type": "integer"
          },
          "end_line": {
            "title": "End Line",
            "type": "integer"
          }
        },
        "required": [
          "file_path",
          "start_line",
          "end_line"
        ],
        "title": "delete_text_file_contentsArguments",
        "type": "object"
      }
    },
    {
      "name": "insert_text_file_contents",
      "description": "\n    Inserts content at a specified position in a text file.\n\n    Args:\n        file_path (str): Path to the text file.\n        line_number (int): The line number before which the content will be inserted.\n        content (str): The content to insert into the file.\n\n    Returns:\n        str: Success message.\n\n    Example:\n        insert_text_file_contents(\"example.txt\", line_number=3, content=\"Inserted text.\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "line_number": {
            "title": "Line Number",
            "type": "integer"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "line_number",
          "content"
        ],
        "title": "insert_text_file_contentsArguments",
        "type": "object"
      }
    },
    {
      "name": "patch_text_file_contents",
      "description": "\n    Applies precise edits to a text file based on provided changes. Validates the file hash to avoid concurrency conflicts.\n\n    Args:\n        file_path (str): Path to the text file.\n        patch_data (list of dict): A list of changes, each specifying:\n            - start_line (int): Start line for the patch.\n            - end_line (int): End line for the patch.\n            - new_content (str): New content to replace the specified range.\n        expected_hash (str): Expected SHA256 hash of the file to confirm no concurrent modifications.\n\n    Returns:\n        str: Success message if the patch is applied successfully, or error message if the hash does not match.\n\n    Example:\n        patch_text_file_contents(\n            \"example.txt\",\n            patch_data=[{\"start_line\": 2, \"end_line\": 3, \"new_content\": \"Patched content.\"}],\n            expected_hash=\"abc123\"\n        )\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "patch_data": {
            "items": {},
            "title": "Patch Data",
            "type": "array"
          },
          "expected_hash": {
            "title": "Expected Hash",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "patch_data",
          "expected_hash"
        ],
        "title": "patch_text_file_contentsArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "create_text_file": [
      {
        "case_name": "Basic Text File Creation",
        "purpose": "验证create_text_file工具可以成功创建一个文本文件并写入内容。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt",
          "content": "This is a test content for the text file."
        },
        "response": {
          "result": "{\"message\": \"File created successfully.\"}"
        },
        "execution_time": 0.007519245147705078,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Content File Creation",
        "purpose": "验证当提供空字符串作为内容时，create_text_file是否仍能正确创建文件。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content.txt",
          "content": ""
        },
        "response": {
          "result": "{\"message\": \"File created successfully.\"}"
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": true
      },
      {
        "case_name": "Unicode Content Writing",
        "purpose": "验证create_text_file能够处理包含Unicode字符的内容（如中文）。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unicode_content.txt",
          "content": "这是一段测试用的中文文本。"
        },
        "response": {
          "result": "{\"message\": \"File created successfully.\"}"
        },
        "execution_time": 0.004506587982177734,
        "is_functional_test": true
      },
      {
        "case_name": "Overwrite Existing File",
        "purpose": "验证create_text_file是否会覆盖已存在的文件，并正确写入新内容。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "content": "New content to overwrite existing file."
        },
        "response": {
          "result": "{\"message\": \"File created successfully.\"}"
        },
        "execution_time": 0.00750732421875,
        "is_functional_test": true
      },
      {
        "case_name": "Long File Path Handling",
        "purpose": "验证create_text_file是否能处理长路径和深层嵌套目录。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\deep\\nested\\path\\long_path_test.txt",
          "content": "Testing long file path creation."
        },
        "response": {
          "result": "{\"message\": \"File created successfully.\"}"
        },
        "execution_time": 0.004698514938354492,
        "is_functional_test": true
      },
      {
        "case_name": "File Creation with Special Characters in Name",
        "purpose": "验证create_text_file能否处理带有特殊字符的文件名。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#%&()_file.txt",
          "content": "File created with special characters in name."
        },
        "response": {
          "result": "{\"message\": \"File created successfully.\"}"
        },
        "execution_time": 0.005513429641723633,
        "is_functional_test": true
      },
      {
        "case_name": "Missing File Path Parameter",
        "purpose": "验证缺少file_path参数时工具是否能正确报错。",
        "args": {
          "content": "Content without file path should fail."
        },
        "response": {
          "error": "ToolException: Error executing tool create_text_file: 1 validation error for create_text_fileArguments\nfile_path\n  Field required [type=missing, input_value={'content': 'Content with...file path should fail.'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.0029997825622558594,
        "is_functional_test": false
      },
      {
        "case_name": "Missing Content Parameter",
        "purpose": "验证缺少content参数时工具是否能正确报错。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\missing_content.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool create_text_file: 1 validation error for create_text_fileArguments\ncontent\n  Field required [type=missing, input_value={'file_path': 'D:\\\\devWor...s\\\\missing_content.txt'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.0075244903564453125,
        "is_functional_test": false
      },
      {
        "case_name": "Write to Protected System Directory",
        "purpose": "验证尝试写入系统保护目录时工具的安全性行为。",
        "args": {
          "file_path": "C:\\Windows\\system32\\protected_test.txt",
          "content": "Attempt to write to system directory."
        },
        "response": {
          "result": "{\"error\": \"[Errno 13] Permission denied: 'C:\\\\\\\\Windows\\\\\\\\system32\\\\\\\\protected_test.txt'\"}"
        },
        "execution_time": 0.0067713260650634766,
        "is_functional_test": false
      },
      {
        "case_name": "File Creation with Zero-Length Name",
        "purpose": "验证零长度文件名是否被正确拒绝。",
        "args": {
          "file_path": "",
          "content": "Trying to create file with zero-length name."
        },
        "response": {
          "result": "{\"error\": \"[Errno 2] No such file or directory: ''\"}"
        },
        "execution_time": 0.005998849868774414,
        "is_functional_test": false
      }
    ],
    "get_text_file_contents": [
      {
        "case_name": "Basic File Content Reading",
        "purpose": "验证get_text_file_contents工具可以成功读取文本文件的基本内容。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt"
        },
        "response": {
          "result": "{\"content\": \"This is a test content for the text file.\", \"hash\": \"44200824b95bb3abac723dcbbc517612f97f9ac31a866811aec931600085d094\"}"
        },
        "execution_time": 0.018521547317504883,
        "is_functional_test": true
      },
      {
        "case_name": "Read Specific Line Range",
        "purpose": "验证get_text_file_contents能够正确读取指定起始和结束行范围内的内容。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content.txt",
          "start_line": 1,
          "end_line": 3
        },
        "response": {
          "result": "{\"content\": \"\", \"hash\": \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"}"
        },
        "execution_time": 0.005319356918334961,
        "is_functional_test": true
      },
      {
        "case_name": "Read Empty File",
        "purpose": "验证当文件为空时，get_text_file_contents是否能返回空内容且无错误。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content.txt"
        },
        "response": {
          "result": "{\"content\": \"\", \"hash\": \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"}"
        },
        "execution_time": 0.0045125484466552734,
        "is_functional_test": true
      },
      {
        "case_name": "Read Unicode Content",
        "purpose": "验证get_text_file_contents能够处理包含Unicode字符的文本文件（如中文）。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unicode_content.txt"
        },
        "response": {
          "result": "{\"content\": \"\\u8fd9\\u662f\\u4e00\\u6bb5\\u6d4b\\u8bd5\\u7528\\u7684\\u4e2d\\u6587\\u6587\\u672c\\u3002\", \"hash\": \"8a4e6c686f60986d6f0042ccbe9a3641e78f59bb85352bb549db8604029680b7\"}"
        },
        "execution_time": 0.004505634307861328,
        "is_functional_test": true
      },
      {
        "case_name": "Read with Start Line Only",
        "purpose": "验证仅提供start_line参数时，工具能否从该行开始读取到文件末尾。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "start_line": 2
        },
        "response": {
          "result": "{\"content\": \"New content to overwrite existing file.\", \"hash\": \"4d0ea35a0403a44da2f24733b269c961503c9ececf6541c7c9f344860eaf4bb4\"}"
        },
        "execution_time": 0.007537841796875,
        "is_functional_test": true
      },
      {
        "case_name": "Read with End Line Only",
        "purpose": "验证仅提供end_line参数时，工具能否从文件开头读取到指定行。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#%&()_file.txt",
          "end_line": 4
        },
        "response": {
          "result": "{\"content\": \"File created with special characters in name.\", \"hash\": \"31eee8d6fbf0cc8e74c40cf91aaae83f72077ab33a7259e888d547deb8ca8d4a\"}"
        },
        "execution_time": 0.006003379821777344,
        "is_functional_test": true
      },
      {
        "case_name": "File Not Found Error",
        "purpose": "验证当指定的文件不存在时，工具是否能正确报错。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt"
        },
        "response": {
          "result": "{\"error\": \"File does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_file.txt\"}"
        },
        "execution_time": 0.005007743835449219,
        "is_functional_test": false
      },
      {
        "case_name": "Read Binary File as Text",
        "purpose": "验证尝试读取非文本文件（如图片或PDF）时，工具是否能正确拒绝操作。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png"
        },
        "response": {
          "result": "{\"error\": \"'utf-8' codec can't decode byte 0xa6 in position 11: invalid start byte\"}"
        },
        "execution_time": 0.0030002593994140625,
        "is_functional_test": false
      },
      {
        "case_name": "Read File with Invalid Line Numbers",
        "purpose": "验证当提供的start_line大于end_line或为负数时，工具是否能正确处理错误。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt",
          "start_line": 5,
          "end_line": 2
        },
        "response": {
          "result": "{\"content\": \"\", \"hash\": \"44200824b95bb3abac723dcbbc517612f97f9ac31a866811aec931600085d094\"}"
        },
        "execution_time": 0.0040056705474853516,
        "is_functional_test": false
      },
      {
        "case_name": "Read from Protected System Directory",
        "purpose": "验证尝试从系统保护目录读取文件时，工具的安全性行为。",
        "args": {
          "file_path": "C:\\Windows\\system32\\notepad.exe"
        },
        "response": {
          "result": "{\"error\": \"'utf-8' codec can't decode byte 0x90 in position 2: invalid start byte\"}"
        },
        "execution_time": 0.0075223445892333984,
        "is_functional_test": false
      },
      {
        "case_name": "Read Very Large File",
        "purpose": "验证get_text_file_contents能否处理大文本文件的部分读取。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\deep\\nested\\path\\long_path_test.txt",
          "start_line": 1000,
          "end_line": 1010
        },
        "response": {
          "result": "{\"content\": \"\", \"hash\": \"61d5de58583dcbf25e16974603ecd03b6d89cc044c519dc9e8e854bd216bba68\"}"
        },
        "execution_time": 0.003997802734375,
        "is_functional_test": true
      },
      {
        "case_name": "Read File with Special Characters in Path",
        "purpose": "验证路径中包含特殊字符的文件是否能被正确读取。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\converted images 中文\\xue.bmp"
        },
        "response": {
          "result": "{\"error\": \"'utf-8' codec can't decode byte 0x9b in position 3: invalid start byte\"}"
        },
        "execution_time": 0.004504203796386719,
        "is_functional_test": true
      }
    ],
    "append_text_file_contents": [
      {
        "case_name": "Basic Text File Append",
        "purpose": "验证append_text_file_contents工具可以成功向现有文本文件追加内容。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt",
          "content": "Appended content for testing."
        },
        "response": {
          "result": "{\"message\": \"Content appended successfully.\"}"
        },
        "execution_time": 0.006501436233520508,
        "is_functional_test": true
      },
      {
        "case_name": "Append Empty Content to File",
        "purpose": "验证当提供空字符串作为内容时，append_text_file_contents是否仍能正确追加到文件。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content.txt",
          "content": ""
        },
        "response": {
          "result": "{\"message\": \"Content appended successfully.\"}"
        },
        "execution_time": 0.009527921676635742,
        "is_functional_test": true
      },
      {
        "case_name": "Unicode Content Appending",
        "purpose": "验证append_text_file_contents能够处理包含Unicode字符的内容（如中文）进行追加。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unicode_content.txt",
          "content": "这是要追加的中文文本。"
        },
        "response": {
          "result": "{\"message\": \"Content appended successfully.\"}"
        },
        "execution_time": 0.0050046443939208984,
        "is_functional_test": true
      },
      {
        "case_name": "Append to Nonexistent File",
        "purpose": "验证尝试向不存在的文件追加内容时，工具是否能正确报错。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt",
          "content": "Trying to append to a non-existent file."
        },
        "response": {
          "result": "{\"message\": \"Content appended successfully.\"}"
        },
        "execution_time": 0.004001617431640625,
        "is_functional_test": false
      },
      {
        "case_name": "Missing File Path Parameter",
        "purpose": "验证缺少file_path参数时工具是否能正确报错。",
        "args": {
          "content": "Content without file path should fail."
        },
        "response": {
          "error": "ToolException: Error executing tool append_text_file_contents: 1 validation error for append_text_file_contentsArguments\nfile_path\n  Field required [type=missing, input_value={'content': 'Content with...file path should fail.'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.007507801055908203,
        "is_functional_test": false
      },
      {
        "case_name": "Missing Content Parameter",
        "purpose": "验证缺少content参数时工具是否能正确报错。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool append_text_file_contents: 1 validation error for append_text_file_contentsArguments\ncontent\n  Field required [type=missing, input_value={'file_path': 'D:\\\\devWor...Files\\\\test_output.txt'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.003503084182739258,
        "is_functional_test": false
      },
      {
        "case_name": "Append to Protected System Directory",
        "purpose": "验证尝试向系统保护目录中的文件追加内容时工具的安全性行为。",
        "args": {
          "file_path": "C:\\Windows\\system32\\protected_test.txt",
          "content": "Attempt to append to system protected file."
        },
        "response": {
          "result": "{\"error\": \"[Errno 13] Permission denied: 'C:\\\\\\\\Windows\\\\\\\\system32\\\\\\\\protected_test.txt'\"}"
        },
        "execution_time": 0.003000497817993164,
        "is_functional_test": false
      },
      {
        "case_name": "Long File Path Handling",
        "purpose": "验证append_text_file_contents是否能处理长路径和深层嵌套目录下的文件追加操作。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\deep\\nested\\path\\long_path_test.txt",
          "content": "Appending to long file path."
        },
        "response": {
          "result": "{\"message\": \"Content appended successfully.\"}"
        },
        "execution_time": 0.005001544952392578,
        "is_functional_test": true
      },
      {
        "case_name": "File Append with Special Characters in Name",
        "purpose": "验证append_text_file_contents能否处理带有特殊字符的文件名进行追加。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#%&()_file.txt",
          "content": "Appending to special character file name."
        },
        "response": {
          "result": "{\"message\": \"Content appended successfully.\"}"
        },
        "execution_time": 0.005350589752197266,
        "is_functional_test": true
      },
      {
        "case_name": "Append to Read-Only File",
        "purpose": "验证尝试向只读文件追加内容时工具是否能正确拒绝。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\执行结果文本.txt",
          "content": "Trying to append to a read-only file."
        },
        "response": {
          "result": "{\"message\": \"Content appended successfully.\"}"
        },
        "execution_time": 0.0045108795166015625,
        "is_functional_test": false
      },
      {
        "case_name": "Append Binary-Like Content",
        "purpose": "验证append_text_file_contents是否能处理二进制格式的文本内容。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt",
          "content": "\\x00\\x01\\x02\\x03\\x04\\x05"
        },
        "response": {
          "result": "{\"message\": \"Content appended successfully.\"}"
        },
        "execution_time": 0.007002830505371094,
        "is_functional_test": true
      }
    ],
    "insert_text_file_contents": [
      {
        "case_name": "Basic Text Insertion",
        "purpose": "验证insert_text_file_contents工具可以在指定行前插入文本内容。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt",
          "line_number": 2,
          "content": "This is the inserted line."
        },
        "response": {
          "result": "{\"message\": \"Content inserted successfully.\"}"
        },
        "execution_time": 0.004509449005126953,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Content at Beginning",
        "purpose": "验证在文件第一行之前插入内容是否成功（line_number=1）。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content.txt",
          "line_number": 1,
          "content": "First line inserted at beginning."
        },
        "response": {
          "result": "{\"message\": \"Content inserted successfully.\"}"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Content at End of File",
        "purpose": "验证在文件末尾插入内容是否成功（line_number大于总行数）。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "line_number": 100,
          "content": "Inserted at end of file."
        },
        "response": {
          "result": "{\"error\": \"Invalid line number: 100. File has 1 lines.\"}"
        },
        "execution_time": 0.005522727966308594,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Unicode Content",
        "purpose": "验证可以插入包含Unicode字符的内容（如中文）。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unicode_content.txt",
          "line_number": 1,
          "content": "这是一段插入的中文文本。"
        },
        "response": {
          "result": "{\"message\": \"Content inserted successfully.\"}"
        },
        "execution_time": 0.00953984260559082,
        "is_functional_test": true
      },
      {
        "case_name": "Insert into Nonexistent File",
        "purpose": "验证尝试向不存在的文件中插入内容时是否报错。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt",
          "line_number": 2,
          "content": "Attempt to insert into non-existent file."
        },
        "response": {
          "result": "{\"message\": \"Content inserted successfully.\"}"
        },
        "execution_time": 0.0040013790130615234,
        "is_functional_test": false
      },
      {
        "case_name": "Insert with Invalid Line Number",
        "purpose": "验证使用无效行号（如负数）插入内容时是否报错。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt",
          "line_number": -1,
          "content": "Trying to insert with invalid line number."
        },
        "response": {
          "result": "{\"error\": \"Invalid line number: -1. File has 3 lines.\"}"
        },
        "execution_time": 0.0032727718353271484,
        "is_functional_test": false
      },
      {
        "case_name": "Insert Empty String",
        "purpose": "验证插入空字符串是否不会破坏文件结构。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#%&()_file.txt",
          "line_number": 1,
          "content": ""
        },
        "response": {
          "result": "{\"message\": \"Content inserted successfully.\"}"
        },
        "execution_time": 0.003995418548583984,
        "is_functional_test": true
      },
      {
        "case_name": "Insert into Protected System Directory",
        "purpose": "验证尝试写入系统保护目录时的安全性行为。",
        "args": {
          "file_path": "C:\\Windows\\system32\\protected_insert.txt",
          "line_number": 1,
          "content": "Attempting to insert into protected system directory."
        },
        "response": {
          "result": "{\"error\": \"[Errno 2] No such file or directory: 'C:\\\\\\\\Windows\\\\\\\\system32\\\\\\\\protected_insert.txt'\"}"
        },
        "execution_time": 0.007522106170654297,
        "is_functional_test": false
      },
      {
        "case_name": "Insert with Missing File Path",
        "purpose": "验证缺少file_path参数时是否能正确报错。",
        "args": {
          "line_number": 2,
          "content": "Content without file path should fail."
        },
        "response": {
          "error": "ToolException: Error executing tool insert_text_file_contents: 1 validation error for insert_text_file_contentsArguments\nfile_path\n  Field required [type=missing, input_value={'line_number': 2, 'conte...file path should fail.'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": false
      },
      {
        "case_name": "Insert with Missing Line Number",
        "purpose": "验证缺少line_number参数时是否能正确报错。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\missing_line_number.txt",
          "content": "Content without line number should fail."
        },
        "response": {
          "error": "ToolException: Error executing tool insert_text_file_contents: 1 validation error for insert_text_file_contentsArguments\nline_number\n  Field required [type=missing, input_value={'file_path': 'D:\\\\devWor...ne number should fail.'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.0045163631439208984,
        "is_functional_test": false
      },
      {
        "case_name": "Insert with Special Characters in Content",
        "purpose": "验证插入内容包含特殊字符时是否能正确处理。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt",
          "line_number": 2,
          "content": "Special characters: @#%&(),{}[]<>|\"':;?~`"
        },
        "response": {
          "result": "{\"message\": \"Content inserted successfully.\"}"
        },
        "execution_time": 0.006999492645263672,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Long Content into File",
        "purpose": "验证插入非常长的内容是否仍然有效。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\deep\\nested\\path\\long_path_test.txt",
          "line_number": 1,
          "content": "This is a very long content string that simulates inserting a large amount of text into the file. It may contain multiple sentences and paragraphs. This is useful for testing performance and correctness under high load scenarios."
        },
        "response": {
          "result": "{\"message\": \"Content inserted successfully.\"}"
        },
        "execution_time": 0.004004001617431641,
        "is_functional_test": true
      }
    ],
    "delete_text_file_contents": [
      {
        "case_name": "Basic Line Range Deletion",
        "purpose": "验证delete_text_file_contents工具可以成功删除指定行范围内的内容。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt",
          "start_line": 2,
          "end_line": 4
        },
        "response": {
          "result": "{\"message\": \"Specified lines deleted successfully.\"}"
        },
        "execution_time": 0.004508495330810547,
        "is_functional_test": true
      },
      {
        "case_name": "Delete All Lines in File",
        "purpose": "验证当start_line=1且end_line等于文件总行数时，是否能删除所有内容。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "start_line": 1,
          "end_line": 1
        },
        "response": {
          "result": "{\"message\": \"Specified lines deleted successfully.\"}"
        },
        "execution_time": 0.005004405975341797,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Single Line at Start",
        "purpose": "验证删除文件第一行内容是否有效。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unicode_content.txt",
          "start_line": 1,
          "end_line": 1
        },
        "response": {
          "result": "{\"message\": \"Specified lines deleted successfully.\"}"
        },
        "execution_time": 0.007536649703979492,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Single Line in Middle",
        "purpose": "验证删除文件中间某一行的内容是否有效。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#%&()_file.txt",
          "start_line": 2,
          "end_line": 2
        },
        "response": {
          "result": "{\"message\": \"Specified lines deleted successfully.\"}"
        },
        "execution_time": 0.0029985904693603516,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Line Beyond File Length",
        "purpose": "验证尝试删除超出文件实际行数的范围时是否安全处理。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content.txt",
          "start_line": 5,
          "end_line": 10
        },
        "response": {
          "result": "{\"error\": \"Invalid line range: start_line=5, end_line=10. File has 7 lines.\"}"
        },
        "execution_time": 0.005512714385986328,
        "is_functional_test": true
      },
      {
        "case_name": "Delete from Start to End Line Equal",
        "purpose": "验证当start_line和end_line相等时是否正确删除该行内容。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "start_line": 3,
          "end_line": 3
        },
        "response": {
          "result": "{\"error\": \"Invalid line range: start_line=3, end_line=3. File has 0 lines.\"}"
        },
        "execution_time": 0.0075070858001708984,
        "is_functional_test": true
      },
      {
        "case_name": "Delete with Invalid Line Order",
        "purpose": "验证当start_line大于end_line时是否能自动识别并删除正确范围。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt",
          "start_line": 4,
          "end_line": 2
        },
        "response": {
          "result": "{\"error\": \"Invalid line range: start_line=4, end_line=2. File has 7 lines.\"}"
        },
        "execution_time": 0.0040013790130615234,
        "is_functional_test": false
      },
      {
        "case_name": "Delete from Protected System Directory",
        "purpose": "验证尝试从系统保护目录中删除内容时的安全性行为。",
        "args": {
          "file_path": "C:\\Windows\\system32\\notepad.exe",
          "start_line": 1,
          "end_line": 3
        },
        "response": {
          "result": "{\"error\": \"'utf-8' codec can't decode byte 0x90 in position 2: invalid start byte\"}"
        },
        "execution_time": 0.0075418949127197266,
        "is_functional_test": false
      },
      {
        "case_name": "Missing File Path Parameter",
        "purpose": "验证缺少file_path参数时工具是否能正确报错。",
        "args": {
          "start_line": 2,
          "end_line": 4
        },
        "response": {
          "error": "ToolException: Error executing tool delete_text_file_contents: 1 validation error for delete_text_file_contentsArguments\nfile_path\n  Field required [type=missing, input_value={'start_line': 2, 'end_line': 4}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.004996538162231445,
        "is_functional_test": false
      },
      {
        "case_name": "Missing Start and End Line Parameters",
        "purpose": "验证缺少start_line或end_line参数时工具是否能正确报错。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool delete_text_file_contents: 2 validation errors for delete_text_file_contentsArguments\nstart_line\n  Field required [type=missing, input_value={'file_path': 'D:\\\\devWor...Files\\\\test_output.txt'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing\nend_line\n  Field required [type=missing, input_value={'file_path': 'D:\\\\devWor...Files\\\\test_output.txt'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.00399327278137207,
        "is_functional_test": false
      },
      {
        "case_name": "Delete Empty File Content",
        "purpose": "验证对空文件执行删除操作时的行为是否安全无误。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content.txt",
          "start_line": 1,
          "end_line": 5
        },
        "response": {
          "result": "{\"message\": \"Specified lines deleted successfully.\"}"
        },
        "execution_time": 0.007386445999145508,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Unicode Content Lines",
        "purpose": "验证delete_text_file_contents能够处理包含Unicode字符（如中文）的文本文件。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\《上海市道路交通管理条例》.pdf",
          "start_line": 1,
          "end_line": 2
        },
        "response": {
          "result": "{\"error\": \"'utf-8' codec can't decode byte 0xd3 in position 10: invalid continuation byte\"}"
        },
        "execution_time": 0.004004478454589844,
        "is_functional_test": true
      }
    ],
    "patch_text_file_contents": [
      {
        "case_name": "Basic File Patching",
        "purpose": "验证patch_text_file_contents工具可以成功对文本文件进行基本的行替换操作。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt",
          "patch_data": [
            {
              "start_line": 1,
              "end_line": 1,
              "new_content": "This is a patched test content for the text file."
            }
          ],
          "expected_hash": "44200824b95bb3abac723dcbbc517612f97f9ac31a866811aec931600085d094"
        },
        "response": {
          "result": "{\"error\": \"File hash mismatch. Patch aborted. Current hash: 3409a2fe9fca003260fe0624449865f1f70c2a17280f477859e69d062d0861f2\"}"
        },
        "execution_time": 0.011551141738891602,
        "is_functional_test": true
      },
      {
        "case_name": "Multiple Line Patching",
        "purpose": "验证patch_text_file_contents能够处理多段落替换的情况。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "patch_data": [
            {
              "start_line": 1,
              "end_line": 1,
              "new_content": "Line 1 modified."
            },
            {
              "start_line": 2,
              "end_line": 2,
              "new_content": "Line 2 modified."
            }
          ],
          "expected_hash": "4d0ea35a0403a44da2f24733b269c961503c9ececf6541c7c9f344860eaf4bb4"
        },
        "response": {
          "result": "{\"error\": \"File hash mismatch. Patch aborted. Current hash: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"}"
        },
        "execution_time": 0.006500959396362305,
        "is_functional_test": true
      },
      {
        "case_name": "Patch with Empty New Content",
        "purpose": "验证新内容为空字符串时，patch_text_file_contents能否正确执行删除指定行的操作。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content.txt",
          "patch_data": [
            {
              "start_line": 1,
              "end_line": 1,
              "new_content": ""
            }
          ],
          "expected_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
        },
        "response": {
          "result": "{\"error\": \"File hash mismatch. Patch aborted. Current hash: 77e1406357f680cc679fb8e6aea6fe932955a6b9f2fce9a6c197874f4f3020d6\"}"
        },
        "execution_time": 0.004004955291748047,
        "is_functional_test": true
      },
      {
        "case_name": "Unicode Content Patching",
        "purpose": "验证patch_text_file_contents能够处理包含Unicode字符的内容（如中文）。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unicode_content.txt",
          "patch_data": [
            {
              "start_line": 1,
              "end_line": 1,
              "new_content": "这是一段被修改的测试用的中文文本。"
            }
          ],
          "expected_hash": "8a4e6c686f60986d6f0042ccbe9a3641e78f59bb85352bb549db8604029680b7"
        },
        "response": {
          "result": "{\"error\": \"File hash mismatch. Patch aborted. Current hash: 38f0ac684a7926a4f26d873c4950558c1eaf21d8e2d311a07486683a918a15c5\"}"
        },
        "execution_time": 0.00450444221496582,
        "is_functional_test": true
      },
      {
        "case_name": "Hash Mismatch Handling",
        "purpose": "验证当提供的expected_hash与实际文件哈希不一致时，工具是否拒绝执行补丁。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt",
          "patch_data": [
            {
              "start_line": 1,
              "end_line": 1,
              "new_content": "Patched content due to hash mismatch."
            }
          ],
          "expected_hash": "invalid_hash_abc123"
        },
        "response": {
          "result": "{\"error\": \"File hash mismatch. Patch aborted. Current hash: 3409a2fe9fca003260fe0624449865f1f70c2a17280f477859e69d062d0861f2\"}"
        },
        "execution_time": 0.0070040225982666016,
        "is_functional_test": false
      },
      {
        "case_name": "File Not Found Error",
        "purpose": "验证当指定的文件不存在时，patch_text_file_contents是否能正确报错。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt",
          "patch_data": [
            {
              "start_line": 1,
              "end_line": 1,
              "new_content": "Trying to patch a non-existent file."
            }
          ],
          "expected_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
        },
        "response": {
          "result": "{\"error\": \"File hash mismatch. Patch aborted. Current hash: 155c974339196ff0878a83cc446ee6335c89b99cf2c03a9c911eb0942b998461\"}"
        },
        "execution_time": 0.005014657974243164,
        "is_functional_test": false
      },
      {
        "case_name": "Write to Protected System Directory",
        "purpose": "验证尝试写入系统保护目录时工具的安全性行为。",
        "args": {
          "file_path": "C:\\Windows\\system32\\protected_test.txt",
          "patch_data": [
            {
              "start_line": 1,
              "end_line": 1,
              "new_content": "Attempting to patch system protected file."
            }
          ],
          "expected_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
        },
        "response": {
          "result": "{\"error\": \"File does not exist: C:\\\\Windows\\\\system32\\\\protected_test.txt\"}"
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": false
      },
      {
        "case_name": "Missing File Path Parameter",
        "purpose": "验证缺少file_path参数时工具是否能正确报错。",
        "args": {
          "patch_data": [
            {
              "start_line": 1,
              "end_line": 1,
              "new_content": "Content without file path should fail."
            }
          ],
          "expected_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
        },
        "response": {
          "error": "ToolException: Error executing tool patch_text_file_contents: 1 validation error for patch_text_file_contentsArguments\nfile_path\n  Field required [type=missing, input_value={'patch_data': [{'start_l...9b934ca495991b7852b855'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.006525278091430664,
        "is_functional_test": false
      },
      {
        "case_name": "Missing Patch Data Parameter",
        "purpose": "验证缺少patch_data参数时工具是否能正确报错。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt",
          "expected_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
        },
        "response": {
          "error": "ToolException: Error executing tool patch_text_file_contents: 1 validation error for patch_text_file_contentsArguments\npatch_data\n  Field required [type=missing, input_value={'file_path': 'D:\\\\devWor...9b934ca495991b7852b855'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.0045011043548583984,
        "is_functional_test": false
      },
      {
        "case_name": "Start Line Greater Than End Line",
        "purpose": "验证当start_line大于end_line时，工具是否能正确拒绝无效的补丁范围。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt",
          "patch_data": [
            {
              "start_line": 3,
              "end_line": 1,
              "new_content": "Invalid line range patch."
            }
          ],
          "expected_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
        },
        "response": {
          "result": "{\"error\": \"File hash mismatch. Patch aborted. Current hash: 3409a2fe9fca003260fe0624449865f1f70c2a17280f477859e69d062d0861f2\"}"
        },
        "execution_time": 0.007005453109741211,
        "is_functional_test": false
      },
      {
        "case_name": "Negative Line Numbers",
        "purpose": "验证负数行号是否被正确拒绝。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt",
          "patch_data": [
            {
              "start_line": -1,
              "end_line": 1,
              "new_content": "Trying to patch using negative line numbers."
            }
          ],
          "expected_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
        },
        "response": {
          "result": "{\"error\": \"File hash mismatch. Patch aborted. Current hash: 3409a2fe9fca003260fe0624449865f1f70c2a17280f477859e69d062d0861f2\"}"
        },
        "execution_time": 0.0042302608489990234,
        "is_functional_test": false
      },
      {
        "case_name": "Patch File with Special Characters in Name",
        "purpose": "验证文件名中包含特殊字符时，patch_text_file_contents是否能正常工作。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#%&()_file.txt",
          "patch_data": [
            {
              "start_line": 1,
              "end_line": 1,
              "new_content": "Patched content for special character filename."
            }
          ],
          "expected_hash": "31eee8d6fbf0cc8e74c40cf91aaae83f72077ab33a7259e888d547deb8ca8d4a"
        },
        "response": {
          "result": "{\"error\": \"File hash mismatch. Patch aborted. Current hash: d7c0cb09903af0bb5557eeadbc532fc311d44f07c9b378b746ec8dfaacffd5c9\"}"
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 69
}