{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "gpt-4o-mcp_text_file_manager",
  "server_path": "workspace/pipeline-output-servers/gpt-4o/mcp_text_file_manager/refined/server.py",
  "timestamp": "2025-07-13T00:40:47.721719",
  "tools": [
    {
      "name": "get_text_file_contents",
      "description": "\n    Reads the content of a text file within a specified line range and returns the file's hash for concurrency control.\n\n    Args:\n        file_path (str): Path to the text file.\n        start_line (int, optional): The starting line number (inclusive). Defaults to None.\n        end_line (int, optional): The ending line number (inclusive). Defaults to None.\n\n    Returns:\n        str: JSON string containing 'content' and 'hash'.\n\n    Example:\n        get_text_file_contents(\"example.txt\", start_line=1, end_line=5)\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "start_line": {
            "default": null,
            "title": "Start Line",
            "type": "integer"
          },
          "end_line": {
            "default": null,
            "title": "End Line",
            "type": "integer"
          }
        },
        "required": [
          "file_path"
        ],
        "title": "get_text_file_contentsArguments",
        "type": "object"
      }
    },
    {
      "name": "create_text_file",
      "description": "\n    Creates a new text file and writes the provided content to it.\n\n    Args:\n        file_path (str): Path where the new file should be created.\n        content (str): The content to write to the new file.\n\n    Returns:\n        str: Success message.\n\n    Example:\n        create_text_file(\"new_file.txt\", \"Hello, World!\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "content"
        ],
        "title": "create_text_fileArguments",
        "type": "object"
      }
    },
    {
      "name": "append_text_file_contents",
      "description": "\n    Appends content to an existing text file.\n\n    Args:\n        file_path (str): Path to the existing text file.\n        content (str): The content to append to the file.\n\n    Returns:\n        str: Success message.\n\n    Example:\n        append_text_file_contents(\"example.txt\", \"Additional text.\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "content"
        ],
        "title": "append_text_file_contentsArguments",
        "type": "object"
      }
    },
    {
      "name": "delete_text_file_contents",
      "description": "\n    Deletes content within a specified line range in a text file.\n\n    Args:\n        file_path (str): Path to the text file.\n        start_line (int): The starting line number (inclusive).\n        end_line (int): The ending line number (inclusive).\n\n    Returns:\n        str: Success message.\n\n    Example:\n        delete_text_file_contents(\"example.txt\", start_line=2, end_line=4)\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "start_line": {
            "title": "Start Line",
            "type": "integer"
          },
          "end_line": {
            "title": "End Line",
            "type": "integer"
          }
        },
        "required": [
          "file_path",
          "start_line",
          "end_line"
        ],
        "title": "delete_text_file_contentsArguments",
        "type": "object"
      }
    },
    {
      "name": "insert_text_file_contents",
      "description": "\n    Inserts content at a specified position in a text file.\n\n    Args:\n        file_path (str): Path to the text file.\n        line_number (int): The line number before which the content will be inserted.\n        content (str): The content to insert into the file.\n\n    Returns:\n        str: Success message.\n\n    Example:\n        insert_text_file_contents(\"example.txt\", line_number=3, content=\"Inserted text.\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "line_number": {
            "title": "Line Number",
            "type": "integer"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "line_number",
          "content"
        ],
        "title": "insert_text_file_contentsArguments",
        "type": "object"
      }
    },
    {
      "name": "patch_text_file_contents",
      "description": "\n    Applies precise edits to a text file based on provided changes. Validates the file hash to avoid concurrency conflicts.\n\n    Args:\n        file_path (str): Path to the text file.\n        patch_data (list of dict): A list of changes, each specifying:\n            - start_line (int): Start line for the patch.\n            - end_line (int): End line for the patch.\n            - new_content (str): New content to replace the specified range.\n        expected_hash (str): Expected SHA256 hash of the file to confirm no concurrent modifications.\n\n    Returns:\n        str: Success message if the patch is applied successfully, or error message if the hash does not match.\n\n    Example:\n        patch_text_file_contents(\n            \"example.txt\",\n            patch_data=[{\"start_line\": 2, \"end_line\": 3, \"new_content\": \"Patched content.\"}],\n            expected_hash=\"abc123\"\n        )\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "patch_data": {
            "items": {},
            "title": "Patch Data",
            "type": "array"
          },
          "expected_hash": {
            "title": "Expected Hash",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "patch_data",
          "expected_hash"
        ],
        "title": "patch_text_file_contentsArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "create_text_file": [
      {
        "case_name": "Basic Text File Creation",
        "purpose": "验证工具能否成功创建一个包含指定内容的文本文件",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "content": "This is a test file content."
        },
        "response": {
          "result": "{\"message\": \"File created successfully.\"}"
        },
        "execution_time": 0.006000995635986328,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Content Handling",
        "purpose": "验证在内容为空的情况下是否能正常创建空文件",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_file.txt",
          "content": ""
        },
        "response": {
          "result": "{\"message\": \"File created successfully.\"}"
        },
        "execution_time": 0.008002758026123047,
        "is_functional_test": true
      },
      {
        "case_name": "Special Characters in Content",
        "purpose": "验证工具是否能正确处理包含特殊字符的内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_char_content.txt",
          "content": "!@#$%^&*()_+=-`~[]{}|;':\",./<>?你好世界"
        },
        "response": {
          "result": "{\"message\": \"File created successfully.\"}"
        },
        "execution_time": 0.006000041961669922,
        "is_functional_test": true
      },
      {
        "case_name": "Long File Path Handling",
        "purpose": "验证工具是否支持较长的文件路径",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_file_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems.txt",
          "content": "Testing long file path support."
        },
        "response": {
          "result": "{\"message\": \"File created successfully.\"}"
        },
        "execution_time": 0.008004903793334961,
        "is_functional_test": true
      },
      {
        "case_name": "File Overwrite Test",
        "purpose": "验证工具是否允许覆盖已存在的文件",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "content": "Overwritten content."
        },
        "response": {
          "result": "{\"message\": \"File created successfully.\"}"
        },
        "execution_time": 0.004998683929443359,
        "is_functional_test": true
      },
      {
        "case_name": "Write to Protected Directory",
        "purpose": "验证尝试写入受保护目录时的行为（预期失败）",
        "args": {
          "file_path": "C:\\Windows\\system32\\test_protected.txt",
          "content": "This should fail due to permission denied."
        },
        "response": {
          "result": "{\"error\": \"[Errno 13] Permission denied: 'C:\\\\\\\\Windows\\\\\\\\system32\\\\\\\\test_protected.txt'\"}"
        },
        "execution_time": 0.007001161575317383,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid File Path",
        "purpose": "验证工具对无效文件路径的处理",
        "args": {
          "file_path": "<>invalid|path?.txt",
          "content": "Test invalid path handling."
        },
        "response": {
          "result": "{\"error\": \"[Errno 22] Invalid argument: '<>invalid|path?.txt'\"}"
        },
        "execution_time": 0.0062122344970703125,
        "is_functional_test": false
      },
      {
        "case_name": "Missing Required Parameters",
        "purpose": "验证缺少必要参数时是否返回错误信息",
        "args": {
          "file_path": "",
          "content": ""
        },
        "response": {
          "result": "{\"error\": \"[Errno 2] No such file or directory: ''\"}"
        },
        "execution_time": 0.005997657775878906,
        "is_functional_test": false
      }
    ],
    "get_text_file_contents": [
      {
        "case_name": "Basic File Content Reading",
        "purpose": "验证工具能否成功读取指定文件的全文内容并返回哈希值",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt"
        },
        "response": {
          "result": "{\"content\": \"This is a test file content.\", \"hash\": \"dddb3cd3dbaf57421a0b001e3f8224c71d742133e1482ba3211f70e8f794796a\"}"
        },
        "execution_time": 0.004578828811645508,
        "is_functional_test": true
      },
      {
        "case_name": "Read Specific Line Range",
        "purpose": "验证工具能否正确读取指定行范围的内容（如第1到第3行）",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "start_line": 1,
          "end_line": 3
        },
        "response": {
          "result": "{\"content\": \"Overwritten content.\", \"hash\": \"d7b155e1ed2abbf8e8c7ffb4faafc13aabec7176d6e92b7d323ef856b4d2f0c9\"}"
        },
        "execution_time": 0.0040051937103271484,
        "is_functional_test": true
      },
      {
        "case_name": "Read Empty File",
        "purpose": "验证工具在读取空文件时是否能正常返回空内容和有效哈希值",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_file.txt"
        },
        "response": {
          "result": "{\"content\": \"\", \"hash\": \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"}"
        },
        "execution_time": 0.005000591278076172,
        "is_functional_test": true
      },
      {
        "case_name": "File Not Exist Error Handling",
        "purpose": "验证当尝试读取不存在的文件时是否返回适当的错误信息",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt"
        },
        "response": {
          "result": "{\"error\": \"File does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_file.txt\"}"
        },
        "execution_time": 0.0050280094146728516,
        "is_functional_test": false
      },
      {
        "case_name": "Read Protected File",
        "purpose": "验证尝试读取受保护目录中的文件时的行为（预期失败）",
        "args": {
          "file_path": "C:\\Windows\\system32\\drivers\\etc\\hosts"
        },
        "response": {
          "result": "{\"content\": \"\\ufeff# Copyright (c) 1993-2009 Microsoft Corp.\\n#\\n# This is a sample HOSTS file used by Microsoft TCP/IP for Windows.\\n#\\n# This file contains the mappings of IP addresses to host names. Each\\n# entry should be kept on an individual line. The IP address should\\n# be placed in the first column followed by the corresponding host name.\\n# The IP address and the host name should be separated by at least one\\n# space.\\n#\\n# Additionally, comments (such as these) may be inserted on individual\\n# lines or following the machine name denoted by a '#' symbol.\\n#\\n# For example:\\n#\\n#      102.54.94.97     rhino.acme.com          # source server\\n#       38.25.63.10     x.acme.com              # x client host\\n\\n# localhost name resolution is handled within DNS itself.\\n#\\t127.0.0.1       localhost\\n#\\t::1             localhost\\n# Added by Docker Desktop\\n10.68.38.165 host.docker.internal\\n10.68.38.165 gateway.docker.internal\\n# To allow the same kube context to work on the host and the container:\\n127.0.0.1 kubernetes.docker.internal\\n# End of section\\n\", \"hash\": \"e57a162eb03a95c36d94fd86c6bb384ecb48b338ca595806bb6461efb2e5da4a\"}"
        },
        "execution_time": 0.003545045852661133,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid File Path Handling",
        "purpose": "验证工具对无效文件路径的处理是否返回合理错误信息",
        "args": {
          "file_path": "<>invalid|path?.txt"
        },
        "response": {
          "result": "{\"error\": \"File does not exist: <>invalid|path?.txt\"}"
        },
        "execution_time": 0.003998756408691406,
        "is_functional_test": false
      },
      {
        "case_name": "Start Line Greater Than End Line",
        "purpose": "验证起始行大于结束行时是否能优雅处理（如返回错误或空内容）",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "start_line": 5,
          "end_line": 2
        },
        "response": {
          "result": "{\"content\": \"\", \"hash\": \"dddb3cd3dbaf57421a0b001e3f8224c71d742133e1482ba3211f70e8f794796a\"}"
        },
        "execution_time": 0.008005619049072266,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in File Path",
        "purpose": "验证包含特殊字符的文件路径是否能被正确处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\!@#$%^&*()_+=-`~[]{}|;':\",./<>?你好世界.txt"
        },
        "response": {
          "result": "{\"error\": \"File does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\!@#$%^&*()_+=-`~[]{}|;':\\\",./<>?\\u4f60\\u597d\\u4e16\\u754c.txt\"}"
        },
        "execution_time": 0.006508588790893555,
        "is_functional_test": true
      }
    ],
    "append_text_file_contents": [
      {
        "case_name": "Basic Text Append",
        "purpose": "验证工具能否成功向现有文本文件追加指定内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "content": "Appended content."
        },
        "response": {
          "result": "{\"message\": \"Content appended successfully.\"}"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": true
      },
      {
        "case_name": "Append to Empty File",
        "purpose": "验证向空文件中追加内容是否正常工作",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_file.txt",
          "content": "Content added to empty file."
        },
        "response": {
          "result": "{\"message\": \"Content appended successfully.\"}"
        },
        "execution_time": 0.003000974655151367,
        "is_functional_test": true
      },
      {
        "case_name": "Append Special Characters",
        "purpose": "验证工具是否能正确处理包含特殊字符的追加内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_char_content.txt",
          "content": "!@#$%^&*()_+=-`~[]{}|;':\",./<>?你好世界"
        },
        "response": {
          "result": "{\"message\": \"Content appended successfully.\"}"
        },
        "execution_time": 0.008003473281860352,
        "is_functional_test": true
      },
      {
        "case_name": "Append to Long Path File",
        "purpose": "验证工具是否支持在长路径文件中追加内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_file_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems.txt",
          "content": "Appending to long path file."
        },
        "response": {
          "result": "{\"message\": \"Content appended successfully.\"}"
        },
        "execution_time": 0.005005359649658203,
        "is_functional_test": true
      },
      {
        "case_name": "Append to Protected Directory File",
        "purpose": "验证尝试向受保护目录中的文件追加内容时的行为（预期失败）",
        "args": {
          "file_path": "C:\\Windows\\system32\\test_protected.txt",
          "content": "This should fail due to permission denied."
        },
        "response": {
          "result": "{\"error\": \"[Errno 13] Permission denied: 'C:\\\\\\\\Windows\\\\\\\\system32\\\\\\\\test_protected.txt'\"}"
        },
        "execution_time": 0.008001089096069336,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid File Path Handling",
        "purpose": "验证工具对无效文件路径的处理是否返回合理错误信息",
        "args": {
          "file_path": "<>invalid|path?.txt",
          "content": "Test invalid path handling."
        },
        "response": {
          "result": "{\"error\": \"[Errno 22] Invalid argument: '<>invalid|path?.txt'\"}"
        },
        "execution_time": 0.006491184234619141,
        "is_functional_test": false
      },
      {
        "case_name": "Missing Required Parameters",
        "purpose": "验证缺少必要参数时是否返回错误信息",
        "args": {
          "file_path": "",
          "content": ""
        },
        "response": {
          "result": "{\"error\": \"[Errno 2] No such file or directory: ''\"}"
        },
        "execution_time": 0.00700068473815918,
        "is_functional_test": false
      }
    ],
    "insert_text_file_contents": [
      {
        "case_name": "Basic Text Insertion at Middle Line",
        "purpose": "验证工具能否在指定行号前插入文本内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "line_number": 2,
          "content": "This is inserted content."
        },
        "response": {
          "result": "{\"message\": \"Content inserted successfully.\"}"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Content at Beginning of File",
        "purpose": "验证在文件开头（行号1）前插入内容是否成功",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "line_number": 1,
          "content": "Inserted at the beginning."
        },
        "response": {
          "result": "{\"message\": \"Content inserted successfully.\"}"
        },
        "execution_time": 0.005000114440917969,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Content at End of File",
        "purpose": "验证在文件末尾插入内容是否成功（行号超过实际行数）",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "line_number": 999,
          "content": "This should be appended at the end."
        },
        "response": {
          "result": "{\"error\": \"Invalid line number: 999. File has 3 lines.\"}"
        },
        "execution_time": 0.007001161575317383,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Empty Content",
        "purpose": "验证空内容插入是否被正确处理，不破坏原文件结构",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "line_number": 2,
          "content": ""
        },
        "response": {
          "result": "{\"message\": \"Content inserted successfully.\"}"
        },
        "execution_time": 0.0049953460693359375,
        "is_functional_test": true
      },
      {
        "case_name": "Insert with Special Characters in Content",
        "purpose": "验证包含特殊字符的内容是否能正确插入文件",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_file.txt",
          "line_number": 1,
          "content": "!@#$%^&*()_+=-`~[]{}|;':\",./<>?你好世界"
        },
        "response": {
          "result": "{\"message\": \"Content inserted successfully.\"}"
        },
        "execution_time": 0.006998538970947266,
        "is_functional_test": true
      },
      {
        "case_name": "Write to Protected File",
        "purpose": "验证尝试向受保护文件写入内容时的行为（预期失败）",
        "args": {
          "file_path": "C:\\Windows\\system32\\drivers\\etc\\hosts",
          "line_number": 1,
          "content": "Malicious content (should fail)"
        },
        "response": {
          "result": "{\"error\": \"[Errno 13] Permission denied: 'C:\\\\\\\\Windows\\\\\\\\system32\\\\\\\\drivers\\\\\\\\etc\\\\\\\\hosts'\"}"
        },
        "execution_time": 0.0050013065338134766,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid File Path Handling",
        "purpose": "验证无效文件路径的处理是否返回合理错误信息",
        "args": {
          "file_path": "<>invalid|path?.txt",
          "line_number": 1,
          "content": "Test invalid path handling."
        },
        "response": {
          "result": "{\"error\": \"[Errno 22] Invalid argument: '<>invalid|path?.txt'\"}"
        },
        "execution_time": 0.00400090217590332,
        "is_functional_test": false
      },
      {
        "case_name": "Line Number Less Than One",
        "purpose": "验证行号小于1时是否能优雅处理（如默认插入第一行）或报错",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "line_number": 0,
          "content": "This line should not be inserted illegally."
        },
        "response": {
          "result": "{\"error\": \"Invalid line number: 0. File has 3 lines.\"}"
        },
        "execution_time": 0.00699925422668457,
        "is_functional_test": false
      }
    ],
    "delete_text_file_contents": [
      {
        "case_name": "Basic Line Range Deletion",
        "purpose": "验证工具能否成功删除指定行范围的内容（基本功能）",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "start_line": 1,
          "end_line": 2
        },
        "response": {
          "result": "{\"error\": \"File does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt\"}"
        },
        "execution_time": 0.005005359649658203,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Entire File Content",
        "purpose": "验证当起始行和结束行为文件首尾时，是否能正确清空整个文件内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "start_line": 1,
          "end_line": 1
        },
        "response": {
          "result": "{\"error\": \"File does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\"}"
        },
        "execution_time": 0.0030002593994140625,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Single Line",
        "purpose": "验证单行删除功能是否正常工作",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_char_content.txt",
          "start_line": 1,
          "end_line": 1
        },
        "response": {
          "result": "{\"message\": \"Specified lines deleted successfully.\"}"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": true
      },
      {
        "case_name": "Start Line Greater Than End Line",
        "purpose": "验证起始行大于结束行时的行为是否合理处理（如返回错误或自动交换）",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "start_line": 5,
          "end_line": 2
        },
        "response": {
          "result": "{\"error\": \"File does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt\"}"
        },
        "execution_time": 0.007002592086791992,
        "is_functional_test": false
      },
      {
        "case_name": "Delete From Empty File",
        "purpose": "验证从空文件中删除内容时是否能优雅处理而不报错",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_file.txt",
          "start_line": 1,
          "end_line": 1
        },
        "response": {
          "result": "{\"error\": \"File does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_file.txt\"}"
        },
        "execution_time": 0.004996299743652344,
        "is_functional_test": true
      },
      {
        "case_name": "File Not Exist Error Handling",
        "purpose": "验证尝试对不存在的文件执行删除操作时是否返回适当的错误信息",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt",
          "start_line": 1,
          "end_line": 3
        },
        "response": {
          "result": "{\"error\": \"File does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_file.txt\"}"
        },
        "execution_time": 0.00800013542175293,
        "is_functional_test": false
      },
      {
        "case_name": "Write Protected Directory",
        "purpose": "验证尝试在受保护目录中修改文件内容时是否因权限不足而失败",
        "args": {
          "file_path": "C:\\Windows\\system32\\test_protected.txt",
          "start_line": 1,
          "end_line": 2
        },
        "response": {
          "result": "{\"error\": \"File does not exist: C:\\\\Windows\\\\system32\\\\test_protected.txt\"}"
        },
        "execution_time": 0.006002187728881836,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in File Path",
        "purpose": "验证包含特殊字符的文件路径是否能被正确处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\!@#$%^&*()_+=-`~[]{}|;':\",./<>?你好世界.txt",
          "start_line": 1,
          "end_line": 1
        },
        "response": {
          "result": "{\"error\": \"File does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\!@#$%^&*()_+=-`~[]{}|;':\\\",./<>?\\u4f60\\u597d\\u4e16\\u754c.txt\"}"
        },
        "execution_time": 0.0060045719146728516,
        "is_functional_test": false
      }
    ],
    "patch_text_file_contents": [
      {
        "case_name": "Basic Text File Patching",
        "purpose": "验证工具能否成功对一个已知文件应用基本的文本修改补丁",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "patch_data": [
            {
              "start_line": 1,
              "end_line": 1,
              "new_content": "This is a patched test file content."
            }
          ],
          "expected_hash": "dddb3cd3dbaf57421a0b001e3f8224c71d742133e1482ba3211f70e8f794796a"
        },
        "response": {
          "result": "{\"error\": \"File does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\"}"
        },
        "execution_time": 0.008002042770385742,
        "is_functional_test": true
      },
      {
        "case_name": "Multi-line Text Replacement",
        "purpose": "验证工具是否支持多行内容替换",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "patch_data": [
            {
              "start_line": 1,
              "end_line": 2,
              "new_content": "Replaced multi-line content."
            }
          ],
          "expected_hash": "d7b155e1ed2abbf8e8c7ffb4faafc13aabec7176d6e92b7d323ef856b4d2f0c9"
        },
        "response": {
          "result": "{\"error\": \"File hash mismatch. Patch aborted. Current hash: 53c1dc5b98c1091651554f83d3aa9b729f2cdf194ac7a66b2e9faf2e9ef39809\"}"
        },
        "execution_time": 0.004506826400756836,
        "is_functional_test": true
      },
      {
        "case_name": "Empty File Patching",
        "purpose": "验证工具是否能正确处理空文件的补丁操作",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_file.txt",
          "patch_data": [
            {
              "start_line": 1,
              "end_line": 0,
              "new_content": "Inserted content into empty file."
            }
          ],
          "expected_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
        },
        "response": {
          "result": "{\"error\": \"File does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_file.txt\"}"
        },
        "execution_time": 0.004003286361694336,
        "is_functional_test": true
      },
      {
        "case_name": "Concurrent Modification Detection",
        "purpose": "验证工具是否能够通过哈希校验检测并发修改并拒绝执行补丁",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "patch_data": [
            {
              "start_line": 1,
              "end_line": 1,
              "new_content": "This change should not be applied."
            }
          ],
          "expected_hash": "invalid_hash_123456"
        },
        "response": {
          "result": "{\"error\": \"File does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\"}"
        },
        "execution_time": 0.007004499435424805,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in New Content",
        "purpose": "验证工具是否能正确处理包含特殊字符的新内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_char_content.txt",
          "patch_data": [
            {
              "start_line": 1,
              "end_line": 1,
              "new_content": "!@#$%^&*()_+=-`~[]{}|;':\",./<>?你好世界 PATCHED"
            }
          ],
          "expected_hash": "5f8dc3f1f8c25591c10b01b2e3d8f4a7b1c0e2d9a8f7e6c5d4a3b2e1f0d9c8b"
        },
        "response": {
          "result": "{\"error\": \"File hash mismatch. Patch aborted. Current hash: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"}"
        },
        "execution_time": 0.003995656967163086,
        "is_functional_test": true
      },
      {
        "case_name": "Write to Protected Directory Attempt",
        "purpose": "验证尝试写入受保护目录时的行为（预期失败）",
        "args": {
          "file_path": "C:\\Windows\\system32\\test_protected.txt",
          "patch_data": [
            {
              "start_line": 1,
              "end_line": 1,
              "new_content": "This should fail due to permission denied."
            }
          ],
          "expected_hash": "abc123"
        },
        "response": {
          "result": "{\"error\": \"File does not exist: C:\\\\Windows\\\\system32\\\\test_protected.txt\"}"
        },
        "execution_time": 0.0031769275665283203,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid File Path Handling",
        "purpose": "验证工具对无效文件路径的处理是否返回合理错误信息",
        "args": {
          "file_path": "<>invalid|path?.txt",
          "patch_data": [
            {
              "start_line": 1,
              "end_line": 1,
              "new_content": "Test invalid path handling."
            }
          ],
          "expected_hash": "abc123"
        },
        "response": {
          "result": "{\"error\": \"File does not exist: <>invalid|path?.txt\"}"
        },
        "execution_time": 0.00400090217590332,
        "is_functional_test": false
      },
      {
        "case_name": "Start Line Greater Than End Line",
        "purpose": "验证起始行大于结束行时是否能优雅处理（如返回错误或不执行）",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "patch_data": [
            {
              "start_line": 5,
              "end_line": 2,
              "new_content": "This patch should not be applied."
            }
          ],
          "expected_hash": "dddb3cd3dbaf57421a0b001e3f8224c71d742133e1482ba3211f70e8f794796a"
        },
        "response": {
          "result": "{\"error\": \"File does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\"}"
        },
        "execution_time": 0.006517171859741211,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 47
}