{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "gpt-4o-mcp_git_repo_manager",
  "server_path": "workspace/pipeline-output-servers/gpt-4o/mcp_git_repo_manager/refined/server.py",
  "timestamp": "2025-07-13T00:43:43.434041",
  "tools": [
    {
      "name": "git_init",
      "description": "\n    Initializes a new Git repository in the specified directory.\n\n    Args:\n        directory (str): The path to the directory where the repository should be initialized. Example: '/path/to/new/repo'.\n\n    Returns:\n        str: Confirmation message indicating success or failure.\n\n    Example:\n        git_init(directory='/path/to/new/repo')\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          }
        },
        "required": [
          "directory"
        ],
        "title": "git_initArguments",
        "type": "object"
      }
    },
    {
      "name": "git_status",
      "description": "\n    Retrieves the status of the Git repository, showing changes in the working directory and staged files.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n\n    Returns:\n        dict: A dictionary containing the status of files (e.g., staged, unstaged, modified).\n\n    Example:\n        git_status(repository_path='/path/to/repo')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          }
        },
        "required": [
          "repository_path"
        ],
        "title": "git_statusArguments",
        "type": "object"
      }
    },
    {
      "name": "git_add",
      "description": "\n    Adds specified files to the staging area.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        files (list of str): List of file paths to add to the staging area. Accepts both relative and absolute paths.\n\n    Returns:\n        str: Confirmation message indicating the files added to the staging area.\n\n    Example:\n        git_add(repository_path='/path/to/repo', files=['file1.txt', 'file2.txt'])\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "files": {
            "items": {},
            "title": "Files",
            "type": "array"
          }
        },
        "required": [
          "repository_path",
          "files"
        ],
        "title": "git_addArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_unstaged",
      "description": "\n    Displays the differences in files that are not staged for commit.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n\n    Returns:\n        str: A string showing the diff of unstaged changes.\n\n    Example:\n        git_diff_unstaged(repository_path='/path/to/repo')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          }
        },
        "required": [
          "repository_path"
        ],
        "title": "git_diff_unstagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_staged",
      "description": "\n    Displays the differences in files that are staged for commit.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n\n    Returns:\n        str: A string showing the diff of staged changes.\n\n    Example:\n        git_diff_staged(repository_path='/path/to/repo')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          }
        },
        "required": [
          "repository_path"
        ],
        "title": "git_diff_stagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff",
      "description": "\n    Compares two branches or commits and displays the differences.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        reference1 (str): The first branch or commit to compare. Example: 'HEAD'.\n        reference2 (str): The second branch or commit to compare. Example: 'HEAD~1'.\n\n    Returns:\n        str: A string showing the diff between the two references.\n\n    Example:\n        git_diff(repository_path='/path/to/repo', reference1='HEAD', reference2='HEAD~1')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "reference1": {
            "title": "Reference1",
            "type": "string"
          },
          "reference2": {
            "title": "Reference2",
            "type": "string"
          }
        },
        "required": [
          "repository_path",
          "reference1",
          "reference2"
        ],
        "title": "git_diffArguments",
        "type": "object"
      }
    },
    {
      "name": "git_commit",
      "description": "\n    Commits staged changes to the repository.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        message (str): Commit message describing the changes. Example: 'Initial commit'.\n\n    Returns:\n        str: Confirmation message with the commit hash.\n\n    Example:\n        git_commit(repository_path='/path/to/repo', message='Initial commit')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "message": {
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "repository_path",
          "message"
        ],
        "title": "git_commitArguments",
        "type": "object"
      }
    },
    {
      "name": "git_reset",
      "description": "\n    Removes files from the staging area.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        files (list of str): List of file paths to remove from the staging area. Accepts both relative and absolute paths.\n\n    Returns:\n        str: Confirmation message indicating the files reset.\n\n    Example:\n        git_reset(repository_path='/path/to/repo', files=['file1.txt', 'file2.txt'])\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "files": {
            "items": {},
            "title": "Files",
            "type": "array"
          }
        },
        "required": [
          "repository_path",
          "files"
        ],
        "title": "git_resetArguments",
        "type": "object"
      }
    },
    {
      "name": "git_log",
      "description": "\n    Displays the commit history of the repository.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n\n    Returns:\n        list: A list of dictionaries, each containing commit details (e.g., hash, author, date, message).\n\n    Example:\n        git_log(repository_path='/path/to/repo')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          }
        },
        "required": [
          "repository_path"
        ],
        "title": "git_logArguments",
        "type": "object"
      }
    },
    {
      "name": "git_create_branch",
      "description": "\n    Creates a new branch in the repository.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        branch_name (str): Name of the new branch. Example: 'new-feature'.\n\n    Returns:\n        str: Confirmation message indicating success or failure.\n\n    Example:\n        git_create_branch(repository_path='/path/to/repo', branch_name='new-feature')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "repository_path",
          "branch_name"
        ],
        "title": "git_create_branchArguments",
        "type": "object"
      }
    },
    {
      "name": "git_checkout",
      "description": "\n    Switches the current branch in the repository.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        branch_name (str): Name of the branch to switch to. Example: 'main'.\n\n    Returns:\n        str: Confirmation message indicating the branch switched.\n\n    Example:\n        git_checkout(repository_path='/path/to/repo', branch_name='main')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "repository_path",
          "branch_name"
        ],
        "title": "git_checkoutArguments",
        "type": "object"
      }
    },
    {
      "name": "git_show",
      "description": "\n    Displays detailed information about a specific commit.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        commit_hash (str): The hash of the commit to display. Example: 'abc123'. If None, shows info for HEAD.\n\n    Returns:\n        dict: A dictionary containing commit details (e.g., hash, author, date, message, changes).\n\n    Example:\n        git_show(repository_path='/path/to/repo', commit_hash='abc123')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "commit_hash": {
            "title": "Commit Hash",
            "type": "string"
          }
        },
        "required": [
          "repository_path",
          "commit_hash"
        ],
        "title": "git_showArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "git_init": [
      {
        "case_name": "Initialize Git Repository in New Directory",
        "purpose": "验证工具能够在指定的新目录中正确初始化一个Git仓库并返回成功消息。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "response": {
          "result": "{\"message\": \"Initialized new Git repository at: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_repo\"}"
        },
        "execution_time": 0.29670143127441406,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository in Existing Directory",
        "purpose": "验证工具在已有目录中初始化Git仓库时也能正常工作。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"message\": \"Initialized new Git repository at: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\"}"
        },
        "execution_time": 0.30023741722106934,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository with Special Characters in Path",
        "purpose": "测试路径包含特殊字符时，工具是否能正确处理并初始化仓库。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\git_test_@#￥%——&×"
        },
        "response": {
          "result": "{\"message\": \"Initialized new Git repository at: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\git_test_@#\\uffe5%\\u2014\\u2014&\\u00d7\"}"
        },
        "execution_time": 0.31313204765319824,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository with Long Path Name",
        "purpose": "测试工具能否处理Windows系统最大允许路径长度限制下的长路径。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems"
        },
        "response": {
          "result": "{\"message\": \"Initialized new Git repository at: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_directory_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems\"}"
        },
        "execution_time": 0.20580792427062988,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Initialize Git in Restricted System Directory",
        "purpose": "测试工具是否安全地处理尝试在受限系统目录中初始化Git仓库的情况。",
        "args": {
          "directory": "C:\\Windows\\System32\\git_test"
        },
        "response": {
          "result": "{\"error\": \"[WinError 5] \\u62d2\\u7edd\\u8bbf\\u95ee\\u3002: 'C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\git_test'\"}"
        },
        "execution_time": 0.004522562026977539,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git in Nonexistent Parent Path",
        "purpose": "验证工具是否能优雅地处理父路径不存在的错误情况。",
        "args": {
          "directory": "D:\\nonexistent\\path\\to\\repo"
        },
        "response": {
          "result": "{\"message\": \"Initialized new Git repository at: D:\\\\nonexistent\\\\path\\\\to\\\\repo\"}"
        },
        "execution_time": 0.20367932319641113,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git in File Instead of Directory",
        "purpose": "测试工具是否能识别参数为文件而非目录并返回相应错误。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') not found due to: NotADirectoryError('[WinError 267] \\u76ee\\u5f55\\u540d\\u79f0\\u65e0\\u6548\\u3002')\\n  cmdline: git init\"}"
        },
        "execution_time": 0.005997419357299805,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Without Write Permissions",
        "purpose": "模拟用户没有写权限的目录，测试工具是否能妥善处理权限不足的情况。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir"
        },
        "response": {
          "result": "{\"message\": \"Initialized new Git repository at: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.1787710189819336,
        "is_functional_test": false
      }
    ],
    "git_status": [
      {
        "case_name": "Get Git Status in Initialized Repository",
        "purpose": "验证工具能够正确获取已初始化Git仓库的状态信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.20394015312194824,
        "is_functional_test": true
      },
      {
        "case_name": "Get Git Status in Non-Git Directory",
        "purpose": "测试工具在未初始化为Git仓库的目录中调用时是否返回错误或空状态。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.164686918258667,
        "is_functional_test": false
      },
      {
        "case_name": "Get Git Status with Special Characters in Path",
        "purpose": "验证工具能否处理路径中包含特殊字符的Git仓库状态查询。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\git_test_@#￥%——&×"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.15430545806884766,
        "is_functional_test": true
      },
      {
        "case_name": "Get Git Status in Read-Only Directory",
        "purpose": "测试工具在没有写权限的Git仓库中是否能安全读取状态信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.1926712989807129,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to Get Git Status in System Protected Directory",
        "purpose": "验证工具在系统保护目录（如Windows/System32）中尝试获取Git状态时的安全性处理。",
        "args": {
          "repository_path": "C:\\Windows\\System32"
        },
        "response": {
          "result": "{\"error\": \"C:\\\\Windows\\\\System32\"}"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": false
      },
      {
        "case_name": "Get Git Status for Long Path Name",
        "purpose": "测试工具能否处理最大允许长度的路径下的Git状态查询。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.17216825485229492,
        "is_functional_test": true
      },
      {
        "case_name": "Get Git Status on File Instead of Directory",
        "purpose": "测试工具能否识别输入参数是文件而非目录并返回相应错误。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt\"}"
        },
        "execution_time": 0.0035076141357421875,
        "is_functional_test": false
      },
      {
        "case_name": "Get Git Status from Nonexistent Path",
        "purpose": "验证工具在指定路径不存在的情况下是否能优雅地处理错误。",
        "args": {
          "repository_path": "D:\\nonexistent\\path\\to\\repo"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.23655962944030762,
        "is_functional_test": false
      }
    ],
    "git_add": [
      {
        "case_name": "Add Valid Files to Staging Area in Initialized Repository",
        "purpose": "验证工具能够将指定的有效文件添加到已初始化的Git仓库的暂存区。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\app.ico"
          ]
        },
        "response": {
          "result": "{\"message\": \"Added files to staging area: ['..\\\\\\\\existing_file.txt', '..\\\\\\\\app.ico']\"}"
        },
        "execution_time": 0.01051783561706543,
        "is_functional_test": true
      },
      {
        "case_name": "Add File with Special Characters to Staging Area",
        "purpose": "测试路径中包含特殊字符的文件是否能被正确添加到暂存区。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\git_test_@#￥%——&×",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_char_content.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\git_test_@#\\uffe5%\\u2014\\u2014&\\u00d7\"}"
        },
        "execution_time": 0.005000114440917969,
        "is_functional_test": true
      },
      {
        "case_name": "Add Nonexistent File to Staging Area",
        "purpose": "验证工具在尝试添加不存在的文件时是否能返回错误信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"[WinError 2] \\u7cfb\\u7edf\\u627e\\u4e0d\\u5230\\u6307\\u5b9a\\u7684\\u6587\\u4ef6\\u3002: '..\\\\\\\\nonexistent_file.txt'\"}"
        },
        "execution_time": 0.005045175552368164,
        "is_functional_test": false
      },
      {
        "case_name": "Add File to Non-Git Directory",
        "purpose": "测试工具在未初始化为Git仓库的目录中尝试添加文件时的行为。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
          ]
        },
        "response": {
          "result": "{\"message\": \"Added files to staging area: ['existing_file.txt']\"}"
        },
        "execution_time": 0.005999326705932617,
        "is_functional_test": false
      },
      {
        "case_name": "Add File to Read-Only Git Repository",
        "purpose": "验证工具能否在只读权限的Git仓库中安全地执行添加操作或返回相应错误。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.006006479263305664,
        "is_functional_test": false
      },
      {
        "case_name": "Add File Using Absolute and Relative Paths Mixed",
        "purpose": "测试工具是否能正确处理同时使用绝对和相对路径的情况。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "files": [
            "existing_file.txt",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\app.ico"
          ]
        },
        "response": {
          "result": "{\"error\": \"[WinError 2] \\u7cfb\\u7edf\\u627e\\u4e0d\\u5230\\u6307\\u5b9a\\u7684\\u6587\\u4ef6\\u3002: 'existing_file.txt'\"}"
        },
        "execution_time": 0.004510402679443359,
        "is_functional_test": true
      },
      {
        "case_name": "Add Executable File to Staging Area",
        "purpose": "验证工具是否允许添加可执行文件（如.exe）到暂存区。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\malicious_attempt.exe"
          ]
        },
        "response": {
          "result": "{\"message\": \"Added files to staging area: ['..\\\\\\\\malicious_attempt.exe']\"}"
        },
        "execution_time": 0.006002902984619141,
        "is_functional_test": true
      },
      {
        "case_name": "Add Long File Name to Staging Area",
        "purpose": "测试工具是否支持Windows系统最大路径长度限制下的长文件名添加。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_file_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_directory_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems\"}"
        },
        "execution_time": 0.006083011627197266,
        "is_functional_test": true
      }
    ],
    "git_diff_unstaged": [
      {
        "case_name": "Basic Unstaged Diff in Initialized Repository",
        "purpose": "验证工具能够正确显示已初始化Git仓库中未暂存的更改差异。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "response": {
          "result": "{\"unstaged_diff\": [\"../existing_file.txt\\n=======================================================\\nlhs: 100644 | 38372ebf03438932fbc2dbf10aaef91d7754f460\\nrhs: None\\nfile deleted in rhs\", \"../malicious_attempt.exe\\n=======================================================\\nlhs: 100755 | 38372ebf03438932fbc2dbf10aaef91d7754f460\\nrhs: None\\nfile deleted in rhs\"]}"
        },
        "execution_time": 0.16540884971618652,
        "is_functional_test": true
      },
      {
        "case_name": "Unstaged Diff with Special Characters in Path",
        "purpose": "测试工具能否处理路径中包含特殊字符的Git仓库并正确显示未暂存差异。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\git_test_@#￥%——&×"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\git_test_@#\\uffe5%\\u2014\\u2014&\\u00d7\"}"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": true
      },
      {
        "case_name": "Unstaged Diff for Long Path Name",
        "purpose": "验证工具能否处理最大允许长度路径下的Git未暂存差异查询。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_directory_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems\"}"
        },
        "execution_time": 0.007509946823120117,
        "is_functional_test": true
      },
      {
        "case_name": "Unstaged Diff in Non-Git Directory",
        "purpose": "测试工具在未初始化为Git仓库的目录中调用时是否返回错误或空差异。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"unstaged_diff\": [\"existing_file.txt\\n=======================================================\\nlhs: 100644 | 38372ebf03438932fbc2dbf10aaef91d7754f460\\nrhs: None\\nfile deleted in rhs\"]}"
        },
        "execution_time": 0.14014458656311035,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to Get Unstaged Diff in System Protected Directory",
        "purpose": "验证工具在系统保护目录（如Windows/System32）中尝试获取未暂存差异时的安全性处理。",
        "args": {
          "repository_path": "C:\\Windows\\System32"
        },
        "response": {
          "result": "{\"error\": \"C:\\\\Windows\\\\System32\"}"
        },
        "execution_time": 0.0069997310638427734,
        "is_functional_test": false
      },
      {
        "case_name": "Unstaged Diff on File Instead of Directory",
        "purpose": "测试工具能否识别输入参数是文件而非目录并返回相应错误。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt\"}"
        },
        "execution_time": 0.010028362274169922,
        "is_functional_test": false
      },
      {
        "case_name": "Unstaged Diff from Nonexistent Path",
        "purpose": "验证工具在指定路径不存在的情况下是否能优雅地处理错误。",
        "args": {
          "repository_path": "D:\\nonexistent\\path\\to\\repo"
        },
        "response": {
          "result": "{\"unstaged_diff\": []}"
        },
        "execution_time": 0.17230224609375,
        "is_functional_test": false
      },
      {
        "case_name": "Unstaged Diff in Read-Only Git Repository",
        "purpose": "测试工具在没有写权限的Git仓库中是否能安全读取未暂存差异信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.003966331481933594,
        "is_functional_test": false
      }
    ],
    "git_diff_staged": [
      {
        "case_name": "Basic Staged Diff in Initialized Repository",
        "purpose": "验证在已初始化的Git仓库中，工具能够正确显示暂存区差异。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.004995822906494141,
        "is_functional_test": true
      },
      {
        "case_name": "Staged Diff with Special Characters in Path",
        "purpose": "测试路径包含特殊字符时，工具是否能正确处理并返回暂存区差异。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\git_test_@#￥%——&×"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\git_test_@#\\uffe5%\\u2014\\u2014&\\u00d7\"}"
        },
        "execution_time": 0.004002809524536133,
        "is_functional_test": true
      },
      {
        "case_name": "Staged Diff in Non-Git Directory",
        "purpose": "测试工具在未初始化为Git仓库的目录中调用时是否返回错误或空结果。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.005073070526123047,
        "is_functional_test": false
      },
      {
        "case_name": "Staged Diff on File Instead of Directory",
        "purpose": "测试工具能否识别输入参数是文件而非目录并返回相应错误。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt\"}"
        },
        "execution_time": 0.0030028820037841797,
        "is_functional_test": false
      },
      {
        "case_name": "Staged Diff in Read-Only Git Repository",
        "purpose": "测试工具在没有写权限的Git仓库中是否能安全地获取暂存区差异信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.0030002593994140625,
        "is_functional_test": false
      },
      {
        "case_name": "Staged Diff for Long Path Name",
        "purpose": "测试工具能否处理最大允许长度的路径下的暂存区差异查询。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_directory_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems\"}"
        },
        "execution_time": 0.0037751197814941406,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Get Staged Diff in System Protected Directory",
        "purpose": "验证工具在系统保护目录（如Windows/System32）中尝试获取暂存区差异时的安全性处理。",
        "args": {
          "repository_path": "C:\\Windows\\System32"
        },
        "response": {
          "result": "{\"error\": \"C:\\\\Windows\\\\System32\"}"
        },
        "execution_time": 0.005506992340087891,
        "is_functional_test": false
      },
      {
        "case_name": "Staged Diff from Nonexistent Path",
        "purpose": "验证工具在指定路径不存在的情况下是否能优雅地处理错误。",
        "args": {
          "repository_path": "D:\\nonexistent\\path\\to\\repo"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.0039980411529541016,
        "is_functional_test": false
      }
    ],
    "git_commit": [
      {
        "case_name": "Commit Staged Changes in Valid Repository",
        "purpose": "验证在已初始化的Git仓库中，工具能够使用指定的提交信息正确提交暂存的更改。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "message": "Initial commit"
        },
        "response": {
          "result": "{\"message\": \"Created new commit: 826c7c1224f7a0a351edfbae3fd33681de24c668\"}"
        },
        "execution_time": 0.24378728866577148,
        "is_functional_test": true
      },
      {
        "case_name": "Commit with Empty Message",
        "purpose": "测试工具是否能处理提交信息为空的情况，并返回适当的错误或默认处理。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "message": ""
        },
        "response": {
          "result": "{\"message\": \"Created new commit: 751ee225c4184d39be61575dff33f1d176ab876d\"}"
        },
        "execution_time": 0.2882094383239746,
        "is_functional_test": false
      },
      {
        "case_name": "Commit to Non-Git Directory",
        "purpose": "验证工具在非Git仓库目录中尝试提交时能否安全地处理并返回错误。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Test commit"
        },
        "response": {
          "result": "{\"message\": \"Created new commit: f149c3e988c7946fe8f1ef26cd7db8cf9ea58a2d\"}"
        },
        "execution_time": 0.3650789260864258,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Special Characters in Message",
        "purpose": "测试提交信息包含特殊字符（如中文、符号）时，工具是否能正确处理。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "message": "提交测试@#￥%——&×"
        },
        "response": {
          "result": "{\"message\": \"Created new commit: 46ef89ef32b3fa20d8a3add75bd1e722a8a4e441\"}"
        },
        "execution_time": 0.39182400703430176,
        "is_functional_test": true
      },
      {
        "case_name": "Commit to Read-Only Git Repository",
        "purpose": "测试工具在只读权限的Git仓库中尝试提交时是否能妥善处理权限不足的问题。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir",
          "message": "Read-only test commit"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": false
      },
      {
        "case_name": "Commit in Repository with Long Path Name",
        "purpose": "验证工具能否处理最大路径长度限制下的提交操作。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems",
          "message": "Long path commit test"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_directory_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems\"}"
        },
        "execution_time": 0.004002809524536133,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Commit in System Protected Directory",
        "purpose": "测试工具在系统保护目录（如Windows/System32）中尝试提交时的安全性处理。",
        "args": {
          "repository_path": "C:\\Windows\\System32",
          "message": "System directory commit attempt"
        },
        "response": {
          "result": "{\"error\": \"C:\\\\Windows\\\\System32\"}"
        },
        "execution_time": 0.0050067901611328125,
        "is_functional_test": false
      },
      {
        "case_name": "Commit Using File Instead of Directory as Repository Path",
        "purpose": "验证工具能否识别参数为文件而非目录并返回相应错误。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "message": "File path instead of directory"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt\"}"
        },
        "execution_time": 0.004998922348022461,
        "is_functional_test": false
      }
    ],
    "git_log": [
      {
        "case_name": "Get Git Commit History in Initialized Repository",
        "purpose": "验证工具能够正确获取已初始化Git仓库的提交历史记录。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "response": {
          "result": "[{\"hash\": \"46ef89ef32b3fa20d8a3add75bd1e722a8a4e441\", \"author\": \"pouchine\", \"date\": 1752338797, \"message\": \"\\u63d0\\u4ea4\\u6d4b\\u8bd5@#\\uffe5%\\u2014\\u2014&\\u00d7\"}, {\"hash\": \"751ee225c4184d39be61575dff33f1d176ab876d\", \"author\": \"pouchine\", \"date\": 1752338796, \"message\": \"\"}, {\"hash\": \"826c7c1224f7a0a351edfbae3fd33681de24c668\", \"author\": \"pouchine\", \"date\": 1752338795, \"message\": \"Initial commit\"}]"
        },
        "execution_time": 0.39281296730041504,
        "is_functional_test": true
      },
      {
        "case_name": "Get Git Log in Non-Git Directory",
        "purpose": "测试工具在未初始化为Git仓库的目录中调用时是否返回空列表或错误信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "[{\"hash\": \"f149c3e988c7946fe8f1ef26cd7db8cf9ea58a2d\", \"author\": \"pouchine\", \"date\": 1752338796, \"message\": \"Test commit\"}]"
        },
        "execution_time": 0.4980127811431885,
        "is_functional_test": false
      },
      {
        "case_name": "Get Git Log with Special Characters in Path",
        "purpose": "验证工具能否处理路径中包含特殊字符的Git仓库日志查询。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\git_test_@#￥%——&×"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\git_test_@#\\uffe5%\\u2014\\u2014&\\u00d7\"}"
        },
        "execution_time": 0.004000663757324219,
        "is_functional_test": true
      },
      {
        "case_name": "Get Git Log from Read-Only Directory",
        "purpose": "测试工具在没有写权限的Git仓库中是否能安全读取提交历史信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.005001544952392578,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to Get Git Log in System Protected Directory",
        "purpose": "验证工具在系统保护目录（如Windows/System32）中尝试获取Git日志时的安全性处理。",
        "args": {
          "repository_path": "C:\\Windows\\System32"
        },
        "response": {
          "result": "{\"error\": \"C:\\\\Windows\\\\System32\"}"
        },
        "execution_time": 0.008257389068603516,
        "is_functional_test": false
      },
      {
        "case_name": "Get Git Log for Long Path Name",
        "purpose": "测试工具能否处理最大允许长度的路径下的Git日志查询。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_directory_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems\"}"
        },
        "execution_time": 0.003997325897216797,
        "is_functional_test": true
      },
      {
        "case_name": "Get Git Log on File Instead of Directory",
        "purpose": "测试工具能否识别输入参数是文件而非目录并返回相应错误。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt\"}"
        },
        "execution_time": 0.004004001617431641,
        "is_functional_test": false
      },
      {
        "case_name": "Get Git Log from Nonexistent Path",
        "purpose": "验证工具在指定路径不存在的情况下是否能优雅地处理错误。",
        "args": {
          "repository_path": "D:\\nonexistent\\path\\to\\repo"
        },
        "response": {
          "result": "{\"error\": \"Reference at 'refs/heads/master' does not exist\"}"
        },
        "execution_time": 0.005511760711669922,
        "is_functional_test": false
      }
    ],
    "git_diff": [
      {
        "case_name": "Basic Diff Between Two Commits in Initialized Repo",
        "purpose": "验证工具能够在已初始化的Git仓库中正确显示两个提交之间的差异。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "reference1": "HEAD",
          "reference2": "HEAD~1"
        },
        "response": {
          "result": "{\"diff\": []}"
        },
        "execution_time": 0.29330015182495117,
        "is_functional_test": true
      },
      {
        "case_name": "Diff With Special Characters in Repository Path",
        "purpose": "测试工具能否处理路径中包含特殊字符的Git仓库并正确显示diff信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\git_test_@#￥%——&×",
          "reference1": "HEAD",
          "reference2": "HEAD~1"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\git_test_@#\\uffe5%\\u2014\\u2014&\\u00d7\"}"
        },
        "execution_time": 0.0029997825622558594,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Diff in Non-Git Directory",
        "purpose": "测试工具在未初始化为Git仓库的目录中调用时是否返回错误。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "reference1": "HEAD",
          "reference2": "HEAD~1"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff-tree f149c3e988c7946fe8f1ef26cd7db8cf9ea58a2d HEAD~1 -r --abbrev=40 --full-index -M --raw -z --no-color\"}"
        },
        "execution_time": 0.3554849624633789,
        "is_functional_test": false
      },
      {
        "case_name": "Diff Between Branches Instead of Commits",
        "purpose": "验证工具能够比较两个分支而不是提交，并返回正确的差异信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "reference1": "main",
          "reference2": "feature-branch"
        },
        "response": {
          "result": "{\"error\": \"Ref 'main' did not resolve to an object\"}"
        },
        "execution_time": 0.015805721282958984,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt Diff in System Protected Directory",
        "purpose": "验证工具在系统保护目录（如Windows/System32）中尝试执行diff操作时的安全性处理。",
        "args": {
          "repository_path": "C:\\Windows\\System32",
          "reference1": "HEAD",
          "reference2": "HEAD~1"
        },
        "response": {
          "result": "{\"error\": \"C:\\\\Windows\\\\System32\"}"
        },
        "execution_time": 0.004712104797363281,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid Commit Reference",
        "purpose": "测试工具在提供无效或不存在的commit hash时是否能优雅地处理错误。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "reference1": "invalid_commit_hash",
          "reference2": "HEAD~1"
        },
        "response": {
          "result": "{\"error\": \"Ref 'invalid_commit_hash' did not resolve to an object\"}"
        },
        "execution_time": 0.0070037841796875,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Test - Long Path Name for Repository",
        "purpose": "测试工具能否处理最大允许长度的路径下的diff操作。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems",
          "reference1": "HEAD",
          "reference2": "HEAD~1"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_directory_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems\"}"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": true
      },
      {
        "case_name": "Error Handling - File Instead of Directory",
        "purpose": "测试工具能否识别输入参数是文件而非目录并返回相应错误。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "reference1": "HEAD",
          "reference2": "HEAD~1"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt\"}"
        },
        "execution_time": 0.004001617431640625,
        "is_functional_test": false
      }
    ],
    "git_show": [
      {
        "case_name": "Show Details of Specific Commit in Valid Repository",
        "purpose": "验证工具能够正确显示指定提交的详细信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "commit_hash": "abc123"
        },
        "response": {
          "result": "{\"error\": \"Ref 'abc123' did not resolve to an object\"}"
        },
        "execution_time": 0.17335247993469238,
        "is_functional_test": true
      },
      {
        "case_name": "Show Details Using Default HEAD Commit",
        "purpose": "验证当未提供commit_hash时，工具默认显示HEAD提交的信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "commit_hash": null
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: 1 validation error for git_showArguments\ncommit_hash\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.0029981136322021484,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Show Commit in Non-Git Directory",
        "purpose": "测试工具在非Git仓库目录中调用时是否返回错误。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "abc123"
        },
        "response": {
          "result": "{\"error\": \"Ref 'abc123' did not resolve to an object\"}"
        },
        "execution_time": 0.2057356834411621,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit with Special Characters in Repository Path",
        "purpose": "验证路径中包含特殊字符的仓库能否正常显示提交信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\git_test_@#￥%——&×",
          "commit_hash": "abc123"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\git_test_@#\\uffe5%\\u2014\\u2014&\\u00d7\"}"
        },
        "execution_time": 0.004008293151855469,
        "is_functional_test": true
      },
      {
        "case_name": "Show Commit in Read-Only Git Repository",
        "purpose": "测试工具在只读权限的Git仓库中是否能安全读取提交信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir",
          "commit_hash": "abc123"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.005038261413574219,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to Access System Protected Directory for Git Show",
        "purpose": "验证工具在系统保护目录（如Windows/System32）中尝试获取提交信息时的安全性处理。",
        "args": {
          "repository_path": "C:\\Windows\\System32",
          "commit_hash": "abc123"
        },
        "response": {
          "result": "{\"error\": \"C:\\\\Windows\\\\System32\"}"
        },
        "execution_time": 0.00659632682800293,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit for Long Path Name",
        "purpose": "测试工具能否处理最大允许长度的路径下的提交信息查询。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems",
          "commit_hash": "abc123"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_directory_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems\"}"
        },
        "execution_time": 0.005441427230834961,
        "is_functional_test": true
      },
      {
        "case_name": "Show Commit on File Instead of Directory",
        "purpose": "测试工具能否识别输入参数是文件而非目录并返回相应错误。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "commit_hash": "abc123"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt\"}"
        },
        "execution_time": 0.007008075714111328,
        "is_functional_test": false
      }
    ],
    "git_reset": [
      {
        "case_name": "Basic Git Reset with Valid Files",
        "purpose": "验证工具能够正确从暂存区移除指定文件并返回确认消息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git reset --files=..\\\\existing_file.txt\\n  stderr: 'error: unknown option `files=..\\\\existing_file.txt'\\nusage: git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]\\n   or: git reset [-q] [<tree-ish>] [--] <pathspec>...\\n   or: git reset [-q] [--pathspec-from-file [--pathspec-file-nul]] [<tree-ish>]\\n   or: git reset --patch [<tree-ish>] [--] [<pathspec>...]\\n   or: DEPRECATED: git reset [-q] [--stdin [-z]] [<tree-ish>]\\n\\n    -q, --[no-]quiet      be quiet, only report errors\\n    --no-refresh          skip refreshing the index after reset\\n    --refresh             opposite of --no-refresh\\n    --mixed               reset HEAD and index\\n    --soft                reset only HEAD\\n    --hard                reset HEAD, index and working tree\\n    --merge               reset HEAD, index and working tree\\n    --keep                reset HEAD but keep local changes\\n    --[no-]recurse-submodules[=<reset>]\\n                          control recursive updating of submodules\\n    -p, --[no-]patch      select hunks interactively\\n    -N, --[no-]intent-to-add\\n                          record only the fact that removed paths will be added later\\n    --[no-]pathspec-from-file <file>\\n                          read pathspec from file\\n    --[no-]pathspec-file-nul\\n                          with --pathspec-from-file, pathspec elements are separated with NUL character\\n    -z                    DEPRECATED...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计1679字符，剩余179字符"
        },
        "execution_time": 0.16043472290039062,
        "is_functional_test": true
      },
      {
        "case_name": "Git Reset with Multiple Files",
        "purpose": "测试工具一次从暂存区移除多个文件的功能。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git reset --files=..\\\\existing_file.txt --files=..\\\\new_test_file.txt\\n  stderr: 'error: unknown option `files=..\\\\existing_file.txt'\\nusage: git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]\\n   or: git reset [-q] [<tree-ish>] [--] <pathspec>...\\n   or: git reset [-q] [--pathspec-from-file [--pathspec-file-nul]] [<tree-ish>]\\n   or: git reset --patch [<tree-ish>] [--] [<pathspec>...]\\n   or: DEPRECATED: git reset [-q] [--stdin [-z]] [<tree-ish>]\\n\\n    -q, --[no-]quiet      be quiet, only report errors\\n    --no-refresh          skip refreshing the index after reset\\n    --refresh             opposite of --no-refresh\\n    --mixed               reset HEAD and index\\n    --soft                reset only HEAD\\n    --hard                reset HEAD, index and working tree\\n    --merge               reset HEAD, index and working tree\\n    --keep                reset HEAD but keep local changes\\n    --[no-]recurse-submodules[=<reset>]\\n                          control recursive updating of submodules\\n    -p, --[no-]patch      select hunks interactively\\n    -N, --[no-]intent-to-add\\n                          record only the fact that removed paths will be added later\\n    --[no-]pathspec-from-file <file>\\n                          read pathspec from file\\n    --[no-]pathspec-file-nul\\n                          with --pathspec-from-file, pathspec elements are separated with NUL character\\n    -z...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计1709字符，剩余209字符"
        },
        "execution_time": 0.17266464233398438,
        "is_functional_test": true
      },
      {
        "case_name": "Git Reset with Nonexistent File",
        "purpose": "验证当尝试移除不存在的文件时，工具是否能优雅地处理错误情况。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git reset --files=..\\\\nonexistent_file.txt\\n  stderr: 'error: unknown option `files=..\\\\nonexistent_file.txt'\\nusage: git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]\\n   or: git reset [-q] [<tree-ish>] [--] <pathspec>...\\n   or: git reset [-q] [--pathspec-from-file [--pathspec-file-nul]] [<tree-ish>]\\n   or: git reset --patch [<tree-ish>] [--] [<pathspec>...]\\n   or: DEPRECATED: git reset [-q] [--stdin [-z]] [<tree-ish>]\\n\\n    -q, --[no-]quiet      be quiet, only report errors\\n    --no-refresh          skip refreshing the index after reset\\n    --refresh             opposite of --no-refresh\\n    --mixed               reset HEAD and index\\n    --soft                reset only HEAD\\n    --hard                reset HEAD, index and working tree\\n    --merge               reset HEAD, index and working tree\\n    --keep                reset HEAD but keep local changes\\n    --[no-]recurse-submodules[=<reset>]\\n                          control recursive updating of submodules\\n    -p, --[no-]patch      select hunks interactively\\n    -N, --[no-]intent-to-add\\n                          record only the fact that removed paths will be added later\\n    --[no-]pathspec-from-file <file>\\n                          read pathspec from file\\n    --[no-]pathspec-file-nul\\n                          with --pathspec-from-file, pathspec elements are separated with NUL character\\n    -z                    DEPR...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计1685字符，剩余185字符"
        },
        "execution_time": 0.1773056983947754,
        "is_functional_test": false
      },
      {
        "case_name": "Git Reset in Read-Only Repository",
        "purpose": "测试在只读权限的仓库中执行git reset是否会失败或安全处理。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.005000114440917969,
        "is_functional_test": false
      },
      {
        "case_name": "Git Reset with Special Characters in File Path",
        "purpose": "验证工具能否处理包含特殊字符的文件路径进行reset操作。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special#chars@file!.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git reset --files=..\\\\special#chars@file!.txt\\n  stderr: 'error: unknown option `files=..\\\\special#chars@file!.txt'\\nusage: git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]\\n   or: git reset [-q] [<tree-ish>] [--] <pathspec>...\\n   or: git reset [-q] [--pathspec-from-file [--pathspec-file-nul]] [<tree-ish>]\\n   or: git reset --patch [<tree-ish>] [--] [<pathspec>...]\\n   or: DEPRECATED: git reset [-q] [--stdin [-z]] [<tree-ish>]\\n\\n    -q, --[no-]quiet      be quiet, only report errors\\n    --no-refresh          skip refreshing the index after reset\\n    --refresh             opposite of --no-refresh\\n    --mixed               reset HEAD and index\\n    --soft                reset only HEAD\\n    --hard                reset HEAD, index and working tree\\n    --merge               reset HEAD, index and working tree\\n    --keep                reset HEAD but keep local changes\\n    --[no-]recurse-submodules[=<reset>]\\n                          control recursive updating of submodules\\n    -p, --[no-]patch      select hunks interactively\\n    -N, --[no-]intent-to-add\\n                          record only the fact that removed paths will be added later\\n    --[no-]pathspec-from-file <file>\\n                          read pathspec from file\\n    --[no-]pathspec-file-nul\\n                          with --pathspec-from-file, pathspec elements are separated with NUL character\\n    -z                  ...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计1691字符，剩余191字符"
        },
        "execution_time": 0.17482519149780273,
        "is_functional_test": true
      },
      {
        "case_name": "Git Reset on Git Internal Files",
        "purpose": "测试尝试从暂存区移除.git目录中的内部文件是否被安全拒绝。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\index"
          ]
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git reset --files=..\\\\.git\\\\index\\n  stderr: 'error: unknown option `files=..\\\\.git\\\\index'\\nusage: git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]\\n   or: git reset [-q] [<tree-ish>] [--] <pathspec>...\\n   or: git reset [-q] [--pathspec-from-file [--pathspec-file-nul]] [<tree-ish>]\\n   or: git reset --patch [<tree-ish>] [--] [<pathspec>...]\\n   or: DEPRECATED: git reset [-q] [--stdin [-z]] [<tree-ish>]\\n\\n    -q, --[no-]quiet      be quiet, only report errors\\n    --no-refresh          skip refreshing the index after reset\\n    --refresh             opposite of --no-refresh\\n    --mixed               reset HEAD and index\\n    --soft                reset only HEAD\\n    --hard                reset HEAD, index and working tree\\n    --merge               reset HEAD, index and working tree\\n    --keep                reset HEAD but keep local changes\\n    --[no-]recurse-submodules[=<reset>]\\n                          control recursive updating of submodules\\n    -p, --[no-]patch      select hunks interactively\\n    -N, --[no-]intent-to-add\\n                          record only the fact that removed paths will be added later\\n    --[no-]pathspec-from-file <file>\\n                          read pathspec from file\\n    --[no-]pathspec-file-nul\\n                          with --pathspec-from-file, pathspec elements are separated with NUL character\\n    -z                    DEPRECATED (use --path...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计1667字符，剩余167字符"
        },
        "execution_time": 0.26387453079223633,
        "is_functional_test": false
      },
      {
        "case_name": "Git Reset in System Protected Directory",
        "purpose": "验证工具在系统保护目录（如Windows/System32）中尝试执行reset操作时的安全性处理。",
        "args": {
          "repository_path": "C:\\Windows\\System32",
          "files": [
            "file1.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"C:\\\\Windows\\\\System32\"}"
        },
        "execution_time": 0.006287574768066406,
        "is_functional_test": false
      },
      {
        "case_name": "Git Reset with Long File Path",
        "purpose": "测试工具能否处理最大允许长度的路径下的文件reset操作。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems\\long_named_file.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_directory_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems\"}"
        },
        "execution_time": 0.010999679565429688,
        "is_functional_test": true
      }
    ],
    "git_create_branch": [
      {
        "case_name": "Create New Branch in Initialized Repository",
        "purpose": "验证工具能够在已初始化的Git仓库中成功创建一个新分支并返回确认消息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": "new-feature"
        },
        "response": {
          "result": "{\"message\": \"Created new branch: new-feature\"}"
        },
        "execution_time": 0.13863611221313477,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch with Special Characters in Name",
        "purpose": "测试工具是否支持在分支名中使用特殊字符（如@、#、!等）并正确创建分支。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": "feature@#test!"
        },
        "response": {
          "result": "{\"message\": \"Created new branch: feature@#test!\"}"
        },
        "execution_time": 0.1570606231689453,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Create Branch in Non-Git Directory",
        "purpose": "验证工具在非Git仓库目录中尝试创建分支时是否能优雅地处理错误情况。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "new-feature"
        },
        "response": {
          "result": "{\"message\": \"Created new branch: new-feature\"}"
        },
        "execution_time": 0.29746508598327637,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Empty Name",
        "purpose": "测试工具对空分支名的处理，确保参数验证机制正常工作。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": ""
        },
        "response": {
          "result": "{\"error\": \"[WinError 183] \\u5f53\\u6587\\u4ef6\\u5df2\\u5b58\\u5728\\u65f6\\uff0c\\u65e0\\u6cd5\\u521b\\u5efa\\u8be5\\u6587\\u4ef6\\u3002: 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\new_repo\\\\\\\\.git\\\\\\\\refs\\\\\\\\heads\\\\\\\\.lock' -> 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\new_repo\\\\\\\\.git\\\\\\\\refs\\\\\\\\heads\\\\\\\\'\"}"
        },
        "execution_time": 0.3102293014526367,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch in Read-Only Git Repository",
        "purpose": "验证工具在只读Git仓库中尝试创建分支时的安全性和错误处理能力。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_dir",
          "branch_name": "new-feature"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_dir\"}"
        },
        "execution_time": 0.004509449005126953,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Maximum Length Name",
        "purpose": "测试工具能否处理最大允许长度的分支名称。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": "very_long_branch_name_that_tests_the_maximum_allowed_length_for_git_branches_in_windows_systems"
        },
        "response": {
          "result": "{\"message\": \"Created new branch: very_long_branch_name_that_tests_the_maximum_allowed_length_for_git_branches_in_windows_systems\"}"
        },
        "execution_time": 0.2750828266143799,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Create Branch in System Protected Directory",
        "purpose": "验证工具在系统保护目录（如Windows/System32）中尝试创建分支时的安全性处理。",
        "args": {
          "repository_path": "C:\\Windows\\System32",
          "branch_name": "malicious-branch"
        },
        "response": {
          "result": "{\"error\": \"C:\\\\Windows\\\\System32\"}"
        },
        "execution_time": 0.003936767578125,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch in File Instead of Directory",
        "purpose": "测试工具能否识别输入路径为文件而非目录，并返回相应错误。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "branch_name": "new-feature"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt\"}"
        },
        "execution_time": 0.006000041961669922,
        "is_functional_test": false
      }
    ],
    "git_checkout": [
      {
        "case_name": "Switch to Existing Branch in Initialized Repository",
        "purpose": "验证工具能够成功切换到已存在的分支。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": "master"
        },
        "response": {
          "result": "{\"message\": \"Switched to branch: master\"}"
        },
        "execution_time": 0.18598604202270508,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Switch to Nonexistent Branch",
        "purpose": "测试工具在尝试切换到不存在的分支时是否能优雅地处理错误。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": "nonexistent_branch"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(1)\\n  cmdline: git checkout nonexistent_branch\\n  stderr: 'error: pathspec 'nonexistent_branch' did not match any file(s) known to git'\"}"
        },
        "execution_time": 0.16257143020629883,
        "is_functional_test": false
      },
      {
        "case_name": "Switch to Branch with Special Characters in Name",
        "purpose": "验证工具能否正确处理包含特殊字符的分支名。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": "feature@#test!"
        },
        "response": {
          "result": "{\"message\": \"Switched to branch: feature@#test!\"}"
        },
        "execution_time": 0.1743309497833252,
        "is_functional_test": true
      },
      {
        "case_name": "Switch Branch in Read-Only Repository",
        "purpose": "测试工具在只读Git仓库中是否能安全切换分支。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "branch_name": "master"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\"}"
        },
        "execution_time": 0.0174560546875,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to Switch Branch in Non-Git Directory",
        "purpose": "验证工具在非Git目录中调用git_checkout时是否返回错误。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(1)\\n  cmdline: git checkout main\\n  stderr: 'error: pathspec 'main' did not match any file(s) known to git'\"}"
        },
        "execution_time": 0.14612030982971191,
        "is_functional_test": false
      },
      {
        "case_name": "Switch to Very Long Branch Name",
        "purpose": "测试工具是否能处理最大允许长度的分支名称。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "branch_name": "very_long_branch_name_that_tests_the_maximum_allowed_length_for_git_branches_in_windows_systems"
        },
        "response": {
          "result": "{\"message\": \"Switched to branch: very_long_branch_name_that_tests_the_maximum_allowed_length_for_git_branches_in_windows_systems\"}"
        },
        "execution_time": 0.1529078483581543,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Switch Branch in System Protected Directory",
        "purpose": "验证工具在系统保护目录（如Windows/System32）中尝试切换分支时的安全性处理。",
        "args": {
          "repository_path": "C:\\Windows\\System32",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"error\": \"C:\\\\Windows\\\\System32\"}"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": false
      },
      {
        "case_name": "Switch Branch Using File Instead of Directory",
        "purpose": "测试工具能否识别输入参数是文件而非目录并返回相应错误。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt\"}"
        },
        "execution_time": 0.004999399185180664,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 96
}