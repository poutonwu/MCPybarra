{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "qwen-plus-mcp_git_repo_manager",
  "server_path": "workspace/pipeline-output-servers/qwen-plus/mcp_git_repo_manager/refined/server.py",
  "timestamp": "2025-07-13T00:58:00.859700",
  "tools": [
    {
      "name": "write_to_temp_file",
      "description": "\n    将内容写入指定文件路径。\n\n    Args:\n        file_path: 要写入的文件路径 (必填)。\n        content: 要写入的内容 (必填)。\n        skip_dependent_steps: 如果当前步骤失败，是否跳过依赖步骤 (可选，默认False)。\n\n    Returns:\n        包含操作结果的字典，包括成功或失败的状态及消息。\n\n    Raises:\n        ValueError: 如果提供的路径无效。\n        IOError: 如果文件写入失败。\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          },
          "skip_dependent_steps": {
            "default": false,
            "title": "Skip Dependent Steps",
            "type": "boolean"
          }
        },
        "required": [
          "file_path",
          "content"
        ],
        "title": "write_to_temp_fileArguments",
        "type": "object"
      }
    },
    {
      "name": "git_init",
      "description": "\n    初始化一个新的Git仓库。\n\n    Args:\n        repo_path: 新仓库的文件路径 (必填)。\n\n    Returns:\n        包含初始化状态的字典，包括仓库路径和初始化成功状态。\n\n    Raises:\n        ValueError: 如果提供的路径无效或已存在。\n        GitCommandError: 如果Git命令执行失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_initArguments",
        "type": "object"
      }
    },
    {
      "name": "git_status",
      "description": "\n    获取仓库当前状态。\n\n    Args:\n        repo_path: 仓库路径 (必填)。\n        skip_dependent_steps: 如果当前步骤失败，是否跳过依赖步骤 (可选，默认False)。\n\n    Returns:\n        包含仓库状态信息的字典，如当前分支、修改文件列表等。\n\n    Raises:\n        ValueError: 如果提供的路径无效。\n        GitCommandError: 如果Git命令执行失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "skip_dependent_steps": {
            "default": false,
            "title": "Skip Dependent Steps",
            "type": "boolean"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_statusArguments",
        "type": "object"
      }
    },
    {
      "name": "git_add",
      "description": "\n    将文件添加到暂存区。\n\n    Args:\n        repo_path: 仓库路径 (必填)。\n        file_path: 要添加的文件路径 (必填)。\n        skip_dependent_steps: 如果当前步骤失败，是否跳过依赖步骤 (可选，默认False)。\n\n    Returns:\n        包含操作结果的字典，包括成功或失败的状态及消息。\n\n    Raises:\n        ValueError: 如果提供的路径无效。\n        GitCommandError: 如果Git命令执行失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "skip_dependent_steps": {
            "default": false,
            "title": "Skip Dependent Steps",
            "type": "boolean"
          }
        },
        "required": [
          "repo_path",
          "file_path"
        ],
        "title": "git_addArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_unstaged",
      "description": "\n    查看未暂存的差异。\n\n    Args:\n        repo_path: 仓库路径 (必填)。\n        skip_dependent_steps: 如果当前步骤失败，是否跳过依赖步骤 (可选，默认False)。\n\n    Returns:\n        包含未暂存差异内容的字符串。\n\n    Raises:\n        ValueError: 如果提供的路径无效。\n        GitCommandError: 如果Git命令执行失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "skip_dependent_steps": {
            "default": false,
            "title": "Skip Dependent Steps",
            "type": "boolean"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_diff_unstagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_staged",
      "description": "\n    查看已暂存的差异。\n\n    Args:\n        repo_path: 仓库路径 (必填)。\n        skip_dependent_steps: 如果当前步骤失败，是否跳过依赖步骤 (可选，默认False)。\n\n    Returns:\n        包含已暂存差异内容的字符串。\n\n    Raises:\n        ValueError: 如果提供的路径无效。\n        GitCommandError: 如果Git命令执行失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "skip_dependent_steps": {
            "default": false,
            "title": "Skip Dependent Steps",
            "type": "boolean"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_diff_stagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff",
      "description": "\n    比较分支或提交。\n\n    Args:\n        repo_path: 仓库路径 (必填)。\n        commit1: 第一个比较的提交哈希或分支名 (必填)。\n        commit2: 第二个比较的提交哈希或分支名 (必填)。\n        skip_dependent_steps: 如果当前步骤失败，是否跳过依赖步骤 (可选，默认False)。\n\n    Returns:\n        包含两个提交之间差异内容的字符串。\n\n    Raises:\n        ValueError: 如果提供的路径或提交信息无效。\n        GitCommandError: 如果Git命令执行失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "commit1": {
            "title": "Commit1",
            "type": "string"
          },
          "commit2": {
            "title": "Commit2",
            "type": "string"
          },
          "skip_dependent_steps": {
            "default": false,
            "title": "Skip Dependent Steps",
            "type": "boolean"
          }
        },
        "required": [
          "repo_path",
          "commit1",
          "commit2"
        ],
        "title": "git_diffArguments",
        "type": "object"
      }
    },
    {
      "name": "git_commit",
      "description": "\n    提交更改。\n\n    Args:\n        repo_path: 仓库路径 (必填)。\n        message: 提交信息 (必填)。\n        skip_dependent_steps: 如果当前步骤失败，是否跳过依赖步骤 (可选，默认False)。\n\n    Returns:\n        包含提交结果的字典，包括提交哈希和消息。\n\n    Raises:\n        ValueError: 如果提供的路径或提交信息无效。\n        GitCommandError: 如果Git命令执行失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "message": {
            "title": "Message",
            "type": "string"
          },
          "skip_dependent_steps": {
            "default": false,
            "title": "Skip Dependent Steps",
            "type": "boolean"
          }
        },
        "required": [
          "repo_path",
          "message"
        ],
        "title": "git_commitArguments",
        "type": "object"
      }
    },
    {
      "name": "git_reset",
      "description": "\n    取消暂存文件。\n\n    Args:\n        repo_path: 仓库路径 (必填)。\n        file_path: 要取消暂存的文件路径 (必填)。\n        skip_dependent_steps: 如果当前步骤失败，是否跳过依赖步骤 (可选，默认False)。\n\n    Returns:\n        包含操作结果的字典，包括成功或失败的状态及消息。\n\n    Raises:\n        ValueError: 如果提供的路径或文件信息无效。\n        GitCommandError: 如果Git命令执行失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "skip_dependent_steps": {
            "default": false,
            "title": "Skip Dependent Steps",
            "type": "boolean"
          }
        },
        "required": [
          "repo_path",
          "file_path"
        ],
        "title": "git_resetArguments",
        "type": "object"
      }
    },
    {
      "name": "git_log",
      "description": "\n    查看提交历史。\n\n    Args:\n        repo_path: 仓库路径 (必填)。\n        skip_dependent_steps: 如果当前步骤失败，是否跳过依赖步骤 (可选，默认False)。\n\n    Returns:\n        包含提交历史的列表，每个条目包含提交哈希、作者、日期和消息。\n\n    Raises:\n        ValueError: 如果提供的路径无效。\n        GitCommandError: 如果Git命令执行失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "skip_dependent_steps": {
            "default": false,
            "title": "Skip Dependent Steps",
            "type": "boolean"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_logArguments",
        "type": "object"
      }
    },
    {
      "name": "git_create_branch",
      "description": "\n    创建新分支。\n\n    Args:\n        repo_path: 仓库路径 (必填)。\n        branch_name: 新分支名称 (必填)。\n        skip_dependent_steps: 如果当前步骤失败，是否跳过依赖步骤 (可选，默认False)。\n\n    Returns:\n        包含操作结果的字典，包括成功或失败的状态及消息。\n\n    Raises:\n        ValueError: 如果提供的路径或分支名称无效。\n        GitCommandError: 如果Git命令执行失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          },
          "skip_dependent_steps": {
            "default": false,
            "title": "Skip Dependent Steps",
            "type": "boolean"
          }
        },
        "required": [
          "repo_path",
          "branch_name"
        ],
        "title": "git_create_branchArguments",
        "type": "object"
      }
    },
    {
      "name": "git_checkout",
      "description": "\n    切换分支。\n\n    Args:\n        repo_path: 仓库路径 (必填)。\n        branch_name: 要切换到的分支名称 (必填)。\n        skip_dependent_steps: 如果当前步骤失败，是否跳过依赖步骤 (可选，默认False)。\n\n    Returns:\n        包含操作结果的字典，包括成功或失败的状态及消息。\n\n    Raises:\n        ValueError: 如果提供的路径或分支名称无效。\n        GitCommandError: 如果Git命令执行失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          },
          "skip_dependent_steps": {
            "default": false,
            "title": "Skip Dependent Steps",
            "type": "boolean"
          }
        },
        "required": [
          "repo_path",
          "branch_name"
        ],
        "title": "git_checkoutArguments",
        "type": "object"
      }
    },
    {
      "name": "git_show",
      "description": "\n    显示提交的详细内容。\n\n    Args:\n        repo_path: 仓库路径 (必填)。\n        commit_hash: 要显示的提交哈希 (必填)。\n        skip_dependent_steps: 如果当前步骤失败，是否跳过依赖步骤 (可选，默认False)。\n\n    Returns:\n        包含提交详细信息的字符串，包括元数据和差异内容。\n\n    Raises:\n        ValueError: 如果提供的路径或提交哈希无效。\n        GitCommandError: 如果Git命令执行失败。\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "commit_hash": {
            "title": "Commit Hash",
            "type": "string"
          },
          "skip_dependent_steps": {
            "default": false,
            "title": "Skip Dependent Steps",
            "type": "boolean"
          }
        },
        "required": [
          "repo_path",
          "commit_hash"
        ],
        "title": "git_showArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "write_to_temp_file": [
      {
        "case_name": "Basic File Write Operation",
        "purpose": "验证将内容写入指定路径的基本功能是否正常工作",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output_test.txt",
          "content": "This is a test content for basic file write operation."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u6587\\u4ef6\\u5199\\u5165\\u6210\\u529f\", \"data\": {\"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\output_test.txt\", \"content_length\": 54}}"
        },
        "execution_time": 0.009002208709716797,
        "is_functional_test": true
      },
      {
        "case_name": "File Write with Skip Dependent Steps True",
        "purpose": "测试当 skip_dependent_steps 设置为 True 时，失败是否跳过依赖步骤",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unwritable_dir\\output_test.txt",
          "content": "This content should not be written due to unwritable directory.",
          "skip_dependent_steps": true
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u6587\\u4ef6\\u5199\\u5165\\u6210\\u529f\", \"data\": {\"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\unwritable_dir\\\\output_test.txt\", \"content_length\": 63}}"
        },
        "execution_time": 0.00599980354309082,
        "is_functional_test": true
      },
      {
        "case_name": "Write to Read-only Directory",
        "purpose": "验证工具在尝试写入只读目录时是否能正确处理错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\output.txt",
          "content": "Trying to write into a read-only directory."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u6587\\u4ef6\\u5199\\u5165\\u6210\\u529f\", \"data\": {\"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\\\\output.txt\", \"content_length\": 43}}"
        },
        "execution_time": 0.012511730194091797,
        "is_functional_test": false
      },
      {
        "case_name": "Write to Path with Special Characters",
        "purpose": "测试文件路径中包含特殊字符时的兼容性",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special#chars@write!.txt",
          "content": "Content for special character path test."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u6587\\u4ef6\\u5199\\u5165\\u6210\\u529f\", \"data\": {\"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special#chars@write!.txt\", \"content_length\": 40}}"
        },
        "execution_time": 0.0050013065338134766,
        "is_functional_test": true
      },
      {
        "case_name": "Write to Invalid Path",
        "purpose": "测试提供无效文件路径时是否抛出 ValueError",
        "args": {
          "file_path": "<invalid>:\\path\\that\\does\\not\\exist\\test.txt",
          "content": "Test content for invalid path."
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"IOError\", \"message\": \"\\u6587\\u4ef6\\u5199\\u5165\\u5931\\u8d25: [WinError 123] \\u6587\\u4ef6\\u540d\\u3001\\u76ee\\u5f55\\u540d\\u6216\\u5377\\u6807\\u8bed\\u6cd5\\u4e0d\\u6b63\\u786e\\u3002: '<invalid>:'\"}"
        },
        "execution_time": 0.00600123405456543,
        "is_functional_test": false
      },
      {
        "case_name": "Write to Nested Git Subdirectory",
        "purpose": "测试向嵌套的 .git 子目录中写入文件的功能",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\.git\\hooks\\custom_hook.sh",
          "content": "#!/bin/sh\necho \"Custom hook executed\""
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u6587\\u4ef6\\u5199\\u5165\\u6210\\u529f\", \"data\": {\"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\.git\\\\hooks\\\\custom_hook.sh\", \"content_length\": 37}}"
        },
        "execution_time": 0.006999015808105469,
        "is_functional_test": true
      },
      {
        "case_name": "Write to Very Long Path",
        "purpose": "测试写入超长路径文件时的行为，以验证 Windows 路径限制处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_directory_name_that_might_exceed_windows_max_path_length_limitations\\very_very_long_filename_that_tests_the_maximum_allowed_length_for_file_saves_in_windows_systems_output.txt",
          "content": "Testing long file path handling in Windows systems."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u6587\\u4ef6\\u5199\\u5165\\u6210\\u529f\", \"data\": {\"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_output_directory_name_that_might_exceed_windows_max_path_length_limitations\\\\very_very_long_filename_that_tests_the_maximum_allowed_length_for_file_saves_in_windows_systems_output.txt\", \"content_length\": 51}}"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": true
      }
    ],
    "git_init": [
      {
        "case_name": "Basic Git Repository Initialization",
        "purpose": "验证在有效路径中初始化一个新的Git仓库的基本功能是否正常工作",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u4ed3\\u5e93\\u521d\\u59cb\\u5316\\u6210\\u529f\", \"data\": {\"repo_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\", \"initialized\": true}}"
        },
        "execution_time": 0.20740342140197754,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repo in Nested Subdirectory",
        "purpose": "测试在嵌套子目录中初始化Git仓库的功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nested\\git\\repo\\path"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u4ed3\\u5e93\\u521d\\u59cb\\u5316\\u6210\\u529f\", \"data\": {\"repo_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nested\\\\git\\\\repo\\\\path\", \"initialized\": true}}"
        },
        "execution_time": 0.17150259017944336,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repo with Special Characters in Path",
        "purpose": "测试包含特殊字符的路径是否能正确初始化Git仓库",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo@special#chars!"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u4ed3\\u5e93\\u521d\\u59cb\\u5316\\u6210\\u529f\", \"data\": {\"repo_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\repo@special#chars!\", \"initialized\": true}}"
        },
        "execution_time": 0.18389010429382324,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Git Init in Existing Git Directory",
        "purpose": "验证工具在已存在的Git目录中尝试再次初始化时是否抛出错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u8def\\u5f84\\u5df2\\u5b58\\u5728: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\"}"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": false
      },
      {
        "case_name": "Git Init with Invalid Path Characters",
        "purpose": "测试使用非法路径字符进行Git初始化时是否抛出ValueError",
        "args": {
          "repo_path": "<invalid>:\\path\\with\\invalid\\chars"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"UnexpectedError\", \"message\": \"\\u672a\\u77e5\\u9519\\u8bef: [WinError 123] \\u6587\\u4ef6\\u540d\\u3001\\u76ee\\u5f55\\u540d\\u6216\\u5377\\u6807\\u8bed\\u6cd5\\u4e0d\\u6b63\\u786e\\u3002: '<invalid>:'\"}"
        },
        "execution_time": 0.0030002593994140625,
        "is_functional_test": false
      },
      {
        "case_name": "Git Init in Read-only Directory",
        "purpose": "验证在只读目录中初始化Git仓库是否会失败并抛出适当错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\git_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u4ed3\\u5e93\\u521d\\u59cb\\u5316\\u6210\\u529f\", \"data\": {\"repo_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\\\\git_repo\", \"initialized\": true}}"
        },
        "execution_time": 0.18300843238830566,
        "is_functional_test": false
      },
      {
        "case_name": "Git Init with Very Long Path",
        "purpose": "测试超长路径下Git仓库初始化的行为，以验证Windows最大路径限制处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_directory_name_that_might_exceed_windows_max_path_length_limitations\\very_very_long_git_repo_name_that_tests_the_maximum_allowed_length_for_file_saves_in_windows_systems"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"GitCommandError\", \"message\": \"Git\\u547d\\u4ee4\\u6267\\u884c\\u5931\\u8d25: Cmd('git') failed due to: exit code(1)\\n  cmdline: git init\\n  stderr: 'D:/devWorkspace/MCPServer-Generator/testSystem/testFiles/very_long_output_directory_name_that_might_exceed_windows_max_path_length_limitations/very_very_long_git_repo_name_that_tests_the_maximum_allowed_length_for_file_saves_in_windows_systems/.git: Filename too long'\"}"
        },
        "execution_time": 0.13232851028442383,
        "is_functional_test": true
      },
      {
        "case_name": "Git Init in .git Subdirectory",
        "purpose": "测试在已有的.git子目录中创建新Git仓库的安全性限制，防止.git嵌套",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\submodule\\new_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u4ed3\\u5e93\\u521d\\u59cb\\u5316\\u6210\\u529f\", \"data\": {\"repo_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\submodule\\\\new_repo\", \"initialized\": true}}"
        },
        "execution_time": 0.16431760787963867,
        "is_functional_test": false
      }
    ],
    "git_status": [
      {
        "case_name": "Basic Git Status Check",
        "purpose": "验证在已初始化的Git仓库中获取基本状态信息的功能是否正常工作",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u72b6\\u6001\\u4fe1\\u606f\\u83b7\\u53d6\\u6210\\u529f\", \"data\": {\"repo_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\", \"is_dirty\": true, \"active_branch\": \"feature@#test!\", \"untracked_files\": [\"nested/git/repo/path/\", \"output_test.txt\", \"screenshot_!@#$_cropped.png\", \"special#chars@write!.txt\", \"xue_cropped.jpg\", \"xue_gaussian_filtered.jpg\"], \"modified_files\": [\"copied_xue.jpg\", \"default_params_file.txt\", \"empty_content_file.txt\", \"empty_metadata.docx\", \"existing_file.txt\", \"malicious_metadata.docx\", \"metadata_document.docx\", \"new_repo\", \"new_test_file.txt\", \"resized_xue.jpg\", \"special#chars@file!.jpg\", \"special#chars@file!.txt\", \"special#chars@resized!.jpg\"], \"staged_files\": []}}"
        },
        "execution_time": 0.7742760181427002,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status with Skip Dependent Steps True",
        "purpose": "测试当 skip_dependent_steps 设置为 True 时，工具是否能继续执行依赖步骤失败的情况",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "skip_dependent_steps": true
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u72b6\\u6001\\u4fe1\\u606f\\u83b7\\u53d6\\u6210\\u529f\", \"data\": {\"repo_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\", \"is_dirty\": true, \"active_branch\": \"feature@#test!\", \"untracked_files\": [\"nested/git/repo/path/\", \"output_test.txt\", \"screenshot_!@#$_cropped.png\", \"special#chars@write!.txt\", \"xue_cropped.jpg\", \"xue_gaussian_filtered.jpg\"], \"modified_files\": [\"copied_xue.jpg\", \"default_params_file.txt\", \"empty_content_file.txt\", \"empty_metadata.docx\", \"existing_file.txt\", \"malicious_metadata.docx\", \"metadata_document.docx\", \"new_repo\", \"new_test_file.txt\", \"resized_xue.jpg\", \"special#chars@file!.jpg\", \"special#chars@file!.txt\", \"special#chars@resized!.jpg\"], \"staged_files\": []}}"
        },
        "execution_time": 0.9074110984802246,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status on Read-only Repository",
        "purpose": "验证在只读Git仓库中获取状态信息是否会失败并抛出适当错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\git_repo\\.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\\\\git_repo\\\\.git\"}"
        },
        "execution_time": 0.003931760787963867,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status with Special Characters in Path",
        "purpose": "测试包含特殊字符的路径是否能正确获取Git仓库状态信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo@special#chars!\\.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\repo@special#chars!\\\\.git\"}"
        },
        "execution_time": 0.00728297233581543,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status for Invalid Repository Path",
        "purpose": "测试提供无效Git仓库路径时是否抛出 ValueError",
        "args": {
          "repo_path": "<invalid>:\\path\\that\\does\\not\\exist\\.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: <invalid>:\\\\path\\\\that\\\\does\\\\not\\\\exist\\\\.git\"}"
        },
        "execution_time": 0.004912853240966797,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status on Nested .git Subdirectory",
        "purpose": "测试在嵌套的 .git 子目录中获取Git状态信息的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\.git\"}"
        },
        "execution_time": 0.0040013790130615234,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status with Very Long Path",
        "purpose": "测试超长路径下Git状态获取的行为，以验证Windows最大路径限制处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_directory_name_that_might_exceed_windows_max_path_length_limitations\\very_very_long_git_repo_name_that_tests_the_maximum_allowed_length_for_file_saves_in_windows_systems\\.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_output_directory_name_that_might_exceed_windows_max_path_length_limitations\\\\very_very_long_git_repo_name_that_tests_the_maximum_allowed_length_for_file_saves_in_windows_systems\\\\.git\"}"
        },
        "execution_time": 0.0045146942138671875,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status on Non-Git Directory",
        "purpose": "验证在非Git目录中尝试获取Git状态信息是否会失败并抛出 GitCommandError",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.004685878753662109,
        "is_functional_test": false
      }
    ],
    "git_add": [
      {
        "case_name": "Basic Git Add Operation",
        "purpose": "验证将文件添加到暂存区的基本功能是否正常工作",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output_test.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.004858970642089844,
        "is_functional_test": true
      },
      {
        "case_name": "Git Add with Skip Dependent Steps True",
        "purpose": "测试当 skip_dependent_steps 设置为 True 时，失败是否跳过依赖步骤",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output_test.txt",
          "skip_dependent_steps": true
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"DependencySkipped\", \"message\": \"\\u8df3\\u8fc7\\u4f9d\\u8d56\\u6b65\\u9aa4: \\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_repo\"}"
        },
        "execution_time": 0.0029985904693603516,
        "is_functional_test": false
      },
      {
        "case_name": "Add File to Read-only Git Directory",
        "purpose": "验证尝试将文件添加到只读Git仓库目录是否会抛出错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\git_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output_test.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\\\\git_repo\"}"
        },
        "execution_time": 0.004002094268798828,
        "is_functional_test": false
      },
      {
        "case_name": "Git Add File with Special Characters in Path",
        "purpose": "测试包含特殊字符的文件路径是否能正确添加到Git暂存区",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special#chars@write!.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.006999969482421875,
        "is_functional_test": true
      },
      {
        "case_name": "Git Add Invalid File Path",
        "purpose": "测试提供无效文件路径时是否抛出 ValueError",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "file_path": "<invalid>:\\path\\that\\does\\not\\exist\\test.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.004004240036010742,
        "is_functional_test": false
      },
      {
        "case_name": "Git Add to Nested .git Subdirectory",
        "purpose": "测试向嵌套的 .git 子目录中添加文件的功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\submodule\\new_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\hooks\\custom_hook.sh"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u6587\\u4ef6\\u4e0d\\u5b58\\u5728: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\hooks\\\\custom_hook.sh\"}"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": false
      },
      {
        "case_name": "Git Add Very Long File Path",
        "purpose": "测试添加超长路径文件时的行为，以验证 Windows 路径限制处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_directory_name_that_might_exceed_windows_max_path_length_limitations",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_directory_name_that_might_exceed_windows_max_path_length_limitations\\very_very_long_filename_that_tests_the_maximum_allowed_length_for_file_saves_in_windows_systems_output.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_output_directory_name_that_might_exceed_windows_max_path_length_limitations\"}"
        },
        "execution_time": 0.009509801864624023,
        "is_functional_test": true
      },
      {
        "case_name": "Git Add Protected .git File",
        "purpose": "测试尝试添加受保护的.git配置文件时的安全性限制",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\config"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u6587\\u4ef6 D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\config \\u6dfb\\u52a0\\u5230\\u6682\\u5b58\\u533a\\u6210\\u529f\", \"data\": {\"repo_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\", \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\config\", \"added\": true}}"
        },
        "execution_time": 0.00700068473815918,
        "is_functional_test": false
      }
    ],
    "git_diff_unstaged": [
      {
        "case_name": "Basic Unstaged Diff Check",
        "purpose": "验证在已初始化的Git仓库中查看未暂存差异的基本功能是否正常",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.003996372222900391,
        "is_functional_test": true
      },
      {
        "case_name": "Unstaged Diff in Nested Git Directory",
        "purpose": "测试在嵌套子目录的Git仓库中查看未暂存差异的功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nested\\git\\repo\\path"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u672a\\u6682\\u5b58\\u5dee\\u5f02\\u83b7\\u53d6\\u6210\\u529f\", \"data\": \"\\u672a\\u6682\\u5b58\\u7684\\u66f4\\u6539:\\n\"}"
        },
        "execution_time": 0.26822352409362793,
        "is_functional_test": true
      },
      {
        "case_name": "Unstaged Diff with Special Characters in Path",
        "purpose": "验证包含特殊字符的仓库路径是否能正确执行未暂存差异查看",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo@special#chars!"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\repo@special#chars!\"}"
        },
        "execution_time": 0.003997325897216797,
        "is_functional_test": true
      },
      {
        "case_name": "Unstaged Diff in Read-only Directory",
        "purpose": "测试在只读目录中查看未暂存差异是否会失败并抛出适当错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\git_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\\\\git_repo\"}"
        },
        "execution_time": 0.004011392593383789,
        "is_functional_test": false
      },
      {
        "case_name": "Unstaged Diff with Skip Dependent Steps True",
        "purpose": "测试当 skip_dependent_steps 设置为 True 时，路径无效是否跳过依赖步骤",
        "args": {
          "repo_path": "<invalid>:\\path\\does\\not\\exist",
          "skip_dependent_steps": true
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"DependencySkipped\", \"message\": \"\\u8df3\\u8fc7\\u4f9d\\u8d56\\u6b65\\u9aa4: \\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: <invalid>:\\\\path\\\\does\\\\not\\\\exist\"}"
        },
        "execution_time": 0.004988670349121094,
        "is_functional_test": true
      },
      {
        "case_name": "Unstaged Diff in Non-Git Directory",
        "purpose": "验证在未初始化为Git仓库的目录中执行未暂存差异查看时是否抛出GitCommandError",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\non_git_dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\non_git_dir\"}"
        },
        "execution_time": 0.007002592086791992,
        "is_functional_test": false
      },
      {
        "case_name": "Unstaged Diff with Very Long Path",
        "purpose": "测试超长路径下查看未暂存差异的行为，验证Windows最大路径限制处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_directory_name_that_might_exceed_windows_max_path_length_limitations\\very_very_long_git_repo_name_that_tests_the_maximum_allowed_length_for_file_saves_in_windows_systems"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_output_directory_name_that_might_exceed_windows_max_path_length_limitations\\\\very_very_long_git_repo_name_that_tests_the_maximum_allowed_length_for_file_saves_in_windows_systems\"}"
        },
        "execution_time": 0.004508018493652344,
        "is_functional_test": true
      },
      {
        "case_name": "Unstaged Diff in .git Subdirectory",
        "purpose": "测试在.git子目录中查看未暂存差异的安全性限制",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\submodule\\new_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u672a\\u6682\\u5b58\\u5dee\\u5f02\\u83b7\\u53d6\\u6210\\u529f\", \"data\": \"\\u672a\\u6682\\u5b58\\u7684\\u66f4\\u6539:\\n\"}"
        },
        "execution_time": 0.27141284942626953,
        "is_functional_test": false
      }
    ],
    "git_commit": [
      {
        "case_name": "Basic Git Commit Operation",
        "purpose": "验证在已初始化的Git仓库中进行基本提交操作是否正常工作",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "message": "Initial commit"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.013002872467041016,
        "is_functional_test": true
      },
      {
        "case_name": "Git Commit with Skip Dependent Steps True",
        "purpose": "测试当 skip_dependent_steps 设置为 True 时，提交失败是否跳过依赖步骤",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unwritable_dir\\git_repo",
          "message": "Commit with skip dependent steps",
          "skip_dependent_steps": true
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"DependencySkipped\", \"message\": \"\\u8df3\\u8fc7\\u4f9d\\u8d56\\u6b65\\u9aa4: \\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\unwritable_dir\\\\git_repo\"}"
        },
        "execution_time": 0.012997150421142578,
        "is_functional_test": true
      },
      {
        "case_name": "Commit to Read-only Git Repository",
        "purpose": "验证尝试向只读Git仓库提交更改是否会失败并抛出适当错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\git_repo",
          "message": "Trying to commit to a read-only repository"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\\\\git_repo\"}"
        },
        "execution_time": 0.013010501861572266,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Special Characters in Message",
        "purpose": "测试提交信息中包含特殊字符时是否能正确处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "message": "Commit message with special characters: @#%!&*()_+=-[]{};:,.<>?/~`"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.021705150604248047,
        "is_functional_test": true
      },
      {
        "case_name": "Commit to Invalid Git Repository Path",
        "purpose": "测试提供无效仓库路径时是否抛出 ValueError",
        "args": {
          "repo_path": "<invalid>:\\path\\that\\does\\not\\exist\\.git",
          "message": "Test commit to invalid path"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: <invalid>:\\\\path\\\\that\\\\does\\\\not\\\\exist\\\\.git\"}"
        },
        "execution_time": 0.028903961181640625,
        "is_functional_test": false
      },
      {
        "case_name": "Commit Empty Message",
        "purpose": "验证空提交信息是否被拒绝并抛出 ValueError",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "message": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.01399993896484375,
        "is_functional_test": false
      },
      {
        "case_name": "Commit to Nested .git Subdirectory",
        "purpose": "测试向嵌套的 .git 子目录提交更改的安全性限制",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\submodule\\new_repo",
          "message": "Commit to nested git subdirectory"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u6ca1\\u6709\\u9700\\u8981\\u63d0\\u4ea4\\u7684\\u66f4\\u6539\"}"
        },
        "execution_time": 0.5746257305145264,
        "is_functional_test": false
      }
    ],
    "git_diff_staged": [
      {
        "case_name": "Basic Staged Diff Retrieval",
        "purpose": "验证工具在有效Git仓库路径中获取已暂存差异的基本功能是否正常工作",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u5df2\\u6682\\u5b58\\u5dee\\u5f02\\u83b7\\u53d6\\u6210\\u529f\", \"data\": \"\\u5df2\\u6682\\u5b58\\u7684\\u66f4\\u6539:\\n- \\u6587\\u4ef6: .git/config\\n  \\u53d8\\u5316\\u7c7b\\u578b: D\\n\"}"
        },
        "execution_time": 0.40099573135375977,
        "is_functional_test": true
      },
      {
        "case_name": "Staged Diff with Skip Dependent Steps True",
        "purpose": "测试当 skip_dependent_steps 设置为 True 时，错误是否跳过依赖步骤",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "skip_dependent_steps": true
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u5df2\\u6682\\u5b58\\u5dee\\u5f02\\u83b7\\u53d6\\u6210\\u529f\", \"data\": \"\\u5df2\\u6682\\u5b58\\u7684\\u66f4\\u6539:\\n- \\u6587\\u4ef6: .git/config\\n  \\u53d8\\u5316\\u7c7b\\u578b: D\\n\"}"
        },
        "execution_time": 0.3935821056365967,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Staged Diff on Non-Git Directory",
        "purpose": "验证在非Git目录尝试获取已暂存差异是否会抛出 GitCommandError",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\non_git_dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\non_git_dir\"}"
        },
        "execution_time": 0.004032611846923828,
        "is_functional_test": false
      },
      {
        "case_name": "Staged Diff in Nested Git Subdirectory",
        "purpose": "测试在嵌套的 .git 子目录中获取已暂存差异的功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\submodule\\new_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"UnexpectedError\", \"message\": \"\\u672a\\u77e5\\u9519\\u8bef: Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.007904291152954102,
        "is_functional_test": true
      },
      {
        "case_name": "Staged Diff with Special Characters in Path",
        "purpose": "测试包含特殊字符的Git仓库路径是否能正确获取已暂存差异",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git@special#chars!"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git@special#chars!\"}"
        },
        "execution_time": 0.004423856735229492,
        "is_functional_test": true
      },
      {
        "case_name": "Staged Diff in Read-only Git Repository",
        "purpose": "验证在只读Git仓库中获取已暂存差异是否会失败并抛出适当错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\\\\.git\"}"
        },
        "execution_time": 0.005646944046020508,
        "is_functional_test": false
      },
      {
        "case_name": "Staged Diff with Very Long Path",
        "purpose": "测试超长路径下获取已暂存差异的行为，以验证Windows最大路径限制处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\very_long_subdir_name_that_may_exceed_windows_max_path_limit"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\very_long_subdir_name_that_may_exceed_windows_max_path_limit\"}"
        },
        "execution_time": 0.007097005844116211,
        "is_functional_test": true
      },
      {
        "case_name": "Staged Diff in Corrupted Git Repository",
        "purpose": "验证工具能否检测到损坏的Git仓库并抛出适当的Git命令错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\corrupted_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\corrupted_repo\"}"
        },
        "execution_time": 0.005270481109619141,
        "is_functional_test": false
      }
    ],
    "git_log": [
      {
        "case_name": "Basic Git Log Retrieval",
        "purpose": "验证在已存在的Git仓库中获取提交历史的基本功能是否正常工作",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u63d0\\u4ea4\\u5386\\u53f2\\u83b7\\u53d6\\u6210\\u529f\", \"data\": {\"repo_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\", \"commit_count\": 5, \"commits\": [{\"hash\": \"f47f47c1ab175ea51436d6026f890e4c6606fcb0\", \"author\": \"pouchine\", \"date\": 1752339224, \"message\": \"perf: Update dependencies with very long message that exceeds normal length limit for commit messages which should still be accepted by the git_commit tool without any issues or truncation\"}, {\"hash\": \"97506895b7ce2818423104b837e7e59d51bd2a58\", \"author\": \"pouchine\", \"date\": 1752339224, \"message\": \"fix: Handle special chars like @#&% in message\"}, {\"hash\": \"955e9b5c602c92a04de61fb108cc5c9dfc2e2c6f\", \"author\": \"pouchine\", \"date\": 1752339224, \"message\": \"\"}, {\"hash\": \"a12c86de3d42becd083d6be46a271356edd6e751\", \"author\": \"pouchine\", \"date\": 1752339223, \"message\": \"feat: Add new feature\"}, {\"hash\": \"f149c3e988c7946fe8f1ef26cd7db8cf9ea58a2d\", \"author\": \"pouchine\", \"date\": 1752338796, \"message\": \"Test commit\"}]}}"
        },
        "execution_time": 0.42769765853881836,
        "is_functional_test": true
      },
      {
        "case_name": "Git Log with Skip Dependent Steps True",
        "purpose": "测试当 skip_dependent_steps 设置为 True 时，路径错误是否跳过依赖步骤并返回适当结果",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_repo_path",
          "skip_dependent_steps": true
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"DependencySkipped\", \"message\": \"\\u8df3\\u8fc7\\u4f9d\\u8d56\\u6b65\\u9aa4: \\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_repo_path\"}"
        },
        "execution_time": 0.003837108612060547,
        "is_functional_test": true
      },
      {
        "case_name": "Git Log from Nested Subdirectory",
        "purpose": "验证工具能否正确从嵌套子目录中的Git仓库获取提交历史",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\submodule\\new_repo\\.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"Reference at 'refs/heads/master' does not exist\"}"
        },
        "execution_time": 0.00551295280456543,
        "is_functional_test": true
      },
      {
        "case_name": "Git Log with Special Characters in Path",
        "purpose": "测试包含特殊字符的路径是否能正确获取提交历史",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git@special#chars!"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git@special#chars!\"}"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": true
      },
      {
        "case_name": "Git Log from Read-only Repository",
        "purpose": "验证工具能否从只读仓库中安全地获取提交历史",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\\\\.git\"}"
        },
        "execution_time": 0.007176399230957031,
        "is_functional_test": true
      },
      {
        "case_name": "Git Log with Invalid Path",
        "purpose": "测试提供无效仓库路径时是否抛出 ValueError 并正确处理错误",
        "args": {
          "repo_path": "<invalid>:\\path\\that\\does\\not\\exist"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: <invalid>:\\\\path\\\\that\\\\does\\\\not\\\\exist\"}"
        },
        "execution_time": 0.007022380828857422,
        "is_functional_test": false
      },
      {
        "case_name": "Git Log from Very Long Path",
        "purpose": "测试超长路径下获取Git提交历史的行为以验证Windows最大路径限制处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_directory_name_that_might_exceed_windows_max_path_length_limitations\\very_very_long_git_repo_name_that_tests_the_maximum_allowed_length_for_file_saves_in_windows_systems\\.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_output_directory_name_that_might_exceed_windows_max_path_length_limitations\\\\very_very_long_git_repo_name_that_tests_the_maximum_allowed_length_for_file_saves_in_windows_systems\\\\.git\"}"
        },
        "execution_time": 0.003998756408691406,
        "is_functional_test": true
      },
      {
        "case_name": "Git Log from Nested .git Directory",
        "purpose": "测试从嵌套的 .git 子目录中获取提交历史的安全性限制和兼容性",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\.git\\hooks"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\.git\\\\hooks\"}"
        },
        "execution_time": 0.0040988922119140625,
        "is_functional_test": true
      }
    ],
    "git_create_branch": [
      {
        "case_name": "Basic Branch Creation",
        "purpose": "验证在已初始化的Git仓库中创建新分支的基本功能是否正常工作",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "branch_name": "feature/basic_branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.005000114440917969,
        "is_functional_test": true
      },
      {
        "case_name": "Branch Creation with Skip Dependent Steps True",
        "purpose": "测试当 skip_dependent_steps 设置为 True 时，失败是否跳过依赖步骤",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\non_existing_repo",
          "branch_name": "feature/skip_dependent",
          "skip_dependent_steps": true
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"DependencySkipped\", \"message\": \"\\u8df3\\u8fc7\\u4f9d\\u8d56\\u6b65\\u9aa4: \\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\non_existing_repo\"}"
        },
        "execution_time": 0.006841421127319336,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch in Nested Subdirectory",
        "purpose": "验证在嵌套子目录中的Git仓库中创建新分支的功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nested\\git\\repo\\path",
          "branch_name": "feature/nested_subdir_branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"UnexpectedError\", \"message\": \"\\u672a\\u77e5\\u9519\\u8bef: Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.013604402542114258,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch with Special Characters in Name",
        "purpose": "测试使用包含特殊字符的分支名称是否能正确创建分支",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "branch_name": "feature@#special!branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.008069753646850586,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Create Branch in Non-git Directory",
        "purpose": "验证工具在非Git目录中尝试创建分支时是否抛出 GitCommandError",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "branch_name": "feature/non_git_branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\"}"
        },
        "execution_time": 0.0058100223541259766,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch in .git Subdirectory",
        "purpose": "测试在.git子目录中创建分支的安全性限制，防止在敏感目录下操作",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "feature/git_subdir_branch"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u5206\\u652f feature/git_subdir_branch \\u521b\\u5efa\\u6210\\u529f\", \"data\": {\"repo_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\", \"branch_name\": \"feature/git_subdir_branch\", \"created\": true}}"
        },
        "execution_time": 0.1698908805847168,
        "is_functional_test": false
      },
      {
        "case_name": "Create Very Long Branch Name",
        "purpose": "测试创建超长分支名的行为，以验证Git的最大分支名长度限制",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "branch_name": "very_very_long_branch_name_that_may_exceed_git_limits_and_cause_issues_when_creating_new_branches_in_repository"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.011030912399291992,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch with Empty Name",
        "purpose": "测试提供空分支名称时是否抛出 ValueError",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "branch_name": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.0040242671966552734,
        "is_functional_test": false
      }
    ],
    "git_checkout": [
      {
        "case_name": "Basic Git Checkout Operation",
        "purpose": "验证在有效仓库路径中切换到现有分支的基本功能是否正常工作",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "master"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u6210\\u529f\\u5207\\u6362\\u5230\\u5206\\u652f master\", \"data\": {\"repo_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\", \"branch_name\": \"master\", \"checked_out\": true}}"
        },
        "execution_time": 0.35115885734558105,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout with Skip Dependent Steps True",
        "purpose": "测试当 skip_dependent_steps 设置为 True 时，失败是否跳过依赖步骤",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "nonexistent_branch",
          "skip_dependent_steps": true
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"DependencySkipped\", \"message\": \"\\u8df3\\u8fc7\\u4f9d\\u8d56\\u6b65\\u9aa4: \\u5206\\u652f nonexistent_branch \\u4e0d\\u5b58\\u5728\"}"
        },
        "execution_time": 0.0050203800201416016,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout to Invalid Branch",
        "purpose": "验证尝试切换到不存在的分支时是否抛出GitCommandError",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "invalid_branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u5206\\u652f invalid_branch \\u4e0d\\u5b58\\u5728\"}"
        },
        "execution_time": 0.005002737045288086,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout in Nested Git Subdirectory",
        "purpose": "测试在嵌套的.git子目录中切换分支的功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\submodule\\new_repo\\.git",
          "branch_name": "master"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u5206\\u652f master \\u4e0d\\u5b58\\u5728\"}"
        },
        "execution_time": 0.007625102996826172,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout with Special Characters in Branch Name",
        "purpose": "测试包含特殊字符的分支名称是否能正确处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "feature@#test!"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u6210\\u529f\\u5207\\u6362\\u5230\\u5206\\u652f feature@#test!\", \"data\": {\"repo_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\", \"branch_name\": \"feature@#test!\", \"checked_out\": true}}"
        },
        "execution_time": 0.17658305168151855,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout to Branch in Read-only Repository",
        "purpose": "验证在只读仓库中切换分支是否会失败并抛出适当错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\git_repo\\.git",
          "branch_name": "master"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\\\\git_repo\\\\.git\"}"
        },
        "execution_time": 0.003998756408691406,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout with Very Long Branch Name",
        "purpose": "测试超长分支名下Git checkout的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "very_very_long_branch_name_that_might_exceed_normal_limit_and_cause_issues_when_checking_out"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u5206\\u652f very_very_long_branch_name_that_might_exceed_normal_limit_and_cause_issues_when_checking_out \\u4e0d\\u5b58\\u5728\"}"
        },
        "execution_time": 0.005014181137084961,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout Using Invalid Repository Path",
        "purpose": "测试提供无效仓库路径时是否抛出ValueError",
        "args": {
          "repo_path": "<invalid>:\\path\\that\\does\\not\\exist\\.git",
          "branch_name": "master"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: <invalid>:\\\\path\\\\that\\\\does\\\\not\\\\exist\\\\.git\"}"
        },
        "execution_time": 0.009872913360595703,
        "is_functional_test": false
      }
    ],
    "git_diff": [
      {
        "case_name": "Basic Git Diff Between Commits",
        "purpose": "验证在有效仓库路径中比较两个提交的基本功能是否正常工作",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "commit1": "HEAD~1",
          "commit2": "HEAD"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u63d0\\u4ea4\\u5dee\\u5f02\\u83b7\\u53d6\\u6210\\u529f\", \"data\": \"\\u6ca1\\u6709\\u53d1\\u73b0\\u4e24\\u4e2a\\u63d0\\u4ea4\\u4e4b\\u95f4\\u7684\\u5dee\\u5f02\\u3002\"}"
        },
        "execution_time": 0.4310178756713867,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff with Skip Dependent Steps True",
        "purpose": "测试当 skip_dependent_steps 设置为 True 时，失败是否跳过依赖步骤",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "commit1": "invalid-commit-hash",
          "commit2": "HEAD",
          "skip_dependent_steps": true
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"DependencySkipped\", \"message\": \"\\u8df3\\u8fc7\\u4f9d\\u8d56\\u6b65\\u9aa4: \\u65e0\\u6cd5\\u89e3\\u6790\\u7b2c\\u4e00\\u4e2a\\u63d0\\u4ea4\\u6807\\u8bc6: invalid-commit-hash\"}"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff in Read-only Repository",
        "purpose": "验证工具在只读仓库目录中执行diff命令是否会失败并抛出适当错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\.git",
          "commit1": "HEAD~1",
          "commit2": "HEAD"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\\\\.git\"}"
        },
        "execution_time": 0.003739595413208008,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff with Special Characters in Commit Hash",
        "purpose": "测试提交哈希包含特殊字符时的兼容性处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "commit1": "feature@#test!",
          "commit2": "HEAD"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6cd5\\u89e3\\u6790\\u7b2c\\u4e00\\u4e2a\\u63d0\\u4ea4\\u6807\\u8bc6: feature@#test!\"}"
        },
        "execution_time": 0.008217573165893555,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff with Invalid Repository Path",
        "purpose": "测试提供无效仓库路径时是否抛出 ValueError",
        "args": {
          "repo_path": "<invalid>:\\path\\that\\does\\not\\exist\\.git",
          "commit1": "HEAD~1",
          "commit2": "HEAD"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: <invalid>:\\\\path\\\\that\\\\does\\\\not\\\\exist\\\\.git\"}"
        },
        "execution_time": 0.005999565124511719,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Between Branch and Commit",
        "purpose": "验证比较分支和提交哈希的功能是否正常",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "commit1": "refs/heads/master",
          "commit2": "HEAD~1"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u63d0\\u4ea4\\u5dee\\u5f02\\u83b7\\u53d6\\u6210\\u529f\", \"data\": \"\\u6ca1\\u6709\\u53d1\\u73b0\\u4e24\\u4e2a\\u63d0\\u4ea4\\u4e4b\\u95f4\\u7684\\u5dee\\u5f02\\u3002\"}"
        },
        "execution_time": 0.485546350479126,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff in Nested Git Subdirectory",
        "purpose": "测试在嵌套的.git子目录中执行diff命令的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\submodule\\new_repo\\.git",
          "commit1": "HEAD~1",
          "commit2": "HEAD"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6cd5\\u89e3\\u6790\\u7b2c\\u4e00\\u4e2a\\u63d0\\u4ea4\\u6807\\u8bc6: HEAD~1\"}"
        },
        "execution_time": 0.003998517990112305,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff with Very Long Commit Hash",
        "purpose": "测试使用超长提交哈希进行比较时的行为",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "commit1": "very_long_commit_hash_that_exceeds_normal_length_and_may_cause_issues_when_comparing_in_git_diff",
          "commit2": "HEAD"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6cd5\\u89e3\\u6790\\u7b2c\\u4e00\\u4e2a\\u63d0\\u4ea4\\u6807\\u8bc6: very_long_commit_hash_that_exceeds_normal_length_and_may_cause_issues_when_comparing_in_git_diff\"}"
        },
        "execution_time": 0.016151905059814453,
        "is_functional_test": true
      }
    ],
    "git_reset": [
      {
        "case_name": "Basic Git Reset Operation",
        "purpose": "验证取消暂存文件的基本功能是否正常工作",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\thresholded_image.png"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u6587\\u4ef6 D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\thresholded_image.png \\u4e0d\\u5728\\u6682\\u5b58\\u533a\"}"
        },
        "execution_time": 0.29424071311950684,
        "is_functional_test": true
      },
      {
        "case_name": "Git Reset with Skip Dependent Steps True",
        "purpose": "测试当 skip_dependent_steps 设置为 True 时，失败是否跳过依赖步骤",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_file.txt",
          "skip_dependent_steps": true
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"DependencySkipped\", \"message\": \"\\u8df3\\u8fc7\\u4f9d\\u8d56\\u6b65\\u9aa4: \\u6587\\u4ef6 D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_file.txt \\u4e0d\\u5728\\u6682\\u5b58\\u533a\"}"
        },
        "execution_time": 0.3021268844604492,
        "is_functional_test": true
      },
      {
        "case_name": "Git Reset on Non-existent File",
        "purpose": "验证工具在尝试取消暂存不存在的文件时是否抛出错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\non_existent_file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u6587\\u4ef6 D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\non_existent_file.txt \\u4e0d\\u5728\\u6682\\u5b58\\u533a\"}"
        },
        "execution_time": 0.28801393508911133,
        "is_functional_test": false
      },
      {
        "case_name": "Git Reset on Read-only File",
        "purpose": "验证工具在尝试取消暂存只读文件时是否能正确处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\protected_file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u6587\\u4ef6 D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\protected_file.txt \\u4e0d\\u5728\\u6682\\u5b58\\u533a\"}"
        },
        "execution_time": 0.3487842082977295,
        "is_functional_test": false
      },
      {
        "case_name": "Git Reset with Special Characters in File Path",
        "purpose": "测试文件路径中包含特殊字符时的兼容性",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\feature@#test!.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u6587\\u4ef6 D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\feature@#test!.txt \\u4e0d\\u5728\\u6682\\u5b58\\u533a\"}"
        },
        "execution_time": 0.3482320308685303,
        "is_functional_test": true
      },
      {
        "case_name": "Git Reset on Nested Git Subdirectory File",
        "purpose": "测试取消暂存嵌套的 .git 子目录中的文件的功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\submodule\\new_repo\\.git",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\submodule\\new_repo\\.git\\hooks\\commit-msg.sample"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"UnexpectedError\", \"message\": \"\\u672a\\u77e5\\u9519\\u8bef: Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.013971805572509766,
        "is_functional_test": true
      },
      {
        "case_name": "Git Reset on Very Long Path File",
        "purpose": "测试取消暂存超长路径文件时的行为，以验证 Windows 路径限制处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\very_long_filename_that_exceeds_normal_limit_and_may_cause_issues_when_saving_document_to_disk.docx"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u6587\\u4ef6 D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\very_long_filename_that_exceeds_normal_limit_and_may_cause_issues_when_saving_document_to_disk.docx \\u4e0d\\u5728\\u6682\\u5b58\\u533a\"}"
        },
        "execution_time": 0.37175989151000977,
        "is_functional_test": true
      },
      {
        "case_name": "Git Reset with Invalid Repository Path",
        "purpose": "测试提供无效仓库路径时是否抛出 ValueError",
        "args": {
          "repo_path": "<invalid>:\\path\\to\\repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\thresholded_image.png"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: <invalid>:\\\\path\\\\to\\\\repo\"}"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      }
    ],
    "git_show": [
      {
        "case_name": "Basic Git Show Operation",
        "purpose": "验证使用有效仓库路径和提交哈希显示提交详细信息的基本功能是否正常工作",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "commit_hash": "HEAD"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u63d0\\u4ea4\\u8be6\\u7ec6\\u4fe1\\u606f\\u83b7\\u53d6\\u6210\\u529f\", \"data\": \"\\u63d0\\u4ea4\\u8be6\\u7ec6\\u4fe1\\u606f - f47f47c1ab175ea51436d6026f890e4c6606fcb0:\\n\\n\\u4f5c\\u8005: pouchine\\n\\u63d0\\u4ea4\\u8005: pouchine\\n\\u63d0\\u4ea4\\u65e5\\u671f: 2025-07-13 00:53:44+08:00\\n\\u63d0\\u4ea4\\u4fe1\\u606f: perf: Update dependencies with very long message that exceeds normal length limit for commit messages which should still be accepted by the git_commit tool without any issues or truncation\\n\\n\\u6587\\u4ef6\\u66f4\\u6539:\\n\"}"
        },
        "execution_time": 0.3918311595916748,
        "is_functional_test": true
      },
      {
        "case_name": "Git Show with Skip Dependent Steps True",
        "purpose": "测试当 skip_dependent_steps 设置为 True 时，无效提交哈希是否跳过依赖步骤",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "commit_hash": "invalid_hash",
          "skip_dependent_steps": true
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"DependencySkipped\", \"message\": \"\\u8df3\\u8fc7\\u4f9d\\u8d56\\u6b65\\u9aa4: \\u65e0\\u6cd5\\u89e3\\u6790\\u63d0\\u4ea4\\u54c8\\u5e0c: invalid_hash\"}"
        },
        "execution_time": 0.0063703060150146484,
        "is_functional_test": true
      },
      {
        "case_name": "Git Show with Invalid Repository Path",
        "purpose": "测试提供无效仓库路径时是否抛出 ValueError",
        "args": {
          "repo_path": "<invalid>:\\path\\that\\does\\not\\exist\\.git",
          "commit_hash": "HEAD"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: <invalid>:\\\\path\\\\that\\\\does\\\\not\\\\exist\\\\.git\"}"
        },
        "execution_time": 0.0045375823974609375,
        "is_functional_test": false
      },
      {
        "case_name": "Git Show with Invalid Commit Hash",
        "purpose": "验证工具在提供无效提交哈希时是否能正确处理错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "commit_hash": "nonexistent_hash"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6cd5\\u89e3\\u6790\\u63d0\\u4ea4\\u54c8\\u5e0c: nonexistent_hash\"}"
        },
        "execution_time": 0.0071353912353515625,
        "is_functional_test": false
      },
      {
        "case_name": "Git Show in Nested Subdirectory",
        "purpose": "测试在嵌套子目录中执行 git show 是否能正确找到仓库并显示提交信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nested\\git\\repo\\path\\.git",
          "commit_hash": "HEAD"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6cd5\\u89e3\\u6790\\u63d0\\u4ea4\\u54c8\\u5e0c: HEAD\"}"
        },
        "execution_time": 0.005005598068237305,
        "is_functional_test": true
      },
      {
        "case_name": "Git Show with Special Characters in Path",
        "purpose": "测试包含特殊字符的仓库路径是否能正确执行 git show",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo@special#chars!\\.git",
          "commit_hash": "HEAD"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\repo@special#chars!\\\\.git\"}"
        },
        "execution_time": 0.011312246322631836,
        "is_functional_test": true
      },
      {
        "case_name": "Git Show in Read-only Directory",
        "purpose": "验证在只读目录中执行 git show 是否能成功获取提交信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\git_repo\\.git",
          "commit_hash": "HEAD"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\\\\git_repo\\\\.git\"}"
        },
        "execution_time": 0.0051419734954833984,
        "is_functional_test": false
      },
      {
        "case_name": "Git Show with Very Long Path",
        "purpose": "测试超长路径下执行 git show 的行为以验证 Windows 最大路径限制处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_directory_name_that_might_exceed_windows_max_path_length_limitations\\very_very_long_git_repo_name_that_tests_the_maximum_allowed_length_for_file_saves_in_windows_systems\\.git",
          "commit_hash": "HEAD"
        },
        "response": {
          "result": "{\"status\": \"error\", \"error_type\": \"ValueError\", \"message\": \"\\u65e0\\u6548\\u7684\\u4ed3\\u5e93\\u8def\\u5f84: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_output_directory_name_that_might_exceed_windows_max_path_length_limitations\\\\very_very_long_git_repo_name_that_tests_the_maximum_allowed_length_for_file_saves_in_windows_systems\\\\.git\"}"
        },
        "execution_time": 0.004995822906494141,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 102
}