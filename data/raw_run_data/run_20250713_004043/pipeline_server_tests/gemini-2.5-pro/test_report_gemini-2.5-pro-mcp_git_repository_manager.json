{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "gemini-2.5-pro-mcp_git_repository_manager",
  "server_path": "workspace/pipeline-output-servers/gemini-2.5-pro/mcp_git_repository_manager/refined/server.py",
  "timestamp": "2025-07-13T00:50:23.848199",
  "tools": [
    {
      "name": "git_init",
      "description": "\n    Initializes a new Git repository at the specified path.\n\n    This function creates an empty Git repository in the given directory. If the\n    directory does not exist, it will be created. If a Git repository already\n    exists at the path, an error will be returned.\n\n    Args:\n        repo_path (str): The local directory path to initialize as a Git repository.\n                         Example: \"/path/to/my-repo\"\n\n    Returns:\n        str: A JSON string confirming the repository initialization or reporting an error.\n             On success: '{\"status\": \"success\", \"message\": \"Repository initialized at /path/to/my-repo\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_initArguments",
        "type": "object"
      }
    },
    {
      "name": "git_status",
      "description": "\n    Shows the working tree status of a Git repository.\n\n    This function provides a summary of the current state of the repository,\n    including untracked files, changes not staged for commit, and changes\n    to be committed.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n\n    Returns:\n        str: A JSON string containing the Git repository's current status or an error message.\n             On success: '{\"status\": \"success\", \"data\": \"status output\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_statusArguments",
        "type": "object"
      }
    },
    {
      "name": "git_add",
      "description": "\n    Adds file changes to the staging area (index).\n\n    This function stages changes in a specific file or all changes in the\n    working directory, preparing them for the next commit.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        file_path (str): The file path to add to the staging area. Use '.' to add all changes.\n                         Example: \"my_file.py\" or \".\"\n\n    Returns:\n        str: A JSON string confirming the addition or reporting an error.\n             On success: '{\"status\": \"success\", \"message\": \"Added 'my_file.py' to the staging area.\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "file_path": {
            "title": "File Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "file_path"
        ],
        "title": "git_addArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_unstaged",
      "description": "\n    Shows changes in the working directory that are not yet staged.\n\n    This function displays the differences between the files in the working\n    directory and the staging area (index). It highlights modifications that\n    have not been added for commit.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n\n    Returns:\n        str: A JSON string containing the diff of unstaged changes or an error message.\n             On success: '{\"status\": \"success\", \"data\": \"diff output\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_diff_unstagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_staged",
      "description": "\n    Shows changes that are staged but not yet committed.\n\n    This function displays the differences between the staging area (index) and\n    the last commit (HEAD). It shows what will be included in the next commit.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n\n    Returns:\n        str: A JSON string containing the diff of staged changes or an error message.\n             On success: '{\"status\": \"success\", \"data\": \"diff output\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_diff_stagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff",
      "description": "\n    Compares differences between two branches, commits, or a branch and the working directory.\n\n    This function provides a flexible way to see the changes between different\n    points in the repository's history.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        base (str): The base branch or commit hash for comparison.\n                    Example: \"main\"\n        compare (str, optional): The branch or commit hash to compare with the base.\n                                 If not provided, compares the base with the current\n                                 working directory.\n                                 Example: \"develop\"\n\n    Returns:\n        str: A JSON string containing the diff between the two references or an error message.\n             On success: '{\"status\": \"success\", \"data\": \"diff output\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "base": {
            "title": "Base",
            "type": "string"
          },
          "compare": {
            "default": null,
            "title": "Compare",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "base"
        ],
        "title": "git_diffArguments",
        "type": "object"
      }
    },
    {
      "name": "git_commit",
      "description": "\n    Records staged changes to the repository.\n\n    This function creates a new commit containing the content of the staging area\n    (index) along with a descriptive commit message. An error is returned if\n    there are no changes staged for commit.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        message (str): The commit message.\n                       Example: \"feat: Add new feature\"\n\n    Returns:\n        str: A JSON string containing the new commit's hash or an error message.\n             On success: '{\"status\": \"success\", \"commit_hash\": \"a1b2c3d4...\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "message": {
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "message"
        ],
        "title": "git_commitArguments",
        "type": "object"
      }
    },
    {
      "name": "git_reset",
      "description": "\n    Unstages files from the staging area (index).\n\n    This function removes files from the staging area, effectively undoing a\n    'git add' command. It does not modify the working directory.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        file_path (str, optional): The specific file path to remove from the staging area.\n                                   If not provided, all files are unstaged.\n                                   Example: \"my_file.py\"\n\n    Returns:\n        str: A JSON string confirming the reset or reporting an error.\n             On success: '{\"status\": \"success\", \"message\": \"Unstaged 'my_file.py'.\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "file_path": {
            "default": null,
            "title": "File Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_resetArguments",
        "type": "object"
      }
    },
    {
      "name": "git_log",
      "description": "\n    Shows the commit history of the current branch.\n\n    This function retrieves a list of the most recent commits, providing details\n    such as commit hash, author, date, and message for each.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        max_count (int, optional): The maximum number of log entries to show.\n                                   Defaults to 10. Example: 5\n\n    Returns:\n        str: A JSON string containing the formatted commit history log or an error message.\n             On success: '{\"status\": \"success\", \"data\": [{\"hash\": ..., \"author\": ..., \"date\": ..., \"message\": ...}]}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "max_count": {
            "default": 10,
            "title": "Max Count",
            "type": "integer"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_logArguments",
        "type": "object"
      }
    },
    {
      "name": "git_create_branch",
      "description": "\n    Creates a new branch in the repository.\n\n    The new branch is created pointing to the current HEAD commit. This function\n    does not switch to the new branch.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        branch_name (str): The name of the new branch to create.\n                           Example: \"feature/new-branch\"\n\n    Returns:\n        str: A JSON string confirming the branch creation or reporting an error.\n             On success: '{\"status\": \"success\", \"message\": \"Branch 'feature/new-branch' created.\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Branch 'feature/new-branch' already exists.\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "branch_name"
        ],
        "title": "git_create_branchArguments",
        "type": "object"
      }
    },
    {
      "name": "git_checkout",
      "description": "\n    Switches to a specified branch, updating the working directory.\n\n    This function changes the current active branch to the one specified. The\n    files in the working directory will be updated to match the version in\n    the new branch.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        branch_name (str): The name of the branch to switch to.\n                           Example: \"main\"\n\n    Returns:\n        str: A JSON string confirming the branch switch or reporting an error.\n             On success: '{\"status\": \"success\", \"message\": \"Switched to branch 'main'.\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Branch 'main' not found.\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "branch_name"
        ],
        "title": "git_checkoutArguments",
        "type": "object"
      }
    },
    {
      "name": "git_show",
      "description": "\n    Shows details and changes of a specific commit.\n\n    This function provides metadata (author, date, message) and the patch\n    (diff) for a given commit hash.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        commit_hash (str): The hash of the commit to view details for. Can be a short hash.\n                           Example: \"a1b2c3d4\"\n\n    Returns:\n        str: A JSON string containing detailed information about the specified commit or an error message.\n             On success: '{\"status\": \"success\", \"data\": {\"hash\": ..., \"author\": ..., \"date\": ..., \"message\": ..., \"diff\": ...}}'\n             On failure: '{\"status\": \"error\", \"message\": \"Commit with hash 'a1b2c3d4' not found.\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "commit_hash": {
            "title": "Commit Hash",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "commit_hash"
        ],
        "title": "git_showArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "git_init": [
      {
        "case_name": "Initialize New Repository Successfully",
        "purpose": "验证工具可以在一个空目录中成功初始化一个新的Git仓库",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository already exists at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_repo\"}"
        },
        "execution_time": 0.005001068115234375,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Repository in Nonexistent Path",
        "purpose": "验证工具可以自动创建指定路径并初始化Git仓库",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Repository initialized at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_repo\"}"
        },
        "execution_time": 0.1922290325164795,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Initialize Repository in Existing Git Directory",
        "purpose": "验证工具在目标路径已存在Git仓库时返回错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Repository initialized at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\"}"
        },
        "execution_time": 0.2053382396697998,
        "is_functional_test": false
      },
      {
        "case_name": "Fail with Invalid or Malformed Path",
        "purpose": "验证工具对无效或格式错误的路径进行正确处理",
        "args": {
          "repo_path": "<invalid|path>"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"[WinError 123] \\u6587\\u4ef6\\u540d\\u3001\\u76ee\\u5f55\\u540d\\u6216\\u5377\\u6807\\u8bed\\u6cd5\\u4e0d\\u6b63\\u786e\\u3002: 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\workspace\\\\\\\\pipeline-output-servers\\\\\\\\gemini-2.5-pro\\\\\\\\mcp_git_repository_manager\\\\\\\\refined\\\\\\\\<invalid|path>'\"}"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Repository with Special Characters in Path",
        "purpose": "验证工具是否能处理包含特殊字符的路径",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special#chars@file!.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Repository initialized at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special#chars@file!.git\"}"
        },
        "execution_time": 0.1918964385986328,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt to Initialize Repository in Protected System Location",
        "purpose": "验证工具是否阻止在系统保护目录中创建Git仓库（如系统级.git目录）",
        "args": {
          "repo_path": "C:\\Windows\\.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"[WinError 5] \\u62d2\\u7edd\\u8bbf\\u95ee\\u3002: 'C:\\\\\\\\Windows\\\\\\\\.git'\"}"
        },
        "execution_time": 0.005002021789550781,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling When Writing to Read-Only Directory",
        "purpose": "验证工具在尝试写入只读目录时是否优雅地失败",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\protected_file.txt"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Repository initialized at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\protected_file.txt\"}"
        },
        "execution_time": 0.1571640968322754,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Repository at Maximum Allowed Path Length",
        "purpose": "验证工具是否支持长路径的Git仓库初始化",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_branch_name_that_tests_the_maximum_allowed_length_for_git_branches_in_windows_systems\\new_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Repository initialized at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_branch_name_that_tests_the_maximum_allowed_length_for_git_branches_in_windows_systems\\\\new_repo\"}"
        },
        "execution_time": 0.17503666877746582,
        "is_functional_test": true
      }
    ],
    "git_status": [
      {
        "case_name": "Check Status of Empty Repository",
        "purpose": "验证工具可以正确报告一个空Git仓库的状态",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"On branch very_long_branch_name_that_tests_the_maximum_allowed_length_for_git_branches_in_windows_systems\\nChanges to be committed:\\n  (use \\\"git restore --staged <file>...\\\" to unstage)\\n\\tdeleted:    ../app.ico\\n\\tdeleted:    ../existing_file.txt\\n\\tdeleted:    ../malicious_attempt.exe\\n\"}"
        },
        "execution_time": 0.11931705474853516,
        "is_functional_test": true
      },
      {
        "case_name": "Check Status of Non-Git Directory",
        "purpose": "验证工具在指定路径不是Git仓库时返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"On branch master\\nChanges not staged for commit:\\n  (use \\\"git add <file>...\\\" to update what will be committed)\\n  (use \\\"git restore <file>...\\\" to discard changes in working directory)\\n\\tmodified:   existing_file.txt\\n\\nUntracked files:\\n  (use \\\"git add <file>...\\\" to include in what will be committed)\\n\\tapp.ico\\n\\tblurred_xue.jpg\\n\\tconverted_document.pdf\\n\\tconverted_malicious_content.pdf\\n\\tcopied_xue.jpg\\n\\tdefault_params_file.txt\\n\\tempty_content_file.txt\\n\\tempty_converted_document.pdf\\n\\tempty_metadata.docx\\n\\thit.png\\n\\tmalicious_metadata.docx\\n\\tmetadata_document.docx\\n\\tmodules.xml\\n\\tmulti_merged_output.zip\\n\\tnew_repo/\\n\\tnew_test_file.txt\\n\\tnonexistent_repo/\\n\\tnonname.html\\n\\tpaper1.pdf\\n\\tpresent.html\\n\\tprotected_file.txt/\\n\\tre2.doc\\n\\treadonly_dir/\\n\\tresized_xue.jpg\\n\\trule1.pdf\\n\\tspecial#chars@file!.git/\\n\\tspecial#chars@file!.jpg\\n\\tspecial#chars@file!.txt\\n\\tspecial#chars@filtered!.jpg\\n\\tspecial#chars@resized!.jpg\\n\\tswe.pptx\\n\\tvery_long_branch_name_that_tests_the_maximum_allowed_length_for_git_branches_in_windows_systems/\\n\\txue.jpg\\n\\txue_edges.jpg\\n\\nno changes added to commit (use \\\"git add\\\" and/or \\\"git commit -a\\\")\"}"
        },
        "execution_time": 0.1666107177734375,
        "is_functional_test": true
      },
      {
        "case_name": "Check Status After Modifying a File",
        "purpose": "验证工具能检测到工作区中已修改但未提交的文件",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"On branch master\\nChanges not staged for commit:\\n  (use \\\"git add <file>...\\\" to update what will be committed)\\n  (use \\\"git restore <file>...\\\" to discard changes in working directory)\\n\\tmodified:   existing_file.txt\\n\\nUntracked files:\\n  (use \\\"git add <file>...\\\" to include in what will be committed)\\n\\tapp.ico\\n\\tblurred_xue.jpg\\n\\tconverted_document.pdf\\n\\tconverted_malicious_content.pdf\\n\\tcopied_xue.jpg\\n\\tdefault_params_file.txt\\n\\tempty_content_file.txt\\n\\tempty_converted_document.pdf\\n\\tempty_metadata.docx\\n\\thit.png\\n\\tmalicious_metadata.docx\\n\\tmetadata_document.docx\\n\\tmodules.xml\\n\\tmulti_merged_output.zip\\n\\tnew_repo/\\n\\tnew_test_file.txt\\n\\tnonexistent_repo/\\n\\tnonname.html\\n\\tpaper1.pdf\\n\\tpresent.html\\n\\tprotected_file.txt/\\n\\tre2.doc\\n\\treadonly_dir/\\n\\tresized_xue.jpg\\n\\trule1.pdf\\n\\tspecial#chars@file!.git/\\n\\tspecial#chars@file!.jpg\\n\\tspecial#chars@file!.txt\\n\\tspecial#chars@filtered!.jpg\\n\\tspecial#chars@resized!.jpg\\n\\tswe.pptx\\n\\tvery_long_branch_name_that_tests_the_maximum_allowed_length_for_git_branches_in_windows_systems/\\n\\txue.jpg\\n\\txue_edges.jpg\\n\\nno changes added to commit (use \\\"git add\\\" and/or \\\"git commit -a\\\")\"}"
        },
        "execution_time": 0.17365241050720215,
        "is_functional_test": true
      },
      {
        "case_name": "Check Status With Untracked Files",
        "purpose": "验证工具能识别未跟踪的新文件",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"On branch master\\n\\nNo commits yet\\n\\nnothing to commit (create/copy files and use \\\"git add\\\" to track)\"}"
        },
        "execution_time": 0.20524835586547852,
        "is_functional_test": true
      },
      {
        "case_name": "Check Status in Nested .git Directory",
        "purpose": "验证工具能否处理嵌套的.git目录结构",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"On branch master\\n\\nNo commits yet\\n\\nUntracked files:\\n  (use \\\"git add <file>...\\\" to include in what will be committed)\\n\\tHEAD\\n\\tconfig\\n\\tdescription\\n\\thooks/\\n\\tindex\\n\\tinfo/\\n\\tlogs/\\n\\tmalicious.docx\\n\\tobjects/\\n\\tprotected_file.txt\\n\\trefs/\\n\\nnothing added to commit but untracked files present (use \\\"git add\\\" to track)\"}"
        },
        "execution_time": 0.14869308471679688,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt to Check Status in Protected System Location",
        "purpose": "验证工具是否阻止访问系统保护目录中的Git状态",
        "args": {
          "repo_path": "C:\\Windows\\.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: C:\\\\Windows\\\\.git\"}"
        },
        "execution_time": 0.004999399185180664,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling When Reading Invalid Git Path",
        "purpose": "验证工具在无效或损坏的Git路径下是否优雅地失败",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid.git\\corrupted"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid.git\\\\corrupted\"}"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": false
      },
      {
        "case_name": "Check Status With Special Characters in Path",
        "purpose": "验证工具是否能处理包含特殊字符的Git仓库路径",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special#chars@file!.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"On branch master\\n\\nNo commits yet\\n\\nnothing to commit (create/copy files and use \\\"git add\\\" to track)\"}"
        },
        "execution_time": 0.17026782035827637,
        "is_functional_test": true
      }
    ],
    "git_add": [
      {
        "case_name": "Add Specific File to Staging Area Successfully",
        "purpose": "验证工具可以成功将指定文件添加到Git暂存区",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Added 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt' to the staging area.\"}"
        },
        "execution_time": 0.13803935050964355,
        "is_functional_test": true
      },
      {
        "case_name": "Stage All Changes Using Dot Parameter",
        "purpose": "验证使用'.'参数时，工具能够将所有修改添加到暂存区",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "file_path": "."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Added all changes to the staging area.\"}"
        },
        "execution_time": 0.5898435115814209,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Add Nonexistent File",
        "purpose": "验证工具在尝试添加不存在的文件时返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Git command failed: Cmd('git') failed due to: exit code(128)\\n  cmdline: git add D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_file.txt\\n  stderr: 'fatal: pathspec 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_file.txt' did not match any files'\"}"
        },
        "execution_time": 0.13978981971740723,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Attempt to Stage Files in System Protected Location",
        "purpose": "验证工具是否阻止对系统保护目录（如C:\\Windows）中的文件进行操作",
        "args": {
          "repo_path": "C:\\Windows\\.git",
          "file_path": "C:\\Windows\\system32\\config\\sam"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: C:\\\\Windows\\\\.git\"}"
        },
        "execution_time": 0.002998828887939453,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling When Repository Path is Invalid",
        "purpose": "验证工具在提供的仓库路径无效或损坏时能否优雅地失败",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid.git\\corrupted",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid.git\\\\corrupted\"}"
        },
        "execution_time": 0.004576921463012695,
        "is_functional_test": false
      },
      {
        "case_name": "Stage File With Special Characters in Path",
        "purpose": "验证工具是否能处理包含特殊字符的文件路径并正确添加到暂存区",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special#chars@file!.git",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special#chars@file!.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special#chars@file!.git\"}"
        },
        "execution_time": 0.006998777389526367,
        "is_functional_test": true
      },
      {
        "case_name": "Error Handling When Working Directory is Read-Only",
        "purpose": "验证工具在尝试向只读目录添加文件时是否优雅地失败",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\locked_output.jpg"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\"}"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": false
      },
      {
        "case_name": "Stage File at Maximum Allowed Path Length",
        "purpose": "验证工具是否支持长路径文件的暂存操作",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_branch_name_that_tests_the_maximum_allowed_length_for_git_branches_in_windows_systems\\new_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_branch_name_that_tests_the_maximum_allowed_length_for_git_branches_in_windows_systems\\new_repo\\.git\\hooks\\update.sample"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_branch_name_that_tests_the_maximum_allowed_length_for_git_branches_in_windows_systems\\\\new_repo\"}"
        },
        "execution_time": 0.00451207160949707,
        "is_functional_test": true
      }
    ],
    "git_diff_unstaged": [
      {
        "case_name": "Show Unstaged Changes in Modified File",
        "purpose": "验证工具能够正确显示工作目录中已修改但未暂存的文件差异内容",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"diff --git a/copied_xue.jpg b/copied_xue.jpg\\ndeleted file mode 100644\\nindex 888b79c..0000000\\nBinary files a/copied_xue.jpg and /dev/null differ\\ndiff --git a/default_params_file.txt b/default_params_file.txt\\ndeleted file mode 100644\\nindex 94f291f..0000000\\n--- a/default_params_file.txt\\n+++ /dev/null\\n@@ -1 +0,0 @@\\n-Default content provided by system.\\n\\\\ No newline at end of file\\ndiff --git a/new_repo b/new_repo\\n--- a/new_repo\\n+++ b/new_repo\\n@@ -1 +1 @@\\n-Subproject commit 46ef89ef32b3fa20d8a3add75bd1e722a8a4e441\\n+Subproject commit 46ef89ef32b3fa20d8a3add75bd1e722a8a4e441-dirty\\ndiff --git a/special#chars@file!.jpg b/special#chars@file!.jpg\\ndeleted file mode 100644\\nindex 888b79c..0000000\\nBinary files a/special#chars@file!.jpg and /dev/null differ\"}"
        },
        "execution_time": 0.2776799201965332,
        "is_functional_test": true
      },
      {
        "case_name": "Show No Unstaged Changes in Clean Working Directory",
        "purpose": "验证工具在工作目录无未暂存更改时返回空结果",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_repo\"}"
        },
        "execution_time": 0.007754325866699219,
        "is_functional_test": true
      },
      {
        "case_name": "Fail with Invalid Git Repository Path",
        "purpose": "验证工具在指定路径不是有效Git仓库时返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid.git\\corrupted"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid.git\\\\corrupted\"}"
        },
        "execution_time": 0.0037469863891601562,
        "is_functional_test": false
      },
      {
        "case_name": "Handle Special Characters in Repository Path",
        "purpose": "验证工具是否能处理包含特殊字符的Git仓库路径并正确显示差异",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special#chars@file!.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special#chars@file!.git\"}"
        },
        "execution_time": 0.003968477249145508,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt to Show Unstaged Changes in Protected System Location",
        "purpose": "验证工具是否阻止访问系统保护目录中的Git状态和差异信息",
        "args": {
          "repo_path": "C:\\Windows\\.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: C:\\\\Windows\\\\.git\"}"
        },
        "execution_time": 0.006941795349121094,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling When Reading Read-Only Git Directory",
        "purpose": "验证工具在尝试读取只读Git目录时是否优雅地失败",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\protected_file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\protected_file.txt\"}"
        },
        "execution_time": 0.003997087478637695,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Changes After Adding New File",
        "purpose": "验证工具能识别新增未暂存的文件并显示其差异内容",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"diff --git a/copied_xue.jpg b/copied_xue.jpg\\ndeleted file mode 100644\\nindex 888b79c..0000000\\nBinary files a/copied_xue.jpg and /dev/null differ\\ndiff --git a/default_params_file.txt b/default_params_file.txt\\ndeleted file mode 100644\\nindex 94f291f..0000000\\n--- a/default_params_file.txt\\n+++ /dev/null\\n@@ -1 +0,0 @@\\n-Default content provided by system.\\n\\\\ No newline at end of file\\ndiff --git a/new_repo b/new_repo\\n--- a/new_repo\\n+++ b/new_repo\\n@@ -1 +1 @@\\n-Subproject commit 46ef89ef32b3fa20d8a3add75bd1e722a8a4e441\\n+Subproject commit 46ef89ef32b3fa20d8a3add75bd1e722a8a4e441-dirty\\ndiff --git a/special#chars@file!.jpg b/special#chars@file!.jpg\\ndeleted file mode 100644\\nindex 888b79c..0000000\\nBinary files a/special#chars@file!.jpg and /dev/null differ\"}"
        },
        "execution_time": 0.2438671588897705,
        "is_functional_test": true
      },
      {
        "case_name": "Show Unstaged Changes for Binary Files",
        "purpose": "验证工具能否处理二进制文件的未暂存更改并给出适当的表示形式",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"diff --git a/copied_xue.jpg b/copied_xue.jpg\\ndeleted file mode 100644\\nindex 888b79c..0000000\\nBinary files a/copied_xue.jpg and /dev/null differ\\ndiff --git a/default_params_file.txt b/default_params_file.txt\\ndeleted file mode 100644\\nindex 94f291f..0000000\\n--- a/default_params_file.txt\\n+++ /dev/null\\n@@ -1 +0,0 @@\\n-Default content provided by system.\\n\\\\ No newline at end of file\\ndiff --git a/new_repo b/new_repo\\n--- a/new_repo\\n+++ b/new_repo\\n@@ -1 +1 @@\\n-Subproject commit 46ef89ef32b3fa20d8a3add75bd1e722a8a4e441\\n+Subproject commit 46ef89ef32b3fa20d8a3add75bd1e722a8a4e441-dirty\\ndiff --git a/special#chars@file!.jpg b/special#chars@file!.jpg\\ndeleted file mode 100644\\nindex 888b79c..0000000\\nBinary files a/special#chars@file!.jpg and /dev/null differ\"}"
        },
        "execution_time": 0.30601024627685547,
        "is_functional_test": true
      }
    ],
    "git_diff_staged": [
      {
        "case_name": "Show Staged Changes in Valid Repository",
        "purpose": "验证工具能正确显示已暂存但未提交的更改差异信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"diff --git a/app.ico b/app.ico\\nnew file mode 100644\\nindex 0000000..a5b2226\\nBinary files /dev/null and b/app.ico differ\\ndiff --git a/copied_xue.jpg b/copied_xue.jpg\\nnew file mode 100644\\nindex 0000000..888b79c\\nBinary files /dev/null and b/copied_xue.jpg differ\\ndiff --git a/default_params_file.txt b/default_params_file.txt\\nnew file mode 100644\\nindex 0000000..94f291f\\n--- /dev/null\\n+++ b/default_params_file.txt\\n@@ -0,0 +1 @@\\n+Default content provided by system.\\n\\\\ No newline at end of file\\ndiff --git a/empty_content_file.txt b/empty_content_file.txt\\nnew file mode 100644\\nindex 0000000..74426de\\n--- /dev/null\\n+++ b/empty_content_file.txt\\n@@ -0,0 +1,3 @@\\n+Line one.\\n+Line two.\\n+Line three.\\ndiff --git a/empty_metadata.docx b/empty_metadata.docx\\nnew file mode 100644\\nindex 0000000..db630fb\\n--- /dev/null\\n+++ b/empty_metadata.docx\\n@@ -0,0 +1,9 @@\\n+This is a new paragraph added to the empty document.Main Heading\\n+Document Title\\n+Sub-sub-sub Heading Level 9\\n+Heading with !@#$%^&*()_+{}[]|\\\\:;\\\"',./<>?\\n+<script>alert('malicious');</script>\\n+\\n+This is a basic paragraph added for testing.This paragraph uses the Heading 1 style.\\n+This paragraph contains special characters: !@#$%^&*()_+{}[]|\\\\:;\\\"',./<>?\\n+A very long paragraph consisting of repeated text to simulate large input. This will be repeated multiple times to ensure the tool can handle long paragraphs without errors. This will be repeated multiple times to ensure the to...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计143914字符，剩余142414字符"
        },
        "execution_time": 24.12020778656006,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Show Staged Changes in Non-Git Directory",
        "purpose": "验证工具在指定路径不是Git仓库时返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"diff --git a/app.ico b/app.ico\\nnew file mode 100644\\nindex 0000000..a5b2226\\nBinary files /dev/null and b/app.ico differ\\ndiff --git a/copied_xue.jpg b/copied_xue.jpg\\nnew file mode 100644\\nindex 0000000..888b79c\\nBinary files /dev/null and b/copied_xue.jpg differ\\ndiff --git a/default_params_file.txt b/default_params_file.txt\\nnew file mode 100644\\nindex 0000000..94f291f\\n--- /dev/null\\n+++ b/default_params_file.txt\\n@@ -0,0 +1 @@\\n+Default content provided by system.\\n\\\\ No newline at end of file\\ndiff --git a/empty_content_file.txt b/empty_content_file.txt\\nnew file mode 100644\\nindex 0000000..74426de\\n--- /dev/null\\n+++ b/empty_content_file.txt\\n@@ -0,0 +1,3 @@\\n+Line one.\\n+Line two.\\n+Line three.\\ndiff --git a/empty_metadata.docx b/empty_metadata.docx\\nnew file mode 100644\\nindex 0000000..db630fb\\n--- /dev/null\\n+++ b/empty_metadata.docx\\n@@ -0,0 +1,9 @@\\n+This is a new paragraph added to the empty document.Main Heading\\n+Document Title\\n+Sub-sub-sub Heading Level 9\\n+Heading with !@#$%^&*()_+{}[]|\\\\:;\\\"',./<>?\\n+<script>alert('malicious');</script>\\n+\\n+This is a basic paragraph added for testing.This paragraph uses the Heading 1 style.\\n+This paragraph contains special characters: !@#$%^&*()_+{}[]|\\\\:;\\\"',./<>?\\n+A very long paragraph consisting of repeated text to simulate large input. This will be repeated multiple times to ensure the tool can handle long paragraphs without errors. This will be repeated multiple times to ensure the to...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计143914字符，剩余142414字符"
        },
        "execution_time": 12.597157716751099,
        "is_functional_test": true
      },
      {
        "case_name": "Show Staged Changes With Special Characters in Path",
        "purpose": "验证工具是否能处理包含特殊字符的Git仓库路径并显示暂存区变化",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special#chars@file!.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special#chars@file!.git\"}"
        },
        "execution_time": 0.09918689727783203,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt to View Staged Changes in Protected System Location",
        "purpose": "验证工具是否阻止访问系统保护目录中的暂存区变更信息",
        "args": {
          "repo_path": "C:\\Windows\\.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: C:\\\\Windows\\\\.git\"}"
        },
        "execution_time": 0.13054966926574707,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling When Reading Invalid or Corrupted Git Path",
        "purpose": "验证工具在无效或损坏的Git路径下是否优雅地失败",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid.git\\corrupted"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid.git\\\\corrupted\"}"
        },
        "execution_time": 0.1308271884918213,
        "is_functional_test": false
      },
      {
        "case_name": "Check Staged Changes in Nested .git Directory",
        "purpose": "验证工具能否处理嵌套的.git目录结构并正确显示暂存区变更",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"\"}"
        },
        "execution_time": 0.613170862197876,
        "is_functional_test": true
      },
      {
        "case_name": "Error Handling with Malformed Repository Path",
        "purpose": "验证工具对格式错误的路径进行正确处理",
        "args": {
          "repo_path": "<invalid|path>"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: <invalid|path>\"}"
        },
        "execution_time": 0.04400277137756348,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes in Empty Repository",
        "purpose": "验证工具在空仓库中是否能正确报告无暂存区变化",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"diff --git a/../app.ico b/../app.ico\\ndeleted file mode 100644\\nindex a5b2226..0000000\\nBinary files a/../app.ico and /dev/null differ\\ndiff --git a/../existing_file.txt b/../existing_file.txt\\ndeleted file mode 100644\\nindex 38372eb..0000000\\nBinary files a/../existing_file.txt and /dev/null differ\\ndiff --git a/../malicious_attempt.exe b/../malicious_attempt.exe\\ndeleted file mode 100755\\nindex 38372eb..0000000\\nBinary files a/../malicious_attempt.exe and /dev/null differ\"}"
        },
        "execution_time": 0.41634297370910645,
        "is_functional_test": true
      }
    ],
    "git_commit": [
      {
        "case_name": "Commit Staged Changes Successfully",
        "purpose": "验证工具能够成功提交已暂存的更改并生成有效的commit hash",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "message": "feat: Add new feature"
        },
        "response": {
          "result": "{\"status\": \"success\", \"commit_hash\": \"a12c86de3d42becd083d6be46a271356edd6e751\"}"
        },
        "execution_time": 0.37256884574890137,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Commit Without Staged Changes",
        "purpose": "验证在没有暂存更改的情况下尝试提交时返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo\\.git",
          "message": "chore: Attempt empty commit"
        },
        "response": {
          "result": "{\"status\": \"success\", \"commit_hash\": \"c2e44f2312ffa8330f26de4e3140ac2bd66480d6\"}"
        },
        "execution_time": 0.3649883270263672,
        "is_functional_test": true
      },
      {
        "case_name": "Commit With Empty Message",
        "purpose": "验证工具是否能处理空提交消息的情况",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "message": ""
        },
        "response": {
          "result": "{\"status\": \"success\", \"commit_hash\": \"955e9b5c602c92a04de61fb108cc5c9dfc2e2c6f\"}"
        },
        "execution_time": 0.37496376037597656,
        "is_functional_test": false
      },
      {
        "case_name": "Commit Using Invalid Repository Path",
        "purpose": "验证工具在无效或不存在的仓库路径下是否优雅地失败",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_repo\\.git",
          "message": "docs: Update documentation"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_repo\\\\.git\"}"
        },
        "execution_time": 0.004999399185180664,
        "is_functional_test": false
      },
      {
        "case_name": "Commit With Special Characters in Message",
        "purpose": "验证提交信息中包含特殊字符时能否正常工作",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "message": "fix: Handle special chars like @#&% in message"
        },
        "response": {
          "result": "{\"status\": \"success\", \"commit_hash\": \"97506895b7ce2818423104b837e7e59d51bd2a58\"}"
        },
        "execution_time": 0.36742496490478516,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt to Commit in Protected System Location",
        "purpose": "验证工具是否阻止在系统保护目录中进行Git提交操作",
        "args": {
          "repo_path": "C:\\Windows\\.git",
          "message": "security: Attempt system-level commit"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: C:\\\\Windows\\\\.git\"}"
        },
        "execution_time": 0.004998683929443359,
        "is_functional_test": false
      },
      {
        "case_name": "Commit With Very Long Message",
        "purpose": "验证工具是否支持超长提交信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "message": "perf: Update dependencies with very long message that exceeds normal length limit for commit messages which should still be accepted by the git_commit tool without any issues or truncation"
        },
        "response": {
          "result": "{\"status\": \"success\", \"commit_hash\": \"f47f47c1ab175ea51436d6026f890e4c6606fcb0\"}"
        },
        "execution_time": 0.37544727325439453,
        "is_functional_test": true
      },
      {
        "case_name": "Commit In Nested .git Directory",
        "purpose": "验证工具能否处理嵌套.git目录结构中的提交操作",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\.git",
          "message": "style: Fix nested directory commit"
        },
        "response": {
          "result": "{\"status\": \"success\", \"commit_hash\": \"b2f7a992eb89d234de8aacee48225acb40513756\"}"
        },
        "execution_time": 0.3961524963378906,
        "is_functional_test": true
      }
    ],
    "git_log": [
      {
        "case_name": "Basic Log Retrieval with Default Count",
        "purpose": "验证工具能成功从有效Git仓库获取默认数量(10)的提交记录",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": [{\"hash\": \"f47f47c1ab175ea51436d6026f890e4c6606fcb0\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T00:53:44+08:00\", \"message\": \"perf: Update dependencies with very long message that exceeds normal length limit for commit messages which should still be accepted by the git_commit tool without any issues or truncation\"}, {\"hash\": \"97506895b7ce2818423104b837e7e59d51bd2a58\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T00:53:44+08:00\", \"message\": \"fix: Handle special chars like @#&% in message\"}, {\"hash\": \"955e9b5c602c92a04de61fb108cc5c9dfc2e2c6f\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T00:53:44+08:00\", \"message\": \"\"}, {\"hash\": \"a12c86de3d42becd083d6be46a271356edd6e751\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T00:53:43+08:00\", \"message\": \"feat: Add new feature\"}, {\"hash\": \"f149c3e988c7946fe8f1ef26cd7db8cf9ea58a2d\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T00:46:36+08:00\", \"message\": \"Test commit\"}]}"
        },
        "execution_time": 0.41620683670043945,
        "is_functional_test": true
      },
      {
        "case_name": "Log Retrieval with Custom Count",
        "purpose": "验证工具能根据指定的max_count参数返回相应数量的提交记录",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "max_count": 5
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": [{\"hash\": \"f47f47c1ab175ea51436d6026f890e4c6606fcb0\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T00:53:44+08:00\", \"message\": \"perf: Update dependencies with very long message that exceeds normal length limit for commit messages which should still be accepted by the git_commit tool without any issues or truncation\"}, {\"hash\": \"97506895b7ce2818423104b837e7e59d51bd2a58\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T00:53:44+08:00\", \"message\": \"fix: Handle special chars like @#&% in message\"}, {\"hash\": \"955e9b5c602c92a04de61fb108cc5c9dfc2e2c6f\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T00:53:44+08:00\", \"message\": \"\"}, {\"hash\": \"a12c86de3d42becd083d6be46a271356edd6e751\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T00:53:43+08:00\", \"message\": \"feat: Add new feature\"}, {\"hash\": \"f149c3e988c7946fe8f1ef26cd7db8cf9ea58a2d\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T00:46:36+08:00\", \"message\": \"Test commit\"}]}"
        },
        "execution_time": 0.543250560760498,
        "is_functional_test": true
      },
      {
        "case_name": "Log Retrieval from Nested Git Directory",
        "purpose": "验证工具能从嵌套的.git目录中获取提交历史记录",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": [{\"hash\": \"b2f7a992eb89d234de8aacee48225acb40513756\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T00:53:45+08:00\", \"message\": \"style: Fix nested directory commit\"}]}"
        },
        "execution_time": 0.4696946144104004,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt to Access System Protected Git Path",
        "purpose": "验证工具是否阻止访问系统保护目录中的Git提交历史",
        "args": {
          "repo_path": "C:\\Windows\\.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: C:\\\\Windows\\\\.git\"}"
        },
        "execution_time": 0.004767656326293945,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling for Non-Git Directory",
        "purpose": "验证工具在指定路径不是Git仓库时返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": [{\"hash\": \"f47f47c1ab175ea51436d6026f890e4c6606fcb0\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T00:53:44+08:00\", \"message\": \"perf: Update dependencies with very long message that exceeds normal length limit for commit messages which should still be accepted by the git_commit tool without any issues or truncation\"}, {\"hash\": \"97506895b7ce2818423104b837e7e59d51bd2a58\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T00:53:44+08:00\", \"message\": \"fix: Handle special chars like @#&% in message\"}, {\"hash\": \"955e9b5c602c92a04de61fb108cc5c9dfc2e2c6f\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T00:53:44+08:00\", \"message\": \"\"}, {\"hash\": \"a12c86de3d42becd083d6be46a271356edd6e751\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T00:53:43+08:00\", \"message\": \"feat: Add new feature\"}, {\"hash\": \"f149c3e988c7946fe8f1ef26cd7db8cf9ea58a2d\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T00:46:36+08:00\", \"message\": \"Test commit\"}]}"
        },
        "execution_time": 0.46529412269592285,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling with Invalid Git Path",
        "purpose": "验证工具在无效或损坏的Git路径下是否优雅地失败",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid.git\\corrupted"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid.git\\\\corrupted\"}"
        },
        "execution_time": 0.004036903381347656,
        "is_functional_test": false
      },
      {
        "case_name": "Log Retrieval with Special Characters in Path",
        "purpose": "验证工具是否能处理包含特殊字符的Git仓库路径并获取提交历史",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special#chars@file!.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special#chars@file!.git\"}"
        },
        "execution_time": 0.004004240036010742,
        "is_functional_test": true
      },
      {
        "case_name": "Boundary Test with Maximum Count",
        "purpose": "验证工具在最大值边界条件下是否能正确处理max_count参数",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "max_count": 1000
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": [{\"hash\": \"f47f47c1ab175ea51436d6026f890e4c6606fcb0\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T00:53:44+08:00\", \"message\": \"perf: Update dependencies with very long message that exceeds normal length limit for commit messages which should still be accepted by the git_commit tool without any issues or truncation\"}, {\"hash\": \"97506895b7ce2818423104b837e7e59d51bd2a58\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T00:53:44+08:00\", \"message\": \"fix: Handle special chars like @#&% in message\"}, {\"hash\": \"955e9b5c602c92a04de61fb108cc5c9dfc2e2c6f\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T00:53:44+08:00\", \"message\": \"\"}, {\"hash\": \"a12c86de3d42becd083d6be46a271356edd6e751\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T00:53:43+08:00\", \"message\": \"feat: Add new feature\"}, {\"hash\": \"f149c3e988c7946fe8f1ef26cd7db8cf9ea58a2d\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-13T00:46:36+08:00\", \"message\": \"Test commit\"}]}"
        },
        "execution_time": 0.5490033626556396,
        "is_functional_test": true
      }
    ],
    "git_diff": [
      {
        "case_name": "Compare Two Branches Successfully",
        "purpose": "验证工具可以成功比较两个不同分支之间的差异",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "base": "master",
          "compare": "feature@#test!"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"\"}"
        },
        "execution_time": 1.212655782699585,
        "is_functional_test": true
      },
      {
        "case_name": "Compare Base With Working Directory",
        "purpose": "验证当未提供compare参数时，工具能正确比较base分支与当前工作目录的差异",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "base": "master"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"diff --git a/copied_xue.jpg b/copied_xue.jpg\\ndeleted file mode 100644\\nindex 888b79c..0000000\\nBinary files a/copied_xue.jpg and /dev/null differ\\ndiff --git a/default_params_file.txt b/default_params_file.txt\\ndeleted file mode 100644\\nindex 94f291f..0000000\\n--- a/default_params_file.txt\\n+++ /dev/null\\n@@ -1 +0,0 @@\\n-Default content provided by system.\\n\\\\ No newline at end of file\\ndiff --git a/empty_metadata.docx b/empty_metadata.docx\\nindex db630fb..93ff28d 100644\\n--- a/empty_metadata.docx\\n+++ b/empty_metadata.docx\\n@@ -1,9 +1,9 @@\\n-This is a new paragraph added to the empty document.Main Heading\\n-Document Title\\n-Sub-sub-sub Heading Level 9\\n-Heading with !@#$%^&*()_+{}[]|\\\\:;\\\"',./<>?\\n-<script>alert('malicious');</script>\\n+This paragraph attempts to write to a protected path.This is a valid paragraph of text to be added to the document.This paragraph contains special characters like #, @, and !.\\n+A very long paragraph that tests the maximum allowed length for a paragraph in the document. This is a stress test string designed to push the boundaries of what the system can handle without failing or truncating the content. It should be significantly long to ensure the tool handles large inputs gracefully.<script>alert('malicious code');</script>1234567890\\u8fd9\\u662f\\u4e00\\u4e2a\\u4e2d\\u6587\\u6bb5\\u843d\\u3002This is an English sentence. \\u042d\\u0442\\u043e \\u043f\\u0440\\u0435\\u0434\\u043b\\u043e\\u0436\\u0435\\u043d\\u0438\\u0435 \\u043d\\u0430...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计2739字符，剩余1239字符"
        },
        "execution_time": 7.738713264465332,
        "is_functional_test": true
      },
      {
        "case_name": "Compare Two Commits Successfully",
        "purpose": "验证工具可以成功比较两个特定提交之间的差异",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "base": "4b825dc642cb6eb9a060e54bf8d69288fbee4904",
          "compare": "38372ebf03438932fbc2dbf10aaef91d7754f460"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Git command failed: Cmd('git') failed due to: exit code(129)\\n  cmdline: git diff 4b825dc642cb6eb9a060e54bf8d69288fbee4904 38372ebf03438932fbc2dbf10aaef91d7754f460\\n  stderr: 'usage: git diff [<options>] [<commit>] [--] [<path>...]\\n   or: git diff [<options>] --cached [--merge-base] [<commit>] [--] [<path>...]\\n   or: git diff [<options>] [--merge-base] <commit> [<commit>...] <commit> [--] [<path>...]\\n   or: git diff [<options>] <commit>...<commit> [--] [<path>...]\\n   or: git diff [<options>] <blob> <blob>\\n   or: git diff [<options>] --no-index [--] <path> <path>\\n\\ncommon diff options:\\n  -z            output diff-raw with lines terminated with NUL.\\n  -p            output patch format.\\n  -u            synonym for -p.\\n  --patch-with-raw\\n                output both a patch and the diff-raw format.\\n  --stat        show diffstat instead of patch.\\n  --numstat     show numeric diffstat instead of patch.\\n  --patch-with-stat\\n                output a patch and prepend its diffstat.\\n  --name-only   show only names of changed files.\\n  --name-status show names and status of changed files.\\n  --full-index  show full object name on index lines.\\n  --abbrev=<n>  abbreviate object names in diff-tree header and diff-raw.\\n  -R            swap input file pairs.\\n  -B            detect complete rewrites.\\n  -M            detect renames.\\n  -C            detect copies.\\n  --find-copies-harder\\n                try unchanged files as candidate for cop...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计1831字符，剩余331字符"
        },
        "execution_time": 0.9137356281280518,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Compare in Protected System Location",
        "purpose": "验证工具是否阻止在系统保护目录中执行diff操作",
        "args": {
          "repo_path": "C:\\Windows\\.git",
          "base": "master",
          "compare": "develop"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: C:\\\\Windows\\\\.git\"}"
        },
        "execution_time": 0.5415806770324707,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid Repository Path",
        "purpose": "验证工具在无效仓库路径下是否优雅地失败",
        "args": {
          "repo_path": "D:\\invalid\\path\\to\\repo",
          "base": "master"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\invalid\\\\path\\\\to\\\\repo\"}"
        },
        "execution_time": 0.10786962509155273,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Nonexistent Base Reference",
        "purpose": "验证工具在提供的base引用不存在时返回错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "base": "nonexistent-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Git command failed: Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff nonexistent-branch\\n  stderr: 'fatal: ambiguous argument 'nonexistent-branch': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.575427770614624,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Test - Long Branch Name Comparison",
        "purpose": "验证工具是否支持使用超长分支名进行diff操作",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "base": "very_long_branch_name_that_tests_the_maximum_allowed_length_for_git_branches_in_windows_systems",
          "compare": "master"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"diff --git a/../app.ico b/../app.ico\\nnew file mode 100644\\nindex 0000000..a5b2226\\nBinary files /dev/null and b/../app.ico differ\\ndiff --git a/../existing_file.txt b/../existing_file.txt\\nnew file mode 100644\\nindex 0000000..38372eb\\nBinary files /dev/null and b/../existing_file.txt differ\\ndiff --git a/../malicious_attempt.exe b/../malicious_attempt.exe\\nnew file mode 100755\\nindex 0000000..38372eb\\nBinary files /dev/null and b/../malicious_attempt.exe differ\"}"
        },
        "execution_time": 0.5296425819396973,
        "is_functional_test": true
      },
      {
        "case_name": "Special Characters in Git References",
        "purpose": "验证工具能否处理包含特殊字符的分支或提交哈希比较",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_repo",
          "base": "feature@#test!",
          "compare": "master"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"\"}"
        },
        "execution_time": 0.5777335166931152,
        "is_functional_test": true
      }
    ],
    "git_reset": [
      {
        "case_name": "Unstage Single File Successfully",
        "purpose": "验证工具能够成功从暂存区移除一个指定的文件",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\config"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Unstaged 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\config'.\"}"
        },
        "execution_time": 0.21770763397216797,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage All Files When No File Path Provided",
        "purpose": "验证当未提供file_path参数时，工具能够取消暂存所有已暂存的文件",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Unstaged all files.\"}"
        },
        "execution_time": 0.19876337051391602,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Unstage From Nonexistent Repository",
        "purpose": "验证工具在尝试从不存在的仓库路径中取消暂存文件时报错",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_repo\\.git",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\description"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_repo\\\\.git\"}"
        },
        "execution_time": 0.006000041961669922,
        "is_functional_test": false
      },
      {
        "case_name": "Fail to Unstage With Invalid File Path",
        "purpose": "验证工具在提供无效或损坏的文件路径时是否优雅地失败",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "file_path": "<invalid|path>"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Unstaged '<invalid|path>'.\"}"
        },
        "execution_time": 0.20514655113220215,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage File In Nested Git Directory",
        "purpose": "验证工具能否处理嵌套.git目录中的文件取消暂存操作",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\.git",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\.git\\hooks\\commit-msg.sample"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"cannot mmap an empty file\"}"
        },
        "execution_time": 0.20293664932250977,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt to Unstage System Protected File",
        "purpose": "验证工具是否阻止对系统保护目录中的Git文件进行取消暂存操作",
        "args": {
          "repo_path": "C:\\Windows\\.git",
          "file_path": "C:\\Windows\\.git\\config"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: C:\\\\Windows\\\\.git\"}"
        },
        "execution_time": 0.004998922348022461,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage File With Special Characters in Path",
        "purpose": "验证工具是否能正确处理包含特殊字符的文件路径的取消暂存操作",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\special#chars@file!.txt"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Unstaged 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\special#chars@file!.txt'.\"}"
        },
        "execution_time": 0.20438671112060547,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage Large Number of Files",
        "purpose": "验证工具能否处理批量取消暂存多个文件的操作",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\objects\\4b\\825dc642cb6eb9a060e54bf8d69288fbee4904"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Unstaged 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\objects\\\\4b\\\\825dc642cb6eb9a060e54bf8d69288fbee4904'.\"}"
        },
        "execution_time": 0.20818710327148438,
        "is_functional_test": true
      }
    ],
    "git_create_branch": [
      {
        "case_name": "Create Branch in Valid Repository Successfully",
        "purpose": "验证工具可以在一个已存在的Git仓库中成功创建新分支",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "feature/new-feature"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Branch 'feature/new-feature' created.\"}"
        },
        "execution_time": 0.1752762794494629,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Create Duplicate Branch",
        "purpose": "验证工具在目标分支已存在时返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "master"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Branch 'master' already exists.\"}"
        },
        "execution_time": 0.004998445510864258,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch with Special Characters in Name",
        "purpose": "验证工具是否支持包含特殊字符的分支名称",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "feature@#test!"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Branch 'feature@#test!' created.\"}"
        },
        "execution_time": 0.14869308471679688,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Create Branch in Non-Git Directory",
        "purpose": "验证工具在指定路径不是Git仓库时返回错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/test"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Branch 'feature/test' created.\"}"
        },
        "execution_time": 0.16304826736450195,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt to Create Branch in Protected System Location",
        "purpose": "验证工具是否阻止在系统保护目录中创建分支",
        "args": {
          "repo_path": "C:\\Windows\\.git",
          "branch_name": "feature/system-test"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: C:\\\\Windows\\\\.git\"}"
        },
        "execution_time": 0.004449367523193359,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling When Creating Branch in Read-Only Git Directory",
        "purpose": "验证工具在尝试在只读Git目录中创建分支时是否优雅地失败",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\protected_file.txt",
          "branch_name": "feature/readonly-test"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\protected_file.txt\"}"
        },
        "execution_time": 0.007165193557739258,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch at Maximum Allowed Path Length",
        "purpose": "验证工具是否支持长路径的Git分支创建",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\.git",
          "branch_name": "very_long_branch_name_that_tests_the_maximum_allowed_length_for_git_branches_in_windows_systems"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Branch 'very_long_branch_name_that_tests_the_maximum_allowed_length_for_git_branches_in_windows_systems' created.\"}"
        },
        "execution_time": 0.15838885307312012,
        "is_functional_test": true
      },
      {
        "case_name": "Fail with Invalid or Malformed Branch Name",
        "purpose": "验证工具对无效或格式错误的分支名称进行正确处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "<invalid|branch>"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"An unexpected error occurred: Lock at 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\.git\\\\\\\\refs\\\\\\\\heads\\\\\\\\<invalid|branch>.lock' could not be obtained\"}"
        },
        "execution_time": 0.1961524486541748,
        "is_functional_test": false
      }
    ],
    "git_checkout": [
      {
        "case_name": "Checkout to Existing Branch Successfully",
        "purpose": "验证工具可以成功切换到已存在的分支并更新工作目录",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "master"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Switched to branch 'master'.\"}"
        },
        "execution_time": 0.6578383445739746,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Checkout to Nonexistent Branch",
        "purpose": "验证工具在尝试切换到不存在的分支时返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "nonexistent_branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Branch 'nonexistent_branch' not found.\"}"
        },
        "execution_time": 0.12723302841186523,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout with Invalid Repository Path",
        "purpose": "验证工具在指定路径不是有效Git仓库时是否正确处理错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Branch 'main' not found.\"}"
        },
        "execution_time": 0.373384952545166,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout Using Special Characters in Branch Name",
        "purpose": "验证工具是否支持包含特殊字符的分支名称",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "feature@#test!"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Switched to branch 'feature@#test!'.\"}"
        },
        "execution_time": 1.3599917888641357,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Checkout in Protected System Location",
        "purpose": "验证工具是否阻止在系统保护目录中执行分支切换操作",
        "args": {
          "repo_path": "C:\\Windows\\.git",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: C:\\\\Windows\\\\.git\"}"
        },
        "execution_time": 0.33620429039001465,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout from Nested .git Directory",
        "purpose": "验证工具能否处理嵌套.git目录结构下的分支切换操作",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\.git",
          "branch_name": "master"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"An unexpected error occurred: Cmd('git') failed due to: exit code(128)\\n  cmdline: git checkout master\\n  stderr: 'fatal: .git/index: index file smaller than expected'\"}"
        },
        "execution_time": 0.6422855854034424,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout with Long Branch Name",
        "purpose": "验证工具是否支持长分支名的切换操作",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "very_long_branch_name_that_tests_the_maximum_allowed_length_for_git_branches_in_windows_systems"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Branch 'very_long_branch_name_that_tests_the_maximum_allowed_length_for_git_branches_in_windows_systems' not found.\"}"
        },
        "execution_time": 0.21729278564453125,
        "is_functional_test": true
      },
      {
        "case_name": "Error Handling When Accessing Read-Only Git Directory",
        "purpose": "验证工具在只读Git目录下是否优雅地失败",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\protected_file.txt",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\protected_file.txt\"}"
        },
        "execution_time": 1.0983591079711914,
        "is_functional_test": false
      }
    ],
    "git_show": [
      {
        "case_name": "Show Details of Valid Commit",
        "purpose": "验证工具可以成功显示一个有效提交的详细信息，包括作者、日期、消息和差异内容",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"An unexpected error occurred: Ref 'a1b2c3d4' did not resolve to an object\"}"
        },
        "execution_time": 0.22057008743286133,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Show Details for Nonexistent Commit",
        "purpose": "验证工具在提交哈希不存在时返回清晰的错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "commit_hash": "invalidhash1234567"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"An unexpected error occurred: Ref 'invalidhash1234567' did not resolve to an object\"}"
        },
        "execution_time": 0.007002353668212891,
        "is_functional_test": false
      },
      {
        "case_name": "Handle Invalid Repository Path Gracefully",
        "purpose": "验证工具在提供的仓库路径无效或损坏时优雅地失败",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_repo\\.git",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_repo\\\\.git\"}"
        },
        "execution_time": 0.005999088287353516,
        "is_functional_test": false
      },
      {
        "case_name": "Display Commit with Special Characters in Hash",
        "purpose": "验证工具是否能正确处理包含特殊字符的提交哈希",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "commit_hash": "a1b2c3!@#"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: a bytes-like object is required, not 'str'"
        },
        "execution_time": 0.011990547180175781,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt to Access System Protected Git Directory",
        "purpose": "验证工具是否阻止访问系统保护目录中的Git提交详情",
        "args": {
          "repo_path": "C:\\Windows\\.git",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: C:\\\\Windows\\\\.git\"}"
        },
        "execution_time": 0.009003877639770508,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit Details in Nested .git Directory",
        "purpose": "验证工具能否处理嵌套的.git目录结构并获取提交信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\.git",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"An unexpected error occurred: Ref 'a1b2c3d4' did not resolve to an object\"}"
        },
        "execution_time": 0.21085667610168457,
        "is_functional_test": true
      },
      {
        "case_name": "Show Commit in Long Path Repository",
        "purpose": "验证工具是否支持在最大允许路径长度下获取提交信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_branch_name_that_tests_the_maximum_allowed_length_for_git_branches_in_windows_systems\\.git",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_branch_name_that_tests_the_maximum_allowed_length_for_git_branches_in_windows_systems\\\\.git\"}"
        },
        "execution_time": 0.0057446956634521484,
        "is_functional_test": true
      },
      {
        "case_name": "Error Handling When Reading Corrupted Git Data",
        "purpose": "验证工具在Git数据损坏的情况下是否优雅地失败",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\corrupted_data",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\corrupted_data\"}"
        },
        "execution_time": 0.00857090950012207,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 96
}