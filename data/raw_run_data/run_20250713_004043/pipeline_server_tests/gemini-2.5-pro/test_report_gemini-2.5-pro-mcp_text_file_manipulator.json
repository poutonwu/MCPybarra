{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "gemini-2.5-pro-mcp_text_file_manipulator",
  "server_path": "workspace/pipeline-output-servers/gemini-2.5-pro/mcp_text_file_manipulator/refined/server.py",
  "timestamp": "2025-07-13T00:46:42.578290",
  "tools": [
    {
      "name": "get_text_file_contents",
      "description": "\n    Reads the contents of one or more text files, with optional line range selection.\n\n    Args:\n        filepaths: A list of paths to the text files to be read.\n                   Example: [\"/path/to/file1.txt\", \"relative/path/to/file2.py\"]\n        start_line: The 1-indexed starting line for reading. If None, starts from the beginning.\n                    Example: 10\n        end_line: The 1-indexed ending line for reading. If None, reads to the end.\n                  Example: 20\n\n    Returns:\n        A dictionary where keys are file paths and values contain the content, hash, or an error message.\n        Example:\n        {\n            \"/path/to/file1.txt\": {\n                \"content\": [\"line 1\", \"line 2\"],\n                \"hash\": \"sha256_hash_string\"\n            },\n            \"non_existent_file.txt\": {\n                \"error\": \"File not found.\"\n            }\n        }\n    ",
      "args_schema": {
        "properties": {
          "filepaths": {
            "items": {
              "type": "string"
            },
            "title": "Filepaths",
            "type": "array"
          },
          "start_line": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Start Line"
          },
          "end_line": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "End Line"
          }
        },
        "required": [
          "filepaths"
        ],
        "title": "get_text_file_contentsArguments",
        "type": "object"
      }
    },
    {
      "name": "create_text_file",
      "description": "\n    Creates a new text file with initial content. Fails if the file already exists.\n\n    Args:\n        filepath: The path where the new text file will be created.\n                  Example: \"new_project/main.py\"\n        content: The initial string content to write to the file.\n                 Example: \"print('Hello, World!')\"\n\n    Returns:\n        A dictionary with a status message indicating success or failure.\n        Example:\n        {\"status\": \"File 'new_project/main.py' created successfully.\"}\n    ",
      "args_schema": {
        "properties": {
          "filepath": {
            "title": "Filepath",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "filepath",
          "content"
        ],
        "title": "create_text_fileArguments",
        "type": "object"
      }
    },
    {
      "name": "append_text_file_contents",
      "description": "\n    Appends new content to the end of an existing text file.\n\n    Args:\n        filepath: The path to the text file to be modified.\n                  Example: \"logs/app.log\"\n        content: The string content to append to the file.\n                 Example: \"\\n2023-10-27: User logged in.\"\n\n    Returns:\n        A dictionary with a status message and the new file hash.\n        Example:\n        {\"status\": \"Content appended successfully.\", \"new_hash\": \"new_sha256_hash\"}\n    ",
      "args_schema": {
        "properties": {
          "filepath": {
            "title": "Filepath",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "filepath",
          "content"
        ],
        "title": "append_text_file_contentsArguments",
        "type": "object"
      }
    },
    {
      "name": "delete_text_file_contents",
      "description": "\n    Deletes a specified range of lines (inclusive) from a text file.\n\n    Args:\n        filepath: The path to the text file to be modified.\n                  Example: \"config.txt\"\n        start_line: The 1-indexed starting line of the range to delete.\n                    Example: 5\n        end_line: The 1-indexed ending line of the range to delete.\n                  Example: 7\n\n    Returns:\n        A dictionary with a status message and the new file hash.\n        Example:\n        {\"status\": \"Lines 5-7 deleted successfully.\", \"new_hash\": \"new_sha256_hash\"}\n    ",
      "args_schema": {
        "properties": {
          "filepath": {
            "title": "Filepath",
            "type": "string"
          },
          "start_line": {
            "title": "Start Line",
            "type": "integer"
          },
          "end_line": {
            "title": "End Line",
            "type": "integer"
          }
        },
        "required": [
          "filepath",
          "start_line",
          "end_line"
        ],
        "title": "delete_text_file_contentsArguments",
        "type": "object"
      }
    },
    {
      "name": "insert_text_file_contents",
      "description": "\n    Inserts a block of text at a specific line number in a file.\n\n    Args:\n        filepath: The path to the text file to be modified.\n                  Example: \"document.txt\"\n        insert_at_line: The 1-indexed line number at which to insert the new content.\n                        Example: 3\n        content: The string content to insert. Newlines create multiple lines.\n                 Example: \"This is a new line.\\nAnd another one.\"\n\n    Returns:\n        A dictionary with a status message and the new file hash.\n        Example:\n        {\"status\": \"Content inserted at line 3.\", \"new_hash\": \"new_sha256_hash\"}\n    ",
      "args_schema": {
        "properties": {
          "filepath": {
            "title": "Filepath",
            "type": "string"
          },
          "insert_at_line": {
            "title": "Insert At Line",
            "type": "integer"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "filepath",
          "insert_at_line",
          "content"
        ],
        "title": "insert_text_file_contentsArguments",
        "type": "object"
      }
    },
    {
      "name": "patch_text_file_contents",
      "description": "\n    Atomically replaces a range of lines with new content, using a hash for concurrency control.\n\n    Args:\n        filepath: The path to the text file to be patched.\n                  Example: \"source_code.py\"\n        start_line: The 1-indexed starting line of the content to be replaced.\n                    Example: 15\n        end_line: The 1-indexed ending line of the content to be replaced.\n                  Example: 20\n        new_content: The new string content that will replace the specified line range.\n                     Example: \"def new_function():\\n    pass\"\n        expected_hash: The SHA-256 hash of the file before this patch operation.\n                       Example: \"sha256_hash_of_the_original_file\"\n\n    Returns:\n        A dictionary with a status message and the new hash if successful.\n        Example on success:\n        {\"status\": \"Patch applied successfully.\", \"new_hash\": \"new_sha256_hash\"}\n        Example on hash mismatch:\n        {\"status\": \"Conflict: File has been modified by another process.\", \"new_hash\": null}\n    ",
      "args_schema": {
        "properties": {
          "filepath": {
            "title": "Filepath",
            "type": "string"
          },
          "start_line": {
            "title": "Start Line",
            "type": "integer"
          },
          "end_line": {
            "title": "End Line",
            "type": "integer"
          },
          "new_content": {
            "title": "New Content",
            "type": "string"
          },
          "expected_hash": {
            "title": "Expected Hash",
            "type": "string"
          }
        },
        "required": [
          "filepath",
          "start_line",
          "end_line",
          "new_content",
          "expected_hash"
        ],
        "title": "patch_text_file_contentsArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "create_text_file": [
      {
        "case_name": "基本功能-创建新文本文件",
        "purpose": "验证工具可以成功创建一个不存在的新文本文件，并写入指定内容。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "content": "This is a test content for new file."
        },
        "response": {
          "result": "{\n  \"status\": \"File 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt' created successfully.\"\n}"
        },
        "execution_time": 0.005995273590087891,
        "is_functional_test": true
      },
      {
        "case_name": "重复创建文件失败测试",
        "purpose": "验证当目标文件已存在时，工具能正确返回失败信息。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "content": "This should not overwrite the existing file."
        },
        "response": {
          "result": "{\n  \"status\": \"File 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt' created successfully.\"\n}"
        },
        "execution_time": 0.0070188045501708984,
        "is_functional_test": false
      },
      {
        "case_name": "路径中包含特殊字符的文件创建",
        "purpose": "验证工具是否能够处理文件路径中包含特殊字符的情况。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special#chars@file!.txt",
          "content": "Content in special character filename."
        },
        "response": {
          "result": "{\n  \"status\": \"File 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special#chars@file!.txt' created successfully.\"\n}"
        },
        "execution_time": 0.003935337066650391,
        "is_functional_test": true
      },
      {
        "case_name": "空内容创建文件",
        "purpose": "验证工具在内容为空的情况下仍可成功创建文件。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_file.txt",
          "content": ""
        },
        "response": {
          "result": "{\n  \"status\": \"File 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_file.txt' created successfully.\"\n}"
        },
        "execution_time": 0.005006313323974609,
        "is_functional_test": true
      },
      {
        "case_name": "尝试写入受保护目录",
        "purpose": "验证工具无法在系统或受保护目录下创建文件（如 .git 目录）。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\protected_file.txt",
          "content": "Trying to write into protected .git directory."
        },
        "response": {
          "result": "{\n  \"status\": \"File 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\protected_file.txt' created successfully.\"\n}"
        },
        "execution_time": 0.006998538970947266,
        "is_functional_test": false
      },
      {
        "case_name": "长文件名边界测试",
        "purpose": "验证工具是否支持超长文件名（接近Windows最大路径限制）。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\一二三四幻大长文件名测试12345678901234567890123456789012345678901234567890.txt",
          "content": "Testing very long filename support."
        },
        "response": {
          "result": "{\n  \"status\": \"File 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\一二三四幻大长文件名测试12345678901234567890123456789012345678901234567890.txt' created successfully.\"\n}"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": true
      },
      {
        "case_name": "无权限目录创建尝试",
        "purpose": "尝试在只读或无写入权限的目录中创建文件以测试错误处理。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\unwritable_file.txt",
          "content": "Attempting to create file in read-only directory."
        },
        "response": {
          "result": "{\n  \"status\": \"File 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\\\\unwritable_file.txt' created successfully.\"\n}"
        },
        "execution_time": 0.0065157413482666016,
        "is_functional_test": false
      },
      {
        "case_name": "使用默认参数创建文件",
        "purpose": "验证工具是否支持使用默认参数（如果适用）进行文件创建。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\default_params_file.txt",
          "content": "Default content provided by system."
        },
        "response": {
          "result": "{\n  \"status\": \"File 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\default_params_file.txt' created successfully.\"\n}"
        },
        "execution_time": 0.0042989253997802734,
        "is_functional_test": true
      }
    ],
    "get_text_file_contents": [
      {
        "case_name": "基本功能-读取单个文件全部内容",
        "purpose": "验证工具能够正确读取一个存在的文本文件的全部内容。",
        "args": {
          "filepaths": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
          ]
        },
        "response": {
          "result": "{\n  \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt\": {\n    \"content\": [\n      \"This should not overwrite the existing file.\"\n    ],\n    \"hash\": \"80acced4cd668eeaf2ad12cfbbbdf1e9323fe156eadf147e551b6569c426e40d\"\n  }\n}"
        },
        "execution_time": 0.003997325897216797,
        "is_functional_test": true
      },
      {
        "case_name": "基本功能-读取多个文件全部内容",
        "purpose": "验证工具能够同时读取多个存在文本文件的全部内容。",
        "args": {
          "filepaths": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt"
          ]
        },
        "response": {
          "result": "{\n  \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt\": {\n    \"content\": [\n      \"This should not overwrite the existing file.\"\n    ],\n    \"hash\": \"80acced4cd668eeaf2ad12cfbbbdf1e9323fe156eadf147e551b6569c426e40d\"\n  },\n  \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\": {\n    \"content\": [\n      \"This is a test content for new file.\"\n    ],\n    \"hash\": \"41393560a062edca739bddde23a77b57e21ca906ab48f90e2110a1e8c94353c9\"\n  }\n}"
        },
        "execution_time": 0.01053619384765625,
        "is_functional_test": true
      },
      {
        "case_name": "基本功能-指定行范围读取文件内容",
        "purpose": "验证工具可以按指定起始和结束行号读取文本文件的部分内容。",
        "args": {
          "filepaths": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
          ],
          "start_line": 2,
          "end_line": 5
        },
        "response": {
          "result": "{\n  \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt\": {\n    \"content\": [],\n    \"hash\": \"80acced4cd668eeaf2ad12cfbbbdf1e9323fe156eadf147e551b6569c426e40d\"\n  }\n}"
        },
        "execution_time": 0.00480961799621582,
        "is_functional_test": true
      },
      {
        "case_name": "安全性测试-尝试读取受保护目录中的文件",
        "purpose": "验证工具是否能安全处理对系统或受保护目录（如 .git）中文件的访问请求。",
        "args": {
          "filepaths": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\config"
          ]
        },
        "response": {
          "result": "{\n  \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\config\": {\n    \"content\": [\n      \"[core]\",\n      \"\\trepositoryformatversion = 0\",\n      \"\\tfilemode = false\",\n      \"\\tbare = false\",\n      \"\\tlogallrefupdates = true\",\n      \"\\tignorecase = true\"\n    ],\n    \"hash\": \"16ede81ff8225a028ea47d7da268da123355decf7cc0fa7b66b8cc4060005fa6\"\n  }\n}"
        },
        "execution_time": 0.004006147384643555,
        "is_functional_test": false
      },
      {
        "case_name": "错误处理-读取不存在的文件",
        "purpose": "验证工具在尝试读取不存在的文件时能否返回清晰的错误信息。",
        "args": {
          "filepaths": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt"
          ]
        },
        "response": {
          "result": "{\n  \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_file.txt\": {\n    \"error\": \"File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_file.txt\"\n  }\n}"
        },
        "execution_time": 0.0039980411529541016,
        "is_functional_test": false
      },
      {
        "case_name": "错误处理-无效行号范围",
        "purpose": "验证工具在提供非法行号范围（如负数、起始大于结束等）时能否正确处理并报错。",
        "args": {
          "filepaths": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
          ],
          "start_line": 10,
          "end_line": 5
        },
        "response": {
          "result": "{\n  \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt\": {\n    \"content\": [],\n    \"hash\": \"80acced4cd668eeaf2ad12cfbbbdf1e9323fe156eadf147e551b6569c426e40d\"\n  }\n}"
        },
        "execution_time": 0.006186962127685547,
        "is_functional_test": false
      },
      {
        "case_name": "边界条件-读取超长文件名文件",
        "purpose": "验证工具是否支持读取具有超长文件名的文本文件。",
        "args": {
          "filepaths": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\一二三四幻大长文件名测试12345678901234567890123456789012345678901234567890.txt"
          ]
        },
        "response": {
          "result": "{\n  \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\一二三四幻大长文件名测试12345678901234567890123456789012345678901234567890.txt\": {\n    \"content\": [\n      \"Testing very long filename support.\"\n    ],\n    \"hash\": \"8f6db1002a221f8fba0783e42304aee153bf5a5d8930be92d629b09e8548891e\"\n  }\n}"
        },
        "execution_time": 0.004001617431640625,
        "is_functional_test": true
      },
      {
        "case_name": "边界条件-路径包含特殊字符的文件读取",
        "purpose": "验证工具是否能够处理文件路径中包含特殊字符的情况。",
        "args": {
          "filepaths": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special#chars@file!.txt"
          ]
        },
        "response": {
          "result": "{\n  \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special#chars@file!.txt\": {\n    \"content\": [\n      \"Content in special character filename.\"\n    ],\n    \"hash\": \"d154c7a227b99acfa3852329ccbaa56c488465485ba42b400574c168dd464b4c\"\n  }\n}"
        },
        "execution_time": 0.004999637603759766,
        "is_functional_test": true
      }
    ],
    "append_text_file_contents": [
      {
        "case_name": "基本功能-追加内容到现有文本文件",
        "purpose": "验证工具可以成功将新内容追加到现有的文本文件末尾。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "content": "\n2023-10-27: User logged in."
        },
        "response": {
          "result": "{\n  \"status\": \"Content appended successfully to 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt'.\",\n  \"new_hash\": \"69baf27f053d7b1204de4f5a36b4c9f464afb339fb5df536192eb6a89a4e4e3d\"\n}"
        },
        "execution_time": 0.0057141780853271484,
        "is_functional_test": true
      },
      {
        "case_name": "安全性测试-尝试追加内容到受保护目录中的文件",
        "purpose": "验证工具是否能安全处理对系统或受保护目录（如 .git）中文件的写入请求。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\config",
          "content": "\n# This should not be appended"
        },
        "response": {
          "result": "{\n  \"status\": \"Content appended successfully to 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\config'.\",\n  \"new_hash\": \"4f448f4f18199bbdc1e9a0980367d10922b265bfde4c53743bd475354b563c22\"\n}"
        },
        "execution_time": 0.007998943328857422,
        "is_functional_test": false
      },
      {
        "case_name": "错误处理-追加内容到不存在的文件",
        "purpose": "验证工具在尝试追加内容到一个不存在的文件时能否返回清晰的错误信息。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt",
          "content": "\nThis file does not exist."
        },
        "response": {
          "result": "{\n  \"status\": \"Error appending to file 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.004999399185180664,
        "is_functional_test": false
      },
      {
        "case_name": "边界条件-路径包含特殊字符的文件追加",
        "purpose": "验证工具是否能够处理文件路径中包含特殊字符的情况并正确追加内容。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special#chars@file!.txt",
          "content": "\nSpecial content for special characters path."
        },
        "response": {
          "result": "{\n  \"status\": \"Content appended successfully to 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special#chars@file!.txt'.\",\n  \"new_hash\": \"e45c1dc3dfd12322cc7e5b4f365dd9e4d91007f49866085aef8288ac4dc97ac6\"\n}"
        },
        "execution_time": 0.006222724914550781,
        "is_functional_test": true
      },
      {
        "case_name": "边界条件-追加内容到超长文件名文件",
        "purpose": "验证工具是否支持向具有超长文件名的文本文件追加内容。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\一二三四幻大长文件名测试12345678901234567890123456789012345678901234567890.txt",
          "content": "\nAppended content to very long filename."
        },
        "response": {
          "result": "{\n  \"status\": \"Error appending to file 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\一二三四幻大长文件名测试12345678901234567890123456789012345678901234567890.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\一二三四幻大长文件名测试12345678901234567890123456789012345678901234567890.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.0065114498138427734,
        "is_functional_test": true
      },
      {
        "case_name": "错误处理-无效文件路径格式",
        "purpose": "验证工具在提供非法或无效文件路径格式时能否正确处理并报错。",
        "args": {
          "filepath": "<invalid>:path|for*file?.txt",
          "content": "\nInvalid path test content."
        },
        "response": {
          "result": "{\n  \"status\": \"Error appending to file '<invalid>:path|for*file?.txt': File not found: <invalid>:path|for*file?.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.0045168399810791016,
        "is_functional_test": false
      },
      {
        "case_name": "错误处理-无写入权限目录尝试追加",
        "purpose": "尝试在只读或无写入权限的目录中追加内容以测试错误处理。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\unwritable_file.txt",
          "content": "\nAttempting to append to read-only directory file."
        },
        "response": {
          "result": "{\n  \"status\": \"Content appended successfully to 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\\\\unwritable_file.txt'.\",\n  \"new_hash\": \"caebf63dc97a69b08d9bb9d82155d1f7c8f57803c87da238dca117ed8adc2c4b\"\n}"
        },
        "execution_time": 0.0070002079010009766,
        "is_functional_test": false
      },
      {
        "case_name": "基本功能-空内容追加测试",
        "purpose": "验证工具在追加内容为空字符串时是否仍能正常执行且不修改文件内容。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_file.txt",
          "content": ""
        },
        "response": {
          "result": "{\n  \"status\": \"Content appended successfully to 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_file.txt'.\",\n  \"new_hash\": \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"\n}"
        },
        "execution_time": 0.004997730255126953,
        "is_functional_test": true
      }
    ],
    "insert_text_file_contents": [
      {
        "case_name": "基本功能-在文件中间插入文本",
        "purpose": "验证工具可以在指定行号正确插入文本内容。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "insert_at_line": 2,
          "content": "This is the inserted line."
        },
        "response": {
          "result": "{\n  \"status\": \"Content inserted successfully at line 2 in 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt'.\",\n  \"new_hash\": \"798eec1ceec72e2fe29d3fa3634f485aa0df77c09cb75c03c336b76014ba8b1c\"\n}"
        },
        "execution_time": 0.004764080047607422,
        "is_functional_test": true
      },
      {
        "case_name": "基本功能-在文件开头插入多行文本",
        "purpose": "验证工具可以在第一行前插入多行文本内容。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_file.txt",
          "insert_at_line": 1,
          "content": "Line one.\nLine two.\nLine three."
        },
        "response": {
          "result": "{\n  \"status\": \"Content inserted successfully at line 1 in 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_file.txt'.\",\n  \"new_hash\": \"14e01bb6e12cc16f06bb749703be24a5f07a899a791e3a9dd42b4421ea97c2ad\"\n}"
        },
        "execution_time": 0.0050008296966552734,
        "is_functional_test": true
      },
      {
        "case_name": "基本功能-在文件末尾插入文本",
        "purpose": "验证工具可以正确在文件最后一行之后插入文本。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "insert_at_line": 2,
          "content": "Appending this new line at the end."
        },
        "response": {
          "result": "{\n  \"status\": \"Content inserted successfully at line 2 in 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt'.\",\n  \"new_hash\": \"f335e2c5c3d283719c585363caa9513e3df0c49222470e4bccb19176f5d68c80\"\n}"
        },
        "execution_time": 0.012279272079467773,
        "is_functional_test": true
      },
      {
        "case_name": "安全性测试-尝试向受保护目录中的文件插入内容",
        "purpose": "验证工具是否能安全处理对系统或受保护目录（如 .git）中文件的修改请求。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\protected_file.txt",
          "insert_at_line": 1,
          "content": "Trying to insert into a protected file."
        },
        "response": {
          "result": "{\n  \"status\": \"Content inserted successfully at line 1 in 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\protected_file.txt'.\",\n  \"new_hash\": \"f05b67d4ae837703796c0ec745afcba6245c1d4f59da6b15501c9c4264cc89ee\"\n}"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      },
      {
        "case_name": "错误处理-插入到不存在的文件",
        "purpose": "验证工具在目标文件不存在时能否返回清晰的错误信息。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt",
          "insert_at_line": 3,
          "content": "Content to insert into non-existent file."
        },
        "response": {
          "result": "{\n  \"status\": \"Error inserting content in 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.0034012794494628906,
        "is_functional_test": false
      },
      {
        "case_name": "错误处理-无效行号插入",
        "purpose": "验证工具在提供非法行号（如0或负数）时能否正确处理并报错。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "insert_at_line": 0,
          "content": "Trying to insert at invalid line number."
        },
        "response": {
          "result": "{\n  \"status\": \"Error inserting content in 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt': Invalid insert position: 0. File has 3 lines.\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.006162405014038086,
        "is_functional_test": false
      },
      {
        "case_name": "边界条件-插入空内容",
        "purpose": "验证工具在插入内容为空字符串时是否正常处理，不改变文件内容。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "insert_at_line": 2,
          "content": ""
        },
        "response": {
          "result": "{\n  \"status\": \"Content inserted successfully at line 2 in 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt'.\",\n  \"new_hash\": \"798eec1ceec72e2fe29d3fa3634f485aa0df77c09cb75c03c336b76014ba8b1c\"\n}"
        },
        "execution_time": 0.003003358840942383,
        "is_functional_test": true
      },
      {
        "case_name": "边界条件-路径包含特殊字符的文件插入",
        "purpose": "验证工具是否能够处理文件路径中包含特殊字符的情况，并正确插入内容。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special#chars@file!.txt",
          "insert_at_line": 1,
          "content": "Inserting content into special character filename."
        },
        "response": {
          "result": "{\n  \"status\": \"Content inserted successfully at line 1 in 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special#chars@file!.txt'.\",\n  \"new_hash\": \"8e8d3ba7262297ad7381d62e306c1f36cb7593801faf682fed0676cc050c2ce8\"\n}"
        },
        "execution_time": 0.0034215450286865234,
        "is_functional_test": true
      }
    ],
    "delete_text_file_contents": [
      {
        "case_name": "基本功能-删除指定范围内的行内容",
        "purpose": "验证工具可以成功删除文本文件中指定范围的行内容。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "start_line": 2,
          "end_line": 4
        },
        "response": {
          "result": "{\n  \"status\": \"Error deleting lines from 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt': Invalid line range: 2-4. File has 3 lines.\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.003998756408691406,
        "is_functional_test": true
      },
      {
        "case_name": "基本功能-删除单一行内容",
        "purpose": "验证工具可以成功删除文本文件中的某一行（起始行等于结束行）。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "start_line": 3,
          "end_line": 3
        },
        "response": {
          "result": "{\n  \"status\": \"Lines 3-3 deleted successfully from 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt'.\",\n  \"new_hash\": \"acfa8722130cf1eab2244140e77861838531d1b457438ede9c59a2cdc607abc6\"\n}"
        },
        "execution_time": 0.004006862640380859,
        "is_functional_test": true
      },
      {
        "case_name": "基本功能-删除文件开头多行内容",
        "purpose": "验证工具可以正确删除文件起始位置的多个行内容。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "start_line": 1,
          "end_line": 3
        },
        "response": {
          "result": "{\n  \"status\": \"Error deleting lines from 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt': Invalid line range: 1-3. File has 2 lines.\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.005992412567138672,
        "is_functional_test": true
      },
      {
        "case_name": "基本功能-删除文件末尾多行内容",
        "purpose": "验证工具可以正确删除文件末尾的多个行内容。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "start_line": 5,
          "end_line": 7
        },
        "response": {
          "result": "{\n  \"status\": \"Error deleting lines from 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt': Invalid line range: 5-7. File has 2 lines.\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.006002902984619141,
        "is_functional_test": true
      },
      {
        "case_name": "安全性测试-尝试删除受保护目录中的文件内容",
        "purpose": "验证工具是否能安全处理对系统或受保护目录（如 .git）中文件内容的删除请求。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\protected_file.txt",
          "start_line": 1,
          "end_line": 2
        },
        "response": {
          "result": "{\n  \"status\": \"Lines 1-2 deleted successfully from 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\protected_file.txt'.\",\n  \"new_hash\": \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"\n}"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      },
      {
        "case_name": "错误处理-删除不存在的文件内容",
        "purpose": "验证工具在尝试删除不存在的文件内容时能否返回清晰的错误信息。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt",
          "start_line": 1,
          "end_line": 3
        },
        "response": {
          "result": "{\n  \"status\": \"Error deleting lines from 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": false
      },
      {
        "case_name": "错误处理-无效行号范围删除操作",
        "purpose": "验证工具在提供非法行号范围（如负数、起始大于结束等）时能否正确处理并报错。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "start_line": 10,
          "end_line": 5
        },
        "response": {
          "result": "{\n  \"status\": \"Error deleting lines from 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt': Invalid line range: 10-5. File has 2 lines.\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.0059757232666015625,
        "is_functional_test": false
      },
      {
        "case_name": "边界条件-删除超长文件名文件的内容",
        "purpose": "验证工具是否支持删除具有超长文件名的文本文件内容。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\一二三四幻大长文件名测试12345678901234567890123456789012345678901234567890.txt",
          "start_line": 1,
          "end_line": 1
        },
        "response": {
          "result": "{\n  \"status\": \"Error deleting lines from 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\一二三四幻大长文件名测试12345678901234567890123456789012345678901234567890.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\一二三四幻大长文件名测试12345678901234567890123456789012345678901234567890.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.00792241096496582,
        "is_functional_test": true
      }
    ],
    "patch_text_file_contents": [
      {
        "case_name": "基本功能-成功替换文件指定行内容",
        "purpose": "验证工具可以使用正确的哈希值，原子性地替换文本文件中指定范围的行内容。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "start_line": 1,
          "end_line": 1,
          "new_content": "This is the new content after patching.",
          "expected_hash": "80acced4cd668eeaf2ad12cfbbbdf1e9323fe156eadf147e551b6569c426e40d"
        },
        "response": {
          "result": "{\n  \"status\": \"Conflict: File has been modified since it was last read. Please re-read the file and try again.\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.0075304508209228516,
        "is_functional_test": true
      },
      {
        "case_name": "安全性测试-尝试修改受保护目录中的文件",
        "purpose": "验证工具是否能安全处理对系统或受保护目录（如 .git）中文件的修改请求。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\protected_file.txt",
          "start_line": 1,
          "end_line": 1,
          "new_content": "Malicious content injection attempt.",
          "expected_hash": "invalid_hash_for_protected_file"
        },
        "response": {
          "result": "{\n  \"status\": \"Conflict: File has been modified since it was last read. Please re-read the file and try again.\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.004999399185180664,
        "is_functional_test": false
      },
      {
        "case_name": "错误处理-提供无效的起始和结束行号",
        "purpose": "验证工具在提供非法行号范围（如负数、起始大于结束等）时能否正确处理并报错。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "start_line": 5,
          "end_line": 2,
          "new_content": "This should not be applied due to invalid line range.",
          "expected_hash": "any_valid_hash"
        },
        "response": {
          "result": "{\n  \"status\": \"Conflict: File has been modified since it was last read. Please re-read the file and try again.\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.004999876022338867,
        "is_functional_test": false
      },
      {
        "case_name": "错误处理-哈希值不匹配导致冲突",
        "purpose": "验证当提供的expected_hash与当前文件实际哈希不一致时，工具能否检测到并发修改并拒绝补丁操作。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "start_line": 1,
          "end_line": 1,
          "new_content": "This change should fail due to hash mismatch.",
          "expected_hash": "0000000000000000000000000000000000000000000000000000000000000000"
        },
        "response": {
          "result": "{\n  \"status\": \"Conflict: File has been modified since it was last read. Please re-read the file and try again.\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.004512310028076172,
        "is_functional_test": false
      },
      {
        "case_name": "边界条件-路径包含特殊字符的文件打补丁",
        "purpose": "验证工具是否能够处理文件路径中包含特殊字符的情况，并正确进行补丁操作。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special#chars@file!.txt",
          "start_line": 1,
          "end_line": 1,
          "new_content": "Updated content for special character filename.",
          "expected_hash": "d154c7a227b99acfa3852329ccbaa56c488465485ba42b400574c168dd464b4c"
        },
        "response": {
          "result": "{\n  \"status\": \"Conflict: File has been modified since it was last read. Please re-read the file and try again.\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.007004261016845703,
        "is_functional_test": true
      },
      {
        "case_name": "边界条件-超长文件名文件打补丁",
        "purpose": "验证工具是否支持对具有超长文件名的文本文件执行补丁操作。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\一二三四幻大长文件名测试12345678901234567890123456789012345678901234567890.txt",
          "start_line": 1,
          "end_line": 1,
          "new_content": "Updated content for very long filename.",
          "expected_hash": "8f6db1002a221f8fba0783e42304aee153bf5a5d8930be92d629b09e8548891e"
        },
        "response": {
          "result": "{\n  \"status\": \"Error patching file 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\一二三四幻大长文件名测试12345678901234567890123456789012345678901234567890.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\一二三四幻大长文件名测试12345678901234567890123456789012345678901234567890.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": true
      },
      {
        "case_name": "安全性测试-尝试写入只读目录下的文件",
        "purpose": "验证工具无法向只读或无写入权限的目录中的文件应用补丁。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\unwritable_file.txt",
          "start_line": 1,
          "end_line": 1,
          "new_content": "Attempting to modify a file in a read-only directory.",
          "expected_hash": "any_valid_hash"
        },
        "response": {
          "result": "{\n  \"status\": \"Error patching file 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\\\\unwritable_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\\\\unwritable_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.00652623176574707,
        "is_functional_test": false
      },
      {
        "case_name": "错误处理-目标文件不存在",
        "purpose": "验证工具在尝试对一个不存在的文件进行补丁操作时能否返回清晰的错误信息。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt",
          "start_line": 1,
          "end_line": 1,
          "new_content": "This should not be applied because the file does not exist.",
          "expected_hash": "any_valid_hash"
        },
        "response": {
          "result": "{\n  \"status\": \"Error patching file 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.007998228073120117,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 48
}