{
  "server_name": "server",
  "parent_dir": "everything_mcp_server_refined",
  "report_name": "everything_mcp_server_refined-server",
  "server_path": "workspace\\refinement\\everything_mcp_server_refined\\server.py",
  "timestamp": "2025-06-30T22:05:25.214387",
  "tools": [
    {
      "name": "search_files_with_everything",
      "description": "\n    Perform a high-speed search on Windows files and folders using Everything's capabilities.\n\n    This tool allows you to leverage the power of Everything to quickly find files based on various criteria such as wildcard, regex, path, size, time, and attributes.\n\n    Args:\n        query (str): The search query string. You can use wildcards (*, ?), paths, sizes, times, etc., according to Everything's syntax.\n        match_case (bool): Enable case-sensitive matching. Defaults to False.\n        match_whole_word (bool): Match whole words only. Defaults to False.\n        regex (bool): Use regular expression matching. Defaults to False.\n        max_results (Optional[int]): Limit the number of returned results. Defaults to None, meaning no limit.\n\n    Returns:\n        str: A JSON-formatted string containing a list of dictionaries with detailed information about each found file.\n\n    Raises:\n        ValueError: If the input parameters are invalid.\n        EverythingSearchError: If there is an issue while performing the search.\n\n    Example:\n        To search for all .txt files in C:\\Users\\JohnDoe without case sensitivity and get at most 50 results:\n        ```python\n        search_files_with_everything(query=r\"C:\\Users\\JohnDoe\\*.txt\", match_case=False, max_results=50)\n        ```\n    ",
      "args_schema": {
        "properties": {
          "query": {
            "title": "Query",
            "type": "string"
          },
          "match_case": {
            "default": false,
            "title": "Match Case",
            "type": "boolean"
          },
          "match_whole_word": {
            "default": false,
            "title": "Match Whole Word",
            "type": "boolean"
          },
          "regex": {
            "default": false,
            "title": "Regex",
            "type": "boolean"
          },
          "max_results": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Max Results"
          }
        },
        "required": [
          "query"
        ],
        "title": "search_files_with_everythingArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "search_files_with_everything": [
      {
        "case_name": "Basic Wildcard Search",
        "purpose": "验证使用通配符进行基本文件搜索的功能是否正常",
        "args": {
          "query": "*.pdf",
          "match_case": false,
          "max_results": 5
        },
        "response": {
          "result": "[{\"filename\": -1497671228, \"path\": -1497671208, \"size\": 0, \"date_modified\": 0}, {\"filename\": -1497671140, \"path\": -1497671122, \"size\": 0, \"date_modified\": 0}, {\"filename\": -1497671018, \"path\": -1497671008, \"size\": 0, \"date_modified\": 0}, {\"filename\": -1497670804, \"path\": -1497670794, \"size\": 0, \"date_modified\": 0}, {\"filename\": -1497670594, \"path\": -1497670584, \"size\": 0, \"date_modified\": 0}]"
        },
        "execution_time": 0.04449629783630371,
        "is_security_test": false
      },
      {
        "case_name": "Case Sensitive Search",
        "purpose": "验证大小写敏感搜索是否有效",
        "args": {
          "query": "code.html",
          "match_case": true
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.05176186561584473,
        "is_security_test": false
      },
      {
        "case_name": "Regex Search for File Extensions",
        "purpose": "验证正则表达式用于匹配特定扩展名的功能是否正常",
        "args": {
          "query": ".*\\.docx$",
          "regex": true
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.0143890380859375,
        "is_security_test": false
      },
      {
        "case_name": "Search With Max Results Limit",
        "purpose": "验证最大结果限制参数是否生效",
        "args": {
          "query": "*.png",
          "max_results": 1
        },
        "response": {
          "result": "[{\"filename\": -1449996232, \"path\": -1449996222, \"size\": 0, \"date_modified\": 0}]"
        },
        "execution_time": 0.07279729843139648,
        "is_security_test": false
      },
      {
        "case_name": "Empty Query Search",
        "purpose": "验证空查询时是否抛出适当的错误或处理机制",
        "args": {
          "query": ""
        },
        "response": {
          "error": "ToolException: Error executing tool search_files_with_everything: Failed to execute search: 'query' must be a non-empty string."
        },
        "execution_time": 0.0030002593994140625,
        "is_security_test": false
      },
      {
        "case_name": "Invalid Path Search",
        "purpose": "验证无效路径输入时是否正确处理异常",
        "args": {
          "query": "Z:\\Invalid\\Path\\*.txt"
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.12563300132751465,
        "is_security_test": false
      },
      {
        "case_name": "Search Hidden Files in .git Directory",
        "purpose": "验证能否正确搜索隐藏目录中的文件（例如 .git 目录）",
        "args": {
          "query": ".git\\*",
          "max_results": 10
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.11308455467224121,
        "is_security_test": false
      },
      {
        "case_name": "Search With Invalid Regex Pattern",
        "purpose": "验证非法的正则表达式是否被正确捕获并报错",
        "args": {
          "query": "*invalid*regex**",
          "regex": true
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.010767221450805664,
        "is_security_test": false
      },
      {
        "case_name": "Search Specific File by Full Path",
        "purpose": "验证是否可以通过完整路径精确查找某个文件",
        "args": {
          "query": "D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\ResultReport.xml"
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.17815947532653809,
        "is_security_test": false
      },
      {
        "case_name": "Search By File Size Using Everything Syntax",
        "purpose": "验证是否可以根据文件大小条件进行搜索（例如大于1MB）",
        "args": {
          "query": "*.mp4 size:>1000000"
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.022173404693603516,
        "is_security_test": false
      },
      {
        "case_name": "Search For Nonexistent File Type",
        "purpose": "验证对不存在的文件类型是否返回空结果",
        "args": {
          "query": "*.xyz123",
          "max_results": 5
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.026012182235717773,
        "is_security_test": false
      },
      {
        "case_name": "Search With Special Characters In Query",
        "purpose": "验证包含特殊字符的查询是否能安全处理",
        "args": {
          "query": "专利*.docx"
        },
        "response": {
          "result": "[{\"filename\": -1556227944, \"path\": -1556227920, \"size\": 0, \"date_modified\": 0}]"
        },
        "execution_time": 0.026015043258666992,
        "is_security_test": true
      }
    ]
  },
  "total_cases": 12
}