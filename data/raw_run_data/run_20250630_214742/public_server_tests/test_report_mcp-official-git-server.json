{
  "server_name": "server",
  "parent_dir": "mcp-official-git",
  "report_name": "mcp-official-git-server",
  "server_path": "workspace\\public-mcp-servers\\mcp-official-git\\server.py",
  "timestamp": "2025-06-30T21:47:45.398297",
  "tools": [
    {
      "name": "git_status",
      "description": "Shows the working tree status",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "GitStatus",
        "type": "object"
      }
    },
    {
      "name": "git_diff_unstaged",
      "description": "Shows changes in the working directory that are not yet staged",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "GitDiffUnstaged",
        "type": "object"
      }
    },
    {
      "name": "git_diff_staged",
      "description": "Shows changes that are staged for commit",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "GitDiffStaged",
        "type": "object"
      }
    },
    {
      "name": "git_diff",
      "description": "Shows differences between branches or commits",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "target": {
            "title": "Target",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "target"
        ],
        "title": "GitDiff",
        "type": "object"
      }
    },
    {
      "name": "git_commit",
      "description": "Records changes to the repository",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "message": {
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "message"
        ],
        "title": "GitCommit",
        "type": "object"
      }
    },
    {
      "name": "git_add",
      "description": "Adds file contents to the staging area",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "files": {
            "items": {
              "type": "string"
            },
            "title": "Files",
            "type": "array"
          }
        },
        "required": [
          "repo_path",
          "files"
        ],
        "title": "GitAdd",
        "type": "object"
      }
    },
    {
      "name": "git_reset",
      "description": "Unstages all staged changes",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "GitReset",
        "type": "object"
      }
    },
    {
      "name": "git_log",
      "description": "Shows the commit logs",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "max_count": {
            "default": 10,
            "title": "Max Count",
            "type": "integer"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "GitLog",
        "type": "object"
      }
    },
    {
      "name": "git_create_branch",
      "description": "Creates a new branch from an optional base branch",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          },
          "base_branch": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Base Branch"
          }
        },
        "required": [
          "repo_path",
          "branch_name"
        ],
        "title": "GitCreateBranch",
        "type": "object"
      }
    },
    {
      "name": "git_checkout",
      "description": "Switches branches",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "branch_name"
        ],
        "title": "GitCheckout",
        "type": "object"
      }
    },
    {
      "name": "git_show",
      "description": "Shows the contents of a commit",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "revision": {
            "title": "Revision",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "revision"
        ],
        "title": "GitShow",
        "type": "object"
      }
    },
    {
      "name": "git_init",
      "description": "Initialize a new Git repository",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "GitInit",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "git_init": [
      {
        "case_name": "Basic Git Init Success",
        "purpose": "验证在指定路径下能否成功初始化一个新的 Git 仓库",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Initialized empty Git repository in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "execution_time": 0.11745524406433105,
        "is_security_test": false
      },
      {
        "case_name": "Git Init With Nonexistent Path",
        "purpose": "验证当提供的路径不存在时，工具是否能够正确处理错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistentFolder"
        },
        "response": {
          "result": "Initialized empty Git repository in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistentFolder\\.git"
        },
        "execution_time": 0.11905169486999512,
        "is_security_test": false
      },
      {
        "case_name": "Git Init On Already Initialized Repo",
        "purpose": "验证在已经存在 .git 文件夹的目录中再次初始化 Git 是否能正确处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Initialized empty Git repository in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "execution_time": 0.15711426734924316,
        "is_security_test": false
      },
      {
        "case_name": "Git Init With Empty Path",
        "purpose": "验证空路径输入时工具是否进行正确错误处理",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "Initialized empty Git repository in D:\\devWorkspace\\MCPServer-Generator\\workspace\\public-mcp-servers\\mcp-official-git\\.git"
        },
        "execution_time": 0.1540999412536621,
        "is_security_test": false
      },
      {
        "case_name": "Git Init With Special Characters In Path",
        "purpose": "验证包含特殊字符的路径是否能被正常处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles!@#$%^&*()"
        },
        "response": {
          "result": "Error initializing repository: [WinError 123] 文件名、目录名或卷标语法不正确。: 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles!@#$%^&*()'"
        },
        "execution_time": 0.0019998550415039062,
        "is_security_test": false
      },
      {
        "case_name": "Git Init Without Write Permissions",
        "purpose": "验证目标路径无写权限时，初始化是否失败并返回适当错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFilesReadOnly"
        },
        "response": {
          "result": "Initialized empty Git repository in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFilesReadOnly\\.git"
        },
        "execution_time": 0.11551022529602051,
        "is_security_test": false
      }
    ],
    "git_status": [
      {
        "case_name": "Basic Git Status Success",
        "purpose": "验证在已初始化的 Git 仓库中能否正确显示工作树状态",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Repository status:\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\t2023.nlposs-1.24.pdf\n\tResultReport.xml\n\tapp.ico\n\tcode (1).html\n\tmas.png\n\tmulti_merged_output.zip\n\t\"\\344\\270\\223\\345\\210\\2511_\\345\\211\\257\\346\\234\\254.docx\"\n\t\"\\345\\237\\216\\345\\270\\202\\351\\201\\223\\350\\267\\257\\347\\256\\241\\347\\220\\206\\346\\235\\241\\344\\276\\213.pdf\"\n\t\"\\345\\267\\245\\344\\270\\232\\351\\227\\256\\347\\255\\224.mp4\"\n\t\"\\345\\271\\266\\345\\217\\221\\346\\265\\213\\350\\257\\225\\346\\226\\207\\346\\241\\243_1.docx\"\n\t\"\\346\\200\\247\\350\\203\\275\\346\\265\\213\\350\\257\\225\\346\\226\\207\\346\\241\\243_100.docx\"\n\t\"\\346\\226\\260\\345\\273\\272\\346\\265\\213\\350\\257\\225\\346\\226\\207\\346\\241\\243.docx\"\n\t\"\\346\\231\\272\\350\\203\\275\\350\\275\\257\\344\\273\\266\\345\\267\\245.pptx\"\n\t\"\\346\\234\\272\\346\\242\\260\\350...[截断]，共计1345字符，剩余545字符"
        },
        "execution_time": 0.15350031852722168,
        "is_security_test": false
      },
      {
        "case_name": "Git Status With Untracked Files",
        "purpose": "验证存在未跟踪文件时，git_status 是否能正确识别并显示其状态",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Repository status:\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\t2023.nlposs-1.24.pdf\n\tResultReport.xml\n\tapp.ico\n\tcode (1).html\n\tmas.png\n\tmulti_merged_output.zip\n\t\"\\344\\270\\223\\345\\210\\2511_\\345\\211\\257\\346\\234\\254.docx\"\n\t\"\\345\\237\\216\\345\\270\\202\\351\\201\\223\\350\\267\\257\\347\\256\\241\\347\\220\\206\\346\\235\\241\\344\\276\\213.pdf\"\n\t\"\\345\\267\\245\\344\\270\\232\\351\\227\\256\\347\\255\\224.mp4\"\n\t\"\\345\\271\\266\\345\\217\\221\\346\\265\\213\\350\\257\\225\\346\\226\\207\\346\\241\\243_1.docx\"\n\t\"\\346\\200\\247\\350\\203\\275\\346\\265\\213\\350\\257\\225\\346\\226\\207\\346\\241\\243_100.docx\"\n\t\"\\346\\226\\260\\345\\273\\272\\346\\265\\213\\350\\257\\225\\346\\226\\207\\346\\241\\243.docx\"\n\t\"\\346\\231\\272\\350\\203\\275\\350\\275\\257\\344\\273\\266\\345\\267\\245.pptx\"\n\t\"\\346\\234\\272\\346\\242\\260\\350...[截断]，共计1345字符，剩余545字符"
        },
        "execution_time": 0.17421436309814453,
        "is_security_test": false
      },
      {
        "case_name": "Git Status With Modified Files",
        "purpose": "验证存在已修改但未提交的文件时，git_status 是否能正确显示修改状态",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Repository status:\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\t2023.nlposs-1.24.pdf\n\tResultReport.xml\n\tapp.ico\n\tcode (1).html\n\tmas.png\n\tmulti_merged_output.zip\n\t\"\\344\\270\\223\\345\\210\\2511_\\345\\211\\257\\346\\234\\254.docx\"\n\t\"\\345\\237\\216\\345\\270\\202\\351\\201\\223\\350\\267\\257\\347\\256\\241\\347\\220\\206\\346\\235\\241\\344\\276\\213.pdf\"\n\t\"\\345\\267\\245\\344\\270\\232\\351\\227\\256\\347\\255\\224.mp4\"\n\t\"\\345\\271\\266\\345\\217\\221\\346\\265\\213\\350\\257\\225\\346\\226\\207\\346\\241\\243_1.docx\"\n\t\"\\346\\200\\247\\350\\203\\275\\346\\265\\213\\350\\257\\225\\346\\226\\207\\346\\241\\243_100.docx\"\n\t\"\\346\\226\\260\\345\\273\\272\\346\\265\\213\\350\\257\\225\\346\\226\\207\\346\\241\\243.docx\"\n\t\"\\346\\231\\272\\350\\203\\275\\350\\275\\257\\344\\273\\266\\345\\267\\245.pptx\"\n\t\"\\346\\234\\272\\346\\242\\260\\350...[截断]，共计1345字符，剩余545字符"
        },
        "execution_time": 0.1494450569152832,
        "is_security_test": false
      },
      {
        "case_name": "Git Status On Nonexistent Repo Path",
        "purpose": "验证当提供的路径不存在时，git_status 是否返回适当的错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistentFolder"
        },
        "response": {
          "result": "Repository status:\nOn branch master\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)"
        },
        "execution_time": 0.1505599021911621,
        "is_security_test": false
      },
      {
        "case_name": "Git Status With Empty Path",
        "purpose": "验证空路径输入时工具是否进行正确错误处理",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "Repository status:\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\t.gitignore\n\t.python-version\n\tDockerfile\n\tLICENSE\n\tREADME.md\n\t__init__.py\n\t__main__.py\n\tpyproject.toml\n\tserver.py\n\ttests/\n\tuv.lock\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.1408071517944336,
        "is_security_test": false
      },
      {
        "case_name": "Git Status With Special Characters In Path",
        "purpose": "验证包含特殊字符的路径是否能被正常处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles!@#$%^&*()"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles!@#$%^&*()"
        },
        "execution_time": 0.0020017623901367188,
        "is_security_test": false
      },
      {
        "case_name": "Git Status Without Read Permissions",
        "purpose": "验证目标路径无读权限时，git_status 是否失败并返回适当错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFilesReadOnly"
        },
        "response": {
          "result": "Repository status:\nOn branch master\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)"
        },
        "execution_time": 0.18582701683044434,
        "is_security_test": false
      },
      {
        "case_name": "Git Status On Large Repository",
        "purpose": "验证 git_status 在大型仓库中的性能和稳定性",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\largeTestRepo"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\largeTestRepo"
        },
        "execution_time": 0.002999544143676758,
        "is_security_test": false
      },
      {
        "case_name": "Git Status With Hidden Git Directory",
        "purpose": "验证 .git 目录被隐藏时，git_status 是否仍能正确识别仓库并显示状态",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFilesHiddenGit"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFilesHiddenGit"
        },
        "execution_time": 0.005575656890869141,
        "is_security_test": false
      },
      {
        "case_name": "Git Status With Symlinked Repo",
        "purpose": "验证指向 Git 仓库的符号链接是否能被正确解析并显示状态",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\symlinkedTestRepo"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\symlinkedTestRepo"
        },
        "execution_time": 0.004996538162231445,
        "is_security_test": false
      },
      {
        "case_name": "Git Status With Unicode Path",
        "purpose": "验证包含 Unicode 字符的路径是否能被正常处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\测试路径\\中文仓库"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\测试路径\\中文仓库"
        },
        "execution_time": 0.002500772476196289,
        "is_security_test": false
      },
      {
        "case_name": "Git Status In Submodule",
        "purpose": "验证子模块目录中的 git_status 是否能独立显示该子模块的状态",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testSubmodule"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testSubmodule"
        },
        "execution_time": 0.004003763198852539,
        "is_security_test": false
      }
    ],
    "git_diff_unstaged": [
      {
        "case_name": "Basic Git Diff Unstaged Success",
        "purpose": "验证在已初始化的 Git 仓库中，未暂存的修改能否被正确显示",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Unstaged changes:\n"
        },
        "execution_time": 0.11708831787109375,
        "is_security_test": false
      },
      {
        "case_name": "Git Diff Unstaged With No Changes",
        "purpose": "验证当工作目录中没有未暂存更改时，工具是否返回空结果或适当信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Unstaged changes:\n"
        },
        "execution_time": 0.1232445240020752,
        "is_security_test": false
      },
      {
        "case_name": "Git Diff Unstaged With Binary Files",
        "purpose": "验证包含二进制文件（如 PDF、图片）的未暂存更改是否能被正确识别并显示差异信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Unstaged changes:\n"
        },
        "execution_time": 0.16599440574645996,
        "is_security_test": false
      },
      {
        "case_name": "Git Diff Unstaged On Nonexistent Repo Path",
        "purpose": "验证当提供的路径不存在时，工具是否返回适当的错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistentFolder"
        },
        "response": {
          "result": "Unstaged changes:\n"
        },
        "execution_time": 0.157684326171875,
        "is_security_test": false
      },
      {
        "case_name": "Git Diff Unstaged With Empty Path",
        "purpose": "验证空路径输入时工具是否进行正确错误处理",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "Unstaged changes:\n"
        },
        "execution_time": 0.14560532569885254,
        "is_security_test": false
      },
      {
        "case_name": "Git Diff Unstaged With Special Characters In Path",
        "purpose": "验证包含特殊字符的路径是否能被正常处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles!@#$%^&*()"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles!@#$%^&*()"
        },
        "execution_time": 0.0019991397857666016,
        "is_security_test": false
      },
      {
        "case_name": "Git Diff Unstaged Without Read Permissions",
        "purpose": "验证目标路径无读权限时，工具是否失败并返回适当错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFilesReadOnly"
        },
        "response": {
          "result": "Unstaged changes:\n"
        },
        "execution_time": 0.14792108535766602,
        "is_security_test": false
      },
      {
        "case_name": "Git Diff Unstaged On Large Repository",
        "purpose": "验证 git_diff_unstaged 在大型仓库中的性能和稳定性",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\largeTestRepo"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\largeTestRepo"
        },
        "execution_time": 0.002000570297241211,
        "is_security_test": false
      },
      {
        "case_name": "Git Diff Unstaged With Hidden Git Directory",
        "purpose": "验证 .git 目录被隐藏时，工具是否仍能正确识别仓库并显示未暂存差异",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFilesHiddenGit"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFilesHiddenGit"
        },
        "execution_time": 0.002999544143676758,
        "is_security_test": false
      },
      {
        "case_name": "Git Diff Unstaged With Symlinked Repo",
        "purpose": "验证指向 Git 仓库的符号链接是否能被正确解析并显示未暂存差异",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\symlinkedTestRepo"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\symlinkedTestRepo"
        },
        "execution_time": 0.004000425338745117,
        "is_security_test": false
      },
      {
        "case_name": "Git Diff Unstaged With Unicode Path",
        "purpose": "验证包含 Unicode 字符的路径是否能被正常处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\测试路径\\中文仓库"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\测试路径\\中文仓库"
        },
        "execution_time": 0.0029990673065185547,
        "is_security_test": false
      },
      {
        "case_name": "Git Diff Unstaged In Submodule",
        "purpose": "验证子模块目录中的 git_diff_unstaged 是否能独立显示该子模块的未暂存更改",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testSubmodule"
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testSubmodule"
        },
        "execution_time": 0.00508880615234375,
        "is_security_test": false
      }
    ],
    "git_add": [
      {
        "case_name": "Basic Git Add Success",
        "purpose": "验证在已初始化的 Git 仓库中能否成功将指定文件添加到暂存区",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\app.ico",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\code (1).html"
          ]
        },
        "response": {
          "result": "Files staged successfully"
        },
        "execution_time": 0.007000923156738281,
        "is_security_test": false
      },
      {
        "case_name": "Git Add With Nonexistent File",
        "purpose": "验证尝试添加不存在的文件时是否返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistentFile.txt"
          ]
        },
        "response": {
          "error": "ToolException: [WinError 2] 系统找不到指定的文件。: 'nonexistentFile.txt'"
        },
        "execution_time": 0.003785848617553711,
        "is_security_test": false
      },
      {
        "case_name": "Git Add Already Tracked File",
        "purpose": "验证对已经提交过的文件再次执行 add 是否能正常处理（不报错，但更新暂存内容）",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\config"
          ]
        },
        "response": {
          "result": "Files staged successfully"
        },
        "execution_time": 0.009003639221191406,
        "is_security_test": false
      },
      {
        "case_name": "Git Add Empty Files Array",
        "purpose": "验证传入空文件数组时工具是否进行正确错误处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": []
        },
        "response": {
          "result": "Files staged successfully"
        },
        "execution_time": 0.003526926040649414,
        "is_security_test": false
      },
      {
        "case_name": "Git Add With Special Characters In Path",
        "purpose": "验证包含特殊字符的路径是否能被正常处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles!@#$%^&*()",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles!@#$%^&*()\\app.ico"
          ]
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles!@#$%^&*()"
        },
        "execution_time": 0.001999378204345703,
        "is_security_test": false
      },
      {
        "case_name": "Git Add Without Write Permissions",
        "purpose": "验证目标路径无写权限时，git_add 是否失败并返回适当错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFilesReadOnly",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFilesReadOnly\\app.ico"
          ]
        },
        "response": {
          "error": "ToolException: [WinError 2] 系统找不到指定的文件。: 'app.ico'"
        },
        "execution_time": 0.004001140594482422,
        "is_security_test": false
      },
      {
        "case_name": "Git Add Binary File",
        "purpose": "验证二进制文件（如 PDF、图片等）能否被正常添加到暂存区",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\mas.png",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\城市道路管理条例.pdf"
          ]
        },
        "response": {
          "result": "Files staged successfully"
        },
        "execution_time": 0.011998176574707031,
        "is_security_test": false
      },
      {
        "case_name": "Git Add Unicode Filename",
        "purpose": "验证包含 Unicode 字符的文件名能否被正常添加到暂存区",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\测试路径\\中文仓库",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\测试路径\\中文仓库\\測試保存文檔.docx"
          ]
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\测试路径\\中文仓库"
        },
        "execution_time": 0.00400090217590332,
        "is_security_test": false
      },
      {
        "case_name": "Git Add Hidden File",
        "purpose": "验证隐藏文件能否被正常添加到暂存区",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFilesHiddenGit",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFilesHiddenGit\\.git\\HEAD"
          ]
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFilesHiddenGit"
        },
        "execution_time": 0.005999565124511719,
        "is_security_test": false
      },
      {
        "case_name": "Git Add Symlinked File",
        "purpose": "验证符号链接指向的文件是否能被正确添加到暂存区",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\symlinkedTestRepo",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\symlinkedTestRepo\\linkedFile.txt"
          ]
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\symlinkedTestRepo"
        },
        "execution_time": 0.002999544143676758,
        "is_security_test": false
      },
      {
        "case_name": "Git Add Large File",
        "purpose": "验证大文件能否被正常添加到暂存区而不导致性能问题或内存溢出",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\largeTestRepo",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\largeTestRepo\\bigfile.iso"
          ]
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\largeTestRepo"
        },
        "execution_time": 0.0029993057250976562,
        "is_security_test": false
      },
      {
        "case_name": "Git Add Submodule File",
        "purpose": "验证子模块目录中的文件是否能被独立添加到暂存区",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testSubmodule",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testSubmodule\\submoduleFile.txt"
          ]
        },
        "response": {
          "error": "ToolException: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testSubmodule"
        },
        "execution_time": 0.003008604049682617,
        "is_security_test": false
      }
    ],
    "git_diff_staged": [
      {
        "case_name": "Basic Git Diff Staged Success",
        "purpose": "验证在已初始化的 Git 仓库中，能否正确显示暂存区中的更改内容",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "error": "Tool call 'git_diff_staged' was cancelled."
        },
        "execution_time": 59.99012303352356,
        "is_security_test": false
      },
      {
        "case_name": "Git Diff Staged With No Staged Changes",
        "purpose": "验证当暂存区中没有更改时，工具是否返回空结果或适当信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "error": "McpError: Connection closed"
        },
        "execution_time": 0.13408303260803223,
        "is_security_test": false
      },
      {
        "case_name": "Git Diff Staged Binary File",
        "purpose": "验证包含二进制文件（如 PDF、图片）的暂存更改是否能被正确识别并显示差异信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.00400233268737793,
        "is_security_test": false
      },
      {
        "case_name": "Git Diff Staged On Nonexistent Repo Path",
        "purpose": "验证当提供的路径不存在时，工具是否返回适当的错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistentFolder"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.003507375717163086,
        "is_security_test": false
      },
      {
        "case_name": "Git Diff Staged With Empty Path",
        "purpose": "验证空路径输入时工具是否进行正确错误处理",
        "args": {
          "repo_path": ""
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.004007816314697266,
        "is_security_test": false
      },
      {
        "case_name": "Git Diff Staged With Special Characters In Path",
        "purpose": "验证包含特殊字符的路径是否能被正常处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles!@#$%^&*()"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.003997325897216797,
        "is_security_test": false
      },
      {
        "case_name": "Git Diff Staged Without Read Permissions",
        "purpose": "验证目标路径无读权限时，工具是否失败并返回适当错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFilesReadOnly"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.003997087478637695,
        "is_security_test": false
      },
      {
        "case_name": "Git Diff Staged On Large Repository",
        "purpose": "验证 git_diff_staged 在大型仓库中的性能和稳定性",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\largeTestRepo"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0050013065338134766,
        "is_security_test": false
      },
      {
        "case_name": "Git Diff Staged With Hidden Git Directory",
        "purpose": "验证 .git 目录被隐藏时，工具是否仍能正确识别仓库并显示暂存差异",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFilesHiddenGit"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0035152435302734375,
        "is_security_test": false
      },
      {
        "case_name": "Git Diff Staged With Symlinked Repo",
        "purpose": "验证指向 Git 仓库的符号链接是否能被正确解析并显示暂存差异",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\symlinkedTestRepo"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.010226011276245117,
        "is_security_test": false
      },
      {
        "case_name": "Git Diff Staged With Unicode Path",
        "purpose": "验证包含 Unicode 字符的路径是否能被正常处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\测试路径\\中文仓库"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.007505178451538086,
        "is_security_test": false
      },
      {
        "case_name": "Git Diff Staged In Submodule",
        "purpose": "验证子模块目录中的 git_diff_staged 是否能独立显示该子模块的暂存更改",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testSubmodule"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0039980411529541016,
        "is_security_test": false
      }
    ],
    "git_commit": [
      {
        "case_name": "Basic Git Commit Success",
        "purpose": "验证在已初始化的 Git 仓库中能否成功提交暂存区内容并生成提交信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Initial commit"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.00400233268737793,
        "is_security_test": false
      },
      {
        "case_name": "Git Commit With Empty Message",
        "purpose": "验证空提交信息时是否返回错误或使用默认信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": ""
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.002997875213623047,
        "is_security_test": false
      },
      {
        "case_name": "Git Commit Without Staged Changes",
        "purpose": "验证没有暂存更改的情况下尝试提交是否能正确处理（应提示无更改）",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Empty commit test"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.004198551177978516,
        "is_security_test": false
      },
      {
        "case_name": "Git Commit On Nonexistent Repo Path",
        "purpose": "验证当提供的路径不存在时，工具是否返回适当的错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistentFolder",
          "message": "Test commit on invalid path"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0060062408447265625,
        "is_security_test": false
      },
      {
        "case_name": "Git Commit With Special Characters In Path",
        "purpose": "验证包含特殊字符的路径是否能被正常处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles!@#$%^&*()",
          "message": "Commit with special chars in path"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.005995273590087891,
        "is_security_test": false
      },
      {
        "case_name": "Git Commit Without Write Permissions",
        "purpose": "验证目标路径无写权限时，git_commit 是否失败并返回适当错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFilesReadOnly",
          "message": "Commit attempt without write permissions"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.006014347076416016,
        "is_security_test": false
      },
      {
        "case_name": "Git Commit With Unicode Path",
        "purpose": "验证包含 Unicode 字符的路径是否能被正常处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\测试路径\\中文仓库",
          "message": "提交测试"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.004000186920166016,
        "is_security_test": false
      },
      {
        "case_name": "Git Commit In Submodule",
        "purpose": "验证子模块目录中的 git_commit 是否能独立提交该子模块的暂存更改",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testSubmodule",
          "message": "Submodule commit test"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0040895938873291016,
        "is_security_test": false
      },
      {
        "case_name": "Git Commit With Long Message",
        "purpose": "验证提交信息长度边界情况是否被正确处理（例如超长提交信息）",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "A very long commit message that exceeds typical length limits and may cause buffer overflow or performance issues. This is a stress test to ensure the tool can handle large messages gracefully."
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0030031204223632812,
        "is_security_test": false
      },
      {
        "case_name": "Git Commit With Hidden Git Directory",
        "purpose": "验证 .git 目录被隐藏时，git_commit 是否仍能正确识别仓库并执行提交操作",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFilesHiddenGit",
          "message": "Commit in hidden git directory"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0029993057250976562,
        "is_security_test": false
      },
      {
        "case_name": "Git Commit With Symlinked Repo",
        "purpose": "验证指向 Git 仓库的符号链接是否能被正确解析并执行提交操作",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\symlinkedTestRepo",
          "message": "Commit via symlinked repo"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0049974918365478516,
        "is_security_test": false
      },
      {
        "case_name": "Git Commit Security Test - Injection Attempt",
        "purpose": "验证工具是否对提交信息进行安全过滤，防止命令注入攻击",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "'; rm -rf / ; echo \"Command injection attempt\"'"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.003997087478637695,
        "is_security_test": true
      }
    ],
    "git_log": [
      {
        "case_name": "Basic Git Log Success",
        "purpose": "验证在已初始化的 Git 仓库中能否成功获取提交日志",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.005003452301025391,
        "is_security_test": false
      },
      {
        "case_name": "Git Log With Max Count Limit",
        "purpose": "验证当指定 max_count 参数时，工具是否返回正确数量的提交记录",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "max_count": 5
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.004118204116821289,
        "is_security_test": false
      },
      {
        "case_name": "Git Log On Empty Repo",
        "purpose": "验证空仓库中执行 git_log 是否返回空结果或适当信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\emptyTestRepo"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0035114288330078125,
        "is_security_test": false
      },
      {
        "case_name": "Git Log With Zero Max Count",
        "purpose": "验证 max_count 设置为 0 时的行为是否符合预期（如使用默认值）",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "max_count": 0
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.006000041961669922,
        "is_security_test": false
      },
      {
        "case_name": "Git Log With Negative Max Count",
        "purpose": "验证负数 max_count 输入时工具是否进行正确错误处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "max_count": -5
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.004000425338745117,
        "is_security_test": false
      },
      {
        "case_name": "Git Log On Nonexistent Repo Path",
        "purpose": "验证当提供的路径不存在时，git_log 是否返回适当的错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistentFolder"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.006003856658935547,
        "is_security_test": false
      },
      {
        "case_name": "Git Log With Empty Path",
        "purpose": "验证空路径输入时工具是否进行正确错误处理",
        "args": {
          "repo_path": ""
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0069963932037353516,
        "is_security_test": false
      },
      {
        "case_name": "Git Log With Special Characters In Path",
        "purpose": "验证包含特殊字符的路径是否能被正常处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles!@#$%^&*()"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.007002830505371094,
        "is_security_test": false
      },
      {
        "case_name": "Git Log Without Read Permissions",
        "purpose": "验证目标路径无读权限时，git_log 是否失败并返回适当错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFilesReadOnly"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.004003286361694336,
        "is_security_test": false
      },
      {
        "case_name": "Git Log Security Test - Command Injection Attempt",
        "purpose": "验证工具是否对参数进行安全过滤，防止命令注入攻击",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles; rm -rf / ; echo \"Command injection attempt\""
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.003996610641479492,
        "is_security_test": true
      }
    ],
    "git_diff": [
      {
        "case_name": "Basic Git Diff Between Branches",
        "purpose": "验证在已初始化的 Git 仓库中能否正确显示两个分支之间的差异",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "target": "main..feature-branch"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.007001161575317383,
        "is_security_test": false
      },
      {
        "case_name": "Git Diff With Nonexistent Repo Path",
        "purpose": "验证当提供的路径不存在时，git_diff 是否返回适当的错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistentFolder",
          "target": "master"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.003003835678100586,
        "is_security_test": false
      },
      {
        "case_name": "Git Diff With Empty Target",
        "purpose": "验证空目标（如分支或提交）输入时工具是否进行正确错误处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "target": ""
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.005802631378173828,
        "is_security_test": false
      },
      {
        "case_name": "Git Diff On Large Repository",
        "purpose": "验证 git_diff 在大型仓库中的性能和稳定性",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\largeTestRepo",
          "target": "main..dev"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.006998538970947266,
        "is_security_test": false
      },
      {
        "case_name": "Git Diff With Special Characters In Path",
        "purpose": "验证包含特殊字符的路径是否能被正常处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles!@#$%^&*()",
          "target": "master"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.006002902984619141,
        "is_security_test": false
      },
      {
        "case_name": "Git Diff Without Read Permissions",
        "purpose": "验证目标路径无读权限时，git_diff 是否失败并返回适当错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFilesReadOnly",
          "target": "main"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0029993057250976562,
        "is_security_test": false
      },
      {
        "case_name": "Git Diff In Submodule",
        "purpose": "验证子模块目录中的 git_diff 是否能独立显示该子模块的差异",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testSubmodule",
          "target": "submodule-main"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0050046443939208984,
        "is_security_test": false
      },
      {
        "case_name": "Git Diff Security Test - Command Injection Attempt",
        "purpose": "验证工具是否对参数进行安全过滤，防止命令注入攻击",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "target": "'; rm -rf / ; echo \"Command injection attempt\"'"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.004481315612792969,
        "is_security_test": true
      },
      {
        "case_name": "Git Diff With Unicode Path",
        "purpose": "验证包含 Unicode 字符的路径是否能被正常处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\测试路径\\中文仓库",
          "target": "main"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.006278038024902344,
        "is_security_test": false
      },
      {
        "case_name": "Git Diff With Hidden Git Directory",
        "purpose": "验证 .git 目录被隐藏时，git_diff 是否仍能正确识别仓库并显示差异",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFilesHiddenGit",
          "target": "master"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.004993438720703125,
        "is_security_test": false
      },
      {
        "case_name": "Git Diff With Symlinked Repo",
        "purpose": "验证指向 Git 仓库的符号链接是否能被正确解析并显示差异",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\symlinkedTestRepo",
          "target": "main"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.013998031616210938,
        "is_security_test": false
      },
      {
        "case_name": "Git Diff Between Two Commits",
        "purpose": "验证在已初始化的 Git 仓库中能否正确显示两个特定提交之间的差异",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "target": "abc1234..def5678"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.009999513626098633,
        "is_security_test": false
      }
    ],
    "git_create_branch": [
      {
        "case_name": "Basic Git Create Branch Success",
        "purpose": "验证在已初始化的 Git 仓库中能否成功从默认分支创建新分支",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/new-feature"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0020003318786621094,
        "is_security_test": false
      },
      {
        "case_name": "Git Create Branch From Specific Base",
        "purpose": "验证能否从指定的 base_branch 创建新分支",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "bugfix/issue-123",
          "base_branch": "develop"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0020003318786621094,
        "is_security_test": false
      },
      {
        "case_name": "Git Create Branch In Nonexistent Repo",
        "purpose": "验证当提供的路径不存在时，工具是否返回适当的错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistentFolder",
          "branch_name": "feature/test-branch"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.00400543212890625,
        "is_security_test": false
      },
      {
        "case_name": "Git Create Branch With Empty BranchName",
        "purpose": "验证空分支名输入时工具是否进行正确错误处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": ""
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.001898050308227539,
        "is_security_test": false
      },
      {
        "case_name": "Git Create Branch With Invalid BaseBranch",
        "purpose": "验证当提供的 base_branch 不存在时，工具是否能正确处理错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/invalid-base",
          "base_branch": "nonexistent-branch"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0015041828155517578,
        "is_security_test": false
      },
      {
        "case_name": "Git Create Branch With Special Characters In Name",
        "purpose": "验证包含特殊字符的分支名是否能被正常处理或拒绝",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/illegal@{name}"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0010044574737548828,
        "is_security_test": false
      },
      {
        "case_name": "Git Create Branch Without Write Permissions",
        "purpose": "验证目标路径无写权限时，git_create_branch 是否失败并返回适当错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFilesReadOnly",
          "branch_name": "feature/no-write-permission"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0010020732879638672,
        "is_security_test": false
      },
      {
        "case_name": "Git Create Branch Security Test - Command Injection Attempt",
        "purpose": "验证工具是否对参数进行安全过滤，防止命令注入攻击",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "'; rm -rf / ; echo \"Command injection attempt\"'"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0019979476928710938,
        "is_security_test": true
      }
    ],
    "git_checkout": [
      {
        "case_name": "Basic Git Checkout Success",
        "purpose": "验证在已存在的 Git 仓库中能否成功切换到指定分支",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/new-feature"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.005000591278076172,
        "is_security_test": false
      },
      {
        "case_name": "Git Checkout With Nonexistent Branch",
        "purpose": "验证尝试切换到不存在的分支时是否返回适当的错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "nonexistent-branch"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0050029754638671875,
        "is_security_test": false
      },
      {
        "case_name": "Git Checkout In Nonexistent Repo",
        "purpose": "验证当提供的路径不存在时，工具是否返回适当的错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistentFolder",
          "branch_name": "main"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.01600480079650879,
        "is_security_test": false
      },
      {
        "case_name": "Git Checkout With Empty BranchName",
        "purpose": "验证空分支名输入时工具是否进行正确错误处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": ""
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.004998683929443359,
        "is_security_test": false
      },
      {
        "case_name": "Git Checkout Without Write Permissions",
        "purpose": "验证目标路径无写权限时，git_checkout 是否失败并返回适当错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFilesReadOnly",
          "branch_name": "main"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.005001068115234375,
        "is_security_test": false
      },
      {
        "case_name": "Git Checkout Security Test - Command Injection Attempt",
        "purpose": "验证工具是否对参数进行安全过滤，防止命令注入攻击",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "'; rm -rf / ; echo \"Command injection attempt\"'"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.005003929138183594,
        "is_security_test": true
      },
      {
        "case_name": "Git Checkout With Special Characters In Path",
        "purpose": "验证包含特殊字符的路径是否能被正常处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles!@#$%^&*()",
          "branch_name": "main"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.009998798370361328,
        "is_security_test": false
      },
      {
        "case_name": "Git Checkout With Unicode Path",
        "purpose": "验证包含 Unicode 字符的路径是否能被正常处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\测试路径\\中文仓库",
          "branch_name": "main"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.010002374649047852,
        "is_security_test": false
      },
      {
        "case_name": "Git Checkout In Submodule",
        "purpose": "验证子模块目录中的 git_checkout 是否能独立切换该子模块的分支",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testSubmodule",
          "branch_name": "submodule-main"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.004999876022338867,
        "is_security_test": false
      }
    ],
    "git_show": [
      {
        "case_name": "Basic Git Show Success",
        "purpose": "验证能否成功显示指定提交的详细内容",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "revision": "HEAD"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.002002716064453125,
        "is_security_test": false
      },
      {
        "case_name": "Git Show With Nonexistent Repo Path",
        "purpose": "验证当提供的仓库路径不存在时，工具是否返回适当的错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistentFolder",
          "revision": "HEAD"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0009989738464355469,
        "is_security_test": false
      },
      {
        "case_name": "Git Show With Invalid Revision",
        "purpose": "验证使用无效的 revision 参数时，工具是否能正确处理错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "revision": "invalid-commit-hash"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0009996891021728516,
        "is_security_test": false
      },
      {
        "case_name": "Git Show With Empty Repo Path",
        "purpose": "验证空仓库路径输入时工具是否进行正确错误处理",
        "args": {
          "repo_path": "",
          "revision": "HEAD"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.001001119613647461,
        "is_security_test": false
      },
      {
        "case_name": "Git Show With Special Characters In Path",
        "purpose": "验证包含特殊字符的仓库路径是否能被正常处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles!@#$%^&*()",
          "revision": "HEAD"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0010004043579101562,
        "is_security_test": false
      },
      {
        "case_name": "Git Show Without Read Permissions",
        "purpose": "验证目标路径无读权限时，git_show 是否失败并返回适当错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFilesReadOnly",
          "revision": "HEAD"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0010018348693847656,
        "is_security_test": false
      },
      {
        "case_name": "Git Show Security Test - Command Injection Attempt",
        "purpose": "验证工具是否对参数进行安全过滤，防止命令注入攻击",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "revision": "; rm -rf / ; echo \"Command injection attempt\""
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0019998550415039062,
        "is_security_test": true
      },
      {
        "case_name": "Git Show With Unicode Path",
        "purpose": "验证包含 Unicode 字符的路径是否能被正常处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\测试路径\\中文仓库",
          "revision": "HEAD"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.00099945068359375,
        "is_security_test": false
      },
      {
        "case_name": "Git Show In Submodule",
        "purpose": "验证子模块目录中的 git_show 是否能独立显示该子模块的提交内容",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testSubmodule",
          "revision": "HEAD"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0020112991333007812,
        "is_security_test": false
      },
      {
        "case_name": "Git Show With Detached HEAD",
        "purpose": "验证在 detached HEAD 状态下能否正确显示当前提交内容",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "revision": "abc1234"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.001998424530029297,
        "is_security_test": false
      }
    ],
    "git_reset": [
      {
        "case_name": "Basic Git Reset Success",
        "purpose": "验证在已初始化的 Git 仓库中能否成功取消暂存所有已暂存的更改",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.021006345748901367,
        "is_security_test": false
      },
      {
        "case_name": "Git Reset On Nonexistent Repo Path",
        "purpose": "验证当提供的路径不存在时，git_reset 是否返回适当的错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistentFolder"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.008513689041137695,
        "is_security_test": false
      },
      {
        "case_name": "Git Reset With Empty Repo Path",
        "purpose": "验证空仓库路径输入时工具是否进行正确错误处理",
        "args": {
          "repo_path": ""
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.011844396591186523,
        "is_security_test": false
      },
      {
        "case_name": "Git Reset With Special Characters In Path",
        "purpose": "验证包含特殊字符的仓库路径是否能被正常处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles!@#$%^&*()"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.03895378112792969,
        "is_security_test": false
      },
      {
        "case_name": "Git Reset Without Write Permissions",
        "purpose": "验证目标路径无写权限时，git_reset 是否失败并返回适当错误",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFilesReadOnly"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.020116567611694336,
        "is_security_test": false
      },
      {
        "case_name": "Git Reset Security Test - Command Injection Attempt",
        "purpose": "验证工具是否对参数进行安全过滤，防止命令注入攻击",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles; rm -rf / ; echo \"Command injection attempt\""
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.015013933181762695,
        "is_security_test": true
      },
      {
        "case_name": "Git Reset With Unicode Path",
        "purpose": "验证包含 Unicode 字符的路径是否能被正常处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\测试路径\\中文仓库"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.023003578186035156,
        "is_security_test": false
      },
      {
        "case_name": "Git Reset In Submodule",
        "purpose": "验证子模块目录中的 git_reset 是否能独立取消暂存该子模块的暂存更改",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testSubmodule"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.03353118896484375,
        "is_security_test": false
      }
    ]
  },
  "total_cases": 123
}