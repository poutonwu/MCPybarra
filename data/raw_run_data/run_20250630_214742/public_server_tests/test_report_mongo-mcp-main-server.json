{
  "server_name": "server",
  "parent_dir": "mongo-mcp-main",
  "report_name": "mongo-mcp-main-server",
  "server_path": "workspace\\public-mcp-servers\\mongo-mcp-main\\server.py",
  "timestamp": "2025-06-30T21:50:53.624774",
  "tools": [
    {
      "name": "mcp_list_databases",
      "description": "List all databases in the MongoDB instance.\n    \n    Returns:\n        List[str]: List of database names\n    \n    Raises:\n        PyMongoError: If the operation fails\n    ",
      "args_schema": {
        "properties": {},
        "title": "mcp_list_databasesArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_list_collections",
      "description": "List all collections in the specified database.\n    \n    Args:\n        database_name: Name of the database\n    \n    Returns:\n        List[str]: List of collection names\n    \n    Raises:\n        PyMongoError: If the operation fails\n        ValueError: If database name is not provided\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          }
        },
        "required": [
          "database_name"
        ],
        "title": "mcp_list_collectionsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_insert_document",
      "description": "Insert a document into the specified collection.\n    \n    Args:\n        database_name: Name of the database\n        collection_name: Name of the collection\n        document: Document to insert (JSON-compatible dictionary)\n    \n    Returns:\n        Dict[str, Any]: Result containing the inserted document's ID\n    \n    Raises:\n        PyMongoError: If the operation fails\n        ValueError: If required parameters are missing\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "document": {
            "title": "Document",
            "type": "object"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "document"
        ],
        "title": "mcp_insert_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_find_documents",
      "description": "Find documents in the specified collection matching the query.\n    \n    Args:\n        database_name: Name of the database\n        collection_name: Name of the collection\n        query: MongoDB query filter\n        projection: MongoDB projection (fields to include/exclude)\n        limit: Maximum number of documents to return (0 for no limit)\n    \n    Returns:\n        List[Dict[str, Any]]: List of matching documents\n    \n    Raises:\n        PyMongoError: If the operation fails\n        ValueError: If required parameters are missing\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "title": "Query",
            "type": "object"
          },
          "projection": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Projection"
          },
          "limit": {
            "default": 0,
            "title": "Limit",
            "type": "integer"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "query"
        ],
        "title": "mcp_find_documentsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_update_document",
      "description": "Update document(s) in the specified collection.\n    \n    Args:\n        database_name: Name of the database\n        collection_name: Name of the collection\n        query: MongoDB query filter\n        update_data: MongoDB update document (must include operators like $set)\n        upsert: Whether to insert if no document matches the query\n        update_many: Whether to update all matching documents or just the first one\n    \n    Returns:\n        Dict[str, Any]: Result of the update operation\n    \n    Raises:\n        PyMongoError: If the operation fails\n        ValueError: If required parameters are missing or invalid\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "title": "Query",
            "type": "object"
          },
          "update_data": {
            "title": "Update Data",
            "type": "object"
          },
          "upsert": {
            "default": false,
            "title": "Upsert",
            "type": "boolean"
          },
          "update_many": {
            "default": false,
            "title": "Update Many",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "query",
          "update_data"
        ],
        "title": "mcp_update_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_delete_document",
      "description": "Delete document(s) from the specified collection.\n    \n    Args:\n        database_name: Name of the database\n        collection_name: Name of the collection\n        query: MongoDB query filter\n        delete_many: Whether to delete all matching documents or just the first one\n    \n    Returns:\n        Dict[str, Any]: Result of the delete operation\n    \n    Raises:\n        PyMongoError: If the operation fails\n        ValueError: If required parameters are missing\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "title": "Query",
            "type": "object"
          },
          "delete_many": {
            "default": false,
            "title": "Delete Many",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "query"
        ],
        "title": "mcp_delete_documentArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "mcp_list_databases": [
      {
        "case_name": "BasicFunctionality_DatabaseListRetrievedSuccessfully",
        "purpose": "验证工具能够成功列出MongoDB实例中的所有数据库。",
        "args": {},
        "response": [
          "does_not_exist_db",
          "large_db",
          "mcp-test",
          "nonexistent_db",
          "secure_db",
          "test_db",
          "users"
        ],
        "execution_time": 0.05800604820251465,
        "is_security_test": false
      },
      {
        "case_name": "BasicFunctionality_EmptyDatabaseList",
        "purpose": "验证当MongoDB实例中没有数据库时，工具是否能正确返回空列表。",
        "args": {},
        "response": [
          "does_not_exist_db",
          "large_db",
          "mcp-test",
          "nonexistent_db",
          "secure_db",
          "test_db",
          "users"
        ],
        "execution_time": 0.015514135360717773,
        "is_security_test": false
      },
      {
        "case_name": "BasicFunctionality_DatabaseNamesContainSpecialCharacters",
        "purpose": "验证工具能否正确处理并返回包含特殊字符的数据库名称。",
        "args": {},
        "response": [
          "does_not_exist_db",
          "large_db",
          "mcp-test",
          "nonexistent_db",
          "secure_db",
          "test_db",
          "users"
        ],
        "execution_time": 0.026997089385986328,
        "is_security_test": false
      },
      {
        "case_name": "BoundaryCondition_NoConnectionToMongoDB",
        "purpose": "验证在无法连接到MongoDB实例的情况下，工具是否能正确处理异常。",
        "args": {},
        "response": [
          "does_not_exist_db",
          "large_db",
          "mcp-test",
          "nonexistent_db",
          "secure_db",
          "test_db",
          "users"
        ],
        "execution_time": 0.014000415802001953,
        "is_security_test": false
      },
      {
        "case_name": "ErrorHandling_InvalidMongoDBCredentials",
        "purpose": "验证使用无效凭据访问MongoDB时，工具是否能正确抛出PyMongoError。",
        "args": {},
        "response": [
          "does_not_exist_db",
          "large_db",
          "mcp-test",
          "nonexistent_db",
          "secure_db",
          "test_db",
          "users"
        ],
        "execution_time": 0.015998125076293945,
        "is_security_test": false
      },
      {
        "case_name": "ErrorHandling_TimeoutDuringDatabaseListing",
        "purpose": "验证在数据库列表获取过程中发生超时时，工具是否能正确处理错误。",
        "args": {},
        "response": [
          "does_not_exist_db",
          "large_db",
          "mcp-test",
          "nonexistent_db",
          "secure_db",
          "test_db",
          "users"
        ],
        "execution_time": 0.013506174087524414,
        "is_security_test": false
      },
      {
        "case_name": "Security_AuthenticatedAccessRequired",
        "purpose": "验证在需要认证的MongoDB实例上运行时，工具是否要求提供有效身份验证信息。",
        "args": {},
        "response": [
          "does_not_exist_db",
          "large_db",
          "mcp-test",
          "nonexistent_db",
          "secure_db",
          "test_db",
          "users"
        ],
        "execution_time": 0.015999317169189453,
        "is_security_test": false
      },
      {
        "case_name": "Security_UnauthorizedUserAccess",
        "purpose": "验证无权限用户尝试访问数据库列表时，工具是否拒绝请求并抛出适当错误。",
        "args": {},
        "response": [
          "does_not_exist_db",
          "large_db",
          "mcp-test",
          "nonexistent_db",
          "secure_db",
          "test_db",
          "users"
        ],
        "execution_time": 0.01800084114074707,
        "is_security_test": false
      }
    ],
    "mcp_list_collections": [
      {
        "case_name": "BasicFunctionality_CollectionsListedSuccessfully",
        "purpose": "验证工具能够成功列出指定数据库中的所有集合。",
        "args": {
          "database_name": "test_db"
        },
        "response": [
          "a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it",
          "test_collection",
          "invalid/collection*name",
          "user_profiles",
          "nonexistent_collection",
          "a_very_long_collection_name_that_exceeds_normal_limits_and_might_cause_issues",
          "users"
        ],
        "execution_time": 0.014501810073852539,
        "is_security_test": false
      },
      {
        "case_name": "BasicFunctionality_EmptyCollectionList",
        "purpose": "验证当指定数据库中没有集合时，工具是否能正确返回空列表。",
        "args": {
          "database_name": "empty_db"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.007994413375854492,
        "is_security_test": false
      },
      {
        "case_name": "BasicFunctionality_CollectionNamesContainSpecialCharacters",
        "purpose": "验证工具能否正确处理并返回包含特殊字符的集合名称。",
        "args": {
          "database_name": "special_chars_db"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.01800084114074707,
        "is_security_test": false
      },
      {
        "case_name": "BoundaryCondition_DatabaseNameEmpty",
        "purpose": "验证当未提供数据库名称时，工具是否抛出ValueError。",
        "args": {
          "database_name": ""
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_list_collections: Database name must be provided"
        },
        "execution_time": 0.012006998062133789,
        "is_security_test": false
      },
      {
        "case_name": "ErrorHandling_DatabaseDoesNotExist",
        "purpose": "验证当尝试访问不存在的数据库时，工具是否抛出PyMongoError。",
        "args": {
          "database_name": "nonexistent_db"
        },
        "response": [
          "users",
          "test_collection"
        ],
        "execution_time": 0.02352285385131836,
        "is_security_test": false
      },
      {
        "case_name": "ErrorHandling_InvalidDatabaseName",
        "purpose": "验证使用非法字符作为数据库名称时，工具是否抛出PyMongoError。",
        "args": {
          "database_name": "invalid/db:name*?"
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_list_collections: database names cannot contain the character '/'"
        },
        "execution_time": 0.03199958801269531,
        "is_security_test": false
      },
      {
        "case_name": "Security_AuthenticatedAccessRequired",
        "purpose": "验证在需要认证的数据库上运行时，工具是否要求提供有效身份验证信息。",
        "args": {
          "database_name": "secure_db"
        },
        "response": [
          "secure_collection",
          "sensitive_data"
        ],
        "execution_time": 0.020994901657104492,
        "is_security_test": false
      },
      {
        "case_name": "Security_UnauthorizedUserAccessToCollections",
        "purpose": "验证无权限用户尝试访问特定数据库集合时，工具是否拒绝请求并抛出适当错误。",
        "args": {
          "database_name": "restricted_db"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.017010927200317383,
        "is_security_test": false
      },
      {
        "case_name": "ErrorHandling_TimeoutDuringCollectionListing",
        "purpose": "验证在获取集合列表过程中发生超时时，工具是否能正确处理错误。",
        "args": {
          "database_name": "large_db"
        },
        "response": {
          "result": "large_collection"
        },
        "execution_time": 0.02012777328491211,
        "is_security_test": false
      },
      {
        "case_name": "ErrorHandling_InvalidMongoDBConnectionURI",
        "purpose": "验证使用无效MongoDB连接URI时，工具是否能正确捕获PyMongoError。",
        "args": {
          "database_name": "corrupt_connection_db"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.0180051326751709,
        "is_security_test": false
      },
      {
        "case_name": "BasicFunctionality_CollectionsListedFromMultiTenancyDatabase",
        "purpose": "验证工具能否正确列出多租户环境下隔离的数据库集合。",
        "args": {
          "database_name": "tenant_isolated_db"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.015990734100341797,
        "is_security_test": false
      }
    ],
    "mcp_insert_document": [
      {
        "case_name": "BasicFunctionality_DocumentInsertedSuccessfully",
        "purpose": "验证工具能够成功将一个有效的文档插入到指定集合中。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "document": {
            "name": "Test Document",
            "content": "This is a test document for insertion.",
            "type": "test"
          }
        },
        "response": {
          "result": "{\n  \"inserted_id\": \"6862968254d99b844f558b8a\",\n  \"success\": true\n}"
        },
        "execution_time": 0.00999140739440918,
        "is_security_test": false
      },
      {
        "case_name": "BasicFunctionality_InsertMultipleDocumentsSequentially",
        "purpose": "验证工具能够在多个请求中连续插入多个文档，且每个文档都正确存储。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "document": {
            "name": "Another Test Document",
            "timestamp": "2023-10-01T12:00:00Z",
            "status": "active"
          }
        },
        "response": {
          "result": "{\n  \"inserted_id\": \"6862968254d99b844f558b8b\",\n  \"success\": true\n}"
        },
        "execution_time": 0.014007568359375,
        "is_security_test": false
      },
      {
        "case_name": "BasicFunctionality_InsertDocumentWithSpecialCharacters",
        "purpose": "验证工具能否正确处理并插入包含特殊字符的文档内容。",
        "args": {
          "database_name": "test_db",
          "collection_name": "special_chars_collection",
          "document": {
            "title": "Document with special chars: !@#$%^&*()_+{}[]|\\:\"<>?/~`",
            "description": "This document contains special characters to test database encoding and handling."
          }
        },
        "response": {
          "result": "{\n  \"inserted_id\": \"6862968254d99b844f558b8c\",\n  \"success\": true\n}"
        },
        "execution_time": 0.026578903198242188,
        "is_security_test": false
      },
      {
        "case_name": "BoundaryCondition_EmptyDatabaseName",
        "purpose": "验证当未提供数据库名称时，工具是否抛出ValueError。",
        "args": {
          "database_name": "",
          "collection_name": "test_collection",
          "document": {
            "name": "Empty DB Name Test"
          }
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_insert_document: Database name and collection name must be provided"
        },
        "execution_time": 0.014007568359375,
        "is_security_test": false
      },
      {
        "case_name": "BoundaryCondition_EmptyCollectionName",
        "purpose": "验证当未提供集合名称时，工具是否抛出ValueError。",
        "args": {
          "database_name": "test_db",
          "collection_name": "",
          "document": {
            "name": "Empty Collection Name Test"
          }
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_insert_document: Database name and collection name must be provided"
        },
        "execution_time": 0.012004375457763672,
        "is_security_test": false
      },
      {
        "case_name": "ErrorHandling_MissingDatabaseName",
        "purpose": "验证当缺少必要参数database_name时，工具是否抛出ValueError。",
        "args": {
          "collection_name": "test_collection",
          "document": {
            "name": "Missing Database Name"
          }
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_insert_document: 1 validation error for mcp_insert_documentArguments\ndatabase_name\n  Field required [type=missing, input_value={'collection_name': 'test...Missing Database Name'}}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.008008718490600586,
        "is_security_test": false
      },
      {
        "case_name": "ErrorHandling_MissingCollectionName",
        "purpose": "验证当缺少必要参数collection_name时，工具是否抛出ValueError。",
        "args": {
          "database_name": "test_db",
          "document": {
            "name": "Missing Collection Name"
          }
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_insert_document: 1 validation error for mcp_insert_documentArguments\ncollection_name\n  Field required [type=missing, input_value={'database_name': 'test_d...ssing Collection Name'}}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.013998270034790039,
        "is_security_test": false
      },
      {
        "case_name": "ErrorHandling_MissingDocument",
        "purpose": "验证当缺少必要参数document时，工具是否抛出ValueError。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection"
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_insert_document: 1 validation error for mcp_insert_documentArguments\ndocument\n  Field required [type=missing, input_value={'database_name': 'test_d...ame': 'test_collection'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.011521577835083008,
        "is_security_test": false
      },
      {
        "case_name": "ErrorHandling_InvalidDatabaseName",
        "purpose": "验证使用非法字符作为数据库名称时，工具是否抛出PyMongoError。",
        "args": {
          "database_name": "invalid/db:name*?",
          "collection_name": "test_collection",
          "document": {
            "name": "Invalid DB Name"
          }
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_insert_document: database names cannot contain the character '/'"
        },
        "execution_time": 0.011004447937011719,
        "is_security_test": false
      },
      {
        "case_name": "Security_AuthenticatedAccessRequired_Insert",
        "purpose": "验证在需要认证的数据库上运行时，工具是否要求提供有效身份验证信息才能插入文档。",
        "args": {
          "database_name": "secure_db",
          "collection_name": "secure_collection",
          "document": {
            "sensitive_data": "classified information"
          }
        },
        "response": {
          "result": "{\n  \"inserted_id\": \"6862968254d99b844f558b8d\",\n  \"success\": true\n}"
        },
        "execution_time": 0.007998228073120117,
        "is_security_test": false
      },
      {
        "case_name": "Security_UnauthorizedUserInsertAttempt",
        "purpose": "验证无权限用户尝试插入文档时，工具是否拒绝请求并抛出适当错误。",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "restricted_collection",
          "document": {
            "data": "unauthorized insert attempt"
          }
        },
        "response": {
          "result": "{\n  \"inserted_id\": \"6862968254d99b844f558b8e\",\n  \"success\": true\n}"
        },
        "execution_time": 0.02406764030456543,
        "is_security_test": false
      }
    ],
    "mcp_find_documents": [
      {
        "case_name": "BasicFunctionality_DocumentsFoundWithValidQuery",
        "purpose": "验证使用有效的查询条件可以成功检索到匹配的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {
            "type": "test"
          },
          "projection": null,
          "limit": 0
        },
        "response": {
          "result": "{\n  \"_id\": \"6862968254d99b844f558b8a\",\n  \"name\": \"Test Document\",\n  \"content\": \"This is a test document for insertion.\",\n  \"type\": \"test\"\n}"
        },
        "execution_time": 0.019003868103027344,
        "is_security_test": false
      },
      {
        "case_name": "BasicFunctionality_NoDocumentsFoundWithEmptyQuery",
        "purpose": "验证当查询条件为空时，工具返回集合中的所有文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {},
          "projection": null,
          "limit": 0
        },
        "response": [
          "{\n  \"_id\": \"686280078c2cfd880794eaf6\",\n  \"a_very_long_field_name_that_exceeds_normal_mongodb_key_length_limit_and_may_cause_issues\": \"updated_value\"\n}",
          "{\n  \"_id\": \"6862968254d99b844f558b8a\",\n  \"name\": \"Test Document\",\n  \"content\": \"This is a test document for insertion.\",\n  \"type\": \"test\"\n}",
          "{\n  \"_id\": \"6862968254d99b844f558b8b\",\n  \"name\": \"Another Test Document\",\n  \"timestamp\": \"2023-10-01T12:00:00Z\",\n  \"status\": \"active\"\n}"
        ],
        "execution_time": 0.026000022888183594,
        "is_security_test": false
      },
      {
        "case_name": "BasicFunctionality_LimitedDocumentsReturned",
        "purpose": "验证设置limit参数后，工具是否仅返回指定数量的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {},
          "projection": null,
          "limit": 2
        },
        "response": [
          "{\n  \"_id\": \"686280078c2cfd880794eaf6\",\n  \"a_very_long_field_name_that_exceeds_normal_mongodb_key_length_limit_and_may_cause_issues\": \"updated_value\"\n}",
          "{\n  \"_id\": \"6862968254d99b844f558b8a\",\n  \"name\": \"Test Document\",\n  \"content\": \"This is a test document for insertion.\",\n  \"type\": \"test\"\n}"
        ],
        "execution_time": 0.025515079498291016,
        "is_security_test": false
      },
      {
        "case_name": "BoundaryCondition_EmptyDatabaseName",
        "purpose": "验证当数据库名称为空字符串时，工具是否抛出ValueError。",
        "args": {
          "database_name": "",
          "collection_name": "test_collection",
          "query": {},
          "projection": null,
          "limit": 0
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_find_documents: Database name and collection name must be provided"
        },
        "execution_time": 0.031001567840576172,
        "is_security_test": false
      },
      {
        "case_name": "BoundaryCondition_EmptyCollectionName",
        "purpose": "验证当集合名称为空字符串时，工具是否抛出ValueError。",
        "args": {
          "database_name": "test_db",
          "collection_name": "",
          "query": {},
          "projection": null,
          "limit": 0
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_find_documents: Database name and collection name must be provided"
        },
        "execution_time": 0.016005516052246094,
        "is_security_test": false
      },
      {
        "case_name": "BoundaryCondition_ZeroLimit",
        "purpose": "验证将limit设为0时，工具是否返回不限制数量的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {},
          "projection": null,
          "limit": 0
        },
        "response": [
          "{\n  \"_id\": \"686280078c2cfd880794eaf6\",\n  \"a_very_long_field_name_that_exceeds_normal_mongodb_key_length_limit_and_may_cause_issues\": \"updated_value\"\n}",
          "{\n  \"_id\": \"6862968254d99b844f558b8a\",\n  \"name\": \"Test Document\",\n  \"content\": \"This is a test document for insertion.\",\n  \"type\": \"test\"\n}",
          "{\n  \"_id\": \"6862968254d99b844f558b8b\",\n  \"name\": \"Another Test Document\",\n  \"timestamp\": \"2023-10-01T12:00:00Z\",\n  \"status\": \"active\"\n}"
        ],
        "execution_time": 0.030004501342773438,
        "is_security_test": false
      },
      {
        "case_name": "ErrorHandling_MissingDatabaseName",
        "purpose": "验证缺少必要参数database_name时，工具是否抛出ValueError。",
        "args": {
          "collection_name": "test_collection",
          "query": {}
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_find_documents: 1 validation error for mcp_find_documentsArguments\ndatabase_name\n  Field required [type=missing, input_value={'collection_name': 'test...ollection', 'query': {}}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.04750490188598633,
        "is_security_test": false
      },
      {
        "case_name": "ErrorHandling_MissingCollectionName",
        "purpose": "验证缺少必要参数collection_name时，工具是否抛出ValueError。",
        "args": {
          "database_name": "test_db",
          "query": {}
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_find_documents: 1 validation error for mcp_find_documentsArguments\ncollection_name\n  Field required [type=missing, input_value={'database_name': 'test_db', 'query': {}}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.03899884223937988,
        "is_security_test": false
      },
      {
        "case_name": "ErrorHandling_InvalidQueryFormat",
        "purpose": "验证提供错误格式的query参数（例如字符串而非字典）时，工具是否抛出PyMongoError。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": "invalid_query_string"
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_find_documents: 1 validation error for mcp_find_documentsArguments\nquery\n  Input should be a valid dictionary [type=dict_type, input_value='invalid_query_string', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/dict_type"
        },
        "execution_time": 0.03394746780395508,
        "is_security_test": false
      },
      {
        "case_name": "Security_AuthenticatedAccessRequired_Find",
        "purpose": "验证在需要认证的集合上执行查询操作时，工具是否要求提供有效身份验证信息。",
        "args": {
          "database_name": "secure_db",
          "collection_name": "secure_collection",
          "query": {}
        },
        "response": [
          "{\n  \"_id\": \"6857ee5f75df00337e4c0c71\",\n  \"credentials\": \"updated_sensitive_data\"\n}",
          "{\n  \"_id\": \"685ff44959b95dec06f7bf47\",\n  \"name\": \"Frank\",\n  \"age\": 40\n}",
          "{\n  \"_id\": \"686280078c2cfd880794eaf8\",\n  \"script\": \"<script>alert('xss')</script>\",\n  \"$eval\": \"malicious_code\"\n}",
          "{\n  \"_id\": \"686280078c2cfd880794eaf9\",\n  \"level1\": {\n    \"level2\": {\n      \"level3\": {\n        \"level4\": {\n          \"level5\": {\n            \"payload\": \"updated_deep_nested_attack\"\n          }\n        }\n      }\n    }\n  }\n}",
          "{\n  \"_id\": \"6862968254d99b844f558b8d\",\n  \"sensitive_data\": \"classified information\"\n}"
        ],
        "execution_time": 0.08103656768798828,
        "is_security_test": false
      },
      {
        "case_name": "Security_UnauthorizedUserFindAttempt",
        "purpose": "验证无权限用户尝试查询集合时，工具是否拒绝请求并抛出适当错误。",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "restricted_collection",
          "query": {}
        },
        "response": {
          "result": "{\n  \"_id\": \"6862968254d99b844f558b8e\",\n  \"data\": \"unauthorized insert attempt\"\n}"
        },
        "execution_time": 0.031000137329101562,
        "is_security_test": false
      },
      {
        "case_name": "BasicFunctionality_DocumentsWithProjection",
        "purpose": "验证使用projection参数过滤字段时，工具是否正确返回指定字段。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {},
          "projection": {
            "name": 1,
            "_id": 0
          },
          "limit": 0
        },
        "response": [
          "{}",
          "{\n  \"name\": \"Test Document\"\n}",
          "{\n  \"name\": \"Another Test Document\"\n}"
        ],
        "execution_time": 0.03099989891052246,
        "is_security_test": false
      }
    ],
    "mcp_update_document": [
      {
        "case_name": "BasicFunctionality_DocumentUpdatedSuccessfully",
        "purpose": "验证工具能够成功更新指定集合中符合查询条件的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {
            "type": "test"
          },
          "update_data": {
            "$set": {
              "content": "This document has been updated."
            }
          },
          "upsert": false,
          "update_many": false
        },
        "response": {
          "result": "{\n  \"matched_count\": 1,\n  \"modified_count\": 1,\n  \"upserted_id\": null\n}"
        },
        "execution_time": 0.012001991271972656,
        "is_security_test": false
      },
      {
        "case_name": "BasicFunctionality_UpdateMultipleDocumentsWithUpdateMany",
        "purpose": "验证设置update_many为True时，工具是否能更新所有匹配的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {
            "status": "active"
          },
          "update_data": {
            "$set": {
              "status": "inactive"
            }
          },
          "upsert": false,
          "update_many": true
        },
        "response": {
          "result": "{\n  \"matched_count\": 1,\n  \"modified_count\": 1,\n  \"upserted_id\": null\n}"
        },
        "execution_time": 0.016556739807128906,
        "is_security_test": false
      },
      {
        "case_name": "BasicFunctionality_UpdateWithUpsertEnabled",
        "purpose": "验证当没有文档匹配查询条件且upsert为True时，是否插入新文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {
            "nonexistent_key": "nonexistent_value"
          },
          "update_data": {
            "$set": {
              "name": "New Document via Upsert"
            }
          },
          "upsert": true,
          "update_many": false
        },
        "response": {
          "result": "{\n  \"matched_count\": 0,\n  \"modified_count\": 0,\n  \"upserted_id\": \"686296cf2f114bff869d582e\"\n}"
        },
        "execution_time": 0.01999831199645996,
        "is_security_test": false
      },
      {
        "case_name": "BoundaryCondition_EmptyDatabaseName",
        "purpose": "验证当数据库名称为空字符串时，工具是否抛出ValueError。",
        "args": {
          "database_name": "",
          "collection_name": "test_collection",
          "query": {
            "type": "test"
          },
          "update_data": {
            "$set": {
              "content": "This document has been updated."
            }
          },
          "upsert": false,
          "update_many": false
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_update_document: Database name and collection name must be provided"
        },
        "execution_time": 0.035185813903808594,
        "is_security_test": false
      },
      {
        "case_name": "BoundaryCondition_EmptyCollectionName",
        "purpose": "验证当集合名称为空字符串时，工具是否抛出ValueError。",
        "args": {
          "database_name": "test_db",
          "collection_name": "",
          "query": {
            "type": "test"
          },
          "update_data": {
            "$set": {
              "content": "This document has been updated."
            }
          },
          "upsert": false,
          "update_many": false
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_update_document: Database name and collection name must be provided"
        },
        "execution_time": 0.011998176574707031,
        "is_security_test": false
      },
      {
        "case_name": "ErrorHandling_MissingDatabaseName",
        "purpose": "验证缺少必要参数database_name时，工具是否抛出ValueError。",
        "args": {
          "collection_name": "test_collection",
          "query": {
            "type": "test"
          },
          "update_data": {
            "$set": {
              "content": "This document has been updated."
            }
          },
          "upsert": false,
          "update_many": false
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_update_document: 1 validation error for mcp_update_documentArguments\ndatabase_name\n  Field required [type=missing, input_value={'collection_name': 'test...e, 'update_many': False}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.01999974250793457,
        "is_security_test": false
      },
      {
        "case_name": "ErrorHandling_MissingCollectionName",
        "purpose": "验证缺少必要参数collection_name时，工具是否抛出ValueError。",
        "args": {
          "database_name": "test_db",
          "query": {
            "type": "test"
          },
          "update_data": {
            "$set": {
              "content": "This document has been updated."
            }
          },
          "upsert": false,
          "update_many": false
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_update_document: 1 validation error for mcp_update_documentArguments\ncollection_name\n  Field required [type=missing, input_value={'database_name': 'test_d...e, 'update_many': False}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.014004945755004883,
        "is_security_test": false
      },
      {
        "case_name": "ErrorHandling_InvalidQueryFormat",
        "purpose": "验证提供错误格式的query参数（例如字符串而非字典）时，工具是否抛出PyMongoError。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": "invalid_query_string",
          "update_data": {
            "$set": {
              "content": "This document has been updated."
            }
          },
          "upsert": false,
          "update_many": false
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_update_document: 1 validation error for mcp_update_documentArguments\nquery\n  Input should be a valid dictionary [type=dict_type, input_value='invalid_query_string', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/dict_type"
        },
        "execution_time": 0.01518106460571289,
        "is_security_test": false
      },
      {
        "case_name": "ErrorHandling_InvalidUpdateDataMissingOperator",
        "purpose": "验证update_data中未包含MongoDB更新操作符（如$set）时，工具是否抛出PyMongoError。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {
            "type": "test"
          },
          "update_data": {
            "content": "This document has been updated without operator."
          },
          "upsert": false,
          "update_many": false
        },
        "response": {
          "result": "{\n  \"matched_count\": 1,\n  \"modified_count\": 1,\n  \"upserted_id\": null\n}"
        },
        "execution_time": 0.0490109920501709,
        "is_security_test": false
      },
      {
        "case_name": "Security_AuthenticatedAccessRequired_Update",
        "purpose": "验证在需要认证的集合上执行更新操作时，工具是否要求提供有效身份验证信息。",
        "args": {
          "database_name": "secure_db",
          "collection_name": "secure_collection",
          "query": {
            "sensitive_data": "classified information"
          },
          "update_data": {
            "$set": {
              "sensitive_data": "updated classified information"
            }
          },
          "upsert": false,
          "update_many": false
        },
        "response": {
          "result": "{\n  \"matched_count\": 1,\n  \"modified_count\": 1,\n  \"upserted_id\": null\n}"
        },
        "execution_time": 0.04601573944091797,
        "is_security_test": false
      },
      {
        "case_name": "Security_UnauthorizedUserUpdateAttempt",
        "purpose": "验证无权限用户尝试更新集合中的文档时，工具是否拒绝请求并抛出适当错误。",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "restricted_collection",
          "query": {
            "data": "unauthorized insert attempt"
          },
          "update_data": {
            "$set": {
              "data": "modified unauthorized data"
            }
          },
          "upsert": false,
          "update_many": false
        },
        "response": {
          "result": "{\n  \"matched_count\": 1,\n  \"modified_count\": 1,\n  \"upserted_id\": null\n}"
        },
        "execution_time": 0.015000581741333008,
        "is_security_test": false
      },
      {
        "case_name": "BasicFunctionality_UpdateWithSpecialCharactersInData",
        "purpose": "验证工具能否正确处理并更新包含特殊字符的文档内容。",
        "args": {
          "database_name": "test_db",
          "collection_name": "special_chars_collection",
          "query": {
            "title": "Document with special chars: !@#$%^&*()_+{}[]|\\:\"<>?/~`"
          },
          "update_data": {
            "$set": {
              "description": "This document has been updated with new special characters: \n\r\t\\\"'`~!@#$%^&*()-_=+[]{}|;:,.<>/?"
            }
          },
          "upsert": false,
          "update_many": false
        },
        "response": {
          "result": "{\n  \"matched_count\": 1,\n  \"modified_count\": 1,\n  \"upserted_id\": null\n}"
        },
        "execution_time": 0.018063068389892578,
        "is_security_test": false
      }
    ],
    "mcp_delete_document": [
      {
        "case_name": "BasicFunctionality_DeleteSingleMatchingDocument",
        "purpose": "验证工具能够成功删除符合查询条件的第一个文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {
            "type": "test"
          },
          "delete_many": false
        },
        "response": {
          "result": "{\n  \"deleted_count\": 1\n}"
        },
        "execution_time": 0.009508609771728516,
        "is_security_test": false
      },
      {
        "case_name": "BasicFunctionality_DeleteAllMatchingDocuments",
        "purpose": "验证当delete_many参数为True时，工具能删除所有匹配的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {
            "status": "inactive"
          },
          "delete_many": true
        },
        "response": {
          "result": "{\n  \"deleted_count\": 1\n}"
        },
        "execution_time": 0.0110015869140625,
        "is_security_test": false
      },
      {
        "case_name": "BasicFunctionality_NoDocumentDeletedWhenQueryDoesNotMatch",
        "purpose": "验证当查询条件不匹配任何文档时，工具不会删除任何文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {
            "nonexistent_key": "nonexistent_value"
          },
          "delete_many": false
        },
        "response": {
          "result": "{\n  \"deleted_count\": 1\n}"
        },
        "execution_time": 0.008999824523925781,
        "is_security_test": false
      },
      {
        "case_name": "BoundaryCondition_EmptyDatabaseName",
        "purpose": "验证当数据库名称为空字符串时，工具是否抛出ValueError。",
        "args": {
          "database_name": "",
          "collection_name": "test_collection",
          "query": {
            "type": "test"
          },
          "delete_many": false
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_delete_document: Database name and collection name must be provided"
        },
        "execution_time": 0.004997968673706055,
        "is_security_test": false
      },
      {
        "case_name": "BoundaryCondition_EmptyCollectionName",
        "purpose": "验证当集合名称为空字符串时，工具是否抛出ValueError。",
        "args": {
          "database_name": "test_db",
          "collection_name": "",
          "query": {
            "type": "test"
          },
          "delete_many": false
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_delete_document: Database name and collection name must be provided"
        },
        "execution_time": 0.007999897003173828,
        "is_security_test": false
      },
      {
        "case_name": "ErrorHandling_MissingDatabaseName",
        "purpose": "验证缺少必要参数database_name时，工具是否抛出ValueError。",
        "args": {
          "collection_name": "test_collection",
          "query": {
            "type": "test"
          },
          "delete_many": false
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_delete_document: 1 validation error for mcp_delete_documentArguments\ndatabase_name\n  Field required [type=missing, input_value={'collection_name': 'test...}, 'delete_many': False}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.003998756408691406,
        "is_security_test": false
      },
      {
        "case_name": "ErrorHandling_MissingCollectionName",
        "purpose": "验证缺少必要参数collection_name时，工具是否抛出ValueError。",
        "args": {
          "database_name": "test_db",
          "query": {
            "type": "test"
          },
          "delete_many": false
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_delete_document: 1 validation error for mcp_delete_documentArguments\ncollection_name\n  Field required [type=missing, input_value={'database_name': 'test_d...}, 'delete_many': False}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.003999471664428711,
        "is_security_test": false
      },
      {
        "case_name": "ErrorHandling_InvalidQueryFormat",
        "purpose": "验证提供错误格式的query参数（例如字符串而非字典）时，工具是否抛出PyMongoError。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": "invalid_query_string",
          "delete_many": false
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_delete_document: 1 validation error for mcp_delete_documentArguments\nquery\n  Input should be a valid dictionary [type=dict_type, input_value='invalid_query_string', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/dict_type"
        },
        "execution_time": 0.008002758026123047,
        "is_security_test": false
      },
      {
        "case_name": "Security_AuthenticatedAccessRequired_Delete",
        "purpose": "验证在需要认证的集合上执行删除操作时，工具是否要求提供有效身份验证信息。",
        "args": {
          "database_name": "secure_db",
          "collection_name": "secure_collection",
          "query": {
            "sensitive_data": "classified information"
          },
          "delete_many": false
        },
        "response": {
          "result": "{\n  \"deleted_count\": 0\n}"
        },
        "execution_time": 0.0059986114501953125,
        "is_security_test": false
      },
      {
        "case_name": "Security_UnauthorizedUserDeleteAttempt",
        "purpose": "验证无权限用户尝试删除集合中的文档时，工具是否拒绝请求并抛出适当错误。",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "restricted_collection",
          "query": {
            "data": "unauthorized insert attempt"
          },
          "delete_many": true
        },
        "response": {
          "result": "{\n  \"deleted_count\": 0\n}"
        },
        "execution_time": 0.006000041961669922,
        "is_security_test": false
      }
    ]
  },
  "total_cases": 64
}