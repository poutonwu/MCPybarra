{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "gemini-2.5-pro-mcp_word_document_automation",
  "server_path": "workspace/pipeline-output-servers/gemini-2.5-pro/mcp_word_document_automation/refined/server.py",
  "timestamp": "2025-07-12T20:37:57.030654",
  "tools": [
    {
      "name": "create_document",
      "description": "\n    Creates a new, empty Word document (.docx) and sets its core metadata properties.\n\n    Args:\n        file_path (str): The full path where the new Word document will be saved (e.g., \"C:/docs/mydocument.docx\").\n        title (str, optional): The title of the document.\n        author (str, optional): The author's name.\n        subject (str, optional): The subject of the document.\n        keywords (str, optional): Comma-separated keywords for the document.\n\n    Returns:\n        dict: A dictionary confirming the action, e.g., {\"status\": \"success\", \"file_path\": \"C:/docs/mydocument.docx\"}.\n\n    Example:\n        create_document(file_path=\"mydocument.docx\", title=\"My Doc\", author=\"John Doe\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "title": {
            "default": null,
            "title": "Title",
            "type": "string"
          },
          "author": {
            "default": null,
            "title": "Author",
            "type": "string"
          },
          "subject": {
            "default": null,
            "title": "Subject",
            "type": "string"
          },
          "keywords": {
            "default": null,
            "title": "Keywords",
            "type": "string"
          }
        },
        "required": [
          "file_path"
        ],
        "title": "create_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "get_document_text",
      "description": "\n    Extracts and returns all text content from an existing Word document.\n\n    Args:\n        file_path (str): The path to the Word document to be read.\n\n    Returns:\n        str: The complete text content of the document, with paragraphs separated by newline characters.\n\n    Example:\n        get_document_text(file_path=\"mydocument.docx\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          }
        },
        "required": [
          "file_path"
        ],
        "title": "get_document_textArguments",
        "type": "object"
      }
    },
    {
      "name": "add_paragraph",
      "description": "\n    Adds a new paragraph of text to the end of a specified Word document.\n\n    Args:\n        file_path (str): The path to the Word document.\n        text (str): The text content to be added as a new paragraph.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        add_paragraph(file_path=\"mydocument.docx\", text=\"This is a new paragraph.\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "text": {
            "title": "Text",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "text"
        ],
        "title": "add_paragraphArguments",
        "type": "object"
      }
    },
    {
      "name": "add_heading",
      "description": "\n    Adds a heading to the end of a Word document with a specified level.\n\n    Args:\n        file_path (str): The path to the Word document.\n        text (str): The text of the heading.\n        level (int): The heading level, from 0 (Title) to 9. Level 1 is a main heading.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        add_heading(file_path=\"mydocument.docx\", text=\"Chapter 1\", level=1)\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "text": {
            "title": "Text",
            "type": "string"
          },
          "level": {
            "title": "Level",
            "type": "integer"
          }
        },
        "required": [
          "file_path",
          "text",
          "level"
        ],
        "title": "add_headingArguments",
        "type": "object"
      }
    },
    {
      "name": "create_custom_style",
      "description": "\n    Creates a new custom paragraph style within the document.\n\n    Args:\n        file_path (str): The path to the Word document.\n        style_name (str): The name for the new custom style.\n        font_name (str, optional): The font name (e.g., \"Calibri\", \"Times New Roman\").\n        font_size_pt (int, optional): The font size in points (e.g., 12).\n        bold (bool, optional): Whether the text should be bold. Defaults to False.\n        italic (bool, optional): Whether the text should be italic. Defaults to False.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        create_custom_style(file_path=\"mydocument.docx\", style_name=\"MyStyle\", font_name=\"Arial\", font_size_pt=14, bold=True)\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "style_name": {
            "title": "Style Name",
            "type": "string"
          },
          "font_name": {
            "default": "Calibri",
            "title": "Font Name",
            "type": "string"
          },
          "font_size_pt": {
            "default": 12,
            "title": "Font Size Pt",
            "type": "integer"
          },
          "bold": {
            "default": false,
            "title": "Bold",
            "type": "boolean"
          },
          "italic": {
            "default": false,
            "title": "Italic",
            "type": "boolean"
          }
        },
        "required": [
          "file_path",
          "style_name"
        ],
        "title": "create_custom_styleArguments",
        "type": "object"
      }
    },
    {
      "name": "format_text",
      "description": "\n    Finds the first occurrence of a specific text string in the document and applies bold and/or italic formatting to it.\n    This is a simplified implementation. It formats the entire run containing the text, not just the text itself.\n\n    Args:\n        file_path (str): The path to the Word document.\n        search_text (str): The text to find and format.\n        bold (bool, optional): Apply bold formatting. Defaults to False.\n        italic (bool, optional): Apply italic formatting. Defaults to False.\n\n    Returns:\n        dict: A dictionary indicating success or failure.\n\n    Example:\n        format_text(file_path=\"mydocument.docx\", search_text=\"important\", bold=True)\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "search_text": {
            "title": "Search Text",
            "type": "string"
          },
          "bold": {
            "default": false,
            "title": "Bold",
            "type": "boolean"
          },
          "italic": {
            "default": false,
            "title": "Italic",
            "type": "boolean"
          }
        },
        "required": [
          "file_path",
          "search_text"
        ],
        "title": "format_textArguments",
        "type": "object"
      }
    },
    {
      "name": "protect_document",
      "description": "\n    Sets write protection on a Word document. Note: This is not supported by the current library.\n\n    Args:\n        file_path (str): The path to the Word document.\n        password (str): The password required to disable protection.\n\n    Returns:\n        dict: A dictionary confirming the attempt.\n\n    Example:\n        protect_document(file_path=\"mydocument.docx\", password=\"password123\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "password"
        ],
        "title": "protect_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "add_footnote_to_document",
      "description": "\n    Adds a footnote to a specific paragraph. Note: This is not directly supported by the current library.\n\n    Args:\n        file_path (str): The path to the Word document.\n        paragraph_index (int): The 0-based index of the paragraph for the footnote.\n        footnote_text (str): The text content of the footnote.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        add_footnote_to_document(file_path=\"mydocument.docx\", paragraph_index=0, footnote_text=\"This is a footnote.\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "paragraph_index": {
            "title": "Paragraph Index",
            "type": "integer"
          },
          "footnote_text": {
            "title": "Footnote Text",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "paragraph_index",
          "footnote_text"
        ],
        "title": "add_footnote_to_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "get_paragraph_text_from_document",
      "description": "\n    Retrieves the text from a single, specific paragraph based on its index.\n\n    Args:\n        file_path (str): The path to the Word document.\n        paragraph_index (int): The 0-based index of the paragraph to retrieve.\n\n    Returns:\n        str: The text content of the specified paragraph or an error message.\n\n    Example:\n        get_paragraph_text_from_document(file_path=\"mydocument.docx\", paragraph_index=0)\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "paragraph_index": {
            "title": "Paragraph Index",
            "type": "integer"
          }
        },
        "required": [
          "file_path",
          "paragraph_index"
        ],
        "title": "get_paragraph_text_from_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "find_text_in_document",
      "description": "\n    Searches the document for a text string and returns the indices of all paragraphs containing the text.\n\n    Args:\n        file_path (str): The path to the Word document.\n        search_text (str): The text to search for.\n\n    Returns:\n        list: A list of integer indices for each paragraph where the text was found, or a list containing an error dictionary.\n\n    Example:\n        find_text_in_document(file_path=\"mydocument.docx\", search_text=\"hello\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "search_text": {
            "title": "Search Text",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "search_text"
        ],
        "title": "find_text_in_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "add_table",
      "description": "\n    Adds a table with a specified number of rows and columns to the end of the document.\n\n    Args:\n        file_path (str): The path to the Word document.\n        rows (int): The number of rows in the table.\n        cols (int): The number of columns in the table.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        add_table(file_path=\"mydocument.docx\", rows=3, cols=4)\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "rows": {
            "title": "Rows",
            "type": "integer"
          },
          "cols": {
            "title": "Cols",
            "type": "integer"
          }
        },
        "required": [
          "file_path",
          "rows",
          "cols"
        ],
        "title": "add_tableArguments",
        "type": "object"
      }
    },
    {
      "name": "add_image",
      "description": "\n    Adds an image from a local path to the end of the document.\n\n    Args:\n        doc_file_path (str): The path to the Word document.\n        image_file_path (str): The path to the image file to be inserted.\n        width_inches (float, optional): The width of the image in inches.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        add_image(doc_file_path=\"mydocument.docx\", image_file_path=\"myimage.png\", width_inches=2.5)\n    ",
      "args_schema": {
        "properties": {
          "doc_file_path": {
            "title": "Doc File Path",
            "type": "string"
          },
          "image_file_path": {
            "title": "Image File Path",
            "type": "string"
          },
          "width_inches": {
            "default": null,
            "title": "Width Inches",
            "type": "number"
          }
        },
        "required": [
          "doc_file_path",
          "image_file_path"
        ],
        "title": "add_imageArguments",
        "type": "object"
      }
    },
    {
      "name": "add_page_break",
      "description": "\n    Inserts a page break at the end of the document.\n\n    Args:\n        file_path (str): The path to the Word document.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        add_page_break(file_path=\"mydocument.docx\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          }
        },
        "required": [
          "file_path"
        ],
        "title": "add_page_breakArguments",
        "type": "object"
      }
    },
    {
      "name": "add_footer",
      "description": "\n    Adds or replaces the footer for the default section of the document.\n\n    Args:\n        file_path (str): The path to the Word document.\n        footer_text (str): The text to place in the footer.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        add_footer(file_path=\"mydocument.docx\", footer_text=\"Copyright 2024\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "footer_text": {
            "title": "Footer Text",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "footer_text"
        ],
        "title": "add_footerArguments",
        "type": "object"
      }
    },
    {
      "name": "add_header",
      "description": "\n    Adds or replaces the header for the default section of the document.\n\n    Args:\n        file_path (str): The path to the Word document.\n        header_text (str): The text to place in the header.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        add_header(file_path=\"mydocument.docx\", header_text=\"My Document Header\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "header_text": {
            "title": "Header Text",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "header_text"
        ],
        "title": "add_headerArguments",
        "type": "object"
      }
    },
    {
      "name": "convert_to_pdf",
      "description": "\n    Converts a Word document to a PDF file.\n\n    Args:\n        docx_path (str): The path to the source Word document.\n        pdf_path (str): The path where the output PDF file will be saved.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        convert_to_pdf(docx_path=\"mydocument.docx\", pdf_path=\"mydocument.pdf\")\n    ",
      "args_schema": {
        "properties": {
          "docx_path": {
            "title": "Docx Path",
            "type": "string"
          },
          "pdf_path": {
            "title": "Pdf Path",
            "type": "string"
          }
        },
        "required": [
          "docx_path",
          "pdf_path"
        ],
        "title": "convert_to_pdfArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "create_document": [
      {
        "case_name": "Create document with minimal required parameters",
        "purpose": "验证工具在仅提供必填参数时能否成功创建空文档",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_document.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_document.docx\"\n}"
        },
        "execution_time": 0.022097110748291016,
        "is_functional_test": true
      },
      {
        "case_name": "Create document with all metadata properties",
        "purpose": "验证工具是否能正确设置所有可选的元数据属性（title, author, subject, keywords）",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_document.docx",
          "title": "Test Document",
          "author": "Jane Smith",
          "subject": "Testing Metadata",
          "keywords": "test, metadata, docx"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\metadata_document.docx\"\n}"
        },
        "execution_time": 0.022904634475708008,
        "is_functional_test": true
      },
      {
        "case_name": "Create document in restricted directory",
        "purpose": "测试尝试写入受限目录是否会安全失败，防止权限越权",
        "args": {
          "file_path": "C:\\Windows\\system32\\not_allowed.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"[Errno 13] Permission denied: 'C:\\\\\\\\Windows\\\\\\\\system32\\\\\\\\not_allowed.docx'\"\n}"
        },
        "execution_time": 0.014945268630981445,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid file path format",
        "purpose": "验证工具对非法文件路径的处理能力",
        "args": {
          "file_path": "invalid/<path>:*\"?|filename.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"[Errno 22] Invalid argument: 'invalid/<path>:*\\\"?|filename.docx'\"\n}"
        },
        "execution_time": 0.021999359130859375,
        "is_functional_test": false
      },
      {
        "case_name": "Overwrite existing read-only document",
        "purpose": "测试工具是否能够优雅地处理覆盖只读文件的情况",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_sample.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_sample.docx\"\n}"
        },
        "execution_time": 0.026300668716430664,
        "is_functional_test": false
      },
      {
        "case_name": "Create document with very long file path",
        "purpose": "验证工具对最大文件路径长度限制的兼容性",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new.docx\"\n}"
        },
        "execution_time": 0.026001930236816406,
        "is_functional_test": true
      },
      {
        "case_name": "Missing file path parameter",
        "purpose": "验证工具在缺少必填参数时是否能返回明确错误",
        "args": {
          "title": "No File Path Provided"
        },
        "response": {
          "error": "ToolException: Error executing tool create_document: 1 validation error for create_documentArguments\nfile_path\n  Field required [type=missing, input_value={'title': 'No File Path Provided'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.0019991397857666016,
        "is_functional_test": false
      },
      {
        "case_name": "Create document with special characters in metadata",
        "purpose": "测试特殊字符在元数据字段中的处理能力",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_metadata.docx",
          "title": "Title@#$_with!Special^Chars",
          "author": "Author<>&\"'",
          "subject": "Subject[]{}|=+",
          "keywords": "key1, key2@domain.com, !@#$%^&*()"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special_metadata.docx\"\n}"
        },
        "execution_time": 0.02200174331665039,
        "is_functional_test": true
      }
    ],
    "get_document_text": [
      {
        "case_name": "Extract text from empty document",
        "purpose": "验证从空文档中提取文本是否返回空字符串",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_document.docx"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.009429216384887695,
        "is_functional_test": true
      },
      {
        "case_name": "Extract text from document with metadata",
        "purpose": "验证包含元数据的文档能否正确提取可见文本内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_document.docx"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.017999887466430664,
        "is_functional_test": true
      },
      {
        "case_name": "Extract text from read-only document",
        "purpose": "验证工具是否能从只读文档中提取文本",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_sample.docx"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_sample.docx\"}"
        },
        "execution_time": 0.003998756408691406,
        "is_functional_test": true
      },
      {
        "case_name": "Extract text from non-existent file",
        "purpose": "验证尝试读取不存在的文件时是否能安全失败并返回明确错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.docx"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.docx\"}"
        },
        "execution_time": 0.005994081497192383,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to extract text from a protected system directory",
        "purpose": "安全性测试：验证尝试从受限系统目录读取文档是否会安全失败，防止路径穿越攻击",
        "args": {
          "file_path": "C:\\Windows\\system32\\not_allowed.docx"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"The specified file does not exist: C:\\\\Windows\\\\system32\\\\not_allowed.docx\"}"
        },
        "execution_time": 0.005003690719604492,
        "is_functional_test": false
      },
      {
        "case_name": "Extract text from document with special characters in content",
        "purpose": "验证特殊字符在文档正文中的处理能力",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_metadata.docx"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.02494668960571289,
        "is_functional_test": true
      },
      {
        "case_name": "Extract text from very long file path document",
        "purpose": "验证工具对最大文件路径长度限制的兼容性下的文本提取能力",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new.docx"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.01651930809020996,
        "is_functional_test": true
      },
      {
        "case_name": "Missing file path parameter",
        "purpose": "验证工具在缺少必填参数时是否能返回明确错误",
        "args": {},
        "response": {
          "error": "ToolException: Error executing tool get_document_text: 1 validation error for get_document_textArguments\nfile_path\n  Field required [type=missing, input_value={}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.0039937496185302734,
        "is_functional_test": false
      }
    ],
    "add_paragraph": [
      {
        "case_name": "Add paragraph to empty document",
        "purpose": "验证向一个空文档中添加新段落的基本功能是否正常工作",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_document.docx",
          "text": "This is a new paragraph added to an empty document."
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Paragraph added.\"\n}"
        },
        "execution_time": 0.023509502410888672,
        "is_functional_test": true
      },
      {
        "case_name": "Add paragraph to existing document with metadata",
        "purpose": "验证向包含元数据的文档中添加新段落时，原有内容和结构是否保持完整",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_document.docx",
          "text": "This paragraph is added to a document that already contains metadata."
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Paragraph added.\"\n}"
        },
        "execution_time": 0.024000167846679688,
        "is_functional_test": true
      },
      {
        "case_name": "Add paragraph to read-only document",
        "purpose": "测试尝试向只读文档中添加段落是否会安全失败并返回明确错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.docx",
          "text": "Attempting to add text to a read-only file should fail gracefully."
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Paragraph added.\"\n}"
        },
        "execution_time": 0.03599834442138672,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to add paragraph to non-existent file",
        "purpose": "验证工具在目标文件不存在时能否优雅地处理错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.docx",
          "text": "Trying to add a paragraph to a non-existent file should return an error."
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.docx\"\n}"
        },
        "execution_time": 0.0030059814453125,
        "is_functional_test": false
      },
      {
        "case_name": "Add paragraph with special characters in text",
        "purpose": "验证特殊字符（如中文、标点、符号）在新增段落中的正确处理能力",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_metadata.docx",
          "text": "这是一个包含特殊字符的段落：!@#$%^&*()_+=-[]{}|;':\",./<>?`~"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Paragraph added.\"\n}"
        },
        "execution_time": 0.024506807327270508,
        "is_functional_test": true
      },
      {
        "case_name": "Add paragraph to document in restricted system directory",
        "purpose": "安全性测试：验证尝试向系统受限目录中的文档添加内容是否会安全失败",
        "args": {
          "file_path": "C:\\Windows\\system32\\not_allowed.docx",
          "text": "Security test: attempting to modify a file in a protected system directory."
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: C:\\\\Windows\\\\system32\\\\not_allowed.docx\"\n}"
        },
        "execution_time": 0.0030002593994140625,
        "is_functional_test": false
      },
      {
        "case_name": "Add paragraph with empty text input",
        "purpose": "验证提供空字符串作为文本输入时工具的行为",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_document.docx",
          "text": ""
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Paragraph added.\"\n}"
        },
        "execution_time": 0.04351949691772461,
        "is_functional_test": true
      }
    ],
    "add_heading": [
      {
        "case_name": "Add heading to new document with default level",
        "purpose": "验证在新建文档中添加默认级别（level=1）标题的基本功能",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_document.docx",
          "text": "Introduction",
          "level": 1
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Heading added.\"\n}"
        },
        "execution_time": 0.020003557205200195,
        "is_functional_test": true
      },
      {
        "case_name": "Add heading with minimum level (level=0)",
        "purpose": "验证添加最小支持级别（level=0，即Title）的标题",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_document.docx",
          "text": "Project Title",
          "level": 0
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Heading added.\"\n}"
        },
        "execution_time": 0.0255277156829834,
        "is_functional_test": true
      },
      {
        "case_name": "Add heading with maximum level (level=9)",
        "purpose": "验证添加最大支持级别（level=9）的标题",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_metadata.docx",
          "text": "Sub-sub-section",
          "level": 9
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Heading added.\"\n}"
        },
        "execution_time": 0.027016878128051758,
        "is_functional_test": true
      },
      {
        "case_name": "Add heading to document in restricted directory",
        "purpose": "验证尝试在受限系统目录中添加标题是否会安全失败",
        "args": {
          "file_path": "C:\\Windows\\system32\\not_allowed.docx",
          "text": "System Heading",
          "level": 1
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: C:\\\\Windows\\\\system32\\\\not_allowed.docx\"\n}"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": false
      },
      {
        "case_name": "Add heading with invalid file path",
        "purpose": "验证工具对非法文件路径的处理能力",
        "args": {
          "file_path": "invalid/<path>:*\"?|filename.docx",
          "text": "Invalid Path Heading",
          "level": 1
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\workspace\\\\pipeline-output-servers\\\\gemini-2.5-pro\\\\mcp_word_document_automation\\\\refined\\\\invalid\\\\<path>:*\\\"?|filename.docx\"\n}"
        },
        "execution_time": 0.003376007080078125,
        "is_functional_test": false
      },
      {
        "case_name": "Add heading to non-existent file",
        "purpose": "验证尝试向不存在的文档添加标题时是否能优雅失败",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.docx",
          "text": "Non-existent File Heading",
          "level": 1
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.docx\"\n}"
        },
        "execution_time": 0.007037162780761719,
        "is_functional_test": false
      },
      {
        "case_name": "Add heading with missing required parameters",
        "purpose": "验证缺少必填参数时是否返回明确错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_document.docx",
          "level": 1
        },
        "response": {
          "error": "ToolException: Error executing tool add_heading: 1 validation error for add_headingArguments\ntext\n  Field required [type=missing, input_value={'file_path': 'D:\\\\devWor...ument.docx', 'level': 1}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.0030052661895751953,
        "is_functional_test": false
      },
      {
        "case_name": "Add heading with special characters in text",
        "purpose": "验证特殊字符在标题文本中的处理能力",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_document.docx",
          "text": "Chapter #1: Introduction @2025",
          "level": 2
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Heading added.\"\n}"
        },
        "execution_time": 0.03366875648498535,
        "is_functional_test": true
      }
    ],
    "create_custom_style": [
      {
        "case_name": "Create custom style with minimal required parameters",
        "purpose": "验证工具在仅提供必填参数时能否成功创建自定义段落样式",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_document.docx",
          "style_name": "MinimalStyle"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Style 'MinimalStyle' created.\"\n}"
        },
        "execution_time": 0.027039766311645508,
        "is_functional_test": true
      },
      {
        "case_name": "Create custom style with all optional parameters",
        "purpose": "验证工具是否能正确设置所有可选的样式属性（字体、字号、粗体、斜体）",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_document.docx",
          "style_name": "FullFeatureStyle",
          "font_name": "Times New Roman",
          "font_size_pt": 14,
          "bold": true,
          "italic": true
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Style 'FullFeatureStyle' created.\"\n}"
        },
        "execution_time": 0.026261568069458008,
        "is_functional_test": true
      },
      {
        "case_name": "Apply custom style to a read-only document",
        "purpose": "测试工具是否能够优雅地处理向只读文档添加样式的情况",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_sample.docx",
          "style_name": "ReadOnlyStyle"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_sample.docx\"\n}"
        },
        "execution_time": 0.0029973983764648438,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to create style in non-existent file",
        "purpose": "验证尝试在不存在的文件中创建样式是否会安全失败并返回明确错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.docx",
          "style_name": "NonExistentFileStyle"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.docx\"\n}"
        },
        "execution_time": 0.0019969940185546875,
        "is_functional_test": false
      },
      {
        "case_name": "Create style with invalid file path",
        "purpose": "验证工具对非法文件路径的处理能力",
        "args": {
          "file_path": "invalid/<path>:*\"?|filename.docx",
          "style_name": "InvalidPathStyle"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\workspace\\\\pipeline-output-servers\\\\gemini-2.5-pro\\\\mcp_word_document_automation\\\\refined\\\\invalid\\\\<path>:*\\\"?|filename.docx\"\n}"
        },
        "execution_time": 0.0019998550415039062,
        "is_functional_test": false
      },
      {
        "case_name": "Create style with very long name",
        "purpose": "验证工具对最大样式名称长度限制的兼容性",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_document.docx",
          "style_name": "VeryLongStyleNameThatExceedsMaximumAllowedLengthForStyleNamesInDocumentProcessingTools"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Style 'VeryLongStyleNameThatExceedsMaximumAllowedLengthForStyleNamesInDocumentProcessingTools' created.\"\n}"
        },
        "execution_time": 0.02300405502319336,
        "is_functional_test": true
      },
      {
        "case_name": "Missing required parameters",
        "purpose": "验证工具在缺少必填参数时是否能返回明确错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_document.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool create_custom_style: 1 validation error for create_custom_styleArguments\nstyle_name\n  Field required [type=missing, input_value={'file_path': 'D:\\\\devWor...les\\\\new_document.docx'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.0065152645111083984,
        "is_functional_test": false
      },
      {
        "case_name": "Create style with special characters in style name",
        "purpose": "测试特殊字符在样式名称中的处理能力",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_metadata.docx",
          "style_name": "Style@#$_with!Special^Chars"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Style 'Style@#$_with!Special^Chars' created.\"\n}"
        },
        "execution_time": 0.02741837501525879,
        "is_functional_test": true
      }
    ],
    "format_text": [
      {
        "case_name": "Format first occurrence with bold and italic",
        "purpose": "验证工具能否正确找到文档中第一个匹配的文本并应用粗体和斜体格式",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.docx",
          "search_text": "test",
          "bold": true,
          "italic": true
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Text formatted.\"\n}"
        },
        "execution_time": 0.04273033142089844,
        "is_functional_test": true
      },
      {
        "case_name": "Format only bold",
        "purpose": "验证仅启用粗体格式是否生效",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.docx",
          "search_text": "sample",
          "bold": true
        },
        "response": {
          "result": "{\n  \"status\": \"not_found\",\n  \"message\": \"Text not found.\"\n}"
        },
        "execution_time": 0.04661750793457031,
        "is_functional_test": true
      },
      {
        "case_name": "Format only italic",
        "purpose": "验证仅启用斜体格式是否生效",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.docx",
          "search_text": "document",
          "italic": true
        },
        "response": {
          "result": "{\n  \"status\": \"not_found\",\n  \"message\": \"Text not found.\"\n}"
        },
        "execution_time": 0.025043010711669922,
        "is_functional_test": true
      },
      {
        "case_name": "No formatting applied",
        "purpose": "验证不启用任何格式时工具是否正常执行但不做修改",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.docx",
          "search_text": "content"
        },
        "response": {
          "result": "{\n  \"status\": \"not_found\",\n  \"message\": \"Text not found.\"\n}"
        },
        "execution_time": 0.0279996395111084,
        "is_functional_test": true
      },
      {
        "case_name": "Search text not found",
        "purpose": "验证搜索文本不存在于文档中时工具是否优雅处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.docx",
          "search_text": "nonexistenttext"
        },
        "response": {
          "result": "{\n  \"status\": \"not_found\",\n  \"message\": \"Text not found.\"\n}"
        },
        "execution_time": 0.021514892578125,
        "is_functional_test": false
      },
      {
        "case_name": "Format in restricted system directory",
        "purpose": "安全性测试：尝试在受限系统目录中的文件上应用格式是否会安全失败",
        "args": {
          "file_path": "C:\\Windows\\system32\\not_allowed.docx",
          "search_text": "important"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: C:\\\\Windows\\\\system32\\\\not_allowed.docx\"\n}"
        },
        "execution_time": 0.010998964309692383,
        "is_functional_test": false
      },
      {
        "case_name": "Missing required parameters",
        "purpose": "验证缺少必填参数（如file_path）时是否返回明确错误",
        "args": {
          "search_text": "error"
        },
        "response": {
          "error": "ToolException: Error executing tool format_text: 1 validation error for format_textArguments\nfile_path\n  Field required [type=missing, input_value={'search_text': 'error'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.006001710891723633,
        "is_functional_test": false
      },
      {
        "case_name": "Format text with special characters",
        "purpose": "验证特殊字符文本的查找与格式化是否正常",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_metadata.docx",
          "search_text": "@#$_with!Special^Chars",
          "bold": true
        },
        "response": {
          "result": "{\n  \"status\": \"not_found\",\n  \"message\": \"Text not found.\"\n}"
        },
        "execution_time": 0.017668724060058594,
        "is_functional_test": true
      }
    ],
    "find_text_in_document": [
      {
        "case_name": "Search text in document with existing content",
        "purpose": "验证工具在文档中正确搜索并返回包含目标文本的段落索引列表",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.docx",
          "search_text": "test"
        },
        "response": [
          "6",
          "13"
        ],
        "execution_time": 0.0224459171295166,
        "is_functional_test": true
      },
      {
        "case_name": "Search non-existent text in document",
        "purpose": "验证工具在未找到匹配文本时返回空列表",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.docx",
          "search_text": "not_in_document"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.061942338943481445,
        "is_functional_test": true
      },
      {
        "case_name": "Search text in empty document",
        "purpose": "验证工具在空文档中搜索文本时安全返回空列表",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_document.docx",
          "search_text": "hello"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.012517929077148438,
        "is_functional_test": true
      },
      {
        "case_name": "Search text in read-only document",
        "purpose": "验证工具是否能处理只读文档中的搜索请求",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_sample.docx",
          "search_text": "content"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_sample.docx\"\n}"
        },
        "execution_time": 0.0070002079010009766,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to search text in restricted system directory",
        "purpose": "安全性测试：防止路径穿越或非法访问系统目录",
        "args": {
          "file_path": "C:\\Windows\\system32\\not_allowed.docx",
          "search_text": "secret"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: C:\\\\Windows\\\\system32\\\\not_allowed.docx\"\n}"
        },
        "execution_time": 0.004933357238769531,
        "is_functional_test": false
      },
      {
        "case_name": "Missing required parameters",
        "purpose": "验证工具在缺少必填参数时是否返回明确错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool find_text_in_document: 1 validation error for find_text_in_documentArguments\nsearch_text\n  Field required [type=missing, input_value={'file_path': 'D:\\\\devWor...es\\\\existing_file.docx'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.003998279571533203,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid file path format",
        "purpose": "验证工具对非法文件路径的处理能力",
        "args": {
          "file_path": "invalid/<path>:*\"?|filename.docx",
          "search_text": "text"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\workspace\\\\pipeline-output-servers\\\\gemini-2.5-pro\\\\mcp_word_document_automation\\\\refined\\\\invalid\\\\<path>:*\\\"?|filename.docx\"\n}"
        },
        "execution_time": 0.0033042430877685547,
        "is_functional_test": false
      },
      {
        "case_name": "Search text with special characters",
        "purpose": "验证工具是否能正确处理包含特殊字符的搜索文本",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_metadata.docx",
          "search_text": "@#$_with!Special^Chars"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.015134096145629883,
        "is_functional_test": true
      }
    ],
    "get_paragraph_text_from_document": [
      {
        "case_name": "Retrieve text from first paragraph of a valid document",
        "purpose": "验证工具能否正确从有效文档的第一个段落中提取文本内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.docx",
          "paragraph_index": 0
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.docx\"}"
        },
        "execution_time": 0.0038018226623535156,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to retrieve text from non-existent file",
        "purpose": "验证尝试读取不存在的文件时是否能安全失败并返回明确错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.docx",
          "paragraph_index": 0
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.docx\"}"
        },
        "execution_time": 0.0024995803833007812,
        "is_functional_test": false
      },
      {
        "case_name": "Extract text from read-only document's paragraph",
        "purpose": "测试工具是否能够从只读文档中提取指定段落的文本",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_sample.docx",
          "paragraph_index": 0
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_sample.docx\"}"
        },
        "execution_time": 0.004004478454589844,
        "is_functional_test": false
      },
      {
        "case_name": "Access paragraph from protected system directory",
        "purpose": "安全性测试：防止路径穿越攻击，确保无法访问受限系统目录中的文档段落",
        "args": {
          "file_path": "C:\\Windows\\system32\\not_allowed.docx",
          "paragraph_index": 1
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"The specified file does not exist: C:\\\\Windows\\\\system32\\\\not_allowed.docx\"}"
        },
        "execution_time": 0.004000663757324219,
        "is_functional_test": false
      },
      {
        "case_name": "Retrieve text from out-of-range paragraph index",
        "purpose": "验证工具对超出文档实际段落数量的索引值处理能力",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.docx",
          "paragraph_index": 999
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.docx\"}"
        },
        "execution_time": 0.0070002079010009766,
        "is_functional_test": false
      },
      {
        "case_name": "Handle invalid paragraph index type",
        "purpose": "验证工具在接收到非整型段落索引参数时是否能返回明确错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.docx",
          "paragraph_index": "invalid"
        },
        "response": {
          "error": "ToolException: Error executing tool get_paragraph_text_from_document: 1 validation error for get_paragraph_text_from_documentArguments\nparagraph_index\n  Input should be a valid integer, unable to parse string as an integer [type=int_parsing, input_value='invalid', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/int_parsing"
        },
        "execution_time": 0.0049991607666015625,
        "is_functional_test": false
      },
      {
        "case_name": "Extract text from last paragraph of document",
        "purpose": "验证工具能否正确提取文档最后一个段落的内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_document.docx",
          "paragraph_index": -1
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\metadata_document.docx\"}"
        },
        "execution_time": 0.0059969425201416016,
        "is_functional_test": true
      },
      {
        "case_name": "Read paragraph with special characters in content",
        "purpose": "验证特殊字符在文档正文段落中的处理能力",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_metadata.docx",
          "paragraph_index": 0
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special_metadata.docx\"}"
        },
        "execution_time": 0.0019998550415039062,
        "is_functional_test": true
      }
    ],
    "add_table": [
      {
        "case_name": "Add table with minimal required parameters",
        "purpose": "验证工具在仅提供必填参数时能否成功在文档末尾添加表格",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_document.docx",
          "rows": 3,
          "cols": 4
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_document.docx\"\n}"
        },
        "execution_time": 0.0029997825622558594,
        "is_functional_test": true
      },
      {
        "case_name": "Add table to document with metadata",
        "purpose": "验证工具是否能在包含元数据的文档末尾正确添加表格",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_document.docx",
          "rows": 5,
          "cols": 2
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\metadata_document.docx\"\n}"
        },
        "execution_time": 0.0019991397857666016,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to add table to read-only file",
        "purpose": "测试工具是否能优雅地处理向只读文件添加表格的情况",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_sample.docx",
          "rows": 3,
          "cols": 3
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_sample.docx\"\n}"
        },
        "execution_time": 0.0019989013671875,
        "is_functional_test": false
      },
      {
        "case_name": "Add table to non-existent document",
        "purpose": "验证尝试向不存在的文档添加表格时是否能安全失败并返回明确错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.docx",
          "rows": 2,
          "cols": 2
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.docx\"\n}"
        },
        "execution_time": 0.002002239227294922,
        "is_functional_test": false
      },
      {
        "case_name": "Add table with invalid row count",
        "purpose": "验证工具对非法行数（负值）的处理能力",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_document.docx",
          "rows": -1,
          "cols": 3
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Rows and columns must be positive integers.\"\n}"
        },
        "execution_time": 0.0030019283294677734,
        "is_functional_test": false
      },
      {
        "case_name": "Add table with zero columns",
        "purpose": "验证工具对零列情况的边界处理能力",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_document.docx",
          "rows": 4,
          "cols": 0
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Rows and columns must be positive integers.\"\n}"
        },
        "execution_time": 0.004999637603759766,
        "is_functional_test": false
      },
      {
        "case_name": "Add large table with maximum reasonable size",
        "purpose": "验证工具对大表格（最大合理尺寸）的处理能力",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_document.docx",
          "rows": 100,
          "cols": 10
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_document.docx\"\n}"
        },
        "execution_time": 0.001998424530029297,
        "is_functional_test": true
      },
      {
        "case_name": "Add table to document in restricted system directory",
        "purpose": "安全性测试：防止路径穿越攻击，验证尝试写入受限系统目录是否会安全失败",
        "args": {
          "file_path": "C:\\Windows\\system32\\restricted.docx",
          "rows": 3,
          "cols": 4
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: C:\\\\Windows\\\\system32\\\\restricted.docx\"\n}"
        },
        "execution_time": 0.002000093460083008,
        "is_functional_test": false
      }
    ],
    "add_image": [
      {
        "case_name": "Add image with required parameters",
        "purpose": "验证工具在仅提供必填参数时能否成功将图片插入文档",
        "args": {
          "doc_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_document.docx",
          "image_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"An unexpected error occurred: \"\n}"
        },
        "execution_time": 0.00950479507446289,
        "is_functional_test": true
      },
      {
        "case_name": "Add image with specified width",
        "purpose": "验证工具是否能正确设置指定宽度的图片插入",
        "args": {
          "doc_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_document.docx",
          "image_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg",
          "width_inches": 3.5
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Image added.\"\n}"
        },
        "execution_time": 0.02499866485595703,
        "is_functional_test": true
      },
      {
        "case_name": "Insert image into non-existent document",
        "purpose": "测试尝试向不存在的文档中插入图片是否会安全失败并返回明确错误",
        "args": {
          "doc_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.docx",
          "image_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.docx\"\n}"
        },
        "execution_time": 0.001988649368286133,
        "is_functional_test": false
      },
      {
        "case_name": "Insert non-image file as image",
        "purpose": "验证工具是否能正确处理非图像文件尝试插入的情况",
        "args": {
          "doc_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_document.docx",
          "image_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"An unexpected error occurred: \"\n}"
        },
        "execution_time": 0.014000892639160156,
        "is_functional_test": false
      },
      {
        "case_name": "Insert image from restricted system directory",
        "purpose": "安全性测试：验证尝试从受限系统目录插入图片是否会安全失败，防止路径穿越攻击",
        "args": {
          "doc_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_document.docx",
          "image_file_path": "C:\\Windows\\system32\\not_allowed.png"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified image file does not exist: C:\\\\Windows\\\\system32\\\\not_allowed.png\"\n}"
        },
        "execution_time": 0.001998424530029297,
        "is_functional_test": false
      },
      {
        "case_name": "Insert image with invalid file path format",
        "purpose": "验证工具对非法图片文件路径的处理能力",
        "args": {
          "doc_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_document.docx",
          "image_file_path": "invalid/<path>:*\"?|filename.png"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified image file does not exist: invalid/<path>:*\\\"?|filename.png\"\n}"
        },
        "execution_time": 0.002000093460083008,
        "is_functional_test": false
      },
      {
        "case_name": "Insert very large image file",
        "purpose": "测试工具处理大尺寸图像插入的能力和稳定性",
        "args": {
          "doc_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_document.docx",
          "image_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Image added.\"\n}"
        },
        "execution_time": 0.1251828670501709,
        "is_functional_test": true
      },
      {
        "case_name": "Missing required parameters",
        "purpose": "验证工具在缺少必填参数时是否能返回明确错误",
        "args": {
          "doc_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_document.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool add_image: 1 validation error for add_imageArguments\nimage_file_path\n  Field required [type=missing, input_value={'doc_file_path': 'D:\\\\de...new_test_document.docx'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.0020020008087158203,
        "is_functional_test": false
      }
    ],
    "add_page_break": [
      {
        "case_name": "Insert page break into a valid document",
        "purpose": "验证工具能否在有效文档末尾成功插入分页符",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_document.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Page break added.\"\n}"
        },
        "execution_time": 0.11366152763366699,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to insert page break into a non-existent file",
        "purpose": "验证工具在尝试向不存在的文件中插入分页符时是否能安全失败",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.docx\"\n}"
        },
        "execution_time": 0.0029997825622558594,
        "is_functional_test": false
      },
      {
        "case_name": "Insert page break into document with special characters in path",
        "purpose": "测试特殊字符路径下的文档是否能正常插入分页符",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_char_metadata.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Page break added.\"\n}"
        },
        "execution_time": 0.026181697845458984,
        "is_functional_test": true
      },
      {
        "case_name": "Insert page break into read-only document",
        "purpose": "验证工具是否能够优雅地处理向只读文档插入分页符的情况",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Page break added.\"\n}"
        },
        "execution_time": 0.021907329559326172,
        "is_functional_test": false
      },
      {
        "case_name": "Insert page break into very long file path document",
        "purpose": "验证工具在最大文件路径长度限制下是否仍能正确插入分页符",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Page break added.\"\n}"
        },
        "execution_time": 0.023784399032592773,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to insert page break in restricted system directory",
        "purpose": "安全性测试：验证尝试在受限系统目录中操作是否会安全失败，防止权限越权",
        "args": {
          "file_path": "C:\\Windows\\system32\\not_allowed.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: C:\\\\Windows\\\\system32\\\\not_allowed.docx\"\n}"
        },
        "execution_time": 0.0029981136322021484,
        "is_functional_test": false
      },
      {
        "case_name": "Missing file path parameter",
        "purpose": "验证工具在缺少必填参数时是否能返回明确错误",
        "args": {},
        "response": {
          "error": "ToolException: Error executing tool add_page_break: 1 validation error for add_page_breakArguments\nfile_path\n  Field required [type=missing, input_value={}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.0020003318786621094,
        "is_functional_test": false
      },
      {
        "case_name": "Insert page break into empty document",
        "purpose": "验证工具能否在空文档末尾成功插入分页符",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_metadata_document.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Page break added.\"\n}"
        },
        "execution_time": 0.022001266479492188,
        "is_functional_test": true
      }
    ],
    "add_header": [
      {
        "case_name": "Add header to a new document",
        "purpose": "验证工具能否在新建文档的默认节中成功添加页眉内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_document.docx",
          "header_text": "This is the document header"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Header updated.\"\n}"
        },
        "execution_time": 0.13991475105285645,
        "is_functional_test": true
      },
      {
        "case_name": "Replace existing header in document",
        "purpose": "验证工具能否正确替换已有文档中的页眉内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.docx",
          "header_text": "Updated Header Content"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Header updated.\"\n}"
        },
        "execution_time": 0.019005537033081055,
        "is_functional_test": true
      },
      {
        "case_name": "Add empty header to document",
        "purpose": "测试将空字符串作为页眉内容是否能被接受并清除现有页眉",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.docx",
          "header_text": ""
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Header updated.\"\n}"
        },
        "execution_time": 0.020508766174316406,
        "is_functional_test": true
      },
      {
        "case_name": "Add header with special characters",
        "purpose": "验证特殊字符在页眉内容中的处理能力",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_char_metadata.docx",
          "header_text": "Header@#$_with!Special^Chars<>&\"'"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Header updated.\"\n}"
        },
        "execution_time": 0.023009061813354492,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to add header to non-existent file",
        "purpose": "验证尝试为不存在的文件添加页眉时是否能安全失败并返回明确错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.docx",
          "header_text": "Nonexistent File Header"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.docx\"\n}"
        },
        "execution_time": 0.0029990673065185547,
        "is_functional_test": false
      },
      {
        "case_name": "Add header to read-only file",
        "purpose": "测试工具是否能够优雅地处理对只读文件添加页眉的情况",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_sample.docx",
          "header_text": "Read-only Document Header"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_sample.docx\"\n}"
        },
        "execution_time": 0.004994630813598633,
        "is_functional_test": false
      },
      {
        "case_name": "Add header to restricted system directory file",
        "purpose": "安全性测试：验证尝试修改系统受保护目录中的文档是否会安全失败，防止权限越权",
        "args": {
          "file_path": "C:\\Windows\\system32\\not_allowed.docx",
          "header_text": "Restricted Directory Header"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: C:\\\\Windows\\\\system32\\\\not_allowed.docx\"\n}"
        },
        "execution_time": 0.002559661865234375,
        "is_functional_test": false
      },
      {
        "case_name": "Add header with very long text",
        "purpose": "验证工具对极长页眉文本的处理能力",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new.docx",
          "header_text": "A_very_long_header_text_that_tests_the_maximum_allowed_length_for_a_header_in_a_Word_document_and_should_still_be_handled_correctly_by_the_tool_without_any_errors_or_truncation_issues."
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Header updated.\"\n}"
        },
        "execution_time": 0.02238631248474121,
        "is_functional_test": true
      }
    ],
    "add_footer": [
      {
        "case_name": "Add footer to new document",
        "purpose": "验证工具能否在新建文档的默认节中成功添加页脚内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_document.docx",
          "footer_text": "Confidential - Internal Use Only"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Footer updated.\"\n}"
        },
        "execution_time": 0.13538432121276855,
        "is_functional_test": true
      },
      {
        "case_name": "Replace footer in existing document",
        "purpose": "验证工具是否能正确替换已有文档中的页脚内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.docx",
          "footer_text": "Updated Footer Text"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Footer updated.\"\n}"
        },
        "execution_time": 0.0425105094909668,
        "is_functional_test": true
      },
      {
        "case_name": "Add empty footer to document",
        "purpose": "测试将空字符串作为页脚文本时的行为，确保不会报错且清空页脚",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\full_metadata_document.docx",
          "footer_text": ""
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Footer updated.\"\n}"
        },
        "execution_time": 0.030626773834228516,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to add footer to read-only file",
        "purpose": "验证工具对只读文件添加页脚时的处理能力",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_char_metadata.docx",
          "footer_text": "Protected Footer"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Footer updated.\"\n}"
        },
        "execution_time": 0.022996902465820312,
        "is_functional_test": false
      },
      {
        "case_name": "Add footer with special characters",
        "purpose": "验证特殊字符在页脚文本中的处理能力",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_pages_output.pdf",
          "footer_text": "Page @ # $ % & * _ { } ©"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"File path must point to a .docx file.\"\n}"
        },
        "execution_time": 0.0020024776458740234,
        "is_functional_test": true
      },
      {
        "case_name": "Add footer to non-existent file",
        "purpose": "验证尝试向不存在的文件添加页脚时是否能安全失败并返回明确错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.docx",
          "footer_text": "Footer for Non-Existent File"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.docx\"\n}"
        },
        "execution_time": 0.002001047134399414,
        "is_functional_test": false
      },
      {
        "case_name": "Add footer to file in restricted directory",
        "purpose": "安全性测试：验证尝试修改系统受限目录下的文档页脚是否会安全失败",
        "args": {
          "file_path": "C:\\Windows\\system32\\not_allowed.docx",
          "footer_text": "Restricted Directory Footer"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: C:\\\\Windows\\\\system32\\\\not_allowed.docx\"\n}"
        },
        "execution_time": 0.003003358840942383,
        "is_functional_test": false
      },
      {
        "case_name": "Add very long footer text",
        "purpose": "验证工具对超长页脚文本的处理能力",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new.docx",
          "footer_text": "This is a very long footer text that tests the maximum allowed length of footer content in the system. It should be fully accepted and stored without any truncation or error. This is a very long footer text that tests the maximum allowed length of footer content in the system."
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Footer updated.\"\n}"
        },
        "execution_time": 0.051744937896728516,
        "is_functional_test": true
      }
    ],
    "convert_to_pdf": [
      {
        "case_name": "Convert valid DOCX to PDF with standard paths",
        "purpose": "验证基本功能：将标准DOCX文件转换为PDF，使用有效路径",
        "args": {
          "docx_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.docx",
          "pdf_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\converted_output.pdf"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\converted_output.pdf\"\n}"
        },
        "execution_time": 0.039153337478637695,
        "is_functional_test": true
      },
      {
        "case_name": "Convert document with special characters in file path",
        "purpose": "验证工具是否能处理包含特殊字符的文件路径",
        "args": {
          "docx_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\extracted_@#$.pdf",
          "pdf_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\converted_@#$.pdf"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"File path must point to a .docx file.\"\n}"
        },
        "execution_time": 0.0059814453125,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt conversion from non-existent DOCX file",
        "purpose": "测试尝试转换不存在的源文件时能否优雅失败",
        "args": {
          "docx_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.docx",
          "pdf_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output.pdf"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.docx\"\n}"
        },
        "execution_time": 0.003000974655151367,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt write to restricted system directory",
        "purpose": "安全性测试：防止写入系统受保护目录",
        "args": {
          "docx_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.docx",
          "pdf_path": "C:\\Windows\\system32\\restricted_output.pdf"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"An unexpected error occurred during PDF conversion: [Errno 13] Permission denied: 'C:\\\\\\\\Windows\\\\\\\\system32\\\\\\\\restricted_output.pdf'\"\n}"
        },
        "execution_time": 0.01651906967163086,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid file extension provided",
        "purpose": "验证工具对非法文件扩展名的处理能力",
        "args": {
          "docx_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_extension_document.txt",
          "pdf_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\converted_output.pdf"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"File path must point to a .docx file.\"\n}"
        },
        "execution_time": 0.004002809524536133,
        "is_functional_test": false
      },
      {
        "case_name": "Convert document with very long file path",
        "purpose": "验证工具在最大允许文件路径长度下的转换能力",
        "args": {
          "docx_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new.docx",
          "pdf_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_converted.pdf"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_converted.pdf\"\n}"
        },
        "execution_time": 0.030782699584960938,
        "is_functional_test": true
      },
      {
        "case_name": "Missing required parameters",
        "purpose": "验证工具在缺少必填参数时是否返回明确错误",
        "args": {},
        "response": {
          "error": "ToolException: Error executing tool convert_to_pdf: 2 validation errors for convert_to_pdfArguments\ndocx_path\n  Field required [type=missing, input_value={}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing\npdf_path\n  Field required [type=missing, input_value={}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.0039975643157958984,
        "is_functional_test": false
      },
      {
        "case_name": "Overwrite existing read-only PDF file",
        "purpose": "测试工具是否能够处理覆盖只读目标文件的情况",
        "args": {
          "docx_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.docx",
          "pdf_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_pages_output.pdf"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_pages_output.pdf\"\n}"
        },
        "execution_time": 0.02985405921936035,
        "is_functional_test": true
      }
    ],
    "protect_document": [
      {
        "case_name": "Apply write protection with valid password",
        "purpose": "验证使用有效密码对文档设置写保护的基本功能是否正常工作",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.docx",
          "password": "securePassword123"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Feature not supported by the current environment. 'python-docx' does not support password protection.\"\n}"
        },
        "execution_time": 0.023231983184814453,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to protect non-existent file",
        "purpose": "验证工具在尝试保护不存在的文件时是否能优雅地处理错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.docx",
          "password": "test123"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Feature not supported by the current environment. 'python-docx' does not support password protection.\"\n}"
        },
        "execution_time": 0.009998559951782227,
        "is_functional_test": false
      },
      {
        "case_name": "Protect document in restricted system directory",
        "purpose": "安全性测试：防止对系统关键目录中的文档设置写保护，避免潜在权限越权风险",
        "args": {
          "file_path": "C:\\Windows\\system32\\protected.docx",
          "password": "adminPass"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Feature not supported by the current environment. 'python-docx' does not support password protection.\"\n}"
        },
        "execution_time": 0.005995750427246094,
        "is_functional_test": false
      },
      {
        "case_name": "Missing required parameters",
        "purpose": "验证缺少必填参数（file_path或password）时工具能否返回明确的错误信息",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool protect_document: 1 validation error for protect_documentArguments\npassword\n  Field required [type=missing, input_value={'file_path': 'D:\\\\devWor...es\\\\existing_file.docx'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.006998777389526367,
        "is_functional_test": false
      },
      {
        "case_name": "Empty password for protection",
        "purpose": "测试使用空密码设置写保护时的行为是否符合预期（应拒绝操作）",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.docx",
          "password": ""
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Feature not supported by the current environment. 'python-docx' does not support password protection.\"\n}"
        },
        "execution_time": 0.017006397247314453,
        "is_functional_test": false
      },
      {
        "case_name": "Protect document with special characters in password",
        "purpose": "验证包含特殊字符的密码是否可以被正确处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.docx",
          "password": "P@ssw0rd!#$_withSpecialChars"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Feature not supported by the current environment. 'python-docx' does not support password protection.\"\n}"
        },
        "execution_time": 0.014518260955810547,
        "is_functional_test": true
      },
      {
        "case_name": "Protect read-only document",
        "purpose": "验证对只读文档应用写保护时的行为是否安全合理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\full_metadata_document.docx",
          "password": "readOnlyTest123"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Feature not supported by the current environment. 'python-docx' does not support password protection.\"\n}"
        },
        "execution_time": 0.012987375259399414,
        "is_functional_test": true
      },
      {
        "case_name": "Protect document with very long password",
        "purpose": "测试使用超长密码设置写保护时工具的兼容性和稳定性",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.docx",
          "password": "ThisIsAVeryLongPasswordThatExceedsTypicalLengthLimitsAndTestsTheMaximumAllowedByTheLibraryOrSystemForSecurityAssessmentPurposes"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Feature not supported by the current environment. 'python-docx' does not support password protection.\"\n}"
        },
        "execution_time": 0.009998559951782227,
        "is_functional_test": true
      }
    ],
    "add_footnote_to_document": [
      {
        "case_name": "Add footnote to first paragraph of empty document",
        "purpose": "验证向空文档的第一个段落添加脚注的基本功能是否正常工作",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_document.docx",
          "paragraph_index": 0,
          "footnote_text": "This is a test footnote."
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Failed to add footnote due to library limitations. 'python-docx' does not have a direct API for footnotes.\"\n}"
        },
        "execution_time": 0.015001296997070312,
        "is_functional_test": true
      },
      {
        "case_name": "Add footnote to non-empty document with metadata",
        "purpose": "验证向包含元数据的文档段落中添加脚注时是否能保留原有内容并正确插入脚注",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\full_metadata_document.docx",
          "paragraph_index": 1,
          "footnote_text": "Additional reference information."
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Failed to add footnote due to library limitations. 'python-docx' does not have a direct API for footnotes.\"\n}"
        },
        "execution_time": 0.010826826095581055,
        "is_functional_test": true
      },
      {
        "case_name": "Add footnote to document with special characters in text",
        "purpose": "验证在包含特殊字符的段落中添加脚注的功能是否正常",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_char_metadata.docx",
          "paragraph_index": 2,
          "footnote_text": "Footnote@#$_with!Special^Chars"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Failed to add footnote due to library limitations. 'python-docx' does not have a direct API for footnotes.\"\n}"
        },
        "execution_time": 0.006999492645263672,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to add footnote to read-only file",
        "purpose": "测试尝试向只读文件添加脚注时工具是否能优雅失败",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_sample.docx",
          "paragraph_index": 0,
          "footnote_text": "This should fail due to file being read-only."
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Failed to add footnote due to library limitations. 'python-docx' does not have a direct API for footnotes.\"\n}"
        },
        "execution_time": 0.016289710998535156,
        "is_functional_test": false
      },
      {
        "case_name": "Add footnote to document in restricted system directory",
        "purpose": "安全性测试：验证尝试在受限系统目录中修改文档是否会安全失败，防止权限越权",
        "args": {
          "file_path": "C:\\Windows\\system32\\not_allowed.docx",
          "paragraph_index": 0,
          "footnote_text": "Security test attempt"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Failed to add footnote due to library limitations. 'python-docx' does not have a direct API for footnotes.\"\n}"
        },
        "execution_time": 0.016512155532836914,
        "is_functional_test": false
      },
      {
        "case_name": "Missing required parameters",
        "purpose": "验证工具在缺少必填参数时是否能返回明确错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_document.docx"
        },
        "response": {
          "error": "ToolException: Error executing tool add_footnote_to_document: 2 validation errors for add_footnote_to_documentArguments\nparagraph_index\n  Field required [type=missing, input_value={'file_path': 'D:\\\\devWor...les\\\\new_document.docx'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing\nfootnote_text\n  Field required [type=missing, input_value={'file_path': 'D:\\\\devWor...les\\\\new_document.docx'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.01103830337524414,
        "is_functional_test": false
      },
      {
        "case_name": "Negative paragraph index value",
        "purpose": "边界条件测试：验证负数段落索引是否被正确拒绝",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_document.docx",
          "paragraph_index": -1,
          "footnote_text": "Negative index test"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Failed to add footnote due to library limitations. 'python-docx' does not have a direct API for footnotes.\"\n}"
        },
        "execution_time": 0.003777027130126953,
        "is_functional_test": false
      },
      {
        "case_name": "Very long footnote text input",
        "purpose": "边界条件测试：验证工具对超长脚注文本的处理能力",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_document.docx",
          "paragraph_index": 0,
          "footnote_text": "A very long footnote text that tests the maximum allowed length for footnotes in the system. This text continues on and on with many characters to simulate a large input scenario which could potentially cause performance issues or buffer overflow problems if not handled properly."
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Failed to add footnote due to library limitations. 'python-docx' does not have a direct API for footnotes.\"\n}"
        },
        "execution_time": 0.0050046443939208984,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 127
}