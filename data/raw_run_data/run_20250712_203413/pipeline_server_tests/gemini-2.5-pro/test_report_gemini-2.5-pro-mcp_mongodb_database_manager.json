{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "gemini-2.5-pro-mcp_mongodb_database_manager",
  "server_path": "workspace/pipeline-output-servers/gemini-2.5-pro/mcp_mongodb_database_manager/refined/server.py",
  "timestamp": "2025-07-12T20:40:51.750023",
  "tools": [
    {
      "name": "mcp_list_databases",
      "description": "\n    Lists the names of all available databases on the MongoDB server.\n\n    Returns:\n        A JSON string representing a list of database names.\n        Example: '[\"admin\", \"config\", \"local\", \"mydatabase\"]'\n    ",
      "args_schema": {
        "properties": {},
        "title": "mcp_list_databasesArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_list_collections",
      "description": "\n    Lists the names of all collections within a specified database.\n\n    Args:\n        database_name (str): The name of the database to inspect.\n\n    Returns:\n        A JSON string representing a list of collection names.\n        Example: '[\"users\", \"products\", \"orders\"]'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          }
        },
        "required": [
          "database_name"
        ],
        "title": "mcp_list_collectionsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_insert_document",
      "description": "\n    Inserts a new document into a specified collection.\n\n    Args:\n        database_name (str): The name of the target database.\n        collection_name (str): The name of the target collection.\n        document (dict): The document to be inserted.\n\n    Returns:\n        A JSON string containing the string representation of the newly inserted document's _id.\n        Example: '{\"inserted_id\": \"64c9a3e6e7e4a4c4de54d7e1\"}'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "document": {
            "title": "Document",
            "type": "object"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "document"
        ],
        "title": "mcp_insert_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_find_documents",
      "description": "\n    Finds documents matching a specific query within a collection.\n\n    Args:\n        database_name (str): The name of the database to query.\n        collection_name (str): The name of the collection to query.\n        query (dict): The MongoDB query filter. Use {} to match all documents.\n        projection (dict, optional): The projection specification. Defaults to None.\n        limit (int, optional): The maximum number of documents to return. Defaults to 100.\n\n    Returns:\n        A JSON string representing a list of documents that match the query.\n        Example: '[{\"_id\": \"64c9a3e6e7e4a4c4de54d7e1\", \"name\": \"John Doe\"}]'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "title": "Query",
            "type": "object"
          },
          "projection": {
            "default": null,
            "title": "Projection",
            "type": "object"
          },
          "limit": {
            "default": 100,
            "title": "Limit",
            "type": "integer"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "query"
        ],
        "title": "mcp_find_documentsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_update_document",
      "description": "\n    Updates one or more documents that match a specified filter.\n\n    Args:\n        database_name (str): The name of the database for the update.\n        collection_name (str): The name of the collection for the update.\n        query (dict): The filter to select the document(s) to update.\n        update (dict): The update operations to be applied (e.g., using '$set').\n        update_many (bool, optional): If True, updates all matching documents. Defaults to False.\n\n    Returns:\n        A JSON string with the count of matched and modified documents.\n        Example: '{\"matched_count\": 1, \"modified_count\": 1}'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "title": "Query",
            "type": "object"
          },
          "update": {
            "title": "Update",
            "type": "object"
          },
          "update_many": {
            "default": false,
            "title": "Update Many",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "query",
          "update"
        ],
        "title": "mcp_update_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_delete_document",
      "description": "\n    Deletes one or more documents that match a specified filter.\n\n    Args:\n        database_name (str): The name of the database from which to delete.\n        collection_name (str): The name of the collection from which to delete.\n        query (dict): The filter to select the document(s) for deletion.\n        delete_many (bool, optional): If True, deletes all matching documents. Defaults to False.\n\n    Returns:\n        A JSON string containing the number of documents deleted.\n        Example: '{\"deleted_count\": 1}'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "title": "Query",
            "type": "object"
          },
          "delete_many": {
            "default": false,
            "title": "Delete Many",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "query"
        ],
        "title": "mcp_delete_documentArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "mcp_list_databases": [
      {
        "case_name": "List All Databases Successfully",
        "purpose": "验证工具能够成功列出 MongoDB 服务器上的所有数据库名称。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.0063152313232421875,
        "is_functional_test": true
      },
      {
        "case_name": "Verify Database List Includes Expected System Databases",
        "purpose": "确认返回的数据库列表中包含常见的系统数据库如 'admin', 'config', 'local'。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.0049991607666015625,
        "is_functional_test": true
      },
      {
        "case_name": "Verify Database List Includes User Created Database",
        "purpose": "确保用户创建的数据库（例如 'mydatabase'）也出现在数据库列表中。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.003998517990112305,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Database Response Handling",
        "purpose": "测试当 MongoDB 返回空数据库列表时，工具是否能正确处理并返回空数组。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.0030007362365722656,
        "is_functional_test": false
      },
      {
        "case_name": "Unauthorized Access Attempt to MongoDB",
        "purpose": "模拟无权限访问 MongoDB 的情况，验证工具是否安全地拒绝访问或抛出适当错误。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.0029990673065185547,
        "is_functional_test": false
      },
      {
        "case_name": "MongoDB Connection Failure Handling",
        "purpose": "测试当 MongoDB 服务不可用时，工具是否能优雅地处理连接失败的情况。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.009172439575195312,
        "is_functional_test": false
      },
      {
        "case_name": "Test with Maximum Length File Path (No Impact)",
        "purpose": "使用测试文件中最长路径文件名进行测试，以验证在极端路径长度下是否影响功能。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new.docx"
        },
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": true
      },
      {
        "case_name": "Test with Hidden Git Directory File",
        "purpose": "测试隐藏文件（如 .git 目录中的文件）是否会影响数据库列表功能。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\HEAD"
        },
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.00500035285949707,
        "is_functional_test": true
      }
    ],
    "mcp_list_collections": [
      {
        "case_name": "List Collections Successfully in Test Database",
        "purpose": "验证工具能够成功列出指定数据库中的所有集合名称。",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "[\"a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\", \"new_collection\", \"test_collection\", \"empty_docs\", \"invalid/collection*name\", \"user_profiles\", \"long_key_collection\", \"test_collection'; DROP COLLECTION test_collection;--\", \"large_data\", \"special_chars_collection\", \"binary_data_collection\", \"nonexistent_collection\", \"a_very_long_collection_name_that_exceeds_normal_limits_and_might_cause_issues\", \"users\"]"
        },
        "execution_time": 0.005274057388305664,
        "is_functional_test": true
      },
      {
        "case_name": "List Collections in Non-Existent Database",
        "purpose": "测试当指定的数据库不存在时，工具是否返回空数组或适当错误信息。",
        "args": {
          "database_name": "does_not_exist_db"
        },
        "response": {
          "result": "[\"new_collection\", \"test_collection\"]"
        },
        "execution_time": 0.006448507308959961,
        "is_functional_test": false
      },
      {
        "case_name": "List Collections in System Database 'admin'",
        "purpose": "验证工具能否正确处理系统数据库（如 admin）并列出其集合。",
        "args": {
          "database_name": "admin"
        },
        "response": {
          "result": "[\"system.version\", \"system_logs\"]"
        },
        "execution_time": 0.007527589797973633,
        "is_functional_test": true
      },
      {
        "case_name": "List Collections with Special Characters in Database Name",
        "purpose": "测试数据库名称中包含特殊字符和Unicode字符时工具的处理能力。",
        "args": {
          "database_name": "db@#_\\u6d4b\\u8bd5"
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_list_collections: An unexpected error occurred while listing collections: database names cannot contain the character '\\\\'"
        },
        "execution_time": 0.0036783218383789062,
        "is_functional_test": true
      },
      {
        "case_name": "Unauthorized Access to Database",
        "purpose": "模拟无权限访问指定数据库的情况，验证工具是否安全地拒绝访问或抛出适当错误。",
        "args": {
          "database_name": "users"
        },
        "response": {
          "result": "[\"user\", \"user_profiles\"]"
        },
        "execution_time": 0.0042266845703125,
        "is_functional_test": false
      },
      {
        "case_name": "Empty Collection Response Handling",
        "purpose": "测试当数据库中没有集合时，工具是否能正确返回空数组。",
        "args": {
          "database_name": "empty_database"
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.007589817047119141,
        "is_functional_test": false
      },
      {
        "case_name": "MongoDB Connection Failure Handling",
        "purpose": "测试当 MongoDB 服务不可用时，工具是否能优雅地处理连接失败的情况。",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "[\"a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\", \"new_collection\", \"test_collection\", \"empty_docs\", \"invalid/collection*name\", \"user_profiles\", \"long_key_collection\", \"test_collection'; DROP COLLECTION test_collection;--\", \"large_data\", \"special_chars_collection\", \"binary_data_collection\", \"nonexistent_collection\", \"a_very_long_collection_name_that_exceeds_normal_limits_and_might_cause_issues\", \"users\"]"
        },
        "execution_time": 0.004004001617431641,
        "is_functional_test": false
      },
      {
        "case_name": "Test with Maximum Length Database Name",
        "purpose": "使用最长允许长度的数据库名进行测试，以验证在极端条件下功能是否仍正常。",
        "args": {
          "database_name": "very_long_database_name_that_tests_the_maximum_allowed_length_for_mongodb"
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_list_collections: An unexpected error occurred while listing collections: db name must be at most 63 characters, found: 73, full error: {'ok': 0.0, 'errmsg': 'db name must be at most 63 characters, found: 73', 'code': 73, 'codeName': 'InvalidNamespace'}"
        },
        "execution_time": 0.008107900619506836,
        "is_functional_test": true
      }
    ],
    "mcp_insert_document": [
      {
        "case_name": "Insert Document Successfully into Test Collection",
        "purpose": "验证工具能够成功将文档插入到指定的数据库和集合中。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "document": {
            "name": "Test Document",
            "content": "This is a test document for insertion."
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"687258207c1609156ee10ee1\"}"
        },
        "execution_time": 0.005869626998901367,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document into Non-Existent Collection",
        "purpose": "测试当目标集合不存在时，工具是否能自动创建集合并插入文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "document": {
            "key": "value"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"687258207c1609156ee10ee2\"}"
        },
        "execution_time": 0.009142875671386719,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document with Special Characters in Keys",
        "purpose": "验证包含特殊字符的文档键是否能被正确处理并插入。",
        "args": {
          "database_name": "test_db",
          "collection_name": "special_chars_collection",
          "document": {
            "user-name": "john_doe",
            "email@domain.com": "john@example.com"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"687258207c1609156ee10ee3\"}"
        },
        "execution_time": 0.00599980354309082,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document with Nested Structure",
        "purpose": "测试插入具有嵌套结构的文档是否成功。",
        "args": {
          "database_name": "test_db",
          "collection_name": "user_profiles",
          "document": {
            "username": "alice",
            "profile": {
              "age": 28,
              "hobbies": [
                "reading",
                "coding",
                "traveling"
              ],
              "address": {
                "city": "Shanghai",
                "country": "China"
              }
            }
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"687258207c1609156ee10ee4\"}"
        },
        "execution_time": 0.011034250259399414,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document with Invalid Database Name",
        "purpose": "测试使用非法数据库名称（如包含斜杠）时是否返回错误。",
        "args": {
          "database_name": "invalid/db",
          "collection_name": "test_collection",
          "document": {
            "name": "error_doc"
          }
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_insert_document: An unexpected error occurred during document insertion: database names cannot contain the character '/'"
        },
        "execution_time": 0.003997802734375,
        "is_functional_test": false
      },
      {
        "case_name": "Insert Document into Unauthorized Database",
        "purpose": "模拟无权限访问目标数据库的情况，验证是否抛出适当错误。",
        "args": {
          "database_name": "admin",
          "collection_name": "system.version",
          "document": {
            "key": "restricted_insert"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"687258207c1609156ee10ee5\"}"
        },
        "execution_time": 0.010757923126220703,
        "is_functional_test": false
      },
      {
        "case_name": "Insert Empty Document",
        "purpose": "测试插入空文档是否被允许。",
        "args": {
          "database_name": "test_db",
          "collection_name": "empty_docs",
          "document": {}
        },
        "response": {
          "result": "{\"inserted_id\": \"687258207c1609156ee10ee6\"}"
        },
        "execution_time": 0.008946657180786133,
        "is_functional_test": true
      }
    ],
    "mcp_find_documents": [
      {
        "case_name": "Basic Document Search with Default Parameters",
        "purpose": "验证使用默认参数时能否成功检索集合中的所有文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "query": {}
        },
        "response": {
          "result": "[{\"_id\": \"68710cc7ea7bb66ae341045f\", \"key\": \"value\"}, {\"_id\": \"687258207c1609156ee10ee1\", \"name\": \"Test Document\", \"content\": \"This is a test document for insertion.\"}]"
        },
        "execution_time": 0.005004167556762695,
        "is_functional_test": true
      },
      {
        "case_name": "Document Search with Custom Query Filter",
        "purpose": "验证工具能正确应用自定义查询过滤器并返回匹配的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "user_profiles",
          "query": {
            "age": {
              "$gt": 30
            }
          }
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.00400090217590332,
        "is_functional_test": true
      },
      {
        "case_name": "Document Search with Projection Specification",
        "purpose": "测试是否可以通过指定投影字段来限制返回文档中包含的数据。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {},
          "projection": {
            "name": 1,
            "_id": 0
          }
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": true
      },
      {
        "case_name": "Document Search with Limit Parameter",
        "purpose": "验证limit参数是否能正确限制返回的文档数量。",
        "args": {
          "database_name": "test_db",
          "collection_name": "large_data",
          "query": {},
          "limit": 5
        },
        "response": {
          "result": "[{\"_id\": \"6863baf659bb2ac32446e719\", \"data\": \"A very long string that simulates a large document payload for testing purposes. This should be accepted by the tool.\"}]"
        },
        "execution_time": 0.004504680633544922,
        "is_functional_test": true
      },
      {
        "case_name": "Unauthorized Access to Collection",
        "purpose": "模拟无权限访问集合的情况，验证工具是否安全地拒绝访问或抛出适当错误。",
        "args": {
          "database_name": "users",
          "collection_name": "sensitive_data",
          "query": {}
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.0030050277709960938,
        "is_functional_test": false
      },
      {
        "case_name": "Query Execution on Non-Existent Collection",
        "purpose": "测试当指定集合不存在时，工具是否返回空数组或适当错误信息。",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "query": {}
        },
        "response": {
          "result": "[{\"_id\": \"686395fe8bb57d80cdb0c4a3\", \"key\": \"updated_value\"}, {\"_id\": \"68710caed665c89a8d5748ba\", \"name\": \"Alice\", \"email\": \"alice@example.com\"}, {\"_id\": \"68710cc7ea7bb66ae341045d\", \"data\": \"new collection should be created\"}, {\"_id\": \"687258207c1609156ee10ee2\", \"key\": \"value\"}]"
        },
        "execution_time": 0.007998466491699219,
        "is_functional_test": false
      },
      {
        "case_name": "Query Execution with Invalid Database Name",
        "purpose": "验证工具在数据库名称无效（如含特殊字符）时能否正确处理错误。",
        "args": {
          "database_name": "db@#_\\u6d4b\\u8bd5",
          "collection_name": "test_collection",
          "query": {}
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_find_documents: An unexpected error occurred while finding documents: database names cannot contain the character '\\\\'"
        },
        "execution_time": 0.0040013790130615234,
        "is_functional_test": false
      },
      {
        "case_name": "Query with Maximum Allowed Limit Value",
        "purpose": "测试极限值：使用最大允许的 limit 值（例如10000）进行查询。",
        "args": {
          "database_name": "test_db",
          "collection_name": "large_data",
          "query": {},
          "limit": 10000
        },
        "response": {
          "result": "[{\"_id\": \"6863baf659bb2ac32446e719\", \"data\": \"A very long string that simulates a large document payload for testing purposes. This should be accepted by the tool.\"}]"
        },
        "execution_time": 0.009005308151245117,
        "is_functional_test": true
      }
    ],
    "mcp_update_document": [
      {
        "case_name": "Update Single Document Successfully",
        "purpose": "验证工具能够成功更新单个匹配的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "user_profiles",
          "query": {
            "username": "john_doe"
          },
          "update": {
            "$set": {
              "email": "john_new@example.com"
            }
          }
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.008002758026123047,
        "is_functional_test": true
      },
      {
        "case_name": "Update Multiple Documents with update_many=True",
        "purpose": "验证当 update_many=True 时，工具能够更新所有匹配的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "user_profiles",
          "query": {
            "role": "user"
          },
          "update": {
            "$set": {
              "role": "member"
            }
          },
          "update_many": true
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.009000778198242188,
        "is_functional_test": true
      },
      {
        "case_name": "No Matching Document to Update",
        "purpose": "测试没有匹配文档时工具是否能正确返回 matched_count=0。",
        "args": {
          "database_name": "test_db",
          "collection_name": "user_profiles",
          "query": {
            "username": "nonexistent_user"
          },
          "update": {
            "$set": {
              "email": "dummy@example.com"
            }
          }
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.007995128631591797,
        "is_functional_test": true
      },
      {
        "case_name": "Unauthorized Access to Collection During Update",
        "purpose": "模拟无权限访问集合的情况，验证工具是否安全地拒绝访问或抛出适当错误。",
        "args": {
          "database_name": "users",
          "collection_name": "sensitive_data",
          "query": {
            "id": 1
          },
          "update": {
            "$set": {
              "data": "updated_value"
            }
          }
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.012000799179077148,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Query Format Handling",
        "purpose": "测试无效查询格式（如空对象）时工具的参数验证机制。",
        "args": {
          "database_name": "test_db",
          "collection_name": "user_profiles",
          "query": {},
          "update": {
            "$set": {
              "status": "inactive"
            }
          }
        },
        "response": {
          "result": "{\"matched_count\": 1, \"modified_count\": 1}"
        },
        "execution_time": 0.009994029998779297,
        "is_functional_test": false
      },
      {
        "case_name": "MongoDB Connection Failure During Update",
        "purpose": "测试当 MongoDB 服务不可用时，工具是否能优雅地处理连接失败的情况。",
        "args": {
          "database_name": "test_db",
          "collection_name": "user_profiles",
          "query": {
            "username": "john_doe"
          },
          "update": {
            "$set": {
              "email": "john_new@example.com"
            }
          }
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.005999565124511719,
        "is_functional_test": false
      },
      {
        "case_name": "Update with Special Characters in Database or Collection Name",
        "purpose": "测试数据库名和集合名中包含特殊字符和Unicode字符时工具的处理能力。",
        "args": {
          "database_name": "db@#_\\u6d4b\\u8bd5",
          "collection_name": "special_chars_collection",
          "query": {
            "key": "value"
          },
          "update": {
            "$set": {
              "key": "new_value"
            }
          }
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_update_document: An unexpected error occurred during document update: database names cannot contain the character '\\\\'"
        },
        "execution_time": 0.009000062942504883,
        "is_functional_test": true
      },
      {
        "case_name": "Update with Maximum Length Field Names",
        "purpose": "使用最长允许长度的字段名进行更新操作，以验证在极端条件下功能是否仍正常。",
        "args": {
          "database_name": "test_db",
          "collection_name": "long_key_collection",
          "query": {
            "a_very_long_field_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it": "old_value"
          },
          "update": {
            "$set": {
              "a_very_long_field_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it": "new_value"
            }
          }
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.009009361267089844,
        "is_functional_test": true
      }
    ],
    "mcp_delete_document": [
      {
        "case_name": "Delete Single Document Matching Filter",
        "purpose": "验证工具能够删除符合查询条件的单个文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "user_profiles",
          "query": {
            "username": "test_user"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.004999637603759766,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Multiple Documents with delete_many=True",
        "purpose": "验证当 delete_many=True 时，工具可以删除所有匹配查询条件的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "user_profiles",
          "query": {
            "role": "guest"
          },
          "delete_many": true
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.007004976272583008,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Document from Non-Existent Collection",
        "purpose": "测试当集合不存在时，工具是否能正确处理并返回0删除数。",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "query": {
            "username": "test_user"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.007997274398803711,
        "is_functional_test": false
      },
      {
        "case_name": "Delete Document from Non-Existent Database",
        "purpose": "测试当数据库不存在时，工具是否能安全地处理并返回0删除数。",
        "args": {
          "database_name": "does_not_exist_db",
          "collection_name": "user_profiles",
          "query": {
            "username": "test_user"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.004911184310913086,
        "is_functional_test": false
      },
      {
        "case_name": "Delete Document with Special Characters in Query",
        "purpose": "验证工具是否支持包含特殊字符和Unicode的查询条件。",
        "args": {
          "database_name": "test_db",
          "collection_name": "special_chars_collection",
          "query": {
            "username": "用户@#_测试"
          },
          "delete_many": true
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.004999637603759766,
        "is_functional_test": true
      },
      {
        "case_name": "Unauthorized Deletion Attempt",
        "purpose": "模拟无权限删除文档的情况，验证工具是否安全地拒绝操作或抛出适当错误。",
        "args": {
          "database_name": "users",
          "collection_name": "user",
          "query": {
            "username": "admin"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.008401632308959961,
        "is_functional_test": false
      },
      {
        "case_name": "MongoDB Connection Failure During Delete",
        "purpose": "测试当 MongoDB 服务不可用时，工具是否能优雅地处理连接失败的情况。",
        "args": {
          "database_name": "test_db",
          "collection_name": "user_profiles",
          "query": {
            "username": "test_user"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.004998207092285156,
        "is_functional_test": false
      },
      {
        "case_name": "Delete Document with Empty Query",
        "purpose": "验证使用空查询条件时的行为（应删除第一个匹配项，或在 delete_many=True 时删除全部）。",
        "args": {
          "database_name": "test_db",
          "collection_name": "user_profiles",
          "query": {}
        },
        "response": {
          "result": "{\"deleted_count\": 1}"
        },
        "execution_time": 0.0070056915283203125,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 47
}