{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "gemini-2.5-pro-mcp_text_file_manipulator",
  "server_path": "workspace/pipeline-output-servers/gemini-2.5-pro/mcp_text_file_manipulator/refined/server.py",
  "timestamp": "2025-07-12T20:40:36.589884",
  "tools": [
    {
      "name": "get_text_file_contents",
      "description": "\n    Reads the contents of one or more text files, with optional line range selection.\n\n    Args:\n        filepaths: A list of paths to the text files to be read.\n                   Example: [\"/path/to/file1.txt\", \"relative/path/to/file2.py\"]\n        start_line: The 1-indexed starting line for reading. If None, starts from the beginning.\n                    Example: 10\n        end_line: The 1-indexed ending line for reading. If None, reads to the end.\n                  Example: 20\n\n    Returns:\n        A dictionary where keys are file paths and values contain the content, hash, or an error message.\n        Example:\n        {\n            \"/path/to/file1.txt\": {\n                \"content\": [\"line 1\", \"line 2\"],\n                \"hash\": \"sha256_hash_string\"\n            },\n            \"non_existent_file.txt\": {\n                \"error\": \"File not found.\"\n            }\n        }\n    ",
      "args_schema": {
        "properties": {
          "filepaths": {
            "items": {
              "type": "string"
            },
            "title": "Filepaths",
            "type": "array"
          },
          "start_line": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "Start Line"
          },
          "end_line": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "default": null,
            "title": "End Line"
          }
        },
        "required": [
          "filepaths"
        ],
        "title": "get_text_file_contentsArguments",
        "type": "object"
      }
    },
    {
      "name": "create_text_file",
      "description": "\n    Creates a new text file with initial content. Fails if the file already exists.\n\n    Args:\n        filepath: The path where the new text file will be created.\n                  Example: \"new_project/main.py\"\n        content: The initial string content to write to the file.\n                 Example: \"print('Hello, World!')\"\n\n    Returns:\n        A dictionary with a status message indicating success or failure.\n        Example:\n        {\"status\": \"File 'new_project/main.py' created successfully.\"}\n    ",
      "args_schema": {
        "properties": {
          "filepath": {
            "title": "Filepath",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "filepath",
          "content"
        ],
        "title": "create_text_fileArguments",
        "type": "object"
      }
    },
    {
      "name": "append_text_file_contents",
      "description": "\n    Appends new content to the end of an existing text file.\n\n    Args:\n        filepath: The path to the text file to be modified.\n                  Example: \"logs/app.log\"\n        content: The string content to append to the file.\n                 Example: \"\\n2023-10-27: User logged in.\"\n\n    Returns:\n        A dictionary with a status message and the new file hash.\n        Example:\n        {\"status\": \"Content appended successfully.\", \"new_hash\": \"new_sha256_hash\"}\n    ",
      "args_schema": {
        "properties": {
          "filepath": {
            "title": "Filepath",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "filepath",
          "content"
        ],
        "title": "append_text_file_contentsArguments",
        "type": "object"
      }
    },
    {
      "name": "delete_text_file_contents",
      "description": "\n    Deletes a specified range of lines (inclusive) from a text file.\n\n    Args:\n        filepath: The path to the text file to be modified.\n                  Example: \"config.txt\"\n        start_line: The 1-indexed starting line of the range to delete.\n                    Example: 5\n        end_line: The 1-indexed ending line of the range to delete.\n                  Example: 7\n\n    Returns:\n        A dictionary with a status message and the new file hash.\n        Example:\n        {\"status\": \"Lines 5-7 deleted successfully.\", \"new_hash\": \"new_sha256_hash\"}\n    ",
      "args_schema": {
        "properties": {
          "filepath": {
            "title": "Filepath",
            "type": "string"
          },
          "start_line": {
            "title": "Start Line",
            "type": "integer"
          },
          "end_line": {
            "title": "End Line",
            "type": "integer"
          }
        },
        "required": [
          "filepath",
          "start_line",
          "end_line"
        ],
        "title": "delete_text_file_contentsArguments",
        "type": "object"
      }
    },
    {
      "name": "insert_text_file_contents",
      "description": "\n    Inserts a block of text at a specific line number in a file.\n\n    Args:\n        filepath: The path to the text file to be modified.\n                  Example: \"document.txt\"\n        insert_at_line: The 1-indexed line number at which to insert the new content.\n                        Example: 3\n        content: The string content to insert. Newlines create multiple lines.\n                 Example: \"This is a new line.\\nAnd another one.\"\n\n    Returns:\n        A dictionary with a status message and the new file hash.\n        Example:\n        {\"status\": \"Content inserted at line 3.\", \"new_hash\": \"new_sha256_hash\"}\n    ",
      "args_schema": {
        "properties": {
          "filepath": {
            "title": "Filepath",
            "type": "string"
          },
          "insert_at_line": {
            "title": "Insert At Line",
            "type": "integer"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "filepath",
          "insert_at_line",
          "content"
        ],
        "title": "insert_text_file_contentsArguments",
        "type": "object"
      }
    },
    {
      "name": "patch_text_file_contents",
      "description": "\n    Atomically replaces a range of lines with new content, using a hash for concurrency control.\n\n    Args:\n        filepath: The path to the text file to be patched.\n                  Example: \"source_code.py\"\n        start_line: The 1-indexed starting line of the content to be replaced.\n                    Example: 15\n        end_line: The 1-indexed ending line of the content to be replaced.\n                  Example: 20\n        new_content: The new string content that will replace the specified line range.\n                     Example: \"def new_function():\\n    pass\"\n        expected_hash: The SHA-256 hash of the file before this patch operation.\n                       Example: \"sha256_hash_of_the_original_file\"\n\n    Returns:\n        A dictionary with a status message and the new hash if successful.\n        Example on success:\n        {\"status\": \"Patch applied successfully.\", \"new_hash\": \"new_sha256_hash\"}\n        Example on hash mismatch:\n        {\"status\": \"Conflict: File has been modified by another process.\", \"new_hash\": null}\n    ",
      "args_schema": {
        "properties": {
          "filepath": {
            "title": "Filepath",
            "type": "string"
          },
          "start_line": {
            "title": "Start Line",
            "type": "integer"
          },
          "end_line": {
            "title": "End Line",
            "type": "integer"
          },
          "new_content": {
            "title": "New Content",
            "type": "string"
          },
          "expected_hash": {
            "title": "Expected Hash",
            "type": "string"
          }
        },
        "required": [
          "filepath",
          "start_line",
          "end_line",
          "new_content",
          "expected_hash"
        ],
        "title": "patch_text_file_contentsArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "create_text_file": [
      {
        "case_name": "Basic File Creation",
        "purpose": "验证工具可以成功创建一个新文本文件并写入初始内容。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "content": "This is a test content for new file."
        },
        "response": {
          "result": "{\n  \"status\": \"File 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt' created successfully.\"\n}"
        },
        "execution_time": 0.006998538970947266,
        "is_functional_test": true
      },
      {
        "case_name": "File Already Exists",
        "purpose": "验证当目标文件已存在时，工具是否能正确失败并返回错误信息。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.docx",
          "content": "This should not be written."
        },
        "response": {
          "result": "{\n  \"status\": \"Error: File 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.docx' already exists.\"\n}"
        },
        "execution_time": 0.008007049560546875,
        "is_functional_test": false
      },
      {
        "case_name": "Empty Content",
        "purpose": "验证即使内容为空，也能成功创建空文本文件。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_file.txt",
          "content": ""
        },
        "response": {
          "result": "{\n  \"status\": \"File 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_file.txt' created successfully.\"\n}"
        },
        "execution_time": 0.00500035285949707,
        "is_functional_test": true
      },
      {
        "case_name": "Special Characters in Filepath",
        "purpose": "测试路径中包含特殊字符时的处理能力。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special!@#$%^&*()_file.txt",
          "content": "Test content with special characters in path."
        },
        "response": {
          "result": "{\n  \"status\": \"Error creating file 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special!@#$%^&*()_file.txt': [Errno 22] Invalid argument: 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\special!@#$%^&*()_file.txt'\"\n}"
        },
        "execution_time": 0.0069484710693359375,
        "is_functional_test": true
      },
      {
        "case_name": "Long Filepath Boundary Test",
        "purpose": "测试最大允许长度的文件路径是否能被处理。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new.txt",
          "content": "This is to test long file path handling."
        },
        "response": {
          "result": "{\n  \"status\": \"File 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new.txt' created successfully.\"\n}"
        },
        "execution_time": 0.004110574722290039,
        "is_functional_test": true
      },
      {
        "case_name": "Missing Filepath Parameter",
        "purpose": "验证缺少必填参数'filepath'时是否能正确报错。",
        "args": {
          "content": "This should fail due to missing filepath."
        },
        "response": {
          "error": "ToolException: Error executing tool create_text_file: 1 validation error for create_text_fileArguments\nfilepath\n  Field required [type=missing, input_value={'content': 'This should ...e to missing filepath.'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.009001016616821289,
        "is_functional_test": false
      },
      {
        "case_name": "Missing Content Parameter",
        "purpose": "验证缺少必填参数'content'时是否能正确报错。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\missing_content_file.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool create_text_file: 1 validation error for create_text_fileArguments\ncontent\n  Field required [type=missing, input_value={'filepath': 'D:\\\\devWork...ssing_content_file.txt'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": false
      }
    ],
    "get_text_file_contents": [
      {
        "case_name": "Basic File Read",
        "purpose": "验证工具可以成功读取一个存在的文本文件的全部内容。",
        "args": {
          "filepaths": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt"
          ]
        },
        "response": {
          "result": "{\n  \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\": {\n    \"error\": \"File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\"\n  }\n}"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": true
      },
      {
        "case_name": "Read Multiple Files",
        "purpose": "验证工具可以同时读取多个存在的文本文件的内容。",
        "args": {
          "filepaths": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_file.txt",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt"
          ]
        },
        "response": {
          "result": "{\n  \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_file.txt\": {\n    \"error\": \"File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_file.txt\"\n  },\n  \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\": {\n    \"error\": \"File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\"\n  }\n}"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": true
      },
      {
        "case_name": "Read Line Range",
        "purpose": "验证工具可以正确读取指定起始和结束行范围内的文件内容。",
        "args": {
          "filepaths": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt"
          ],
          "start_line": 1,
          "end_line": 2
        },
        "response": {
          "result": "{\n  \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\": {\n    \"error\": \"File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\"\n  }\n}"
        },
        "execution_time": 0.00450897216796875,
        "is_functional_test": true
      },
      {
        "case_name": "Start Line Only",
        "purpose": "验证当仅提供 start_line 时，工具能从该行开始读取到文件末尾。",
        "args": {
          "filepaths": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt"
          ],
          "start_line": 2
        },
        "response": {
          "result": "{\n  \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\": {\n    \"error\": \"File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\"\n  }\n}"
        },
        "execution_time": 0.005991220474243164,
        "is_functional_test": true
      },
      {
        "case_name": "End Line Only",
        "purpose": "验证当仅提供 end_line 时，工具能从文件开头读取到指定行。",
        "args": {
          "filepaths": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt"
          ],
          "end_line": 3
        },
        "response": {
          "result": "{\n  \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\": {\n    \"error\": \"File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\"\n  }\n}"
        },
        "execution_time": 0.0029985904693603516,
        "is_functional_test": true
      },
      {
        "case_name": "File Not Found",
        "purpose": "验证当请求的文件不存在时，工具是否返回适当的错误信息。",
        "args": {
          "filepaths": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\non_existent_file.txt"
          ]
        },
        "response": {
          "result": "{\n  \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\non_existent_file.txt\": {\n    \"error\": \"File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\non_existent_file.txt\"\n  }\n}"
        },
        "execution_time": 0.007000923156738281,
        "is_functional_test": false
      },
      {
        "case_name": "Empty File",
        "purpose": "验证工具是否能正确处理空文件并返回空内容列表。",
        "args": {
          "filepaths": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_file.txt"
          ]
        },
        "response": {
          "result": "{\n  \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_file.txt\": {\n    \"error\": \"File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_file.txt\"\n  }\n}"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": true
      },
      {
        "case_name": "Line Range Out_of_Bounds",
        "purpose": "验证当请求的行号超出文件实际行数时，工具是否仍能安全地返回有效部分。",
        "args": {
          "filepaths": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt"
          ],
          "start_line": 5,
          "end_line": 10
        },
        "response": {
          "result": "{\n  \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\": {\n    \"error\": \"File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\"\n  }\n}"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": true
      },
      {
        "case_name": "Special Characters in Filepath",
        "purpose": "测试路径中包含特殊字符时的处理能力。",
        "args": {
          "filepaths": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special!@#$%^&*()_file.txt"
          ]
        },
        "response": {
          "result": "{\n  \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special!@#$%^&*()_file.txt\": {\n    \"error\": \"File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special!@#$%^&*()_file.txt\"\n  }\n}"
        },
        "execution_time": 0.00500798225402832,
        "is_functional_test": true
      },
      {
        "case_name": "Read Binary File as Text",
        "purpose": "验证尝试读取非文本文件（如图片）时的行为是否安全，应避免崩溃或异常输出。",
        "args": {
          "filepaths": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg"
          ]
        },
        "response": {
          "result": "{\n  \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.jpg\": {\n    \"error\": \"'utf-8' codec can't decode byte 0xff in position 0: invalid start byte\"\n  }\n}"
        },
        "execution_time": 0.005996227264404297,
        "is_functional_test": false
      },
      {
        "case_name": "Missing Filepaths Parameter",
        "purpose": "验证缺少必填参数'filepaths'时是否能正确报错。",
        "args": {},
        "response": {
          "error": "ToolException: Error executing tool get_text_file_contents: 1 validation error for get_text_file_contentsArguments\nfilepaths\n  Field required [type=missing, input_value={}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.003997802734375,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Start Line",
        "purpose": "验证当 start_line 大于 end_line 或文件总行数时是否能正确处理。",
        "args": {
          "filepaths": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt"
          ],
          "start_line": 3,
          "end_line": 1
        },
        "response": {
          "result": "{\n  \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\": {\n    \"error\": \"File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\"\n  }\n}"
        },
        "execution_time": 0.005510091781616211,
        "is_functional_test": false
      },
      {
        "case_name": "Zero-based Line Number",
        "purpose": "验证工具是否严格按照文档说明使用1-indexed行号。",
        "args": {
          "filepaths": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt"
          ],
          "start_line": 0
        },
        "response": {
          "result": "{\n  \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\": {\n    \"error\": \"File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\"\n  }\n}"
        },
        "execution_time": 0.008017778396606445,
        "is_functional_test": false
      },
      {
        "case_name": "Very Long Filepath",
        "purpose": "验证最大允许长度的文件路径是否能被正确读取。",
        "args": {
          "filepaths": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new.txt"
          ]
        },
        "response": {
          "result": "{\n  \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new.txt\": {\n    \"error\": \"File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new.txt\"\n  }\n}"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": true
      }
    ],
    "append_text_file_contents": [
      {
        "case_name": "Basic Append Operation",
        "purpose": "验证工具可以成功向现有文本文件末尾追加内容。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "content": "\nThis is appended content."
        },
        "response": {
          "result": "{\n  \"status\": \"Error appending to file 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.003996372222900391,
        "is_functional_test": true
      },
      {
        "case_name": "Append Empty Content",
        "purpose": "验证当追加内容为空字符串时，工具是否仍能正常操作而不改变文件。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_file.txt",
          "content": ""
        },
        "response": {
          "result": "{\n  \"status\": \"Error appending to file 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.006005048751831055,
        "is_functional_test": true
      },
      {
        "case_name": "File Not Found",
        "purpose": "验证当目标文件不存在时，工具是否返回适当的错误信息。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\non_existent_file.txt",
          "content": "This should not be appended."
        },
        "response": {
          "result": "{\n  \"status\": \"Error appending to file 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\non_existent_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\non_existent_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.0049936771392822266,
        "is_functional_test": false
      },
      {
        "case_name": "Missing Filepath Parameter",
        "purpose": "验证缺少必填参数'filepath'时是否能正确报错。",
        "args": {
          "content": "This should fail due to missing filepath."
        },
        "response": {
          "error": "ToolException: Error executing tool append_text_file_contents: 1 validation error for append_text_file_contentsArguments\nfilepath\n  Field required [type=missing, input_value={'content': 'This should ...e to missing filepath.'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.004006862640380859,
        "is_functional_test": false
      },
      {
        "case_name": "Missing Content Parameter",
        "purpose": "验证缺少必填参数'content'时是否能正确报错。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool append_text_file_contents: 1 validation error for append_text_file_contentsArguments\ncontent\n  Field required [type=missing, input_value={'filepath': 'D:\\\\devWork...les\\\\new_test_file.txt'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.009000778198242188,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Filepath",
        "purpose": "测试路径中包含特殊字符时的处理能力。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special!@#$%^&*()_file.txt",
          "content": "\nAppending content to special path file."
        },
        "response": {
          "result": "{\n  \"status\": \"Error appending to file 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special!@#$%^&*()_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special!@#$%^&*()_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.004996061325073242,
        "is_functional_test": true
      },
      {
        "case_name": "Very Long Filepath Boundary Test",
        "purpose": "验证最大允许长度的文件路径是否能被正确处理。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new.txt",
          "content": "\nAppending content to long path file."
        },
        "response": {
          "result": "{\n  \"status\": \"Error appending to file 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.00400996208190918,
        "is_functional_test": true
      },
      {
        "case_name": "Append to Non-Text File",
        "purpose": "验证尝试向非文本文件（如图片或PDF）追加内容时是否能安全失败。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg",
          "content": "\nThis binary file should not accept text appending."
        },
        "response": {
          "result": "{\n  \"status\": \"Content appended successfully to 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.jpg'.\",\n  \"new_hash\": \"4860538ca07a75483af7b54a6b86c898a552c324cd14b619f93961a361a9dcb2\"\n}"
        },
        "execution_time": 0.00699615478515625,
        "is_functional_test": false
      }
    ],
    "insert_text_file_contents": [
      {
        "case_name": "Basic Insertion at Middle Line",
        "purpose": "验证工具可以成功在指定行号插入文本内容。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "insert_at_line": 2,
          "content": "This is a new line inserted."
        },
        "response": {
          "result": "{\n  \"status\": \"Error inserting content in 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.005388021469116211,
        "is_functional_test": true
      },
      {
        "case_name": "Insert at Beginning of File",
        "purpose": "验证工具可以在文件的第一行正确插入内容。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_file.txt",
          "insert_at_line": 1,
          "content": "First line content."
        },
        "response": {
          "result": "{\n  \"status\": \"Error inserting content in 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.00852823257446289,
        "is_functional_test": true
      },
      {
        "case_name": "Insert at End of File",
        "purpose": "验证工具可以在文件末尾插入内容（插入行号大于当前总行数）。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "insert_at_line": 100,
          "content": "This should be appended at the end."
        },
        "response": {
          "result": "{\n  \"status\": \"Error inserting content in 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.004002094268798828,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Multi-line Content",
        "purpose": "验证多行内容能被正确插入并保持换行格式。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "insert_at_line": 3,
          "content": "Line 1\nLine 2\nLine 3"
        },
        "response": {
          "result": "{\n  \"status\": \"Error inserting content in 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": true
      },
      {
        "case_name": "File Not Found Error",
        "purpose": "验证当目标文件不存在时，工具是否返回适当的错误信息。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\non_existent_file.txt",
          "insert_at_line": 2,
          "content": "This should not be inserted."
        },
        "response": {
          "result": "{\n  \"status\": \"Error inserting content in 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\non_existent_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\non_existent_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.00700688362121582,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Line Number (Zero)",
        "purpose": "验证插入行号为0时是否抛出参数验证错误。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "insert_at_line": 0,
          "content": "This should fail due to invalid line number."
        },
        "response": {
          "result": "{\n  \"status\": \"Error inserting content in 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.00499725341796875,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Content",
        "purpose": "验证包含特殊字符的内容能否被正确插入。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "insert_at_line": 2,
          "content": "This is a test with special characters: !@#$%^&*()"
        },
        "response": {
          "result": "{\n  \"status\": \"Error inserting content in 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.004511594772338867,
        "is_functional_test": true
      },
      {
        "case_name": "Long Content Insertion",
        "purpose": "验证插入大量文本内容时工具的稳定性。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_file.txt",
          "insert_at_line": 1,
          "content": "Line A\nLine B\nLine C\nLine D\nLine E\nLine F\nLine G\nLine H\nLine I\nLine J"
        },
        "response": {
          "result": "{\n  \"status\": \"Error inserting content in 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.008921384811401367,
        "is_functional_test": true
      }
    ],
    "delete_text_file_contents": [
      {
        "case_name": "Basic Line Deletion",
        "purpose": "验证工具可以成功删除指定范围的文本文件行内容。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "start_line": 2,
          "end_line": 4
        },
        "response": {
          "result": "{\n  \"status\": \"Error deleting lines from 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.0049664974212646484,
        "is_functional_test": true
      },
      {
        "case_name": "Delete First Line Only",
        "purpose": "验证当 start_line 和 end_line 相同时，仅删除单行内容。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "start_line": 1,
          "end_line": 1
        },
        "response": {
          "result": "{\n  \"status\": \"Error deleting lines from 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.0030074119567871094,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Entire File Content",
        "purpose": "验证删除整个文件内容时是否清空文件且不报错。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_file.txt",
          "start_line": 1,
          "end_line": 10
        },
        "response": {
          "result": "{\n  \"status\": \"Error deleting lines from 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.008007287979125977,
        "is_functional_test": true
      },
      {
        "case_name": "Line Range Out of Bounds",
        "purpose": "验证请求超出实际行数的删除范围时是否安全处理并删除有效部分。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "start_line": 5,
          "end_line": 100
        },
        "response": {
          "result": "{\n  \"status\": \"Error deleting lines from 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.004004240036010742,
        "is_functional_test": true
      },
      {
        "case_name": "File Not Found",
        "purpose": "验证当目标文件不存在时是否返回适当的错误信息。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\non_existent_file.txt",
          "start_line": 1,
          "end_line": 3
        },
        "response": {
          "result": "{\n  \"status\": \"Error deleting lines from 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\non_existent_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\non_existent_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.004256010055541992,
        "is_functional_test": false
      },
      {
        "case_name": "Start Line Greater Than End Line",
        "purpose": "验证当 start_line 大于 end_line 时是否能正确识别并报错或交换顺序处理。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "start_line": 5,
          "end_line": 2
        },
        "response": {
          "result": "{\n  \"status\": \"Error deleting lines from 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.004999637603759766,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Filepath",
        "purpose": "测试路径中包含特殊字符时是否能正常操作。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special!@#$%^&*()_file.txt",
          "start_line": 1,
          "end_line": 2
        },
        "response": {
          "result": "{\n  \"status\": \"Error deleting lines from 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special!@#$%^&*()_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special!@#$%^&*()_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.006738424301147461,
        "is_functional_test": true
      },
      {
        "case_name": "Zero-based Line Number",
        "purpose": "验证是否严格使用1-indexed行号，若传入0是否报错。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "start_line": 0,
          "end_line": 2
        },
        "response": {
          "result": "{\n  \"status\": \"Error deleting lines from 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.004337310791015625,
        "is_functional_test": false
      }
    ],
    "patch_text_file_contents": [
      {
        "case_name": "Basic Patch Application",
        "purpose": "验证工具可以成功用指定新内容替换文件中特定行范围的内容，且使用正确的哈希进行并发控制。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "start_line": 1,
          "end_line": 2,
          "new_content": "This is the new content for line 1 and 2.",
          "expected_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
        },
        "response": {
          "result": "{\n  \"status\": \"Error patching file 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.0051496028900146484,
        "is_functional_test": true
      },
      {
        "case_name": "Hash Mismatch Conflict",
        "purpose": "验证当提供的expected_hash与实际文件哈希不一致时，工具是否正确返回冲突信息。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "start_line": 1,
          "end_line": 2,
          "new_content": "New content to replace lines 1-2 with incorrect hash.",
          "expected_hash": "invalid_sha256_hash_value"
        },
        "response": {
          "result": "{\n  \"status\": \"Error patching file 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.009219884872436523,
        "is_functional_test": true
      },
      {
        "case_name": "Start Line Greater Than End Line",
        "purpose": "验证当start_line大于end_line时，工具是否能优雅处理并报错。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "start_line": 5,
          "end_line": 2,
          "new_content": "This should not be applied.",
          "expected_hash": "valid_hash_here"
        },
        "response": {
          "result": "{\n  \"status\": \"Error patching file 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.007139444351196289,
        "is_functional_test": false
      },
      {
        "case_name": "Empty New Content Replacement",
        "purpose": "验证空字符串作为新内容时能否被正确写入并替换原有行范围。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "start_line": 1,
          "end_line": 1,
          "new_content": "",
          "expected_hash": "original_hash_of_new_test_file"
        },
        "response": {
          "result": "{\n  \"status\": \"Error patching file 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.006195783615112305,
        "is_functional_test": true
      },
      {
        "case_name": "File Does Not Exist",
        "purpose": "验证目标文件不存在时，工具是否返回适当的错误信息。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\non_existent_file.txt",
          "start_line": 1,
          "end_line": 2,
          "new_content": "This should not be written.",
          "expected_hash": "any_hash"
        },
        "response": {
          "result": "{\n  \"status\": \"Error patching file 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\non_existent_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\non_existent_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.005991458892822266,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Filepath",
        "purpose": "测试路径中包含特殊字符时的处理能力。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special!@#$%^&*()_file.txt",
          "start_line": 1,
          "end_line": 2,
          "new_content": "This is test content for special path.",
          "expected_hash": "original_hash_of_special_path_file"
        },
        "response": {
          "result": "{\n  \"status\": \"Error patching file 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special!@#$%^&*()_file.txt': [Errno 22] Invalid argument: 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\special!@#$%^&*()_file.txt'\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": true
      },
      {
        "case_name": "Missing Required Parameters",
        "purpose": "验证缺少必填参数（如filepath、start_line等）时是否能正确报错。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "start_line": 1,
          "end_line": 2
        },
        "response": {
          "error": "ToolException: Error executing tool patch_text_file_contents: 2 validation errors for patch_text_file_contentsArguments\nnew_content\n  Field required [type=missing, input_value={'filepath': 'D:\\\\devWork...line': 1, 'end_line': 2}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing\nexpected_hash\n  Field required [type=missing, input_value={'filepath': 'D:\\\\devWork...line': 1, 'end_line': 2}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.0050008296966552734,
        "is_functional_test": false
      },
      {
        "case_name": "Zero-based Line Indexing Rejection",
        "purpose": "验证工具是否拒绝使用从0开始的行号索引，确保只接受1-indexed行号。",
        "args": {
          "filepath": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_file.txt",
          "start_line": 0,
          "end_line": 1,
          "new_content": "This should not be applied.",
          "expected_hash": "original_hash_of_new_test_file"
        },
        "response": {
          "result": "{\n  \"status\": \"Error patching file 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt': File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_file.txt\",\n  \"new_hash\": null\n}"
        },
        "execution_time": 0.006014823913574219,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 53
}