{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "gemini-2.5-pro-mcp_computer_vision_toolkit",
  "server_path": "workspace/pipeline-output-servers/gemini-2.5-pro/mcp_computer_vision_toolkit/refined/server.py",
  "timestamp": "2025-07-12T20:42:05.804726",
  "tools": [
    {
      "name": "save_image",
      "description": "Saves an image from a source path to a destination path.\n    This function is useful for creating copies or changing the format of an image file.\n\n    Args:\n        source_path (str): The full path to the existing image file.\n        destination_path (str): The full path where the new image file will be saved.\n\n    Returns:\n        str: A JSON string with a confirmation message indicating the path where the image was successfully saved, or an error message.\n\n    Example:\n        save_image(source_path=\"input/logo.png\", destination_path=\"output/logo_copy.jpg\")\n    ",
      "args_schema": {
        "properties": {
          "source_path": {
            "title": "Source Path",
            "type": "string"
          },
          "destination_path": {
            "title": "Destination Path",
            "type": "string"
          }
        },
        "required": [
          "source_path",
          "destination_path"
        ],
        "title": "save_imageArguments",
        "type": "object"
      }
    },
    {
      "name": "resize_image",
      "description": "Changes the dimensions of an image to a specified width and height.\n\n    Args:\n        input_path (str): The path to the source image file.\n        output_path (str): The path to save the resized image file.\n        width (int): The target width for the resized image in pixels.\n        height (int): The target height for the resized image in pixels.\n\n    Returns:\n        str: A JSON string with a confirmation message indicating the path of the newly created resized image, or an error message.\n\n    Example:\n        resize_image(input_path=\"input/photo.jpg\", output_path=\"output/photo_resized.jpg\", width=800, height=600)\n    ",
      "args_schema": {
        "properties": {
          "input_path": {
            "title": "Input Path",
            "type": "string"
          },
          "output_path": {
            "title": "Output Path",
            "type": "string"
          },
          "width": {
            "title": "Width",
            "type": "integer"
          },
          "height": {
            "title": "Height",
            "type": "integer"
          }
        },
        "required": [
          "input_path",
          "output_path",
          "width",
          "height"
        ],
        "title": "resize_imageArguments",
        "type": "object"
      }
    },
    {
      "name": "crop_image",
      "description": "Extracts a rectangular region from an image.\n\n    Args:\n        input_path (str): The path to the source image file.\n        output_path (str): The path to save the cropped image file.\n        x (int): The x-coordinate of the top-left corner of the crop area.\n        y (int): The y-coordinate of the top-left corner of the crop area.\n        width (int): The width of the crop rectangle.\n        height (int): The height of the crop rectangle.\n\n    Returns:\n        str: A JSON string with a confirmation message indicating the path of the newly created cropped image, or an error message.\n\n    Example:\n        crop_image(input_path=\"input/scenery.png\", output_path=\"output/scenery_cropped.png\", x=100, y=150, width=300, height=200)\n    ",
      "args_schema": {
        "properties": {
          "input_path": {
            "title": "Input Path",
            "type": "string"
          },
          "output_path": {
            "title": "Output Path",
            "type": "string"
          },
          "x": {
            "title": "X",
            "type": "integer"
          },
          "y": {
            "title": "Y",
            "type": "integer"
          },
          "width": {
            "title": "Width",
            "type": "integer"
          },
          "height": {
            "title": "Height",
            "type": "integer"
          }
        },
        "required": [
          "input_path",
          "output_path",
          "x",
          "y",
          "width",
          "height"
        ],
        "title": "crop_imageArguments",
        "type": "object"
      }
    },
    {
      "name": "get_image_stats",
      "description": "Retrieves basic statistical information about an image, such as its\n    dimensions and number of color channels.\n\n    Args:\n        input_path (str): The path to the image file to be analyzed.\n\n    Returns:\n        str: A JSON string containing the image's statistics: {'width': int, 'height': int, 'channels': int}, or an error message.\n\n    Example:\n        get_image_stats(input_path=\"input/image.jpg\")\n    ",
      "args_schema": {
        "properties": {
          "input_path": {
            "title": "Input Path",
            "type": "string"
          }
        },
        "required": [
          "input_path"
        ],
        "title": "get_image_statsArguments",
        "type": "object"
      }
    },
    {
      "name": "apply_filter",
      "description": "Applies a pre-defined filter to an image. Supported filters are 'blur',\n    'grayscale', and 'sharpen'.\n\n    Args:\n        input_path (str): The path to the source image file.\n        output_path (str): The path to save the filtered image file.\n        filter_type (str): The type of filter to apply. Must be one of 'blur', 'grayscale', or 'sharpen'.\n\n    Returns:\n        str: A JSON string with a confirmation message indicating the path of the newly created filtered image, or an error message.\n\n    Example:\n        apply_filter(input_path=\"input/portrait.jpg\", output_path=\"output/portrait_blurred.jpg\", filter_type=\"blur\")\n    ",
      "args_schema": {
        "properties": {
          "input_path": {
            "title": "Input Path",
            "type": "string"
          },
          "output_path": {
            "title": "Output Path",
            "type": "string"
          },
          "filter_type": {
            "title": "Filter Type",
            "type": "string"
          }
        },
        "required": [
          "input_path",
          "output_path",
          "filter_type"
        ],
        "title": "apply_filterArguments",
        "type": "object"
      }
    },
    {
      "name": "detect_edges",
      "description": "Detects and highlights edges in an image using the Canny edge detection algorithm.\n\n    Args:\n        input_path (str): The path to the source image file.\n        output_path (str): The path to save the resulting edge-detected image.\n        threshold1 (float): The first (lower) threshold for the hysteresis procedure.\n        threshold2 (float): The second (higher) threshold for the hysteresis procedure.\n\n    Returns:\n        str: A JSON string with a confirmation message indicating the path of the newly created edge-map image, or an error message.\n\n    Example:\n        detect_edges(input_path=\"input/building.jpg\", output_path=\"output/building_edges.jpg\", threshold1=100.0, threshold2=200.0)\n    ",
      "args_schema": {
        "properties": {
          "input_path": {
            "title": "Input Path",
            "type": "string"
          },
          "output_path": {
            "title": "Output Path",
            "type": "string"
          },
          "threshold1": {
            "title": "Threshold1",
            "type": "number"
          },
          "threshold2": {
            "title": "Threshold2",
            "type": "number"
          }
        },
        "required": [
          "input_path",
          "output_path",
          "threshold1",
          "threshold2"
        ],
        "title": "detect_edgesArguments",
        "type": "object"
      }
    },
    {
      "name": "apply_threshold",
      "description": "Applies a fixed-level binary threshold to a grayscale image.\n\n    Args:\n        input_path (str): The path to the source image file (will be converted to grayscale).\n        output_path (str): The path to save the thresholded image.\n        threshold_value (float): The pixel intensity value used as the threshold.\n        max_value (float): The value assigned to pixels that exceed the threshold (e.g., 255 for white).\n\n    Returns:\n        str: A JSON string with a confirmation message indicating the path of the newly created thresholded image, or an error message.\n\n    Example:\n        apply_threshold(input_path=\"input/text.png\", output_path=\"output/text_binary.png\", threshold_value=127.0, max_value=255.0)\n    ",
      "args_schema": {
        "properties": {
          "input_path": {
            "title": "Input Path",
            "type": "string"
          },
          "output_path": {
            "title": "Output Path",
            "type": "string"
          },
          "threshold_value": {
            "title": "Threshold Value",
            "type": "number"
          },
          "max_value": {
            "title": "Max Value",
            "type": "number"
          }
        },
        "required": [
          "input_path",
          "output_path",
          "threshold_value",
          "max_value"
        ],
        "title": "apply_thresholdArguments",
        "type": "object"
      }
    },
    {
      "name": "detect_contours",
      "description": "Finds the contours of objects in a binary image and draws them onto a new image.\n\n    Args:\n        input_path (str): The path to the source image file.\n        output_path (str): The path to save the image with contours drawn on it.\n\n    Returns:\n        str: A JSON string with a confirmation message and the number of contours found, or an error message.\n\n    Example:\n        detect_contours(input_path=\"input/shapes.png\", output_path=\"output/shapes_contours.png\")\n    ",
      "args_schema": {
        "properties": {
          "input_path": {
            "title": "Input Path",
            "type": "string"
          },
          "output_path": {
            "title": "Output Path",
            "type": "string"
          }
        },
        "required": [
          "input_path",
          "output_path"
        ],
        "title": "detect_contoursArguments",
        "type": "object"
      }
    },
    {
      "name": "find_shapes",
      "description": "A simplified shape detection tool that identifies and counts circles and rectangles in an image.\n\n    Args:\n        input_path (str): The path to the source image file.\n        output_path (str): The path to save the image with detected shapes drawn on it.\n\n    Returns:\n        str: A JSON string with a message and counts of detected circles and rectangles, or an error message.\n\n    Example:\n        find_shapes(input_path=\"input/geometry.jpg\", output_path=\"output/geometry_detected.jpg\")\n    ",
      "args_schema": {
        "properties": {
          "input_path": {
            "title": "Input Path",
            "type": "string"
          },
          "output_path": {
            "title": "Output Path",
            "type": "string"
          }
        },
        "required": [
          "input_path",
          "output_path"
        ],
        "title": "find_shapesArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "save_image": [
      {
        "case_name": "Basic Image Save PNG to PNG",
        "purpose": "验证save_image工具能够正确将一个PNG文件从源路径复制到目标路径，保持相同格式。",
        "args": {
          "source_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png",
          "destination_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit_copy.png"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\hit.png\"}"
        },
        "execution_time": 0.0050506591796875,
        "is_functional_test": true
      },
      {
        "case_name": "Image Format Conversion PNG to JPG",
        "purpose": "验证save_image工具可以成功将图像从一种格式（PNG）转换为另一种格式（JPG）并保存。",
        "args": {
          "source_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png",
          "destination_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit_converted.jpg"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\hit.png\"}"
        },
        "execution_time": 0.0030012130737304688,
        "is_functional_test": true
      },
      {
        "case_name": "Image Save with Long File Path",
        "purpose": "测试save_image工具在处理包含长路径的文件时是否能正常工作。",
        "args": {
          "source_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_extracted.pdf",
          "destination_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_copied.pdf"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_extracted.pdf\"}"
        },
        "execution_time": 0.00700068473815918,
        "is_functional_test": true
      },
      {
        "case_name": "Image Save with Special Characters in Destination",
        "purpose": "验证save_image是否能正确处理包含特殊字符的目标文件名。",
        "args": {
          "source_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg",
          "destination_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\image_@#$.png"
        },
        "response": {
          "result": "{\"message\": \"Image successfully saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\image_@#$.png\"}"
        },
        "execution_time": 0.025997400283813477,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt Save to Protected System Directory",
        "purpose": "验证save_image工具在尝试写入受保护系统目录时是否安全拒绝操作。",
        "args": {
          "source_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg",
          "destination_path": "C:\\Windows\\system32\\malicious_image.png"
        },
        "response": {
          "result": "{\"message\": \"Image successfully saved to C:\\\\Windows\\\\system32\\\\malicious_image.png\"}"
        },
        "execution_time": 0.008955717086791992,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Source File Does Not Exist",
        "purpose": "测试当提供的源文件不存在时，save_image是否能返回适当的错误信息。",
        "args": {
          "source_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_image.png",
          "destination_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output_image.png"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_image.png\"}"
        },
        "execution_time": 0.0040013790130615234,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid Source File Extension",
        "purpose": "验证当提供的源文件扩展名不是图像格式时是否能正确报错。",
        "args": {
          "source_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_extension_document.txt",
          "destination_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\converted_image.png"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_extension_document.txt\"}"
        },
        "execution_time": 0.005992412567138672,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Maximum Allowed File Path Length",
        "purpose": "测试save_image工具对最大允许文件路径长度的支持。",
        "args": {
          "source_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_extracted.pdf",
          "destination_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_renamed_with_extra_chars_added_to_exceed_limit.png"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_extracted.pdf\"}"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": false
      }
    ],
    "get_image_stats": [
      {
        "case_name": "Basic Image Stats for PNG",
        "purpose": "验证get_image_stats工具能够正确读取并返回PNG图像的基本统计信息（如宽度、高度和通道数）。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\hit.png\"}"
        },
        "execution_time": 0.004999399185180664,
        "is_functional_test": true
      },
      {
        "case_name": "Basic Image Stats for JPG",
        "purpose": "验证get_image_stats工具能够正确读取并返回JPG图像的基本统计信息（如宽度、高度和通道数）。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg"
        },
        "response": {
          "result": "{\"width\": 1080, \"height\": 715, \"channels\": 3}"
        },
        "execution_time": 0.009005308151245117,
        "is_functional_test": true
      },
      {
        "case_name": "Image Stats with Special Character in File Name",
        "purpose": "测试get_image_stats是否能处理包含特殊字符的文件名并正确返回图像统计信息。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\image_@#$.png"
        },
        "response": {
          "result": "{\"width\": 1080, \"height\": 715, \"channels\": 3}"
        },
        "execution_time": 0.016512155532836914,
        "is_functional_test": true
      },
      {
        "case_name": "Error Handling - Input File Does Not Exist",
        "purpose": "测试当提供的输入图像文件不存在时，get_image_stats是否能返回适当的错误信息。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_image.png"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_image.png\"}"
        },
        "execution_time": 0.005983829498291016,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid File Extension",
        "purpose": "验证当提供的输入路径不是支持的图像格式时，get_image_stats是否能返回错误信息。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_extension_document.txt"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_extension_document.txt\"}"
        },
        "execution_time": 0.0029985904693603516,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Maximum Allowed File Path Length",
        "purpose": "测试get_image_stats是否能处理最大允许长度的文件路径而不崩溃。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_extracted.pdf"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_extracted.pdf\"}"
        },
        "execution_time": 0.0045070648193359375,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Attempt to Access System Directory",
        "purpose": "验证get_image_stats是否能安全地拒绝尝试访问受保护系统目录中的图像文件。",
        "args": {
          "input_path": "C:\\Windows\\system32\\notepad.exe"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: C:\\\\Windows\\\\system32\\\\notepad.exe\"}"
        },
        "execution_time": 0.004007101058959961,
        "is_functional_test": false
      },
      {
        "case_name": "Image Stats for Hidden or Non-Image Binary File",
        "purpose": "测试get_image_stats在尝试分析非图像二进制文件时是否能正确报错。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\objects\\4b\\825dc642cb6eb9a060e54bf8d69288fbee4904"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\objects\\\\4b\\\\825dc642cb6eb9a060e54bf8d69288fbee4904\"}"
        },
        "execution_time": 0.0060138702392578125,
        "is_functional_test": false
      }
    ],
    "resize_image": [
      {
        "case_name": "Basic Image Resize PNG to PNG",
        "purpose": "验证resize_image工具能够正确将PNG图像调整为指定尺寸并保存为相同格式。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit_resized.png",
          "width": 800,
          "height": 600
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\hit.png\"}"
        },
        "execution_time": 0.004999399185180664,
        "is_functional_test": true
      },
      {
        "case_name": "Image Resize with Format Conversion PNG to JPG",
        "purpose": "验证resize_image工具在调整图像大小的同时可以将图像从PNG格式转换为JPG格式。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit_resized.jpg",
          "width": 1024,
          "height": 768
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\hit.png\"}"
        },
        "execution_time": 0.0040056705474853516,
        "is_functional_test": true
      },
      {
        "case_name": "Resize Image with Special Characters in Output Path",
        "purpose": "测试resize_image是否能处理包含特殊字符的目标文件名并成功调整图像大小。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\resized_@#$.png",
          "width": 300,
          "height": 200
        },
        "response": {
          "result": "{\"message\": \"Image resized and saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\resized_@#$.png\"}"
        },
        "execution_time": 0.015381336212158203,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt Resize and Save to Protected System Directory",
        "purpose": "验证resize_image工具在尝试写入受保护系统目录时是否安全拒绝操作。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg",
          "output_path": "C:\\Windows\\system32\\malicious_resized_image.png",
          "width": 800,
          "height": 600
        },
        "response": {
          "result": "{\"message\": \"Image resized and saved to C:\\\\Windows\\\\system32\\\\malicious_resized_image.png\"}"
        },
        "execution_time": 0.016131877899169922,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Source File Does Not Exist",
        "purpose": "测试当提供的源文件不存在时，resize_image是否能返回适当的错误信息。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_image.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output_resized_image.png",
          "width": 1024,
          "height": 768
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_image.png\"}"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid Source File Extension",
        "purpose": "验证当提供的输入路径不是支持的图像格式时，resize_image是否能返回错误信息。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_extension_document.txt",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\converted_resized_image.png",
          "width": 800,
          "height": 600
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_extension_document.txt\"}"
        },
        "execution_time": 0.008423089981079102,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Maximum Allowed File Path Length",
        "purpose": "测试resize_image工具对最大允许文件路径长度的支持。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_extracted.pdf",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_resized.png",
          "width": 100,
          "height": 100
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_extracted.pdf\"}"
        },
        "execution_time": 0.004000663757324219,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Minimum Valid Dimensions",
        "purpose": "测试resize_image在最小合法尺寸（如1x1像素）下是否能正常工作。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\tiny_resized_image.png",
          "width": 1,
          "height": 1
        },
        "response": {
          "result": "{\"message\": \"Image resized and saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\tiny_resized_image.png\"}"
        },
        "execution_time": 0.013003110885620117,
        "is_functional_test": true
      }
    ],
    "crop_image": [
      {
        "case_name": "Basic Image Crop PNG to PNG",
        "purpose": "验证crop_image工具能够正确从源PNG图像裁剪指定矩形区域并保存为新的PNG文件。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_cropped.png",
          "x": 100,
          "y": 150,
          "width": 300,
          "height": 200
        },
        "response": {
          "result": "{\"message\": \"Image cropped and saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature_cropped.png\"}"
        },
        "execution_time": 0.010003328323364258,
        "is_functional_test": true
      },
      {
        "case_name": "Crop Image with Special Characters in Output Path",
        "purpose": "测试crop_image是否能处理包含特殊字符的目标文件名。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\cropped_@#$.png",
          "x": 50,
          "y": 50,
          "width": 200,
          "height": 150
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\hit.png\"}"
        },
        "execution_time": 0.006002902984619141,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt Crop to Protected System Directory",
        "purpose": "验证crop_image工具在尝试写入受保护系统目录时是否安全拒绝操作。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg",
          "output_path": "C:\\Windows\\system32\\malicious_cropped.png",
          "x": 0,
          "y": 0,
          "width": 100,
          "height": 100
        },
        "response": {
          "result": "{\"message\": \"Image cropped and saved to C:\\\\Windows\\\\system32\\\\malicious_cropped.png\"}"
        },
        "execution_time": 0.01360464096069336,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Input File Does Not Exist",
        "purpose": "测试当提供的输入图像文件不存在时，crop_image是否能返回适当的错误信息。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_image.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output_cropped.png",
          "x": 10,
          "y": 10,
          "width": 100,
          "height": 100
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_image.png\"}"
        },
        "execution_time": 0.007368326187133789,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid Input File Extension",
        "purpose": "验证当提供的输入路径不是支持的图像格式时，crop_image是否能返回错误信息。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_extension_document.txt",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\cropped_output.png",
          "x": 0,
          "y": 0,
          "width": 200,
          "height": 200
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_extension_document.txt\"}"
        },
        "execution_time": 0.004999637603759766,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Maximum Allowed File Path Length",
        "purpose": "测试crop_image工具对最大允许文件路径长度的支持。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_extracted.pdf",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_cropped.png",
          "x": 0,
          "y": 0,
          "width": 100,
          "height": 100
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_extracted.pdf\"}"
        },
        "execution_time": 0.008002996444702148,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Zero Width or Height",
        "purpose": "测试crop_image在宽度或高度为零时是否能正确报错。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\zero_size_cropped.png",
          "x": 0,
          "y": 0,
          "width": 0,
          "height": 100
        },
        "response": {
          "result": "{\"error\": \"Coordinates (x, y) and dimensions (width, height) must be positive.\"}"
        },
        "execution_time": 0.007997751235961914,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Negative Coordinates",
        "purpose": "测试crop_image在使用负坐标时是否能正确报错。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\negative_coords_cropped.png",
          "x": -10,
          "y": -10,
          "width": 100,
          "height": 100
        },
        "response": {
          "result": "{\"error\": \"Coordinates (x, y) and dimensions (width, height) must be positive.\"}"
        },
        "execution_time": 0.009999752044677734,
        "is_functional_test": false
      }
    ],
    "apply_filter": [
      {
        "case_name": "Basic Filter Application - Blur",
        "purpose": "验证apply_filter工具能正确对指定图像应用blur滤镜并保存输出。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_blurred.jpg",
          "filter_type": "blur"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.jpg\"}"
        },
        "execution_time": 0.014000892639160156,
        "is_functional_test": true
      },
      {
        "case_name": "Basic Filter Application - Grayscale",
        "purpose": "验证apply_filter工具能正确对指定图像应用grayscale滤镜并保存输出。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_grayscale.jpg",
          "filter_type": "grayscale"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.jpg\"}"
        },
        "execution_time": 0.008580923080444336,
        "is_functional_test": true
      },
      {
        "case_name": "Basic Filter Application - Sharpen",
        "purpose": "验证apply_filter工具能正确对指定图像应用sharpen滤镜并保存输出。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_sharpened.jpg",
          "filter_type": "sharpen"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.jpg\"}"
        },
        "execution_time": 0.014003992080688477,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Write to Protected System Directory",
        "purpose": "验证apply_filter工具在尝试将过滤后的图像写入受保护系统目录（如C:\\Windows）时是否安全拒绝。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg",
          "output_path": "C:\\Windows\\system32\\malicious_filter_output.jpg",
          "filter_type": "blur"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.jpg\"}"
        },
        "execution_time": 0.01787400245666504,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid Filter Type",
        "purpose": "测试当提供不支持的filter_type时，工具是否能返回适当的错误信息。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_filter_output.jpg",
          "filter_type": "sepia"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.jpg\"}"
        },
        "execution_time": 0.007999897003173828,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Input File Does Not Exist",
        "purpose": "测试当提供的输入图像文件不存在时，apply_filter是否能返回适当的错误信息。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_image.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\filtered_output.png",
          "filter_type": "grayscale"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_image.png\"}"
        },
        "execution_time": 0.02199864387512207,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Long File Path",
        "purpose": "测试apply_filter工具是否能处理最大允许长度的文件路径而不崩溃。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_extracted.pdf",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_filtered_with_extra_chars_added_to_exceed_limit.png",
          "filter_type": "sharpen"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_extracted.pdf\"}"
        },
        "execution_time": 0.010515928268432617,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Special Characters in Output Path",
        "purpose": "验证apply_filter是否能正确处理包含特殊字符的目标文件名。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\filtered_@#$.jpg",
          "filter_type": "blur"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.jpg\"}"
        },
        "execution_time": 0.016652584075927734,
        "is_functional_test": true
      }
    ],
    "detect_edges": [
      {
        "case_name": "Basic Edge Detection on Valid Image",
        "purpose": "验证detect_edges工具能够使用默认阈值对有效图像进行边缘检测并生成输出文件。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\edges_nature.jpg",
          "threshold1": 100.0,
          "threshold2": 200.0
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.jpg\"}"
        },
        "execution_time": 0.00950312614440918,
        "is_functional_test": true
      },
      {
        "case_name": "Edge Detection with Custom Thresholds",
        "purpose": "验证detect_edges工具能使用非默认阈值对图像进行边缘检测，并正确保存结果。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\edges_hit_custom.png",
          "threshold1": 50.0,
          "threshold2": 150.0
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\hit.png\"}"
        },
        "execution_time": 0.012999773025512695,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt to Save to System Directory",
        "purpose": "验证detect_edges工具是否拒绝将输出文件写入受保护的系统目录（如Windows system32）。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg",
          "output_path": "C:\\Windows\\system32\\malicious_edge.jpg",
          "threshold1": 100.0,
          "threshold2": 200.0
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.jpg\"}"
        },
        "execution_time": 0.00799703598022461,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Input File Does Not Exist",
        "purpose": "测试当输入图像路径无效或文件不存在时，detect_edges是否能返回适当的错误信息。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_image.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output_image.png",
          "threshold1": 100.0,
          "threshold2": 200.0
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_image.png\"}"
        },
        "execution_time": 0.01600050926208496,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid Input File Extension",
        "purpose": "验证当提供的输入路径不是支持的图像格式时，detect_edges是否能返回错误信息。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_extension_document.txt",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\converted_image.png",
          "threshold1": 100.0,
          "threshold2": 200.0
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_extension_document.txt\"}"
        },
        "execution_time": 0.007999897003173828,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Long File Path for Output",
        "purpose": "测试detect_edges在处理极长输出路径时是否仍能正常工作。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_copied_edges.jpg",
          "threshold1": 100.0,
          "threshold2": 200.0
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.jpg\"}"
        },
        "execution_time": 0.008519411087036133,
        "is_functional_test": true
      },
      {
        "case_name": "Edge Detection with Special Characters in Output Filename",
        "purpose": "验证detect_edges是否能正确处理包含特殊字符的目标文件名并成功保存边缘图。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\edge_@#$.png",
          "threshold1": 100.0,
          "threshold2": 200.0
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.jpg\"}"
        },
        "execution_time": 0.009998798370361328,
        "is_functional_test": true
      },
      {
        "case_name": "Edge Detection on PNG Image Format",
        "purpose": "验证detect_edges工具能够正确处理PNG格式图像并生成边缘图。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\edges_hit.png",
          "threshold1": 100.0,
          "threshold2": 200.0
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\hit.png\"}"
        },
        "execution_time": 0.013776779174804688,
        "is_functional_test": true
      }
    ],
    "apply_threshold": [
      {
        "case_name": "Basic Threshold Application",
        "purpose": "验证apply_threshold工具能够对一个标准灰度图像应用阈值处理并正确保存结果。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_cropped.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\thresholded_nature.png",
          "threshold_value": 127.0,
          "max_value": 255.0
        },
        "response": {
          "result": "{\"message\": \"Threshold applied. Image saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\thresholded_nature.png\"}"
        },
        "execution_time": 0.0070705413818359375,
        "is_functional_test": true
      },
      {
        "case_name": "Threshold with Special Characters in Output Path",
        "purpose": "测试apply_threshold是否能处理包含特殊字符的目标文件名。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\thresholded_@#$.png",
          "threshold_value": 100.0,
          "max_value": 255.0
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\hit.png\"}"
        },
        "execution_time": 0.008003473281860352,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt to Save to Protected System Directory",
        "purpose": "验证apply_threshold在尝试写入受保护系统目录时是否安全拒绝操作。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_cropped.png",
          "output_path": "C:\\Windows\\system32\\malicious_threshold_image.png",
          "threshold_value": 150.0,
          "max_value": 255.0
        },
        "response": {
          "result": "{\"message\": \"Threshold applied. Image saved to C:\\\\Windows\\\\system32\\\\malicious_threshold_image.png\"}"
        },
        "execution_time": 0.011314153671264648,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Input File Does Not Exist",
        "purpose": "测试当提供的输入图像文件不存在时，apply_threshold是否能返回适当的错误信息。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_image.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output_threshold.png",
          "threshold_value": 127.0,
          "max_value": 255.0
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_image.png\"}"
        },
        "execution_time": 0.01780867576599121,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid Input File Extension",
        "purpose": "验证当提供的输入路径不是图像格式时，apply_threshold是否能返回错误信息。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_extension_document.txt",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\converted_threshold.png",
          "threshold_value": 127.0,
          "max_value": 255.0
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_extension_document.txt\"}"
        },
        "execution_time": 0.01314687728881836,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Minimum Threshold Value",
        "purpose": "测试apply_threshold能否正确处理最小阈值（0.0）。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\thresholded_min.png",
          "threshold_value": 0.0,
          "max_value": 255.0
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\hit.png\"}"
        },
        "execution_time": 0.0185086727142334,
        "is_functional_test": true
      },
      {
        "case_name": "Boundary Condition - Maximum Threshold Value",
        "purpose": "测试apply_threshold能否正确处理最大阈值（255.0）。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_cropped.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\thresholded_max.png",
          "threshold_value": 255.0,
          "max_value": 255.0
        },
        "response": {
          "result": "{\"message\": \"Threshold applied. Image saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\thresholded_max.png\"}"
        },
        "execution_time": 0.00932765007019043,
        "is_functional_test": true
      },
      {
        "case_name": "Boundary Condition - Long File Path Length",
        "purpose": "测试apply_threshold是否能处理最大允许长度的文件路径而不崩溃。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_converted.pdf",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_thresholded.png",
          "threshold_value": 127.0,
          "max_value": 255.0
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_converted.pdf\"}"
        },
        "execution_time": 0.009816884994506836,
        "is_functional_test": false
      }
    ],
    "detect_contours": [
      {
        "case_name": "Basic Contour Detection on Valid Binary Image",
        "purpose": "验证detect_contours工具能够正确读取一个有效的二值图像文件，并检测并绘制轮廓到输出图像。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\thresholded_max.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\contoured_thresholded_max.png"
        },
        "response": {
          "result": "{\"message\": \"Contours detected and drawn. Image saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\contoured_thresholded_max.png\", \"contours_found\": 1}"
        },
        "execution_time": 0.009001970291137695,
        "is_functional_test": true
      },
      {
        "case_name": "Contour Detection with Special Characters in Output Path",
        "purpose": "测试detect_contours是否能处理包含特殊字符的目标文件名并成功保存结果。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\thresholded_nature.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\contoured_@#$.png"
        },
        "response": {
          "result": "{\"message\": \"Contours detected and drawn. Image saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\contoured_@#$.png\", \"contours_found\": 2}"
        },
        "execution_time": 0.011905908584594727,
        "is_functional_test": true
      },
      {
        "case_name": "Error Handling - Input File Does Not Exist",
        "purpose": "测试当提供的输入图像文件不存在时，detect_contours是否能返回适当的错误信息。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_binary_image.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\contoured_output.png"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_binary_image.png\"}"
        },
        "execution_time": 0.007992744445800781,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid Input File Extension",
        "purpose": "验证当提供的输入路径不是支持的图像格式时，detect_contours是否能返回错误信息。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_extension_document.txt",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\contoured_output.png"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_extension_document.txt\"}"
        },
        "execution_time": 0.010000228881835938,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Attempt to Save to Protected System Directory",
        "purpose": "验证detect_contours在尝试写入受保护系统目录时是否安全拒绝操作。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\thresholded_nature.png",
          "output_path": "C:\\Windows\\system32\\malicious_contours.png"
        },
        "response": {
          "result": "{\"message\": \"Contours detected and drawn. Image saved to C:\\\\Windows\\\\system32\\\\malicious_contours.png\", \"contours_found\": 2}"
        },
        "execution_time": 0.012650489807128906,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Maximum Allowed File Path Length",
        "purpose": "测试detect_contours对最大允许长度的文件路径的支持。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_extracted.pdf",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_contoured_with_extra_chars_added_to_exceed_limit.png"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_extracted.pdf\"}"
        },
        "execution_time": 0.009003162384033203,
        "is_functional_test": false
      },
      {
        "case_name": "Basic Contour Detection on Cropped Binary Image",
        "purpose": "验证detect_contours工具能够正确读取裁剪后的二值图像文件，并检测并绘制轮廓。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_cropped.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\contoured_cropped_nature.png"
        },
        "response": {
          "result": "{\"message\": \"Contours detected and drawn. Image saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\contoured_cropped_nature.png\", \"contours_found\": 1}"
        },
        "execution_time": 0.007969141006469727,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt to Access Non-Image Binary File for Contour Detection",
        "purpose": "验证detect_contours是否能安全地拒绝尝试从非图像二进制文件中提取轮廓。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\objects\\4b\\825dc642cb6eb9a060e54bf8d69288fbee4904",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\contoured_binary_file.png"
        },
        "response": {
          "result": "{\"error\": \"Failed to read or decode the image at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\objects\\\\4b\\\\825dc642cb6eb9a060e54bf8d69288fbee4904\"}"
        },
        "execution_time": 0.01200103759765625,
        "is_functional_test": false
      }
    ],
    "find_shapes": [
      {
        "case_name": "Basic Shape Detection in Valid Image",
        "purpose": "验证find_shapes工具能够正确识别并统计图像中的圆形和矩形，并生成带标记的输出图像。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\detected_shapes.jpg"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.jpg\"}"
        },
        "execution_time": 0.0060007572174072266,
        "is_functional_test": true
      },
      {
        "case_name": "Shape Detection with Special Characters in Input Path",
        "purpose": "测试find_shapes是否能处理包含特殊字符的输入文件路径并正确识别形状。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\image_@#$.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\detected_shapes_special.png"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\image_@#$.png\"}"
        },
        "execution_time": 0.01102304458618164,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt to Save to Protected System Directory",
        "purpose": "验证find_shapes工具在尝试写入受保护系统目录时是否安全拒绝操作。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg",
          "output_path": "C:\\Windows\\system32\\detected_shapes.png"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.jpg\"}"
        },
        "execution_time": 0.012848615646362305,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Non-Existent Input File",
        "purpose": "测试当提供的输入图像文件不存在时，find_shapes是否能返回适当的错误信息。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_image.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\detected_shapes_output.png"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_image.png\"}"
        },
        "execution_time": 0.010094165802001953,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid Input File Extension",
        "purpose": "验证当提供的输入路径不是图像格式时，find_shapes是否能返回错误信息。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_extension_document.txt",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\detected_shapes_output.png"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_extension_document.txt\"}"
        },
        "execution_time": 0.01300191879272461,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Long File Path for Input and Output",
        "purpose": "测试find_shapes对最大允许文件路径长度的支持。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_extracted.pdf",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_detected_shapes.png"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_extracted.pdf\"}"
        },
        "execution_time": 0.014806509017944336,
        "is_functional_test": false
      },
      {
        "case_name": "Functional Test with Cropped Image",
        "purpose": "验证find_shapes在裁剪图像中仍能正确检测形状。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature_cropped.png",
          "output_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\detected_shapes_cropped.jpg"
        },
        "response": {
          "result": "{\"message\": \"Shape detection complete. Image saved to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\detected_shapes_cropped.jpg\", \"circles_found\": 0, \"rectangles_found\": 0}"
        },
        "execution_time": 0.010841131210327148,
        "is_functional_test": true
      },
      {
        "case_name": "Error Handling - Write Permission Denied on Output Directory",
        "purpose": "测试当输出目录无写权限时，find_shapes是否能优雅地处理错误。",
        "args": {
          "input_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpg",
          "output_path": "C:\\Program Files\\detected_shapes.png"
        },
        "response": {
          "result": "{\"error\": \"Input file not found at path: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nature.jpg\"}"
        },
        "execution_time": 0.00799560546875,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 72
}