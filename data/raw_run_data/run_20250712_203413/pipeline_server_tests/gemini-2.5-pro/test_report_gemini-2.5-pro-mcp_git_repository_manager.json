{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "gemini-2.5-pro-mcp_git_repository_manager",
  "server_path": "workspace/pipeline-output-servers/gemini-2.5-pro/mcp_git_repository_manager/refined/server.py",
  "timestamp": "2025-07-12T20:44:04.441308",
  "tools": [
    {
      "name": "git_init",
      "description": "\n    Initializes a new Git repository at the specified path.\n\n    This function creates an empty Git repository in the given directory. If the\n    directory does not exist, it will be created. If a Git repository already\n    exists at the path, an error will be returned.\n\n    Args:\n        repo_path (str): The local directory path to initialize as a Git repository.\n                         Example: \"/path/to/my-repo\"\n\n    Returns:\n        str: A JSON string confirming the repository initialization or reporting an error.\n             On success: '{\"status\": \"success\", \"message\": \"Repository initialized at /path/to/my-repo\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_initArguments",
        "type": "object"
      }
    },
    {
      "name": "git_status",
      "description": "\n    Shows the working tree status of a Git repository.\n\n    This function provides a summary of the current state of the repository,\n    including untracked files, changes not staged for commit, and changes\n    to be committed.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n\n    Returns:\n        str: A JSON string containing the Git repository's current status or an error message.\n             On success: '{\"status\": \"success\", \"data\": \"status output\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_statusArguments",
        "type": "object"
      }
    },
    {
      "name": "git_add",
      "description": "\n    Adds file changes to the staging area (index).\n\n    This function stages changes in a specific file or all changes in the\n    working directory, preparing them for the next commit.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        file_path (str): The file path to add to the staging area. Use '.' to add all changes.\n                         Example: \"my_file.py\" or \".\"\n\n    Returns:\n        str: A JSON string confirming the addition or reporting an error.\n             On success: '{\"status\": \"success\", \"message\": \"Added 'my_file.py' to the staging area.\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "file_path": {
            "title": "File Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "file_path"
        ],
        "title": "git_addArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_unstaged",
      "description": "\n    Shows changes in the working directory that are not yet staged.\n\n    This function displays the differences between the files in the working\n    directory and the staging area (index). It highlights modifications that\n    have not been added for commit.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n\n    Returns:\n        str: A JSON string containing the diff of unstaged changes or an error message.\n             On success: '{\"status\": \"success\", \"data\": \"diff output\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_diff_unstagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_staged",
      "description": "\n    Shows changes that are staged but not yet committed.\n\n    This function displays the differences between the staging area (index) and\n    the last commit (HEAD). It shows what will be included in the next commit.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n\n    Returns:\n        str: A JSON string containing the diff of staged changes or an error message.\n             On success: '{\"status\": \"success\", \"data\": \"diff output\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_diff_stagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff",
      "description": "\n    Compares differences between two branches, commits, or a branch and the working directory.\n\n    This function provides a flexible way to see the changes between different\n    points in the repository's history.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        base (str): The base branch or commit hash for comparison.\n                    Example: \"main\"\n        compare (str, optional): The branch or commit hash to compare with the base.\n                                 If not provided, compares the base with the current\n                                 working directory.\n                                 Example: \"develop\"\n\n    Returns:\n        str: A JSON string containing the diff between the two references or an error message.\n             On success: '{\"status\": \"success\", \"data\": \"diff output\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "base": {
            "title": "Base",
            "type": "string"
          },
          "compare": {
            "default": null,
            "title": "Compare",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "base"
        ],
        "title": "git_diffArguments",
        "type": "object"
      }
    },
    {
      "name": "git_commit",
      "description": "\n    Records staged changes to the repository.\n\n    This function creates a new commit containing the content of the staging area\n    (index) along with a descriptive commit message. An error is returned if\n    there are no changes staged for commit.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        message (str): The commit message.\n                       Example: \"feat: Add new feature\"\n\n    Returns:\n        str: A JSON string containing the new commit's hash or an error message.\n             On success: '{\"status\": \"success\", \"commit_hash\": \"a1b2c3d4...\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "message": {
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "message"
        ],
        "title": "git_commitArguments",
        "type": "object"
      }
    },
    {
      "name": "git_reset",
      "description": "\n    Unstages files from the staging area (index).\n\n    This function removes files from the staging area, effectively undoing a\n    'git add' command. It does not modify the working directory.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        file_path (str, optional): The specific file path to remove from the staging area.\n                                   If not provided, all files are unstaged.\n                                   Example: \"my_file.py\"\n\n    Returns:\n        str: A JSON string confirming the reset or reporting an error.\n             On success: '{\"status\": \"success\", \"message\": \"Unstaged 'my_file.py'.\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "file_path": {
            "default": null,
            "title": "File Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_resetArguments",
        "type": "object"
      }
    },
    {
      "name": "git_log",
      "description": "\n    Shows the commit history of the current branch.\n\n    This function retrieves a list of the most recent commits, providing details\n    such as commit hash, author, date, and message for each.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        max_count (int, optional): The maximum number of log entries to show.\n                                   Defaults to 10. Example: 5\n\n    Returns:\n        str: A JSON string containing the formatted commit history log or an error message.\n             On success: '{\"status\": \"success\", \"data\": [{\"hash\": ..., \"author\": ..., \"date\": ..., \"message\": ...}]}'\n             On failure: '{\"status\": \"error\", \"message\": \"Error description\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "max_count": {
            "default": 10,
            "title": "Max Count",
            "type": "integer"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_logArguments",
        "type": "object"
      }
    },
    {
      "name": "git_create_branch",
      "description": "\n    Creates a new branch in the repository.\n\n    The new branch is created pointing to the current HEAD commit. This function\n    does not switch to the new branch.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        branch_name (str): The name of the new branch to create.\n                           Example: \"feature/new-branch\"\n\n    Returns:\n        str: A JSON string confirming the branch creation or reporting an error.\n             On success: '{\"status\": \"success\", \"message\": \"Branch 'feature/new-branch' created.\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Branch 'feature/new-branch' already exists.\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "branch_name"
        ],
        "title": "git_create_branchArguments",
        "type": "object"
      }
    },
    {
      "name": "git_checkout",
      "description": "\n    Switches to a specified branch, updating the working directory.\n\n    This function changes the current active branch to the one specified. The\n    files in the working directory will be updated to match the version in\n    the new branch.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        branch_name (str): The name of the branch to switch to.\n                           Example: \"main\"\n\n    Returns:\n        str: A JSON string confirming the branch switch or reporting an error.\n             On success: '{\"status\": \"success\", \"message\": \"Switched to branch 'main'.\"}'\n             On failure: '{\"status\": \"error\", \"message\": \"Branch 'main' not found.\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "branch_name"
        ],
        "title": "git_checkoutArguments",
        "type": "object"
      }
    },
    {
      "name": "git_show",
      "description": "\n    Shows details and changes of a specific commit.\n\n    This function provides metadata (author, date, message) and the patch\n    (diff) for a given commit hash.\n\n    Args:\n        repo_path (str): The local path of the Git repository.\n                         Example: \"/path/to/my-repo\"\n        commit_hash (str): The hash of the commit to view details for. Can be a short hash.\n                           Example: \"a1b2c3d4\"\n\n    Returns:\n        str: A JSON string containing detailed information about the specified commit or an error message.\n             On success: '{\"status\": \"success\", \"data\": {\"hash\": ..., \"author\": ..., \"date\": ..., \"message\": ..., \"diff\": ...}}'\n             On failure: '{\"status\": \"error\", \"message\": \"Commit with hash 'a1b2c3d4' not found.\"}'\n    ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          },
          "commit_hash": {
            "title": "Commit Hash",
            "type": "string"
          }
        },
        "required": [
          "repo_path",
          "commit_hash"
        ],
        "title": "git_showArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "git_init": [
      {
        "case_name": "Initialize Git Repo in New Directory",
        "purpose": "验证在新目录中初始化Git仓库的基本功能是否正常",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Repository initialized at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_git_repo\"}"
        },
        "execution_time": 0.14692902565002441,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repo in Existing Empty Directory",
        "purpose": "验证在已存在的空目录中初始化Git仓库的功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository already exists at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\"}"
        },
        "execution_time": 0.003998517990112305,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Initialize Git Repo in NonWritable Path",
        "purpose": "验证工具能否优雅处理无法写入的路径错误",
        "args": {
          "repo_path": "D:\\Windows\\system32\\not_writable_dir"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Repository initialized at D:\\\\Windows\\\\system32\\\\not_writable_dir\"}"
        },
        "execution_time": 0.17650079727172852,
        "is_functional_test": false
      },
      {
        "case_name": "Fail to Initialize Git Repo in Already Initialized Directory",
        "purpose": "验证工具能否检测并拒绝已在使用的Git仓库目录",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Repository initialized at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\"}"
        },
        "execution_time": 0.14286065101623535,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repo with Special Characters in Path",
        "purpose": "验证路径包含特殊字符时Git仓库初始化的兼容性",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo@#$_test"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Repository initialized at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\repo@#$_test\"}"
        },
        "execution_time": 0.2199087142944336,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repo at Maximum Allowed Path Length",
        "purpose": "验证最大允许长度的文件路径下Git仓库初始化是否成功",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Repository initialized at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new\"}"
        },
        "execution_time": 0.15741872787475586,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt Git Init on System Critical Directory",
        "purpose": "验证工具是否安全地阻止了在系统关键目录上的Git初始化操作",
        "args": {
          "repo_path": "C:\\Windows"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(1)\\n  cmdline: git init\\n  stderr: 'C:/Windows/.git: Permission denied'\"}"
        },
        "execution_time": 0.20418190956115723,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repo Using Invalid Path Format",
        "purpose": "验证工具能否正确识别并拒绝非法格式的路径输入",
        "args": {
          "repo_path": "invalid/<path>:\\format"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"[WinError 123] \\u6587\\u4ef6\\u540d\\u3001\\u76ee\\u5f55\\u540d\\u6216\\u5377\\u6807\\u8bed\\u6cd5\\u4e0d\\u6b63\\u786e\\u3002: 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\workspace\\\\\\\\pipeline-output-servers\\\\\\\\gemini-2.5-pro\\\\\\\\mcp_git_repository_manager\\\\\\\\refined\\\\\\\\invalid\\\\\\\\<path>:'\"}"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      }
    ],
    "git_status": [
      {
        "case_name": "Basic Git Status in Initialized Repo",
        "purpose": "验证在已初始化的Git仓库中获取基本状态信息的功能是否正常",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"On branch master\\n\\nNo commits yet\\n\\nnothing to commit (create/copy files and use \\\"git add\\\" to track)\"}"
        },
        "execution_time": 0.2128756046295166,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status with Untracked Files",
        "purpose": "验证工具能否正确显示包含未跟踪文件的工作树状态",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo@#$_test"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\repo@#$_test\"}"
        },
        "execution_time": 0.009984254837036133,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status on Non-Git Directory",
        "purpose": "验证工具能否优雅处理非Git仓库目录的状态查询请求",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"On branch very_long_branch_name_that_tests_the_maximum_allowed_length_of_a_git_branch_name_in_windows_systems\\nUntracked files:\\n  (use \\\"git add <file>...\\\" to include in what will be committed)\\n\\tapp.ico\\n\\tconverted_output.pdf\\n\\tempty_metadata_document.docx\\n\\tfull_metadata_document.docx\\n\\thit.png\\n\\tmodules.xml\\n\\tmulti_merged_output.zip\\n\\tnature_cropped.png\\n\\tnew_git_repo/\\n\\tnonname.html\\n\\tpaper1.pdf\\n\\tpresent.html\\n\\tre2.doc\\n\\trecom.doc\\n\\trule1.pdf\\n\\tspecial_char_metadata.docx\\n\\tswe.pptx\\n\\tvery_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_converted.pdf\\n\\txue.jpg\\n\\nnothing added to commit but untracked files present (use \\\"git add\\\" to track)\"}"
        },
        "execution_time": 0.18737077713012695,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Attempt Git Status on System Critical Path",
        "purpose": "验证工具是否安全地阻止对系统关键路径执行git status操作",
        "args": {
          "repo_path": "C:\\Windows"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Invalid Git repository: C:\\\\Windows\"}"
        },
        "execution_time": 0.014999628067016602,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status with Special Characters in Path",
        "purpose": "验证路径包含特殊字符时git status命令的兼容性和输出准确性",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo@#$_test"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\repo@#$_test\"}"
        },
        "execution_time": 0.008002042770385742,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status at Maximum Allowed Path Length",
        "purpose": "验证最大允许长度的文件路径下git status功能是否正常",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new\"}"
        },
        "execution_time": 0.012007951736450195,
        "is_functional_test": true
      },
      {
        "case_name": "Git Status with Invalid Repository Path",
        "purpose": "验证工具能否正确识别并拒绝无效的仓库路径输入",
        "args": {
          "repo_path": "invalid/<path>:\\format"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: invalid/<path>:\\\\format\"}"
        },
        "execution_time": 0.010509967803955078,
        "is_functional_test": false
      },
      {
        "case_name": "Git Status on Read-Only Filesystem",
        "purpose": "验证工具能否妥善处理无法访问的只读文件系统上的仓库状态查询",
        "args": {
          "repo_path": "D:\\Windows\\system32\\not_writable_dir"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"On branch master\\n\\nNo commits yet\\n\\nnothing to commit (create/copy files and use \\\"git add\\\" to track)\"}"
        },
        "execution_time": 0.17946696281433105,
        "is_functional_test": false
      }
    ],
    "git_add": [
      {
        "case_name": "Add Single File to Staging Area",
        "purpose": "验证基本功能：将单个文件添加到Git暂存区是否正常工作",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\app.ico"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Git command failed: Cmd('git') failed due to: exit code(128)\\n  cmdline: git add D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\app.ico\\n  stderr: 'fatal: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\app.ico: 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\app.ico' is outside repository at 'D:/devWorkspace/MCPServer-Generator/testSystem/testFiles/new_git_repo''\"}"
        },
        "execution_time": 0.17019224166870117,
        "is_functional_test": true
      },
      {
        "case_name": "Add All Files to Staging Area Using Dot",
        "purpose": "验证使用'.'参数可正确将所有修改添加到暂存区的功能",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "file_path": "."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Added all changes to the staging area.\"}"
        },
        "execution_time": 0.19586467742919922,
        "is_functional_test": true
      },
      {
        "case_name": "Add Nonexistent File to Staging Area",
        "purpose": "验证工具能否优雅处理尝试添加不存在的文件的情况",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Git command failed: Cmd('git') failed due to: exit code(128)\\n  cmdline: git add D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_file.txt\\n  stderr: 'fatal: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_file.txt: 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_file.txt' is outside repository at 'D:/devWorkspace/MCPServer-Generator/testSystem/testFiles/new_git_repo''\"}"
        },
        "execution_time": 0.20624256134033203,
        "is_functional_test": false
      },
      {
        "case_name": "Add File in Read-Only Repository",
        "purpose": "验证在只读仓库中尝试添加文件时的错误处理",
        "args": {
          "repo_path": "D:\\Windows\\system32\\not_writable_dir",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\app.ico"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Git command failed: Cmd('git') failed due to: exit code(128)\\n  cmdline: git add D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\app.ico\\n  stderr: 'fatal: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\app.ico: 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\app.ico' is outside repository at 'D:/Windows/system32/not_writable_dir''\"}"
        },
        "execution_time": 0.16063547134399414,
        "is_functional_test": false
      },
      {
        "case_name": "Add File with Special Characters in Path",
        "purpose": "验证路径包含特殊字符时git add命令的兼容性和处理能力",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo@#$_test",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_char_metadata.docx"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\repo@#$_test\"}"
        },
        "execution_time": 0.01639413833618164,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt Add on System Critical Directory",
        "purpose": "验证工具是否安全地阻止对系统关键路径执行git add操作",
        "args": {
          "repo_path": "C:\\Windows",
          "file_path": "C:\\Windows\\system32\\drivers\\etc\\hosts"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Invalid Git repository: C:\\\\Windows\"}"
        },
        "execution_time": 0.014932870864868164,
        "is_functional_test": false
      },
      {
        "case_name": "Add File at Maximum Allowed Path Length",
        "purpose": "验证最大允许长度的文件路径下git add功能是否正常",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_converted.pdf"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new\"}"
        },
        "execution_time": 0.013231992721557617,
        "is_functional_test": true
      },
      {
        "case_name": "Add File with Invalid Path Format",
        "purpose": "验证工具能否正确识别并拒绝非法格式的文件路径输入",
        "args": {
          "repo_path": "invalid/<path>:\\format",
          "file_path": "invalid/<path>:\\format\\file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: invalid/<path>:\\\\format\"}"
        },
        "execution_time": 0.01582622528076172,
        "is_functional_test": false
      }
    ],
    "git_diff_unstaged": [
      {
        "case_name": "Basic Git Diff Unstaged in Initialized Repo",
        "purpose": "验证在已初始化的Git仓库中获取未暂存更改差异的基本功能是否正常",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"\"}"
        },
        "execution_time": 0.1410672664642334,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Unstaged with Modified Files",
        "purpose": "验证工具能否正确显示包含修改但未暂存文件的工作目录差异",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"\"}"
        },
        "execution_time": 0.29471302032470703,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Unstaged on Non-Git Directory",
        "purpose": "验证工具能否优雅处理非Git仓库目录的diff查询请求",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonname.html"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonname.html\"}"
        },
        "execution_time": 0.009735822677612305,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Attempt Git Diff Unstaged on System Critical Path",
        "purpose": "验证工具是否安全地阻止对系统关键路径执行git diff操作",
        "args": {
          "repo_path": "C:\\Windows"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Invalid Git repository: C:\\\\Windows\"}"
        },
        "execution_time": 0.011821508407592773,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Unstaged with Special Characters in Path",
        "purpose": "验证路径包含特殊字符时git diff命令的兼容性和输出准确性",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo@#$_test"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\repo@#$_test\"}"
        },
        "execution_time": 0.008505821228027344,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Unstaged at Maximum Allowed Path Length",
        "purpose": "验证最大允许长度的文件路径下git diff功能是否正常",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new\"}"
        },
        "execution_time": 0.01699233055114746,
        "is_functional_test": true
      },
      {
        "case_name": "Git Diff Unstaged with Invalid Repository Path",
        "purpose": "验证工具能否正确识别并拒绝无效的仓库路径输入",
        "args": {
          "repo_path": "invalid/<path>:\\format"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: invalid/<path>:\\\\format\"}"
        },
        "execution_time": 0.013511419296264648,
        "is_functional_test": false
      },
      {
        "case_name": "Git Diff Unstaged on Read-Only Filesystem",
        "purpose": "验证工具能否妥善处理无法写入的只读文件系统上的仓库diff查询",
        "args": {
          "repo_path": "D:\\Windows\\system32\\not_writable_dir"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"\"}"
        },
        "execution_time": 0.288118839263916,
        "is_functional_test": false
      }
    ],
    "git_commit": [
      {
        "case_name": "Basic Git Commit with Staged Changes",
        "purpose": "验证在已初始化的Git仓库中，添加并提交 staged 变化的基本功能是否正常",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "message": "feat: Add new feature"
        },
        "response": {
          "result": "{\"status\": \"success\", \"commit_hash\": \"8e00864b8e796c8ade3f3280fbe7348911f6f4b7\"}"
        },
        "execution_time": 0.30423450469970703,
        "is_functional_test": true
      },
      {
        "case_name": "Commit Without Any Staged Changes",
        "purpose": "验证在没有任何暂存更改的情况下尝试提交是否会返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "message": "chore: Empty commit attempt"
        },
        "response": {
          "result": "{\"status\": \"success\", \"commit_hash\": \"072dc843ccb76d9592d537c389c767f441c78622\"}"
        },
        "execution_time": 0.4960620403289795,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt Git Commit on System Critical Path",
        "purpose": "验证工具是否安全地阻止对系统关键路径执行git commit操作",
        "args": {
          "repo_path": "C:\\Windows",
          "message": "feat: System path test"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Invalid Git repository: C:\\\\Windows\"}"
        },
        "execution_time": 0.027806758880615234,
        "is_functional_test": false
      },
      {
        "case_name": "Git Commit with Special Characters in Message",
        "purpose": "验证提交信息包含特殊字符时git commit命令的兼容性和输出准确性",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "message": "fix: Update file@#$_test"
        },
        "response": {
          "result": "{\"status\": \"success\", \"commit_hash\": \"82c9161cb9a30aeed075fb746ea70a78f1867970\"}"
        },
        "execution_time": 0.4544985294342041,
        "is_functional_test": true
      },
      {
        "case_name": "Git Commit with Maximum Allowed Message Length",
        "purpose": "验证最大允许长度的提交信息下git commit功能是否成功",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "message": "feat: very_long_commit_message_that_tests_the_maximum_allowed_length_of_a_git_commit_message_in_windows_systems_very_long_commit_message_that_tests_the_maximum_allowed_length_of_a_git_commit_message_in_windows_systems_very_long_commit_message_that_tests_the_maximum_allowed_length_of_a_git_commit_message_in_windows_systems"
        },
        "response": {
          "result": "{\"status\": \"success\", \"commit_hash\": \"f966f2151e5799c7c2ca511c215c84ecdedacfff\"}"
        },
        "execution_time": 0.46934986114501953,
        "is_functional_test": true
      },
      {
        "case_name": "Git Commit with Invalid Repository Path",
        "purpose": "验证工具能否正确识别并拒绝无效的仓库路径输入",
        "args": {
          "repo_path": "invalid/<path>:\\format",
          "message": "feat: Invalid repo path test"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: invalid/<path>:\\\\format\"}"
        },
        "execution_time": 0.012363910675048828,
        "is_functional_test": false
      },
      {
        "case_name": "Git Commit on Read-Only Filesystem",
        "purpose": "验证工具能否妥善处理无法写入的只读文件系统上的提交操作",
        "args": {
          "repo_path": "D:\\Windows\\system32\\not_writable_dir",
          "message": "docs: Read-only filesystem test"
        },
        "response": {
          "result": "{\"status\": \"success\", \"commit_hash\": \"7b98981ba60dbe6f4f5c0c9a8db62166cabcf4ca\"}"
        },
        "execution_time": 0.398561954498291,
        "is_functional_test": false
      },
      {
        "case_name": "Git Commit with Empty Message",
        "purpose": "验证提交信息为空时工具能否优雅处理并返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "message": ""
        },
        "response": {
          "result": "{\"status\": \"success\", \"commit_hash\": \"9bc2376dd1ccb783f26902a052d949c6efdf961d\"}"
        },
        "execution_time": 0.4604671001434326,
        "is_functional_test": false
      }
    ],
    "git_diff_staged": [
      {
        "case_name": "Basic Diff Staged Changes in Initialized Repo",
        "purpose": "验证在已初始化的Git仓库中获取暂存区差异信息的基本功能是否正常",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"\"}"
        },
        "execution_time": 0.24152421951293945,
        "is_functional_test": true
      },
      {
        "case_name": "Diff Staged with Special Characters in Path",
        "purpose": "验证路径包含特殊字符时git diff --cached命令的兼容性和输出准确性",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo@#$_test"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\repo@#$_test\"}"
        },
        "execution_time": 0.009236812591552734,
        "is_functional_test": false
      },
      {
        "case_name": "Diff Staged on Non-Git Directory",
        "purpose": "验证工具能否优雅处理非Git仓库目录的diff staged请求",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"\"}"
        },
        "execution_time": 0.2114570140838623,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Attempt Diff Staged on System Critical Path",
        "purpose": "验证工具是否安全地阻止对系统关键路径执行git diff --cached操作",
        "args": {
          "repo_path": "C:\\Windows"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Invalid Git repository: C:\\\\Windows\"}"
        },
        "execution_time": 0.027649641036987305,
        "is_functional_test": false
      },
      {
        "case_name": "Diff Staged with Invalid Repository Path",
        "purpose": "验证工具能否正确识别并拒绝无效的仓库路径输入",
        "args": {
          "repo_path": "invalid/<path>:\\format"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: invalid/<path>:\\\\format\"}"
        },
        "execution_time": 0.009772062301635742,
        "is_functional_test": false
      },
      {
        "case_name": "Diff Staged at Maximum Allowed Path Length",
        "purpose": "验证最大允许长度的文件路径下git diff --cached功能是否正常",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new\"}"
        },
        "execution_time": 0.010747194290161133,
        "is_functional_test": true
      },
      {
        "case_name": "Diff Staged on Read-Only Filesystem",
        "purpose": "验证工具能否妥善处理无法写入的只读文件系统上的暂存区差异查询",
        "args": {
          "repo_path": "D:\\Windows\\system32\\not_writable_dir"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"\"}"
        },
        "execution_time": 0.21606826782226562,
        "is_functional_test": false
      },
      {
        "case_name": "Diff Staged with Unstaged and Staged Changes",
        "purpose": "验证工具能否正确显示同时存在未暂存和已暂存修改的情况",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"\"}"
        },
        "execution_time": 0.17011451721191406,
        "is_functional_test": true
      }
    ],
    "git_log": [
      {
        "case_name": "Basic Git Log in Initialized Repo",
        "purpose": "验证在已初始化的Git仓库中获取基本提交历史记录的功能是否正常",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": [{\"hash\": \"9bc2376dd1ccb783f26902a052d949c6efdf961d\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-12T20:46:22+08:00\", \"message\": \"\"}, {\"hash\": \"f966f2151e5799c7c2ca511c215c84ecdedacfff\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-12T20:46:21+08:00\", \"message\": \"feat: very_long_commit_message_that_tests_the_maximum_allowed_length_of_a_git_commit_message_in_windows_systems_very_long_commit_message_that_tests_the_maximum_allowed_length_of_a_git_commit_message_in_windows_systems_very_long_commit_message_that_tests_the_maximum_allowed_length_of_a_git_commit_message_in_windows_systems\"}, {\"hash\": \"82c9161cb9a30aeed075fb746ea70a78f1867970\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-12T20:46:21+08:00\", \"message\": \"fix: Update file@#$_test\"}, {\"hash\": \"072dc843ccb76d9592d537c389c767f441c78622\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-12T20:46:20+08:00\", \"message\": \"chore: Empty commit attempt\"}, {\"hash\": \"8e00864b8e796c8ade3f3280fbe7348911f6f4b7\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-12T20:46:20+08:00\", \"message\": \"feat: Add new feature\"}]}"
        },
        "execution_time": 0.518484354019165,
        "is_functional_test": true
      },
      {
        "case_name": "Git Log with Custom Max Count",
        "purpose": "验证工具能否根据指定的最大提交数量返回相应数量的日志条目",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "max_count": 5
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": [{\"hash\": \"9bc2376dd1ccb783f26902a052d949c6efdf961d\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-12T20:46:22+08:00\", \"message\": \"\"}, {\"hash\": \"f966f2151e5799c7c2ca511c215c84ecdedacfff\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-12T20:46:21+08:00\", \"message\": \"feat: very_long_commit_message_that_tests_the_maximum_allowed_length_of_a_git_commit_message_in_windows_systems_very_long_commit_message_that_tests_the_maximum_allowed_length_of_a_git_commit_message_in_windows_systems_very_long_commit_message_that_tests_the_maximum_allowed_length_of_a_git_commit_message_in_windows_systems\"}, {\"hash\": \"82c9161cb9a30aeed075fb746ea70a78f1867970\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-12T20:46:21+08:00\", \"message\": \"fix: Update file@#$_test\"}, {\"hash\": \"072dc843ccb76d9592d537c389c767f441c78622\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-12T20:46:20+08:00\", \"message\": \"chore: Empty commit attempt\"}, {\"hash\": \"8e00864b8e796c8ade3f3280fbe7348911f6f4b7\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-12T20:46:20+08:00\", \"message\": \"feat: Add new feature\"}]}"
        },
        "execution_time": 0.5384793281555176,
        "is_functional_test": true
      },
      {
        "case_name": "Git Log on Non-Git Directory",
        "purpose": "验证工具能否优雅处理非Git仓库目录的日志查询请求",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": [{\"hash\": \"3175e1dc243cc7beadcc462b19f52b7a436a4d57\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-12T20:40:37+08:00\", \"message\": \"This is a very long commit message that exceeds normal length limits and is used to test the maximum allowed input size for commit messages in this system. This is only for testing purposes.\"}, {\"hash\": \"cfdbb0986b22443bd152a693cbebc300f9b30810\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-12T20:40:37+08:00\", \"message\": \"Commit message with special characters: @#$_!{}[]\"}, {\"hash\": \"42862f911cfa403e879099f0a2f27ac70672c478\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-12T20:40:36+08:00\", \"message\": \"\"}, {\"hash\": \"96779b34969a3f690b4378b8be08ccb9fdae2921\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-12T20:40:36+08:00\", \"message\": \"Initial commit\"}]}"
        },
        "execution_time": 0.5985400676727295,
        "is_functional_test": false
      },
      {
        "case_name": "Git Log with Special Characters in Path",
        "purpose": "验证路径包含特殊字符时git log命令的兼容性和输出准确性",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo@#$_test"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\repo@#$_test\"}"
        },
        "execution_time": 0.007400989532470703,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt Git Log on System Critical Path",
        "purpose": "验证工具是否安全地阻止对系统关键路径执行git log操作",
        "args": {
          "repo_path": "C:\\Windows"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Invalid Git repository: C:\\\\Windows\"}"
        },
        "execution_time": 0.005574464797973633,
        "is_functional_test": false
      },
      {
        "case_name": "Git Log at Maximum Allowed Path Length",
        "purpose": "验证最大允许长度的文件路径下git log功能是否正常",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new\"}"
        },
        "execution_time": 0.01144552230834961,
        "is_functional_test": true
      },
      {
        "case_name": "Git Log with Invalid Repository Path",
        "purpose": "验证工具能否正确识别并拒绝无效的仓库路径输入",
        "args": {
          "repo_path": "invalid/<path>:\\format"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: invalid/<path>:\\\\format\"}"
        },
        "execution_time": 0.012098312377929688,
        "is_functional_test": false
      },
      {
        "case_name": "Git Log on Read-Only Filesystem",
        "purpose": "验证工具能否妥善处理无法写入的只读文件系统上的仓库日志查询",
        "args": {
          "repo_path": "D:\\Windows\\system32\\not_writable_dir"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": [{\"hash\": \"7b98981ba60dbe6f4f5c0c9a8db62166cabcf4ca\", \"author\": \"pouchine <1291980381@qq.com>\", \"date\": \"2025-07-12T20:46:22+08:00\", \"message\": \"docs: Read-only filesystem test\"}]}"
        },
        "execution_time": 0.6764447689056396,
        "is_functional_test": false
      }
    ],
    "git_create_branch": [
      {
        "case_name": "Create Branch in Initialized Repo",
        "purpose": "验证在已初始化的Git仓库中创建新分支的基本功能是否正常",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "branch_name": "feature/new-branch"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Branch 'feature/new-branch' created.\"}"
        },
        "execution_time": 0.21594619750976562,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Create Existing Branch",
        "purpose": "验证工具能否检测并拒绝创建已存在的分支",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\refs\\heads\\master",
          "branch_name": "master"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\refs\\\\heads\\\\master\"}"
        },
        "execution_time": 0.009002447128295898,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Special Characters",
        "purpose": "验证包含特殊字符的分支名称是否能被正确处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "branch_name": "feature@#$_test"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Branch 'feature@#$_test' created.\"}"
        },
        "execution_time": 0.1844494342803955,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch at Maximum Allowed Length",
        "purpose": "验证最大允许长度的分支名称是否能成功创建",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "branch_name": "very_long_branch_name_that_tests_the_maximum_allowed_length_of_a_git_branch_name_in_windows_systems_extra"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Branch 'very_long_branch_name_that_tests_the_maximum_allowed_length_of_a_git_branch_name_in_windows_systems_extra' created.\"}"
        },
        "execution_time": 0.16849422454833984,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt Create Branch on System Critical Path",
        "purpose": "验证工具是否安全地阻止在系统关键路径上创建Git分支",
        "args": {
          "repo_path": "C:\\Windows",
          "branch_name": "malicious_branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Invalid Git repository: C:\\\\Windows\"}"
        },
        "execution_time": 0.009221792221069336,
        "is_functional_test": false
      },
      {
        "case_name": "Fail to Create Branch in Non-Git Directory",
        "purpose": "验证工具能否优雅处理在非Git仓库目录中尝试创建分支的情况",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/test"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Branch 'feature/test' created.\"}"
        },
        "execution_time": 0.24020862579345703,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch Using Invalid Path Format",
        "purpose": "验证工具能否正确识别并拒绝非法格式的仓库路径输入",
        "args": {
          "repo_path": "invalid/<path>:\\format",
          "branch_name": "feature/invalid-path"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: invalid/<path>:\\\\format\"}"
        },
        "execution_time": 0.01000213623046875,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch on Read-Only Filesystem",
        "purpose": "验证工具能否妥善处理无法写入的只读文件系统上的分支创建请求",
        "args": {
          "repo_path": "D:\\Windows\\system32\\not_writable_dir",
          "branch_name": "feature/readonly"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Branch 'feature/readonly' created.\"}"
        },
        "execution_time": 0.22007274627685547,
        "is_functional_test": false
      }
    ],
    "git_checkout": [
      {
        "case_name": "Basic Git Checkout to Existing Branch",
        "purpose": "验证在已存在的Git仓库中切换到已有分支的基本功能是否正常",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "master"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Switched to branch 'master'.\"}"
        },
        "execution_time": 0.14618825912475586,
        "is_functional_test": true
      },
      {
        "case_name": "Git Checkout to Non-Existent Branch",
        "purpose": "验证尝试切换到不存在的分支时工具能否正确返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "nonexistent_branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Branch 'nonexistent_branch' not found.\"}"
        },
        "execution_time": 0.005003452301025391,
        "is_functional_test": false
      },
      {
        "case_name": "Git Checkout with Special Characters in Branch Name",
        "purpose": "验证包含特殊字符的分支名是否能被正确处理",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "feature@#$_test"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Switched to branch 'feature@#$_test'.\"}"
        },
        "execution_time": 0.3175928592681885,
        "is_functional_test": true
      },
      {
        "case_name": "Git Checkout on Read-Only Filesystem",
        "purpose": "验证在只读文件系统上执行git checkout操作时的行为",
        "args": {
          "repo_path": "D:\\Windows\\system32\\not_writable_dir",
          "branch_name": "master"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Switched to branch 'master'.\"}"
        },
        "execution_time": 0.3132801055908203,
        "is_functional_test": false
      },
      {
        "case_name": "Git Checkout with Maximum Allowed Branch Name Length",
        "purpose": "验证最大允许长度的分支名切换操作是否成功",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "branch_name": "very_long_branch_name_that_tests_the_maximum_allowed_length_of_a_git_branch_name_in_windows_systems_extra"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Branch 'very_long_branch_name_that_tests_the_maximum_allowed_length_of_a_git_branch_name_in_windows_systems_extra' not found.\"}"
        },
        "execution_time": 0.004505157470703125,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt Git Checkout on System Critical Directory",
        "purpose": "验证工具是否安全地阻止对系统关键路径执行git checkout操作",
        "args": {
          "repo_path": "C:\\Windows",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Invalid Git repository: C:\\\\Windows\"}"
        },
        "execution_time": 0.004034519195556641,
        "is_functional_test": false
      },
      {
        "case_name": "Git Checkout with Invalid Repository Path",
        "purpose": "验证使用非法格式路径进行checkout操作时能否正确报错",
        "args": {
          "repo_path": "invalid/<path>:\\format",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: invalid/<path>:\\\\format\"}"
        },
        "execution_time": 0.0070607662200927734,
        "is_functional_test": false
      },
      {
        "case_name": "Git Checkout from Initialized Repo Subdirectory",
        "purpose": "验证从Git仓库子目录执行checkout操作是否能定位到根仓库并成功切换分支",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\converted_images",
          "branch_name": "master"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Invalid Git repository: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\converted_images\"}"
        },
        "execution_time": 0.003938198089599609,
        "is_functional_test": true
      }
    ],
    "git_diff": [
      {
        "case_name": "Basic Diff Between Branches in Initialized Repo",
        "purpose": "验证在已初始化的Git仓库中比较两个分支的基本diff功能是否正常",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "base": "master",
          "compare": "feature@#$_test"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"\"}"
        },
        "execution_time": 0.14637470245361328,
        "is_functional_test": true
      },
      {
        "case_name": "Diff Between Base and Working Directory",
        "purpose": "验证当未提供compare参数时，工具能否正确比较base分支与当前工作目录的差异",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "base": "master"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"\"}"
        },
        "execution_time": 0.13299274444580078,
        "is_functional_test": true
      },
      {
        "case_name": "Diff with Special Characters in Branch Names",
        "purpose": "验证包含特殊字符的分支名称能否被正确处理并生成diff输出",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "base": "feature@#$_test",
          "compare": "feature/test"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Git command failed: Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff feature@#$_test feature/test\\n  stderr: 'fatal: ambiguous argument 'feature/test': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.17059564590454102,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt Diff on System Critical Path",
        "purpose": "验证工具是否安全地阻止对系统关键路径执行git diff操作",
        "args": {
          "repo_path": "C:\\Windows",
          "base": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Invalid Git repository: C:\\\\Windows\"}"
        },
        "execution_time": 0.004999876022338867,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling for Invalid Repository Path",
        "purpose": "验证工具能否正确识别并拒绝无效的仓库路径输入",
        "args": {
          "repo_path": "invalid/<path>:\\format",
          "base": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: invalid/<path>:\\\\format\"}"
        },
        "execution_time": 0.008005380630493164,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling for Nonexistent Branch",
        "purpose": "验证工具能否优雅处理不存在的base分支情况",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "base": "nonexistent_branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Git command failed: Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff nonexistent_branch\\n  stderr: 'fatal: ambiguous argument 'nonexistent_branch': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.19569754600524902,
        "is_functional_test": false
      },
      {
        "case_name": "Diff at Maximum Allowed Path Length",
        "purpose": "验证最大允许长度的文件路径下git diff功能是否正常",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new",
          "base": "very_long_branch_name_that_tests_the_maximum_allowed_length_of_a_git_branch_name_in_windows_systems_extra"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new\"}"
        },
        "execution_time": 0.0068759918212890625,
        "is_functional_test": true
      },
      {
        "case_name": "Diff Between Commit Hashes",
        "purpose": "验证使用commit hash进行diff比较的功能是否正常",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "base": "4b825dc642cb6eb9a060e54bf8d69288fbee4904",
          "compare": "96779b34969a3f690b4378b8be08ccb9fdae2921"
        },
        "response": {
          "result": "{\"status\": \"success\", \"data\": \"\"}"
        },
        "execution_time": 0.17855477333068848,
        "is_functional_test": true
      }
    ],
    "git_show": [
      {
        "case_name": "Basic Git Show with Valid Commit",
        "purpose": "验证使用有效提交哈希查看详细提交信息的基本功能是否正常",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"An unexpected error occurred: Ref 'a1b2c3d4' did not resolve to an object\"}"
        },
        "execution_time": 0.21902060508728027,
        "is_functional_test": true
      },
      {
        "case_name": "Git Show with Short Commit Hash",
        "purpose": "验证工具能否正确处理短格式的提交哈希并返回完整信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "commit_hash": "a1b2c3d"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"An unexpected error occurred: Ref 'a1b2c3d' did not resolve to an object\"}"
        },
        "execution_time": 0.24170207977294922,
        "is_functional_test": true
      },
      {
        "case_name": "Git Show on Non-Git Directory",
        "purpose": "验证工具能否优雅处理非Git仓库目录上的提交查看请求",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"An unexpected error occurred: Ref 'a1b2c3d4' did not resolve to an object\"}"
        },
        "execution_time": 0.22689056396484375,
        "is_functional_test": false
      },
      {
        "case_name": "Git Show with Invalid Commit Hash",
        "purpose": "验证工具能否正确识别并拒绝无效的提交哈希输入",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "commit_hash": "invalidhash123"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"An unexpected error occurred: Ref 'invalidhash123' did not resolve to an object\"}"
        },
        "execution_time": 0.013087987899780273,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Attempt Git Show on System Critical Path",
        "purpose": "验证工具是否安全地阻止对系统关键路径执行git show操作",
        "args": {
          "repo_path": "C:\\Windows",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Invalid Git repository: C:\\\\Windows\"}"
        },
        "execution_time": 0.006997585296630859,
        "is_functional_test": false
      },
      {
        "case_name": "Git Show with Special Characters in Path",
        "purpose": "验证路径包含特殊字符时git show命令的兼容性和输出准确性",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\repo@#$_test\\.git",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\repo@#$_test\\\\.git\"}"
        },
        "execution_time": 0.00919198989868164,
        "is_functional_test": true
      },
      {
        "case_name": "Git Show at Maximum Allowed Path Length",
        "purpose": "验证最大允许长度的文件路径下git show功能是否正常",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new\\.git",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new\\\\.git\"}"
        },
        "execution_time": 0.012000322341918945,
        "is_functional_test": true
      },
      {
        "case_name": "Git Show with Empty Commit Hash",
        "purpose": "验证工具能否妥善处理空提交哈希输入的情况",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git",
          "commit_hash": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"An unexpected error occurred: Ref 'Invalid revision spec '^0' - not enough parent commits to reach '^0'' did not resolve to an object\"}"
        },
        "execution_time": 0.010999441146850586,
        "is_functional_test": false
      }
    ],
    "git_reset": [
      {
        "case_name": "Unstage Single File from Staging Area",
        "purpose": "验证能否成功从暂存区移除单个指定文件",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\app.ico"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Absolute path 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\app.ico' is not in git repository at 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\new_git_repo'\"}"
        },
        "execution_time": 0.24613094329833984,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage All Files When No File Path Provided",
        "purpose": "验证不提供具体文件路径时，能否正确取消所有文件的暂存状态",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Unstaged all files.\"}"
        },
        "execution_time": 0.23171377182006836,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Unstage File in Non-Git Repository",
        "purpose": "验证在非Git仓库目录中尝试取消暂存文件是否能正确报错",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\app.ico"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Unstaged 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\app.ico'.\"}"
        },
        "execution_time": 0.2532668113708496,
        "is_functional_test": false
      },
      {
        "case_name": "Fail to Unstage Nonexistent File",
        "purpose": "验证尝试取消暂存不存在的文件是否会返回错误信息",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Absolute path 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\nonexistent_file.txt' is not in git repository at 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\new_git_repo'\"}"
        },
        "execution_time": 0.18097496032714844,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage File with Special Characters in Path",
        "purpose": "验证包含特殊字符的文件路径能否被正确取消暂存",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\extracted_@#$.pdf"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Absolute path 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\extracted_@#$.pdf' is not in git repository at 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\new_git_repo'\"}"
        },
        "execution_time": 0.2350172996520996,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt to Unstage System Critical File",
        "purpose": "验证工具是否安全地阻止对系统关键文件执行取消暂存操作",
        "args": {
          "repo_path": "C:\\Windows",
          "file_path": "C:\\Windows\\system32\\notepad.exe"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Invalid Git repository: C:\\\\Windows\"}"
        },
        "execution_time": 0.013372659683227539,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage File at Maximum Allowed Path Length",
        "purpose": "验证最大允许长度的文件路径下取消暂存功能是否正常",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_extracted.pdf"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Repository path not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new\"}"
        },
        "execution_time": 0.016008853912353516,
        "is_functional_test": true
      },
      {
        "case_name": "Fail to Unstage File Using Invalid Path Format",
        "purpose": "验证工具能否正确识别并拒绝非法格式的文件路径输入",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_git_repo",
          "file_path": "invalid/<path>:\\format"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Unstaged 'invalid/<path>:\\\\format'.\"}"
        },
        "execution_time": 0.19639372825622559,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 96
}