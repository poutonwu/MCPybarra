{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "gpt-4o-mcp_git_repo_manager",
  "server_path": "workspace/pipeline-output-servers/gpt-4o/mcp_git_repo_manager/refined/server.py",
  "timestamp": "2025-07-12T20:37:47.123862",
  "tools": [
    {
      "name": "git_init",
      "description": "\n    Initializes a new Git repository in the specified directory.\n\n    Args:\n        directory (str): The path to the directory where the repository should be initialized. Example: '/path/to/new/repo'.\n\n    Returns:\n        str: Confirmation message indicating success or failure.\n\n    Example:\n        git_init(directory='/path/to/new/repo')\n    ",
      "args_schema": {
        "properties": {
          "directory": {
            "title": "Directory",
            "type": "string"
          }
        },
        "required": [
          "directory"
        ],
        "title": "git_initArguments",
        "type": "object"
      }
    },
    {
      "name": "git_status",
      "description": "\n    Retrieves the status of the Git repository, showing changes in the working directory and staged files.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n\n    Returns:\n        dict: A dictionary containing the status of files (e.g., staged, unstaged, modified).\n\n    Example:\n        git_status(repository_path='/path/to/repo')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          }
        },
        "required": [
          "repository_path"
        ],
        "title": "git_statusArguments",
        "type": "object"
      }
    },
    {
      "name": "git_add",
      "description": "\n    Adds specified files to the staging area.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        files (list of str): List of file paths to add to the staging area. Accepts both relative and absolute paths.\n\n    Returns:\n        str: Confirmation message indicating the files added to the staging area.\n\n    Example:\n        git_add(repository_path='/path/to/repo', files=['file1.txt', 'file2.txt'])\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "files": {
            "items": {},
            "title": "Files",
            "type": "array"
          }
        },
        "required": [
          "repository_path",
          "files"
        ],
        "title": "git_addArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_unstaged",
      "description": "\n    Displays the differences in files that are not staged for commit.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n\n    Returns:\n        str: A string showing the diff of unstaged changes.\n\n    Example:\n        git_diff_unstaged(repository_path='/path/to/repo')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          }
        },
        "required": [
          "repository_path"
        ],
        "title": "git_diff_unstagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_staged",
      "description": "\n    Displays the differences in files that are staged for commit.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n\n    Returns:\n        str: A string showing the diff of staged changes.\n\n    Example:\n        git_diff_staged(repository_path='/path/to/repo')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          }
        },
        "required": [
          "repository_path"
        ],
        "title": "git_diff_stagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff",
      "description": "\n    Compares two branches or commits and displays the differences.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        reference1 (str): The first branch or commit to compare. Example: 'HEAD'.\n        reference2 (str): The second branch or commit to compare. Example: 'HEAD~1'.\n\n    Returns:\n        str: A string showing the diff between the two references.\n\n    Example:\n        git_diff(repository_path='/path/to/repo', reference1='HEAD', reference2='HEAD~1')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "reference1": {
            "title": "Reference1",
            "type": "string"
          },
          "reference2": {
            "title": "Reference2",
            "type": "string"
          }
        },
        "required": [
          "repository_path",
          "reference1",
          "reference2"
        ],
        "title": "git_diffArguments",
        "type": "object"
      }
    },
    {
      "name": "git_commit",
      "description": "\n    Commits staged changes to the repository.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        message (str): Commit message describing the changes. Example: 'Initial commit'.\n\n    Returns:\n        str: Confirmation message with the commit hash.\n\n    Example:\n        git_commit(repository_path='/path/to/repo', message='Initial commit')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "message": {
            "title": "Message",
            "type": "string"
          }
        },
        "required": [
          "repository_path",
          "message"
        ],
        "title": "git_commitArguments",
        "type": "object"
      }
    },
    {
      "name": "git_reset",
      "description": "\n    Removes files from the staging area.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        files (list of str): List of file paths to remove from the staging area. Accepts both relative and absolute paths.\n\n    Returns:\n        str: Confirmation message indicating the files reset.\n\n    Example:\n        git_reset(repository_path='/path/to/repo', files=['file1.txt', 'file2.txt'])\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "files": {
            "items": {},
            "title": "Files",
            "type": "array"
          }
        },
        "required": [
          "repository_path",
          "files"
        ],
        "title": "git_resetArguments",
        "type": "object"
      }
    },
    {
      "name": "git_log",
      "description": "\n    Displays the commit history of the repository.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n\n    Returns:\n        list: A list of dictionaries, each containing commit details (e.g., hash, author, date, message).\n\n    Example:\n        git_log(repository_path='/path/to/repo')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          }
        },
        "required": [
          "repository_path"
        ],
        "title": "git_logArguments",
        "type": "object"
      }
    },
    {
      "name": "git_create_branch",
      "description": "\n    Creates a new branch in the repository.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        branch_name (str): Name of the new branch. Example: 'new-feature'.\n\n    Returns:\n        str: Confirmation message indicating success or failure.\n\n    Example:\n        git_create_branch(repository_path='/path/to/repo', branch_name='new-feature')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "repository_path",
          "branch_name"
        ],
        "title": "git_create_branchArguments",
        "type": "object"
      }
    },
    {
      "name": "git_checkout",
      "description": "\n    Switches the current branch in the repository.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        branch_name (str): Name of the branch to switch to. Example: 'main'.\n\n    Returns:\n        str: Confirmation message indicating the branch switched.\n\n    Example:\n        git_checkout(repository_path='/path/to/repo', branch_name='main')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "repository_path",
          "branch_name"
        ],
        "title": "git_checkoutArguments",
        "type": "object"
      }
    },
    {
      "name": "git_show",
      "description": "\n    Displays detailed information about a specific commit.\n\n    Args:\n        repository_path (str): Path to the Git repository. Example: '/path/to/repo'.\n        commit_hash (str): The hash of the commit to display. Example: 'abc123'. If None, shows info for HEAD.\n\n    Returns:\n        dict: A dictionary containing commit details (e.g., hash, author, date, message, changes).\n\n    Example:\n        git_show(repository_path='/path/to/repo', commit_hash='abc123')\n    ",
      "args_schema": {
        "properties": {
          "repository_path": {
            "title": "Repository Path",
            "type": "string"
          },
          "commit_hash": {
            "title": "Commit Hash",
            "type": "string"
          }
        },
        "required": [
          "repository_path",
          "commit_hash"
        ],
        "title": "git_showArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "git_init": [
      {
        "case_name": "Initialize Git Repository in Valid Directory",
        "purpose": "验证工具能够在指定的有效目录中成功初始化一个新的Git仓库。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"message\": \"Initialized new Git repository at: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\"}"
        },
        "execution_time": 0.1532280445098877,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Initialize Git Repository in Non-Existent Directory",
        "purpose": "验证当目标目录不存在时，工具能否正确返回错误信息。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "{\"message\": \"Initialized new Git repository at: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\nonexistent_dir\"}"
        },
        "execution_time": 0.16055846214294434,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository in Directory With Special Characters",
        "purpose": "测试工具是否能处理包含特殊字符的路径。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test@#$_dir"
        },
        "response": {
          "result": "{\"message\": \"Initialized new Git repository at: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\test@#$_dir\"}"
        },
        "execution_time": 0.18152475357055664,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository in Read-Only Directory",
        "purpose": "验证工具在只读目录中尝试初始化仓库时是否能优雅处理权限问题。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_sample.txt"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') not found due to: NotADirectoryError('[WinError 267] \\u76ee\\u5f55\\u540d\\u79f0\\u65e0\\u6548\\u3002')\\n  cmdline: git init\"}"
        },
        "execution_time": 0.009994745254516602,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository with Very Long Path",
        "purpose": "测试工具是否能处理Windows最大路径长度限制的情况。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\very_long_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows.txt"
        },
        "response": {
          "result": "{\"message\": \"Initialized new Git repository at: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\very_long_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows.txt\"}"
        },
        "execution_time": 0.18706035614013672,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt to Initialize Git Repository in System Root",
        "purpose": "确保工具不会在系统关键路径（如C:\\）中创建仓库，防止潜在的安全风险。",
        "args": {
          "directory": "C:\\"
        },
        "response": {
          "result": "{\"message\": \"Initialized new Git repository at: C:\\\\\"}"
        },
        "execution_time": 0.17378854751586914,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository Using File as Directory Argument",
        "purpose": "验证工具是否能检测到参数不是有效目录而是文件的情况，并返回错误。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') not found due to: NotADirectoryError('[WinError 267] \\u76ee\\u5f55\\u540d\\u79f0\\u65e0\\u6548\\u3002')\\n  cmdline: git init\"}"
        },
        "execution_time": 0.003998756408691406,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository in Empty Directory",
        "purpose": "验证工具是否能在一个空目录中正确初始化Git仓库。",
        "args": {
          "directory": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_file.txt"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') not found due to: NotADirectoryError('[WinError 267] \\u76ee\\u5f55\\u540d\\u79f0\\u65e0\\u6548\\u3002')\\n  cmdline: git init\"}"
        },
        "execution_time": 0.00599980354309082,
        "is_functional_test": true
      }
    ],
    "git_status": [
      {
        "case_name": "Check Git Status in Initialized Repository",
        "purpose": "验证工具能够在已初始化的Git仓库中正确获取状态信息，包括未暂存和已暂存的更改。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.19569063186645508,
        "is_functional_test": true
      },
      {
        "case_name": "Check Git Status with No Changes in Repository",
        "purpose": "验证在没有修改、新增或删除文件的情况下，工具是否能正确返回空的状态信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_file.txt"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_file.txt\"}"
        },
        "execution_time": 0.004872798919677734,
        "is_functional_test": true
      },
      {
        "case_name": "Check Git Status in Non-Existent Repository",
        "purpose": "验证当提供的路径不是一个有效的Git仓库时，工具是否能够优雅地处理错误并返回适当的错误信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.20592999458312988,
        "is_functional_test": false
      },
      {
        "case_name": "Check Git Status Using File Instead of Directory",
        "purpose": "验证工具是否能够检测到输入参数是一个文件而不是目录，并返回错误信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt\"}"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      },
      {
        "case_name": "Check Git Status in Read-Only Repository",
        "purpose": "验证工具是否能在只读目录中正确处理权限问题，并返回适当的错误信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_sample.txt"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_sample.txt\"}"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      },
      {
        "case_name": "Check Git Status with Special Characters in Path",
        "purpose": "测试工具是否能处理包含特殊字符的Git仓库路径并正确返回状态信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_@#$.txt"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special_@#$.txt\"}"
        },
        "execution_time": 0.006999492645263672,
        "is_functional_test": true
      },
      {
        "case_name": "Check Git Status in System Root Directory",
        "purpose": "确保工具不会在系统关键路径（如C:\\）中执行Git状态检查，防止潜在的安全风险。",
        "args": {
          "repository_path": "C:\\"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git diff --abbrev=40 --full-index -M --raw -z --no-color\"}"
        },
        "execution_time": 0.20427823066711426,
        "is_functional_test": false
      },
      {
        "case_name": "Check Git Status with Very Long Path",
        "purpose": "测试工具是否能处理Windows最大路径长度限制的情况并正确返回Git状态。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows.txt"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows.txt\"}"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": true
      }
    ],
    "git_add": [
      {
        "case_name": "Add Valid Files to Staging Area in Initialized Repository",
        "purpose": "验证工具能够将指定的有效文件添加到已初始化的Git仓库的暂存区。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_file.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"[WinError 2] \\u7cfb\\u7edf\\u627e\\u4e0d\\u5230\\u6307\\u5b9a\\u7684\\u6587\\u4ef6\\u3002: 'existing_file.txt'\"}"
        },
        "execution_time": 0.010721683502197266,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Add Non-Existent File to Staging Area",
        "purpose": "验证当尝试添加不存在的文件时，工具能否优雅地处理并返回错误信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"[WinError 2] \\u7cfb\\u7edf\\u627e\\u4e0d\\u5230\\u6307\\u5b9a\\u7684\\u6587\\u4ef6\\u3002: 'nonexistent_file.txt'\"}"
        },
        "execution_time": 0.009760618209838867,
        "is_functional_test": false
      },
      {
        "case_name": "Add File Using Relative Path in Initialized Repository",
        "purpose": "验证工具是否支持相对路径，并能正确将文件添加到暂存区。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "existing_file.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"[WinError 2] \\u7cfb\\u7edf\\u627e\\u4e0d\\u5230\\u6307\\u5b9a\\u7684\\u6587\\u4ef6\\u3002: 'existing_file.txt'\"}"
        },
        "execution_time": 0.016119003295898438,
        "is_functional_test": true
      },
      {
        "case_name": "Add File with Special Characters in Name",
        "purpose": "测试工具是否能处理包含特殊字符的文件名并正确添加到暂存区。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_@#$.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"[WinError 2] \\u7cfb\\u7edf\\u627e\\u4e0d\\u5230\\u6307\\u5b9a\\u7684\\u6587\\u4ef6\\u3002: 'special_@#$.txt'\"}"
        },
        "execution_time": 0.019272565841674805,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Add File to Non-Existent Git Repository",
        "purpose": "验证当目标路径不是一个有效的Git仓库时，工具能否正确返回错误信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"[WinError 2] \\u7cfb\\u7edf\\u627e\\u4e0d\\u5230\\u6307\\u5b9a\\u7684\\u6587\\u4ef6\\u3002: '..\\\\\\\\testFiles\\\\\\\\existing_file.txt'\"}"
        },
        "execution_time": 0.017326831817626953,
        "is_functional_test": false
      },
      {
        "case_name": "Add File to Read-Only Repository",
        "purpose": "验证在只读目录中执行git add操作时，工具是否能正确处理权限问题并返回适当错误。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_sample.txt",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_sample.txt\"}"
        },
        "execution_time": 0.015555858612060547,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Attempt to Add File to System Root Directory",
        "purpose": "确保工具不会在系统关键路径（如C:\\）中执行git add操作，防止潜在的安全风险。",
        "args": {
          "repository_path": "C:\\",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"path is on mount 'D:', start on mount 'C:'\"}"
        },
        "execution_time": 0.011197805404663086,
        "is_functional_test": false
      },
      {
        "case_name": "Add File with Maximum Allowed Path Length",
        "purpose": "测试工具是否能处理Windows最大路径长度限制的情况并正确添加文件到暂存区。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"[WinError 2] \\u7cfb\\u7edf\\u627e\\u4e0d\\u5230\\u6307\\u5b9a\\u7684\\u6587\\u4ef6\\u3002: 'very_long_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows.txt'\"}"
        },
        "execution_time": 0.013849020004272461,
        "is_functional_test": true
      }
    ],
    "git_diff_unstaged": [
      {
        "case_name": "Display Unstaged Changes in Valid Repository",
        "purpose": "验证工具能够正确显示已存在Git仓库中未暂存的更改。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"unstaged_diff\": []}"
        },
        "execution_time": 0.17640042304992676,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Display Unstaged Changes in Non-Existent Repository",
        "purpose": "验证当提供的路径不是一个有效的Git仓库时，工具是否能够优雅地处理错误并返回适当的错误信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "{\"unstaged_diff\": []}"
        },
        "execution_time": 0.24219083786010742,
        "is_functional_test": false
      },
      {
        "case_name": "Display Unstaged Changes Using File Instead of Directory",
        "purpose": "验证工具是否能够检测到输入参数是一个文件而不是目录，并返回错误信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt\"}"
        },
        "execution_time": 0.004995822906494141,
        "is_functional_test": false
      },
      {
        "case_name": "Display Unstaged Changes with Special Characters in Path",
        "purpose": "测试工具是否能处理包含特殊字符的Git仓库路径并正确返回未暂存更改。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_@#$.txt"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special_@#$.txt\"}"
        },
        "execution_time": 0.00400090217590332,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt to Display Unstaged Changes in System Root",
        "purpose": "确保工具不会在系统关键路径（如C:\\）中执行git diff操作，防止潜在的安全风险。",
        "args": {
          "repository_path": "C:\\"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git diff --abbrev=40 --full-index -M --raw -z --no-color\"}"
        },
        "execution_time": 0.18977713584899902,
        "is_functional_test": false
      },
      {
        "case_name": "Display Unstaged Changes in Read-Only Repository",
        "purpose": "验证工具是否能在只读目录中正确处理权限问题，并返回适当的错误信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_sample.txt"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_sample.txt\"}"
        },
        "execution_time": 0.0039980411529541016,
        "is_functional_test": false
      },
      {
        "case_name": "Display Unstaged Changes with Very Long Path",
        "purpose": "测试工具是否能处理Windows最大路径长度限制的情况并正确返回未暂存更改。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows.txt"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows.txt\"}"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": true
      },
      {
        "case_name": "Display Unstaged Changes in Empty Repository",
        "purpose": "验证工具是否能够在空仓库中正确识别并返回无未暂存更改。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_file.txt"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_file.txt\"}"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": true
      }
    ],
    "git_diff_staged": [
      {
        "case_name": "Display Staged Diff in Initialized Repository",
        "purpose": "验证工具能否正确显示已暂存的文件差异。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.00500178337097168,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Display Staged Diff in Non-Existent Repository",
        "purpose": "验证当提供的路径不是一个有效的Git仓库时，工具是否能够优雅地处理错误并返回适当的错误信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.005683422088623047,
        "is_functional_test": false
      },
      {
        "case_name": "Display Staged Diff with Special Characters in Path",
        "purpose": "测试工具是否能处理包含特殊字符的Git仓库路径并正确返回暂存差异信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test@#$_dir"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.013976573944091797,
        "is_functional_test": true
      },
      {
        "case_name": "Display Staged Diff in Read-Only Repository",
        "purpose": "验证工具是否能在只读目录中正确处理权限问题，并返回适当的错误信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_sample.txt"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_sample.txt\"}"
        },
        "execution_time": 0.005002737045288086,
        "is_functional_test": false
      },
      {
        "case_name": "Display Staged Diff with Very Long Path",
        "purpose": "测试工具是否能处理Windows最大路径长度限制的情况并正确返回暂存差异信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\very_long_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows.txt"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.007997274398803711,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt to Display Staged Diff in System Root",
        "purpose": "确保工具不会在系统关键路径（如C:\\）中执行git diff staged操作，防止潜在的安全风险。",
        "args": {
          "repository_path": "C:\\"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.0039975643157958984,
        "is_functional_test": false
      },
      {
        "case_name": "Display Staged Diff Using File Instead of Directory",
        "purpose": "验证工具是否能够检测到输入参数是一个文件而不是目录，并返回错误信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt\"}"
        },
        "execution_time": 0.0030028820037841797,
        "is_functional_test": false
      },
      {
        "case_name": "Display Staged Diff in Empty Repository",
        "purpose": "验证工具是否能在一个没有任何提交历史和暂存更改的空仓库中安全运行并返回空结果。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\empty_repo"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\empty_repo\"}"
        },
        "execution_time": 0.0059986114501953125,
        "is_functional_test": true
      }
    ],
    "git_commit": [
      {
        "case_name": "Commit Staged Changes in Valid Repository",
        "purpose": "验证工具能够在已初始化的Git仓库中成功提交暂存的更改。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Initial commit"
        },
        "response": {
          "result": "{\"message\": \"Created new commit: 96779b34969a3f690b4378b8be08ccb9fdae2921\"}"
        },
        "execution_time": 0.40537476539611816,
        "is_functional_test": true
      },
      {
        "case_name": "Commit with Empty Message",
        "purpose": "验证工具是否拒绝使用空提交信息进行提交，并返回错误。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": ""
        },
        "response": {
          "result": "{\"message\": \"Created new commit: 42862f911cfa403e879099f0a2f27ac70672c478\"}"
        },
        "execution_time": 0.34859156608581543,
        "is_functional_test": false
      },
      {
        "case_name": "Commit in Non-Existent Repository",
        "purpose": "验证当提供的仓库路径不存在时，工具是否能优雅处理错误并返回适当的错误信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "message": "Test commit"
        },
        "response": {
          "result": "{\"message\": \"Created new commit: 6b28a6301ae607f293b54e0309f901a038346742\"}"
        },
        "execution_time": 0.4114818572998047,
        "is_functional_test": false
      },
      {
        "case_name": "Commit in Read-Only Repository",
        "purpose": "验证工具在只读目录中尝试提交更改时是否能正确处理权限问题并返回错误。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_sample.txt",
          "message": "Read-only commit test"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_sample.txt\"}"
        },
        "execution_time": 0.0029935836791992188,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Special Characters in Message",
        "purpose": "测试工具是否能处理包含特殊字符的提交信息并成功提交。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Commit message with special characters: @#$_!{}[]"
        },
        "response": {
          "result": "{\"message\": \"Created new commit: cfdbb0986b22443bd152a693cbebc300f9b30810\"}"
        },
        "execution_time": 0.3351147174835205,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt to Commit in System Root",
        "purpose": "确保工具不会在系统关键路径（如C:\\）中执行Git提交操作，防止潜在的安全风险。",
        "args": {
          "repository_path": "C:\\",
          "message": "System root commit test"
        },
        "response": {
          "result": "{\"error\": \"cannot mmap an empty file\"}"
        },
        "execution_time": 0.004958629608154297,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Very Long Message",
        "purpose": "测试工具是否能处理非常长的提交信息并成功提交。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "This is a very long commit message that exceeds normal length limits and is used to test the maximum allowed input size for commit messages in this system. This is only for testing purposes."
        },
        "response": {
          "result": "{\"message\": \"Created new commit: 3175e1dc243cc7beadcc462b19f52b7a436a4d57\"}"
        },
        "execution_time": 0.35541319847106934,
        "is_functional_test": true
      },
      {
        "case_name": "Commit Using File Instead of Repository Path",
        "purpose": "验证工具是否能够检测到输入参数是一个文件而不是有效的Git仓库路径，并返回错误。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "message": "File path instead of repository test"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt\"}"
        },
        "execution_time": 0.0029997825622558594,
        "is_functional_test": false
      }
    ],
    "git_log": [
      {
        "case_name": "Get Commit History from Valid Git Repository",
        "purpose": "验证工具能否正确获取已存在Git仓库的提交历史。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "[{\"hash\": \"3175e1dc243cc7beadcc462b19f52b7a436a4d57\", \"author\": \"pouchine\", \"date\": 1752324037, \"message\": \"This is a very long commit message that exceeds normal length limits and is used to test the maximum allowed input size for commit messages in this system. This is only for testing purposes.\"}, {\"hash\": \"cfdbb0986b22443bd152a693cbebc300f9b30810\", \"author\": \"pouchine\", \"date\": 1752324037, \"message\": \"Commit message with special characters: @#$_!{}[]\"}, {\"hash\": \"42862f911cfa403e879099f0a2f27ac70672c478\", \"author\": \"pouchine\", \"date\": 1752324036, \"message\": \"\"}, {\"hash\": \"96779b34969a3f690b4378b8be08ccb9fdae2921\", \"author\": \"pouchine\", \"date\": 1752324036, \"message\": \"Initial commit\"}]"
        },
        "execution_time": 0.4616813659667969,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Get Commit History from Non-Git Directory",
        "purpose": "验证当提供的路径不是一个Git仓库时，工具是否能返回错误信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "[{\"hash\": \"6b28a6301ae607f293b54e0309f901a038346742\", \"author\": \"pouchine\", \"date\": 1752324037, \"message\": \"Test commit\"}]"
        },
        "execution_time": 0.524014949798584,
        "is_functional_test": false
      },
      {
        "case_name": "Get Commit History with Special Characters in Path",
        "purpose": "测试工具是否能处理包含特殊字符的Git仓库路径并正确获取提交历史。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test@#$_dir"
        },
        "response": {
          "result": "{\"error\": \"Reference at 'refs/heads/master' does not exist\"}"
        },
        "execution_time": 0.021694183349609375,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt to Access System Root as Git Repository",
        "purpose": "确保工具不会在系统关键路径（如C:\\）中尝试读取Git日志，防止潜在的安全风险。",
        "args": {
          "repository_path": "C:\\"
        },
        "response": {
          "result": "{\"error\": \"Reference at 'refs/heads/master' does not exist\"}"
        },
        "execution_time": 0.010164260864257812,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to Use File Instead of Directory for Git Log",
        "purpose": "验证工具是否能够检测到输入参数是一个文件而不是目录，并返回错误信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt\"}"
        },
        "execution_time": 0.00499272346496582,
        "is_functional_test": false
      },
      {
        "case_name": "Get Commit History with Very Long Path",
        "purpose": "测试工具是否能处理Windows最大路径长度限制的情况并正确获取Git提交历史。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\very_long_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows.txt"
        },
        "response": {
          "result": "{\"error\": \"Reference at 'refs/heads/master' does not exist\"}"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": true
      },
      {
        "case_name": "Check Git Log on Read-Only Repository",
        "purpose": "验证工具是否能在只读目录中正确处理权限问题，并返回适当的错误信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_sample.txt"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_sample.txt\"}"
        },
        "execution_time": 0.005166292190551758,
        "is_functional_test": false
      },
      {
        "case_name": "Get Commit History from Empty Repository",
        "purpose": "验证工具是否能正确处理一个没有提交记录的新建Git仓库的情况。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_file.txt"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_file.txt\"}"
        },
        "execution_time": 0.006008625030517578,
        "is_functional_test": true
      }
    ],
    "git_diff": [
      {
        "case_name": "Basic Diff Between Two Commits in Valid Repository",
        "purpose": "验证工具能够正确比较两个提交之间的差异，使用已初始化且包含历史记录的有效仓库路径。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "reference1": "HEAD",
          "reference2": "HEAD~1"
        },
        "response": {
          "result": "{\"diff\": []}"
        },
        "execution_time": 0.343656063079834,
        "is_functional_test": true
      },
      {
        "case_name": "Diff Between Branch and Commit in Valid Repository",
        "purpose": "验证工具可以比较分支和特定提交之间的差异，确保支持混合引用类型。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "reference1": "master",
          "reference2": "HEAD~2"
        },
        "response": {
          "result": "{\"diff\": []}"
        },
        "execution_time": 0.34165453910827637,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt to Perform Git Diff in System Root",
        "purpose": "确保工具不会在系统关键路径（如C:\\）中执行Git diff操作，防止潜在的安全风险。",
        "args": {
          "repository_path": "C:\\",
          "reference1": "HEAD",
          "reference2": "HEAD~1"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.006000518798828125,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling with Invalid Reference",
        "purpose": "测试工具在提供无效的commit或branch名称时是否能返回有意义的错误信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "reference1": "invalid_branch",
          "reference2": "HEAD~1"
        },
        "response": {
          "result": "{\"error\": \"Ref 'invalid_branch' did not resolve to an object\"}"
        },
        "execution_time": 0.007512569427490234,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling with Non-Existent Repository Path",
        "purpose": "验证当提供的仓库路径不存在时，工具能否优雅地处理并返回适当的错误信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "reference1": "HEAD",
          "reference2": "HEAD~1"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff-tree 6b28a6301ae607f293b54e0309f901a038346742 HEAD~1 -r --abbrev=40 --full-index -M --raw -z --no-color\"}"
        },
        "execution_time": 0.3508734703063965,
        "is_functional_test": false
      },
      {
        "case_name": "Diff With Special Characters in Repository Path",
        "purpose": "测试工具是否能处理包含特殊字符的仓库路径并正确显示diff结果。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test@#$_dir",
          "reference1": "HEAD",
          "reference2": "HEAD~1"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.011000394821166992,
        "is_functional_test": true
      },
      {
        "case_name": "Diff Using File Instead of Directory as Repository Path",
        "purpose": "验证工具是否能检测到输入参数是一个文件而不是目录，并返回错误信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "reference1": "HEAD",
          "reference2": "HEAD~1"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt\"}"
        },
        "execution_time": 0.006003618240356445,
        "is_functional_test": false
      },
      {
        "case_name": "Diff in Read-Only Repository",
        "purpose": "验证工具是否能在只读目录中正确处理权限问题，并返回适当的错误信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_sample.txt",
          "reference1": "HEAD",
          "reference2": "HEAD~1"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_sample.txt\"}"
        },
        "execution_time": 0.004227161407470703,
        "is_functional_test": false
      }
    ],
    "git_show": [
      {
        "case_name": "Show Details of a Specific Commit Using HEAD",
        "purpose": "验证在未指定 commit_hash 参数时，工具能否正确显示当前分支最新提交（HEAD）的详细信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "error": "ToolException: Error executing tool git_show: 1 validation error for git_showArguments\ncommit_hash\n  Field required [type=missing, input_value={'repository_path': 'D:\\\\...\\testSystem\\\\testFiles'}, input_type=dict]\n    For further information visit https://errors.pydantic.dev/2.10/v/missing"
        },
        "execution_time": 0.004458904266357422,
        "is_functional_test": true
      },
      {
        "case_name": "Show Details of a Valid Commit Hash",
        "purpose": "验证工具是否能根据提供的有效 commit_hash 显示特定提交的详细信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "abc123"
        },
        "response": {
          "result": "{\"error\": \"Ref 'abc123' did not resolve to an object\"}"
        },
        "execution_time": 0.14557886123657227,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Show Commit in Non-Existent Repository",
        "purpose": "验证当提供的 repository_path 不存在时，工具是否能优雅处理并返回适当的错误信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "commit_hash": "abc123"
        },
        "response": {
          "result": "{\"error\": \"Ref 'abc123' did not resolve to an object\"}"
        },
        "execution_time": 0.1852128505706787,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to Show Invalid Commit Hash",
        "purpose": "验证当提供的 commit_hash 无效或不存在时，工具是否能返回明确的错误信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "invalidhash123"
        },
        "response": {
          "result": "{\"error\": \"Ref 'invalidhash123' did not resolve to an object\"}"
        },
        "execution_time": 0.004003047943115234,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit with Special Characters in Repository Path",
        "purpose": "测试工具是否能处理包含特殊字符的 repository_path 并正确显示提交信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test@#$_dir",
          "commit_hash": "abc123"
        },
        "response": {
          "result": "{\"error\": \"Ref 'abc123' did not resolve to an object\"}"
        },
        "execution_time": 0.1403501033782959,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt to Show Commit in System Root Directory",
        "purpose": "确保工具不会允许在系统关键路径（如C:\\）中执行 git show 操作，防止潜在的安全风险。",
        "args": {
          "repository_path": "C:\\",
          "commit_hash": "abc123"
        },
        "response": {
          "result": "{\"error\": \"Ref 'abc123' did not resolve to an object\"}"
        },
        "execution_time": 0.23616337776184082,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit in Read-Only Repository",
        "purpose": "验证工具是否能在只读目录中正确处理权限问题，并返回适当的错误信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_sample.txt",
          "commit_hash": "abc123"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_sample.txt\"}"
        },
        "execution_time": 0.003991127014160156,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit with Very Long Path",
        "purpose": "测试工具是否能处理Windows最大路径长度限制的情况并正确显示提交详情。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows.txt",
          "commit_hash": "abc123"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows.txt\"}"
        },
        "execution_time": 0.007004976272583008,
        "is_functional_test": true
      }
    ],
    "git_create_branch": [
      {
        "case_name": "Create New Branch in Initialized Repository",
        "purpose": "验证工具能够在已初始化的Git仓库中成功创建一个新分支。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "new-feature"
        },
        "response": {
          "result": "{\"message\": \"Created new branch: new-feature\"}"
        },
        "execution_time": 0.19886493682861328,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Create Branch in Non-Existent Repository",
        "purpose": "验证当提供的仓库路径不存在时，工具是否能优雅地处理错误并返回适当的错误信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "branch_name": "new-feature"
        },
        "response": {
          "result": "{\"message\": \"Created new branch: new-feature\"}"
        },
        "execution_time": 0.17920923233032227,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Special Characters in Name",
        "purpose": "测试工具是否能处理包含特殊字符的分支名称（如'feature@#$_test'）。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature@#$_test"
        },
        "response": {
          "result": "{\"message\": \"Created new branch: feature@#$_test\"}"
        },
        "execution_time": 0.15616202354431152,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch Using Empty Branch Name",
        "purpose": "验证工具是否能检测到空的分支名并返回错误。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": ""
        },
        "response": {
          "result": "{\"error\": \"[WinError 183] \\u5f53\\u6587\\u4ef6\\u5df2\\u5b58\\u5728\\u65f6\\uff0c\\u65e0\\u6cd5\\u521b\\u5efa\\u8be5\\u6587\\u4ef6\\u3002: 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\.git\\\\\\\\refs\\\\\\\\heads\\\\\\\\.lock' -> 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\.git\\\\\\\\refs\\\\\\\\heads\\\\\\\\'\"}"
        },
        "execution_time": 0.19682002067565918,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Attempt to Create Branch in System Root Directory",
        "purpose": "确保工具不会在系统关键路径（如C:\\）中执行创建分支操作，防止潜在的安全风险。",
        "args": {
          "repository_path": "C:\\",
          "branch_name": "malicious_branch"
        },
        "response": {
          "result": "{\"error\": \"Ref 'HEAD' did not resolve to an object\"}"
        },
        "execution_time": 0.003998517990112305,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Very Long Name",
        "purpose": "测试工具是否能处理非常长的分支名称，验证其边界条件处理能力。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "very_long_branch_name_that_tests_the_maximum_allowed_length_of_a_git_branch_name_in_windows_systems"
        },
        "response": {
          "result": "{\"message\": \"Created new branch: very_long_branch_name_that_tests_the_maximum_allowed_length_of_a_git_branch_name_in_windows_systems\"}"
        },
        "execution_time": 0.18504738807678223,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch in Read-Only Repository",
        "purpose": "验证工具在只读目录中尝试创建分支时是否能优雅处理权限问题并返回适当的错误信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_sample.txt",
          "branch_name": "readonly-test"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_sample.txt\"}"
        },
        "execution_time": 0.0030031204223632812,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch Using File Instead of Repository Path",
        "purpose": "验证工具是否能够检测到输入参数是一个文件而不是有效的仓库路径，并返回错误信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "branch_name": "file-path-test"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt\"}"
        },
        "execution_time": 0.00400090217590332,
        "is_functional_test": false
      }
    ],
    "git_checkout": [
      {
        "case_name": "Switch to Existing Branch in Valid Repository",
        "purpose": "验证工具能够在有效的Git仓库中成功切换到已存在的分支。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(1)\\n  cmdline: git checkout main\\n  stderr: 'error: pathspec 'main' did not match any file(s) known to git'\"}"
        },
        "execution_time": 0.1891920566558838,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Switch to Non-Existent Branch",
        "purpose": "验证当目标分支不存在时，工具能否正确返回错误信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "nonexistent_branch"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(1)\\n  cmdline: git checkout nonexistent_branch\\n  stderr: 'error: pathspec 'nonexistent_branch' did not match any file(s) known to git'\"}"
        },
        "execution_time": 0.24121785163879395,
        "is_functional_test": false
      },
      {
        "case_name": "Switch to Branch with Special Characters in Name",
        "purpose": "测试工具是否能处理包含特殊字符的分支名。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature@#$_test"
        },
        "response": {
          "result": "{\"message\": \"Switched to branch: feature@#$_test\"}"
        },
        "execution_time": 0.21247076988220215,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt to Checkout in System Root Directory",
        "purpose": "确保工具不会在系统关键路径（如C:\\）中执行分支切换操作，防止潜在的安全风险。",
        "args": {
          "repository_path": "C:\\",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git checkout main\\n  stderr: 'fatal: detected dubious ownership in repository at 'C:/'\\n'C:/' is owned by:\\n\\tNT SERVICE/TrustedInstaller (S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)\\nbut the current user is:\\n\\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\\nTo add an exception for this directory, call:\\n\\n\\tgit config --global --add safe.directory C:/'\"}"
        },
        "execution_time": 0.1855640411376953,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout Using File Instead of Repository Path",
        "purpose": "验证工具是否能够检测到输入参数是一个文件而不是有效的Git仓库路径，并返回错误信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.docx",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.docx\"}"
        },
        "execution_time": 0.00800013542175293,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout in Read-Only Repository",
        "purpose": "验证工具是否能在只读目录中正确处理权限问题，并返回适当的错误信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_sample.txt",
          "branch_name": "main"
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_sample.txt\"}"
        },
        "execution_time": 0.0030012130737304688,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout with Very Long Branch Name",
        "purpose": "测试工具是否能处理超过常规长度限制的分支名称并正确响应。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "very_long_branch_name_that_tests_the_maximum_allowed_length_of_a_git_branch_name_in_windows_systems"
        },
        "response": {
          "result": "{\"message\": \"Switched to branch: very_long_branch_name_that_tests_the_maximum_allowed_length_of_a_git_branch_name_in_windows_systems\"}"
        },
        "execution_time": 0.17139244079589844,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout with Empty Branch Name",
        "purpose": "验证当提供空字符串作为分支名称时，工具是否能够优雅地处理错误。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": ""
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git checkout \\n  stderr: 'fatal: empty string is not a valid pathspec. please use . instead if you meant to match all paths'\"}"
        },
        "execution_time": 0.19703078269958496,
        "is_functional_test": false
      }
    ],
    "git_reset": [
      {
        "case_name": "Reset Staged Files in Valid Repository",
        "purpose": "验证工具能够成功从已初始化的Git仓库的暂存区中移除指定文件。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.docx"
          ]
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git reset --files=existing_file.docx\\n  stderr: 'error: unknown option `files=existing_file.docx'\\nusage: git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]\\n   or: git reset [-q] [<tree-ish>] [--] <pathspec>...\\n   or: git reset [-q] [--pathspec-from-file [--pathspec-file-nul]] [<tree-ish>]\\n   or: git reset --patch [<tree-ish>] [--] [<pathspec>...]\\n   or: DEPRECATED: git reset [-q] [--stdin [-z]] [<tree-ish>]\\n\\n    -q, --[no-]quiet      be quiet, only report errors\\n    --no-refresh          skip refreshing the index after reset\\n    --refresh             opposite of --no-refresh\\n    --mixed               reset HEAD and index\\n    --soft                reset only HEAD\\n    --hard                reset HEAD, index and working tree\\n    --merge               reset HEAD, index and working tree\\n    --keep                reset HEAD but keep local changes\\n    --[no-]recurse-submodules[=<reset>]\\n                          control recursive updating of submodules\\n    -p, --[no-]patch      select hunks interactively\\n    -N, --[no-]intent-to-add\\n                          record only the fact that removed paths will be added later\\n    --[no-]pathspec-from-file <file>\\n                          read pathspec from file\\n    --[no-]pathspec-file-nul\\n                          with --pathspec-from-file, pathspec elements are separated with NUL character\\n    -z                    DEPRECATED (use ...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计1673字符，剩余173字符"
        },
        "execution_time": 0.21052312850952148,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Reset Files in Non-Existent Repository",
        "purpose": "验证当提供的仓库路径不存在时，工具能否优雅地处理错误并返回适当的错误信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "files": [
            "file1.txt",
            "file2.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git reset --files=file1.txt --files=file2.txt\\n  stderr: 'error: unknown option `files=file1.txt'\\nusage: git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]\\n   or: git reset [-q] [<tree-ish>] [--] <pathspec>...\\n   or: git reset [-q] [--pathspec-from-file [--pathspec-file-nul]] [<tree-ish>]\\n   or: git reset --patch [<tree-ish>] [--] [<pathspec>...]\\n   or: DEPRECATED: git reset [-q] [--stdin [-z]] [<tree-ish>]\\n\\n    -q, --[no-]quiet      be quiet, only report errors\\n    --no-refresh          skip refreshing the index after reset\\n    --refresh             opposite of --no-refresh\\n    --mixed               reset HEAD and index\\n    --soft                reset only HEAD\\n    --hard                reset HEAD, index and working tree\\n    --merge               reset HEAD, index and working tree\\n    --keep                reset HEAD but keep local changes\\n    --[no-]recurse-submodules[=<reset>]\\n                          control recursive updating of submodules\\n    -p, --[no-]patch      select hunks interactively\\n    -N, --[no-]intent-to-add\\n                          record only the fact that removed paths will be added later\\n    --[no-]pathspec-from-file <file>\\n                          read pathspec from file\\n    --[no-]pathspec-file-nul\\n                          with --pathspec-from-file, pathspec elements are separated with NUL character\\n    -z                    DEPRECATED (use ...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计1673字符，剩余173字符"
        },
        "execution_time": 0.2164602279663086,
        "is_functional_test": false
      },
      {
        "case_name": "Reset Files with Special Characters in Path",
        "purpose": "测试工具是否能正确处理包含特殊字符的文件路径，并从暂存区中移除这些文件。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_char_metadata.docx",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\image_@#$.png"
          ]
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git reset --files=special_char_metadata.docx --files=image_@#$.png\\n  stderr: 'error: unknown option `files=special_char_metadata.docx'\\nusage: git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]\\n   or: git reset [-q] [<tree-ish>] [--] <pathspec>...\\n   or: git reset [-q] [--pathspec-from-file [--pathspec-file-nul]] [<tree-ish>]\\n   or: git reset --patch [<tree-ish>] [--] [<pathspec>...]\\n   or: DEPRECATED: git reset [-q] [--stdin [-z]] [<tree-ish>]\\n\\n    -q, --[no-]quiet      be quiet, only report errors\\n    --no-refresh          skip refreshing the index after reset\\n    --refresh             opposite of --no-refresh\\n    --mixed               reset HEAD and index\\n    --soft                reset only HEAD\\n    --hard                reset HEAD, index and working tree\\n    --merge               reset HEAD, index and working tree\\n    --keep                reset HEAD but keep local changes\\n    --[no-]recurse-submodules[=<reset>]\\n                          control recursive updating of submodules\\n    -p, --[no-]patch      select hunks interactively\\n    -N, --[no-]intent-to-add\\n                          record only the fact that removed paths will be added later\\n    --[no-]pathspec-from-file <file>\\n                          read pathspec from file\\n    --[no-]pathspec-file-nul\\n                          with --pathspec-from-file, pathspec elements are separated with NUL character\\n    ...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计1711字符，剩余211字符"
        },
        "execution_time": 0.1980116367340088,
        "is_functional_test": true
      },
      {
        "case_name": "Reset Non-Existent Files from Staging Area",
        "purpose": "验证尝试从暂存区移除不存在的文件时，工具是否能返回合理的错误信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\non_existent_file.txt"
          ]
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git reset --files=non_existent_file.txt\\n  stderr: 'error: unknown option `files=non_existent_file.txt'\\nusage: git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]\\n   or: git reset [-q] [<tree-ish>] [--] <pathspec>...\\n   or: git reset [-q] [--pathspec-from-file [--pathspec-file-nul]] [<tree-ish>]\\n   or: git reset --patch [<tree-ish>] [--] [<pathspec>...]\\n   or: DEPRECATED: git reset [-q] [--stdin [-z]] [<tree-ish>]\\n\\n    -q, --[no-]quiet      be quiet, only report errors\\n    --no-refresh          skip refreshing the index after reset\\n    --refresh             opposite of --no-refresh\\n    --mixed               reset HEAD and index\\n    --soft                reset only HEAD\\n    --hard                reset HEAD, index and working tree\\n    --merge               reset HEAD, index and working tree\\n    --keep                reset HEAD but keep local changes\\n    --[no-]recurse-submodules[=<reset>]\\n                          control recursive updating of submodules\\n    -p, --[no-]patch      select hunks interactively\\n    -N, --[no-]intent-to-add\\n                          record only the fact that removed paths will be added later\\n    --[no-]pathspec-from-file <file>\\n                          read pathspec from file\\n    --[no-]pathspec-file-nul\\n                          with --pathspec-from-file, pathspec elements are separated with NUL character\\n    -z                    DEPRECATED...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计1679字符，剩余179字符"
        },
        "execution_time": 0.22069549560546875,
        "is_functional_test": false
      },
      {
        "case_name": "Reset Files in Read-Only Repository",
        "purpose": "验证在只读目录中执行git reset操作时，工具是否能优雅地处理权限问题并返回错误信息。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_sample.txt",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.docx"
          ]
        },
        "response": {
          "result": "{\"error\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_sample.txt\"}"
        },
        "execution_time": 0.006998538970947266,
        "is_functional_test": false
      },
      {
        "case_name": "Reset File Using Absolute and Relative Paths Mixed",
        "purpose": "验证工具是否能同时接受绝对路径和相对路径作为输入参数进行reset操作。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "new_test_document.docx",
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_metadata_document.docx"
          ]
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git reset --files=new_test_document.docx --files=empty_metadata_document.docx\\n  stderr: 'error: unknown option `files=new_test_document.docx'\\nusage: git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]\\n   or: git reset [-q] [<tree-ish>] [--] <pathspec>...\\n   or: git reset [-q] [--pathspec-from-file [--pathspec-file-nul]] [<tree-ish>]\\n   or: git reset --patch [<tree-ish>] [--] [<pathspec>...]\\n   or: DEPRECATED: git reset [-q] [--stdin [-z]] [<tree-ish>]\\n\\n    -q, --[no-]quiet      be quiet, only report errors\\n    --no-refresh          skip refreshing the index after reset\\n    --refresh             opposite of --no-refresh\\n    --mixed               reset HEAD and index\\n    --soft                reset only HEAD\\n    --hard                reset HEAD, index and working tree\\n    --merge               reset HEAD, index and working tree\\n    --keep                reset HEAD but keep local changes\\n    --[no-]recurse-submodules[=<reset>]\\n                          control recursive updating of submodules\\n    -p, --[no-]patch      select hunks interactively\\n    -N, --[no-]intent-to-add\\n                          record only the fact that removed paths will be added later\\n    --[no-]pathspec-from-file <file>\\n                          read pathspec from file\\n    --[no-]pathspec-file-nul\\n                          with --pathspec-from-file, pathspec elements are separated with NUL characte...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计1718字符，剩余218字符"
        },
        "execution_time": 0.2221205234527588,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt to Reset in System Root Directory",
        "purpose": "确保工具不会在系统关键路径（如C:\\）中执行git reset命令，防止潜在的安全风险。",
        "args": {
          "repository_path": "C:\\",
          "files": [
            "important_system_file.exe"
          ]
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git reset --files=important_system_file.exe\\n  stderr: 'fatal: detected dubious ownership in repository at 'C:/'\\n'C:/' is owned by:\\n\\tNT SERVICE/TrustedInstaller (S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)\\nbut the current user is:\\n\\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\\nTo add an exception for this directory, call:\\n\\n\\tgit config --global --add safe.directory C:/'\"}"
        },
        "execution_time": 0.2364060878753662,
        "is_functional_test": false
      },
      {
        "case_name": "Reset Files with Very Long Path Names",
        "purpose": "测试工具是否能处理Windows最大路径长度限制的情况并正确执行git reset。",
        "args": {
          "repository_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "files": [
            "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new.docx"
          ]
        },
        "response": {
          "result": "{\"error\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git reset --files=very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new.docx\\n  stderr: 'error: unknown option `files=very_long_output_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_new.docx'\\nusage: git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]\\n   or: git reset [-q] [<tree-ish>] [--] <pathspec>...\\n   or: git reset [-q] [--pathspec-from-file [--pathspec-file-nul]] [<tree-ish>]\\n   or: git reset --patch [<tree-ish>] [--] [<pathspec>...]\\n   or: DEPRECATED: git reset [-q] [--stdin [-z]] [<tree-ish>]\\n\\n    -q, --[no-]quiet      be quiet, only report errors\\n    --no-refresh          skip refreshing the index after reset\\n    --refresh             opposite of --no-refresh\\n    --mixed               reset HEAD and index\\n    --soft                reset only HEAD\\n    --hard                reset HEAD, index and working tree\\n    --merge               reset HEAD, index and working tree\\n    --keep                reset HEAD but keep local changes\\n    --[no-]recurse-submodules[=<reset>]\\n                          control recursive updating of submodules\\n    -p, --[no-]patch      select hunks interactively\\n    -N, --[no-]intent-to-add\\n                          record only the fact that removed paths will be added later\\n    --[no-]pathspec-from-file <file>\\n                          read pathspec from file\\n    --[no-]pathsp...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计1833字符，剩余333字符"
        },
        "execution_time": 0.20190167427062988,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 96
}