{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "gpt-4o-mcp_text_file_manager",
  "server_path": "workspace/pipeline-output-servers/gpt-4o/mcp_text_file_manager/refined/server.py",
  "timestamp": "2025-07-12T20:34:18.040380",
  "tools": [
    {
      "name": "get_text_file_contents",
      "description": "\n    Reads the content of a text file within a specified line range and returns the file's hash for concurrency control.\n\n    Args:\n        file_path (str): Path to the text file.\n        start_line (int, optional): The starting line number (inclusive). Defaults to None.\n        end_line (int, optional): The ending line number (inclusive). Defaults to None.\n\n    Returns:\n        str: JSON string containing 'content' and 'hash'.\n\n    Example:\n        get_text_file_contents(\"example.txt\", start_line=1, end_line=5)\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "start_line": {
            "default": null,
            "title": "Start Line",
            "type": "integer"
          },
          "end_line": {
            "default": null,
            "title": "End Line",
            "type": "integer"
          }
        },
        "required": [
          "file_path"
        ],
        "title": "get_text_file_contentsArguments",
        "type": "object"
      }
    },
    {
      "name": "create_text_file",
      "description": "\n    Creates a new text file and writes the provided content to it.\n\n    Args:\n        file_path (str): Path where the new file should be created.\n        content (str): The content to write to the new file.\n\n    Returns:\n        str: Success message.\n\n    Example:\n        create_text_file(\"new_file.txt\", \"Hello, World!\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "content"
        ],
        "title": "create_text_fileArguments",
        "type": "object"
      }
    },
    {
      "name": "append_text_file_contents",
      "description": "\n    Appends content to an existing text file.\n\n    Args:\n        file_path (str): Path to the existing text file.\n        content (str): The content to append to the file.\n\n    Returns:\n        str: Success message.\n\n    Example:\n        append_text_file_contents(\"example.txt\", \"Additional text.\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "content"
        ],
        "title": "append_text_file_contentsArguments",
        "type": "object"
      }
    },
    {
      "name": "delete_text_file_contents",
      "description": "\n    Deletes content within a specified line range in a text file.\n\n    Args:\n        file_path (str): Path to the text file.\n        start_line (int): The starting line number (inclusive).\n        end_line (int): The ending line number (inclusive).\n\n    Returns:\n        str: Success message.\n\n    Example:\n        delete_text_file_contents(\"example.txt\", start_line=2, end_line=4)\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "start_line": {
            "title": "Start Line",
            "type": "integer"
          },
          "end_line": {
            "title": "End Line",
            "type": "integer"
          }
        },
        "required": [
          "file_path",
          "start_line",
          "end_line"
        ],
        "title": "delete_text_file_contentsArguments",
        "type": "object"
      }
    },
    {
      "name": "insert_text_file_contents",
      "description": "\n    Inserts content at a specified position in a text file.\n\n    Args:\n        file_path (str): Path to the text file.\n        line_number (int): The line number before which the content will be inserted.\n        content (str): The content to insert into the file.\n\n    Returns:\n        str: Success message.\n\n    Example:\n        insert_text_file_contents(\"example.txt\", line_number=3, content=\"Inserted text.\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "line_number": {
            "title": "Line Number",
            "type": "integer"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "line_number",
          "content"
        ],
        "title": "insert_text_file_contentsArguments",
        "type": "object"
      }
    },
    {
      "name": "patch_text_file_contents",
      "description": "\n    Applies precise edits to a text file based on provided changes. Validates the file hash to avoid concurrency conflicts.\n\n    Args:\n        file_path (str): Path to the text file.\n        patch_data (list of dict): A list of changes, each specifying:\n            - start_line (int): Start line for the patch.\n            - end_line (int): End line for the patch.\n            - new_content (str): New content to replace the specified range.\n        expected_hash (str): Expected SHA256 hash of the file to confirm no concurrent modifications.\n\n    Returns:\n        str: Success message if the patch is applied successfully, or error message if the hash does not match.\n\n    Example:\n        patch_text_file_contents(\n            \"example.txt\",\n            patch_data=[{\"start_line\": 2, \"end_line\": 3, \"new_content\": \"Patched content.\"}],\n            expected_hash=\"abc123\"\n        )\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "patch_data": {
            "items": {},
            "title": "Patch Data",
            "type": "array"
          },
          "expected_hash": {
            "title": "Expected Hash",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "patch_data",
          "expected_hash"
        ],
        "title": "patch_text_file_contentsArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "create_text_file": [
      {
        "case_name": "Basic Text File Creation",
        "purpose": "验证工具能够使用提供的文件路径和内容创建一个文本文件",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt",
          "content": "This is a test file content."
        },
        "response": {
          "result": "{\"message\": \"File created successfully.\"}"
        },
        "execution_time": 0.004999637603759766,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Content Handling",
        "purpose": "验证当内容为空字符串时，工具是否仍能成功创建空文件",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_file.txt",
          "content": ""
        },
        "response": {
          "result": "{\"message\": \"File created successfully.\"}"
        },
        "execution_time": 0.00500035285949707,
        "is_functional_test": true
      },
      {
        "case_name": "Special Characters in File Path",
        "purpose": "验证包含特殊字符的文件路径是否被正确处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_@#$.txt",
          "content": "Content with special path"
        },
        "response": {
          "result": "{\"message\": \"File created successfully.\"}"
        },
        "execution_time": 0.004998922348022461,
        "is_functional_test": true
      },
      {
        "case_name": "Long File Path Handling",
        "purpose": "验证超长文件路径是否能被正常处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows.txt",
          "content": "Testing long file path support"
        },
        "response": {
          "result": "{\"message\": \"File created successfully.\"}"
        },
        "execution_time": 0.0029990673065185547,
        "is_functional_test": true
      },
      {
        "case_name": "File Overwrite Test",
        "purpose": "验证已有文件能否被覆盖写入新内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "content": "Overwritten content"
        },
        "response": {
          "result": "{\"message\": \"File created successfully.\"}"
        },
        "execution_time": 0.00400090217590332,
        "is_functional_test": true
      },
      {
        "case_name": "Security - Write to Protected System Directory",
        "purpose": "测试尝试在系统受保护目录中创建文件是否会失败并安全处理",
        "args": {
          "file_path": "C:\\Windows\\system32\\malicious_test.txt",
          "content": "Test content for security check"
        },
        "response": {
          "result": "{\"error\": \"[Errno 13] Permission denied: 'C:\\\\\\\\Windows\\\\\\\\system32\\\\\\\\malicious_test.txt'\"}"
        },
        "execution_time": 0.010003328323364258,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid File Path",
        "purpose": "验证非法或不存在的文件路径是否能被正确检测并返回错误",
        "args": {
          "file_path": "invalid:/path/does/not/exist.txt",
          "content": "This should fail due to invalid path"
        },
        "response": {
          "result": "{\"error\": \"[WinError 123] \\u6587\\u4ef6\\u540d\\u3001\\u76ee\\u5f55\\u540d\\u6216\\u5377\\u6807\\u8bed\\u6cd5\\u4e0d\\u6b63\\u786e\\u3002: 'invalid:'\"}"
        },
        "execution_time": 0.004994630813598633,
        "is_functional_test": false
      },
      {
        "case_name": "Write to Read-Only File",
        "purpose": "验证是否可以向只读文件写入内容（预期应失败）",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_sample.txt",
          "content": "Trying to write to a read-only file"
        },
        "response": {
          "result": "{\"message\": \"File created successfully.\"}"
        },
        "execution_time": 0.009002208709716797,
        "is_functional_test": false
      }
    ],
    "get_text_file_contents": [
      {
        "case_name": "Basic File Content Reading",
        "purpose": "验证工具能够读取指定文本文件的基本内容并返回内容与哈希值",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt"
        },
        "response": {
          "result": "{\"content\": \"This is a test file content.\", \"hash\": \"dddb3cd3dbaf57421a0b001e3f8224c71d742133e1482ba3211f70e8f794796a\"}"
        },
        "execution_time": 0.005000591278076172,
        "is_functional_test": true
      },
      {
        "case_name": "Read Specific Line Range",
        "purpose": "验证工具能正确读取指定行范围的内容（第1到第3行）",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\performance_results.csv",
          "start_line": 1,
          "end_line": 3
        },
        "response": {
          "result": "{\"content\": \"Dataset Size,Enumeration (ms),Graham Scan (ms),Divide and Conquer (ms)\\n100,12.92,0.33,0.67\\n200,44.12,0.50,1.67\\n\", \"hash\": \"b3ada165f7e7988e1f1483fd99d79d3a5402d23302c729c1dc4b47cdb2e1e70d\"}"
        },
        "execution_time": 0.0049991607666015625,
        "is_functional_test": true
      },
      {
        "case_name": "Read With Only Start Line",
        "purpose": "验证仅提供起始行参数时，工具是否从该行开始读取至文件末尾",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "start_line": 2
        },
        "response": {
          "result": "{\"content\": \"Overwritten content\", \"hash\": \"11a75163a19deee08ce3b2c693a03f309ffebb38dffa5aa581df3a1ecec7ab67\"}"
        },
        "execution_time": 0.006762027740478516,
        "is_functional_test": true
      },
      {
        "case_name": "Read With Only End Line",
        "purpose": "验证仅提供结束行参数时，工具是否从第一行读取至指定行",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_file.txt",
          "end_line": 5
        },
        "response": {
          "result": "{\"content\": \"\", \"hash\": \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"}"
        },
        "execution_time": 0.005700826644897461,
        "is_functional_test": true
      },
      {
        "case_name": "Read Empty File",
        "purpose": "验证空文件能否被正常读取且返回空内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_file.txt"
        },
        "response": {
          "result": "{\"content\": \"\", \"hash\": \"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"}"
        },
        "execution_time": 0.007493257522583008,
        "is_functional_test": true
      },
      {
        "case_name": "Security - Read From Protected System Directory",
        "purpose": "测试尝试读取系统受保护目录中的文件是否会失败并安全处理",
        "args": {
          "file_path": "C:\\Windows\\system32\\notepad.exe"
        },
        "response": {
          "result": "{\"error\": \"'utf-8' codec can't decode byte 0x90 in position 2: invalid start byte\"}"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid File Path",
        "purpose": "验证非法或不存在的文件路径是否能被正确检测并返回错误",
        "args": {
          "file_path": "invalid:/path/does/not/exist.txt"
        },
        "response": {
          "result": "{\"error\": \"File does not exist: invalid:/path/does/not/exist.txt\"}"
        },
        "execution_time": 0.007003068923950195,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Negative Line Numbers",
        "purpose": "测试负数行号是否能被正确处理或抛出错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt",
          "start_line": -1,
          "end_line": 3
        },
        "response": {
          "result": "{\"error\": \"Indices for islice() must be None or an integer: 0 <= x <= sys.maxsize.\"}"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": false
      }
    ],
    "append_text_file_contents": [
      {
        "case_name": "Basic Text Append",
        "purpose": "验证工具能够向现有文本文件追加内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt",
          "content": "Appended text content."
        },
        "response": {
          "result": "{\"message\": \"Content appended successfully.\"}"
        },
        "execution_time": 0.0049860477447509766,
        "is_functional_test": true
      },
      {
        "case_name": "Append Empty Content",
        "purpose": "验证当追加内容为空字符串时，工具是否仍能成功操作（不改变文件内容）",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_file.txt",
          "content": ""
        },
        "response": {
          "result": "{\"message\": \"Content appended successfully.\"}"
        },
        "execution_time": 0.007001638412475586,
        "is_functional_test": true
      },
      {
        "case_name": "Append to Special Character File Path",
        "purpose": "验证包含特殊字符的文件路径是否被正确处理并支持内容追加",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_@#$.txt",
          "content": "Appending to special path"
        },
        "response": {
          "result": "{\"message\": \"Content appended successfully.\"}"
        },
        "execution_time": 0.004999399185180664,
        "is_functional_test": true
      },
      {
        "case_name": "Append to Long File Path",
        "purpose": "验证超长文件路径是否能被正常处理并进行内容追加",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows.txt",
          "content": "Appending to long file path"
        },
        "response": {
          "result": "{\"message\": \"Content appended successfully.\"}"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": true
      },
      {
        "case_name": "Security - Append to Protected System Directory",
        "purpose": "测试尝试在系统受保护目录中追加内容是否会失败并安全处理",
        "args": {
          "file_path": "C:\\Windows\\system32\\malicious_test.txt",
          "content": "Test content for security check"
        },
        "response": {
          "result": "{\"error\": \"[Errno 13] Permission denied: 'C:\\\\\\\\Windows\\\\\\\\system32\\\\\\\\malicious_test.txt'\"}"
        },
        "execution_time": 0.005993366241455078,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid File Path",
        "purpose": "验证非法或不存在的文件路径是否能被正确检测并返回错误",
        "args": {
          "file_path": "invalid:/path/does/not/exist.txt",
          "content": "This should fail due to invalid path"
        },
        "response": {
          "result": "{\"error\": \"[WinError 123] \\u6587\\u4ef6\\u540d\\u3001\\u76ee\\u5f55\\u540d\\u6216\\u5377\\u6807\\u8bed\\u6cd5\\u4e0d\\u6b63\\u786e\\u3002: 'invalid:'\"}"
        },
        "execution_time": 0.004999876022338867,
        "is_functional_test": false
      },
      {
        "case_name": "Append to Read-Only File",
        "purpose": "验证是否可以向只读文件追加内容（预期应失败）",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_sample.txt",
          "content": "Trying to append to a read-only file"
        },
        "response": {
          "result": "{\"message\": \"Content appended successfully.\"}"
        },
        "execution_time": 0.007006168365478516,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Special Unicode Characters in Content",
        "purpose": "测试特殊Unicode字符是否能正确写入文件",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unicode_append.txt",
          "content": "日本語한국어中文Español"
        },
        "response": {
          "result": "{\"message\": \"Content appended successfully.\"}"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": true
      }
    ],
    "insert_text_file_contents": [
      {
        "case_name": "Basic Text Insertion",
        "purpose": "验证工具能够在指定行号前插入文本内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt",
          "line_number": 2,
          "content": "Inserted line content."
        },
        "response": {
          "result": "{\"message\": \"Content inserted successfully.\"}"
        },
        "execution_time": 0.006133556365966797,
        "is_functional_test": true
      },
      {
        "case_name": "Insert At Beginning Of File",
        "purpose": "验证在文件开头（行号1之前）插入内容是否正常工作",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt",
          "line_number": 1,
          "content": "Header line inserted at top."
        },
        "response": {
          "result": "{\"message\": \"Content inserted successfully.\"}"
        },
        "execution_time": 0.004999876022338867,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Empty Content",
        "purpose": "验证空字符串内容能否被正确插入而不引发错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_file.txt",
          "line_number": 1,
          "content": ""
        },
        "response": {
          "result": "{\"message\": \"Content inserted successfully.\"}"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Into Nonexistent File",
        "purpose": "验证尝试向不存在的文件插入内容时是否能返回明确错误信息",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt",
          "line_number": 3,
          "content": "This should fail because file does not exist."
        },
        "response": {
          "result": "{\"error\": \"[Errno 2] No such file or directory: 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\nonexistent_file.txt'\"}"
        },
        "execution_time": 0.0030002593994140625,
        "is_functional_test": false
      },
      {
        "case_name": "Security - Insert Into Protected System Directory",
        "purpose": "测试尝试在系统受保护目录中插入内容是否会失败并安全处理",
        "args": {
          "file_path": "C:\\Windows\\system32\\malicious_insert.txt",
          "line_number": 1,
          "content": "Test content for security check"
        },
        "response": {
          "result": "{\"error\": \"[Errno 2] No such file or directory: 'C:\\\\\\\\Windows\\\\\\\\system32\\\\\\\\malicious_insert.txt'\"}"
        },
        "execution_time": 0.009001493453979492,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Line Number - Zero",
        "purpose": "验证当提供无效的零值作为行号时，工具是否能正确检测并报错",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt",
          "line_number": 0,
          "content": "This should fail due to invalid line number."
        },
        "response": {
          "result": "{\"error\": \"Invalid line number: 0. File has 3 lines.\"}"
        },
        "execution_time": 0.0030002593994140625,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters In Content",
        "purpose": "验证包含特殊字符的内容能否被正确插入到文件中",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_@#$.txt",
          "line_number": 1,
          "content": "Content with special characters: @ # $ & * ( )"
        },
        "response": {
          "result": "{\"message\": \"Content inserted successfully.\"}"
        },
        "execution_time": 0.00426483154296875,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Beyond End Of File",
        "purpose": "验证插入行号大于文件总行数时是否仍能成功追加内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "line_number": 100,
          "content": "Appending content beyond end of file."
        },
        "response": {
          "result": "{\"error\": \"Invalid line number: 100. File has 1 lines.\"}"
        },
        "execution_time": 0.007001399993896484,
        "is_functional_test": true
      }
    ],
    "delete_text_file_contents": [
      {
        "case_name": "Basic Line Range Deletion",
        "purpose": "验证工具能够成功删除指定行范围内的内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt",
          "start_line": 2,
          "end_line": 4
        },
        "response": {
          "result": "{\"error\": \"Invalid line range: start_line=2, end_line=4. File has 3 lines.\"}"
        },
        "execution_time": 0.12193655967712402,
        "is_functional_test": true
      },
      {
        "case_name": "Delete All Lines Using Same Start and End Line",
        "purpose": "验证当起始行和结束行为同一值时，仅删除该行内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\performance_results.csv",
          "start_line": 3,
          "end_line": 3
        },
        "response": {
          "result": "{\"message\": \"Specified lines deleted successfully.\"}"
        },
        "execution_time": 0.08404231071472168,
        "is_functional_test": true
      },
      {
        "case_name": "Security - Delete Content in Protected System Directory",
        "purpose": "测试尝试在系统受保护目录中删除文件内容是否会失败并安全处理",
        "args": {
          "file_path": "C:\\Windows\\system32\\notepad.exe",
          "start_line": 1,
          "end_line": 1
        },
        "response": {
          "result": "{\"error\": \"'utf-8' codec can't decode byte 0x90 in position 2: invalid start byte\"}"
        },
        "execution_time": 0.06554412841796875,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Nonexistent File",
        "purpose": "验证对不存在的文件执行删除操作是否能正确返回错误信息",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_file.txt",
          "start_line": 1,
          "end_line": 5
        },
        "response": {
          "result": "{\"error\": \"File does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_file.txt\"}"
        },
        "execution_time": 0.03700661659240723,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Delete First Line Only",
        "purpose": "验证删除第一行内容是否正常工作",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "start_line": 1,
          "end_line": 1
        },
        "response": {
          "result": "{\"message\": \"Specified lines deleted successfully.\"}"
        },
        "execution_time": 0.06883025169372559,
        "is_functional_test": true
      },
      {
        "case_name": "Boundary Condition - Delete Last Line Only",
        "purpose": "验证删除最后一行内容是否正常工作",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\performance_results.csv",
          "start_line": 3,
          "end_line": 3
        },
        "response": {
          "result": "{\"message\": \"Specified lines deleted successfully.\"}"
        },
        "execution_time": 0.10651135444641113,
        "is_functional_test": true
      },
      {
        "case_name": "Error Handling - Invalid Line Numbers (Start > End)",
        "purpose": "验证当起始行大于结束行时是否能检测到错误并返回",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt",
          "start_line": 5,
          "end_line": 2
        },
        "response": {
          "result": "{\"error\": \"Invalid line range: start_line=5, end_line=2. File has 3 lines.\"}"
        },
        "execution_time": 0.009574174880981445,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in File Path",
        "purpose": "验证包含特殊字符的文件路径是否能被正确处理并删除内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_@#$.txt",
          "start_line": 1,
          "end_line": 2
        },
        "response": {
          "result": "{\"message\": \"Specified lines deleted successfully.\"}"
        },
        "execution_time": 0.006005048751831055,
        "is_functional_test": true
      }
    ],
    "patch_text_file_contents": [
      {
        "case_name": "Basic Text File Patching",
        "purpose": "验证工具能够使用提供的补丁数据对文本文件进行基本修改",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt",
          "patch_data": [
            {
              "start_line": 1,
              "end_line": 1,
              "new_content": "This is modified content."
            }
          ],
          "expected_hash": "dddb3cd3dbaf57421a0b001e3f8224c71d742133e1482ba3211f70e8f794796a"
        },
        "response": {
          "result": "{\"error\": \"File hash mismatch. Patch aborted. Current hash: 1d7b5323e1d5b6d1d3ba1776cd20284098a85a85244b436e87e77be597b45dcd\"}"
        },
        "execution_time": 0.003747224807739258,
        "is_functional_test": true
      },
      {
        "case_name": "Multiple Patches in Single Call",
        "purpose": "验证工具能否正确处理多个连续的补丁操作",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\performance_results.csv",
          "patch_data": [
            {
              "start_line": 1,
              "end_line": 1,
              "new_content": "Modified Header Line"
            },
            {
              "start_line": 2,
              "end_line": 2,
              "new_content": "Modified Data Line 1"
            },
            {
              "start_line": 3,
              "end_line": 3,
              "new_content": "Modified Data Line 2"
            }
          ],
          "expected_hash": "b3ada165f7e7988e1f1483fd99d79d3a5402d23302c729c1dc4b47cdb2e1e70d"
        },
        "response": {
          "result": "{\"error\": \"File hash mismatch. Patch aborted. Current hash: 5e2c3763acff666bc576c762fe1fc334702846177517036759aa83b7ff32f6d7\"}"
        },
        "execution_time": 0.006000995635986328,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Patch Data Handling",
        "purpose": "验证空补丁数据是否被安全处理而不引发异常",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_file.txt",
          "patch_data": [],
          "expected_hash": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
        },
        "response": {
          "result": "{\"error\": \"File hash mismatch. Patch aborted. Current hash: dba5166ad9db9ba648c1032ebbd34dcd0d085b50023b839ef5c68ca1db93a563\"}"
        },
        "execution_time": 0.0040013790130615234,
        "is_functional_test": true
      },
      {
        "case_name": "Hash Mismatch Handling",
        "purpose": "验证当提供错误哈希值时，工具是否拒绝执行补丁操作",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "patch_data": [
            {
              "start_line": 1,
              "end_line": 1,
              "new_content": "Attempted patch with wrong hash"
            }
          ],
          "expected_hash": "wrong_hash_abc123"
        },
        "response": {
          "result": "{\"error\": \"File hash mismatch. Patch aborted. Current hash: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"}"
        },
        "execution_time": 0.005997896194458008,
        "is_functional_test": false
      },
      {
        "case_name": "Security - Attempt to Patch Non-Text File",
        "purpose": "测试尝试向非文本文件（如Word文档）打补丁是否会失败并安全处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.docx",
          "patch_data": [
            {
              "start_line": 1,
              "end_line": 1,
              "new_content": "This should fail as it's not a text file"
            }
          ],
          "expected_hash": "some_hash_value"
        },
        "response": {
          "result": "{\"error\": \"File hash mismatch. Patch aborted. Current hash: cbb95d4d4eff3b1a6864e5c6b3bec16532c9318473226db2ea7d1685a43e734d\"}"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid File Path",
        "purpose": "验证非法或不存在的文件路径是否能被正确检测并返回错误",
        "args": {
          "file_path": "invalid:/path/does/not/exist.txt",
          "patch_data": [
            {
              "start_line": 1,
              "end_line": 1,
              "new_content": "This should fail due to invalid path"
            }
          ],
          "expected_hash": "some_hash_value"
        },
        "response": {
          "result": "{\"error\": \"File does not exist: invalid:/path/does/not/exist.txt\"}"
        },
        "execution_time": 0.005000114440917969,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Negative Line Numbers",
        "purpose": "测试负数行号是否能被正确处理或抛出错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt",
          "patch_data": [
            {
              "start_line": -1,
              "end_line": 1,
              "new_content": "This should fail due to negative line number"
            }
          ],
          "expected_hash": "some_hash_value"
        },
        "response": {
          "result": "{\"error\": \"File hash mismatch. Patch aborted. Current hash: 1d7b5323e1d5b6d1d3ba1776cd20284098a85a85244b436e87e77be597b45dcd\"}"
        },
        "execution_time": 0.006948947906494141,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in New Content",
        "purpose": "验证包含特殊字符的新内容是否能被正确写入",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_@#$.txt",
          "patch_data": [
            {
              "start_line": 1,
              "end_line": 1,
              "new_content": "New content with special characters: @#$%^&*()"
            }
          ],
          "expected_hash": "some_hash_value"
        },
        "response": {
          "result": "{\"error\": \"File hash mismatch. Patch aborted. Current hash: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\"}"
        },
        "execution_time": 0.0049495697021484375,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 48
}