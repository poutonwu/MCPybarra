{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "gpt-4o-mcp_word_document_automation",
  "server_path": "workspace/pipeline-output-servers/gpt-4o/mcp_word_document_automation/refined/server.py",
  "timestamp": "2025-07-12T20:34:18.109425",
  "tools": [
    {
      "name": "create_document",
      "description": "\n    Creates a new Word document.\n\n    Returns:\n        str: A success message along with the path of the created document.\n\n    Example:\n        create_document()\n    ",
      "args_schema": {
        "properties": {},
        "title": "create_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "open_document",
      "description": "\n    Opens an existing Word document.\n\n    Args:\n        file_path (str): Path to the Word document to open.\n\n    Returns:\n        str: A success message.\n\n    Example:\n        open_document(\"example.docx\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          }
        },
        "required": [
          "file_path"
        ],
        "title": "open_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "save_document",
      "description": "\n    Saves the currently opened Word document.\n\n    Returns:\n        str: A success message.\n\n    Example:\n        save_document()\n    ",
      "args_schema": {
        "properties": {},
        "title": "save_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "save_as_document",
      "description": "\n    Saves the currently opened Word document under a new name.\n\n    Args:\n        new_file_path (str): The new file path for saving the document.\n\n    Returns:\n        str: A success message.\n\n    Example:\n        save_as_document(\"new_name.docx\")\n    ",
      "args_schema": {
        "properties": {
          "new_file_path": {
            "title": "New File Path",
            "type": "string"
          }
        },
        "required": [
          "new_file_path"
        ],
        "title": "save_as_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "create_document_copy",
      "description": "\n    Creates a copy of the currently opened Word document.\n\n    Args:\n        copy_file_path (str): The file path for the copied document.\n\n    Returns:\n        str: A success message.\n\n    Example:\n        create_document_copy(\"copy_name.docx\")\n    ",
      "args_schema": {
        "properties": {
          "copy_file_path": {
            "title": "Copy File Path",
            "type": "string"
          }
        },
        "required": [
          "copy_file_path"
        ],
        "title": "create_document_copyArguments",
        "type": "object"
      }
    },
    {
      "name": "add_paragraph",
      "description": "\n    Adds a paragraph to the document.\n\n    Args:\n        text (str): The text content of the paragraph.\n\n    Returns:\n        str: A success message.\n\n    Example:\n        add_paragraph(\"This is a paragraph.\")\n    ",
      "args_schema": {
        "properties": {
          "text": {
            "title": "Text",
            "type": "string"
          }
        },
        "required": [
          "text"
        ],
        "title": "add_paragraphArguments",
        "type": "object"
      }
    },
    {
      "name": "add_heading",
      "description": "\n    Adds a heading to the document.\n\n    Args:\n        text (str): The text content of the heading.\n        level (int): Heading level (e.g., 1 for H1, 2 for H2).\n\n    Returns:\n        str: A success message.\n\n    Example:\n        add_heading(\"Chapter 1\", 1)\n    ",
      "args_schema": {
        "properties": {
          "text": {
            "title": "Text",
            "type": "string"
          },
          "level": {
            "title": "Level",
            "type": "integer"
          }
        },
        "required": [
          "text",
          "level"
        ],
        "title": "add_headingArguments",
        "type": "object"
      }
    },
    {
      "name": "add_table",
      "description": "\n    Adds a table to the document.\n\n    Args:\n        rows (int): Number of rows in the table.\n        columns (int): Number of columns in the table.\n\n    Returns:\n        str: A success message.\n\n    Example:\n        add_table(3, 4)\n    ",
      "args_schema": {
        "properties": {
          "rows": {
            "title": "Rows",
            "type": "integer"
          },
          "columns": {
            "title": "Columns",
            "type": "integer"
          }
        },
        "required": [
          "rows",
          "columns"
        ],
        "title": "add_tableArguments",
        "type": "object"
      }
    },
    {
      "name": "add_page_break",
      "description": "\n    Adds a page break to the document.\n\n    Returns:\n        str: A success message.\n\n    Example:\n        add_page_break()\n    ",
      "args_schema": {
        "properties": {},
        "title": "add_page_breakArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "create_document": [
      {
        "case_name": "Create Document Successfully",
        "purpose": "验证create_document工具能够成功创建一个新的Word文档并返回路径。",
        "args": {},
        "response": {
          "result": "{\"message\": \"Document created successfully\", \"file_path\": \"new_document.docx\"}"
        },
        "execution_time": 0.023398160934448242,
        "is_functional_test": true
      }
    ],
    "add_paragraph": [
      {
        "case_name": "Add Paragraph Successfully",
        "purpose": "验证add_paragraph工具能够成功向文档中添加一个段落。",
        "args": {
          "text": "This is a paragraph."
        },
        "response": {
          "result": "{\"message\": \"Paragraph added successfully\"}"
        },
        "execution_time": 0.005999326705932617,
        "is_functional_test": true
      },
      {
        "case_name": "Add Empty Paragraph",
        "purpose": "验证add_paragraph工具在传入空字符串时的行为。",
        "args": {
          "text": ""
        },
        "response": {
          "result": "{\"message\": \"Paragraph added successfully\"}"
        },
        "execution_time": 0.007009029388427734,
        "is_functional_test": false
      },
      {
        "case_name": "Add Paragraph With Long Text",
        "purpose": "测试add_paragraph工具处理长文本输入的能力。",
        "args": {
          "text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur."
        },
        "response": {
          "result": "{\"message\": \"Paragraph added successfully\"}"
        },
        "execution_time": 0.00399470329284668,
        "is_functional_test": true
      },
      {
        "case_name": "Add Paragraph With Special Characters",
        "purpose": "测试add_paragraph工具是否能正确处理特殊字符。",
        "args": {
          "text": "!@#$%^&*()_+-=[]{}|;':\",./<>?`~"
        },
        "response": {
          "result": "{\"message\": \"Paragraph added successfully\"}"
        },
        "execution_time": 0.007030010223388672,
        "is_functional_test": true
      },
      {
        "case_name": "Add Paragraph With Numbers",
        "purpose": "测试add_paragraph工具是否能正确处理数字内容。",
        "args": {
          "text": "1234567890"
        },
        "response": {
          "result": "{\"message\": \"Paragraph added successfully\"}"
        },
        "execution_time": 0.0039975643157958984,
        "is_functional_test": true
      },
      {
        "case_name": "Add Paragraph With Newlines",
        "purpose": "测试add_paragraph工具是否能正确处理包含换行符的文本。",
        "args": {
          "text": "Line 1\nLine 2\nLine 3"
        },
        "response": {
          "result": "{\"message\": \"Paragraph added successfully\"}"
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": true
      },
      {
        "case_name": "Add Paragraph With Null Input",
        "purpose": "验证add_paragraph工具在参数为null时能否正确处理错误。",
        "args": {
          "text": null
        },
        "response": {
          "error": "ToolException: Error executing tool add_paragraph: 1 validation error for add_paragraphArguments\ntext\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.002999544143676758,
        "is_functional_test": false
      },
      {
        "case_name": "Add Paragraph With HTML Tags",
        "purpose": "测试add_paragraph工具是否能正确处理包含HTML标签的文本（安全性测试）。",
        "args": {
          "text": "<script>alert('test')</script>"
        },
        "response": {
          "result": "{\"message\": \"Paragraph added successfully\"}"
        },
        "execution_time": 0.004001617431640625,
        "is_functional_test": false
      }
    ],
    "add_heading": [
      {
        "case_name": "Add Heading Successfully with Level 1",
        "purpose": "验证add_heading工具能够成功向文档中添加一个H1级别的标题。",
        "args": {
          "text": "Introduction",
          "level": 1
        },
        "response": {
          "result": "{\"message\": \"Heading added successfully\"}"
        },
        "execution_time": 0.007001399993896484,
        "is_functional_test": true
      },
      {
        "case_name": "Add Heading Successfully with Level 2",
        "purpose": "验证add_heading工具能够成功向文档中添加一个H2级别的标题。",
        "args": {
          "text": "Background",
          "level": 2
        },
        "response": {
          "result": "{\"message\": \"Heading added successfully\"}"
        },
        "execution_time": 0.010514020919799805,
        "is_functional_test": true
      },
      {
        "case_name": "Add Heading With Empty Text",
        "purpose": "验证add_heading工具在传入空字符串作为标题内容时的行为。",
        "args": {
          "text": "",
          "level": 1
        },
        "response": {
          "result": "{\"message\": \"Heading added successfully\"}"
        },
        "execution_time": 0.008002519607543945,
        "is_functional_test": false
      },
      {
        "case_name": "Add Heading With Invalid Level Zero",
        "purpose": "测试add_heading工具对非法级别（0）的处理能力。",
        "args": {
          "text": "Invalid Level",
          "level": 0
        },
        "response": {
          "result": "{\"message\": \"Heading added successfully\"}"
        },
        "execution_time": 0.00800013542175293,
        "is_functional_test": false
      },
      {
        "case_name": "Add Heading With Level Greater Than 6",
        "purpose": "测试add_heading工具对超过最大允许级别的输入的处理能力。",
        "args": {
          "text": "Too High Level",
          "level": 7
        },
        "response": {
          "result": "{\"message\": \"Heading added successfully\"}"
        },
        "execution_time": 0.005507230758666992,
        "is_functional_test": false
      },
      {
        "case_name": "Add Heading With Special Characters",
        "purpose": "测试add_heading工具是否能正确处理包含特殊字符的标题文本。",
        "args": {
          "text": "!@#$%^&*()_+-=[]{}|;':\",./<>?`~",
          "level": 3
        },
        "response": {
          "result": "{\"message\": \"Heading added successfully\"}"
        },
        "execution_time": 0.009179830551147461,
        "is_functional_test": true
      },
      {
        "case_name": "Add Heading With HTML Tags",
        "purpose": "测试add_heading工具是否能正确处理包含HTML标签的标题文本（安全性测试）。",
        "args": {
          "text": "<script>alert('test')</script>",
          "level": 2
        },
        "response": {
          "result": "{\"message\": \"Heading added successfully\"}"
        },
        "execution_time": 0.004998922348022461,
        "is_functional_test": false
      },
      {
        "case_name": "Add Heading With Null Input",
        "purpose": "验证add_heading工具在参数为null时能否正确处理错误。",
        "args": {
          "text": null,
          "level": 1
        },
        "response": {
          "error": "ToolException: Error executing tool add_heading: 1 validation error for add_headingArguments\ntext\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.0029997825622558594,
        "is_functional_test": false
      }
    ],
    "add_table": [
      {
        "case_name": "Add Table Successfully With Default Size",
        "purpose": "验证add_table工具在默认参数下能够成功向文档中添加一个表格。",
        "args": {
          "rows": 2,
          "columns": 2
        },
        "response": {
          "result": "{\"message\": \"Table added successfully\"}"
        },
        "execution_time": 0.003998279571533203,
        "is_functional_test": true
      },
      {
        "case_name": "Add Table With Minimum Rows",
        "purpose": "测试add_table工具在最小行数（1行）时是否能正确添加表格。",
        "args": {
          "rows": 1,
          "columns": 3
        },
        "response": {
          "result": "{\"message\": \"Table added successfully\"}"
        },
        "execution_time": 0.004001140594482422,
        "is_functional_test": true
      },
      {
        "case_name": "Add Table With Minimum Columns",
        "purpose": "测试add_table工具在最小列数（1列）时是否能正确添加表格。",
        "args": {
          "rows": 4,
          "columns": 1
        },
        "response": {
          "result": "{\"message\": \"Table added successfully\"}"
        },
        "execution_time": 0.004999637603759766,
        "is_functional_test": true
      },
      {
        "case_name": "Add Table With Zero Rows",
        "purpose": "验证add_table工具在行数为0时是否能正确处理错误。",
        "args": {
          "rows": 0,
          "columns": 2
        },
        "response": {
          "result": "{\"message\": \"Table added successfully\"}"
        },
        "execution_time": 0.008777856826782227,
        "is_functional_test": false
      },
      {
        "case_name": "Add Table With Zero Columns",
        "purpose": "验证add_table工具在列数为0时是否能正确处理错误。",
        "args": {
          "rows": 3,
          "columns": 0
        },
        "response": {
          "result": "{\"message\": \"Table added successfully\"}"
        },
        "execution_time": 0.0050046443939208984,
        "is_functional_test": false
      },
      {
        "case_name": "Add Table With Negative Rows",
        "purpose": "测试add_table工具在行数为负值时是否能正确处理错误。",
        "args": {
          "rows": -1,
          "columns": 2
        },
        "response": {
          "result": "{\"message\": \"Table added successfully\"}"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      },
      {
        "case_name": "Add Table With Negative Columns",
        "purpose": "测试add_table工具在列数为负值时是否能正确处理错误。",
        "args": {
          "rows": 2,
          "columns": -1
        },
        "response": {
          "result": "{\"message\": \"Table added successfully\"}"
        },
        "execution_time": 0.006048440933227539,
        "is_functional_test": false
      },
      {
        "case_name": "Add Large Table",
        "purpose": "测试add_table工具处理大表格（如100行x50列）时的性能和稳定性。",
        "args": {
          "rows": 100,
          "columns": 50
        },
        "response": {
          "result": "{\"message\": \"Table added successfully\"}"
        },
        "execution_time": 0.012513160705566406,
        "is_functional_test": true
      }
    ],
    "add_page_break": [
      {
        "case_name": "Add Page Break Successfully",
        "purpose": "验证add_page_break工具能够成功在文档中添加分页符。",
        "args": {},
        "response": {
          "result": "{\"message\": \"Page break added successfully\"}"
        },
        "execution_time": 0.004003763198852539,
        "is_functional_test": true
      },
      {
        "case_name": "Add Multiple Page Breaks",
        "purpose": "测试连续调用add_page_break工具时能否多次正确插入分页符。",
        "args": {},
        "response": {
          "result": "{\"message\": \"Page break added successfully\"}"
        },
        "execution_time": 0.009006261825561523,
        "is_functional_test": true
      },
      {
        "case_name": "Add Page Break Without Document",
        "purpose": "验证在未创建文档的情况下调用add_page_break工具是否能正确返回错误信息。",
        "args": {},
        "response": {
          "result": "{\"message\": \"Page break added successfully\"}"
        },
        "execution_time": 0.0059967041015625,
        "is_functional_test": false
      },
      {
        "case_name": "Add Page Break In Empty Document",
        "purpose": "验证在空文档中添加分页符是否正常工作。",
        "args": {},
        "response": {
          "result": "{\"message\": \"Page break added successfully\"}"
        },
        "execution_time": 0.0030002593994140625,
        "is_functional_test": true
      },
      {
        "case_name": "Add Page Break After Long Paragraph",
        "purpose": "测试在长段落后添加分页符是否能正确处理。",
        "args": {},
        "response": {
          "result": "{\"message\": \"Page break added successfully\"}"
        },
        "execution_time": 0.005000114440917969,
        "is_functional_test": true
      },
      {
        "case_name": "Add Page Break With Special Characters in Document",
        "purpose": "验证文档包含特殊字符时，添加分页符是否仍能正常执行。",
        "args": {},
        "response": {
          "result": "{\"message\": \"Page break added successfully\"}"
        },
        "execution_time": 0.005999565124511719,
        "is_functional_test": true
      },
      {
        "case_name": "Add Page Break in Read-Only Document",
        "purpose": "测试在尝试向只读文档中添加分页符时的行为。",
        "args": {},
        "response": {
          "result": "{\"message\": \"Page break added successfully\"}"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": false
      },
      {
        "case_name": "Add Page Break and Verify File Persistence",
        "purpose": "验证添加分页符后保存文档，并确认文件内容是否包含分页符。",
        "args": {},
        "response": {
          "result": "{\"message\": \"Page break added successfully\"}"
        },
        "execution_time": 0.006999969482421875,
        "is_functional_test": true
      }
    ],
    "save_document": [
      {
        "case_name": "Save Document Successfully",
        "purpose": "验证save_document工具能够成功保存当前打开的Word文档。",
        "args": {},
        "response": {
          "result": "{\"message\": \"Document saved successfully\", \"file_path\": \"saved_document.docx\"}"
        },
        "execution_time": 0.015509366989135742,
        "is_functional_test": true
      },
      {
        "case_name": "Save Document Without Opened File",
        "purpose": "验证在没有打开任何文档的情况下调用save_document的行为。",
        "args": {},
        "response": {
          "result": "{\"message\": \"Document saved successfully\", \"file_path\": \"saved_document.docx\"}"
        },
        "execution_time": 0.021000385284423828,
        "is_functional_test": false
      },
      {
        "case_name": "Save Document With Special Characters In Content",
        "purpose": "测试包含特殊字符的文档能否被正确保存。",
        "args": {},
        "response": {
          "result": "{\"message\": \"Document saved successfully\", \"file_path\": \"saved_document.docx\"}"
        },
        "execution_time": 0.01799917221069336,
        "is_functional_test": true
      },
      {
        "case_name": "Save Large Document",
        "purpose": "测试save_document工具处理大型文档保存的能力。",
        "args": {},
        "response": {
          "result": "{\"message\": \"Document saved successfully\", \"file_path\": \"saved_document.docx\"}"
        },
        "execution_time": 0.019007205963134766,
        "is_functional_test": true
      },
      {
        "case_name": "Save Document With Read-Only Permissions",
        "purpose": "验证当尝试保存到只读路径时，save_document是否能正确处理错误。",
        "args": {},
        "response": {
          "result": "{\"message\": \"Document saved successfully\", \"file_path\": \"saved_document.docx\"}"
        },
        "execution_time": 0.019037246704101562,
        "is_functional_test": false
      },
      {
        "case_name": "Save Document To Restricted Path",
        "purpose": "测试save_document在目标路径受限时的安全行为（如系统目录）。",
        "args": {},
        "response": {
          "result": "{\"message\": \"Document saved successfully\", \"file_path\": \"saved_document.docx\"}"
        },
        "execution_time": 0.021032333374023438,
        "is_functional_test": false
      },
      {
        "case_name": "Save Document With Long File Name",
        "purpose": "测试保存文档时文件名长度达到系统限制的情况。",
        "args": {},
        "response": {
          "result": "{\"message\": \"Document saved successfully\", \"file_path\": \"saved_document.docx\"}"
        },
        "execution_time": 0.02299976348876953,
        "is_functional_test": true
      },
      {
        "case_name": "Save Document And Verify File Existence",
        "purpose": "验证save_document执行后生成的文件是否真实存在于预期路径。",
        "args": {},
        "response": {
          "result": "{\"message\": \"Document saved successfully\", \"file_path\": \"saved_document.docx\"}"
        },
        "execution_time": 0.02000117301940918,
        "is_functional_test": true
      }
    ],
    "save_as_document": [
      {
        "case_name": "Save Document Successfully",
        "purpose": "验证save_as_document工具能够成功将已打开的Word文档另存为新文件名。",
        "args": {
          "new_file_path": "saved_document.docx"
        },
        "response": {
          "result": "{\"message\": \"Document saved successfully\", \"file_path\": \"saved_document.docx\"}"
        },
        "execution_time": 0.016510725021362305,
        "is_functional_test": true
      },
      {
        "case_name": "Save Document With Full Path",
        "purpose": "测试使用完整路径保存文档的功能，确保工具支持绝对路径。",
        "args": {
          "new_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\saved_with_fullpath.docx"
        },
        "response": {
          "result": "{\"message\": \"Document saved successfully\", \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\saved_with_fullpath.docx\"}"
        },
        "execution_time": 0.0200042724609375,
        "is_functional_test": true
      },
      {
        "case_name": "Save Document With Special Characters In Filename",
        "purpose": "验证工具是否能处理文件名中包含特殊字符的情况。",
        "args": {
          "new_file_path": "file_@#$.docx"
        },
        "response": {
          "result": "{\"message\": \"Document saved successfully\", \"file_path\": \"file_@#$.docx\"}"
        },
        "execution_time": 0.020508289337158203,
        "is_functional_test": true
      },
      {
        "case_name": "Save Document With Null File Path",
        "purpose": "验证当new_file_path参数为null时，工具能否正确返回错误信息。",
        "args": {
          "new_file_path": null
        },
        "response": {
          "error": "ToolException: Error executing tool save_as_document: 1 validation error for save_as_documentArguments\nnew_file_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.0050013065338134766,
        "is_functional_test": false
      },
      {
        "case_name": "Save Document To Read-Only Directory",
        "purpose": "测试尝试将文档保存到只读目录时的行为，验证错误处理能力。",
        "args": {
          "new_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_sample.docx"
        },
        "response": {
          "result": "{\"message\": \"Document saved successfully\", \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\read_only_sample.docx\"}"
        },
        "execution_time": 0.021999120712280273,
        "is_functional_test": false
      },
      {
        "case_name": "Save Document With Long File Path",
        "purpose": "测试保存具有超长路径的文件，验证系统对最大路径长度的支持。",
        "args": {
          "new_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows.docx"
        },
        "response": {
          "result": "{\"message\": \"Document saved successfully\", \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows.docx\"}"
        },
        "execution_time": 0.01799941062927246,
        "is_functional_test": true
      },
      {
        "case_name": "Save Document With Invalid File Extension",
        "purpose": "验证工具在提供非.docx扩展名时是否允许保存或给出提示。",
        "args": {
          "new_file_path": "invalid_extension.txt"
        },
        "response": {
          "result": "{\"message\": \"Document saved successfully\", \"file_path\": \"invalid_extension.txt\"}"
        },
        "execution_time": 0.017999887466430664,
        "is_functional_test": false
      },
      {
        "case_name": "Save Document Over Existing File",
        "purpose": "测试覆盖已有文件时的行为，验证是否能正确处理或提示用户。",
        "args": {
          "new_file_path": "existing_file.docx"
        },
        "response": {
          "result": "{\"message\": \"Document saved successfully\", \"file_path\": \"existing_file.docx\"}"
        },
        "execution_time": 0.019516468048095703,
        "is_functional_test": false
      }
    ],
    "create_document_copy": [
      {
        "case_name": "Create Document Copy Successfully",
        "purpose": "验证create_document_copy工具能够成功复制当前打开的Word文档。",
        "args": {
          "copy_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\copy_of_new_document.docx"
        },
        "response": {
          "result": "{\"message\": \"Document copied successfully\", \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\copy_of_new_document.docx\"}"
        },
        "execution_time": 0.02200174331665039,
        "is_functional_test": true
      },
      {
        "case_name": "Create Copy With Existing File Path",
        "purpose": "测试当目标路径已存在文件时，create_document_copy是否能正确处理或覆盖。",
        "args": {
          "copy_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.docx"
        },
        "response": {
          "result": "{\"message\": \"Document copied successfully\", \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.docx\"}"
        },
        "execution_time": 0.018998384475708008,
        "is_functional_test": true
      },
      {
        "case_name": "Create Copy With Invalid File Path",
        "purpose": "验证create_document_copy在传入非法路径时能否正确处理错误。",
        "args": {
          "copy_file_path": "<invalid>path|name?.docx"
        },
        "response": {
          "result": "{\"error\": \"[Errno 22] Invalid argument: '<invalid>path|name?.docx'\"}"
        },
        "execution_time": 0.013998985290527344,
        "is_functional_test": false
      },
      {
        "case_name": "Create Copy With Null File Path",
        "purpose": "验证create_document_copy在传入null路径时能否正确处理错误。",
        "args": {
          "copy_file_path": null
        },
        "response": {
          "error": "ToolException: Error executing tool create_document_copy: 1 validation error for create_document_copyArguments\ncopy_file_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.007008075714111328,
        "is_functional_test": false
      },
      {
        "case_name": "Create Copy With Empty File Path",
        "purpose": "验证create_document_copy在传入空字符串作为路径时的行为。",
        "args": {
          "copy_file_path": ""
        },
        "response": {
          "result": "{\"error\": \"[Errno 2] No such file or directory: ''\"}"
        },
        "execution_time": 0.013509035110473633,
        "is_functional_test": false
      },
      {
        "case_name": "Create Copy With Long File Path",
        "purpose": "测试create_document_copy工具是否能处理超长文件路径。",
        "args": {
          "copy_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_copy.docx"
        },
        "response": {
          "result": "{\"message\": \"Document copied successfully\", \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_copy.docx\"}"
        },
        "execution_time": 0.021000385284423828,
        "is_functional_test": true
      },
      {
        "case_name": "Create Copy With Special Characters In File Name",
        "purpose": "测试create_document_copy是否能正确处理包含特殊字符的文件名。",
        "args": {
          "copy_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_@#$_copy.docx"
        },
        "response": {
          "result": "{\"message\": \"Document copied successfully\", \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special_@#$_copy.docx\"}"
        },
        "execution_time": 0.026999950408935547,
        "is_functional_test": true
      },
      {
        "case_name": "Create Copy Without Opened Document",
        "purpose": "验证在没有打开任何文档的情况下调用create_document_copy是否会返回合理错误。",
        "args": {
          "copy_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\unopened_document_copy.docx"
        },
        "response": {
          "result": "{\"message\": \"Document copied successfully\", \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\unopened_document_copy.docx\"}"
        },
        "execution_time": 0.026005983352661133,
        "is_functional_test": false
      }
    ],
    "open_document": [
      {
        "case_name": "Open Document Successfully",
        "purpose": "验证open_document工具能够成功打开一个已存在的Word文档。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.docx"
        },
        "response": {
          "result": "{\"message\": \"Document opened successfully\"}"
        },
        "execution_time": 0.023994922637939453,
        "is_functional_test": true
      },
      {
        "case_name": "Open Non-Existent Document",
        "purpose": "验证open_document工具在指定文件不存在时能否正确处理错误。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\non_existent.docx"
        },
        "response": {
          "result": "{\"error\": \"Package not found at 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\non_existent.docx'\"}"
        },
        "execution_time": 0.0039975643157958984,
        "is_functional_test": false
      },
      {
        "case_name": "Open Read-Only Document",
        "purpose": "验证open_document工具是否能正确处理只读Word文档。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\read_only_sample.docx"
        },
        "response": {
          "result": "{\"message\": \"Document opened successfully\"}"
        },
        "execution_time": 0.024000883102416992,
        "is_functional_test": true
      },
      {
        "case_name": "Open Document With Special Characters In Path",
        "purpose": "验证open_document工具是否能正确处理包含特殊字符的文件路径。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_@#$_copy.docx"
        },
        "response": {
          "result": "{\"message\": \"Document opened successfully\"}"
        },
        "execution_time": 0.025519847869873047,
        "is_functional_test": true
      },
      {
        "case_name": "Open Document With Very Long File Path",
        "purpose": "测试open_document工具是否能处理超出常规长度限制的文件路径。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_filename_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows.docx"
        },
        "response": {
          "result": "{\"message\": \"Document opened successfully\"}"
        },
        "execution_time": 0.026015043258666992,
        "is_functional_test": true
      },
      {
        "case_name": "Open Invalid File Type",
        "purpose": "验证open_document工具在尝试打开非Word文档时能否正确处理错误。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
        },
        "response": {
          "result": "{\"error\": \"Package not found at 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt'\"}"
        },
        "execution_time": 0.00499725341796875,
        "is_functional_test": false
      },
      {
        "case_name": "Open Empty File",
        "purpose": "验证open_document工具是否能处理空文件的情况。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_file.txt"
        },
        "response": {
          "result": "{\"error\": \"Package not found at 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_file.txt'\"}"
        },
        "execution_time": 0.005002021789550781,
        "is_functional_test": true
      },
      {
        "case_name": "Open Document With Null File Path",
        "purpose": "验证open_document工具在file_path参数为null时能否正确处理错误。",
        "args": {
          "file_path": null
        },
        "response": {
          "error": "ToolException: Error executing tool open_document: 1 validation error for open_documentArguments\nfile_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.006001710891723633,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 65
}