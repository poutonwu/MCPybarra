{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "qwen-plus-mcp_mongodb_manager",
  "server_path": "workspace/pipeline-output-servers/qwen-plus/mcp_mongodb_manager/refined/server.py",
  "timestamp": "2025-07-12T20:48:19.153016",
  "tools": [
    {
      "name": "mcp_list_databases",
      "description": "\n    Lists all available databases in the connected MongoDB instance.\n\n    Returns:\n        A JSON string containing a list of database names.\n\n    Example:\n        mcp_list_databases()\n        # Returns: {\"databases\": [\"admin\", \"config\", \"local\"]}\n    ",
      "args_schema": {
        "properties": {},
        "title": "mcp_list_databasesArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_list_collections",
      "description": "\n    Lists all collections within a specified database.\n\n    Args:\n        database_name: Name of the database.\n\n    Returns:\n        A JSON string containing a list of collection names within the specified database.\n\n    Example:\n        mcp_list_collections(database_name=\"test_db\")\n        # Returns: {\"collections\": [\"users\", \"products\"]}\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          }
        },
        "required": [
          "database_name"
        ],
        "title": "mcp_list_collectionsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_insert_document",
      "description": "\n    Inserts a new document into a specified database and collection.\n\n    Args:\n        database_name: Name of the database.\n        collection_name: Name of the collection.\n        document: Document data to insert.\n\n    Returns:\n        A JSON string containing the inserted document ID.\n\n    Example:\n        mcp_insert_document(database_name=\"test_db\", collection_name=\"users\", document={\"name\": \"John Doe\", \"age\": 30})\n        # Returns: {\"inserted_id\": \"60c72b2f54b9a1b4e3d5f8a1\"}\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "document": {
            "title": "Document",
            "type": "object"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "document"
        ],
        "title": "mcp_insert_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_find_documents",
      "description": "\n    Finds documents matching a query within a specified database and collection.\n\n    Args:\n        database_name: Name of the database.\n        collection_name: Name of the collection.\n        query: Query criteria.\n        projection: Fields to include or exclude (optional).\n        limit: Maximum number of results to return (optional).\n\n    Returns:\n        A JSON string containing a list of matching documents.\n\n    Example:\n        mcp_find_documents(database_name=\"test_db\", collection_name=\"users\", query={\"age\": {\"$gt\": 25}}, projection={\"name\": 1}, limit=10)\n        # Returns: {\"documents\": [{\"_id\": \"60c72b2f54b9a1b4e3d5f8a1\", \"name\": \"John Doe\"}]}\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "title": "Query",
            "type": "object"
          },
          "projection": {
            "default": null,
            "title": "Projection",
            "type": "object"
          },
          "limit": {
            "default": null,
            "title": "Limit",
            "type": "integer"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "query"
        ],
        "title": "mcp_find_documentsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_update_document",
      "description": "\n    Updates one or more documents within a specified database and collection.\n\n    Args:\n        database_name: Name of the database.\n        collection_name: Name of the collection.\n        filter_query: Criteria to select documents for update.\n        update_query: Update operations.\n        multi: If True, updates all matching documents; otherwise, only the first match.\n\n    Returns:\n        A JSON string containing the number of documents updated.\n\n    Example:\n        mcp_update_document(database_name=\"test_db\", collection_name=\"users\", filter_query={\"name\": \"John Doe\"}, update_query={\"age\": 31}, multi=True)\n        # Returns: {\"updated_count\": 5}\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "filter_query": {
            "title": "Filter Query",
            "type": "object"
          },
          "update_query": {
            "title": "Update Query",
            "type": "object"
          },
          "multi": {
            "default": false,
            "title": "Multi",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "filter_query",
          "update_query"
        ],
        "title": "mcp_update_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_delete_document",
      "description": "\n    Deletes one or more documents within a specified database and collection.\n\n    Args:\n        database_name: Name of the database.\n        collection_name: Name of the collection.\n        filter_query: Criteria to select documents for deletion.\n        multi: If True, deletes all matching documents; otherwise, only the first match.\n\n    Returns:\n        A JSON string containing the number of documents deleted.\n\n    Example:\n        mcp_delete_document(database_name=\"test_db\", collection_name=\"users\", filter_query={\"name\": \"John Doe\"}, multi=True)\n        # Returns: {\"deleted_count\": 5}\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "filter_query": {
            "title": "Filter Query",
            "type": "object"
          },
          "multi": {
            "default": false,
            "title": "Multi",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "filter_query"
        ],
        "title": "mcp_delete_documentArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "mcp_list_databases": [
      {
        "case_name": "Basic Database Listing",
        "purpose": "验证工具能够成功列出MongoDB实例中所有数据库的基本功能。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]}"
        },
        "execution_time": 0.022315025329589844,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Database Response Handling",
        "purpose": "验证当MongoDB实例中没有可用数据库时，工具是否能正确处理空响应。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]}"
        },
        "execution_time": 0.011535406112670898,
        "is_functional_test": true
      },
      {
        "case_name": "Security Check - Unauthorized Access Attempt",
        "purpose": "模拟未授权访问MongoDB实例的情况，确保工具不会暴露敏感信息或崩溃。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]}"
        },
        "execution_time": 0.004365444183349609,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - MongoDB Connection Failure",
        "purpose": "测试当MongoDB连接失败时，工具是否能优雅地返回错误信息而不是崩溃。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]}"
        },
        "execution_time": 0.004427433013916016,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Large Number of Databases",
        "purpose": "测试工具在MongoDB实例中存在大量数据库时的处理能力。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]}"
        },
        "execution_time": 0.007544755935668945,
        "is_functional_test": true
      },
      {
        "case_name": "Error Handling - Invalid JSON Response",
        "purpose": "模拟MongoDB返回非标准JSON格式的响应，验证工具的容错能力。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]}"
        },
        "execution_time": 0.004450321197509766,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Database Names",
        "purpose": "验证工具是否能够正确处理包含特殊字符的数据库名称。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]}"
        },
        "execution_time": 0.005679130554199219,
        "is_functional_test": true
      },
      {
        "case_name": "Functional Test with Minimal Expected Output",
        "purpose": "确认工具在最小预期输出下仍能正常工作，如仅返回默认数据库（如admin, local）。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]}"
        },
        "execution_time": 0.007096529006958008,
        "is_functional_test": true
      }
    ],
    "mcp_list_collections": [
      {
        "case_name": "Basic Collection Listing",
        "purpose": "验证工具能够成功列出指定数据库中的所有集合。",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "{\"collections\": [\"a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\", \"new_collection\", \"test_collection\", \"empty_docs\", \"invalid/collection*name\", \"user_profiles\", \"long_key_collection\", \"test_collection'; DROP COLLECTION test_collection;--\", \"large_data\", \"special_chars_collection\", \"binary_data_collection\", \"nonexistent_collection\", \"a_very_long_collection_name_that_exceeds_normal_limits_and_might_cause_issues\", \"users\"]}"
        },
        "execution_time": 0.005349874496459961,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Database Handling",
        "purpose": "验证当指定的数据库中没有集合时，工具是否能正确返回空列表。",
        "args": {
          "database_name": "empty_db"
        },
        "response": {
          "result": "{\"error\": \"Database 'empty_db' does not exist.\"}"
        },
        "execution_time": 0.005006551742553711,
        "is_functional_test": true
      },
      {
        "case_name": "Database with Special Characters",
        "purpose": "验证工具能否正确处理包含特殊字符的数据库名称并列出其集合。",
        "args": {
          "database_name": "db@#_测试"
        },
        "response": {
          "result": "{\"collections\": [\"test_collection\", \"users\"]}"
        },
        "execution_time": 0.00792551040649414,
        "is_functional_test": true
      },
      {
        "case_name": "Security Check - Unauthorized Access Attempt",
        "purpose": "模拟未授权访问数据库的情况，确保工具不会暴露敏感信息或崩溃。",
        "args": {
          "database_name": "admin"
        },
        "response": {
          "result": "{\"collections\": [\"system.version\", \"system_logs\"]}"
        },
        "execution_time": 0.0038826465606689453,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Non-Existent Database",
        "purpose": "测试当指定的数据库不存在时，工具是否能优雅地返回空集合列表而不是抛出错误。",
        "args": {
          "database_name": "does_not_exist_db"
        },
        "response": {
          "result": "{\"collections\": [\"new_collection\", \"test_collection\"]}"
        },
        "execution_time": 0.008399486541748047,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid Database Name",
        "purpose": "验证工具是否能正确拒绝非法数据库名称输入并返回明确的错误提示。",
        "args": {
          "database_name": ""
        },
        "response": {
          "result": "{\"error\": \"Database '' does not exist.\"}"
        },
        "execution_time": 0.003489255905151367,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Large Number of Collections",
        "purpose": "测试工具在数据库中存在大量集合时的性能和稳定性。",
        "args": {
          "database_name": "large_db"
        },
        "response": {
          "result": "{\"collections\": [\"large_collection\"]}"
        },
        "execution_time": 0.006369113922119141,
        "is_functional_test": true
      },
      {
        "case_name": "Functional Test with Minimal Expected Output",
        "purpose": "确认工具在最小预期输出下仍能正常工作，如数据库仅包含默认系统集合。",
        "args": {
          "database_name": "local"
        },
        "response": {
          "result": "{\"collections\": [\"startup_log\"]}"
        },
        "execution_time": 0.006789684295654297,
        "is_functional_test": true
      }
    ],
    "mcp_insert_document": [
      {
        "case_name": "Basic Document Insertion",
        "purpose": "验证工具能够成功插入一个简单的文档到指定数据库和集合中。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "document": {
            "name": "John Doe",
            "age": 30
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"687259cf14abe8d498d2f508\"}"
        },
        "execution_time": 0.007002115249633789,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document with Empty Fields",
        "purpose": "验证工具能否正确处理包含空字段的文档插入。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "document": {
            "name": "",
            "age": null
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"687259cf14abe8d498d2f509\"}"
        },
        "execution_time": 0.009766817092895508,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document into Non-Existent Collection",
        "purpose": "测试当目标集合不存在时，工具是否能自动创建集合并插入文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "document": {
            "key": "value"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"687259cf14abe8d498d2f50a\"}"
        },
        "execution_time": 0.00600886344909668,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document into Non-Existent Database",
        "purpose": "测试当目标数据库不存在时，工具是否能自动创建数据库并插入文档。",
        "args": {
          "database_name": "new_test_db",
          "collection_name": "new_collection",
          "document": {
            "data": "test_data"
          }
        },
        "response": {
          "result": "{\"error\": \"Database 'new_test_db' does not exist.\"}"
        },
        "execution_time": 0.009007692337036133,
        "is_functional_test": true
      },
      {
        "case_name": "Security Check - Unauthorized Insert Attempt",
        "purpose": "模拟未授权用户尝试插入文档，确保工具不会执行非法操作或暴露敏感信息。",
        "args": {
          "database_name": "admin",
          "collection_name": "system.users",
          "document": {
            "username": "hacker",
            "password": "123456"
          }
        },
        "response": {
          "result": "{\"error\": \"Collection 'system.users' does not exist in database 'admin'.\"}"
        },
        "execution_time": 0.004999876022338867,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid Database Name",
        "purpose": "验证工具是否能正确拒绝非法数据库名称输入并返回明确的错误提示。",
        "args": {
          "database_name": "",
          "collection_name": "users",
          "document": {
            "name": "John Doe"
          }
        },
        "response": {
          "result": "{\"error\": \"Database '' does not exist.\"}"
        },
        "execution_time": 0.00600123405456543,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid Collection Name",
        "purpose": "验证工具是否能正确拒绝非法集合名称输入并返回明确的错误提示。",
        "args": {
          "database_name": "test_db",
          "collection_name": "invalid/collection*name",
          "document": {
            "name": "John Doe"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"687259cf14abe8d498d2f50b\"}"
        },
        "execution_time": 0.006009340286254883,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Large Document Insertion",
        "purpose": "测试工具在插入非常大的文档时的性能和稳定性。",
        "args": {
          "database_name": "large_db",
          "collection_name": "large_collection",
          "document": {
            "data": "a_very_long_string_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"687259cf14abe8d498d2f50c\"}"
        },
        "execution_time": 0.011000394821166992,
        "is_functional_test": true
      }
    ],
    "mcp_find_documents": [
      {
        "case_name": "Basic Document Search",
        "purpose": "验证工具能够使用基本查询参数从指定数据库和集合中检索文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "age": {
              "$gt": 25
            }
          }
        },
        "response": {
          "result": "{\"documents\": [{\"_id\": \"687259cf14abe8d498d2f508\", \"name\": \"John Doe\", \"age\": 30}]}"
        },
        "execution_time": 0.005206108093261719,
        "is_functional_test": true
      },
      {
        "case_name": "Document Search with Projection",
        "purpose": "验证工具能够使用投影参数仅返回指定字段。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "age": {
              "$gt": 25
            }
          },
          "projection": {
            "name": 1
          }
        },
        "response": {
          "result": "{\"documents\": [{\"_id\": \"687259cf14abe8d498d2f508\", \"name\": \"John Doe\"}]}"
        },
        "execution_time": 0.012223005294799805,
        "is_functional_test": true
      },
      {
        "case_name": "Document Search with Limit",
        "purpose": "验证工具能够限制返回的文档数量。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "age": {
              "$gt": 25
            }
          },
          "limit": 5
        },
        "response": {
          "result": "{\"documents\": [{\"_id\": \"687259cf14abe8d498d2f508\", \"name\": \"John Doe\", \"age\": 30}]}"
        },
        "execution_time": 0.01799917221069336,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Query Returns All Documents",
        "purpose": "验证当查询为空时，工具是否能正确返回集合中的所有文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {}
        },
        "response": {
          "result": "{\"documents\": [{\"_id\": \"687259cf14abe8d498d2f508\", \"name\": \"John Doe\", \"age\": 30}, {\"_id\": \"687259cf14abe8d498d2f509\", \"name\": \"\", \"age\": null}]}"
        },
        "execution_time": 0.010036706924438477,
        "is_functional_test": true
      },
      {
        "case_name": "Security Check - Unauthorized Access to Sensitive Collection",
        "purpose": "模拟未授权访问包含敏感信息的集合，确保工具不会暴露数据或崩溃。",
        "args": {
          "database_name": "admin",
          "collection_name": "system_logs",
          "query": {}
        },
        "response": {
          "result": "{\"documents\": [{\"_id\": \"6861720f0b5192adc85d4e9f\", \"log\": \"security check attempt\", \"log_entry\": \"Unauthorized access attempt detected and updated.\"}, {\"_id\": \"686270e9bbc02d17137de7ec\", \"log_entry\": \"updated_security_violation\"}, {\"_id\": \"686280078c2cfd880794eaf7\", \"log\": \"\\u5b89\\u5168\\u6d4b\\u8bd5\\u63d2\\u5165\\u65e5\\u5fd7\"}, {\"_id\": \"68629b068d98df9ef5445682\", \"log\": \"modified_attempt\"}, {\"_id\": \"68710cc7ea7bb66ae341045e\", \"log\": \"security test\"}, {\"_id\": \"6872568f010f0405cf7c54a1\", \"log\": \"unauthorized attempt\"}]}"
        },
        "execution_time": 0.007656574249267578,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid Database Name",
        "purpose": "测试工具在提供无效数据库名称时是否能正确处理错误。",
        "args": {
          "database_name": "",
          "collection_name": "users",
          "query": {
            "age": {
              "$gt": 25
            }
          }
        },
        "response": {
          "result": "{\"error\": \"Database '' does not exist.\"}"
        },
        "execution_time": 0.013036966323852539,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Non-Existent Collection",
        "purpose": "测试工具在指定集合不存在时是否能优雅地处理错误。",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "query": {
            "age": {
              "$gt": 25
            }
          }
        },
        "response": {
          "result": "{\"documents\": []}"
        },
        "execution_time": 0.010001420974731445,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Special Characters in Collection Name",
        "purpose": "测试工具是否能正确处理包含特殊字符的集合名称。",
        "args": {
          "database_name": "db@#_测试",
          "collection_name": "invalid/collection*name",
          "query": {}
        },
        "response": {
          "result": "{\"error\": \"Collection 'invalid/collection*name' does not exist in database 'db@#_\\u6d4b\\u8bd5'.\"}"
        },
        "execution_time": 0.012693405151367188,
        "is_functional_test": true
      }
    ],
    "mcp_update_document": [
      {
        "case_name": "Basic Document Update",
        "purpose": "验证工具能够成功更新匹配的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "name": "John Doe"
          },
          "update_query": {
            "age": 31
          },
          "multi": true
        },
        "response": {
          "result": "{\"updated_count\": 1}"
        },
        "execution_time": 0.005998849868774414,
        "is_functional_test": true
      },
      {
        "case_name": "Single Document Update with Default Multi",
        "purpose": "验证当 multi 参数未提供时，默认只更新第一个匹配文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "status": "inactive"
          },
          "update_query": {
            "status": "active"
          }
        },
        "response": {
          "result": "{\"updated_count\": 0}"
        },
        "execution_time": 0.007516622543334961,
        "is_functional_test": true
      },
      {
        "case_name": "Update with Special Characters in Field Names",
        "purpose": "验证工具是否能正确处理包含特殊字符的字段名进行更新操作。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "user@#_id": "12345"
          },
          "update_query": {
            "user@#_id": "67890"
          },
          "multi": false
        },
        "response": {
          "result": "{\"updated_count\": 0}"
        },
        "execution_time": 0.006285905838012695,
        "is_functional_test": true
      },
      {
        "case_name": "Security Check - Unauthorized Update Attempt",
        "purpose": "模拟未授权访问数据库的情况，确保工具不会执行非法更新操作或暴露敏感信息。",
        "args": {
          "database_name": "admin",
          "collection_name": "system_logs",
          "filter_query": {
            "level": "error"
          },
          "update_query": {
            "handled": true
          },
          "multi": true
        },
        "response": {
          "result": "{\"updated_count\": 0}"
        },
        "execution_time": 0.008523702621459961,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Non-Existent Database",
        "purpose": "测试当指定的数据库不存在时，工具是否能优雅地返回错误而不是崩溃。",
        "args": {
          "database_name": "does_not_exist_db",
          "collection_name": "users",
          "filter_query": {
            "name": "John Doe"
          },
          "update_query": {
            "age": 31
          },
          "multi": true
        },
        "response": {
          "result": "{\"error\": \"Collection 'users' does not exist in database 'does_not_exist_db'.\"}"
        },
        "execution_time": 0.003507852554321289,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid Collection Name",
        "purpose": "验证工具是否能正确拒绝非法集合名称输入并返回明确的错误提示。",
        "args": {
          "database_name": "test_db",
          "collection_name": "invalid/collection*name",
          "filter_query": {
            "name": "John Doe"
          },
          "update_query": {
            "age": 31
          },
          "multi": false
        },
        "response": {
          "result": "{\"updated_count\": 1}"
        },
        "execution_time": 0.0050013065338134766,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Large Update Query",
        "purpose": "测试工具在更新操作中使用超长字段名和大量更新数据时的表现。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "name": "John Doe"
          },
          "update_query": {
            "a_very_long_field_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it": "large_data_value"
          },
          "multi": true
        },
        "response": {
          "result": "{\"updated_count\": 1}"
        },
        "execution_time": 0.010001897811889648,
        "is_functional_test": true
      },
      {
        "case_name": "Functional Test with Minimal Update",
        "purpose": "确认工具在最小预期更新场景下仍能正常工作，如仅更新一个字段。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "name": "Alice"
          },
          "update_query": {
            "age": 28
          },
          "multi": false
        },
        "response": {
          "result": "{\"updated_count\": 0}"
        },
        "execution_time": 0.006311655044555664,
        "is_functional_test": true
      }
    ],
    "mcp_delete_document": [
      {
        "case_name": "Basic Document Deletion",
        "purpose": "验证工具能够成功删除匹配查询条件的单个文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "name": "John Doe"
          },
          "multi": false
        },
        "response": {
          "result": "{\"deleted_count\": 1}"
        },
        "execution_time": 0.008000373840332031,
        "is_functional_test": true
      },
      {
        "case_name": "Multi Document Deletion",
        "purpose": "验证工具在 multi=True 情况下能够删除所有匹配查询条件的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "status": "inactive"
          },
          "multi": true
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.008999109268188477,
        "is_functional_test": true
      },
      {
        "case_name": "Delete with Special Characters in Database Name",
        "purpose": "验证工具是否能正确处理包含特殊字符的数据库名称并删除文档。",
        "args": {
          "database_name": "db@#_测试",
          "collection_name": "test_collection",
          "filter_query": {
            "key": "value"
          },
          "multi": false
        },
        "response": {
          "result": "{\"deleted_count\": 1}"
        },
        "execution_time": 0.0060024261474609375,
        "is_functional_test": true
      },
      {
        "case_name": "Delete from Non-Existent Collection",
        "purpose": "验证当指定集合不存在时，工具是否能优雅地返回结果而不是崩溃。",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "filter_query": {
            "any_key": "any_value"
          },
          "multi": false
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.008996963500976562,
        "is_functional_test": false
      },
      {
        "case_name": "Security Check - Unauthorized Access Attempt",
        "purpose": "模拟未授权访问数据库/集合的情况，确保工具不会暴露敏感信息或执行删除操作。",
        "args": {
          "database_name": "admin",
          "collection_name": "system.version",
          "filter_query": {
            "version": "1.0"
          },
          "multi": true
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.008007287979125977,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid Filter Query",
        "purpose": "验证工具是否能正确拒绝非法 filter_query 输入并返回明确错误提示。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": "invalid_filter",
          "multi": false
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_delete_document: 1 validation error for mcp_delete_documentArguments\nfilter_query\n  Input should be a valid dictionary [type=dict_type, input_value='invalid_filter', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/dict_type"
        },
        "execution_time": 0.006996631622314453,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Delete All Documents",
        "purpose": "测试工具在 filter_query 匹配所有文档且 multi=True 时的表现。",
        "args": {
          "database_name": "test_db",
          "collection_name": "large_data",
          "filter_query": {},
          "multi": true
        },
        "response": {
          "result": "{\"deleted_count\": 1}"
        },
        "execution_time": 0.007999420166015625,
        "is_functional_test": true
      },
      {
        "case_name": "Delete with Long Field Names",
        "purpose": "验证工具是否能正确处理包含超长字段名的 filter_query。",
        "args": {
          "database_name": "test_db",
          "collection_name": "long_key_collection",
          "filter_query": {
            "a_very_long_field_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it": "test_value"
          },
          "multi": false
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.010001659393310547,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 48
}