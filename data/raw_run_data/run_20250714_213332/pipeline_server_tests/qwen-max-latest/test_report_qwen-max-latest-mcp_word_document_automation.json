{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "qwen-max-latest-mcp_word_document_automation",
  "server_path": "workspace/pipeline-output-servers/qwen-max-latest/mcp_word_document_automation/refined/server.py",
  "timestamp": "2025-07-14T21:33:35.303776",
  "tools": [
    {
      "name": "create_document",
      "description": "Create a new Word document.\n\n    Returns:\n        A string indicating the successful creation of the document.\n    ",
      "args_schema": {
        "properties": {},
        "title": "create_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "open_document",
      "description": "Open an existing Word document.\n\n    Args:\n        file_path: (str) The path to the file to open.\n\n    Returns:\n        A string indicating the successful opening of the document.\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          }
        },
        "required": [
          "file_path"
        ],
        "title": "open_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "save_document",
      "description": "Save the current Word document.\n\n    Returns:\n        A string indicating the successful saving of the document.\n    ",
      "args_schema": {
        "properties": {},
        "title": "save_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "save_as_document",
      "description": "Save the current Word document with a new name or location.\n\n    Args:\n        file_path: (str) The new file path to save the document.\n\n    Returns:\n        A string indicating the successful saving of the document.\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          }
        },
        "required": [
          "file_path"
        ],
        "title": "save_as_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "create_document_copy",
      "description": "Create a copy of the current Word document.\n\n    Args:\n        file_path: (str) The destination path for the document copy.\n\n    Returns:\n        A string indicating the successful creation of the document copy.\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          }
        },
        "required": [
          "file_path"
        ],
        "title": "create_document_copyArguments",
        "type": "object"
      }
    },
    {
      "name": "add_paragraph",
      "description": "Add a paragraph of text to the document.\n\n    Args:\n        text: (str) The text content of the paragraph.\n\n    Returns:\n        A string indicating the successful addition of the paragraph.\n    ",
      "args_schema": {
        "properties": {
          "text": {
            "title": "Text",
            "type": "string"
          }
        },
        "required": [
          "text"
        ],
        "title": "add_paragraphArguments",
        "type": "object"
      }
    },
    {
      "name": "add_heading",
      "description": "Add a heading to the document.\n\n    Args:\n        text: (str) The text of the heading.\n        level: (int) The level of the heading (e.g., 1 for main heading).\n\n    Returns:\n        A string indicating the successful addition of the heading.\n    ",
      "args_schema": {
        "properties": {
          "text": {
            "title": "Text",
            "type": "string"
          },
          "level": {
            "title": "Level",
            "type": "integer"
          }
        },
        "required": [
          "text",
          "level"
        ],
        "title": "add_headingArguments",
        "type": "object"
      }
    },
    {
      "name": "add_table",
      "description": "Add a table to the document.\n\n    Args:\n        rows: (int) Number of rows in the table.\n        cols: (int) Number of columns in the table.\n\n    Returns:\n        A string indicating the successful addition of the table.\n    ",
      "args_schema": {
        "properties": {
          "rows": {
            "title": "Rows",
            "type": "integer"
          },
          "cols": {
            "title": "Cols",
            "type": "integer"
          }
        },
        "required": [
          "rows",
          "cols"
        ],
        "title": "add_tableArguments",
        "type": "object"
      }
    },
    {
      "name": "add_page_break",
      "description": "Add a page break to the document.\n\n    Returns:\n        A string indicating the successful addition of the page break.\n    ",
      "args_schema": {
        "properties": {},
        "title": "add_page_breakArguments",
        "type": "object"
      }
    },
    {
      "name": "get_document_info",
      "description": "Retrieve information about the current document.\n\n    Returns:\n        A dictionary containing various pieces of document information.\n    ",
      "args_schema": {
        "properties": {},
        "title": "get_document_infoArguments",
        "type": "object"
      }
    },
    {
      "name": "search_text",
      "description": "Search for specific text within the document.\n\n    Args:\n        search_string: (str) The text to search for.\n\n    Returns:\n        A list of positions where the text is found.\n    ",
      "args_schema": {
        "properties": {
          "search_string": {
            "title": "Search String",
            "type": "string"
          }
        },
        "required": [
          "search_string"
        ],
        "title": "search_textArguments",
        "type": "object"
      }
    },
    {
      "name": "find_and_replace",
      "description": "Find and replace specific text within the document.\n\n    Args:\n        find_string: (str) The text to find.\n        replace_string: (str) The text to replace it with.\n\n    Returns:\n        A string indicating the number of replacements made.\n    ",
      "args_schema": {
        "properties": {
          "find_string": {
            "title": "Find String",
            "type": "string"
          },
          "replace_string": {
            "title": "Replace String",
            "type": "string"
          }
        },
        "required": [
          "find_string",
          "replace_string"
        ],
        "title": "find_and_replaceArguments",
        "type": "object"
      }
    },
    {
      "name": "delete_paragraph",
      "description": "Delete a specified paragraph from the document.\n\n    Args:\n        paragraph_index: (int) The index of the paragraph to delete.\n\n    Returns:\n        A string indicating the successful deletion of the paragraph.\n    ",
      "args_schema": {
        "properties": {
          "paragraph_index": {
            "title": "Paragraph Index",
            "type": "integer"
          }
        },
        "required": [
          "paragraph_index"
        ],
        "title": "delete_paragraphArguments",
        "type": "object"
      }
    },
    {
      "name": "delete_text",
      "description": "Delete all instances of a specified text from the document.\n\n    Args:\n        text: (str) The text to delete.\n\n    Returns:\n        A string indicating the number of deletions made.\n    ",
      "args_schema": {
        "properties": {
          "text": {
            "title": "Text",
            "type": "string"
          }
        },
        "required": [
          "text"
        ],
        "title": "delete_textArguments",
        "type": "object"
      }
    },
    {
      "name": "add_table_row",
      "description": "Add a row to a specified table in the document.\n\n    Args:\n        table_index: (int) The index of the table to add a row to.\n\n    Returns:\n        A string indicating the successful addition of the row.\n    ",
      "args_schema": {
        "properties": {
          "table_index": {
            "title": "Table Index",
            "type": "integer"
          }
        },
        "required": [
          "table_index"
        ],
        "title": "add_table_rowArguments",
        "type": "object"
      }
    },
    {
      "name": "delete_table_row",
      "description": "Delete a specified row from a table in the document.\n\n    Args:\n        table_index: (int) The index of the table.\n        row_index: (int) The index of the row to delete.\n\n    Returns:\n        A string indicating the successful deletion of the row.\n    ",
      "args_schema": {
        "properties": {
          "table_index": {
            "title": "Table Index",
            "type": "integer"
          },
          "row_index": {
            "title": "Row Index",
            "type": "integer"
          }
        },
        "required": [
          "table_index",
          "row_index"
        ],
        "title": "delete_table_rowArguments",
        "type": "object"
      }
    },
    {
      "name": "edit_table_cell",
      "description": "Edit the content of a specified cell in a table.\n\n    Args:\n        table_index: (int) The index of the table.\n        row_index: (int) The index of the row.\n        col_index: (int) The index of the column.\n        new_content: (str) The new content for the cell.\n\n    Returns:\n        A string indicating the successful editing of the cell.\n    ",
      "args_schema": {
        "properties": {
          "table_index": {
            "title": "Table Index",
            "type": "integer"
          },
          "row_index": {
            "title": "Row Index",
            "type": "integer"
          },
          "col_index": {
            "title": "Col Index",
            "type": "integer"
          },
          "new_content": {
            "title": "New Content",
            "type": "string"
          }
        },
        "required": [
          "table_index",
          "row_index",
          "col_index",
          "new_content"
        ],
        "title": "edit_table_cellArguments",
        "type": "object"
      }
    },
    {
      "name": "merge_table_cells",
      "description": "Merge specified cells in a table.\n\n    Args:\n        table_index: (int) The index of the table.\n        start_row: (int) The starting row index for the merge.\n        end_row: (int) The ending row index for the merge.\n        start_col: (int) The starting column index for the merge.\n        end_col: (int) The ending column index for the merge.\n\n    Returns:\n        A string indicating the successful merging of cells.\n    ",
      "args_schema": {
        "properties": {
          "table_index": {
            "title": "Table Index",
            "type": "integer"
          },
          "start_row": {
            "title": "Start Row",
            "type": "integer"
          },
          "end_row": {
            "title": "End Row",
            "type": "integer"
          },
          "start_col": {
            "title": "Start Col",
            "type": "integer"
          },
          "end_col": {
            "title": "End Col",
            "type": "integer"
          }
        },
        "required": [
          "table_index",
          "start_row",
          "end_row",
          "start_col",
          "end_col"
        ],
        "title": "merge_table_cellsArguments",
        "type": "object"
      }
    },
    {
      "name": "split_table",
      "description": "Split a table into two tables at a specified row.\n\n    Args:\n        table_index: (int) The index of the table to split.\n        row_index: (int) The row index at which to split the table.\n\n    Returns:\n        A string indicating the successful splitting of the table.\n    ",
      "args_schema": {
        "properties": {
          "table_index": {
            "title": "Table Index",
            "type": "integer"
          },
          "row_index": {
            "title": "Row Index",
            "type": "integer"
          }
        },
        "required": [
          "table_index",
          "row_index"
        ],
        "title": "split_tableArguments",
        "type": "object"
      }
    },
    {
      "name": "set_page_margins",
      "description": "Set the margins for the pages in the document.\n\n    Args:\n        top: (float) The top margin size in inches.\n        right: (float) The right margin size in inches.\n        bottom: (float) The bottom margin size in inches.\n        left: (float) The left margin size in inches.\n\n    Returns:\n        A string indicating the successful setting of page margins.\n    ",
      "args_schema": {
        "properties": {
          "top": {
            "title": "Top",
            "type": "number"
          },
          "right": {
            "title": "Right",
            "type": "number"
          },
          "bottom": {
            "title": "Bottom",
            "type": "number"
          },
          "left": {
            "title": "Left",
            "type": "number"
          }
        },
        "required": [
          "top",
          "right",
          "bottom",
          "left"
        ],
        "title": "set_page_marginsArguments",
        "type": "object"
      }
    },
    {
      "name": "replace_section",
      "description": "Replace the content of a section based on the heading.\n\n    Args:\n        heading: (str) The heading of the section to replace.\n        new_content: (str) The new content for the section.\n\n    Returns:\n        A string indicating the successful replacement of the section.\n    ",
      "args_schema": {
        "properties": {
          "heading": {
            "title": "Heading",
            "type": "string"
          },
          "new_content": {
            "title": "New Content",
            "type": "string"
          }
        },
        "required": [
          "heading",
          "new_content"
        ],
        "title": "replace_sectionArguments",
        "type": "object"
      }
    },
    {
      "name": "edit_section_by_keyword",
      "description": "Edit the content of a section based on a keyword.\n\n    Args:\n        keyword: (str) The keyword to locate the section.\n        new_content: (str) The new content for the section.\n\n    Returns:\n        A string indicating the successful editing of the section.\n    ",
      "args_schema": {
        "properties": {
          "keyword": {
            "title": "Keyword",
            "type": "string"
          },
          "new_content": {
            "title": "New Content",
            "type": "string"
          }
        },
        "required": [
          "keyword",
          "new_content"
        ],
        "title": "edit_section_by_keywordArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "create_document": [
      {
        "case_name": "Create Document Successfully",
        "purpose": "验证工具可以成功创建一个新的Word文档，使用默认参数进行基本功能测试。",
        "args": {},
        "response": {
          "result": "{\"message\": \"Document created successfully.\"}"
        },
        "execution_time": 0.01909041404724121,
        "is_functional_test": true
      }
    ],
    "add_paragraph": [
      {
        "case_name": "Add Paragraph Successfully",
        "purpose": "验证工具可以成功向文档中添加一个段落，使用基本文本参数进行正向测试。",
        "args": {
          "text": "This is a new paragraph added to the document."
        },
        "response": {
          "result": "{\"message\": \"Paragraph added successfully.\"}"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": true
      },
      {
        "case_name": "Add Empty Paragraph",
        "purpose": "验证当传入空字符串时，工具是否能正确处理并添加一个空段落。",
        "args": {
          "text": ""
        },
        "response": {
          "result": "{\"message\": \"Paragraph added successfully.\"}"
        },
        "execution_time": 0.006002902984619141,
        "is_functional_test": true
      },
      {
        "case_name": "Add Paragraph With Special Characters",
        "purpose": "验证工具能够正确处理包含特殊字符的段落文本。",
        "args": {
          "text": "This paragraph contains special characters: !@#$%^&*()_+{}|:\"<>?~"
        },
        "response": {
          "result": "{\"message\": \"Paragraph added successfully.\"}"
        },
        "execution_time": 0.0060002803802490234,
        "is_functional_test": true
      },
      {
        "case_name": "Add Paragraph With Null Input",
        "purpose": "验证工具在接收到null值时能否正确抛出错误或拒绝执行。",
        "args": {
          "text": null
        },
        "response": {
          "error": "ToolException: Error executing tool add_paragraph: 1 validation error for add_paragraphArguments\ntext\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.005000114440917969,
        "is_functional_test": false
      },
      {
        "case_name": "Add Paragraph With Non-String Input",
        "purpose": "验证工具是否对非字符串类型的输入进行正确处理。",
        "args": {
          "text": 123456
        },
        "response": {
          "error": "ToolException: Error executing tool add_paragraph: 1 validation error for add_paragraphArguments\ntext\n  Input should be a valid string [type=string_type, input_value=123456, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.015002012252807617,
        "is_functional_test": false
      },
      {
        "case_name": "Add Paragraph With Script Injection Attempt",
        "purpose": "验证工具是否安全地处理可能的脚本注入尝试。",
        "args": {
          "text": "<script>alert('XSS');</script>"
        },
        "response": {
          "result": "{\"message\": \"Paragraph added successfully.\"}"
        },
        "execution_time": 0.007996320724487305,
        "is_functional_test": false
      }
    ],
    "add_heading": [
      {
        "case_name": "Add Heading Successfully with Default Level",
        "purpose": "验证工具可以成功向文档中添加一个标题，使用默认级别1进行基本功能测试。",
        "args": {
          "text": "Main Document Heading",
          "level": 1
        },
        "response": {
          "result": "{\"message\": \"Heading added successfully.\"}"
        },
        "execution_time": 0.006998777389526367,
        "is_functional_test": true
      },
      {
        "case_name": "Add Heading with Minimum Allowed Level",
        "purpose": "验证工具是否支持最小允许的标题级别（例如 level=1）。",
        "args": {
          "text": "Minimum Level Heading",
          "level": 1
        },
        "response": {
          "result": "{\"message\": \"Heading added successfully.\"}"
        },
        "execution_time": 0.00899958610534668,
        "is_functional_test": true
      },
      {
        "case_name": "Add Heading with Maximum Allowed Level",
        "purpose": "验证工具是否支持最大允许的标题级别（例如 level=6）。",
        "args": {
          "text": "Maximum Level Heading",
          "level": 6
        },
        "response": {
          "result": "{\"message\": \"Heading added successfully.\"}"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": true
      },
      {
        "case_name": "Add Heading with Special Characters",
        "purpose": "验证工具能够正确处理包含特殊字符的标题文本。",
        "args": {
          "text": "Heading with special chars: !@#$%^&*()_+{}|:\"<>?~",
          "level": 2
        },
        "response": {
          "result": "{\"message\": \"Heading added successfully.\"}"
        },
        "execution_time": 0.008997917175292969,
        "is_functional_test": true
      },
      {
        "case_name": "Add Heading with Empty Text",
        "purpose": "验证当传入空字符串作为标题文本时，工具是否仍能成功添加空标题。",
        "args": {
          "text": "",
          "level": 3
        },
        "response": {
          "result": "{\"message\": \"Heading added successfully.\"}"
        },
        "execution_time": 0.0049991607666015625,
        "is_functional_test": true
      },
      {
        "case_name": "Add Heading with Script Injection Attempt",
        "purpose": "验证工具是否安全地处理可能的脚本注入尝试。",
        "args": {
          "text": "<script>alert('XSS')</script>",
          "level": 4
        },
        "response": {
          "result": "{\"message\": \"Heading added successfully.\"}"
        },
        "execution_time": 0.01000213623046875,
        "is_functional_test": false
      },
      {
        "case_name": "Add Heading with Invalid Level Type",
        "purpose": "验证工具在接收到非整数类型的level参数时能否正确抛出错误。",
        "args": {
          "text": "Invalid Level Type Heading",
          "level": "two"
        },
        "response": {
          "error": "ToolException: Error executing tool add_heading: 1 validation error for add_headingArguments\nlevel\n  Input should be a valid integer, unable to parse string as an integer [type=int_parsing, input_value='two', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/int_parsing"
        },
        "execution_time": 0.003997802734375,
        "is_functional_test": false
      },
      {
        "case_name": "Add Heading with Out of Range Level",
        "purpose": "验证工具在接收到超出范围的level值（如0或7）时是否能正确处理。",
        "args": {
          "text": "Out of Range Level Heading",
          "level": 7
        },
        "response": {
          "result": "{\"message\": \"Heading added successfully.\"}"
        },
        "execution_time": 0.007001161575317383,
        "is_functional_test": false
      }
    ],
    "add_table": [
      {
        "case_name": "Add Table With Default Dimensions",
        "purpose": "验证工具可以使用默认参数成功向文档中添加一个表格，确保基本功能正常。",
        "args": {
          "rows": 2,
          "cols": 2
        },
        "response": {
          "result": "{\"message\": \"Table added successfully.\"}"
        },
        "execution_time": 0.003998756408691406,
        "is_functional_test": true
      },
      {
        "case_name": "Add Table With Minimum Rows And Columns",
        "purpose": "验证工具在最小边界值（1行1列）下是否能正确添加表格。",
        "args": {
          "rows": 1,
          "cols": 1
        },
        "response": {
          "result": "{\"message\": \"Table added successfully.\"}"
        },
        "execution_time": 0.0040013790130615234,
        "is_functional_test": true
      },
      {
        "case_name": "Add Large Table",
        "purpose": "验证工具是否能处理较大尺寸的表格（如100行100列），测试性能和稳定性。",
        "args": {
          "rows": 100,
          "cols": 100
        },
        "response": {
          "result": "{\"message\": \"Table added successfully.\"}"
        },
        "execution_time": 0.022999286651611328,
        "is_functional_test": true
      },
      {
        "case_name": "Add Table With Zero Rows",
        "purpose": "验证当传入零作为行数时，工具是否能正确抛出错误。",
        "args": {
          "rows": 0,
          "cols": 3
        },
        "response": {
          "result": "{\"error\": \"Rows and columns must be greater than zero.\"}"
        },
        "execution_time": 0.007998466491699219,
        "is_functional_test": false
      },
      {
        "case_name": "Add Table With Zero Columns",
        "purpose": "验证当传入零作为列数时，工具是否能正确抛出错误。",
        "args": {
          "rows": 3,
          "cols": 0
        },
        "response": {
          "result": "{\"error\": \"Rows and columns must be greater than zero.\"}"
        },
        "execution_time": 0.0030002593994140625,
        "is_functional_test": false
      },
      {
        "case_name": "Add Table With Negative Rows",
        "purpose": "验证工具是否拒绝负数作为行数输入。",
        "args": {
          "rows": -5,
          "cols": 4
        },
        "response": {
          "result": "{\"error\": \"Rows and columns must be greater than zero.\"}"
        },
        "execution_time": 0.003438234329223633,
        "is_functional_test": false
      },
      {
        "case_name": "Add Table With Negative Columns",
        "purpose": "验证工具是否拒绝负数作为列数输入。",
        "args": {
          "rows": 4,
          "cols": -5
        },
        "response": {
          "result": "{\"error\": \"Rows and columns must be greater than zero.\"}"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": false
      },
      {
        "case_name": "Add Table With Non-Integer Input",
        "purpose": "验证工具是否拒绝非整型数值作为行或列的输入。",
        "args": {
          "rows": "five",
          "cols": 3
        },
        "response": {
          "error": "ToolException: Error executing tool add_table: 1 validation error for add_tableArguments\nrows\n  Input should be a valid integer, unable to parse string as an integer [type=int_parsing, input_value='five', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/int_parsing"
        },
        "execution_time": 0.003000974655151367,
        "is_functional_test": false
      }
    ],
    "add_page_break": [
      {
        "case_name": "Add Page Break Successfully",
        "purpose": "验证工具可以成功向文档中添加一个分页符，使用默认参数进行基本功能测试。",
        "args": {},
        "response": {
          "result": "{\"message\": \"Page break added successfully.\"}"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": true
      },
      {
        "case_name": "Add Multiple Page Breaks Sequentially",
        "purpose": "验证连续多次调用该工具时，能够正确地在文档中插入多个分页符。",
        "args": {},
        "response": {
          "result": "{\"message\": \"Page break added successfully.\"}"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": true
      },
      {
        "case_name": "Add Page Break After Paragraph",
        "purpose": "验证在添加段落之后添加分页符，确保两者顺序正确且无冲突。",
        "args": {},
        "response": {
          "result": "{\"message\": \"Page break added successfully.\"}"
        },
        "execution_time": 0.007999420166015625,
        "is_functional_test": true
      },
      {
        "case_name": "Add Page Break Without Document",
        "purpose": "验证在没有创建文档的情况下尝试添加分页符是否会失败并返回合理错误信息。",
        "args": {},
        "response": {
          "result": "{\"message\": \"Page break added successfully.\"}"
        },
        "execution_time": 0.0030002593994140625,
        "is_functional_test": false
      },
      {
        "case_name": "Add Page Break With Special Section Formatting",
        "purpose": "验证在存在特殊节格式的文档中添加分页符是否能保持格式完整性。",
        "args": {},
        "response": {
          "result": "{\"message\": \"Page break added successfully.\"}"
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": true
      },
      {
        "case_name": "Add Page Break In Read-Only Document",
        "purpose": "验证在只读文档中尝试添加分页符是否会失败并返回相应错误。",
        "args": {},
        "response": {
          "result": "{\"message\": \"Page break added successfully.\"}"
        },
        "execution_time": 0.004000663757324219,
        "is_functional_test": false
      },
      {
        "case_name": "Add Page Break And Verify File Structure",
        "purpose": "验证添加分页符后保存文档，并检查文件结构是否完整、未损坏。",
        "args": {},
        "response": {
          "result": "{\"message\": \"Page break added successfully.\"}"
        },
        "execution_time": 0.0059969425201416016,
        "is_functional_test": true
      },
      {
        "case_name": "Add Page Break Under High Load Simulation",
        "purpose": "验证在高负载模拟环境下（如大量并发操作）添加分页符是否仍能正常执行。",
        "args": {},
        "response": {
          "result": "{\"message\": \"Page break added successfully.\"}"
        },
        "execution_time": 0.0029990673065185547,
        "is_functional_test": false
      }
    ],
    "save_document": [
      {
        "case_name": "Save Document Successfully",
        "purpose": "验证工具可以成功保存当前创建的Word文档，使用默认参数进行基本功能测试。",
        "args": {},
        "response": {
          "result": "{\"message\": \"Document saved successfully.\"}"
        },
        "execution_time": 0.02803969383239746,
        "is_functional_test": true
      },
      {
        "case_name": "Save Document After Adding Paragraph",
        "purpose": "验证在添加段落之后调用save_document是否能正确保存文档内容。",
        "args": {},
        "response": {
          "result": "{\"message\": \"Document saved successfully.\"}"
        },
        "execution_time": 0.02151179313659668,
        "is_functional_test": true
      },
      {
        "case_name": "Save Document With Special Characters In Content",
        "purpose": "验证包含特殊字符的文档内容能否被正常保存。",
        "args": {},
        "response": {
          "result": "{\"message\": \"Document saved successfully.\"}"
        },
        "execution_time": 0.026000499725341797,
        "is_functional_test": true
      },
      {
        "case_name": "Save Document Without Creating First",
        "purpose": "验证在未创建文档的情况下尝试保存是否会失败并返回合理错误信息。",
        "args": {},
        "response": {
          "result": "{\"message\": \"Document saved successfully.\"}"
        },
        "execution_time": 0.021999359130859375,
        "is_functional_test": false
      },
      {
        "case_name": "Save Document In Read-Only Directory",
        "purpose": "验证工具在尝试将文档保存到只读目录时是否能正确处理权限不足的情况。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\locked_file.docx"
        },
        "response": {
          "result": "{\"message\": \"Document saved successfully.\"}"
        },
        "execution_time": 0.027003765106201172,
        "is_functional_test": false
      },
      {
        "case_name": "Save Document With Script Injection Attempt In Content",
        "purpose": "验证在文档中包含脚本注入尝试的内容时，保存操作是否安全地处理。",
        "args": {},
        "response": {
          "result": "{\"message\": \"Document saved successfully.\"}"
        },
        "execution_time": 0.022999048233032227,
        "is_functional_test": false
      },
      {
        "case_name": "Save Large Document Stress Test",
        "purpose": "验证工具在处理大型文档（模拟）保存时的性能和稳定性。",
        "args": {},
        "response": {
          "result": "{\"message\": \"Document saved successfully.\"}"
        },
        "execution_time": 0.0260007381439209,
        "is_functional_test": true
      },
      {
        "case_name": "Save Document With Long File Name",
        "purpose": "验证工具是否支持保存带有超长文件名的文档。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_file_name_that_exceeds_normal_limit_and_tests_boundary_conditions.docx"
        },
        "response": {
          "result": "{\"message\": \"Document saved successfully.\"}"
        },
        "execution_time": 0.02400040626525879,
        "is_functional_test": true
      }
    ],
    "open_document": [
      {
        "case_name": "Open Document Successfully",
        "purpose": "验证工具可以成功打开一个已存在的Word文档，使用有效文件路径进行基本功能测试。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\re2.doc"
        },
        "response": {
          "result": "{\"message\": \"Document opened successfully from D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\re2.doc.\"}"
        },
        "execution_time": 0.027638673782348633,
        "is_functional_test": true
      },
      {
        "case_name": "Open Locked Document",
        "purpose": "验证工具是否能够处理被锁定或只读的Word文档并返回适当的错误信息。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\locked_file.docx"
        },
        "response": {
          "result": "{\"message\": \"Document opened successfully from D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\\\\locked_file.docx.\"}"
        },
        "execution_time": 0.026528358459472656,
        "is_functional_test": false
      },
      {
        "case_name": "Open Non-Existent File",
        "purpose": "验证当尝试打开一个不存在的文件时，工具是否能正确处理错误情况。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent.docx"
        },
        "response": {
          "result": "{\"error\": \"File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent.docx\"}"
        },
        "execution_time": 0.007513523101806641,
        "is_functional_test": false
      },
      {
        "case_name": "Open File With Invalid Extension",
        "purpose": "验证工具是否拒绝尝试打开非Word文档（如PDF）并返回适当错误。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\paper1.pdf"
        },
        "response": {
          "result": "{\"error\": \"Package not found at 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\paper1.pdf'\"}"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      },
      {
        "case_name": "Open Document With Special Characters In Path",
        "purpose": "验证工具是否能够处理包含特殊字符的文件路径。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\!@#$%^&*()_+.docx"
        },
        "response": {
          "result": "{\"error\": \"File not found: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\!@#$%^&*()_+.docx\"}"
        },
        "execution_time": 0.004001617431640625,
        "is_functional_test": true
      },
      {
        "case_name": "Open Document With Null File Path",
        "purpose": "验证工具在接收到null值作为文件路径时能否正确抛出错误。",
        "args": {
          "file_path": null
        },
        "response": {
          "error": "ToolException: Error executing tool open_document: 1 validation error for open_documentArguments\nfile_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.006999969482421875,
        "is_functional_test": false
      },
      {
        "case_name": "Open Document With Empty File Path",
        "purpose": "验证工具是否能正确处理空字符串作为文件路径的情况。",
        "args": {
          "file_path": ""
        },
        "response": {
          "result": "{\"error\": \"[Errno 2] No such file or directory: 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\workspace\\\\\\\\pipeline-output-servers\\\\\\\\qwen-max-latest\\\\\\\\mcp_word_document_automation\\\\\\\\refined\\\\\\\\[Content_Types].xml'\"}"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      },
      {
        "case_name": "Open Document From Read-Only Directory",
        "purpose": "验证工具是否能安全地处理从只读目录中打开文档的操作。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\converted_image.png"
        },
        "response": {
          "result": "{\"error\": \"Package not found at 'D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\\\\converted_image.png'\"}"
        },
        "execution_time": 0.004006385803222656,
        "is_functional_test": false
      }
    ],
    "get_document_info": [
      {
        "case_name": "Get Document Info Successfully",
        "purpose": "验证工具可以成功获取当前文档的基本信息，使用默认参数进行基本功能测试。",
        "args": {},
        "response": {
          "result": "{\"author\": \"python-docx\", \"category\": \"\", \"comments\": \"generated by python-docx\", \"content_status\": \"\", \"created\": \"2013-12-23T23:15:00+00:00\", \"identifier\": \"\", \"keywords\": \"\", \"language\": \"\", \"last_modified_by\": \"\", \"last_printed\": null, \"modified\": \"2013-12-23T23:15:00+00:00\", \"revision\": 1, \"subject\": \"\", \"title\": \"\", \"version\": \"\"}"
        },
        "execution_time": 0.00600886344909668,
        "is_functional_test": true
      },
      {
        "case_name": "Get Document Info After Adding Paragraph",
        "purpose": "验证在添加段落之后调用get_document_info工具是否能正确反映文档的最新状态。",
        "args": {},
        "response": {
          "result": "{\"author\": \"python-docx\", \"category\": \"\", \"comments\": \"generated by python-docx\", \"content_status\": \"\", \"created\": \"2013-12-23T23:15:00+00:00\", \"identifier\": \"\", \"keywords\": \"\", \"language\": \"\", \"last_modified_by\": \"\", \"last_printed\": null, \"modified\": \"2013-12-23T23:15:00+00:00\", \"revision\": 1, \"subject\": \"\", \"title\": \"\", \"version\": \"\"}"
        },
        "execution_time": 0.017998933792114258,
        "is_functional_test": true
      },
      {
        "case_name": "Get Document Info Without Document Created",
        "purpose": "验证在没有创建文档的情况下调用get_document_info工具是否能正确返回错误信息。",
        "args": {},
        "response": {
          "result": "{\"author\": \"python-docx\", \"category\": \"\", \"comments\": \"generated by python-docx\", \"content_status\": \"\", \"created\": \"2013-12-23T23:15:00+00:00\", \"identifier\": \"\", \"keywords\": \"\", \"language\": \"\", \"last_modified_by\": \"\", \"last_printed\": null, \"modified\": \"2013-12-23T23:15:00+00:00\", \"revision\": 1, \"subject\": \"\", \"title\": \"\", \"version\": \"\"}"
        },
        "execution_time": 0.003995656967163086,
        "is_functional_test": false
      },
      {
        "case_name": "Get Document Info After Special Characters Paragraph",
        "purpose": "验证在添加包含特殊字符的段落后调用get_document_info工具是否能正确反映文档信息。",
        "args": {},
        "response": {
          "result": "{\"author\": \"python-docx\", \"category\": \"\", \"comments\": \"generated by python-docx\", \"content_status\": \"\", \"created\": \"2013-12-23T23:15:00+00:00\", \"identifier\": \"\", \"keywords\": \"\", \"language\": \"\", \"last_modified_by\": \"\", \"last_printed\": null, \"modified\": \"2013-12-23T23:15:00+00:00\", \"revision\": 1, \"subject\": \"\", \"title\": \"\", \"version\": \"\"}"
        },
        "execution_time": 0.004994630813598633,
        "is_functional_test": true
      },
      {
        "case_name": "Get Document Info With Script Injection Attempt",
        "purpose": "验证在添加脚本注入内容后调用get_document_info工具是否能安全地处理并返回文档信息。",
        "args": {},
        "response": {
          "result": "{\"author\": \"python-docx\", \"category\": \"\", \"comments\": \"generated by python-docx\", \"content_status\": \"\", \"created\": \"2013-12-23T23:15:00+00:00\", \"identifier\": \"\", \"keywords\": \"\", \"language\": \"\", \"last_modified_by\": \"\", \"last_printed\": null, \"modified\": \"2013-12-23T23:15:00+00:00\", \"revision\": 1, \"subject\": \"\", \"title\": \"\", \"version\": \"\"}"
        },
        "execution_time": 0.007001161575317383,
        "is_functional_test": false
      },
      {
        "case_name": "Get Document Info In Read-Only Directory",
        "purpose": "验证在只读目录下的文档中调用get_document_info工具是否能正常获取文档信息。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\locked_file.docx"
        },
        "response": {
          "result": "{\"author\": \"python-docx\", \"category\": \"\", \"comments\": \"generated by python-docx\", \"content_status\": \"\", \"created\": \"2013-12-23T23:15:00+00:00\", \"identifier\": \"\", \"keywords\": \"\", \"language\": \"\", \"last_modified_by\": \"\", \"last_printed\": null, \"modified\": \"2013-12-23T23:15:00+00:00\", \"revision\": 1, \"subject\": \"\", \"title\": \"\", \"version\": \"\"}"
        },
        "execution_time": 0.005999088287353516,
        "is_functional_test": true
      },
      {
        "case_name": "Get Document Info With Locked File",
        "purpose": "验证在文档被锁定的情况下调用get_document_info工具是否能正确处理并返回错误信息。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\locked_file.docx"
        },
        "response": {
          "result": "{\"author\": \"python-docx\", \"category\": \"\", \"comments\": \"generated by python-docx\", \"content_status\": \"\", \"created\": \"2013-12-23T23:15:00+00:00\", \"identifier\": \"\", \"keywords\": \"\", \"language\": \"\", \"last_modified_by\": \"\", \"last_printed\": null, \"modified\": \"2013-12-23T23:15:00+00:00\", \"revision\": 1, \"subject\": \"\", \"title\": \"\", \"version\": \"\"}"
        },
        "execution_time": 0.0069980621337890625,
        "is_functional_test": false
      },
      {
        "case_name": "Get Document Info With Corrupted File",
        "purpose": "验证在尝试获取损坏文档信息时，工具是否能正确处理并返回错误信息。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\~$cked_file.docx"
        },
        "response": {
          "result": "{\"author\": \"python-docx\", \"category\": \"\", \"comments\": \"generated by python-docx\", \"content_status\": \"\", \"created\": \"2013-12-23T23:15:00+00:00\", \"identifier\": \"\", \"keywords\": \"\", \"language\": \"\", \"last_modified_by\": \"\", \"last_printed\": null, \"modified\": \"2013-12-23T23:15:00+00:00\", \"revision\": 1, \"subject\": \"\", \"title\": \"\", \"version\": \"\"}"
        },
        "execution_time": 0.0029976367950439453,
        "is_functional_test": false
      }
    ],
    "search_text": [
      {
        "case_name": "Search Text Successfully",
        "purpose": "验证工具可以成功搜索文档中包含的特定文本，并返回正确的位置信息。",
        "args": {
          "search_string": "This is a new paragraph added to the document."
        },
        "response": {
          "result": "{\"positions\": []}"
        },
        "execution_time": 0.0039539337158203125,
        "is_functional_test": true
      },
      {
        "case_name": "Search Non-Existent Text",
        "purpose": "验证当搜索的文本不存在于文档中时，工具是否能正确返回空列表或无结果。",
        "args": {
          "search_string": "This text does not exist in the document."
        },
        "response": {
          "result": "{\"positions\": []}"
        },
        "execution_time": 0.008005380630493164,
        "is_functional_test": true
      },
      {
        "case_name": "Search With Empty String",
        "purpose": "验证使用空字符串作为搜索内容时，工具的行为是否符合预期（如返回所有位置或空结果）。",
        "args": {
          "search_string": ""
        },
        "response": {
          "result": "{\"positions\": [0, 1, 2, 3, 4, 5, 6, 7, 8]}"
        },
        "execution_time": 0.003996372222900391,
        "is_functional_test": true
      },
      {
        "case_name": "Search With Special Characters",
        "purpose": "验证工具能够正确处理并搜索包含特殊字符的文本。",
        "args": {
          "search_string": "This paragraph contains special characters: !@#$%^&*()_+{}|:\"<>?~"
        },
        "response": {
          "result": "{\"positions\": []}"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": true
      },
      {
        "case_name": "Search With Null Input",
        "purpose": "验证工具在接收到null值作为搜索字符串时能否正确抛出错误或拒绝执行。",
        "args": {
          "search_string": null
        },
        "response": {
          "error": "ToolException: Error executing tool search_text: 1 validation error for search_textArguments\nsearch_string\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.005077838897705078,
        "is_functional_test": false
      },
      {
        "case_name": "Search With Non-String Input",
        "purpose": "验证工具是否对非字符串类型的输入进行正确处理。",
        "args": {
          "search_string": 123456
        },
        "response": {
          "error": "ToolException: Error executing tool search_text: 1 validation error for search_textArguments\nsearch_string\n  Input should be a valid string [type=string_type, input_value=123456, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.006070613861083984,
        "is_functional_test": false
      },
      {
        "case_name": "Search Script Injection Attempt",
        "purpose": "验证工具是否安全地处理可能的脚本注入尝试。",
        "args": {
          "search_string": "<script>alert('XSS');</script>"
        },
        "response": {
          "result": "{\"positions\": []}"
        },
        "execution_time": 0.003889322280883789,
        "is_functional_test": false
      },
      {
        "case_name": "Search Long Text",
        "purpose": "验证工具在搜索超长文本时的表现，测试其边界处理能力。",
        "args": {
          "search_string": "A very long string that exceeds normal length and may challenge system performance or memory handling capabilities."
        },
        "response": {
          "result": "{\"positions\": []}"
        },
        "execution_time": 0.00412440299987793,
        "is_functional_test": true
      }
    ],
    "find_and_replace": [
      {
        "case_name": "Basic Find and Replace",
        "purpose": "验证工具可以成功执行基本的查找和替换操作。",
        "args": {
          "find_string": "old text",
          "replace_string": "new text"
        },
        "response": {
          "result": "{\"replacements\": 0}"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": true
      },
      {
        "case_name": "Replace All Occurrences in Document",
        "purpose": "验证工具能够正确替换文档中所有出现的匹配字符串。",
        "args": {
          "find_string": "hello",
          "replace_string": "hi"
        },
        "response": {
          "result": "{\"replacements\": 0}"
        },
        "execution_time": 0.003997802734375,
        "is_functional_test": true
      },
      {
        "case_name": "No Match Found",
        "purpose": "验证当没有找到匹配项时，工具是否能正确返回0替换信息。",
        "args": {
          "find_string": "nonexistent text",
          "replace_string": "replacement text"
        },
        "response": {
          "result": "{\"replacements\": 0}"
        },
        "execution_time": 0.009002685546875,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Replace String",
        "purpose": "验证使用空字符串作为替换内容时工具的行为。",
        "args": {
          "find_string": "remove this text",
          "replace_string": ""
        },
        "response": {
          "result": "{\"replacements\": 0}"
        },
        "execution_time": 0.004998922348022461,
        "is_functional_test": true
      },
      {
        "case_name": "Special Characters Replacement",
        "purpose": "验证工具能否正确处理包含特殊字符的查找和替换操作。",
        "args": {
          "find_string": "!@#$%^&*()",
          "replace_string": "[special chars]"
        },
        "response": {
          "result": "{\"replacements\": 0}"
        },
        "execution_time": 0.006999492645263672,
        "is_functional_test": true
      },
      {
        "case_name": "Script Injection Attempt Replacement",
        "purpose": "验证工具在尝试替换脚本注入文本时的安全性处理能力。",
        "args": {
          "find_string": "<script>alert('XSS');</script>",
          "replace_string": "[sanitized]"
        },
        "response": {
          "result": "{\"replacements\": 0}"
        },
        "execution_time": 0.00799870491027832,
        "is_functional_test": false
      },
      {
        "case_name": "Null Input for Find or Replace",
        "purpose": "验证工具在查找或替换参数为null时的错误处理机制。",
        "args": {
          "find_string": null,
          "replace_string": "replacement"
        },
        "response": {
          "error": "ToolException: Error executing tool find_and_replace: 1 validation error for find_and_replaceArguments\nfind_string\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      }
    ],
    "delete_paragraph": [
      {
        "case_name": "Delete Paragraph Successfully",
        "purpose": "验证工具可以成功删除文档中指定索引的段落，使用基本参数进行正向测试。",
        "args": {
          "paragraph_index": 0
        },
        "response": {
          "result": "{\"message\": \"Paragraph deleted successfully.\"}"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Paragraph With Negative Index",
        "purpose": "验证工具是否对负数段落索引进行正确参数验证处理。",
        "args": {
          "paragraph_index": -1
        },
        "response": {
          "result": "{\"error\": \"Invalid paragraph index.\"}"
        },
        "execution_time": 0.005001068115234375,
        "is_functional_test": false
      },
      {
        "case_name": "Delete Paragraph With Non-Integer Index",
        "purpose": "验证工具是否对非整数类型的段落索引进行正确验证处理。",
        "args": {
          "paragraph_index": "zero"
        },
        "response": {
          "error": "ToolException: Error executing tool delete_paragraph: 1 validation error for delete_paragraphArguments\nparagraph_index\n  Input should be a valid integer, unable to parse string as an integer [type=int_parsing, input_value='zero', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/int_parsing"
        },
        "execution_time": 0.006998300552368164,
        "is_functional_test": false
      },
      {
        "case_name": "Delete Paragraph With Null Index",
        "purpose": "验证工具在接收到null值时能否正确抛出错误或拒绝执行。",
        "args": {
          "paragraph_index": null
        },
        "response": {
          "error": "ToolException: Error executing tool delete_paragraph: 1 validation error for delete_paragraphArguments\nparagraph_index\n  Input should be a valid integer [type=int_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/int_type"
        },
        "execution_time": 0.005998134613037109,
        "is_functional_test": false
      },
      {
        "case_name": "Delete Paragraph At Boundary Index",
        "purpose": "验证工具是否能够正确处理边界值（如最大索引）的段落删除。",
        "args": {
          "paragraph_index": 2147483647
        },
        "response": {
          "result": "{\"error\": \"Invalid paragraph index.\"}"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Paragraph With Script Injection Index",
        "purpose": "验证工具是否安全地处理可能的脚本注入尝试（如特殊字符）。",
        "args": {
          "paragraph_index": "<script>alert('XSS')</script>"
        },
        "response": {
          "error": "ToolException: Error executing tool delete_paragraph: 1 validation error for delete_paragraphArguments\nparagraph_index\n  Input should be a valid integer, unable to parse string as an integer [type=int_parsing, input_value=\"<script>alert('XSS')</script>\", input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/int_parsing"
        },
        "execution_time": 0.0050013065338134766,
        "is_functional_test": false
      },
      {
        "case_name": "Delete Paragraph From Empty Document",
        "purpose": "验证当文档为空时，工具是否能正确处理删除操作并返回适当错误。",
        "args": {
          "paragraph_index": 0
        },
        "response": {
          "result": "{\"message\": \"Paragraph deleted successfully.\"}"
        },
        "execution_time": 0.005002498626708984,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Multiple Paragraphs Sequentially",
        "purpose": "验证连续删除多个段落时工具是否能保持文档状态一致性。",
        "args": {
          "paragraph_index": 0
        },
        "response": {
          "result": "{\"message\": \"Paragraph deleted successfully.\"}"
        },
        "execution_time": 0.005046367645263672,
        "is_functional_test": true
      }
    ],
    "delete_text": [
      {
        "case_name": "Delete Text Successfully",
        "purpose": "验证工具可以成功删除文档中指定的文本，并返回正确的删除次数。",
        "args": {
          "text": "This is a new paragraph added to the document."
        },
        "response": {
          "result": "{\"deletions\": 0}"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Non-Existent Text",
        "purpose": "验证当指定的文本在文档中不存在时，工具是否能正确返回0次删除而不报错。",
        "args": {
          "text": "Non-existent text for deletion"
        },
        "response": {
          "result": "{\"deletions\": 0}"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Empty String",
        "purpose": "验证当传入空字符串作为要删除的文本时，工具是否能正确处理并返回0次删除。",
        "args": {
          "text": ""
        },
        "response": {
          "result": "{\"deletions\": 6}"
        },
        "execution_time": 0.005003213882446289,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Text With Special Characters",
        "purpose": "验证工具能够正确删除包含特殊字符的文本内容。",
        "args": {
          "text": "This paragraph contains special characters: !@#$%^&*()_+{}|:\"<>?~"
        },
        "response": {
          "result": "{\"deletions\": 0}"
        },
        "execution_time": 0.0032253265380859375,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Null Input",
        "purpose": "验证工具在接收到null值作为文本参数时能否正确抛出错误或拒绝执行。",
        "args": {
          "text": null
        },
        "response": {
          "error": "ToolException: Error executing tool delete_text: 1 validation error for delete_textArguments\ntext\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      },
      {
        "case_name": "Delete Non-String Input",
        "purpose": "验证工具是否对非字符串类型的输入进行正确处理。",
        "args": {
          "text": 123456
        },
        "response": {
          "error": "ToolException: Error executing tool delete_text: 1 validation error for delete_textArguments\ntext\n  Input should be a valid string [type=string_type, input_value=123456, input_type=int]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.007003068923950195,
        "is_functional_test": false
      },
      {
        "case_name": "Delete Script Injection Attempt",
        "purpose": "验证工具是否安全地处理可能的脚本注入尝试。",
        "args": {
          "text": "<script>alert('XSS');</script>"
        },
        "response": {
          "result": "{\"deletions\": 0}"
        },
        "execution_time": 0.004999637603759766,
        "is_functional_test": false
      },
      {
        "case_name": "Delete Multiple Occurrences",
        "purpose": "验证文档中存在多个相同文本实例时，工具是否能正确删除所有实例并返回总数。",
        "args": {
          "text": "Duplicate text to delete"
        },
        "response": {
          "result": "{\"deletions\": 0}"
        },
        "execution_time": 0.0029997825622558594,
        "is_functional_test": true
      }
    ],
    "add_table_row": [
      {
        "case_name": "Add Row To First Table Successfully",
        "purpose": "验证工具可以成功向文档中的第一个表格添加一行，使用默认表格索引进行正向测试。",
        "args": {
          "table_index": 0
        },
        "response": {
          "result": "{\"message\": \"Row added successfully.\"}"
        },
        "execution_time": 0.005006551742553711,
        "is_functional_test": true
      },
      {
        "case_name": "Add Row To Last Table Successfully",
        "purpose": "验证工具可以成功向文档中最后一个表格添加一行，测试较大的表格索引值。",
        "args": {
          "table_index": 9
        },
        "response": {
          "result": "{\"message\": \"Row added successfully.\"}"
        },
        "execution_time": 0.004995822906494141,
        "is_functional_test": true
      },
      {
        "case_name": "Add Row To Table With Invalid Index",
        "purpose": "验证工具在表格索引超出文档范围时是否能正确处理并返回错误。",
        "args": {
          "table_index": -1
        },
        "response": {
          "result": "{\"error\": \"Invalid table index.\"}"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": false
      },
      {
        "case_name": "Add Row To Table With Null Index",
        "purpose": "验证工具在接收到null值作为表格索引时能否正确抛出错误或拒绝执行。",
        "args": {
          "table_index": null
        },
        "response": {
          "error": "ToolException: Error executing tool add_table_row: 1 validation error for add_table_rowArguments\ntable_index\n  Input should be a valid integer [type=int_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/int_type"
        },
        "execution_time": 0.004001617431640625,
        "is_functional_test": false
      },
      {
        "case_name": "Add Row To Table With NonInteger Index",
        "purpose": "验证工具是否对非整数类型的表格索引进行正确处理。",
        "args": {
          "table_index": "first"
        },
        "response": {
          "error": "ToolException: Error executing tool add_table_row: 1 validation error for add_table_rowArguments\ntable_index\n  Input should be a valid integer, unable to parse string as an integer [type=int_parsing, input_value='first', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/int_parsing"
        },
        "execution_time": 0.007999181747436523,
        "is_functional_test": false
      },
      {
        "case_name": "Add Multiple Rows To Different Tables",
        "purpose": "验证工具可以在多个不同的表格中成功添加行，测试工具的连续操作能力。",
        "args": {
          "table_index": 2
        },
        "response": {
          "result": "{\"message\": \"Row added successfully.\"}"
        },
        "execution_time": 0.004999399185180664,
        "is_functional_test": true
      },
      {
        "case_name": "Add Row To Table With Special Characters In Context",
        "purpose": "验证工具在表格上下文包含特殊字符时能否正常添加行。",
        "args": {
          "table_index": 1
        },
        "response": {
          "result": "{\"message\": \"Row added successfully.\"}"
        },
        "execution_time": 0.007706165313720703,
        "is_functional_test": true
      },
      {
        "case_name": "Add Row To Locked Table",
        "purpose": "验证工具在尝试向只读或锁定表格添加行时是否能正确处理。",
        "args": {
          "table_index": 0
        },
        "response": {
          "result": "{\"message\": \"Row added successfully.\"}"
        },
        "execution_time": 0.0042607784271240234,
        "is_functional_test": false
      }
    ],
    "delete_table_row": [
      {
        "case_name": "Delete Row From Table Successfully",
        "purpose": "验证工具可以成功删除指定表格中的指定行，使用基本参数进行正向测试。",
        "args": {
          "table_index": 0,
          "row_index": 1
        },
        "response": {
          "result": "{\"message\": \"Row deleted successfully.\"}"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Row From First Table",
        "purpose": "验证工具可以成功删除文档中第一个表格的某一行，测试 table_index 为 0 的边界情况。",
        "args": {
          "table_index": 0,
          "row_index": 0
        },
        "response": {
          "result": "{\"message\": \"Row deleted successfully.\"}"
        },
        "execution_time": 0.00400090217590332,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Row From Last Table",
        "purpose": "验证工具可以成功删除文档中最后一个表格的某一行，测试 table_index 为较大值的情况。",
        "args": {
          "table_index": 5,
          "row_index": 2
        },
        "response": {
          "result": "{\"message\": \"Row deleted successfully.\"}"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Row With Max Row Index",
        "purpose": "验证工具可以删除表格中最大行索引的行，测试 row_index 为较大值的情况。",
        "args": {
          "table_index": 1,
          "row_index": 10
        },
        "response": {
          "result": "{\"error\": \"Invalid row index.\"}"
        },
        "execution_time": 0.005000114440917969,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Row With Invalid Table Index",
        "purpose": "验证工具在 table_index 为负数时能否正确抛出错误。",
        "args": {
          "table_index": -1,
          "row_index": 1
        },
        "response": {
          "result": "{\"error\": \"Invalid table index.\"}"
        },
        "execution_time": 0.003000497817993164,
        "is_functional_test": false
      },
      {
        "case_name": "Delete Row With Invalid Row Index",
        "purpose": "验证工具在 row_index 为负数时能否正确抛出错误。",
        "args": {
          "table_index": 0,
          "row_index": -1
        },
        "response": {
          "result": "{\"error\": \"Invalid row index.\"}"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": false
      },
      {
        "case_name": "Delete Row From Non-Existent Table",
        "purpose": "验证工具在 table_index 超出文档实际表格数量时能否正确处理错误。",
        "args": {
          "table_index": 100,
          "row_index": 0
        },
        "response": {
          "result": "{\"error\": \"Invalid table index.\"}"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": false
      },
      {
        "case_name": "Delete Row With Script Injection Attempt",
        "purpose": "验证工具是否安全地处理可能的脚本注入尝试，虽然参数为整数类型，但验证整体调用是否安全。",
        "args": {
          "table_index": 0,
          "row_index": 1
        },
        "response": {
          "result": "{\"message\": \"Row deleted successfully.\"}"
        },
        "execution_time": 0.0069997310638427734,
        "is_functional_test": false
      }
    ],
    "edit_table_cell": [
      {
        "case_name": "Edit Table Cell Successfully",
        "purpose": "验证工具可以成功编辑指定表格中的指定单元格内容，使用基本参数进行正向测试。",
        "args": {
          "table_index": 0,
          "row_index": 0,
          "col_index": 0,
          "new_content": "Updated Content"
        },
        "response": {
          "result": "{\"message\": \"Cell edited successfully.\"}"
        },
        "execution_time": 0.003996610641479492,
        "is_functional_test": true
      },
      {
        "case_name": "Edit Table Cell With Special Characters",
        "purpose": "验证工具能够正确处理包含特殊字符的单元格内容更新。",
        "args": {
          "table_index": 1,
          "row_index": 2,
          "col_index": 3,
          "new_content": "Special content: !@#$%^&*()_+{}|:\"<>?~"
        },
        "response": {
          "result": "{\"error\": \"Invalid row or column index.\"}"
        },
        "execution_time": 0.0029997825622558594,
        "is_functional_test": true
      },
      {
        "case_name": "Edit Table Cell In Different Table",
        "purpose": "验证工具可以在不同表格索引下编辑单元格内容，确保多表格支持。",
        "args": {
          "table_index": 5,
          "row_index": 1,
          "col_index": 2,
          "new_content": "New Value"
        },
        "response": {
          "result": "{\"message\": \"Cell edited successfully.\"}"
        },
        "execution_time": 0.004568576812744141,
        "is_functional_test": true
      },
      {
        "case_name": "Edit Table Cell With Empty String",
        "purpose": "验证当传入空字符串时，工具是否能正确处理并清空单元格内容。",
        "args": {
          "table_index": 0,
          "row_index": 1,
          "col_index": 1,
          "new_content": ""
        },
        "response": {
          "result": "{\"error\": \"Invalid row or column index.\"}"
        },
        "execution_time": 0.006957054138183594,
        "is_functional_test": true
      },
      {
        "case_name": "Edit Table Cell With Null Input",
        "purpose": "验证工具在接收到null值作为新内容时能否正确抛出错误。",
        "args": {
          "table_index": 0,
          "row_index": 0,
          "col_index": 0,
          "new_content": null
        },
        "response": {
          "error": "ToolException: Error executing tool edit_table_cell: 1 validation error for edit_table_cellArguments\nnew_content\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.006123065948486328,
        "is_functional_test": false
      },
      {
        "case_name": "Edit Non-Existent Table Cell",
        "purpose": "验证工具在尝试编辑不存在的表格（如负数索引）时能否正确处理错误。",
        "args": {
          "table_index": -1,
          "row_index": 0,
          "col_index": 0,
          "new_content": "Invalid Table"
        },
        "response": {
          "result": "{\"error\": \"Invalid table index.\"}"
        },
        "execution_time": 0.0060062408447265625,
        "is_functional_test": false
      },
      {
        "case_name": "Edit Table Cell With Script Injection Attempt",
        "purpose": "验证工具是否安全地处理可能的脚本注入尝试。",
        "args": {
          "table_index": 0,
          "row_index": 0,
          "col_index": 0,
          "new_content": "<script>alert('XSS');</script>"
        },
        "response": {
          "result": "{\"message\": \"Cell edited successfully.\"}"
        },
        "execution_time": 0.00898289680480957,
        "is_functional_test": false
      },
      {
        "case_name": "Edit Table Cell At Boundary Indices",
        "purpose": "验证工具是否能正确处理最大允许索引值的单元格编辑操作。",
        "args": {
          "table_index": 2147483647,
          "row_index": 2147483647,
          "col_index": 2147483647,
          "new_content": "Boundary Test Content"
        },
        "response": {
          "result": "{\"error\": \"Invalid table index.\"}"
        },
        "execution_time": 0.006983518600463867,
        "is_functional_test": true
      }
    ],
    "merge_table_cells": [
      {
        "case_name": "Merge Cells in Table Successfully",
        "purpose": "验证工具可以成功合并表格中指定范围的单元格，使用基本参数进行正向测试。",
        "args": {
          "table_index": 0,
          "start_row": 0,
          "end_row": 1,
          "start_col": 0,
          "end_col": 1
        },
        "response": {
          "result": "{\"error\": \"list index out of range\"}"
        },
        "execution_time": 0.005007505416870117,
        "is_functional_test": true
      },
      {
        "case_name": "Merge Single Cell",
        "purpose": "验证工具能够正确处理只合并一个单元格的情况。",
        "args": {
          "table_index": 0,
          "start_row": 2,
          "end_row": 2,
          "start_col": 2,
          "end_col": 2
        },
        "response": {
          "result": "{\"error\": \"list index out of range\"}"
        },
        "execution_time": 0.006001710891723633,
        "is_functional_test": true
      },
      {
        "case_name": "Merge Entire Table Cells",
        "purpose": "验证工具是否能够正确合并整个表格的单元格。",
        "args": {
          "table_index": 0,
          "start_row": 0,
          "end_row": 4,
          "start_col": 0,
          "end_col": 3
        },
        "response": {
          "result": "{\"error\": \"list index out of range\"}"
        },
        "execution_time": 0.00899362564086914,
        "is_functional_test": true
      },
      {
        "case_name": "Merge Cells with Invalid Table Index",
        "purpose": "验证工具是否能正确处理无效的 table_index 参数。",
        "args": {
          "table_index": -1,
          "start_row": 0,
          "end_row": 1,
          "start_col": 0,
          "end_col": 1
        },
        "response": {
          "result": "{\"error\": \"Invalid table index.\"}"
        },
        "execution_time": 0.0047876834869384766,
        "is_functional_test": false
      },
      {
        "case_name": "Merge Cells with Start Row Greater Than End Row",
        "purpose": "验证工具是否能正确处理 start_row 大于 end_row 的错误情况。",
        "args": {
          "table_index": 0,
          "start_row": 3,
          "end_row": 1,
          "start_col": 0,
          "end_col": 1
        },
        "response": {
          "result": "{\"error\": \"list index out of range\"}"
        },
        "execution_time": 0.003000974655151367,
        "is_functional_test": false
      },
      {
        "case_name": "Merge Cells with Start Col Greater Than End Col",
        "purpose": "验证工具是否能正确处理 start_col 大于 end_col 的错误情况。",
        "args": {
          "table_index": 0,
          "start_row": 0,
          "end_row": 1,
          "start_col": 2,
          "end_col": 0
        },
        "response": {
          "result": "{\"error\": \"list index out of range\"}"
        },
        "execution_time": 0.006642341613769531,
        "is_functional_test": false
      },
      {
        "case_name": "Merge Cells with Negative Indices",
        "purpose": "验证工具是否能处理包含负数索引的边界情况。",
        "args": {
          "table_index": 0,
          "start_row": -1,
          "end_row": -2,
          "start_col": -1,
          "end_col": -2
        },
        "response": {
          "result": "{\"error\": \"list index out of range\"}"
        },
        "execution_time": 0.004991769790649414,
        "is_functional_test": false
      },
      {
        "case_name": "Merge Cells with Large Indices",
        "purpose": "验证工具是否能处理非常大的索引值（超出表格范围）。",
        "args": {
          "table_index": 0,
          "start_row": 100,
          "end_row": 200,
          "start_col": 100,
          "end_col": 200
        },
        "response": {
          "result": "{\"error\": \"list index out of range\"}"
        },
        "execution_time": 0.004002809524536133,
        "is_functional_test": false
      }
    ],
    "split_table": [
      {
        "case_name": "Split Table at Valid Row Index",
        "purpose": "验证工具可以成功在指定行索引处分割表格，使用有效参数进行正向测试。",
        "args": {
          "table_index": 0,
          "row_index": 2
        },
        "response": {
          "result": "{\"error\": \"Invalid row index.\"}"
        },
        "execution_time": 0.0030059814453125,
        "is_functional_test": true
      },
      {
        "case_name": "Split Table at First Row",
        "purpose": "验证工具能够在表格的第一行处分割表格，测试边界条件。",
        "args": {
          "table_index": 1,
          "row_index": 0
        },
        "response": {
          "result": "{\"message\": \"Table split successfully.\"}"
        },
        "execution_time": 0.005000114440917969,
        "is_functional_test": true
      },
      {
        "case_name": "Split Table at Last Row",
        "purpose": "验证工具能够在表格的最后一行处分割表格，测试边界条件。",
        "args": {
          "table_index": 2,
          "row_index": 4
        },
        "response": {
          "result": "{\"error\": \"Invalid row index.\"}"
        },
        "execution_time": 0.002999544143676758,
        "is_functional_test": true
      },
      {
        "case_name": "Split Table with Invalid Table Index",
        "purpose": "验证当传入无效的 table_index 时，工具是否能正确处理错误。",
        "args": {
          "table_index": -1,
          "row_index": 2
        },
        "response": {
          "result": "{\"error\": \"Invalid table index.\"}"
        },
        "execution_time": 0.004999876022338867,
        "is_functional_test": false
      },
      {
        "case_name": "Split Table with Invalid Row Index",
        "purpose": "验证当传入超出范围的 row_index 时，工具是否能正确处理错误。",
        "args": {
          "table_index": 1,
          "row_index": 10
        },
        "response": {
          "result": "{\"error\": \"Invalid row index.\"}"
        },
        "execution_time": 0.005990028381347656,
        "is_functional_test": false
      },
      {
        "case_name": "Split Non-Existent Table",
        "purpose": "验证当指定的表格不存在时，工具是否能正确抛出错误。",
        "args": {
          "table_index": 99,
          "row_index": 1
        },
        "response": {
          "result": "{\"error\": \"Invalid table index.\"}"
        },
        "execution_time": 0.0069997310638427734,
        "is_functional_test": false
      },
      {
        "case_name": "Split Table with Null Input",
        "purpose": "验证工具在接收到 null 值作为参数时能否正确拒绝执行。",
        "args": {
          "table_index": null,
          "row_index": null
        },
        "response": {
          "error": "ToolException: Error executing tool split_table: 2 validation errors for split_tableArguments\ntable_index\n  Input should be a valid integer [type=int_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/int_type\nrow_index\n  Input should be a valid integer [type=int_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/int_type"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": false
      }
    ],
    "set_page_margins": [
      {
        "case_name": "Set Page Margins Successfully",
        "purpose": "验证工具可以成功设置文档的页面边距，使用默认推荐值进行基本功能测试。",
        "args": {
          "top": 1.0,
          "right": 1.0,
          "bottom": 1.0,
          "left": 1.0
        },
        "response": {
          "result": "{\"message\": \"Page margins set successfully.\"}"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": true
      },
      {
        "case_name": "Set Custom Page Margins",
        "purpose": "验证工具能够接受并应用非默认的自定义边距设置。",
        "args": {
          "top": 0.5,
          "right": 0.75,
          "bottom": 1.25,
          "left": 1.5
        },
        "response": {
          "result": "{\"message\": \"Page margins set successfully.\"}"
        },
        "execution_time": 0.008007049560546875,
        "is_functional_test": true
      },
      {
        "case_name": "Set Zero Margins",
        "purpose": "验证工具是否能正确处理所有边距为0的情况，测试边界条件。",
        "args": {
          "top": 0.0,
          "right": 0.0,
          "bottom": 0.0,
          "left": 0.0
        },
        "response": {
          "result": "{\"message\": \"Page margins set successfully.\"}"
        },
        "execution_time": 0.006267070770263672,
        "is_functional_test": true
      },
      {
        "case_name": "Set Negative Margins",
        "purpose": "验证工具是否对负数边距参数进行正确处理或抛出错误。",
        "args": {
          "top": -0.5,
          "right": 1.0,
          "bottom": 1.0,
          "left": 1.0
        },
        "response": {
          "result": "{\"message\": \"Page margins set successfully.\"}"
        },
        "execution_time": 0.002998828887939453,
        "is_functional_test": false
      },
      {
        "case_name": "Set Very Large Margins",
        "purpose": "验证工具是否能处理非常大的边距值（如超过页面大小）。",
        "args": {
          "top": 100.0,
          "right": 100.0,
          "bottom": 100.0,
          "left": 100.0
        },
        "response": {
          "result": "{\"message\": \"Page margins set successfully.\"}"
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": true
      },
      {
        "case_name": "Set Margins With Non-Number Input",
        "purpose": "验证工具是否对非数字类型的输入进行正确处理。",
        "args": {
          "top": "one",
          "right": 1.0,
          "bottom": 1.0,
          "left": 1.0
        },
        "response": {
          "error": "ToolException: Error executing tool set_page_margins: 1 validation error for set_page_marginsArguments\ntop\n  Input should be a valid number, unable to parse string as a number [type=float_parsing, input_value='one', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/float_parsing"
        },
        "execution_time": 0.003000497817993164,
        "is_functional_test": false
      },
      {
        "case_name": "Set Margins With Null Input",
        "purpose": "验证工具在接收到null值时能否正确抛出错误或拒绝执行。",
        "args": {
          "top": null,
          "right": 1.0,
          "bottom": 1.0,
          "left": 1.0
        },
        "response": {
          "error": "ToolException: Error executing tool set_page_margins: 1 validation error for set_page_marginsArguments\ntop\n  Input should be a valid number [type=float_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/float_type"
        },
        "execution_time": 0.0050046443939208984,
        "is_functional_test": false
      },
      {
        "case_name": "Set Margins With Special Characters",
        "purpose": "验证工具是否安全地处理包含特殊字符的数值输入（虽然理论上不应出现）。",
        "args": {
          "top": "1.0!@#",
          "right": 1.0,
          "bottom": 1.0,
          "left": 1.0
        },
        "response": {
          "error": "ToolException: Error executing tool set_page_margins: 1 validation error for set_page_marginsArguments\ntop\n  Input should be a valid number, unable to parse string as a number [type=float_parsing, input_value='1.0!@#', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/float_parsing"
        },
        "execution_time": 0.0059967041015625,
        "is_functional_test": false
      }
    ],
    "replace_section": [
      {
        "case_name": "Replace Section Successfully",
        "purpose": "验证工具可以成功替换文档中指定标题的章节内容，使用基本参数进行正向测试。",
        "args": {
          "heading": "Introduction",
          "new_content": "This is the updated introduction section."
        },
        "response": {
          "result": "{\"error\": \"Heading not found.\"}"
        },
        "execution_time": 0.0050008296966552734,
        "is_functional_test": true
      },
      {
        "case_name": "Replace Section With Empty Content",
        "purpose": "验证当新内容为空字符串时，工具是否能正确处理并替换为空段落。",
        "args": {
          "heading": "Conclusion",
          "new_content": ""
        },
        "response": {
          "result": "{\"error\": \"Heading not found.\"}"
        },
        "execution_time": 0.00400090217590332,
        "is_functional_test": true
      },
      {
        "case_name": "Replace Section With Special Characters",
        "purpose": "验证工具能够正确处理包含特殊字符的新内容。",
        "args": {
          "heading": "Summary",
          "new_content": "Special characters: !@#$%^&*()_+{}|:\"<>?~"
        },
        "response": {
          "result": "{\"error\": \"Heading not found.\"}"
        },
        "execution_time": 0.005001544952392578,
        "is_functional_test": true
      },
      {
        "case_name": "Replace Section With Script Injection Attempt",
        "purpose": "验证工具是否安全地处理可能的脚本注入尝试。",
        "args": {
          "heading": "Security Note",
          "new_content": "<script>alert('XSS');</script>"
        },
        "response": {
          "result": "{\"error\": \"Heading not found.\"}"
        },
        "execution_time": 0.007995843887329102,
        "is_functional_test": false
      },
      {
        "case_name": "Replace Section With Null Heading",
        "purpose": "验证工具在接收到null值作为标题时能否正确抛出错误。",
        "args": {
          "heading": null,
          "new_content": "This should not be executed."
        },
        "response": {
          "error": "ToolException: Error executing tool replace_section: 1 validation error for replace_sectionArguments\nheading\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.006998300552368164,
        "is_functional_test": false
      },
      {
        "case_name": "Replace Section With Null New Content",
        "purpose": "验证工具在接收到null值作为新内容时能否正确抛出错误。",
        "args": {
          "heading": "History",
          "new_content": null
        },
        "response": {
          "error": "ToolException: Error executing tool replace_section: 1 validation error for replace_sectionArguments\nnew_content\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.006996870040893555,
        "is_functional_test": false
      },
      {
        "case_name": "Replace Nonexistent Section",
        "purpose": "验证工具在尝试替换不存在的章节时是否能优雅处理。",
        "args": {
          "heading": "Nonexistent Section",
          "new_content": "This section does not exist in the document."
        },
        "response": {
          "result": "{\"error\": \"Heading not found.\"}"
        },
        "execution_time": 0.00500035285949707,
        "is_functional_test": true
      }
    ],
    "edit_section_by_keyword": [
      {
        "case_name": "Edit Section By Keyword Successfully",
        "purpose": "验证工具可以基于关键字成功编辑文档中的指定段落内容。",
        "args": {
          "keyword": "new paragraph",
          "new_content": "This section has been successfully edited."
        },
        "response": {
          "result": "{\"error\": \"Keyword not found.\"}"
        },
        "execution_time": 0.0040018558502197266,
        "is_functional_test": true
      },
      {
        "case_name": "Edit Section With Empty New Content",
        "purpose": "验证当新内容为空字符串时，工具是否能正确更新段落内容为空。",
        "args": {
          "keyword": "new paragraph",
          "new_content": ""
        },
        "response": {
          "result": "{\"error\": \"Keyword not found.\"}"
        },
        "execution_time": 0.008000373840332031,
        "is_functional_test": true
      },
      {
        "case_name": "Edit Section With Special Characters",
        "purpose": "验证工具能否正确处理包含特殊字符的新段落内容。",
        "args": {
          "keyword": "new paragraph",
          "new_content": "This is an updated paragraph with special characters: !@#$%^&*()_+{}|:\"<>?~"
        },
        "response": {
          "result": "{\"error\": \"Keyword not found.\"}"
        },
        "execution_time": 0.003998517990112305,
        "is_functional_test": true
      },
      {
        "case_name": "Edit Section With Non-Existent Keyword",
        "purpose": "验证工具在关键字不存在时是否能够优雅地处理错误情况。",
        "args": {
          "keyword": "nonexistent keyword",
          "new_content": "This should not be applied."
        },
        "response": {
          "result": "{\"error\": \"Keyword not found.\"}"
        },
        "execution_time": 0.008004903793334961,
        "is_functional_test": false
      },
      {
        "case_name": "Edit Section With Null Keyword",
        "purpose": "验证工具是否对null值的关键字输入进行正确参数校验。",
        "args": {
          "keyword": null,
          "new_content": "This should not be applied."
        },
        "response": {
          "error": "ToolException: Error executing tool edit_section_by_keyword: 1 validation error for edit_section_by_keywordArguments\nkeyword\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.004999637603759766,
        "is_functional_test": false
      },
      {
        "case_name": "Edit Section With Script Injection Attempt",
        "purpose": "验证工具是否安全地处理可能的脚本注入尝试作为新内容。",
        "args": {
          "keyword": "new paragraph",
          "new_content": "<script>alert('XSS');</script>"
        },
        "response": {
          "result": "{\"error\": \"Keyword not found.\"}"
        },
        "execution_time": 0.005999088287353516,
        "is_functional_test": false
      },
      {
        "case_name": "Edit Section With Long Keyword",
        "purpose": "验证工具是否能够处理超长关键字的情况。",
        "args": {
          "keyword": "a_very_long_keyword_that_exceeds_normal_length_requirements_for_editing_sections",
          "new_content": "This section has been edited using a long keyword."
        },
        "response": {
          "result": "{\"error\": \"Keyword not found.\"}"
        },
        "execution_time": 0.005000591278076172,
        "is_functional_test": true
      },
      {
        "case_name": "Edit Section With Whitespace Only Keyword",
        "purpose": "验证工具是否能够处理仅包含空白字符的关键字。",
        "args": {
          "keyword": "   ",
          "new_content": "This section was matched by whitespace-only keyword."
        },
        "response": {
          "result": "{\"error\": \"Keyword not found.\"}"
        },
        "execution_time": 0.006998300552368164,
        "is_functional_test": false
      }
    ],
    "save_as_document": [
      {
        "case_name": "Save Document With New File Name",
        "purpose": "验证工具可以将当前文档保存为新的文件名。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_document.docx"
        },
        "response": {
          "result": "{\"message\": \"Document saved successfully to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_document.docx.\"}"
        },
        "execution_time": 0.02500176429748535,
        "is_functional_test": true
      },
      {
        "case_name": "Save Document To Different Directory",
        "purpose": "验证工具可以将文档保存到不同的目录中。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir\\subdir\\moved_document.docx"
        },
        "response": {
          "result": "{\"message\": \"Document saved successfully to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\newdir\\\\subdir\\\\moved_document.docx.\"}"
        },
        "execution_time": 0.02994513511657715,
        "is_functional_test": true
      },
      {
        "case_name": "Save Document With Special Characters In Path",
        "purpose": "验证工具是否能够处理包含特殊字符的路径字符串。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\doc@#$.docx"
        },
        "response": {
          "result": "{\"message\": \"Document saved successfully to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\doc@#$.docx.\"}"
        },
        "execution_time": 0.03250885009765625,
        "is_functional_test": true
      },
      {
        "case_name": "Save Document With Empty File Path",
        "purpose": "验证当提供空文件路径时，工具是否能正确拒绝执行并返回错误信息。",
        "args": {
          "file_path": ""
        },
        "response": {
          "result": "{\"error\": \"[Errno 13] Permission denied: 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\workspace\\\\\\\\pipeline-output-servers\\\\\\\\qwen-max-latest\\\\\\\\mcp_word_document_automation\\\\\\\\refined'\"}"
        },
        "execution_time": 0.006007194519042969,
        "is_functional_test": false
      },
      {
        "case_name": "Save Document With Null File Path",
        "purpose": "验证当传入null作为文件路径时，工具是否能正确抛出参数验证错误。",
        "args": {
          "file_path": null
        },
        "response": {
          "error": "ToolException: Error executing tool save_as_document: 1 validation error for save_as_documentArguments\nfile_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.005997657775878906,
        "is_functional_test": false
      },
      {
        "case_name": "Save Document To Read-Only Directory",
        "purpose": "验证工具在尝试写入只读目录时是否能正确处理权限不足的情况。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\locked_file.docx"
        },
        "response": {
          "result": "{\"error\": \"[Errno 13] Permission denied: 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\readonly_dir\\\\\\\\locked_file.docx'\"}"
        },
        "execution_time": 0.0039980411529541016,
        "is_functional_test": false
      },
      {
        "case_name": "Save Document With Very Long File Path",
        "purpose": "验证工具是否支持长文件路径，并能正确处理极限长度的文件名。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a_very_long_file_name_that_might_cause_issues_if_the_system_has_length_restrictions_on_filenames.docx"
        },
        "response": {
          "result": "{\"message\": \"Document saved successfully to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\a_very_long_file_name_that_might_cause_issues_if_the_system_has_length_restrictions_on_filenames.docx.\"}"
        },
        "execution_time": 0.028001785278320312,
        "is_functional_test": true
      },
      {
        "case_name": "Save Document With Script Injection Attempt In File Name",
        "purpose": "验证工具是否安全地处理可能的脚本注入尝试，如在文件名中插入脚本代码。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\<script>alert('XSS')</script>.docx"
        },
        "response": {
          "result": "{\"error\": \"[Errno 22] Invalid argument: \\\"D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\<script>alert('XSS')</script>.docx\\\"\"}"
        },
        "execution_time": 0.0049991607666015625,
        "is_functional_test": false
      }
    ],
    "create_document_copy": [
      {
        "case_name": "Create Document Copy Successfully",
        "purpose": "验证工具可以成功创建当前文档的副本，使用有效路径进行正向测试。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_document_copy.docx"
        },
        "response": {
          "result": "{\"message\": \"Document copy created successfully at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_document_copy.docx.\"}"
        },
        "execution_time": 0.027901649475097656,
        "is_functional_test": true
      },
      {
        "case_name": "Create Document Copy With Special Characters in File Path",
        "purpose": "验证工具是否能正确处理包含特殊字符的文件路径。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_doc@#$_copy.docx"
        },
        "response": {
          "result": "{\"message\": \"Document copy created successfully at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_doc@#$_copy.docx.\"}"
        },
        "execution_time": 0.02899932861328125,
        "is_functional_test": true
      },
      {
        "case_name": "Create Document Copy With Long File Name",
        "purpose": "验证系统对长文件名的支持情况，确保复制操作不会因文件名长度限制而失败。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\a_very_long_file_name_that_might_cause_issues_if_the_system_has_length_restrictions_on_filenames_copy.docx"
        },
        "response": {
          "result": "{\"message\": \"Document copy created successfully at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\a_very_long_file_name_that_might_cause_issues_if_the_system_has_length_restrictions_on_filenames_copy.docx.\"}"
        },
        "execution_time": 0.03099989891052246,
        "is_functional_test": true
      },
      {
        "case_name": "Create Document Copy In Nested Directory",
        "purpose": "验证工具能否在嵌套目录中成功创建文档副本。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir\\subdir\\copied_document.docx"
        },
        "response": {
          "result": "{\"message\": \"Document copy created successfully at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\newdir\\\\subdir\\\\copied_document.docx.\"}"
        },
        "execution_time": 0.029001235961914062,
        "is_functional_test": true
      },
      {
        "case_name": "Create Document Copy To Read-Only Directory",
        "purpose": "验证工具在尝试将副本保存到只读目录时能否正确处理权限错误。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\copied_document.docx"
        },
        "response": {
          "result": "{\"message\": \"Document copy created successfully at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\\\\copied_document.docx.\"}"
        },
        "execution_time": 0.029002666473388672,
        "is_functional_test": false
      },
      {
        "case_name": "Create Document Copy With Invalid File Extension",
        "purpose": "验证工具是否拒绝创建非Word支持格式的副本（如.txt）。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_extension.txt"
        },
        "response": {
          "result": "{\"message\": \"Document copy created successfully at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\invalid_extension.txt.\"}"
        },
        "execution_time": 0.02599787712097168,
        "is_functional_test": false
      },
      {
        "case_name": "Create Document Copy With Null File Path",
        "purpose": "验证工具在接收到null值作为文件路径时能否正确抛出错误。",
        "args": {
          "file_path": null
        },
        "response": {
          "error": "ToolException: Error executing tool create_document_copy: 1 validation error for create_document_copyArguments\nfile_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.007998943328857422,
        "is_functional_test": false
      },
      {
        "case_name": "Create Document Copy With Empty File Path",
        "purpose": "验证工具在接收到空字符串作为文件路径时能否正确抛出错误。",
        "args": {
          "file_path": ""
        },
        "response": {
          "result": "{\"error\": \"[Errno 13] Permission denied: 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\workspace\\\\\\\\pipeline-output-servers\\\\\\\\qwen-max-latest\\\\\\\\mcp_word_document_automation\\\\\\\\refined'\"}"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 164
}