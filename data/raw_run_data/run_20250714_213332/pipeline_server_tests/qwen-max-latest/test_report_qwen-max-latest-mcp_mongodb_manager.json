{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "qwen-max-latest-mcp_mongodb_manager",
  "server_path": "workspace/pipeline-output-servers/qwen-max-latest/mcp_mongodb_manager/refined/server.py",
  "timestamp": "2025-07-14T21:38:20.865999",
  "tools": [
    {
      "name": "mcp_list_databases",
      "description": "\n    Lists all available databases in the MongoDB instance.\n\n    Returns:\n        A JSON-formatted string containing a list of database names.\n\n    Example:\n        mcp_list_databases()\n        => '[\"admin\", \"config\", \"local\"]'\n    ",
      "args_schema": {
        "properties": {},
        "title": "mcp_list_databasesArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_list_collections",
      "description": "\n    Lists all collections within a specified database in the MongoDB instance.\n\n    Args:\n        database_name: The name of the database whose collections need to be listed.\n\n    Returns:\n        A JSON-formatted string containing a list of collection names.\n\n    Raises:\n        ValueError: If the database name is invalid.\n        RuntimeError: If an error occurs while listing collections.\n\n    Example:\n        mcp_list_collections(database_name=\"test_db\")\n        => '[\"users\", \"products\"]'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          }
        },
        "required": [
          "database_name"
        ],
        "title": "mcp_list_collectionsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_insert_document",
      "description": "\n    Inserts a new document into a specified collection within a specified database.\n\n    Args:\n        database_name: The name of the target database.\n        collection_name: The name of the target collection.\n        document: The document to insert, represented as a Python dictionary.\n\n    Returns:\n        A JSON-formatted string containing the ID of the newly inserted document.\n\n    Raises:\n        ValueError: If any argument is invalid.\n        RuntimeError: If an error occurs during document insertion.\n\n    Example:\n        mcp_insert_document(\n            database_name=\"test_db\",\n            collection_name=\"users\",\n            document={\"name\": \"Alice\", \"age\": 30}\n        )\n        => '\"65a4f8b9d3c5f2e4d8e9f0a1\"'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "document": {
            "title": "Document",
            "type": "object"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "document"
        ],
        "title": "mcp_insert_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_find_documents",
      "description": "\n    Queries documents from a specified collection within a specified database, with optional projection and result limit.\n\n    Args:\n        database_name: The name of the target database.\n        collection_name: The name of the target collection.\n        query: A query filter represented as a Python dictionary. Defaults to None.\n        projection: Specifies fields to include or exclude in the returned documents. Defaults to None.\n        limit: Limits the number of documents returned. Defaults to None.\n\n    Returns:\n        A JSON-formatted string containing a list of matching documents.\n\n    Raises:\n        ValueError: If any argument is invalid.\n        RuntimeError: If an error occurs during querying.\n\n    Example:\n        mcp_find_documents(\n            database_name=\"test_db\",\n            collection_name=\"users\",\n            query={\"age\": {\"$gt\": 25}},\n            projection={\"_id\": 0, \"name\": 1},\n            limit=2\n        )\n        => '[{\"name\": \"Alice\"}, {\"name\": \"Bob\"}]'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "default": null,
            "title": "Query",
            "type": "object"
          },
          "projection": {
            "default": null,
            "title": "Projection",
            "type": "object"
          },
          "limit": {
            "default": null,
            "title": "Limit",
            "type": "integer"
          }
        },
        "required": [
          "database_name",
          "collection_name"
        ],
        "title": "mcp_find_documentsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_update_document",
      "description": "\n    Updates one or multiple documents in a specified collection within a specified database.\n\n    Args:\n        database_name: The name of the target database.\n        collection_name: The name of the target collection.\n        filter_query: A filter to identify the documents to update.\n        update_data: The update operations to apply, represented as a Python dictionary.\n        multi: If True, updates all matching documents; otherwise, updates only the first match.\n\n    Returns:\n        A JSON-formatted string containing the number of documents modified.\n\n    Raises:\n        ValueError: If any argument is invalid.\n        RuntimeError: If an error occurs during updating.\n\n    Example:\n        mcp_update_document(\n            database_name=\"test_db\",\n            collection_name=\"users\",\n            filter_query={\"age\": {\"$lt\": 30}},\n            update_data={\"$set\": {\"status\": \"inactive\"}},\n            multi=True\n        )\n        => '3'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "filter_query": {
            "title": "Filter Query",
            "type": "object"
          },
          "update_data": {
            "title": "Update Data",
            "type": "object"
          },
          "multi": {
            "title": "Multi",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "filter_query",
          "update_data",
          "multi"
        ],
        "title": "mcp_update_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_delete_document",
      "description": "\n    Deletes one or multiple documents from a specified collection within a specified database.\n\n    Args:\n        database_name: The name of the target database.\n        collection_name: The name of the target collection.\n        filter_query: A filter to identify the documents to delete.\n        multi: If True, deletes all matching documents; otherwise, deletes only the first match.\n\n    Returns:\n        A JSON-formatted string containing the number of documents deleted.\n\n    Raises:\n        ValueError: If any argument is invalid.\n        RuntimeError: If an error occurs during deletion.\n\n    Example:\n        mcp_delete_document(\n            database_name=\"test_db\",\n            collection_name=\"users\",\n            filter_query={\"status\": \"inactive\"},\n            multi=True\n        )\n        => '2'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "filter_query": {
            "title": "Filter Query",
            "type": "object"
          },
          "multi": {
            "title": "Multi",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "filter_query",
          "multi"
        ],
        "title": "mcp_delete_documentArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "mcp_list_databases": [
      {
        "case_name": "Basic Database Listing",
        "purpose": "验证工具能够正确列出MongoDB实例中的所有数据库",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"new_db\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.00500035285949707,
        "is_functional_test": true
      },
      {
        "case_name": "Verify Expected Databases Exist",
        "purpose": "确认返回的数据库列表中包含预期的标准数据库（如admin、local等）",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"new_db\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.0029997825622558594,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Database List Check",
        "purpose": "测试当MongoDB实例中没有可用数据库时，工具是否能正确返回空数组",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"new_db\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.005000591278076172,
        "is_functional_test": true
      },
      {
        "case_name": "Database Listing Performance Test",
        "purpose": "验证在存在多个数据库的情况下，工具能否正常响应并完整列出",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"new_db\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.006999969482421875,
        "is_functional_test": true
      },
      {
        "case_name": "Unauthorized Access Attempt",
        "purpose": "测试无权限访问MongoDB实例时的行为",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"new_db\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.004998445510864258,
        "is_functional_test": false
      },
      {
        "case_name": "MongoDB Connection Failure Handling",
        "purpose": "模拟MongoDB连接失败情况下的错误处理机制",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"new_db\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.007000446319580078,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Parameter Handling",
        "purpose": "测试传入非法参数时工具的容错能力",
        "args": {
          "invalid_param": "test"
        },
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"new_db\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      },
      {
        "case_name": "Timeout Handling for Long-running Operation",
        "purpose": "测试当数据库列表获取超时时的异常处理",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"new_db\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.006000041961669922,
        "is_functional_test": false
      }
    ],
    "mcp_list_collections": [
      {
        "case_name": "Basic Collection Listing",
        "purpose": "验证工具能够正确列出指定数据库中的所有集合",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "[\"a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\", \"new_collection\", \"test_collection\", \"empty_docs\", \"invalid/collection*name\", \"user_profiles\", \"long_key_collection\", \"test_collection'; DROP COLLECTION test_collection;--\", \"large_data\", \"special_chars_collection\", \"binary_data_collection\", \"nonexistent_collection\", \"a_very_long_collection_name_that_exceeds_normal_limits_and_might_cause_issues\", \"users\"]"
        },
        "execution_time": 0.005039215087890625,
        "is_functional_test": true
      },
      {
        "case_name": "Verify Expected Collections Exist",
        "purpose": "确认返回的集合列表中包含预期的集合（如users, products等）",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "[\"a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\", \"new_collection\", \"test_collection\", \"empty_docs\", \"invalid/collection*name\", \"user_profiles\", \"long_key_collection\", \"test_collection'; DROP COLLECTION test_collection;--\", \"large_data\", \"special_chars_collection\", \"binary_data_collection\", \"nonexistent_collection\", \"a_very_long_collection_name_that_exceeds_normal_limits_and_might_cause_issues\", \"users\"]"
        },
        "execution_time": 0.004959583282470703,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Collection List Check",
        "purpose": "测试当指定数据库中没有集合时，工具是否能正确返回空数组",
        "args": {
          "database_name": "empty_db"
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.009045600891113281,
        "is_functional_test": true
      },
      {
        "case_name": "Collection Listing Performance Test",
        "purpose": "验证在数据库中存在大量集合的情况下，工具能否正常响应并完整列出",
        "args": {
          "database_name": "large_db"
        },
        "response": {
          "result": "[\"long_key_collection\", \"large_collection\"]"
        },
        "execution_time": 0.007734537124633789,
        "is_functional_test": true
      },
      {
        "case_name": "Unauthorized Access to Database",
        "purpose": "测试无权限访问特定数据库时的行为",
        "args": {
          "database_name": "restricted_db"
        },
        "response": {
          "result": "[\"secure_collection\"]"
        },
        "execution_time": 0.007482290267944336,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Database Name Handling",
        "purpose": "测试传入非法数据库名称时工具的错误处理能力",
        "args": {
          "database_name": "invalid/database*name"
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_list_collections: Failed to list collections: database names cannot contain the character '/'"
        },
        "execution_time": 0.0037355422973632812,
        "is_functional_test": false
      },
      {
        "case_name": "Non-existent Database Handling",
        "purpose": "测试当指定的数据库不存在时工具的响应",
        "args": {
          "database_name": "does_not_exist_db"
        },
        "response": {
          "result": "[\"users\", \"new_collection\", \"test_collection\"]"
        },
        "execution_time": 0.005007266998291016,
        "is_functional_test": false
      },
      {
        "case_name": "MongoDB Connection Failure Handling",
        "purpose": "模拟MongoDB连接失败情况下的错误处理机制",
        "args": {
          "database_name": "offline_db"
        },
        "response": {
          "result": "[\"users\"]"
        },
        "execution_time": 0.005001068115234375,
        "is_functional_test": false
      }
    ],
    "mcp_insert_document": [
      {
        "case_name": "Basic Document Insertion",
        "purpose": "验证工具能够正确将文档插入到指定的数据库和集合中",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "document": {
            "name": "Alice",
            "age": 30
          }
        },
        "response": {
          "result": "\"6875087c3c38208f1c3312c6\""
        },
        "execution_time": 0.005003452301025391,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document into Non-Existent Collection",
        "purpose": "测试在目标集合不存在时，工具是否能自动创建并插入文档",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "document": {
            "username": "new_user",
            "email": "new@example.com"
          }
        },
        "response": {
          "result": "\"6875087c3c38208f1c3312c7\""
        },
        "execution_time": 0.007996320724487305,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document with Special Characters in Database Name",
        "purpose": "验证工具是否支持包含特殊字符的数据库名称",
        "args": {
          "database_name": "db@#_\\u6d4b\\u8bd5",
          "collection_name": "users",
          "document": {
            "key": "value_with_特殊字符"
          }
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_insert_document: Failed to insert document: database names cannot contain the character '\\\\'"
        },
        "execution_time": 0.0069997310638427734,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Large Document",
        "purpose": "测试插入一个较大的文档以验证系统处理能力",
        "args": {
          "database_name": "large_db",
          "collection_name": "large_data",
          "document": {
            "data": "A very large string that simulates a big document being inserted into MongoDB for performance and capacity testing."
          }
        },
        "response": {
          "result": "\"6875087c3c38208f1c3312c8\""
        },
        "execution_time": 0.01900029182434082,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document into Restricted Database",
        "purpose": "测试向受权限限制的数据库中插入文档的行为",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "secure_collection",
          "document": {
            "secret_key": "top_secret_value"
          }
        },
        "response": {
          "result": "\"6875087c3c38208f1c3312c9\""
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      },
      {
        "case_name": "Insert Invalid Document Type",
        "purpose": "测试传入非字典类型的文档是否会引发ValueError",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "document": "This is not a dictionary"
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_insert_document: 1 validation error for mcp_insert_documentArguments\ndocument\n  Input should be a valid dictionary [type=dict_type, input_value='This is not a dictionary', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/dict_type"
        },
        "execution_time": 0.00500178337097168,
        "is_functional_test": false
      },
      {
        "case_name": "Insert into Offline Database",
        "purpose": "模拟尝试插入到离线数据库时的错误处理",
        "args": {
          "database_name": "offline_db",
          "collection_name": "users",
          "document": {
            "name": "Bob",
            "age": 25
          }
        },
        "response": {
          "result": "\"6875087c3c38208f1c3312ca\""
        },
        "execution_time": 0.007997512817382812,
        "is_functional_test": false
      },
      {
        "case_name": "Insert Document with Long Key",
        "purpose": "测试插入包含长键名的文档是否正常处理",
        "args": {
          "database_name": "test_db",
          "collection_name": "long_key_collection",
          "document": {
            "a_very_long_key_name_that_may_exceed_normal_mongodb_key_length_limit_and_cause_issues_if_not_handled_properly": "value"
          }
        },
        "response": {
          "result": "\"6875087c3c38208f1c3312cb\""
        },
        "execution_time": 0.006000518798828125,
        "is_functional_test": true
      }
    ],
    "mcp_find_documents": [
      {
        "case_name": "Basic Document Query",
        "purpose": "验证工具能够正确查询指定数据库和集合中的文档，默认无过滤、无投影、无限制",
        "args": {
          "database_name": "test_db",
          "collection_name": "users"
        },
        "response": {
          "result": "[{\"_id\": \"6872ad03424cddc98ebe1c0b\", \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6872bc93b11f255c82054b2a\", \"name\": \"John\", \"age\": 35, \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6872bc93b11f255c82054b2c\", \"user@name\": \"Eve\", \"age#\": 28, \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6872bc93b11f255c82054b2d\", \"a_very_long_key_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\": \"value\", \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6872bc93b11f255c82054b2e\", \"name\": \"Invalid\", \"age\": \"thirty\", \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6874f8d7935c390f10319632\", \"name\": \"Alice\", \"age\": 30}, {\"_id\": \"6875002364da856800f5cacb\", \"name\": \"Alice\", \"age\": 30}, {\"_id\": \"687504276a35f1f5a6f322c1\", \"name\": \"Alice\", \"age\": 30}, {\"_id\": \"687504276a35f1f5a6f322c4\", \"user#id\": 1, \"full-name\": \"Frank Lin\"}, {\"_id\": \"687504276a35f1f5a6f322c5\", \"name\": \"\\u5f20\\u4e09\", \"introduction\": \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\\u7a0b\\u5e08\"}, {\"_id\": \"6875087c3c38208f1c3312c6\", \"name\": \"Alice\", \"age\": 30}]"
        },
        "execution_time": 0.006000995635986328,
        "is_functional_test": true
      },
      {
        "case_name": "Document Query with Filter",
        "purpose": "验证工具能够正确应用查询过滤条件，例如查询年龄大于25的用户",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "age": {
              "$gt": 25
            }
          }
        },
        "response": {
          "result": "[{\"_id\": \"6872bc93b11f255c82054b2a\", \"name\": \"John\", \"age\": 35, \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6874f8d7935c390f10319632\", \"name\": \"Alice\", \"age\": 30}, {\"_id\": \"6875002364da856800f5cacb\", \"name\": \"Alice\", \"age\": 30}, {\"_id\": \"687504276a35f1f5a6f322c1\", \"name\": \"Alice\", \"age\": 30}, {\"_id\": \"6875087c3c38208f1c3312c6\", \"name\": \"Alice\", \"age\": 30}]"
        },
        "execution_time": 0.005999326705932617,
        "is_functional_test": true
      },
      {
        "case_name": "Document Query with Projection",
        "purpose": "验证工具能够正确应用字段投影，例如仅返回name字段且排除_id字段",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "age": {
              "$gt": 25
            }
          },
          "projection": {
            "_id": 0,
            "name": 1
          }
        },
        "response": {
          "result": "[{\"name\": \"John\"}, {\"name\": \"Alice\"}, {\"name\": \"Alice\"}, {\"name\": \"Alice\"}, {\"name\": \"Alice\"}]"
        },
        "execution_time": 0.00699925422668457,
        "is_functional_test": true
      },
      {
        "case_name": "Document Query with Limit",
        "purpose": "验证工具能够正确限制返回文档数量，例如最多返回2个文档",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "limit": 2
        },
        "response": {
          "result": "[{\"_id\": \"6872ad03424cddc98ebe1c0b\", \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6872bc93b11f255c82054b2a\", \"name\": \"John\", \"age\": 35, \"last_modified\": \"2023-10-01\"}]"
        },
        "execution_time": 0.005998849868774414,
        "is_functional_test": true
      },
      {
        "case_name": "SQL Injection Attempt in Collection Name",
        "purpose": "测试工具是否能够正确处理非法集合名称，如包含SQL注入风险的名称",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection'; DROP COLLECTION test_collection;--"
        },
        "response": {
          "result": "[{\"_id\": \"68710cc7ea7bb66ae3410460\", \"key\": \"injection attempt\"}]"
        },
        "execution_time": 0.007999897003173828,
        "is_functional_test": false
      },
      {
        "case_name": "Query with Invalid Database Name",
        "purpose": "测试工具对非法数据库名称的处理能力，如包含非法字符的数据库名",
        "args": {
          "database_name": "invalid/database*name",
          "collection_name": "users"
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_find_documents: Failed to find documents: database names cannot contain the character '/'"
        },
        "execution_time": 0.0050029754638671875,
        "is_functional_test": false
      },
      {
        "case_name": "Query Non-existent Collection",
        "purpose": "测试当指定集合不存在时，工具是否能正确返回空数组",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection"
        },
        "response": {
          "result": "[{\"_id\": \"686395fe8bb57d80cdb0c4a3\", \"key\": \"updated_value\"}, {\"_id\": \"68710caed665c89a8d5748ba\", \"name\": \"Alice\", \"email\": \"alice@example.com\"}, {\"_id\": \"68710cc7ea7bb66ae341045d\", \"data\": \"new collection should be created\"}, {\"_id\": \"687258207c1609156ee10ee2\", \"key\": \"value\"}, {\"_id\": \"687259cf14abe8d498d2f50a\", \"key\": \"value\"}, {\"_id\": \"68729041dc66f8998dec5876\", \"key\": \"value\"}, {\"_id\": \"687291c80d1fbb52f4c8c1b4\", \"key\": \"value\"}, {\"_id\": \"6872ad03424cddc98ebe1c09\", \"name\": \"Bob\", \"age\": 30}, {\"_id\": \"6872b2dfbde7bc28413c274f\", \"key\": \"value\"}, {\"_id\": \"6872bc93b11f255c82054b2b\", \"name\": \"Charlie\", \"age\": 35}, {\"_id\": \"6872bf1e0e2fc95fbcc97acf\", \"key\": \"value\"}, {\"_id\": \"6872c264cf57d11985b19217\", \"key\": \"value\"}, {\"_id\": \"6874f8d7935c390f10319633\", \"username\": \"new_user\"}, {\"_id\": \"6875087c3c38208f1c3312c7\", \"username\": \"new_user\", \"email\": \"new@example.com\"}]"
        },
        "execution_time": 0.006002664566040039,
        "is_functional_test": true
      },
      {
        "case_name": "Query with Special Characters in Projection",
        "purpose": "测试工具是否能正确处理带有特殊字符的投影字段名",
        "args": {
          "database_name": "test_db",
          "collection_name": "special_chars_collection",
          "projection": {
            "field@#_with_special_chars": 1
          }
        },
        "response": {
          "result": "[{\"_id\": \"6862968254d99b844f558b8c\"}, {\"_id\": \"68629b068d98df9ef544567e\"}, {\"_id\": \"6863b713e63a60df7d66176f\"}, {\"_id\": \"687258207c1609156ee10ee3\"}, {\"_id\": \"687293902f99e4d325c71fb8\"}, {\"_id\": \"6875002364da856800f5cacd\"}]"
        },
        "execution_time": 0.005997180938720703,
        "is_functional_test": true
      }
    ],
    "mcp_update_document": [
      {
        "case_name": "Basic Document Update",
        "purpose": "验证工具能够正确更新单个匹配文档的基本字段值",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "username": "test_user"
          },
          "update_data": {
            "$set": {
              "status": "active"
            }
          },
          "multi": false
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.004000663757324219,
        "is_functional_test": true
      },
      {
        "case_name": "Multi Document Update",
        "purpose": "验证工具在multi=True时能够更新所有匹配文档的指定字段",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "age": {
              "$lt": 30
            }
          },
          "update_data": {
            "$set": {
              "status": "inactive"
            }
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.007999420166015625,
        "is_functional_test": true
      },
      {
        "case_name": "Update With Invalid Database Name",
        "purpose": "测试使用非法数据库名称时工具的参数校验能力",
        "args": {
          "database_name": "invalid/database*name",
          "collection_name": "users",
          "filter_query": {
            "status": "pending"
          },
          "update_data": {
            "$set": {
              "updated": true
            }
          },
          "multi": false
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_update_document: Failed to update documents: database names cannot contain the character '/'"
        },
        "execution_time": 0.004001140594482422,
        "is_functional_test": false
      },
      {
        "case_name": "Update Non-existent Collection",
        "purpose": "验证工具对不存在集合的更新操作处理机制",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "filter_query": {
            "id": 1
          },
          "update_data": {
            "$set": {
              "new_field": "value"
            }
          },
          "multi": false
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.005149364471435547,
        "is_functional_test": true
      },
      {
        "case_name": "Special Characters In Update Data",
        "purpose": "测试包含特殊字符的更新数据能否被正确处理",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "username": "special_user"
          },
          "update_data": {
            "$set": {
              "bio": "Hello, 世界! @#$_-+=<>\"'`"
            }
          },
          "multi": false
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.008008480072021484,
        "is_functional_test": true
      },
      {
        "case_name": "Unauthorized Database Access",
        "purpose": "测试无权限访问受保护数据库时的行为",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "secure_collection",
          "filter_query": {
            "secret": true
          },
          "update_data": {
            "$set": {
              "access_level": 2
            }
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": false
      },
      {
        "case_name": "MongoDB Connection Failure Handling",
        "purpose": "模拟MongoDB连接失败情况下的错误处理机制",
        "args": {
          "database_name": "offline_db",
          "collection_name": "users",
          "filter_query": {
            "online_only": true
          },
          "update_data": {
            "$set": {
              "available": false
            }
          },
          "multi": false
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.004999876022338867,
        "is_functional_test": false
      },
      {
        "case_name": "Large Update Operation",
        "purpose": "测试工具处理大数据量更新操作的能力",
        "args": {
          "database_name": "large_db",
          "collection_name": "large_collection",
          "filter_query": {
            "batch_id": "2023Q4"
          },
          "update_data": {
            "$set": {
              "processed": true,
              "processor": "batch_engine_v2",
              "timestamp": "2023-12-31T23:59:59Z"
            }
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.007416963577270508,
        "is_functional_test": true
      }
    ],
    "mcp_delete_document": [
      {
        "case_name": "Basic Document Deletion (Single)",
        "purpose": "验证工具能够正确删除单个匹配文档",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "status": "inactive"
          },
          "multi": false
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.00899958610534668,
        "is_functional_test": true
      },
      {
        "case_name": "Basic Document Deletion (Multiple)",
        "purpose": "验证工具能够正确删除多个匹配文档",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "status": "inactive"
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.010003089904785156,
        "is_functional_test": true
      },
      {
        "case_name": "Delete With Non-existent Database",
        "purpose": "测试当指定的数据库不存在时，工具是否能正确处理错误",
        "args": {
          "database_name": "does_not_exist_db",
          "collection_name": "users",
          "filter_query": {
            "status": "inactive"
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.008000612258911133,
        "is_functional_test": false
      },
      {
        "case_name": "Delete With Invalid Collection Name",
        "purpose": "测试使用非法集合名称时工具的错误处理能力",
        "args": {
          "database_name": "test_db",
          "collection_name": "invalid/collection*name",
          "filter_query": {
            "status": "inactive"
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.011997699737548828,
        "is_functional_test": false
      },
      {
        "case_name": "Delete From Empty Collection",
        "purpose": "验证从空集合中删除文档时工具的行为",
        "args": {
          "database_name": "test_db",
          "collection_name": "empty_docs",
          "filter_query": {
            "status": "inactive"
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.012004613876342773,
        "is_functional_test": true
      },
      {
        "case_name": "Delete With Special Characters In Filter Query",
        "purpose": "测试包含特殊字符的过滤条件是否能被正确解析并执行删除",
        "args": {
          "database_name": "test_db",
          "collection_name": "special_chars_collection",
          "filter_query": {
            "username": "user@#_\\u6d4b\\u8bd5"
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.008998632431030273,
        "is_functional_test": true
      },
      {
        "case_name": "Unauthorized Access To Restricted Collection",
        "purpose": "测试对无权限访问的受限制集合执行删除操作时的行为",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "secure_collection",
          "filter_query": {
            "status": "temp"
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.011998414993286133,
        "is_functional_test": false
      },
      {
        "case_name": "MongoDB Connection Failure During Deletion",
        "purpose": "模拟在删除过程中MongoDB连接失败的情况下的异常处理",
        "args": {
          "database_name": "offline_db",
          "collection_name": "users",
          "filter_query": {
            "status": "inactive"
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.006000041961669922,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 48
}