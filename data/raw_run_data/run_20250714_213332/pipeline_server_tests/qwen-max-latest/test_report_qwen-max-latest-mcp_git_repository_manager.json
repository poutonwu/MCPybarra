{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "qwen-max-latest-mcp_git_repository_manager",
  "server_path": "workspace/pipeline-output-servers/qwen-max-latest/mcp_git_repository_manager/refined/server.py",
  "timestamp": "2025-07-14T21:41:55.137936",
  "tools": [
    {
      "name": "git_init",
      "description": "\n            Initializes a new Git repository in the specified directory.\n\n            Args:\n                repo_path (str): The path where the new Git repository should be initialized.\n\n            Returns:\n                A string confirming the successful initialization of the Git repository.\n\n            Example:\n                git_init(repo_path=\"/path/to/new/repo\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_initArguments",
        "type": "object"
      }
    },
    {
      "name": "git_status",
      "description": "\n            Checks the status of the working tree in the specified Git repository.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n\n            Returns:\n                A string containing the status information of the repository.\n\n            Example:\n                git_status(repo_path=\"/path/to/existing/repo\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          }
        },
        "title": "git_statusArguments",
        "type": "object"
      }
    },
    {
      "name": "git_add",
      "description": "\n            Adds files to the staging area of the specified Git repository.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                file_pattern (str): The pattern or specific file(s) to add to the staging area.\n\n            Returns:\n                A string confirming the successful addition of files to the staging area.\n\n            Example:\n                git_add(repo_path=\"/path/to/existing/repo\", file_pattern=\"*.py\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "file_pattern": {
            "default": "*",
            "title": "File Pattern",
            "type": "string"
          }
        },
        "title": "git_addArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_unstaged",
      "description": "\n            Shows changes in the working tree not yet staged for the next commit.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n\n            Returns:\n                A string containing the diff of unstaged changes.\n\n            Example:\n                git_diff_unstaged(repo_path=\"/path/to/existing/repo\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          }
        },
        "title": "git_diff_unstagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_staged",
      "description": "\n            Shows changes between the staging area and the latest commit.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n\n            Returns:\n                A string containing the diff of staged changes.\n\n            Example:\n                git_diff_staged(repo_path=\"/path/to/existing/repo\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          }
        },
        "title": "git_diff_stagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff",
      "description": "\n            Compares differences between two branches or commits.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                source_ref (str): The source branch or commit hash.\n                target_ref (str): The target branch or commit hash.\n\n            Returns:\n                A string containing the diff between the specified references.\n\n            Example:\n                git_diff(repo_path=\"/path/to/existing/repo\", source_ref=\"main\", target_ref=\"feature-branch\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "source_ref": {
            "default": "main",
            "title": "Source Ref",
            "type": "string"
          },
          "target_ref": {
            "default": "feature-branch",
            "title": "Target Ref",
            "type": "string"
          }
        },
        "title": "git_diffArguments",
        "type": "object"
      }
    },
    {
      "name": "git_commit",
      "description": "\n            Records changes to the repository by creating a new commit.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                message (str): The commit message describing the changes.\n\n            Returns:\n                A string confirming the successful creation of a new commit.\n\n            Example:\n                git_commit(repo_path=\"/path/to/existing/repo\", message=\"Add new feature\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "message": {
            "default": "Commit changes",
            "title": "Message",
            "type": "string"
          }
        },
        "title": "git_commitArguments",
        "type": "object"
      }
    },
    {
      "name": "git_reset",
      "description": "\n            Removes files from the staging area without altering the working directory.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                file_pattern (str): The pattern or specific file(s) to unstage.\n\n            Returns:\n                A string confirming the successful unstaging of files.\n\n            Example:\n                git_reset(repo_path=\"/path/to/existing/repo\", file_pattern=\"*.py\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "file_pattern": {
            "default": "*",
            "title": "File Pattern",
            "type": "string"
          }
        },
        "title": "git_resetArguments",
        "type": "object"
      }
    },
    {
      "name": "git_log",
      "description": "\n            Displays the commit history of the specified Git repository.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n\n            Returns:\n                A string containing the commit history.\n\n            Example:\n                git_log(repo_path=\"/path/to/existing/repo\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          }
        },
        "title": "git_logArguments",
        "type": "object"
      }
    },
    {
      "name": "git_create_branch",
      "description": "\n            Creates a new branch in the specified Git repository.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                branch_name (str): The name of the new branch to create.\n\n            Returns:\n                A string confirming the successful creation of the new branch.\n\n            Example:\n                git_create_branch(repo_path=\"/path/to/existing/repo\", branch_name=\"new-feature\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "branch_name": {
            "default": "new-feature",
            "title": "Branch Name",
            "type": "string"
          }
        },
        "title": "git_create_branchArguments",
        "type": "object"
      }
    },
    {
      "name": "git_checkout",
      "description": "\n            Switches the current working branch to the specified branch.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                branch_name (str): The name of the branch to switch to.\n\n            Returns:\n                A string confirming the successful checkout of the specified branch.\n\n            Example:\n                git_checkout(repo_path=\"/path/to/existing/repo\", branch_name=\"feature-branch\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "branch_name": {
            "default": "feature-branch",
            "title": "Branch Name",
            "type": "string"
          }
        },
        "title": "git_checkoutArguments",
        "type": "object"
      }
    },
    {
      "name": "git_show",
      "description": "\n            Displays detailed information about a specific commit.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                commit_hash (str): The hash of the commit to display details for.\n\n            Returns:\n                A string containing the detailed information about the specified commit.\n\n            Example:\n                git_show(repo_path=\"/path/to/existing/repo\", commit_hash=\"a1b2c3d4\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "commit_hash": {
            "default": "a1b2c3d4",
            "title": "Commit Hash",
            "type": "string"
          }
        },
        "title": "git_showArguments",
        "type": "object"
      }
    },
    {
      "name": "text_write_file",
      "description": "\n            Writes content to a specified file. If the file exists, it will be overwritten.\n\n            Args:\n                file_path (str): The path to the file that will be created or overwritten.\n                content (str): The content to write into the file.\n\n            Returns:\n                A success message indicating the file was written.\n\n            Raises:\n                ValueError: If any of the inputs are invalid.\n\n            Example:\n                text_write_file(file_path=\"/tmp/test.txt\", content=\"Hello World\")\n            ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "content"
        ],
        "title": "text_write_fileArguments",
        "type": "object"
      }
    },
    {
      "name": "text_append_to_file",
      "description": "\n            Appends content to a specified file. If the file does not exist, it will be created.\n\n            Args:\n                file_path (str): The path to the file that will be appended to.\n                content (str): The content to append to the file.\n\n            Returns:\n                A success message indicating the file was appended to.\n\n            Raises:\n                ValueError: If any of the inputs are invalid.\n\n            Example:\n                text_append_to_file(file_path=\"/tmp/test.txt\", content=\"\nAdditional line\")\n            ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "content"
        ],
        "title": "text_append_to_fileArguments",
        "type": "object"
      }
    },
    {
      "name": "text_extract_regex",
      "description": "\n            Extracts the first match of a regular expression pattern from the given text.\n\n            Args:\n                text (str): The text to search within.\n                pattern (str): The regular expression pattern to search for.\n\n            Returns:\n                A string containing the matched group, or an error if no match is found.\n\n            Raises:\n                ValueError: If any of the inputs are invalid or no match is found.\n\n            Example:\n                text_extract_regex(text=\"Commit: a1b2c3d4\", pattern=\"commit (\\w+)\")\n            ",
      "args_schema": {
        "properties": {
          "text": {
            "title": "Text",
            "type": "string"
          },
          "pattern": {
            "title": "Pattern",
            "type": "string"
          }
        },
        "required": [
          "text",
          "pattern"
        ],
        "title": "text_extract_regexArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "git_init": [
      {
        "case_name": "Initialize Git Repository in New Directory",
        "purpose": "验证工具可以在指定的新目录中正确初始化一个Git仓库。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir\\git_init_test"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Initialized Git repository at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\newdir\\\\git_init_test\"}"
        },
        "execution_time": 0.1549973487854004,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository in Existing Directory",
        "purpose": "验证工具可以在已存在的目录中初始化Git仓库而不报错。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Initialized Git repository at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\"}"
        },
        "execution_time": 0.16900277137756348,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository with Special Characters in Path",
        "purpose": "验证路径中包含特殊字符时，工具仍能成功初始化Git仓库。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$_dir"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Initialized Git repository at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@#$_dir\"}"
        },
        "execution_time": 0.16004300117492676,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository in Read-Only Directory",
        "purpose": "测试在只读目录中初始化Git仓库是否会失败并返回合理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Initialized Git repository at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\"}"
        },
        "execution_time": 0.15895700454711914,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to Initialize Git Repository with Empty Path",
        "purpose": "验证空路径参数是否被正确校验并返回错误信息。",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"repo_path must be a non-empty string.\"}"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository with Very Long Path",
        "purpose": "验证工具对超长路径的处理能力，确保不会因路径长度导致崩溃或异常。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_that_might_cause_issues_if_system_has_restrictions"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Initialized Git repository at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_directory_name_that_might_cause_issues_if_system_has_restrictions\"}"
        },
        "execution_time": 0.19390320777893066,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository in Nested Subdirectory",
        "purpose": "验证工具可以正确在嵌套子目录中初始化Git仓库。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir\\subdir\\nested_repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Initialized Git repository at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\newdir\\\\subdir\\\\nested_repo\"}"
        },
        "execution_time": 0.16362214088439941,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository in System Root (Security Test)",
        "purpose": "尝试在系统根目录初始化Git仓库以测试潜在的安全限制。",
        "args": {
          "repo_path": "C:\\"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Initialized Git repository at C:\\\\\"}"
        },
        "execution_time": 0.26830005645751953,
        "is_functional_test": false
      }
    ],
    "text_write_file": [
      {
        "case_name": "Write Content to New File",
        "purpose": "验证工具能够将指定内容写入一个新创建的文件中。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_output.txt",
          "content": "This is a new test file content."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Wrote content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_output.txt\"}"
        },
        "execution_time": 0.004230499267578125,
        "is_functional_test": true
      },
      {
        "case_name": "Overwrite Existing File Content",
        "purpose": "验证工具能够正确覆盖已存在的文件内容。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt",
          "content": "This is the overwritten content."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Wrote content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\test_output.txt\"}"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": true
      },
      {
        "case_name": "Write Empty Content to File",
        "purpose": "验证工具是否允许写入空内容到文件中。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_test.txt",
          "content": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"content must be a non-empty string.\"}"
        },
        "execution_time": 0.008000850677490234,
        "is_functional_test": true
      },
      {
        "case_name": "Write with Special Characters in File Path",
        "purpose": "验证包含特殊字符的路径是否能被正确处理并成功写入文件。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$_dir\\special_write.txt",
          "content": "Content written to special path."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Wrote content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@#$_dir\\\\special_write.txt\"}"
        },
        "execution_time": 0.004528999328613281,
        "is_functional_test": true
      },
      {
        "case_name": "Write to Read-Only Directory",
        "purpose": "测试尝试在只读目录中写入文件是否会失败或抛出合理错误。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\readonly_write_attempt.txt",
          "content": "Attempting to write to read-only directory."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Wrote content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\\\\readonly_write_attempt.txt\"}"
        },
        "execution_time": 0.007002830505371094,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt Write with Empty File Path",
        "purpose": "验证当提供空文件路径时，工具是否抛出参数校验错误。",
        "args": {
          "file_path": "",
          "content": "This should not be written."
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"file_path must be a non-empty string.\"}"
        },
        "execution_time": 0.003000497817993164,
        "is_functional_test": false
      },
      {
        "case_name": "Write to Very Long File Path",
        "purpose": "验证工具是否能处理超长路径并成功写入文件。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_that_might_cause_issues_if_system_has_restrictions\\longpath_test.txt",
          "content": "Content for long path test."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Wrote content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_directory_name_that_might_cause_issues_if_system_has_restrictions\\\\longpath_test.txt\"}"
        },
        "execution_time": 0.0040056705474853516,
        "is_functional_test": true
      },
      {
        "case_name": "Write to System Root Directory (Security Test)",
        "purpose": "尝试向系统根目录写入文件以测试权限和安全限制。",
        "args": {
          "file_path": "C:\\test_root_write.txt",
          "content": "Testing write access to system root."
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"[Errno 13] Permission denied: 'C:\\\\\\\\test_root_write.txt'\"}"
        },
        "execution_time": 0.005476474761962891,
        "is_functional_test": false
      }
    ],
    "git_status": [
      {
        "case_name": "Check Status of Initialized Git Repository",
        "purpose": "验证工具能够正确获取已初始化Git仓库的工作树状态。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"On branch master\\n\\nNo commits yet\\n\\nUntracked files:\\n  (use \\\"git add <file>...\\\" to include in what will be committed)\\n\\t68078d40e08a19b806665fee_1745325376_auto_driving_system.csv\\n\\tapp.ico\\n\\tcopied_hit.png\\n\\tcs.csv\\n\\tdoc@#$.docx\\n\\tempty_content.txt\\n\\tincludeempty.csv\\n\\tinspector.zip\\n\\tinvalid_extension.txt\\n\\tmodules.xml\\n\\tnature.jpeg\\n\\tnew_document.docx\\n\\tnew_document_copy.docx\\n\\tnew_test_output.txt\\n\\tnewdir/\\n\\tnonname.html\\n\\tpaper1.pdf\\n\\tpresent.html\\n\\tre2.doc\\n\\treadonly_dir/\\n\\tsample1.pdf\\n\\tspreadsheet.csv\\n\\tswe.pptx\\n\\ttest_output.txt\\n\\ttmp.csv\\n\\twhole_framework.pdf\\n\\txue.jpg\\n\\t~$ample1.pdf\\n\\t~$w_document_copy.docx\\n\\nnothing added to commit but untracked files present (use \\\"git add\\\" to track)\"}"
        },
        "execution_time": 0.226210355758667,
        "is_functional_test": true
      },
      {
        "case_name": "Check Status with Default Repo Path",
        "purpose": "验证当未提供repo_path参数时，工具是否使用最近一次初始化的仓库路径进行状态检查。",
        "args": {},
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git status\\n  stderr: 'fatal: detected dubious ownership in repository at 'C:/'\\n'C:/' is owned by:\\n\\tNT SERVICE/TrustedInstaller (S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)\\nbut the current user is:\\n\\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\\nTo add an exception for this directory, call:\\n\\n\\tgit config --global --add safe.directory C:/'\"}"
        },
        "execution_time": 0.23399949073791504,
        "is_functional_test": true
      },
      {
        "case_name": "Check Status in Nested Subdirectory Git Repository",
        "purpose": "验证工具能正确获取嵌套子目录中Git仓库的状态信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir\\subdir\\nested_repo\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"On branch master\\n\\nNo commits yet\\n\\nnothing to commit (create/copy files and use \\\"git add\\\" to track)\"}"
        },
        "execution_time": 0.22003936767578125,
        "is_functional_test": true
      },
      {
        "case_name": "Check Status of Read-Only Git Repository",
        "purpose": "测试工具在尝试读取只读Git仓库状态时的行为是否符合预期。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\.git"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"On branch master\\n\\nNo commits yet\\n\\nUntracked files:\\n  (use \\\"git add <file>...\\\" to include in what will be committed)\\n\\tconverted_image.png\\n\\tcopied_document.docx\\n\\ticon_64x64.png\\n\\tlocked_file.docx\\n\\tlocked_thresholded.png\\n\\treadonly_image.jpg\\n\\treadonly_screenshot.png\\n\\treadonly_write_attempt.txt\\n\\ttest_readonly.txt\\n\\t~$cked_file.docx\\n\\nnothing added to commit but untracked files present (use \\\"git add\\\" to track)\"}"
        },
        "execution_time": 0.21572279930114746,
        "is_functional_test": true
      },
      {
        "case_name": "Check Status with Special Characters in Git Path",
        "purpose": "验证包含特殊字符的Git仓库路径是否能被正确处理并返回状态信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$_dir\\.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@#$_dir\\\\.git\"}"
        },
        "execution_time": 0.005997896194458008,
        "is_functional_test": true
      },
      {
        "case_name": "Check Status of Non-Existent Git Repository",
        "purpose": "验证当提供的Git仓库路径不存在时，工具是否能返回合理错误提示。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_repo\\.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_repo\\\\.git\"}"
        },
        "execution_time": 0.004001617431640625,
        "is_functional_test": false
      },
      {
        "case_name": "Check Status with Empty Repo Path",
        "purpose": "验证空路径参数是否被正确校验并返回错误信息。",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git status\\n  stderr: 'fatal: detected dubious ownership in repository at 'C:/'\\n'C:/' is owned by:\\n\\tNT SERVICE/TrustedInstaller (S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)\\nbut the current user is:\\n\\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\\nTo add an exception for this directory, call:\\n\\n\\tgit config --global --add safe.directory C:/'\"}"
        },
        "execution_time": 0.21263647079467773,
        "is_functional_test": false
      },
      {
        "case_name": "Check Status of System Root Git Repository (Security Test)",
        "purpose": "尝试获取系统根目录中的Git仓库状态以测试潜在的安全限制。",
        "args": {
          "repo_path": "C:\\\\.git"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git status\\n  stderr: 'fatal: detected dubious ownership in repository at 'C:/'\\n'C:/' is owned by:\\n\\tNT SERVICE/TrustedInstaller (S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)\\nbut the current user is:\\n\\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\\nTo add an exception for this directory, call:\\n\\n\\tgit config --global --add safe.directory C:/'\"}"
        },
        "execution_time": 0.1991109848022461,
        "is_functional_test": false
      }
    ],
    "git_add": [
      {
        "case_name": "Add Specific File to Staging Area",
        "purpose": "验证工具能够将指定的单个文件添加到Git仓库的暂存区。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_pattern": "test_output.txt"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Added test_output.txt to staging area.\"}"
        },
        "execution_time": 0.005023002624511719,
        "is_functional_test": true
      },
      {
        "case_name": "Add All Files Using Default Pattern",
        "purpose": "验证使用默认通配符 '*' 时，工具能够将仓库中所有文件添加到暂存区。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_pattern": "*"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Added * to staging area.\"}"
        },
        "execution_time": 0.3570425510406494,
        "is_functional_test": true
      },
      {
        "case_name": "Add Files with Wildcard Pattern",
        "purpose": "验证使用通配符模式（如 *.py）时，工具能正确识别并添加匹配的文件。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_pattern": "*.txt"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Added *.txt to staging area.\"}"
        },
        "execution_time": 0.059999942779541016,
        "is_functional_test": true
      },
      {
        "case_name": "Add Files Without Specifying Repository Path",
        "purpose": "验证在未提供 repo_path 参数时，工具是否使用之前初始化的仓库路径。",
        "args": {
          "repo_path": null,
          "file_pattern": "test_output.txt"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: 1 validation error for git_addArguments\nrepo_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.007002592086791992,
        "is_functional_test": true
      },
      {
        "case_name": "Add File in Read-Only Repository",
        "purpose": "验证在只读Git仓库中添加文件时，工具是否能正确处理权限限制并返回错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "file_pattern": "readonly_write_attempt.txt"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Added readonly_write_attempt.txt to staging area.\"}"
        },
        "execution_time": 0.006999015808105469,
        "is_functional_test": false
      },
      {
        "case_name": "Add Files with Special Characters in File Pattern",
        "purpose": "验证包含特殊字符的文件模式是否能被正确处理并添加匹配的文件。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_pattern": "doc@#$.docx"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Added doc@#$.docx to staging area.\"}"
        },
        "execution_time": 0.012004375457763672,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Add with Empty File Pattern",
        "purpose": "验证空文件模式参数是否被正确校验并返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_pattern": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"file_pattern must be a non-empty string.\"}"
        },
        "execution_time": 0.003995418548583984,
        "is_functional_test": false
      },
      {
        "case_name": "Add Files in Nested Subdirectory Repository",
        "purpose": "验证工具可以正确在嵌套子目录中的Git仓库中添加文件。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir\\subdir\\nested_repo",
          "file_pattern": "test_nested.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\newdir\\\\subdir\\\\nested_repo\"}"
        },
        "execution_time": 0.005001068115234375,
        "is_functional_test": true
      }
    ],
    "git_diff_unstaged": [
      {
        "case_name": "Show Unstaged Changes in Initialized Repo",
        "purpose": "验证在已初始化的Git仓库中可以正确显示未暂存的更改。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"diff --git a/newdir/subdir/copied_document.docx b/newdir/subdir/copied_document.docx\\nindex e255588..ca96720 100644\\n--- a/newdir/subdir/copied_document.docx\\n+++ b/newdir/subdir/copied_document.docx\\n@@ -2,3 +2,4 @@\\n \\n New Value\\n This is a nested directory test paragraph.Nested Section\\n+This is a nested directory test footnote.\\n\\\\ No newline at end of file\"}"
        },
        "execution_time": 2.2579309940338135,
        "is_functional_test": true
      },
      {
        "case_name": "Show Unstaged Changes Without Specifying Path Uses Default",
        "purpose": "验证当未指定 repo_path 参数时，工具是否使用默认路径（最近初始化的仓库）。",
        "args": {},
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git diff\\n  stderr: 'warning: Not a git repository. Use --no-index to compare two paths outside a working tree\\nusage: git diff --no-index [<options>] <path> <path>\\n\\nDiff output format options\\n    -p, --patch           generate patch\\n    -s, --no-patch        suppress diff output\\n    -u                    generate patch\\n    -U, --unified[=<n>]   generate diffs with <n> lines context\\n    -W, --[no-]function-context\\n                          generate diffs with <n> lines context\\n    --raw                 generate the diff in raw format\\n    --patch-with-raw      synonym for '-p --raw'\\n    --patch-with-stat     synonym for '-p --stat'\\n    --numstat             machine friendly --stat\\n    --shortstat           output only the last line of --stat\\n    -X, --dirstat[=<param1>,<param2>...]\\n                          output the distribution of relative amount of changes for each sub-directory\\n    --cumulative          synonym for --dirstat=cumulative\\n    --dirstat-by-file[=<param1>,<param2>...]\\n                          synonym for --dirstat=files,<param1>,<param2>...\\n    --check               warn if changes introduce conflict markers or whitespace errors\\n    --summary             condensed summary such as creations, renames and mode changes\\n    --name-only           show only names ...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计7614字符，剩余6214字符"
        },
        "execution_time": 0.1725754737854004,
        "is_functional_test": true
      },
      {
        "case_name": "Show Unstaged Changes in Read-Only Directory",
        "purpose": "测试尝试在只读目录中查看 unstaged changes 是否失败或返回合理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\"}"
        },
        "execution_time": 0.16700100898742676,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt with Empty Repo Path",
        "purpose": "验证空路径参数是否被正确校验并返回错误信息。",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git diff\\n  stderr: 'warning: Not a git repository. Use --no-index to compare two paths outside a working tree\\nusage: git diff --no-index [<options>] <path> <path>\\n\\nDiff output format options\\n    -p, --patch           generate patch\\n    -s, --no-patch        suppress diff output\\n    -u                    generate patch\\n    -U, --unified[=<n>]   generate diffs with <n> lines context\\n    -W, --[no-]function-context\\n                          generate diffs with <n> lines context\\n    --raw                 generate the diff in raw format\\n    --patch-with-raw      synonym for '-p --raw'\\n    --patch-with-stat     synonym for '-p --stat'\\n    --numstat             machine friendly --stat\\n    --shortstat           output only the last line of --stat\\n    -X, --dirstat[=<param1>,<param2>...]\\n                          output the distribution of relative amount of changes for each sub-directory\\n    --cumulative          synonym for --dirstat=cumulative\\n    --dirstat-by-file[=<param1>,<param2>...]\\n                          synonym for --dirstat=files,<param1>,<param2>...\\n    --check               warn if changes introduce conflict markers or whitespace errors\\n    --summary             condensed summary such as creations, renames and mode changes\\n    --name-only           show only names ...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计7614字符，剩余6214字符"
        },
        "execution_time": 0.14699792861938477,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Changes with Special Characters in Path",
        "purpose": "验证包含特殊字符的仓库路径是否能被正确处理并显示未暂存更改。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$_dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@#$_dir\"}"
        },
        "execution_time": 0.004999876022338867,
        "is_functional_test": true
      },
      {
        "case_name": "Show Unstaged Changes in Nested Subdirectory",
        "purpose": "验证工具可以正确在嵌套子目录中的 Git 仓库中显示未暂存更改。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir\\subdir\\nested_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\newdir\\\\subdir\\\\nested_repo\"}"
        },
        "execution_time": 0.0040013790130615234,
        "is_functional_test": true
      },
      {
        "case_name": "Show Unstaged Changes in System Root (Security Test)",
        "purpose": "尝试在系统根目录中运行 git_diff_unstaged 命令以测试潜在的安全限制。",
        "args": {
          "repo_path": "C:\\"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git diff\\n  stderr: 'warning: Not a git repository. Use --no-index to compare two paths outside a working tree\\nusage: git diff --no-index [<options>] <path> <path>\\n\\nDiff output format options\\n    -p, --patch           generate patch\\n    -s, --no-patch        suppress diff output\\n    -u                    generate patch\\n    -U, --unified[=<n>]   generate diffs with <n> lines context\\n    -W, --[no-]function-context\\n                          generate diffs with <n> lines context\\n    --raw                 generate the diff in raw format\\n    --patch-with-raw      synonym for '-p --raw'\\n    --patch-with-stat     synonym for '-p --stat'\\n    --numstat             machine friendly --stat\\n    --shortstat           output only the last line of --stat\\n    -X, --dirstat[=<param1>,<param2>...]\\n                          output the distribution of relative amount of changes for each sub-directory\\n    --cumulative          synonym for --dirstat=cumulative\\n    --dirstat-by-file[=<param1>,<param2>...]\\n                          synonym for --dirstat=files,<param1>,<param2>...\\n    --check               warn if changes introduce conflict markers or whitespace errors\\n    --summary             condensed summary such as creations, renames and mode changes\\n    --name-only           show only names ...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计7614字符，剩余6214字符"
        },
        "execution_time": 0.14210200309753418,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Changes in Non-Existent Repository",
        "purpose": "验证在不存在的 Git 仓库路径下运行该命令是否会失败并返回合理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_repo\"}"
        },
        "execution_time": 0.002998828887939453,
        "is_functional_test": false
      }
    ],
    "git_commit": [
      {
        "case_name": "Commit Changes in Previously Initialized Repository",
        "purpose": "验证在之前已初始化的仓库中使用默认路径进行提交是否成功。",
        "args": {
          "message": "Default path commit"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"cannot mmap an empty file\"}"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": true
      },
      {
        "case_name": "Commit with Custom Message and Path",
        "purpose": "验证提供自定义路径和提交信息时能否正确创建提交。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Add new feature documentation"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Created new commit: a1e5eedf9f0452e1632484cc34bc298b8a20cd9d\"}"
        },
        "execution_time": 0.2775900363922119,
        "is_functional_test": true
      },
      {
        "case_name": "Commit with Empty Message",
        "purpose": "验证空提交信息是否被替换为默认值或抛出错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"message must be a non-empty string.\"}"
        },
        "execution_time": 0.002997875213623047,
        "is_functional_test": false
      },
      {
        "case_name": "Commit to Non-Git Directory",
        "purpose": "验证尝试向未初始化Git的目录提交是否会失败并返回合理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\non_git_dir",
          "message": "Attempt commit to non-git directory"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\non_git_dir\"}"
        },
        "execution_time": 0.00900125503540039,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Special Characters in Message",
        "purpose": "验证提交信息包含特殊字符时是否能正常处理。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Fix bug #1234 @release"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Created new commit: fbf5c67051db25cd39379754ec9973465a744e51\"}"
        },
        "execution_time": 0.23465561866760254,
        "is_functional_test": true
      },
      {
        "case_name": "Commit to Read-Only Git Repository",
        "purpose": "测试尝试提交到只读Git仓库是否会失败并返回权限错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "message": "Attempt write to read-only repo"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Created new commit: d73a7013842d183765c1c4368ee763504613c8eb\"}"
        },
        "execution_time": 0.2643158435821533,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Very Long Message",
        "purpose": "验证超长提交信息是否能被正确处理而不导致崩溃。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "This is a very long commit message that might exceed typical length limits if the system has restrictions on message size, but we are testing to ensure it can be handled gracefully."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Created new commit: 6f6cda8744150894681ac2b2b4370692526cb572\"}"
        },
        "execution_time": 0.32132840156555176,
        "is_functional_test": true
      },
      {
        "case_name": "Commit to System Root Git Repository (Security Test)",
        "purpose": "尝试提交到系统根目录中的Git仓库以测试潜在的安全限制。",
        "args": {
          "repo_path": "C:\\",
          "message": "System root commit test"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"cannot mmap an empty file\"}"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      }
    ],
    "git_log": [
      {
        "case_name": "Display Commit History in Valid Git Repository",
        "purpose": "验证工具可以正确显示已初始化Git仓库的提交历史。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"commit 6f6cda8744150894681ac2b2b4370692526cb572\\nAuthor: pouchine <1291980381@qq.com>\\nDate:   Mon Jul 14 21:44:16 2025 +0800\\n\\n    This is a very long commit message that might exceed typical length limits if the system has restrictions on message size, but we are testing to ensure it can be handled gracefully.\\n\\ncommit fbf5c67051db25cd39379754ec9973465a744e51\\nAuthor: pouchine <1291980381@qq.com>\\nDate:   Mon Jul 14 21:44:15 2025 +0800\\n\\n    Fix bug #1234 @release\\n\\ncommit a1e5eedf9f0452e1632484cc34bc298b8a20cd9d\\nAuthor: pouchine <1291980381@qq.com>\\nDate:   Mon Jul 14 21:44:15 2025 +0800\\n\\n    Add new feature documentation\"}"
        },
        "execution_time": 0.12131524085998535,
        "is_functional_test": true
      },
      {
        "case_name": "Display Commit History Without Specifying Path (Use Default)",
        "purpose": "验证当未指定repo_path参数时，工具是否使用默认或最近初始化的仓库路径。",
        "args": {},
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git log\\n  stderr: 'fatal: detected dubious ownership in repository at 'C:/'\\n'C:/' is owned by:\\n\\tNT SERVICE/TrustedInstaller (S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)\\nbut the current user is:\\n\\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\\nTo add an exception for this directory, call:\\n\\n\\tgit config --global --add safe.directory C:/'\"}"
        },
        "execution_time": 0.14124536514282227,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Display Log on Non-Git Directory",
        "purpose": "验证工具在非Git目录上调用git_log是否会返回合理错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir\\subdir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\newdir\\\\subdir\"}"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      },
      {
        "case_name": "Display Log with Special Characters in Repo Path",
        "purpose": "验证包含特殊字符的Git仓库路径是否能被正确处理并显示提交历史。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$_dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@#$_dir\"}"
        },
        "execution_time": 0.006036281585693359,
        "is_functional_test": true
      },
      {
        "case_name": "Display Log for Empty Git Repository",
        "purpose": "验证空Git仓库是否返回无提交记录的合理响应而非报错。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content.txt\"}"
        },
        "execution_time": 0.005998849868774414,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Display Log with Read-Only Git Directory",
        "purpose": "测试尝试读取只读Git仓库的日志是否会失败或抛出合理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"commit d73a7013842d183765c1c4368ee763504613c8eb\\nAuthor: pouchine <1291980381@qq.com>\\nDate:   Mon Jul 14 21:44:16 2025 +0800\\n\\n    Attempt write to read-only repo\"}"
        },
        "execution_time": 0.15009713172912598,
        "is_functional_test": false
      },
      {
        "case_name": "Display Log with Very Long Repository Path",
        "purpose": "验证工具是否能处理超长路径的Git仓库并成功获取日志。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_that_might_cause_issues_if_system_has_restrictions"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_directory_name_that_might_cause_issues_if_system_has_restrictions\"}"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Access System Root Git Repository (Security Test)",
        "purpose": "尝试访问系统根目录下的Git仓库以测试权限和安全限制。",
        "args": {
          "repo_path": "C:\\"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git log\\n  stderr: 'fatal: detected dubious ownership in repository at 'C:/'\\n'C:/' is owned by:\\n\\tNT SERVICE/TrustedInstaller (S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)\\nbut the current user is:\\n\\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\\nTo add an exception for this directory, call:\\n\\n\\tgit config --global --add safe.directory C:/'\"}"
        },
        "execution_time": 0.17370820045471191,
        "is_functional_test": false
      }
    ],
    "git_diff_staged": [
      {
        "case_name": "Show Staged Changes in Initialized Repository",
        "purpose": "验证在已初始化的Git仓库中，有暂存更改时能正确显示diff。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"diff --git a/edge@#$_xue.jpg b/edge@#$_xue.jpg\\ndeleted file mode 100644\\nindex 774e0df..0000000\\nBinary files a/edge@#$_xue.jpg and /dev/null differ\\ndiff --git a/edge_detected_nature.jpeg b/edge_detected_nature.jpeg\\ndeleted file mode 100644\\nindex 444056a..0000000\\nBinary files a/edge_detected_nature.jpeg and /dev/null differ\\ndiff --git a/edge_nested_subdir.png b/edge_nested_subdir.png\\ndeleted file mode 100644\\nindex ebd1f07..0000000\\nBinary files a/edge_nested_subdir.png and /dev/null differ\\ndiff --git a/edge_readonly_image.jpg b/edge_readonly_image.jpg\\ndeleted file mode 100644\\nindex 0085377..0000000\\nBinary files a/edge_readonly_image.jpg and /dev/null differ\\ndiff --git a/newdir/subdir/copied_document.docx b/newdir/subdir/copied_document.docx\\nindex e255588..ca96720 100644\\n--- a/newdir/subdir/copied_document.docx\\n+++ b/newdir/subdir/copied_document.docx\\n@@ -2,3 +2,4 @@\\n \\n New Value\\n This is a nested directory test paragraph.Nested Section\\n+This is a nested directory test footnote.\\n\\\\ No newline at end of file\"}"
        },
        "execution_time": 1.9462816715240479,
        "is_functional_test": true
      },
      {
        "case_name": "Show No Staged Changes When None Exist",
        "purpose": "验证当没有暂存更改时工具返回空字符串或无输出。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"diff --git a/edge@#$_xue.jpg b/edge@#$_xue.jpg\\ndeleted file mode 100644\\nindex 774e0df..0000000\\nBinary files a/edge@#$_xue.jpg and /dev/null differ\\ndiff --git a/edge_detected_nature.jpeg b/edge_detected_nature.jpeg\\ndeleted file mode 100644\\nindex 444056a..0000000\\nBinary files a/edge_detected_nature.jpeg and /dev/null differ\\ndiff --git a/edge_nested_subdir.png b/edge_nested_subdir.png\\ndeleted file mode 100644\\nindex ebd1f07..0000000\\nBinary files a/edge_nested_subdir.png and /dev/null differ\\ndiff --git a/edge_readonly_image.jpg b/edge_readonly_image.jpg\\ndeleted file mode 100644\\nindex 0085377..0000000\\nBinary files a/edge_readonly_image.jpg and /dev/null differ\\ndiff --git a/newdir/subdir/copied_document.docx b/newdir/subdir/copied_document.docx\\nindex e255588..ca96720 100644\\n--- a/newdir/subdir/copied_document.docx\\n+++ b/newdir/subdir/copied_document.docx\\n@@ -2,3 +2,4 @@\\n \\n New Value\\n This is a nested directory test paragraph.Nested Section\\n+This is a nested directory test footnote.\\n\\\\ No newline at end of file\"}"
        },
        "execution_time": 1.8356335163116455,
        "is_functional_test": true
      },
      {
        "case_name": "Show Staged Changes with Default Repo Path",
        "purpose": "验证未指定repo_path时使用默认仓库并正确显示暂存diff。",
        "args": {},
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git diff HEAD\\n  stderr: 'warning: Not a git repository. Use --no-index to compare two paths outside a working tree\\nusage: git diff --no-index [<options>] <path> <path>\\n\\nDiff output format options\\n    -p, --patch           generate patch\\n    -s, --no-patch        suppress diff output\\n    -u                    generate patch\\n    -U, --unified[=<n>]   generate diffs with <n> lines context\\n    -W, --[no-]function-context\\n                          generate diffs with <n> lines context\\n    --raw                 generate the diff in raw format\\n    --patch-with-raw      synonym for '-p --raw'\\n    --patch-with-stat     synonym for '-p --stat'\\n    --numstat             machine friendly --stat\\n    --shortstat           output only the last line of --stat\\n    -X, --dirstat[=<param1>,<param2>...]\\n                          output the distribution of relative amount of changes for each sub-directory\\n    --cumulative          synonym for --dirstat=cumulative\\n    --dirstat-by-file[=<param1>,<param2>...]\\n                          synonym for --dirstat=files,<param1>,<param2>...\\n    --check               warn if changes introduce conflict markers or whitespace errors\\n    --summary             condensed summary such as creations, renames and mode changes\\n    --name-only           show only n...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计7619字符，剩余6219字符"
        },
        "execution_time": 0.17058277130126953,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Diff on Non-Existent Repository",
        "purpose": "验证尝试对不存在的仓库路径调用git_diff_staged时是否返回合理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_repo"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_repo\"}"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": false
      },
      {
        "case_name": "Diff Staged with Special Characters in File Content",
        "purpose": "验证包含特殊字符的文件内容在暂存后能否被正确识别并显示diff。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$_dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special@#$_dir\"}"
        },
        "execution_time": 0.005001068115234375,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt to View Git Diff from System Root",
        "purpose": "测试尝试从系统根目录获取git diff是否会因权限问题而失败。",
        "args": {
          "repo_path": "C:\\"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git diff HEAD\\n  stderr: 'warning: Not a git repository. Use --no-index to compare two paths outside a working tree\\nusage: git diff --no-index [<options>] <path> <path>\\n\\nDiff output format options\\n    -p, --patch           generate patch\\n    -s, --no-patch        suppress diff output\\n    -u                    generate patch\\n    -U, --unified[=<n>]   generate diffs with <n> lines context\\n    -W, --[no-]function-context\\n                          generate diffs with <n> lines context\\n    --raw                 generate the diff in raw format\\n    --patch-with-raw      synonym for '-p --raw'\\n    --patch-with-stat     synonym for '-p --stat'\\n    --numstat             machine friendly --stat\\n    --shortstat           output only the last line of --stat\\n    -X, --dirstat[=<param1>,<param2>...]\\n                          output the distribution of relative amount of changes for each sub-directory\\n    --cumulative          synonym for --dirstat=cumulative\\n    --dirstat-by-file[=<param1>,<param2>...]\\n                          synonym for --dirstat=files,<param1>,<param2>...\\n    --check               warn if changes introduce conflict markers or whitespace errors\\n    --summary             condensed summary such as creations, renames and mode changes\\n    --name-only           show only n...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计7619字符，剩余6219字符"
        },
        "execution_time": 0.16322970390319824,
        "is_functional_test": false
      },
      {
        "case_name": "Diff Staged in Read-Only Repository Directory",
        "purpose": "验证在只读仓库目录下执行git_diff_staged是否会因权限问题失败。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\"}"
        },
        "execution_time": 0.174560546875,
        "is_functional_test": false
      },
      {
        "case_name": "Diff Staged with Very Long Repository Path",
        "purpose": "验证超长路径下的git_diff_staged功能是否正常。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_that_might_cause_issues_if_system_has_restrictions"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_directory_name_that_might_cause_issues_if_system_has_restrictions\"}"
        },
        "execution_time": 0.007043600082397461,
        "is_functional_test": true
      }
    ],
    "git_create_branch": [
      {
        "case_name": "Create New Branch in Initialized Repository",
        "purpose": "验证在已初始化的Git仓库中可以成功创建新分支。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "new-feature"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Created new branch: new-feature\"}"
        },
        "execution_time": 0.15268945693969727,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch with Default Name",
        "purpose": "验证使用默认分支名称参数时，能否正确创建名为 'new-feature' 的分支。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Created new branch: new-feature\"}"
        },
        "execution_time": 0.1547865867614746,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch in Subdirectory Repository",
        "purpose": "验证工具可以在嵌套子目录中的Git仓库中创建新分支。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir\\subdir\\nested_repo",
          "branch_name": "feature-update"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\newdir\\\\subdir\\\\nested_repo\"}"
        },
        "execution_time": 0.0069997310638427734,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch with Special Characters in Name",
        "purpose": "验证分支名包含特殊字符时是否能被正确处理（如允许）。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature@#$_branch"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Created new branch: feature@#$_branch\"}"
        },
        "execution_time": 0.17873692512512207,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Create Branch in Non-Existent Repository",
        "purpose": "测试尝试在一个未初始化的目录中创建分支是否会失败并返回合理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_repo",
          "branch_name": "new-feature"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_repo\"}"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to Create Branch with Empty Branch Name",
        "purpose": "验证空分支名是否会被正确校验并返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"branch_name must be a non-empty string.\"}"
        },
        "execution_time": 0.010002613067626953,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch in Read-Only Repository",
        "purpose": "测试在只读Git仓库中创建分支是否会失败并返回权限错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "branch_name": "feature-read-only"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Created new branch: feature-read-only\"}"
        },
        "execution_time": 0.14989948272705078,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Very Long Name",
        "purpose": "验证超长分支名是否能被正确处理或返回合理限制提示。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "very_long_branch_name_that_might_cause_issues_if_system_has_restrictions"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Created new branch: very_long_branch_name_that_might_cause_issues_if_system_has_restrictions\"}"
        },
        "execution_time": 0.13000154495239258,
        "is_functional_test": true
      }
    ],
    "git_checkout": [
      {
        "case_name": "Checkout to Existing Branch in Initialized Repo",
        "purpose": "验证在已初始化的Git仓库中切换到一个存在的分支。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature@#$_branch"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Checked out to branch: feature@#$_branch\"}"
        },
        "execution_time": 0.17543411254882812,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout with Default Repo Path and Default Branch",
        "purpose": "验证使用默认参数（repo_path为上次初始化的路径，branch_name为'feature-branch'）进行checkout操作。",
        "args": {
          "repo_path": null,
          "branch_name": "feature-branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: 1 validation error for git_checkoutArguments\nrepo_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout to Non-Existent Branch",
        "purpose": "测试尝试切换到不存在的分支是否会失败并返回合理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "nonexistent_branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(1)\\n  cmdline: git checkout nonexistent_branch\\n  stderr: 'error: pathspec 'nonexistent_branch' did not match any file(s) known to git'\"}"
        },
        "execution_time": 0.15923500061035156,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout with Empty Branch Name",
        "purpose": "验证空分支名是否被正确校验并返回错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"branch_name must be a non-empty string.\"}"
        },
        "execution_time": 0.004001140594482422,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout in Read-Only Repository Directory",
        "purpose": "测试在只读目录中的Git仓库执行checkout是否会失败或抛出合理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "branch_name": "feature-read-only"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Checked out to branch: feature-read-only\"}"
        },
        "execution_time": 0.14499998092651367,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout with Special Characters in Branch Name",
        "purpose": "验证包含特殊字符的分支名称是否能被正确处理并成功切换。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature@#$_branch"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Checked out to branch: feature@#$_branch\"}"
        },
        "execution_time": 0.14174127578735352,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout with Very Long Branch Name",
        "purpose": "验证工具对超长分支名称的处理能力，确保不会因长度导致崩溃或异常。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "very_long_branch_name_that_might_cause_issues_if_system_has_restrictions"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Checked out to branch: very_long_branch_name_that_might_cause_issues_if_system_has_restrictions\"}"
        },
        "execution_time": 0.16591882705688477,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout in Nested Subdirectory Git Repo",
        "purpose": "验证工具可以正确在嵌套子目录的Git仓库中切换分支。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\.git\\refs\\heads",
          "branch_name": "new-feature"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\.git\\\\refs\\\\heads\"}"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": true
      }
    ],
    "git_diff": [
      {
        "case_name": "Basic Diff Between Two Branches",
        "purpose": "验证工具能正确比较两个已存在分支之间的差异。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source_ref": "main",
          "target_ref": "feature-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff main..feature-branch\\n  stderr: 'fatal: ambiguous argument 'main..feature-branch': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.16117310523986816,
        "is_functional_test": true
      },
      {
        "case_name": "Diff with Default Repo Path",
        "purpose": "验证当 repo_path 为 None 时，使用默认仓库路径进行 diff 比较。",
        "args": {
          "repo_path": null,
          "source_ref": "main",
          "target_ref": "feature-branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: 1 validation error for git_diffArguments\nrepo_path\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.009157657623291016,
        "is_functional_test": true
      },
      {
        "case_name": "Compare Same Branch",
        "purpose": "验证比较同一分支时返回空或无差异信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source_ref": "main",
          "target_ref": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff main..main\\n  stderr: 'fatal: ambiguous argument 'main..main': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.14499855041503906,
        "is_functional_test": true
      },
      {
        "case_name": "Diff with Commit Hashes",
        "purpose": "验证工具支持通过提交哈希值比较两个特定版本的差异。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source_ref": "a1e5eedf9f0452e1632484cc34bc298b8a20cd9d",
          "target_ref": "a162e90393cab39c385674e25f6fa55de15e53bf"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git diff a1e5eedf9f0452e1632484cc34bc298b8a20cd9d..a162e90393cab39c385674e25f6fa55de15e53bf\\n  stderr: 'usage: git diff [<options>] [<commit>] [--] [<path>...]\\n   or: git diff [<options>] --cached [--merge-base] [<commit>] [--] [<path>...]\\n   or: git diff [<options>] [--merge-base] <commit> [<commit>...] <commit> [--] [<path>...]\\n   or: git diff [<options>] <commit>...<commit> [--] [<path>...]\\n   or: git diff [<options>] <blob> <blob>\\n   or: git diff [<options>] --no-index [--] <path> <path>\\n\\ncommon diff options:\\n  -z            output diff-raw with lines terminated with NUL.\\n  -p            output patch format.\\n  -u            synonym for -p.\\n  --patch-with-raw\\n                output both a patch and the diff-raw format.\\n  --stat        show diffstat instead of patch.\\n  --numstat     show numeric diffstat instead of patch.\\n  --patch-with-stat\\n                output a patch and prepend its diffstat.\\n  --name-only   show only names of changed files.\\n  --name-status show names and status of changed files.\\n  --full-index  show full object name on index lines.\\n  --abbrev=<n>  abbreviate object names in diff-tree header and diff-raw.\\n  -R            swap input file pairs.\\n  -B            detect complete rewrites.\\n  -M            detect renames.\\n  -C            detect copies.\\...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计1812字符，剩余412字符"
        },
        "execution_time": 0.2084362506866455,
        "is_functional_test": true
      },
      {
        "case_name": "Diff with Invalid Repo Path",
        "purpose": "验证无效的 repo_path 是否导致错误并返回合理提示。",
        "args": {
          "repo_path": "D:\\invalid\\path\\to\\repo",
          "source_ref": "main",
          "target_ref": "feature-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\invalid\\\\path\\\\to\\\\repo\"}"
        },
        "execution_time": 0.0029282569885253906,
        "is_functional_test": false
      },
      {
        "case_name": "Diff Between Nonexistent Branch and Valid Branch",
        "purpose": "验证当 source_ref 或 target_ref 不存在时是否返回错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source_ref": "nonexistent-branch",
          "target_ref": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff nonexistent-branch..main\\n  stderr: 'fatal: ambiguous argument 'nonexistent-branch..main': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.19350361824035645,
        "is_functional_test": false
      },
      {
        "case_name": "Diff with Special Characters in Branch Name",
        "purpose": "验证包含特殊字符的分支名能否被正确处理。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source_ref": "feature@#$_branch",
          "target_ref": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff feature@#$_branch..main\\n  stderr: 'fatal: ambiguous argument 'feature@#$_branch..main': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.15147185325622559,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Attempt to Diff System Root",
        "purpose": "测试尝试在系统根目录执行 diff 操作是否会因权限问题失败。",
        "args": {
          "repo_path": "C:\\",
          "source_ref": "main",
          "target_ref": "feature-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(129)\\n  cmdline: git diff main..feature-branch\\n  stderr: 'warning: Not a git repository. Use --no-index to compare two paths outside a working tree\\nusage: git diff --no-index [<options>] <path> <path>\\n\\nDiff output format options\\n    -p, --patch           generate patch\\n    -s, --no-patch        suppress diff output\\n    -u                    generate patch\\n    -U, --unified[=<n>]   generate diffs with <n> lines context\\n    -W, --[no-]function-context\\n                          generate diffs with <n> lines context\\n    --raw                 generate the diff in raw format\\n    --patch-with-raw      synonym for '-p --raw'\\n    --patch-with-stat     synonym for '-p --stat'\\n    --numstat             machine friendly --stat\\n    --shortstat           output only the last line of --stat\\n    -X, --dirstat[=<param1>,<param2>...]\\n                          output the distribution of relative amount of changes for each sub-directory\\n    --cumulative          synonym for --dirstat=cumulative\\n    --dirstat-by-file[=<param1>,<param2>...]\\n                          synonym for --dirstat=files,<param1>,<param2>...\\n    --check               warn if changes introduce conflict markers or whitespace errors\\n    --summary             condensed summary such as creations, renames and mode changes\\n    --name-only      ...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计7635字符，剩余6235字符"
        },
        "execution_time": 0.18306875228881836,
        "is_functional_test": false
      }
    ],
    "git_reset": [
      {
        "case_name": "Unstage Specific File Pattern",
        "purpose": "验证工具可以成功从暂存区移除符合指定模式的文件，而不影响工作目录。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_pattern": "*.txt"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Unstaged *.txt.\"}"
        },
        "execution_time": 0.11905598640441895,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage All Files Using Default Pattern",
        "purpose": "验证使用默认模式 '*' 可以正确取消暂存所有已暂存的文件。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git reset -- *\\n  stderr: 'error: invalid path 'readonly_dir/.git/HEAD'\\nfatal: make_cache_entry failed for path 'readonly_dir/.git/HEAD''\"}"
        },
        "execution_time": 0.17284226417541504,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage Without Specifying Repo Path",
        "purpose": "验证在未指定 repo_path 时，工具使用最近初始化的仓库并成功取消暂存文件。",
        "args": {
          "file_pattern": "*.csv"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git reset -- *.csv\\n  stderr: 'fatal: detected dubious ownership in repository at 'C:/'\\n'C:/' is owned by:\\n\\tNT SERVICE/TrustedInstaller (S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)\\nbut the current user is:\\n\\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\\nTo add an exception for this directory, call:\\n\\n\\tgit config --global --add safe.directory C:/'\"}"
        },
        "execution_time": 0.13500022888183594,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage With Nonexistent Repository",
        "purpose": "验证尝试在一个不存在的仓库路径中执行 git_reset 是否返回合理的错误信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_repo",
          "file_pattern": "*.docx"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_repo\"}"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage Read-Only Files",
        "purpose": "测试取消暂存只读文件是否会失败或抛出合理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "file_pattern": "*.jpg"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Unstaged *.jpg.\"}"
        },
        "execution_time": 0.1810157299041748,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage Files in Nested Subdirectory",
        "purpose": "验证工具可以正确在嵌套子目录中取消暂存特定文件。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir\\subdir",
          "file_pattern": "*.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\newdir\\\\subdir\"}"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Unstage with Empty File Pattern",
        "purpose": "验证当 file_pattern 参数为空字符串时是否能正确校验并返回错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_pattern": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"file_pattern must be a non-empty string.\"}"
        },
        "execution_time": 0.003922700881958008,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage Files with Special Characters in Pattern",
        "purpose": "验证包含特殊字符的文件模式能否被正确处理并取消暂存匹配文件。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_pattern": "*@#$.docx"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Unstaged *@#$.docx.\"}"
        },
        "execution_time": 0.14998912811279297,
        "is_functional_test": true
      }
    ],
    "text_append_to_file": [
      {
        "case_name": "Append Content to New File",
        "purpose": "验证工具能够将指定内容追加到一个新创建的文件中。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_append_test.txt",
          "content": "This is the first line to be appended."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Appended content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_append_test.txt\"}"
        },
        "execution_time": 0.0053408145904541016,
        "is_functional_test": true
      },
      {
        "case_name": "Append Content to Existing File",
        "purpose": "验证工具能够将内容正确追加到已存在的文件末尾而不覆盖原有内容。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_output.txt",
          "content": "Additional line appended."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Appended content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\test_output.txt\"}"
        },
        "execution_time": 0.008000373840332031,
        "is_functional_test": true
      },
      {
        "case_name": "Append Empty Content",
        "purpose": "验证当提供空内容时，工具是否抛出参数校验错误。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_append.txt",
          "content": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"content must be a non-empty string.\"}"
        },
        "execution_time": 0.003998517990112305,
        "is_functional_test": false
      },
      {
        "case_name": "Append with Special Characters in File Path",
        "purpose": "验证包含特殊字符的路径是否能被正确处理并成功追加内容。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$_dir\\special_append.txt",
          "content": "Content appended to special path."
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"[Errno 2] No such file or directory: 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\special@#$_dir\\\\\\\\special_append.txt'\"}"
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": true
      },
      {
        "case_name": "Append to Read-Only Directory",
        "purpose": "测试尝试在只读目录中追加内容是否会失败或抛出合理错误。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\readonly_append_attempt.txt",
          "content": "Attempting to append to read-only directory file."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Appended content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\\\\readonly_append_attempt.txt\"}"
        },
        "execution_time": 0.003001689910888672,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt Append with Empty File Path",
        "purpose": "验证当提供空文件路径时，工具是否抛出参数校验错误。",
        "args": {
          "file_path": "",
          "content": "This should not be appended."
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"file_path must be a non-empty string.\"}"
        },
        "execution_time": 0.004999876022338867,
        "is_functional_test": false
      },
      {
        "case_name": "Append to Very Long File Path",
        "purpose": "验证工具是否能处理超长路径并成功追加内容。",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_that_might_cause_issues_if_system_has_restrictions\\longpath_append_test.txt",
          "content": "Content for long path append test."
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"[Errno 2] No such file or directory: 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\very_long_directory_name_that_might_cause_issues_if_system_has_restrictions\\\\\\\\longpath_append_test.txt'\"}"
        },
        "execution_time": 0.006999492645263672,
        "is_functional_test": true
      },
      {
        "case_name": "Append to System Root Directory (Security Test)",
        "purpose": "尝试向系统根目录追加内容以测试权限和安全限制。",
        "args": {
          "file_path": "C:\\test_root_append.txt",
          "content": "Testing append access to system root."
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"[Errno 13] Permission denied: 'C:\\\\\\\\test_root_append.txt'\"}"
        },
        "execution_time": 0.00400233268737793,
        "is_functional_test": false
      }
    ],
    "git_show": [
      {
        "case_name": "Show Details of a Valid Commit",
        "purpose": "验证工具能够正确显示一个有效提交的详细信息。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git show a1b2c3d4\\n  stderr: 'fatal: ambiguous argument 'a1b2c3d4': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.145033597946167,
        "is_functional_test": true
      },
      {
        "case_name": "Show Details Using Default Repo Path",
        "purpose": "验证当未提供 repo_path 参数时，是否使用默认仓库路径并成功显示提交详情。",
        "args": {
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git show a1b2c3d4\\n  stderr: 'fatal: detected dubious ownership in repository at 'C:/'\\n'C:/' is owned by:\\n\\tNT SERVICE/TrustedInstaller (S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)\\nbut the current user is:\\n\\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\\nTo add an exception for this directory, call:\\n\\n\\tgit config --global --add safe.directory C:/'\"}"
        },
        "execution_time": 0.14899969100952148,
        "is_functional_test": true
      },
      {
        "case_name": "Show Details with Invalid Commit Hash",
        "purpose": "测试当提供无效的 commit_hash 时，工具是否返回错误或合理提示。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "invalidhash123"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git show invalidhash123\\n  stderr: 'fatal: ambiguous argument 'invalidhash123': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.16405487060546875,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to Show Commit in Non-Git Directory",
        "purpose": "验证尝试在一个非 Git 仓库目录中执行 git_show 是否失败并返回合理错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\newdir",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\newdir\"}"
        },
        "execution_time": 0.003997325897216797,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit from Read-Only Repository",
        "purpose": "验证从只读仓库中查看提交详情是否成功。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git show a1b2c3d4\\n  stderr: 'fatal: ambiguous argument 'a1b2c3d4': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.165971040725708,
        "is_functional_test": true
      },
      {
        "case_name": "Show Commit with Empty Commit Hash",
        "purpose": "测试当提供空字符串作为 commit_hash 参数时，是否抛出参数校验错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"commit_hash must be a non-empty string.\"}"
        },
        "execution_time": 0.0030002593994140625,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit with Special Characters in Hash",
        "purpose": "验证当 commit_hash 包含特殊字符时，工具是否能正确处理或返回错误。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "a1b2c3@#$_d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git show a1b2c3@#$_d4\\n  stderr: 'fatal: ambiguous argument 'a1b2c3@#$_d4': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.1481170654296875,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit in Repository with Long Path",
        "purpose": "验证在路径非常长的 Git 仓库中执行 git_show 是否正常工作。",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_directory_name_that_might_cause_issues_if_system_has_restrictions",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_directory_name_that_might_cause_issues_if_system_has_restrictions\"}"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": true
      }
    ],
    "text_extract_regex": [
      {
        "case_name": "Basic Regex Extraction",
        "purpose": "验证工具能否从给定文本中正确提取第一个匹配的正则表达式模式。",
        "args": {
          "text": "Commit: a1b2c3d4",
          "pattern": "commit (\\w+)"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"No match found for pattern 'commit (\\\\w+)' in the provided text.\"}"
        },
        "execution_time": 0.00400543212890625,
        "is_functional_test": true
      },
      {
        "case_name": "Regex Match at Start of String",
        "purpose": "测试正则表达式在字符串开头匹配的情况是否能正确提取。",
        "args": {
          "text": "abc123def456",
          "pattern": "^abc(\\d+)"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"123\"}"
        },
        "execution_time": 0.0030007362365722656,
        "is_functional_test": true
      },
      {
        "case_name": "Regex Match at End of String",
        "purpose": "验证工具能否正确识别并提取位于字符串末尾的正则表达式匹配项。",
        "args": {
          "text": "abc123def456",
          "pattern": "(\\d+)$"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"456\"}"
        },
        "execution_time": 0.005000114440917969,
        "is_functional_test": true
      },
      {
        "case_name": "Multiple Groups in Pattern",
        "purpose": "测试包含多个捕获组的正则表达式是否能正确返回第一个匹配组。",
        "args": {
          "text": "Name: John Doe, Age: 30",
          "pattern": "Name: (\\w+) (\\w+)"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"John\"}"
        },
        "execution_time": 0.005001068115234375,
        "is_functional_test": true
      },
      {
        "case_name": "No Match Found Should Raise Error",
        "purpose": "验证当没有找到匹配项时，工具是否抛出ValueError错误。",
        "args": {
          "text": "This is a test string",
          "pattern": "nonexistent(\\d+)"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"No match found for pattern 'nonexistent(\\\\d+)' in the provided text.\"}"
        },
        "execution_time": 0.0039899349212646484,
        "is_functional_test": false
      },
      {
        "case_name": "Empty Text Input",
        "purpose": "测试空文本输入是否被正确校验并抛出错误。",
        "args": {
          "text": "",
          "pattern": "\\d+"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"text must be a non-empty string.\"}"
        },
        "execution_time": 0.0029985904693603516,
        "is_functional_test": false
      },
      {
        "case_name": "Empty Pattern Input",
        "purpose": "验证空正则表达式模式输入是否被拒绝并抛出错误。",
        "args": {
          "text": "Some text here",
          "pattern": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"pattern must be a non-empty string.\"}"
        },
        "execution_time": 0.0019998550415039062,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Pattern",
        "purpose": "测试包含特殊字符的正则表达式是否能被正确解析和执行。",
        "args": {
          "text": "User@example.com",
          "pattern": "[a-zA-Z]+@[a-zA-Z]+\\.[a-zA-Z]+"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"no such group\"}"
        },
        "execution_time": 0.006000518798828125,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 120
}