{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "qwen-max-latest-mcp_financial_data_processor",
  "server_path": "workspace/pipeline-output-servers/qwen-max-latest/mcp_financial_data_processor/refined/server.py",
  "timestamp": "2025-07-14T21:35:44.791467",
  "tools": [
    {
      "name": "get_income_statements",
      "description": "\n    Fetches income statements for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n        report_period: The reporting period (e.g., 'annual', 'quarterly', 'ttm').\n        limit: The maximum number of results to return.\n\n    Returns:\n        A JSON-formatted string containing the income statement data.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_income_statements(stock_code=\"NVDA\", report_period=\"annual\", limit=10)\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          },
          "report_period": {
            "title": "Report Period",
            "type": "string"
          },
          "limit": {
            "title": "Limit",
            "type": "integer"
          }
        },
        "required": [
          "stock_code",
          "report_period",
          "limit"
        ],
        "title": "get_income_statementsArguments",
        "type": "object"
      }
    },
    {
      "name": "get_balance_sheets",
      "description": "\n    Retrieves balance sheets for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n        report_period: The reporting period (e.g., 'annual', 'quarterly', 'ttm').\n        limit: The maximum number of results to return.\n\n    Returns:\n        A JSON-formatted string containing the balance sheet data.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_balance_sheets(stock_code=\"NVDA\", report_period=\"annual\", limit=10)\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          },
          "report_period": {
            "title": "Report Period",
            "type": "string"
          },
          "limit": {
            "title": "Limit",
            "type": "integer"
          }
        },
        "required": [
          "stock_code",
          "report_period",
          "limit"
        ],
        "title": "get_balance_sheetsArguments",
        "type": "object"
      }
    },
    {
      "name": "get_cash_flows",
      "description": "\n    Extracts cash flow statements for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n        report_period: The reporting period (e.g., 'annual', 'quarterly', 'ttm').\n        limit: The maximum number of results to return.\n\n    Returns:\n        A JSON-formatted string containing the cash flow statement data.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_cash_flows(stock_code=\"NVDA\", report_period=\"annual\", limit=10)\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          },
          "report_period": {
            "title": "Report Period",
            "type": "string"
          },
          "limit": {
            "title": "Limit",
            "type": "integer"
          }
        },
        "required": [
          "stock_code",
          "report_period",
          "limit"
        ],
        "title": "get_cash_flowsArguments",
        "type": "object"
      }
    },
    {
      "name": "get_stock_prices",
      "description": "\n    Queries historical stock price data for a specified stock using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n        start_date: The start date of the historical data range (format: YYYY-MM-DD).\n        end_date: The end date of the historical data range (format: YYYY-MM-DD).\n\n    Returns:\n        A JSON-formatted string containing historical stock prices.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_stock_prices(stock_code=\"NVDA\", start_date=\"2023-01-01\", end_date=\"2023-12-31\")\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          },
          "start_date": {
            "title": "Start Date",
            "type": "string"
          },
          "end_date": {
            "title": "End Date",
            "type": "string"
          }
        },
        "required": [
          "stock_code",
          "start_date",
          "end_date"
        ],
        "title": "get_stock_pricesArguments",
        "type": "object"
      }
    },
    {
      "name": "get_market_news",
      "description": "\n    Fetches the latest financial news related to a company or market using the financialdatasets API.\n\n    Args:\n        company_name: The name of the company (e.g., 'NVIDIA').\n\n    Returns:\n        A JSON-formatted string containing the latest financial news articles.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_market_news(company_name=\"NVIDIA\")\n    ",
      "args_schema": {
        "properties": {
          "company_name": {
            "title": "Company Name",
            "type": "string"
          }
        },
        "required": [
          "company_name"
        ],
        "title": "get_market_newsArguments",
        "type": "object"
      }
    },
    {
      "name": "get_company_profile",
      "description": "\n    Retrieves a company profile including industry and location information using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n\n    Returns:\n        A JSON-formatted string containing the company's profile.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_company_profile(stock_code=\"NVDA\")\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          }
        },
        "required": [
          "stock_code"
        ],
        "title": "get_company_profileArguments",
        "type": "object"
      }
    },
    {
      "name": "get_analyst_estimates",
      "description": "\n    Gets analyst estimates such as target prices and earnings forecasts for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n\n    Returns:\n        A JSON-formatted string containing analyst estimates.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_analyst_estimates(stock_code=\"NVDA\")\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          }
        },
        "required": [
          "stock_code"
        ],
        "title": "get_analyst_estimatesArguments",
        "type": "object"
      }
    },
    {
      "name": "get_dividend_history",
      "description": "\n    Retrieves dividend history records for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n\n    Returns:\n        A JSON-formatted string containing the dividend history.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_dividend_history(stock_code=\"NVDA\")\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          }
        },
        "required": [
          "stock_code"
        ],
        "title": "get_dividend_historyArguments",
        "type": "object"
      }
    },
    {
      "name": "get_splits_history",
      "description": "\n    Queries stock split history for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n\n    Returns:\n        A JSON-formatted string containing the stock split history.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_splits_history(stock_code=\"NVDA\")\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          }
        },
        "required": [
          "stock_code"
        ],
        "title": "get_splits_historyArguments",
        "type": "object"
      }
    },
    {
      "name": "get_earnings_history",
      "description": "\n    Fetches historical earnings data, such as EPS, for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n\n    Returns:\n        A JSON-formatted string containing historical earnings data.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_earnings_history(stock_code=\"NVDA\")\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          }
        },
        "required": [
          "stock_code"
        ],
        "title": "get_earnings_historyArguments",
        "type": "object"
      }
    },
    {
      "name": "get_financial_ratios",
      "description": "\n    Gets financial ratios such as P/E and debt-to-equity for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n\n    Returns:\n        A JSON-formatted string containing financial ratios.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_financial_ratios(stock_code=\"NVDA\")\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          }
        },
        "required": [
          "stock_code"
        ],
        "title": "get_financial_ratiosArguments",
        "type": "object"
      }
    },
    {
      "name": "get_ownership_data",
      "description": "\n    Retrieves ownership structure data, such as institutional holding percentages, for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n\n    Returns:\n        A JSON-formatted string containing ownership structure data.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_ownership_data(stock_code=\"NVDA\")\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          }
        },
        "required": [
          "stock_code"
        ],
        "title": "get_ownership_dataArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "get_company_profile": [
      {
        "case_name": "Basic Company Profile Retrieval",
        "purpose": "验证工具能够成功 retrieve a company profile using a valid stock code",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_company_profile: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.5093064308166504,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "测试工具对无效股票代码格式的处理（如空字符串）",
        "args": {
          "stock_code": ""
        },
        "response": {
          "error": "ToolException: Error executing tool get_company_profile: Unexpected error fetching company profile: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.004999876022338867,
        "is_functional_test": false
      },
      {
        "case_name": "Nonexistent Stock Code",
        "purpose": "测试工具在提供不存在的股票代码时是否能正确抛出错误",
        "args": {
          "stock_code": "XYZ123"
        },
        "response": {
          "error": "ToolException: Error executing tool get_company_profile: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7850706577301025,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Stock Code",
        "purpose": "测试工具对包含特殊字符的股票代码的处理",
        "args": {
          "stock_code": "NVDA@#"
        },
        "response": {
          "error": "ToolException: Error executing tool get_company_profile: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.37984251976013184,
        "is_functional_test": false
      },
      {
        "case_name": "Null Stock Code Input",
        "purpose": "测试工具对 null 值输入的处理",
        "args": {
          "stock_code": null
        },
        "response": {
          "error": "ToolException: Error executing tool get_company_profile: 1 validation error for get_company_profileArguments\nstock_code\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      },
      {
        "case_name": "Numeric Only Stock Code",
        "purpose": "测试工具对纯数字股票代码的响应",
        "args": {
          "stock_code": "1234"
        },
        "response": {
          "error": "ToolException: Error executing tool get_company_profile: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.8014280796051025,
        "is_functional_test": false
      },
      {
        "case_name": "Case Insensitive Stock Code Handling",
        "purpose": "验证工具是否支持大小写混合的股票代码",
        "args": {
          "stock_code": "nVdA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_company_profile: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7902476787567139,
        "is_functional_test": true
      },
      {
        "case_name": "Security Check - SQL Injection Attempt",
        "purpose": "测试工具对潜在SQL注入攻击的防御能力",
        "args": {
          "stock_code": "NVDA'; DROP TABLE companies;"
        },
        "response": {
          "error": "ToolException: Error executing tool get_company_profile: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3786041736602783,
        "is_functional_test": false
      }
    ],
    "get_income_statements": [
      {
        "case_name": "Basic Income Statement Retrieval",
        "purpose": "验证工具能够成功获取指定公司的年度收入报表数据",
        "args": {
          "stock_code": "NVDA",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "result": "{\"income_statements\": [{\"ticker\": \"NVDA\", \"report_period\": \"2025-01-26\", \"fiscal_period\": \"2025-FY\", \"period\": \"annual\", \"currency\": \"USD\", \"revenue\": 130497000000.0, \"cost_of_revenue\": 32639000000.0, \"gross_profit\": 97858000000.0, \"operating_expense\": 16405000000.0, \"selling_general_and_administrative_expenses\": 3491000000.0, \"research_and_development\": 12914000000.0, \"operating_income\": 81453000000.0, \"interest_expense\": 247000000.0, \"ebit\": 84273000000.0, \"income_tax_expense\": 11146000000.0, \"net_income_discontinued_operations\": 0.0, \"net_income_non_controlling_interests\": 0.0, \"net_income\": 72880000000.0, \"net_income_common_stock\": 72880000000.0, \"preferred_dividends_impact\": 0.0, \"consolidated_income\": 72880000000.0, \"earnings_per_share\": 2.97, \"earnings_per_share_diluted\": 2.94, \"dividends_per_common_share\": 0.034, \"weighted_average_shares\": 24555000000.0, \"weighted_average_shares_diluted\": 24804000000.0}, {\"ticker\": \"NVDA\", \"report_period\": \"2024-01-28\", \"fiscal_period\": \"2024-FY\", \"period\": \"annual\", \"currency\": \"USD\", \"revenue\": 60922000000.0, \"cost_of_revenue\": 16621000000.0, \"gross_profit\": 44301000000.0, \"operating_expense\": 11329000000.0, \"selling_general_and_administrative_expenses\": 2654000000.0, \"research_and_development\": 8675000000.0, \"operating_income\": 32972000000.0, \"interest_expense\": 257000000.0, \"ebit\": 34075000000.0, \"income_tax_expense\": 4058000000.0, ...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计8956字符，剩余7556字符"
        },
        "execution_time": 2.3208775520324707,
        "is_functional_test": true
      },
      {
        "case_name": "Quarterly Report Retrieval",
        "purpose": "测试工具是否能正确获取季度收入报表数据",
        "args": {
          "stock_code": "AAPL",
          "report_period": "quarterly",
          "limit": 5
        },
        "response": {
          "result": "{\"income_statements\": [{\"ticker\": \"AAPL\", \"report_period\": \"2025-03-29\", \"fiscal_period\": \"2025-Q2\", \"period\": \"quarterly\", \"currency\": \"USD\", \"revenue\": 95359000000.0, \"cost_of_revenue\": 50492000000.0, \"gross_profit\": 44867000000.0, \"operating_expense\": 15278000000.0, \"selling_general_and_administrative_expenses\": 6728000000.0, \"research_and_development\": 8550000000.0, \"operating_income\": 29589000000.0, \"interest_expense\": 0.0, \"ebit\": 29310000000.0, \"income_tax_expense\": 4530000000.0, \"net_income_discontinued_operations\": 0.0, \"net_income_non_controlling_interests\": 0.0, \"net_income\": 24780000000.0, \"net_income_common_stock\": 24780000000.0, \"preferred_dividends_impact\": 0.0, \"consolidated_income\": 24780000000.0, \"earnings_per_share\": 1.65, \"earnings_per_share_diluted\": 1.65, \"dividends_per_common_share\": 0.25, \"weighted_average_shares\": 14994082000.0, \"weighted_average_shares_diluted\": 15056133000.0}, {\"ticker\": \"AAPL\", \"report_period\": \"2024-12-28\", \"fiscal_period\": \"2025-Q1\", \"period\": \"quarterly\", \"currency\": \"USD\", \"revenue\": 124300000000.0, \"cost_of_revenue\": 66025000000.0, \"gross_profit\": 58275000000.0, \"operating_expense\": 15443000000.0, \"selling_general_and_administrative_expenses\": 7175000000.0, \"research_and_development\": 8268000000.0, \"operating_income\": 42832000000.0, \"interest_expense\": 0.0, \"ebit\": 42584000000.0, \"income_tax_expense\": 6254000000.0, \"net_income_d...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计4492字符，剩余3092字符"
        },
        "execution_time": 0.7512369155883789,
        "is_functional_test": true
      },
      {
        "case_name": "TTM Report Retrieval",
        "purpose": "验证工具对TTM（Trailing Twelve Months）报告周期的支持",
        "args": {
          "stock_code": "AMZN",
          "report_period": "ttm",
          "limit": 4
        },
        "response": {
          "error": "ToolException: Error executing tool get_income_statements: HTTP error occurred: 401 - {\"error\":\"Invalid API key\",\"message\":\"Please provide a valid API key from https://financialdatasets.ai\"}"
        },
        "execution_time": 1.1634774208068848,
        "is_functional_test": true
      },
      {
        "case_name": "Default Limit Behavior",
        "purpose": "测试当未指定limit参数时工具是否使用默认值",
        "args": {
          "stock_code": "GOOG",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "result": "{\"income_statements\": [{\"ticker\": \"GOOGL\", \"report_period\": \"2024-12-31\", \"fiscal_period\": \"2024-FY\", \"period\": \"annual\", \"currency\": \"USD\", \"revenue\": 350018000000.0, \"cost_of_revenue\": 146306000000.0, \"gross_profit\": 203712000000.0, \"operating_expense\": 91322000000.0, \"selling_general_and_administrative_expenses\": 41996000000.0, \"research_and_development\": 49326000000.0, \"operating_income\": 112390000000.0, \"interest_expense\": 268000000.0, \"ebit\": 120083000000.0, \"income_tax_expense\": 19697000000.0, \"net_income_discontinued_operations\": 0.0, \"net_income_non_controlling_interests\": 0.0, \"net_income\": 100118000000.0, \"net_income_common_stock\": 100118000000.0, \"preferred_dividends_impact\": 0.0, \"consolidated_income\": 100118000000.0, \"earnings_per_share\": 8.13, \"earnings_per_share_diluted\": 8.04, \"dividends_per_common_share\": 0.6, \"weighted_average_shares\": 12241000000.0, \"weighted_average_shares_diluted\": null}, {\"ticker\": \"GOOGL\", \"report_period\": \"2023-12-31\", \"fiscal_period\": \"2023-FY\", \"period\": \"annual\", \"currency\": \"USD\", \"revenue\": 307394000000.0, \"cost_of_revenue\": 133332000000.0, \"gross_profit\": 174062000000.0, \"operating_expense\": 89769000000.0, \"selling_general_and_administrative_expenses\": 44342000000.0, \"research_and_development\": 45427000000.0, \"operating_income\": 84293000000.0, \"interest_expense\": 308000000.0, \"ebit\": 86025000000.0, \"income_tax_expense\": 1192200000...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计8984字符，剩余7584字符"
        },
        "execution_time": 1.1772141456604004,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "测试工具对无效股票代码格式的处理（如空字符串）",
        "args": {
          "stock_code": "",
          "report_period": "annual",
          "limit": 5
        },
        "response": {
          "error": "ToolException: Error executing tool get_income_statements: Unexpected error fetching income statements: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.0050084590911865234,
        "is_functional_test": false
      },
      {
        "case_name": "Null Stock Code Input",
        "purpose": "测试工具对 null 值输入的处理",
        "args": {
          "stock_code": null,
          "report_period": "annual",
          "limit": 5
        },
        "response": {
          "error": "ToolException: Error executing tool get_income_statements: 1 validation error for get_income_statementsArguments\nstock_code\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.004999876022338867,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Stock Code",
        "purpose": "测试工具对包含特殊字符的股票代码的处理",
        "args": {
          "stock_code": "NVDA@#",
          "report_period": "annual",
          "limit": 5
        },
        "response": {
          "error": "ToolException: Error executing tool get_income_statements: HTTP error occurred: 400 - {\"error\":\"Invalid TICKER\",\"message\":\"Please provide a valid TICKER.\"}"
        },
        "execution_time": 0.7408599853515625,
        "is_functional_test": false
      },
      {
        "case_name": "SQL Injection Attempt in Stock Code",
        "purpose": "测试工具对潜在SQL注入攻击的防御能力",
        "args": {
          "stock_code": "NVDA'; DROP TABLE income_statements;",
          "report_period": "annual",
          "limit": 5
        },
        "response": {
          "error": "ToolException: Error executing tool get_income_statements: HTTP error occurred: 400 - {\"error\":\"Invalid TICKER\",\"message\":\"Please provide a valid TICKER.\"}"
        },
        "execution_time": 0.7421853542327881,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Report Period Input",
        "purpose": "测试工具对非法报告周期参数的处理",
        "args": {
          "stock_code": "MSFT",
          "report_period": "monthly",
          "limit": 5
        },
        "response": {
          "error": "ToolException: Error executing tool get_income_statements: Unexpected error fetching income statements: 'report_period' must be one of: annual, quarterly, ttm."
        },
        "execution_time": 0.003001689910888672,
        "is_functional_test": false
      },
      {
        "case_name": "Zero Limit Value",
        "purpose": "测试工具对limit参数为0时的行为",
        "args": {
          "stock_code": "TSLA",
          "report_period": "annual",
          "limit": 0
        },
        "response": {
          "error": "ToolException: Error executing tool get_income_statements: Unexpected error fetching income statements: 'limit' must be a positive integer."
        },
        "execution_time": 0.008001565933227539,
        "is_functional_test": false
      },
      {
        "case_name": "Negative Limit Value",
        "purpose": "测试工具对负数limit参数的处理",
        "args": {
          "stock_code": "FB",
          "report_period": "quarterly",
          "limit": -5
        },
        "response": {
          "error": "ToolException: Error executing tool get_income_statements: Unexpected error fetching income statements: 'limit' must be a positive integer."
        },
        "execution_time": 0.008000612258911133,
        "is_functional_test": false
      },
      {
        "case_name": "Non-Integer Limit Value",
        "purpose": "测试工具对非整型limit参数的处理",
        "args": {
          "stock_code": "IBM",
          "report_period": "ttm",
          "limit": "five"
        },
        "response": {
          "error": "ToolException: Error executing tool get_income_statements: 1 validation error for get_income_statementsArguments\nlimit\n  Input should be a valid integer, unable to parse string as an integer [type=int_parsing, input_value='five', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/int_parsing"
        },
        "execution_time": 0.003997087478637695,
        "is_functional_test": false
      },
      {
        "case_name": "Case Insensitive Stock Code Handling",
        "purpose": "验证工具是否支持大小写混合的股票代码",
        "args": {
          "stock_code": "nVdA",
          "report_period": "annual",
          "limit": 5
        },
        "response": {
          "result": "{\"income_statements\": [{\"ticker\": \"NVDA\", \"report_period\": \"2025-01-26\", \"fiscal_period\": \"2025-FY\", \"period\": \"annual\", \"currency\": \"USD\", \"revenue\": 130497000000.0, \"cost_of_revenue\": 32639000000.0, \"gross_profit\": 97858000000.0, \"operating_expense\": 16405000000.0, \"selling_general_and_administrative_expenses\": 3491000000.0, \"research_and_development\": 12914000000.0, \"operating_income\": 81453000000.0, \"interest_expense\": 247000000.0, \"ebit\": 84273000000.0, \"income_tax_expense\": 11146000000.0, \"net_income_discontinued_operations\": 0.0, \"net_income_non_controlling_interests\": 0.0, \"net_income\": 72880000000.0, \"net_income_common_stock\": 72880000000.0, \"preferred_dividends_impact\": 0.0, \"consolidated_income\": 72880000000.0, \"earnings_per_share\": 2.97, \"earnings_per_share_diluted\": 2.94, \"dividends_per_common_share\": 0.034, \"weighted_average_shares\": 24555000000.0, \"weighted_average_shares_diluted\": 24804000000.0}, {\"ticker\": \"NVDA\", \"report_period\": \"2024-01-28\", \"fiscal_period\": \"2024-FY\", \"period\": \"annual\", \"currency\": \"USD\", \"revenue\": 60922000000.0, \"cost_of_revenue\": 16621000000.0, \"gross_profit\": 44301000000.0, \"operating_expense\": 11329000000.0, \"selling_general_and_administrative_expenses\": 2654000000.0, \"research_and_development\": 8675000000.0, \"operating_income\": 32972000000.0, \"interest_expense\": 257000000.0, \"ebit\": 34075000000.0, \"income_tax_expense\": 4058000000.0, ...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计4510字符，剩余3110字符"
        },
        "execution_time": 0.7474579811096191,
        "is_functional_test": true
      },
      {
        "case_name": "Large Limit Value Test",
        "purpose": "测试工具对极大limit值的响应行为",
        "args": {
          "stock_code": "INTC",
          "report_period": "annual",
          "limit": 1000
        },
        "response": {
          "error": "ToolException: Error executing tool get_income_statements: HTTP error occurred: 401 - {\"error\":\"Invalid API key\",\"message\":\"Please provide a valid API key from https://financialdatasets.ai\"}"
        },
        "execution_time": 0.7399413585662842,
        "is_functional_test": false
      }
    ],
    "get_balance_sheets": [
      {
        "case_name": "Basic Balance Sheet Retrieval",
        "purpose": "验证工具能够成功获取指定公司的年度资产负债表数据",
        "args": {
          "stock_code": "NVDA",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "result": "{\"balance_sheets\": [{\"ticker\": \"NVDA\", \"report_period\": \"2025-01-26\", \"fiscal_period\": \"2025-FY\", \"period\": \"annual\", \"currency\": \"USD\", \"total_assets\": 111601000000.0, \"current_assets\": 80126000000.0, \"cash_and_equivalents\": 8589000000.0, \"inventory\": 10080000000.0, \"current_investments\": 34621000000.0, \"trade_and_non_trade_receivables\": 23065000000.0, \"non_current_assets\": 31475000000.0, \"property_plant_and_equipment\": 8076000000.0, \"goodwill_and_intangible_assets\": 5995000000.0, \"investments\": 34621000000.0, \"non_current_investments\": 0.0, \"tax_assets\": 10979000000.0, \"total_liabilities\": 32274000000.0, \"current_liabilities\": 18047000000.0, \"current_debt\": 0.0, \"trade_and_non_trade_payables\": 6310000000.0, \"deferred_revenue\": 0.0, \"deposit_liabilities\": 0.0, \"non_current_liabilities\": 14227000000.0, \"non_current_debt\": 9982000000.0, \"tax_liabilities\": 0.0, \"shareholders_equity\": 79327000000.0, \"retained_earnings\": 68038000000.0, \"accumulated_other_comprehensive_income\": 28000000.0, \"outstanding_shares\": 24490000000.0, \"total_debt\": 9982000000.0}, {\"ticker\": \"NVDA\", \"report_period\": \"2024-01-28\", \"fiscal_period\": \"2024-FY\", \"period\": \"annual\", \"currency\": \"USD\", \"total_assets\": 65728000000.0, \"current_assets\": 44345000000.0, \"cash_and_equivalents\": 7280000000.0, \"inventory\": 5282000000.0, \"current_investments\": 18704000000.0, \"trade_and_non_trade_receivables\": 9999000000.0, \"...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计10395字符，剩余8995字符"
        },
        "execution_time": 2.242467164993286,
        "is_functional_test": true
      },
      {
        "case_name": "Quarterly Report Retrieval",
        "purpose": "测试工具是否能正确获取季度资产负债表数据",
        "args": {
          "stock_code": "AAPL",
          "report_period": "quarterly",
          "limit": 5
        },
        "response": {
          "result": "{\"balance_sheets\": [{\"ticker\": \"AAPL\", \"report_period\": \"2025-03-29\", \"fiscal_period\": \"2025-Q2\", \"period\": \"quarterly\", \"currency\": \"USD\", \"total_assets\": 331233000000.0, \"current_assets\": 118674000000.0, \"cash_and_equivalents\": 28162000000.0, \"inventory\": 6269000000.0, \"current_investments\": 20336000000.0, \"trade_and_non_trade_receivables\": 49798000000.0, \"non_current_assets\": 212559000000.0, \"property_plant_and_equipment\": 46876000000.0, \"goodwill_and_intangible_assets\": 0.0, \"investments\": 104760000000.0, \"non_current_investments\": 84424000000.0, \"tax_assets\": 0.0, \"total_liabilities\": 264437000000.0, \"current_liabilities\": 144571000000.0, \"current_debt\": 19620000000.0, \"trade_and_non_trade_payables\": 54126000000.0, \"deferred_revenue\": 8976000000.0, \"deposit_liabilities\": 0.0, \"non_current_liabilities\": 119866000000.0, \"non_current_debt\": 78566000000.0, \"tax_liabilities\": 0.0, \"shareholders_equity\": 66796000000.0, \"retained_earnings\": -15552000000.0, \"accumulated_other_comprehensive_income\": -6363000000.0, \"outstanding_shares\": 15022073000.0, \"total_debt\": 98186000000.0}, {\"ticker\": \"AAPL\", \"report_period\": \"2024-12-28\", \"fiscal_period\": \"2025-Q1\", \"period\": \"quarterly\", \"currency\": \"USD\", \"total_assets\": 344085000000.0, \"current_assets\": 133240000000.0, \"cash_and_equivalents\": 30299000000.0, \"inventory\": 6911000000.0, \"current_investments\": 23476000000.0, \"trade_and_non_tr...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计5385字符，剩余3985字符"
        },
        "execution_time": 1.189941644668579,
        "is_functional_test": true
      },
      {
        "case_name": "TTM Report Retrieval",
        "purpose": "验证工具对TTM（Trailing Twelve Months）报告周期的支持",
        "args": {
          "stock_code": "AMZN",
          "report_period": "ttm",
          "limit": 4
        },
        "response": {
          "error": "ToolException: Error executing tool get_balance_sheets: HTTP error occurred: 401 - {\"error\":\"Invalid API key\",\"message\":\"Please provide a valid API key from https://financialdatasets.ai\"}"
        },
        "execution_time": 0.7739713191986084,
        "is_functional_test": true
      },
      {
        "case_name": "Case Insensitive Stock Code Handling",
        "purpose": "验证工具是否支持大小写混合的股票代码",
        "args": {
          "stock_code": "nVdA",
          "report_period": "annual",
          "limit": 5
        },
        "response": {
          "result": "{\"balance_sheets\": [{\"ticker\": \"NVDA\", \"report_period\": \"2025-01-26\", \"fiscal_period\": \"2025-FY\", \"period\": \"annual\", \"currency\": \"USD\", \"total_assets\": 111601000000.0, \"current_assets\": 80126000000.0, \"cash_and_equivalents\": 8589000000.0, \"inventory\": 10080000000.0, \"current_investments\": 34621000000.0, \"trade_and_non_trade_receivables\": 23065000000.0, \"non_current_assets\": 31475000000.0, \"property_plant_and_equipment\": 8076000000.0, \"goodwill_and_intangible_assets\": 5995000000.0, \"investments\": 34621000000.0, \"non_current_investments\": 0.0, \"tax_assets\": 10979000000.0, \"total_liabilities\": 32274000000.0, \"current_liabilities\": 18047000000.0, \"current_debt\": 0.0, \"trade_and_non_trade_payables\": 6310000000.0, \"deferred_revenue\": 0.0, \"deposit_liabilities\": 0.0, \"non_current_liabilities\": 14227000000.0, \"non_current_debt\": 9982000000.0, \"tax_liabilities\": 0.0, \"shareholders_equity\": 79327000000.0, \"retained_earnings\": 68038000000.0, \"accumulated_other_comprehensive_income\": 28000000.0, \"outstanding_shares\": 24490000000.0, \"total_debt\": 9982000000.0}, {\"ticker\": \"NVDA\", \"report_period\": \"2024-01-28\", \"fiscal_period\": \"2024-FY\", \"period\": \"annual\", \"currency\": \"USD\", \"total_assets\": 65728000000.0, \"current_assets\": 44345000000.0, \"cash_and_equivalents\": 7280000000.0, \"inventory\": 5282000000.0, \"current_investments\": 18704000000.0, \"trade_and_non_trade_receivables\": 9999000000.0, \"...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计5259字符，剩余3859字符"
        },
        "execution_time": 1.1637651920318604,
        "is_functional_test": true
      },
      {
        "case_name": "Default Limit Behavior",
        "purpose": "测试当未指定limit参数时工具是否使用默认值",
        "args": {
          "stock_code": "GOOG",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "result": "{\"balance_sheets\": [{\"ticker\": \"GOOGL\", \"report_period\": \"2024-12-31\", \"fiscal_period\": \"2024-FY\", \"period\": \"annual\", \"currency\": \"USD\", \"total_assets\": 450256000000.0, \"current_assets\": 163711000000.0, \"cash_and_equivalents\": 23466000000.0, \"inventory\": 0.0, \"current_investments\": 72191000000.0, \"trade_and_non_trade_receivables\": 52340000000.0, \"non_current_assets\": 286545000000.0, \"property_plant_and_equipment\": 184624000000.0, \"goodwill_and_intangible_assets\": 31885000000.0, \"investments\": 110173000000.0, \"non_current_investments\": 37982000000.0, \"tax_assets\": 17180000000.0, \"total_liabilities\": 125172000000.0, \"current_liabilities\": 89122000000.0, \"current_debt\": 0.0, \"trade_and_non_trade_payables\": 7987000000.0, \"deferred_revenue\": 14838000000.0, \"deposit_liabilities\": 0.0, \"non_current_liabilities\": 36050000000.0, \"non_current_debt\": 22574000000.0, \"tax_liabilities\": 8782000000.0, \"shareholders_equity\": 325084000000.0, \"retained_earnings\": 245084000000.0, \"accumulated_other_comprehensive_income\": -4800000000.0, \"outstanding_shares\": 12241000000.0, \"total_debt\": 22574000000.0}, {\"ticker\": \"GOOGL\", \"report_period\": \"2023-12-31\", \"fiscal_period\": \"2023-FY\", \"period\": \"annual\", \"currency\": \"USD\", \"total_assets\": 402392000000.0, \"current_assets\": 171530000000.0, \"cash_and_equivalents\": 24048000000.0, \"inventory\": 0.0, \"current_investments\": 86868000000.0, \"trade_and_non_trade...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计10855字符，剩余9455字符"
        },
        "execution_time": 0.7600696086883545,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "测试工具对无效股票代码格式的处理（如空字符串）",
        "args": {
          "stock_code": "",
          "report_period": "annual",
          "limit": 5
        },
        "response": {
          "error": "ToolException: Error executing tool get_balance_sheets: Unexpected error fetching balance sheets: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.006000995635986328,
        "is_functional_test": false
      },
      {
        "case_name": "Null Stock Code Input",
        "purpose": "测试工具对 null 值输入的处理",
        "args": {
          "stock_code": null,
          "report_period": "annual",
          "limit": 5
        },
        "response": {
          "error": "ToolException: Error executing tool get_balance_sheets: 1 validation error for get_balance_sheetsArguments\nstock_code\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.009998559951782227,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Stock Code",
        "purpose": "测试工具对包含特殊字符的股票代码的处理",
        "args": {
          "stock_code": "NVDA@#",
          "report_period": "annual",
          "limit": 5
        },
        "response": {
          "error": "ToolException: Error executing tool get_balance_sheets: HTTP error occurred: 400 - {\"error\":\"Invalid TICKER\",\"message\":\"Please provide a valid TICKER.\"}"
        },
        "execution_time": 0.7460885047912598,
        "is_functional_test": false
      },
      {
        "case_name": "SQL Injection Attempt in Stock Code",
        "purpose": "测试工具对潜在SQL注入攻击的防御能力",
        "args": {
          "stock_code": "NVDA'; DROP TABLE balance_sheets;",
          "report_period": "annual",
          "limit": 5
        },
        "response": {
          "error": "ToolException: Error executing tool get_balance_sheets: HTTP error occurred: 400 - {\"error\":\"Invalid TICKER\",\"message\":\"Please provide a valid TICKER.\"}"
        },
        "execution_time": 0.7512338161468506,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Report Period Input",
        "purpose": "测试工具对非法报告周期参数的处理",
        "args": {
          "stock_code": "MSFT",
          "report_period": "monthly",
          "limit": 5
        },
        "response": {
          "error": "ToolException: Error executing tool get_balance_sheets: Unexpected error fetching balance sheets: 'report_period' must be one of: annual, quarterly, ttm."
        },
        "execution_time": 0.003997802734375,
        "is_functional_test": false
      },
      {
        "case_name": "Zero Limit Value",
        "purpose": "测试工具对limit参数为0时的行为",
        "args": {
          "stock_code": "TSLA",
          "report_period": "annual",
          "limit": 0
        },
        "response": {
          "error": "ToolException: Error executing tool get_balance_sheets: Unexpected error fetching balance sheets: 'limit' must be a positive integer."
        },
        "execution_time": 0.00500035285949707,
        "is_functional_test": false
      },
      {
        "case_name": "Negative Limit Value",
        "purpose": "测试工具对负数limit参数的处理",
        "args": {
          "stock_code": "FB",
          "report_period": "quarterly",
          "limit": -5
        },
        "response": {
          "error": "ToolException: Error executing tool get_balance_sheets: Unexpected error fetching balance sheets: 'limit' must be a positive integer."
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      },
      {
        "case_name": "Non-Integer Limit Value",
        "purpose": "测试工具对非整型limit参数的处理",
        "args": {
          "stock_code": "IBM",
          "report_period": "ttm",
          "limit": "five"
        },
        "response": {
          "error": "ToolException: Error executing tool get_balance_sheets: 1 validation error for get_balance_sheetsArguments\nlimit\n  Input should be a valid integer, unable to parse string as an integer [type=int_parsing, input_value='five', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/int_parsing"
        },
        "execution_time": 0.0029990673065185547,
        "is_functional_test": false
      },
      {
        "case_name": "Large Limit Value Test",
        "purpose": "测试工具对极大limit值的响应行为",
        "args": {
          "stock_code": "INTC",
          "report_period": "annual",
          "limit": 1000
        },
        "response": {
          "error": "ToolException: Error executing tool get_balance_sheets: HTTP error occurred: 401 - {\"error\":\"Invalid API key\",\"message\":\"Please provide a valid API key from https://financialdatasets.ai\"}"
        },
        "execution_time": 0.7500121593475342,
        "is_functional_test": false
      }
    ],
    "get_cash_flows": [
      {
        "case_name": "Basic Cash Flow Statement Retrieval",
        "purpose": "验证工具能够成功获取指定公司的年度现金流量表数据",
        "args": {
          "stock_code": "NVDA",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "error": "ToolException: Error executing tool get_cash_flows: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.6629674434661865,
        "is_functional_test": true
      },
      {
        "case_name": "Quarterly Report Retrieval",
        "purpose": "测试工具是否能正确获取季度现金流量表数据",
        "args": {
          "stock_code": "AAPL",
          "report_period": "quarterly",
          "limit": 5
        },
        "response": {
          "error": "ToolException: Error executing tool get_cash_flows: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.8130228519439697,
        "is_functional_test": true
      },
      {
        "case_name": "TTM Report Retrieval",
        "purpose": "验证工具对TTM（Trailing Twelve Months）报告周期的支持",
        "args": {
          "stock_code": "AMZN",
          "report_period": "ttm",
          "limit": 4
        },
        "response": {
          "error": "ToolException: Error executing tool get_cash_flows: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.37213897705078125,
        "is_functional_test": true
      },
      {
        "case_name": "Default Limit Behavior",
        "purpose": "测试当未指定limit参数时工具是否使用默认值",
        "args": {
          "stock_code": "GOOG",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "error": "ToolException: Error executing tool get_cash_flows: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3716123104095459,
        "is_functional_test": true
      },
      {
        "case_name": "Case Insensitive Stock Code Handling",
        "purpose": "验证工具是否支持大小写混合的股票代码",
        "args": {
          "stock_code": "nVdA",
          "report_period": "annual",
          "limit": 5
        },
        "response": {
          "error": "ToolException: Error executing tool get_cash_flows: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7884576320648193,
        "is_functional_test": true
      },
      {
        "case_name": "SQL Injection Attempt in Stock Code",
        "purpose": "测试工具对潜在SQL注入攻击的防御能力",
        "args": {
          "stock_code": "NVDA'; DROP TABLE cash_flows;",
          "report_period": "annual",
          "limit": 5
        },
        "response": {
          "error": "ToolException: Error executing tool get_cash_flows: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7944252490997314,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Stock Code",
        "purpose": "测试工具对包含特殊字符的股票代码的处理",
        "args": {
          "stock_code": "NVDA@#",
          "report_period": "annual",
          "limit": 5
        },
        "response": {
          "error": "ToolException: Error executing tool get_cash_flows: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3732931613922119,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Report Period Input",
        "purpose": "测试工具对非法报告周期参数的处理",
        "args": {
          "stock_code": "MSFT",
          "report_period": "monthly",
          "limit": 5
        },
        "response": {
          "error": "ToolException: Error executing tool get_cash_flows: Unexpected error fetching cash flows: 'report_period' must be one of: annual, quarterly, ttm."
        },
        "execution_time": 0.004221439361572266,
        "is_functional_test": false
      }
    ],
    "get_financial_ratios": [
      {
        "case_name": "Basic Financial Ratios Retrieval",
        "purpose": "验证工具能够成功获取指定公司的基本财务比率数据",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_financial_ratios: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.4748499393463135,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "测试工具对无效股票代码格式的处理（如空字符串）",
        "args": {
          "stock_code": ""
        },
        "response": {
          "error": "ToolException: Error executing tool get_financial_ratios: Unexpected error fetching financial ratios: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": false
      },
      {
        "case_name": "Nonexistent Stock Code",
        "purpose": "测试工具在提供不存在的股票代码时是否能正确抛出错误",
        "args": {
          "stock_code": "XYZ123"
        },
        "response": {
          "error": "ToolException: Error executing tool get_financial_ratios: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.0624074935913086,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Stock Code",
        "purpose": "测试工具对包含特殊字符的股票代码的处理",
        "args": {
          "stock_code": "NVDA@#"
        },
        "response": {
          "error": "ToolException: Error executing tool get_financial_ratios: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3694469928741455,
        "is_functional_test": false
      },
      {
        "case_name": "Null Stock Code Input",
        "purpose": "测试工具对 null 值输入的处理",
        "args": {
          "stock_code": null
        },
        "response": {
          "error": "ToolException: Error executing tool get_financial_ratios: 1 validation error for get_financial_ratiosArguments\nstock_code\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.0030002593994140625,
        "is_functional_test": false
      },
      {
        "case_name": "Case Insensitive Stock Code Handling",
        "purpose": "验证工具是否支持大小写混合的股票代码",
        "args": {
          "stock_code": "nVdA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_financial_ratios: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7862265110015869,
        "is_functional_test": true
      },
      {
        "case_name": "Security Check - SQL Injection Attempt",
        "purpose": "测试工具对潜在SQL注入攻击的防御能力",
        "args": {
          "stock_code": "NVDA'; DROP TABLE financial_ratios;"
        },
        "response": {
          "error": "ToolException: Error executing tool get_financial_ratios: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3768274784088135,
        "is_functional_test": false
      },
      {
        "case_name": "Numeric Only Stock Code",
        "purpose": "测试工具对纯数字股票代码的响应",
        "args": {
          "stock_code": "1234"
        },
        "response": {
          "error": "ToolException: Error executing tool get_financial_ratios: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.37129878997802734,
        "is_functional_test": false
      }
    ],
    "get_earnings_history": [
      {
        "case_name": "Basic Earnings History Retrieval",
        "purpose": "验证工具能够成功获取指定公司的历史收益数据",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_earnings_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.3945584297180176,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "测试工具对无效股票代码格式的处理（如空字符串）",
        "args": {
          "stock_code": ""
        },
        "response": {
          "error": "ToolException: Error executing tool get_earnings_history: Unexpected error fetching earnings history: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.0031719207763671875,
        "is_functional_test": false
      },
      {
        "case_name": "Nonexistent Stock Code",
        "purpose": "测试工具在提供不存在的股票代码时是否能正确抛出错误",
        "args": {
          "stock_code": "XYZ123"
        },
        "response": {
          "error": "ToolException: Error executing tool get_earnings_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7872490882873535,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Stock Code",
        "purpose": "测试工具对包含特殊字符的股票代码的处理",
        "args": {
          "stock_code": "NVDA@#"
        },
        "response": {
          "error": "ToolException: Error executing tool get_earnings_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7996912002563477,
        "is_functional_test": false
      },
      {
        "case_name": "Null Stock Code Input",
        "purpose": "测试工具对 null 值输入的处理",
        "args": {
          "stock_code": null
        },
        "response": {
          "error": "ToolException: Error executing tool get_earnings_history: 1 validation error for get_earnings_historyArguments\nstock_code\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.003998517990112305,
        "is_functional_test": false
      },
      {
        "case_name": "Case Insensitive Stock Code Handling",
        "purpose": "验证工具是否支持大小写混合的股票代码",
        "args": {
          "stock_code": "nVdA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_earnings_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3975386619567871,
        "is_functional_test": true
      },
      {
        "case_name": "Security Check - SQL Injection Attempt",
        "purpose": "测试工具对潜在SQL注入攻击的防御能力",
        "args": {
          "stock_code": "NVDA'; DROP TABLE earnings;"
        },
        "response": {
          "error": "ToolException: Error executing tool get_earnings_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.37585020065307617,
        "is_functional_test": false
      },
      {
        "case_name": "Numeric Only Stock Code",
        "purpose": "测试工具对纯数字股票代码的响应",
        "args": {
          "stock_code": "1234"
        },
        "response": {
          "error": "ToolException: Error executing tool get_earnings_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3754138946533203,
        "is_functional_test": false
      }
    ],
    "get_analyst_estimates": [
      {
        "case_name": "Basic Analyst Estimates Retrieval",
        "purpose": "验证工具能够成功获取指定公司的分析师估计数据",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_analyst_estimates: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.3793137073516846,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "测试工具对无效股票代码格式的处理（如空字符串）",
        "args": {
          "stock_code": ""
        },
        "response": {
          "error": "ToolException: Error executing tool get_analyst_estimates: Unexpected error fetching analyst estimates: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.00400090217590332,
        "is_functional_test": false
      },
      {
        "case_name": "Null Stock Code Input",
        "purpose": "测试工具对 null 值输入的处理",
        "args": {
          "stock_code": null
        },
        "response": {
          "error": "ToolException: Error executing tool get_analyst_estimates: 1 validation error for get_analyst_estimatesArguments\nstock_code\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.005998373031616211,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Stock Code",
        "purpose": "测试工具对包含特殊字符的股票代码的处理",
        "args": {
          "stock_code": "NVDA@#"
        },
        "response": {
          "error": "ToolException: Error executing tool get_analyst_estimates: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3710792064666748,
        "is_functional_test": false
      },
      {
        "case_name": "Case Insensitive Stock Code Handling",
        "purpose": "验证工具是否支持大小写混合的股票代码",
        "args": {
          "stock_code": "nVdA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_analyst_estimates: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7993838787078857,
        "is_functional_test": true
      },
      {
        "case_name": "Security Check - SQL Injection Attempt",
        "purpose": "测试工具对潜在SQL注入攻击的防御能力",
        "args": {
          "stock_code": "NVDA'; DROP TABLE analysts;"
        },
        "response": {
          "error": "ToolException: Error executing tool get_analyst_estimates: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7804286479949951,
        "is_functional_test": false
      },
      {
        "case_name": "Nonexistent Stock Code",
        "purpose": "测试工具在提供不存在的股票代码时是否能正确抛出错误",
        "args": {
          "stock_code": "XYZ123"
        },
        "response": {
          "error": "ToolException: Error executing tool get_analyst_estimates: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7925784587860107,
        "is_functional_test": false
      },
      {
        "case_name": "Numeric Only Stock Code",
        "purpose": "测试工具对纯数字股票代码的响应",
        "args": {
          "stock_code": "1234"
        },
        "response": {
          "error": "ToolException: Error executing tool get_analyst_estimates: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3728139400482178,
        "is_functional_test": false
      }
    ],
    "get_stock_prices": [
      {
        "case_name": "Basic Stock Price Retrieval",
        "purpose": "验证工具能够成功获取指定股票代码在给定日期范围内的历史股价数据",
        "args": {
          "stock_code": "NVDA",
          "start_date": "2023-01-01",
          "end_date": "2023-12-31"
        },
        "response": {
          "error": "ToolException: Error executing tool get_stock_prices: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.3547232151031494,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Date Format Handling",
        "purpose": "测试工具对非法日期格式的处理（如使用YYYY/MM/DD）",
        "args": {
          "stock_code": "AAPL",
          "start_date": "2023/01/01",
          "end_date": "2023/12/31"
        },
        "response": {
          "error": "ToolException: Error executing tool get_stock_prices: Unexpected error fetching stock prices: 'start_date' and 'end_date' must be in format YYYY-MM-DD."
        },
        "execution_time": 0.004000663757324219,
        "is_functional_test": false
      },
      {
        "case_name": "Start Date After End Date",
        "purpose": "测试当起始日期晚于结束日期时工具是否能正确抛出错误",
        "args": {
          "stock_code": "GOOG",
          "start_date": "2024-12-31",
          "end_date": "2024-01-01"
        },
        "response": {
          "error": "ToolException: Error executing tool get_stock_prices: Unexpected error fetching stock prices: 'start_date' must be before or equal to 'end_date'."
        },
        "execution_time": 0.005001544952392578,
        "is_functional_test": false
      },
      {
        "case_name": "Empty Stock Code Input",
        "purpose": "测试工具对空字符串作为股票代码的处理",
        "args": {
          "stock_code": "",
          "start_date": "2023-01-01",
          "end_date": "2023-12-31"
        },
        "response": {
          "error": "ToolException: Error executing tool get_stock_prices: Unexpected error fetching stock prices: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.0070002079010009766,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Stock Code",
        "purpose": "测试工具对包含特殊字符的股票代码的处理",
        "args": {
          "stock_code": "NVDA@#",
          "start_date": "2023-01-01",
          "end_date": "2023-12-31"
        },
        "response": {
          "error": "ToolException: Error executing tool get_stock_prices: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.37000298500061035,
        "is_functional_test": false
      },
      {
        "case_name": "Null Input for All Parameters",
        "purpose": "测试工具对所有参数为null时的响应行为",
        "args": {
          "stock_code": null,
          "start_date": null,
          "end_date": null
        },
        "response": {
          "error": "ToolException: Error executing tool get_stock_prices: 3 validation errors for get_stock_pricesArguments\nstock_code\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type\nstart_date\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type\nend_date\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.002999544143676758,
        "is_functional_test": false
      },
      {
        "case_name": "SQL Injection Attempt in Stock Code",
        "purpose": "测试工具对潜在SQL注入攻击的防御能力",
        "args": {
          "stock_code": "NVDA'; DROP TABLE stock_prices;",
          "start_date": "2023-01-01",
          "end_date": "2023-12-31"
        },
        "response": {
          "error": "ToolException: Error executing tool get_stock_prices: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7752456665039062,
        "is_functional_test": false
      },
      {
        "case_name": "Case Insensitive Stock Code Handling",
        "purpose": "验证工具是否支持大小写混合的股票代码",
        "args": {
          "stock_code": "nVdA",
          "start_date": "2023-01-01",
          "end_date": "2023-12-31"
        },
        "response": {
          "error": "ToolException: Error executing tool get_stock_prices: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7750158309936523,
        "is_functional_test": true
      }
    ],
    "get_dividend_history": [
      {
        "case_name": "Basic Dividend History Retrieval",
        "purpose": "验证工具能够成功获取指定公司的股息历史记录",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_dividend_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.3844139575958252,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "测试工具对无效股票代码格式的处理（如空字符串）",
        "args": {
          "stock_code": ""
        },
        "response": {
          "error": "ToolException: Error executing tool get_dividend_history: Unexpected error fetching dividend history: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.0030014514923095703,
        "is_functional_test": false
      },
      {
        "case_name": "Null Stock Code Input",
        "purpose": "测试工具对 null 值输入的处理",
        "args": {
          "stock_code": null
        },
        "response": {
          "error": "ToolException: Error executing tool get_dividend_history: 1 validation error for get_dividend_historyArguments\nstock_code\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.0029990673065185547,
        "is_functional_test": false
      },
      {
        "case_name": "Nonexistent Stock Code",
        "purpose": "测试工具在提供不存在的股票代码时是否能正确抛出错误",
        "args": {
          "stock_code": "XYZ123"
        },
        "response": {
          "error": "ToolException: Error executing tool get_dividend_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7889730930328369,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Stock Code",
        "purpose": "测试工具对包含特殊字符的股票代码的处理",
        "args": {
          "stock_code": "NVDA@#"
        },
        "response": {
          "error": "ToolException: Error executing tool get_dividend_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7677922248840332,
        "is_functional_test": false
      },
      {
        "case_name": "Case Insensitive Stock Code Handling",
        "purpose": "验证工具是否支持大小写混合的股票代码",
        "args": {
          "stock_code": "nVdA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_dividend_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3686659336090088,
        "is_functional_test": true
      },
      {
        "case_name": "Security Check - SQL Injection Attempt",
        "purpose": "测试工具对潜在SQL注入攻击的防御能力",
        "args": {
          "stock_code": "NVDA'; DROP TABLE dividends;"
        },
        "response": {
          "error": "ToolException: Error executing tool get_dividend_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7763652801513672,
        "is_functional_test": false
      },
      {
        "case_name": "Large Stock Code Length",
        "purpose": "测试工具对超长股票代码的响应行为",
        "args": {
          "stock_code": "NVDA_NVDA_NVDA_NVDA_NVDA_NVDA_NVDA_NVDA_NVDA_NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_dividend_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3656797409057617,
        "is_functional_test": false
      }
    ],
    "get_splits_history": [
      {
        "case_name": "Basic Stock Split History Retrieval",
        "purpose": "验证工具能够成功获取指定公司的股票拆分历史数据",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_splits_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.34297776222229,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "测试工具对无效股票代码格式的处理（如空字符串）",
        "args": {
          "stock_code": ""
        },
        "response": {
          "error": "ToolException: Error executing tool get_splits_history: Unexpected error fetching splits history: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": false
      },
      {
        "case_name": "Nonexistent Stock Code",
        "purpose": "测试工具在提供不存在的股票代码时是否能正确抛出错误",
        "args": {
          "stock_code": "XYZ123"
        },
        "response": {
          "error": "ToolException: Error executing tool get_splits_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7938692569732666,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Stock Code",
        "purpose": "测试工具对包含特殊字符的股票代码的处理",
        "args": {
          "stock_code": "NVDA@#"
        },
        "response": {
          "error": "ToolException: Error executing tool get_splits_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7901625633239746,
        "is_functional_test": false
      },
      {
        "case_name": "Null Stock Code Input",
        "purpose": "测试工具对 null 值输入的处理",
        "args": {
          "stock_code": null
        },
        "response": {
          "error": "ToolException: Error executing tool get_splits_history: 1 validation error for get_splits_historyArguments\nstock_code\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.004000663757324219,
        "is_functional_test": false
      },
      {
        "case_name": "Case Insensitive Stock Code Handling",
        "purpose": "验证工具是否支持大小写混合的股票代码",
        "args": {
          "stock_code": "nVdA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_splits_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.37063121795654297,
        "is_functional_test": true
      },
      {
        "case_name": "Security Check - SQL Injection Attempt",
        "purpose": "测试工具对潜在SQL注入攻击的防御能力",
        "args": {
          "stock_code": "NVDA'; DROP TABLE splits;"
        },
        "response": {
          "error": "ToolException: Error executing tool get_splits_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.36883997917175293,
        "is_functional_test": false
      },
      {
        "case_name": "Numeric Only Stock Code",
        "purpose": "测试工具对纯数字股票代码的响应",
        "args": {
          "stock_code": "1234"
        },
        "response": {
          "error": "ToolException: Error executing tool get_splits_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.36898255348205566,
        "is_functional_test": false
      }
    ],
    "get_ownership_data": [
      {
        "case_name": "Basic Ownership Data Retrieval",
        "purpose": "验证工具能够成功获取指定公司的所有权结构数据",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_ownership_data: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.3270103931427002,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "测试工具对无效股票代码格式的处理（如空字符串）",
        "args": {
          "stock_code": ""
        },
        "response": {
          "error": "ToolException: Error executing tool get_ownership_data: Unexpected error fetching ownership data: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.003600597381591797,
        "is_functional_test": false
      },
      {
        "case_name": "Null Stock Code Input",
        "purpose": "测试工具对 null 值输入的处理",
        "args": {
          "stock_code": null
        },
        "response": {
          "error": "ToolException: Error executing tool get_ownership_data: 1 validation error for get_ownership_dataArguments\nstock_code\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.005998849868774414,
        "is_functional_test": false
      },
      {
        "case_name": "Nonexistent Stock Code",
        "purpose": "测试工具在提供不存在的股票代码时是否能正确抛出错误",
        "args": {
          "stock_code": "XYZ123"
        },
        "response": {
          "error": "ToolException: Error executing tool get_ownership_data: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7773380279541016,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Stock Code",
        "purpose": "测试工具对包含特殊字符的股票代码的处理",
        "args": {
          "stock_code": "NVDA@#"
        },
        "response": {
          "error": "ToolException: Error executing tool get_ownership_data: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3626372814178467,
        "is_functional_test": false
      },
      {
        "case_name": "Case Insensitive Stock Code Handling",
        "purpose": "验证工具是否支持大小写混合的股票代码",
        "args": {
          "stock_code": "nVdA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_ownership_data: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7793848514556885,
        "is_functional_test": true
      },
      {
        "case_name": "SQL Injection Attempt in Stock Code",
        "purpose": "测试工具对潜在SQL注入攻击的防御能力",
        "args": {
          "stock_code": "NVDA'; DROP TABLE ownership_data;"
        },
        "response": {
          "error": "ToolException: Error executing tool get_ownership_data: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3634073734283447,
        "is_functional_test": false
      },
      {
        "case_name": "Numeric Only Stock Code",
        "purpose": "测试工具对纯数字股票代码的响应",
        "args": {
          "stock_code": "1234"
        },
        "response": {
          "error": "ToolException: Error executing tool get_ownership_data: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3643534183502197,
        "is_functional_test": false
      }
    ],
    "get_market_news": [
      {
        "case_name": "Basic Market News Retrieval",
        "purpose": "验证工具能够成功获取指定公司的最新市场新闻",
        "args": {
          "company_name": "NVIDIA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_market_news: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.3363616466522217,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Company Name Input",
        "purpose": "测试工具对空字符串公司名称的处理",
        "args": {
          "company_name": ""
        },
        "response": {
          "error": "ToolException: Error executing tool get_market_news: Unexpected error fetching market news: 'company_name' must be a non-empty string."
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": false
      },
      {
        "case_name": "Null Company Name Input",
        "purpose": "测试工具对 null 值公司名称的处理",
        "args": {
          "company_name": null
        },
        "response": {
          "error": "ToolException: Error executing tool get_market_news: 1 validation error for get_market_newsArguments\ncompany_name\n  Input should be a valid string [type=string_type, input_value=None, input_type=NoneType]\n    For further information visit https://errors.pydantic.dev/2.10/v/string_type"
        },
        "execution_time": 0.006007671356201172,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Company Name",
        "purpose": "测试工具对包含特殊字符的公司名称的处理",
        "args": {
          "company_name": "NVDA@#"
        },
        "response": {
          "error": "ToolException: Error executing tool get_market_news: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7898809909820557,
        "is_functional_test": false
      },
      {
        "case_name": "SQL Injection Attempt in Company Name",
        "purpose": "测试工具对潜在SQL注入攻击的防御能力",
        "args": {
          "company_name": "NVIDIA'; DROP TABLE news;"
        },
        "response": {
          "error": "ToolException: Error executing tool get_market_news: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7909755706787109,
        "is_functional_test": false
      },
      {
        "case_name": "Case Insensitive Company Name Handling",
        "purpose": "验证工具是否支持大小写混合的公司名称输入",
        "args": {
          "company_name": "nVdA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_market_news: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3719189167022705,
        "is_functional_test": true
      },
      {
        "case_name": "Nonexistent Company Name",
        "purpose": "测试工具在提供不存在的公司名称时是否能正确抛出错误",
        "args": {
          "company_name": "XYZ123"
        },
        "response": {
          "error": "ToolException: Error executing tool get_market_news: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.36878228187561035,
        "is_functional_test": false
      },
      {
        "case_name": "Numeric Only Company Name",
        "purpose": "测试工具对纯数字公司名称的响应",
        "args": {
          "company_name": "1234"
        },
        "response": {
          "error": "ToolException: Error executing tool get_market_news: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3720893859863281,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 108
}