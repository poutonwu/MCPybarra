{
  "server_name": "git_mcp_server",
  "parent_dir": "metaGPT-qwen-plus",
  "report_name": "metaGPT-qwen-plus-git_mcp_server",
  "server_path": "workspace\\metaGPT-servers\\metaGPT-qwen-plus\\git_mcp_server.py",
  "timestamp": "2025-07-13T22:58:56.814367",
  "tools": [
    {
      "name": "git_init",
      "description": "Initialize a new Git repository.\n\n    Args:\n        path: The directory path where to create the repository.\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_initArguments",
        "type": "object"
      }
    },
    {
      "name": "git_status",
      "description": "Get the status of a Git repository.\n\n    Args:\n        path: Path to the repository.\n\n    Returns:\n        A string containing the status output.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_statusArguments",
        "type": "object"
      }
    },
    {
      "name": "git_add",
      "description": "Add files to the staging area.\n\n    Args:\n        path: Path to the repository.\n        file_pattern: Pattern of files to add (default is all files).\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "file_pattern": {
            "default": ".",
            "title": "File Pattern",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_addArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_unstaged",
      "description": "Show differences in unstaged changes.\n\n    Args:\n        path: Path to the repository.\n\n    Returns:\n        A string containing the diff output.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_diff_unstagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_staged",
      "description": "Show differences in staged changes.\n\n    Args:\n        path: Path to the repository.\n\n    Returns:\n        A string containing the diff output.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_diff_stagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff",
      "description": "Compare two commits or branches.\n\n    Args:\n        path: Path to the repository.\n        commit_range: Range of commits to compare (e.g., 'HEAD~2..HEAD').\n\n    Returns:\n        A string containing the diff output.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "commit_range": {
            "title": "Commit Range",
            "type": "string"
          }
        },
        "required": [
          "path",
          "commit_range"
        ],
        "title": "git_diffArguments",
        "type": "object"
      }
    },
    {
      "name": "git_commit",
      "description": "Commit changes in the repository.\n\n    Args:\n        path: Path to the repository.\n        message: Commit message.\n        author: Optional author name and email (format: 'Name <email>').\n\n    Returns:\n        A string containing the commit hash.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "message": {
            "title": "Message",
            "type": "string"
          },
          "author": {
            "default": null,
            "title": "Author",
            "type": "string"
          }
        },
        "required": [
          "path",
          "message"
        ],
        "title": "git_commitArguments",
        "type": "object"
      }
    },
    {
      "name": "git_reset",
      "description": "Unstage changes in the repository.\n\n    Args:\n        path: Path to the repository.\n        file_path: Optional specific file to unstage. If None, unstages all.\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "file_path": {
            "default": null,
            "title": "File Path",
            "type": "string"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_resetArguments",
        "type": "object"
      }
    },
    {
      "name": "git_log",
      "description": "View commit history.\n\n    Args:\n        path: Path to the repository.\n        max_count: Maximum number of commits to show (default: 10).\n\n    Returns:\n        A string containing the commit history.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "max_count": {
            "default": 10,
            "title": "Max Count",
            "type": "integer"
          }
        },
        "required": [
          "path"
        ],
        "title": "git_logArguments",
        "type": "object"
      }
    },
    {
      "name": "git_create_branch",
      "description": "Create a new branch.\n\n    Args:\n        path: Path to the repository.\n        branch_name: Name of the new branch.\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "path",
          "branch_name"
        ],
        "title": "git_create_branchArguments",
        "type": "object"
      }
    },
    {
      "name": "git_checkout",
      "description": "Switch to a different branch.\n\n    Args:\n        path: Path to the repository.\n        branch_name: Name of the branch to switch to.\n\n    Returns:\n        A string containing the result message.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "branch_name": {
            "title": "Branch Name",
            "type": "string"
          }
        },
        "required": [
          "path",
          "branch_name"
        ],
        "title": "git_checkoutArguments",
        "type": "object"
      }
    },
    {
      "name": "git_show",
      "description": "Display details of a specific commit.\n\n    Args:\n        path: Path to the repository.\n        commit_hash: Hash of the commit to show.\n\n    Returns:\n        A string containing the commit details.\n\n    Raises:\n        ValueError: If the path is invalid.\n        GitCommandError: If the git command fails.\n    ",
      "args_schema": {
        "properties": {
          "path": {
            "title": "Path",
            "type": "string"
          },
          "commit_hash": {
            "title": "Commit Hash",
            "type": "string"
          }
        },
        "required": [
          "path",
          "commit_hash"
        ],
        "title": "git_showArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "git_init": [
      {
        "case_name": "Initialize Git Repository in Valid Directory",
        "purpose": "验证工具能够在指定的有效目录中成功初始化一个新的Git仓库。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.1546614170074463,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Initialize Git Repository in Non-Existent Path",
        "purpose": "验证当提供的路径不存在时，工具是否能正确抛出ValueError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "execution_time": 0.15139174461364746,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository in Root Directory",
        "purpose": "测试在系统根目录下初始化Git仓库的行为（边界情况）。",
        "args": {
          "path": "D:\\"
        },
        "response": {
          "result": "Repository initialized at D:\\"
        },
        "execution_time": 0.15835833549499512,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository with Special Characters in Path",
        "purpose": "验证包含特殊字符的路径是否能够被正确处理。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test@files#123"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test@files#123"
        },
        "execution_time": 0.17606043815612793,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository in Hidden Directory",
        "purpose": "验证工具是否能在隐藏目录中成功初始化Git仓库。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\.hidden_test_dir"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\.hidden_test_dir"
        },
        "execution_time": 0.19118785858154297,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository in Read-Only Directory",
        "purpose": "测试工具在没有写权限的目录中尝试初始化仓库时是否能优雅地处理错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonly_dir"
        },
        "response": {
          "result": "Repository initialized at D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonly_dir"
        },
        "execution_time": 0.18364357948303223,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository Using Empty Path",
        "purpose": "验证空路径参数是否会被正确识别并抛出相应的参数验证错误。",
        "args": {
          "path": ""
        },
        "response": {
          "result": "Repository initialized at "
        },
        "execution_time": 0.21830058097839355,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository on Drive Root with Limited Permissions",
        "purpose": "测试在受限制的根驱动器路径上初始化仓库的安全性行为。",
        "args": {
          "path": "C:\\"
        },
        "response": {
          "result": "Repository initialized at C:\\"
        },
        "execution_time": 0.18474245071411133,
        "is_functional_test": false
      }
    ],
    "git_status": [
      {
        "case_name": "Get Status of Initialized Git Repository",
        "purpose": "验证工具能够正确获取已初始化Git仓库的状态信息。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\t.hidden_test_file.txt\n\tapp.ico\n\tmerged_@#$.pdf\n\tmodules.xml\n\tnature.jpeg\n\tnature_converted.jpeg\n\tnonname.html\n\tpaper1.pdf\n\tpresent.html\n\tre2.doc\n\trule1.pdf\n\tsingle_merged_output.pdf\n\tswe.pptx\n\ttest_mskanji.csv\n\txue.jpg\n\txue_converted.png\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.15651226043701172,
        "is_functional_test": true
      },
      {
        "case_name": "Get Status of Non-Existent Git Repository",
        "purpose": "验证当提供的路径不存在时，工具是否能正确抛出ValueError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)"
        },
        "execution_time": 0.16343998908996582,
        "is_functional_test": false
      },
      {
        "case_name": "Get Status from Root Directory Git Repository",
        "purpose": "测试在系统根目录下获取Git仓库状态的行为（边界情况）。",
        "args": {
          "path": "D:\\"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: Cmd('git') failed due to: exit code(128)\n  cmdline: git status\n  stderr: 'fatal: detected dubious ownership in repository at 'D:/'\n'D:/' is owned by:\n\tNT AUTHORITY/SYSTEM (S-1-5-18)\nbut the current user is:\n\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\nTo add an exception for this directory, call:\n\n\tgit config --global --add safe.directory D:/'"
        },
        "execution_time": 0.15653347969055176,
        "is_functional_test": true
      },
      {
        "case_name": "Get Status with Special Characters in Path",
        "purpose": "验证包含特殊字符的路径是否能够被正确处理以获取Git状态。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test@files#123"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)"
        },
        "execution_time": 0.13262295722961426,
        "is_functional_test": true
      },
      {
        "case_name": "Get Status from Hidden Git Repository",
        "purpose": "验证工具是否能在隐藏目录中正确获取Git仓库状态。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\.hidden_test_dir"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)"
        },
        "execution_time": 0.1967165470123291,
        "is_functional_test": true
      },
      {
        "case_name": "Get Status in Read-Only Directory",
        "purpose": "测试工具在没有写权限的目录中尝试获取Git状态时是否能优雅地处理错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonly_dir"
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nnothing to commit (create/copy files and use \"git add\" to track)"
        },
        "execution_time": 0.15212440490722656,
        "is_functional_test": false
      },
      {
        "case_name": "Get Status Using Empty Path",
        "purpose": "验证空路径参数是否会被正确识别并抛出相应的参数验证错误。",
        "args": {
          "path": ""
        },
        "response": {
          "result": "On branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\tarxiv_mcp_server_new.py\n\tdata_exploration_mcp_server.py\n\tdoc_processor_mcp_server.py\n\tdocument_mcp_server.py\n\tdownloaded_papers/\n\tduckduckgo-mcp.py\n\tduffeld-mcp.py\n\tfinancial_data_mcp_server.py\n\tgit_mcp_server.py\n\thf_mcp_server/\n\timage_convert_mcp_server.py\n\timage_search_mcp_server.py\n\timages/\n\tmarkdown_conversion_mcp_server.py\n\tmcp-pdf-tools.py\n\tmongodb_mcp_server.py\n\tmysql_mcp_server.py\n\toutlook_mcp_server.py\n\tscreenshot-server.py\n\tsine_plot.png\n\tssh_mcp_server.py\n\ttavily_search_server.py\n\ttext_file_mcp_server.py\n\tunsplash_mcp_server.py\n\tzotero_mcp_server.py\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
        },
        "execution_time": 0.1800222396850586,
        "is_functional_test": false
      },
      {
        "case_name": "Get Status on Drive Root with Limited Permissions",
        "purpose": "测试在受限制的根驱动器路径上获取Git状态的安全性行为。",
        "args": {
          "path": "C:\\"
        },
        "response": {
          "error": "ToolException: Error executing tool git_status: Cmd('git') failed due to: exit code(128)\n  cmdline: git status\n  stderr: 'fatal: detected dubious ownership in repository at 'C:/'\n'C:/' is owned by:\n\tNT SERVICE/TrustedInstaller (S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)\nbut the current user is:\n\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\nTo add an exception for this directory, call:\n\n\tgit config --global --add safe.directory C:/'"
        },
        "execution_time": 0.1758592128753662,
        "is_functional_test": false
      }
    ],
    "git_add": [
      {
        "case_name": "Add All Files to Staging Area in Valid Repository",
        "purpose": "验证工具能够将指定仓库中的所有文件添加到暂存区（使用默认file_pattern）。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "Added '.' to staging area in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.3679771423339844,
        "is_functional_test": true
      },
      {
        "case_name": "Add Specific File Pattern to Staging Area",
        "purpose": "验证工具能正确识别并添加符合指定模式的文件（如*.txt）。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_pattern": "*.txt"
        },
        "response": {
          "result": "Added '*.txt' to staging area in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.20443248748779297,
        "is_functional_test": true
      },
      {
        "case_name": "Add File with Special Characters in Name",
        "purpose": "测试包含特殊字符的文件名是否可以被正确添加至暂存区。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_pattern": "merged_@#$.pdf"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Cmd('git') failed due to: exit code(128)\n  cmdline: git add merged_@#$.pdf\n  stderr: 'fatal: pathspec 'merged_@#$.pdf' did not match any files'"
        },
        "execution_time": 0.15059828758239746,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Add Files in Non-Existent Git Repository",
        "purpose": "验证当提供的路径不存在Git仓库时，工具是否能正确抛出GitCommandError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "file_pattern": "*"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Cmd('git') failed due to: exit code(128)\n  cmdline: git add *\n  stderr: 'fatal: pathspec '*' did not match any files'"
        },
        "execution_time": 0.1882638931274414,
        "is_functional_test": false
      },
      {
        "case_name": "Add Files in Read-Only Directory",
        "purpose": "测试在没有写权限的目录中尝试添加文件时是否能优雅地处理错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonly_dir",
          "file_pattern": "*"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Cmd('git') failed due to: exit code(128)\n  cmdline: git add *\n  stderr: 'fatal: pathspec '*' did not match any files'"
        },
        "execution_time": 0.14671111106872559,
        "is_functional_test": false
      },
      {
        "case_name": "Add Files Using Empty Path",
        "purpose": "验证空路径参数是否会被正确识别并抛出相应的参数验证错误。",
        "args": {
          "path": "",
          "file_pattern": "*"
        },
        "response": {
          "result": "Added '*' to staging area in "
        },
        "execution_time": 0.4509701728820801,
        "is_functional_test": false
      },
      {
        "case_name": "Add Files in Root Directory Repository",
        "purpose": "测试在根目录下初始化的Git仓库中添加文件的行为（边界情况）。",
        "args": {
          "path": "D:\\",
          "file_pattern": "*"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Cmd('git') failed due to: exit code(128)\n  cmdline: git add *\n  stderr: 'fatal: detected dubious ownership in repository at 'D:/'\n'D:/' is owned by:\n\tNT AUTHORITY/SYSTEM (S-1-5-18)\nbut the current user is:\n\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\nTo add an exception for this directory, call:\n\n\tgit config --global --add safe.directory D:/'"
        },
        "execution_time": 0.19168424606323242,
        "is_functional_test": true
      },
      {
        "case_name": "Add Files in Hidden Directory Repository",
        "purpose": "验证工具是否能在隐藏目录中成功添加文件到暂存区。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\.hidden_test_dir",
          "file_pattern": "*"
        },
        "response": {
          "error": "ToolException: Error executing tool git_add: Cmd('git') failed due to: exit code(128)\n  cmdline: git add *\n  stderr: 'fatal: pathspec '*' did not match any files'"
        },
        "execution_time": 0.2121114730834961,
        "is_functional_test": true
      }
    ],
    "git_diff_unstaged": [
      {
        "case_name": "Show Unstaged Diff in Initialized Repository",
        "purpose": "验证工具能够正确显示已初始化Git仓库中未暂存的更改差异。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.1667919158935547,
        "is_functional_test": true
      },
      {
        "case_name": "Show Unstaged Diff with Special Characters in Path",
        "purpose": "验证包含特殊字符的路径是否能够被正确处理以显示未暂存更改的差异。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test@files#123"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.17227602005004883,
        "is_functional_test": true
      },
      {
        "case_name": "Show Unstaged Diff in Hidden Directory",
        "purpose": "验证工具是否能在隐藏目录中正确显示未暂存更改的差异。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\.hidden_test_dir"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.15839648246765137,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Show Unstaged Diff in Non-Existent Path",
        "purpose": "验证当提供的路径不存在时，工具是否能正确抛出ValueError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.19417786598205566,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Diff Using Empty Path",
        "purpose": "验证空路径参数是否会被正确识别并抛出相应的参数验证错误。",
        "args": {
          "path": ""
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.19475674629211426,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Diff in Read-Only Directory",
        "purpose": "测试工具在没有写权限的目录中尝试获取未暂存差异信息时是否能优雅地处理错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonly_dir"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.16205835342407227,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Diff on Drive Root with Limited Permissions",
        "purpose": "测试在受限制的根驱动器路径上显示未暂存差异的安全性行为。",
        "args": {
          "path": "C:\\"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: Cmd('git') failed due to: exit code(129)\n  cmdline: git diff\n  stderr: 'warning: Not a git repository. Use --no-index to compare two paths outside a working tree\nusage: git diff --no-index [<options>] <path> <path>\n\nDiff output format options\n    -p, --patch           generate patch\n    -s, --no-patch        suppress diff output\n    -u                    generate patch\n    -U, --unified[=<n>]   generate diffs with <n> lines context\n    -W, --[no-]function-context\n                          generate diffs with <n> lines context\n    --raw                 generate the diff in raw format\n    --patch-with-raw      synonym for '-p --raw'\n    --patch-with-stat     synonym for '-p --stat'\n    --numstat             machine friendly --stat\n    --shortstat           output only the last line of --stat\n    -X, --dirstat[=<param1>,<param2>...]\n                          output the distribution of relative amount of changes for each sub-directory\n    --cumulative          synonym for --dirstat=cumulative\n    --dirstat-by-file[=<param1>,<param2>...]\n                          synonym for --dirstat=files,<param1>,<param2>...\n    --check               warn if changes introduce conflict markers or whitespace errors\n    --summary             condensed summary such as creations, renames and mode changes\n    --name-only           show only names of changed files\n    --name-status         show only names and status of changed files\n    --stat[=<width>[,<name-width>[,<count>]]]\n                          generate diffstat\n    --stat-width <width>  generate diffstat with a given width\n    --stat-name-width <width>\n                          generate diffstat with a given name width\n    --stat-graph-width <width>\n                          generate diffstat with a given graph width\n    --stat-count <count>  generate diffstat with limited lines\n    --[no-]compact-summary\n                          generate compact summary in diffstat\n    --binary              output a binary diff that can be applied\n    --[no-]full-index     show full pre- and post-image object names on the \"index\" lines\n    --[no-]color[=<when>] show colored diff\n    --ws-error-highlight <kind>\n                          highlight whitespace errors in the 'context', 'old' or 'new' lines in the diff\n    -z                    do not munge pathnames and use NULs as output field terminators in --raw or --numstat\n    --[no-]abbrev[=<n>]   use <n> digits to display object names\n    --src-prefix <prefix> show the given source prefix instead of \"a/\"\n    --dst-prefix <prefix> show the given destination prefix instead of \"b/\"\n    --line-prefix <prefix>\n                          prepend an additional prefix to every line of output\n    --no-prefix           do not show any source or destination prefix\n    --default-prefix      use default prefixes a/ and b/\n    --inter-hunk-context <n>\n                          show context between diff hunks up to the specified number of lines\n    --output-indicator-new <char>\n                          specify the character to indicate a new line instead of '+'\n    --output-indicator-old <char>\n                          specify the character to indicate an old line instead of '-'\n    --output-indicator-context <char>\n                          specify the character to indicate a context instead of ' '\n\nDiff rename options\n    -B, --break-rewrites[=<n>[/<m>]]\n                          break complete rewrite changes into pairs of delete and create\n    -M, --find-renames[=<n>]\n                          detect renames\n    -D, --irreversible-delete\n                          omit the preimage for deletes\n    -C, --find-copies[=<n>]\n                          detect copies\n    --[no-]find-copies-harder\n                          use unmodified files as source to find copies\n    --no-renames          disable rename detection\n    --[no-]rename-empty   use empty blobs as rename source\n    --[no-]follow         continue listing the history of a file beyond renames\n    -l <n>                prevent rename/copy detection if the number of rename/copy targets exceeds given limit\n\nDiff algorithm options\n    --minimal             produce the smallest possible diff\n    -w, --ignore-all-space\n                          ignore whitespace when comparing lines\n    -b, --ignore-space-change\n                          ignore changes in amount of whitespace\n    --ignore-space-at-eol ignore changes in whitespace at EOL\n    --ignore-cr-at-eol    ignore carrier-return at the end of line\n    --ignore-blank-lines  ignore changes whose lines are all blank\n    -I, --[no-]ignore-matching-lines <regex>\n                          ignore changes whose all lines match <regex>\n    --[no-]indent-heuristic\n                          heuristic to shift diff hunk boundaries for easy reading\n    --patience            generate diff using the \"patience diff\" algorithm\n    --histogram           generate diff using the \"histogram diff\" algorithm\n    --diff-algorithm <algorithm>\n                          choose a diff algorithm\n    --anchored <text>     generate diff using the \"anchored diff\" algorithm\n    --word-diff[=<mode>]  show word diff, using <mode> to delimit changed words\n    --word-diff-regex <regex>\n                          use <regex> to decide what a word is\n    --color-words[=<regex>]\n                          equivalent to --word-diff=color --word-diff-regex=<regex>\n    --[no-]color-moved[=<mode>]\n                          moved lines of code are colored differently\n    --[no-]color-moved-ws <mode>\n                          how white spaces are ignored in --color-moved\n\nOther diff options\n    --[no-]relative[=<prefix>]\n                          when run from subdir, exclude changes outside and show relative paths\n    -a, --[no-]text       treat all files as text\n    -R                    swap two inputs, reverse the diff\n    --[no-]exit-code      exit with 1 if there were differences, 0 otherwise\n    --[no-]quiet          disable all output of the program\n    --[no-]ext-diff       allow an external diff helper to be executed\n    --[no-]textconv       run external text conversion filters when comparing binary files\n    --ignore-submodules[=<when>]\n                          ignore changes to submodules in the diff generation\n    --submodule[=<format>]\n                          specify how differences in submodules are shown\n    --ita-invisible-in-index\n                          hide 'git add -N' entries from the index\n    --ita-visible-in-index\n                          treat 'git add -N' entries as real in the index\n    -S <string>           look for differences that change the number of occurrences of the specified string\n    -G <regex>            look for differences that change the number of occurrences of the specified regex\n    --pickaxe-all         show all changes in the changeset with -S or -G\n    --pickaxe-regex       treat <string> in -S as extended POSIX regular expression\n    -O <file>             control the order in which files appear in the output\n    --rotate-to <path>    show the change in the specified path first\n    --skip-to <path>      skip the output to the specified path\n    --find-object <object-id>\n                          look for differences that change the number of occurrences of the specified object\n    --diff-filter [(A|C|D|M|R|T|U|X|B)...[*]]\n                          select files by diff type\n    --output <file>       output to a specific file\n'"
        },
        "execution_time": 0.17812442779541016,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Diff in Git Repository with No Changes",
        "purpose": "验证工具在没有任何未暂存更改的Git仓库中返回空字符串或无差异输出。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_repo"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_unstaged: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_repo"
        },
        "execution_time": 0.0040013790130615234,
        "is_functional_test": true
      }
    ],
    "git_commit": [
      {
        "case_name": "Commit Changes in Valid Repository",
        "purpose": "验证工具能够在已初始化的Git仓库中成功提交更改。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Initial commit"
        },
        "response": {
          "result": "Committed to D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles with message: Initial commit"
        },
        "execution_time": 0.28376245498657227,
        "is_functional_test": true
      },
      {
        "case_name": "Commit with Author Information",
        "purpose": "验证工具是否支持在提交时指定作者信息。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Commit with author",
          "author": "John Doe <john.doe@example.com>"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Cmd('git') failed due to: exit code(1)\n  cmdline: git commit -m Commit with author --author=John Doe <john.doe@example.com>\n  stdout: 'On branch master\nnothing to commit, working tree clean'"
        },
        "execution_time": 0.2233142852783203,
        "is_functional_test": true
      },
      {
        "case_name": "Commit in Non-Existent Repository",
        "purpose": "验证当提供的路径不存在时，工具是否能正确抛出ValueError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "message": "Test commit in invalid path"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Cmd('git') failed due to: exit code(1)\n  cmdline: git commit -m Test commit in invalid path\n  stdout: 'On branch master\n\nInitial commit\n\nnothing to commit (create/copy files and use \"git add\" to track)'"
        },
        "execution_time": 0.22375154495239258,
        "is_functional_test": false
      },
      {
        "case_name": "Commit in Read-Only Directory",
        "purpose": "测试工具在没有写权限的目录中尝试提交更改时是否能优雅地处理错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonly_dir",
          "message": "Attempt to commit in read-only directory"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Cmd('git') failed due to: exit code(1)\n  cmdline: git commit -m Attempt to commit in read-only directory\n  stdout: 'On branch master\n\nInitial commit\n\nnothing to commit (create/copy files and use \"git add\" to track)'"
        },
        "execution_time": 0.1621685028076172,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Empty Message",
        "purpose": "验证空提交信息是否会被正确识别并抛出相应的参数验证错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Cmd('git') failed due to: exit code(1)\n  cmdline: git commit -m \n  stdout: 'On branch master\nnothing to commit, working tree clean'"
        },
        "execution_time": 0.19207477569580078,
        "is_functional_test": false
      },
      {
        "case_name": "Commit in Hidden Git Repository",
        "purpose": "验证工具是否能在隐藏目录中成功提交更改。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\.hidden_test_dir",
          "message": "Hidden directory commit"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Cmd('git') failed due to: exit code(1)\n  cmdline: git commit -m Hidden directory commit\n  stdout: 'On branch master\n\nInitial commit\n\nnothing to commit (create/copy files and use \"git add\" to track)'"
        },
        "execution_time": 0.16651153564453125,
        "is_functional_test": true
      },
      {
        "case_name": "Commit Using Special Characters in Path",
        "purpose": "验证包含特殊字符的路径是否能够被正确处理以进行提交。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test@files#123",
          "message": "Commit with special characters in path"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Cmd('git') failed due to: exit code(1)\n  cmdline: git commit -m Commit with special characters in path\n  stdout: 'On branch master\n\nInitial commit\n\nnothing to commit (create/copy files and use \"git add\" to track)'"
        },
        "execution_time": 0.1914219856262207,
        "is_functional_test": true
      },
      {
        "case_name": "Commit in Root Directory Repository",
        "purpose": "测试在系统根目录下提交更改的行为（边界情况）。",
        "args": {
          "path": "D:\\",
          "message": "Root directory commit"
        },
        "response": {
          "error": "ToolException: Error executing tool git_commit: Cmd('git') failed due to: exit code(128)\n  cmdline: git commit -m Root directory commit\n  stderr: 'fatal: detected dubious ownership in repository at 'D:/'\n'D:/' is owned by:\n\tNT AUTHORITY/SYSTEM (S-1-5-18)\nbut the current user is:\n\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\nTo add an exception for this directory, call:\n\n\tgit config --global --add safe.directory D:/'"
        },
        "execution_time": 0.1566927433013916,
        "is_functional_test": true
      }
    ],
    "git_diff_staged": [
      {
        "case_name": "Show Staged Changes in Valid Git Repository",
        "purpose": "验证工具能够在已初始化且存在暂存更改的Git仓库中正确显示暂存区差异。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.14195680618286133,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Show Staged Changes in Non-Existent Path",
        "purpose": "验证当提供的路径不存在时，工具是否能正确抛出ValueError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.20017457008361816,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes in Root Directory Git Repository",
        "purpose": "测试在系统根目录下获取暂存区差异的行为（边界情况）。",
        "args": {
          "path": "D:\\"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: Cmd('git') failed due to: exit code(129)\n  cmdline: git diff --cached\n  stderr: 'error: unknown option `cached'\nusage: git diff --no-index [<options>] <path> <path>\n\nDiff output format options\n    -p, --patch           generate patch\n    -s, --no-patch        suppress diff output\n    -u                    generate patch\n    -U, --unified[=<n>]   generate diffs with <n> lines context\n    -W, --[no-]function-context\n                          generate diffs with <n> lines context\n    --raw                 generate the diff in raw format\n    --patch-with-raw      synonym for '-p --raw'\n    --patch-with-stat     synonym for '-p --stat'\n    --numstat             machine friendly --stat\n    --shortstat           output only the last line of --stat\n    -X, --dirstat[=<param1>,<param2>...]\n                          output the distribution of relative amount of changes for each sub-directory\n    --cumulative          synonym for --dirstat=cumulative\n    --dirstat-by-file[=<param1>,<param2>...]\n                          synonym for --dirstat=files,<param1>,<param2>...\n    --check               warn if changes introduce conflict markers or whitespace errors\n    --summary             condensed summary such as creations, renames and mode changes\n    --name-only           show only names of changed files\n    --name-status         show only names and status of changed files\n    --stat[=<width>[,<name-width>[,<count>]]]\n                          generate diffstat\n    --stat-width <width>  generate diffstat with a given width\n    --stat-name-width <width>\n                          generate diffstat with a given name width\n    --stat-graph-width <width>\n                          generate diffstat with a given graph width\n    --stat-count <count>  generate diffstat with limited lines\n    --[no-]compact-summary\n                          generate compact summary in diffstat\n    --binary              output a binary diff that can be applied\n    --[no-]full-index     show full pre- and post-image object names on the \"index\" lines\n    --[no-]color[=<when>] show colored diff\n    --ws-error-highlight <kind>\n                          highlight whitespace errors in the 'context', 'old' or 'new' lines in the diff\n    -z                    do not munge pathnames and use NULs as output field terminators in --raw or --numstat\n    --[no-]abbrev[=<n>]   use <n> digits to display object names\n    --src-prefix <prefix> show the given source prefix instead of \"a/\"\n    --dst-prefix <prefix> show the given destination prefix instead of \"b/\"\n    --line-prefix <prefix>\n                          prepend an additional prefix to every line of output\n    --no-prefix           do not show any source or destination prefix\n    --default-prefix      use default prefixes a/ and b/\n    --inter-hunk-context <n>\n                          show context between diff hunks up to the specified number of lines\n    --output-indicator-new <char>\n                          specify the character to indicate a new line instead of '+'\n    --output-indicator-old <char>\n                          specify the character to indicate an old line instead of '-'\n    --output-indicator-context <char>\n                          specify the character to indicate a context instead of ' '\n\nDiff rename options\n    -B, --break-rewrites[=<n>[/<m>]]\n                          break complete rewrite changes into pairs of delete and create\n    -M, --find-renames[=<n>]\n                          detect renames\n    -D, --irreversible-delete\n                          omit the preimage for deletes\n    -C, --find-copies[=<n>]\n                          detect copies\n    --[no-]find-copies-harder\n                          use unmodified files as source to find copies\n    --no-renames          disable rename detection\n    --[no-]rename-empty   use empty blobs as rename source\n    --[no-]follow         continue listing the history of a file beyond renames\n    -l <n>                prevent rename/copy detection if the number of rename/copy targets exceeds given limit\n\nDiff algorithm options\n    --minimal             produce the smallest possible diff\n    -w, --ignore-all-space\n                          ignore whitespace when comparing lines\n    -b, --ignore-space-change\n                          ignore changes in amount of whitespace\n    --ignore-space-at-eol ignore changes in whitespace at EOL\n    --ignore-cr-at-eol    ignore carrier-return at the end of line\n    --ignore-blank-lines  ignore changes whose lines are all blank\n    -I, --[no-]ignore-matching-lines <regex>\n                          ignore changes whose all lines match <regex>\n    --[no-]indent-heuristic\n                          heuristic to shift diff hunk boundaries for easy reading\n    --patience            generate diff using the \"patience diff\" algorithm\n    --histogram           generate diff using the \"histogram diff\" algorithm\n    --diff-algorithm <algorithm>\n                          choose a diff algorithm\n    --anchored <text>     generate diff using the \"anchored diff\" algorithm\n    --word-diff[=<mode>]  show word diff, using <mode> to delimit changed words\n    --word-diff-regex <regex>\n                          use <regex> to decide what a word is\n    --color-words[=<regex>]\n                          equivalent to --word-diff=color --word-diff-regex=<regex>\n    --[no-]color-moved[=<mode>]\n                          moved lines of code are colored differently\n    --[no-]color-moved-ws <mode>\n                          how white spaces are ignored in --color-moved\n\nOther diff options\n    --[no-]relative[=<prefix>]\n                          when run from subdir, exclude changes outside and show relative paths\n    -a, --[no-]text       treat all files as text\n    -R                    swap two inputs, reverse the diff\n    --[no-]exit-code      exit with 1 if there were differences, 0 otherwise\n    --[no-]quiet          disable all output of the program\n    --[no-]ext-diff       allow an external diff helper to be executed\n    --[no-]textconv       run external text conversion filters when comparing binary files\n    --ignore-submodules[=<when>]\n                          ignore changes to submodules in the diff generation\n    --submodule[=<format>]\n                          specify how differences in submodules are shown\n    --ita-invisible-in-index\n                          hide 'git add -N' entries from the index\n    --ita-visible-in-index\n                          treat 'git add -N' entries as real in the index\n    -S <string>           look for differences that change the number of occurrences of the specified string\n    -G <regex>            look for differences that change the number of occurrences of the specified regex\n    --pickaxe-all         show all changes in the changeset with -S or -G\n    --pickaxe-regex       treat <string> in -S as extended POSIX regular expression\n    -O <file>             control the order in which files appear in the output\n    --rotate-to <path>    show the change in the specified path first\n    --skip-to <path>      skip the output to the specified path\n    --find-object <object-id>\n                          look for differences that change the number of occurrences of the specified object\n    --diff-filter [(A|C|D|M|R|T|U|X|B)...[*]]\n                          select files by diff type\n    --output <file>       output to a specific file\n'"
        },
        "execution_time": 0.1805891990661621,
        "is_functional_test": true
      },
      {
        "case_name": "Show Staged Changes with Special Characters in Path",
        "purpose": "验证包含特殊字符的路径是否能够被正确处理以获取暂存区差异。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test@files#123"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.21194028854370117,
        "is_functional_test": true
      },
      {
        "case_name": "Show Staged Changes from Hidden Git Repository",
        "purpose": "验证工具是否能在隐藏目录中正确获取暂存区差异。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\.hidden_test_dir"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.22914361953735352,
        "is_functional_test": true
      },
      {
        "case_name": "Show Staged Changes in Read-Only Directory",
        "purpose": "测试工具在没有写权限的目录中尝试获取暂存区差异时是否能优雅地处理错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonly_dir"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.1751079559326172,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes Using Empty Path",
        "purpose": "验证空路径参数是否会被正确识别并抛出相应的参数验证错误。",
        "args": {
          "path": ""
        },
        "response": {
          "result": "diff --git a/arxiv_mcp_server_new.py b/arxiv_mcp_server_new.py\nnew file mode 100644\nindex 0000000..ec4fb1b\n--- /dev/null\n+++ b/arxiv_mcp_server_new.py\n@@ -0,0 +1,204 @@\n+import sys\n+import asyncio\n+import re\n+import os\n+import aiohttp\n+import arxiv\n+from mcp.server.fastmcp import FastMCP\n+import json\n+\n+# 初始化 FastMCP 服务器\n+mcp = FastMCP(\"arxiv_paper_server\")\n+\n+# 论文存储目录\n+PAPERS_DIR = \"downloaded_papers\"\n+\n+# 确保论文存储目录存在\n+os.makedirs(PAPERS_DIR, exist_ok=True)\n+\n+@mcp.tool()\n+async def search_papers(query: str, max_results: int = 5) -> str:\n+    \"\"\"\n+    根据用户输入的查询条件搜索arXiv论文。\n+\n+    Args:\n+        query: 搜索关键词或表达式。\n+        max_results: 返回的最大结果数，默认为5，范围1-20。\n+\n+    Returns:\n+        JSON格式字符串，包含匹配的论文列表，每个论文包含id、标题、摘要、发表日期和链接。\n+\n+    Raises:\n+        ValueError: 如果查询为空或max_results超出范围。\n+    \"\"\"\n+    # 输入验证\n+    if not query or not query.strip():\n+        raise ValueError(\"查询不能为空\")\n+\n+    if max_results < 1 or max_results > 20:\n+        raise ValueError(f\"max_results必须在1-20之间，当前值: {max_results}\")\n+\n+    try:\n+        # 创建搜索客户端\n+        client = arxiv.Client(page_size=100, delay_seconds=3, num_retries=3)\n+\n+        # 执行搜索\n+        search = arxiv.Search(\n+            query=query,\n+            max_results=max_results,\n+            sort_by=arxiv.SortCriterion.Relevance\n+        )\n+\n+        results = client.results(search)\n+\n+        # 收集结果\n+        papers = []\n+        for paper in results:\n+            papers.append({\n+                \"id\": paper.get_short_id(),\n+                \"ti...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计204941字符，剩余203441字符"
        },
        "execution_time": 0.561927318572998,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes on Drive Root with Limited Permissions",
        "purpose": "测试在受限制的根驱动器路径上获取暂存区差异的安全性行为。",
        "args": {
          "path": "C:\\"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff_staged: Cmd('git') failed due to: exit code(129)\n  cmdline: git diff --cached\n  stderr: 'error: unknown option `cached'\nusage: git diff --no-index [<options>] <path> <path>\n\nDiff output format options\n    -p, --patch           generate patch\n    -s, --no-patch        suppress diff output\n    -u                    generate patch\n    -U, --unified[=<n>]   generate diffs with <n> lines context\n    -W, --[no-]function-context\n                          generate diffs with <n> lines context\n    --raw                 generate the diff in raw format\n    --patch-with-raw      synonym for '-p --raw'\n    --patch-with-stat     synonym for '-p --stat'\n    --numstat             machine friendly --stat\n    --shortstat           output only the last line of --stat\n    -X, --dirstat[=<param1>,<param2>...]\n                          output the distribution of relative amount of changes for each sub-directory\n    --cumulative          synonym for --dirstat=cumulative\n    --dirstat-by-file[=<param1>,<param2>...]\n                          synonym for --dirstat=files,<param1>,<param2>...\n    --check               warn if changes introduce conflict markers or whitespace errors\n    --summary             condensed summary such as creations, renames and mode changes\n    --name-only           show only names of changed files\n    --name-status         show only names and status of changed files\n    --stat[=<width>[,<name-width>[,<count>]]]\n                          generate diffstat\n    --stat-width <width>  generate diffstat with a given width\n    --stat-name-width <width>\n                          generate diffstat with a given name width\n    --stat-graph-width <width>\n                          generate diffstat with a given graph width\n    --stat-count <count>  generate diffstat with limited lines\n    --[no-]compact-summary\n                          generate compact summary in diffstat\n    --binary              output a binary diff that can be applied\n    --[no-]full-index     show full pre- and post-image object names on the \"index\" lines\n    --[no-]color[=<when>] show colored diff\n    --ws-error-highlight <kind>\n                          highlight whitespace errors in the 'context', 'old' or 'new' lines in the diff\n    -z                    do not munge pathnames and use NULs as output field terminators in --raw or --numstat\n    --[no-]abbrev[=<n>]   use <n> digits to display object names\n    --src-prefix <prefix> show the given source prefix instead of \"a/\"\n    --dst-prefix <prefix> show the given destination prefix instead of \"b/\"\n    --line-prefix <prefix>\n                          prepend an additional prefix to every line of output\n    --no-prefix           do not show any source or destination prefix\n    --default-prefix      use default prefixes a/ and b/\n    --inter-hunk-context <n>\n                          show context between diff hunks up to the specified number of lines\n    --output-indicator-new <char>\n                          specify the character to indicate a new line instead of '+'\n    --output-indicator-old <char>\n                          specify the character to indicate an old line instead of '-'\n    --output-indicator-context <char>\n                          specify the character to indicate a context instead of ' '\n\nDiff rename options\n    -B, --break-rewrites[=<n>[/<m>]]\n                          break complete rewrite changes into pairs of delete and create\n    -M, --find-renames[=<n>]\n                          detect renames\n    -D, --irreversible-delete\n                          omit the preimage for deletes\n    -C, --find-copies[=<n>]\n                          detect copies\n    --[no-]find-copies-harder\n                          use unmodified files as source to find copies\n    --no-renames          disable rename detection\n    --[no-]rename-empty   use empty blobs as rename source\n    --[no-]follow         continue listing the history of a file beyond renames\n    -l <n>                prevent rename/copy detection if the number of rename/copy targets exceeds given limit\n\nDiff algorithm options\n    --minimal             produce the smallest possible diff\n    -w, --ignore-all-space\n                          ignore whitespace when comparing lines\n    -b, --ignore-space-change\n                          ignore changes in amount of whitespace\n    --ignore-space-at-eol ignore changes in whitespace at EOL\n    --ignore-cr-at-eol    ignore carrier-return at the end of line\n    --ignore-blank-lines  ignore changes whose lines are all blank\n    -I, --[no-]ignore-matching-lines <regex>\n                          ignore changes whose all lines match <regex>\n    --[no-]indent-heuristic\n                          heuristic to shift diff hunk boundaries for easy reading\n    --patience            generate diff using the \"patience diff\" algorithm\n    --histogram           generate diff using the \"histogram diff\" algorithm\n    --diff-algorithm <algorithm>\n                          choose a diff algorithm\n    --anchored <text>     generate diff using the \"anchored diff\" algorithm\n    --word-diff[=<mode>]  show word diff, using <mode> to delimit changed words\n    --word-diff-regex <regex>\n                          use <regex> to decide what a word is\n    --color-words[=<regex>]\n                          equivalent to --word-diff=color --word-diff-regex=<regex>\n    --[no-]color-moved[=<mode>]\n                          moved lines of code are colored differently\n    --[no-]color-moved-ws <mode>\n                          how white spaces are ignored in --color-moved\n\nOther diff options\n    --[no-]relative[=<prefix>]\n                          when run from subdir, exclude changes outside and show relative paths\n    -a, --[no-]text       treat all files as text\n    -R                    swap two inputs, reverse the diff\n    --[no-]exit-code      exit with 1 if there were differences, 0 otherwise\n    --[no-]quiet          disable all output of the program\n    --[no-]ext-diff       allow an external diff helper to be executed\n    --[no-]textconv       run external text conversion filters when comparing binary files\n    --ignore-submodules[=<when>]\n                          ignore changes to submodules in the diff generation\n    --submodule[=<format>]\n                          specify how differences in submodules are shown\n    --ita-invisible-in-index\n                          hide 'git add -N' entries from the index\n    --ita-visible-in-index\n                          treat 'git add -N' entries as real in the index\n    -S <string>           look for differences that change the number of occurrences of the specified string\n    -G <regex>            look for differences that change the number of occurrences of the specified regex\n    --pickaxe-all         show all changes in the changeset with -S or -G\n    --pickaxe-regex       treat <string> in -S as extended POSIX regular expression\n    -O <file>             control the order in which files appear in the output\n    --rotate-to <path>    show the change in the specified path first\n    --skip-to <path>      skip the output to the specified path\n    --find-object <object-id>\n                          look for differences that change the number of occurrences of the specified object\n    --diff-filter [(A|C|D|M|R|T|U|X|B)...[*]]\n                          select files by diff type\n    --output <file>       output to a specific file\n'"
        },
        "execution_time": 0.2641472816467285,
        "is_functional_test": false
      }
    ],
    "git_log": [
      {
        "case_name": "View Commit History in Valid Repository",
        "purpose": "验证工具能够正确显示有效Git仓库的默认数量（10条）提交历史。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "commit a235b268a7f97a82d3d0a210d12b23af7ee13fb7\nAuthor: pouchine <1291980381@qq.com>\nDate:   Sun Jul 13 23:00:46 2025 +0800\n\n    Initial commit"
        },
        "execution_time": 0.20996499061584473,
        "is_functional_test": true
      },
      {
        "case_name": "View Commit History with Custom Max Count",
        "purpose": "验证工具能够根据指定的max_count参数显示相应数量的提交历史记录。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "max_count": 5
        },
        "response": {
          "result": "commit a235b268a7f97a82d3d0a210d12b23af7ee13fb7\nAuthor: pouchine <1291980381@qq.com>\nDate:   Sun Jul 13 23:00:46 2025 +0800\n\n    Initial commit"
        },
        "execution_time": 0.1860659122467041,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to View Commit History in Non-Existent Path",
        "purpose": "验证当提供的路径不存在时，工具是否能正确抛出ValueError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Cmd('git') failed due to: exit code(128)\n  cmdline: git log -n 10\n  stderr: 'fatal: your current branch 'master' does not have any commits yet'"
        },
        "execution_time": 0.22067618370056152,
        "is_functional_test": false
      },
      {
        "case_name": "View Commit History in Read-Only Directory",
        "purpose": "测试工具在没有写权限的目录中尝试获取提交历史时是否能优雅地处理错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonly_dir"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Cmd('git') failed due to: exit code(128)\n  cmdline: git log -n 10\n  stderr: 'fatal: your current branch 'master' does not have any commits yet'"
        },
        "execution_time": 0.19337034225463867,
        "is_functional_test": false
      },
      {
        "case_name": "View Commit History Using Empty Path",
        "purpose": "验证空路径参数是否会被正确识别并抛出相应的参数验证错误。",
        "args": {
          "path": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Cmd('git') failed due to: exit code(128)\n  cmdline: git log -n 10\n  stderr: 'fatal: your current branch 'master' does not have any commits yet'"
        },
        "execution_time": 0.14551258087158203,
        "is_functional_test": false
      },
      {
        "case_name": "View Commit History in Hidden Git Repository",
        "purpose": "验证工具是否能在隐藏目录中成功获取提交历史。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\.hidden_test_dir"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Cmd('git') failed due to: exit code(128)\n  cmdline: git log -n 10\n  stderr: 'fatal: your current branch 'master' does not have any commits yet'"
        },
        "execution_time": 0.1825873851776123,
        "is_functional_test": true
      },
      {
        "case_name": "View Commit History with Special Characters in Path",
        "purpose": "验证包含特殊字符的路径是否能够被正确处理以获取提交历史。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test@files#123"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Cmd('git') failed due to: exit code(128)\n  cmdline: git log -n 10\n  stderr: 'fatal: your current branch 'master' does not have any commits yet'"
        },
        "execution_time": 0.1617121696472168,
        "is_functional_test": true
      },
      {
        "case_name": "View Commit History from Root Directory",
        "purpose": "测试在系统根目录下获取提交历史的行为（边界情况）。",
        "args": {
          "path": "D:\\"
        },
        "response": {
          "error": "ToolException: Error executing tool git_log: Cmd('git') failed due to: exit code(128)\n  cmdline: git log -n 10\n  stderr: 'fatal: detected dubious ownership in repository at 'D:/'\n'D:/' is owned by:\n\tNT AUTHORITY/SYSTEM (S-1-5-18)\nbut the current user is:\n\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\nTo add an exception for this directory, call:\n\n\tgit config --global --add safe.directory D:/'"
        },
        "execution_time": 0.14856624603271484,
        "is_functional_test": true
      }
    ],
    "git_create_branch": [
      {
        "case_name": "Create New Branch in Valid Git Repository",
        "purpose": "验证工具能够在已存在的Git仓库中成功创建一个新的分支。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/test_branch"
        },
        "response": {
          "result": "Created branch 'feature/test_branch' in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.1564350128173828,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Create Branch in Non-Existent Path",
        "purpose": "验证当提供的路径不存在时，工具是否能正确抛出ValueError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "branch_name": "feature/test_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Cmd('git') failed due to: exit code(128)\n  cmdline: git branch feature/test_branch\n  stderr: 'fatal: not a valid object name: 'master''"
        },
        "execution_time": 0.1920011043548584,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Empty Branch Name",
        "purpose": "验证当提供的分支名称为空时，工具是否能正确抛出参数验证错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Cmd('git') failed due to: exit code(128)\n  cmdline: git branch \n  stderr: 'fatal: '' is not a valid branch name\nhint: See `man git check-ref-format`\nhint: Disable this message with \"git config advice.refSyntax false\"'"
        },
        "execution_time": 0.18157625198364258,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch Using Special Characters in Branch Name",
        "purpose": "验证包含特殊字符的分支名称是否能够被正确处理。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/branch@#123"
        },
        "response": {
          "result": "Created branch 'feature/branch@#123' in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.2470107078552246,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch in Read-Only Git Repository",
        "purpose": "测试工具在没有写权限的Git仓库目录中尝试创建分支时是否能优雅地处理错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonly_dir",
          "branch_name": "feature/readonly_test"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Cmd('git') failed due to: exit code(128)\n  cmdline: git branch feature/readonly_test\n  stderr: 'fatal: not a valid object name: 'master''"
        },
        "execution_time": 0.30332088470458984,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch in Hidden Git Repository",
        "purpose": "验证工具是否能在隐藏目录中的Git仓库中成功创建新分支。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\.hidden_test_dir",
          "branch_name": "feature/hidden_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Cmd('git') failed due to: exit code(128)\n  cmdline: git branch feature/hidden_branch\n  stderr: 'fatal: not a valid object name: 'master''"
        },
        "execution_time": 0.31353092193603516,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch in Root Directory Git Repository",
        "purpose": "测试在系统根目录下初始化并创建分支的行为（边界情况）。",
        "args": {
          "path": "D:\\",
          "branch_name": "main"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Cmd('git') failed due to: exit code(128)\n  cmdline: git branch main\n  stderr: 'fatal: detected dubious ownership in repository at 'D:/'\n'D:/' is owned by:\n\tNT AUTHORITY/SYSTEM (S-1-5-18)\nbut the current user is:\n\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\nTo add an exception for this directory, call:\n\n\tgit config --global --add safe.directory D:/'"
        },
        "execution_time": 0.20739364624023438,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch in Uninitialized Directory",
        "purpose": "验证在一个未初始化为Git仓库的目录中尝试创建分支是否会抛出GitCommandError。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test@files#123",
          "branch_name": "feature/uninit_test"
        },
        "response": {
          "error": "ToolException: Error executing tool git_create_branch: Cmd('git') failed due to: exit code(128)\n  cmdline: git branch feature/uninit_test\n  stderr: 'fatal: not a valid object name: 'master''"
        },
        "execution_time": 0.18453073501586914,
        "is_functional_test": false
      }
    ],
    "git_checkout": [
      {
        "case_name": "Checkout to Existing Branch in Valid Repository",
        "purpose": "验证工具能够在已存在的Git仓库中成功切换到指定的分支。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/test_branch"
        },
        "response": {
          "result": "Switched to branch 'feature/test_branch' in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.1794142723083496,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Checkout to Non-Existent Branch",
        "purpose": "验证当目标分支不存在时，工具是否能正确抛出GitCommandError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "nonexistent_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout nonexistent_branch\n  stderr: 'error: pathspec 'nonexistent_branch' did not match any file(s) known to git'"
        },
        "execution_time": 0.18964052200317383,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout with Special Characters in Branch Name",
        "purpose": "验证包含特殊字符的目标分支名是否能够被正确处理。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature/branch@#123"
        },
        "response": {
          "result": "Switched to branch 'feature/branch@#123' in D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "execution_time": 0.15355587005615234,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout Using Empty Path",
        "purpose": "验证空路径参数是否会被正确识别并抛出相应的参数验证错误。",
        "args": {
          "path": "",
          "branch_name": "feature/test_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout feature/test_branch\n  stderr: 'error: pathspec 'feature/test_branch' did not match any file(s) known to git'"
        },
        "execution_time": 0.16823816299438477,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout from Root Directory Git Repository",
        "purpose": "测试在系统根目录下切换Git分支的行为（边界情况）。",
        "args": {
          "path": "D:\\",
          "branch_name": "feature/test_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Cmd('git') failed due to: exit code(128)\n  cmdline: git checkout feature/test_branch\n  stderr: 'fatal: detected dubious ownership in repository at 'D:/'\n'D:/' is owned by:\n\tNT AUTHORITY/SYSTEM (S-1-5-18)\nbut the current user is:\n\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\nTo add an exception for this directory, call:\n\n\tgit config --global --add safe.directory D:/'"
        },
        "execution_time": 0.14988183975219727,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout in Read-Only Repository",
        "purpose": "测试工具在没有写权限的目录中尝试切换分支时是否能优雅地处理错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonly_dir",
          "branch_name": "feature/test_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Cmd('git') failed due to: exit code(1)\n  cmdline: git checkout feature/test_branch\n  stderr: 'error: pathspec 'feature/test_branch' did not match any file(s) known to git'"
        },
        "execution_time": 0.15174174308776855,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout Using Empty Branch Name",
        "purpose": "验证空分支名称参数是否会被正确识别并抛出相应的参数验证错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Cmd('git') failed due to: exit code(128)\n  cmdline: git checkout \n  stderr: 'fatal: empty string is not a valid pathspec. please use . instead if you meant to match all paths'"
        },
        "execution_time": 0.1757359504699707,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout on Drive Root with Limited Permissions",
        "purpose": "测试在受限制的根驱动器路径上切换Git分支的安全性行为。",
        "args": {
          "path": "C:\\",
          "branch_name": "feature/test_branch"
        },
        "response": {
          "error": "ToolException: Error executing tool git_checkout: Cmd('git') failed due to: exit code(128)\n  cmdline: git checkout feature/test_branch\n  stderr: 'fatal: detected dubious ownership in repository at 'C:/'\n'C:/' is owned by:\n\tNT SERVICE/TrustedInstaller (S-1-5-80-956008885-3418522649-1831038044-1853292631-2271478464)\nbut the current user is:\n\t24S-PENGBOCHENG/PS (S-1-5-21-3980691320-1577971525-2302641607-1001)\nTo add an exception for this directory, call:\n\n\tgit config --global --add safe.directory C:/'"
        },
        "execution_time": 0.19128823280334473,
        "is_functional_test": false
      }
    ],
    "git_diff": [
      {
        "case_name": "Compare Commits in Valid Repository",
        "purpose": "验证工具能够正确比较两个提交之间的差异，使用默认路径和有效commit_range。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_range": "HEAD~2..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff HEAD~2..HEAD\n  stderr: 'fatal: ambiguous argument 'HEAD~2..HEAD': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.23917579650878906,
        "is_functional_test": true
      },
      {
        "case_name": "Compare Commits with Empty Commit Range",
        "purpose": "验证当提供的commit_range为空时，工具是否能正确抛出参数验证错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_range": ""
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff \n  stderr: 'fatal: ambiguous argument '': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.2064199447631836,
        "is_functional_test": false
      },
      {
        "case_name": "Compare Commits in Non-Existent Path",
        "purpose": "验证当提供的路径不存在时，工具是否能正确抛出ValueError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "commit_range": "HEAD~2..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff HEAD~2..HEAD\n  stderr: 'fatal: ambiguous argument 'HEAD~2..HEAD': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.2164745330810547,
        "is_functional_test": false
      },
      {
        "case_name": "Compare Commits Using Special Characters in Commit Range",
        "purpose": "验证包含特殊字符的commit_range是否能被正确处理或抛出相应错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_range": "feature/branch@#123..HEAD"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.1922740936279297,
        "is_functional_test": true
      },
      {
        "case_name": "Compare Commits in Hidden Git Repository",
        "purpose": "验证工具是否能在隐藏目录中成功执行git_diff操作。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\.hidden_test_dir",
          "commit_range": "HEAD~1..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff HEAD~1..HEAD\n  stderr: 'fatal: ambiguous argument 'HEAD~1..HEAD': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.20233654975891113,
        "is_functional_test": true
      },
      {
        "case_name": "Compare Commits on Drive Root with Limited Permissions",
        "purpose": "测试在受限制的根驱动器路径上执行git_diff的安全性行为。",
        "args": {
          "path": "C:\\",
          "commit_range": "HEAD~1..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Cmd('git') failed due to: exit code(129)\n  cmdline: git diff HEAD~1..HEAD\n  stderr: 'warning: Not a git repository. Use --no-index to compare two paths outside a working tree\nusage: git diff --no-index [<options>] <path> <path>\n\nDiff output format options\n    -p, --patch           generate patch\n    -s, --no-patch        suppress diff output\n    -u                    generate patch\n    -U, --unified[=<n>]   generate diffs with <n> lines context\n    -W, --[no-]function-context\n                          generate diffs with <n> lines context\n    --raw                 generate the diff in raw format\n    --patch-with-raw      synonym for '-p --raw'\n    --patch-with-stat     synonym for '-p --stat'\n    --numstat             machine friendly --stat\n    --shortstat           output only the last line of --stat\n    -X, --dirstat[=<param1>,<param2>...]\n                          output the distribution of relative amount of changes for each sub-directory\n    --cumulative          synonym for --dirstat=cumulative\n    --dirstat-by-file[=<param1>,<param2>...]\n                          synonym for --dirstat=files,<param1>,<param2>...\n    --check               warn if changes introduce conflict markers or whitespace errors\n    --summary             condensed summary such as creations, renames and mode changes\n    --name-only           show only names of changed files\n    --name-status         show only names and status of changed files\n    --stat[=<width>[,<name-width>[,<count>]]]\n                          generate diffstat\n    --stat-width <width>  generate diffstat with a given width\n    --stat-name-width <width>\n                          generate diffstat with a given name width\n    --stat-graph-width <width>\n                          generate diffstat with a given graph width\n    --stat-count <count>  generate diffstat with limited lines\n    --[no-]compact-summary\n                          generate compact summary in diffstat\n    --binary              output a binary diff that can be applied\n    --[no-]full-index     show full pre- and post-image object names on the \"index\" lines\n    --[no-]color[=<when>] show colored diff\n    --ws-error-highlight <kind>\n                          highlight whitespace errors in the 'context', 'old' or 'new' lines in the diff\n    -z                    do not munge pathnames and use NULs as output field terminators in --raw or --numstat\n    --[no-]abbrev[=<n>]   use <n> digits to display object names\n    --src-prefix <prefix> show the given source prefix instead of \"a/\"\n    --dst-prefix <prefix> show the given destination prefix instead of \"b/\"\n    --line-prefix <prefix>\n                          prepend an additional prefix to every line of output\n    --no-prefix           do not show any source or destination prefix\n    --default-prefix      use default prefixes a/ and b/\n    --inter-hunk-context <n>\n                          show context between diff hunks up to the specified number of lines\n    --output-indicator-new <char>\n                          specify the character to indicate a new line instead of '+'\n    --output-indicator-old <char>\n                          specify the character to indicate an old line instead of '-'\n    --output-indicator-context <char>\n                          specify the character to indicate a context instead of ' '\n\nDiff rename options\n    -B, --break-rewrites[=<n>[/<m>]]\n                          break complete rewrite changes into pairs of delete and create\n    -M, --find-renames[=<n>]\n                          detect renames\n    -D, --irreversible-delete\n                          omit the preimage for deletes\n    -C, --find-copies[=<n>]\n                          detect copies\n    --[no-]find-copies-harder\n                          use unmodified files as source to find copies\n    --no-renames          disable rename detection\n    --[no-]rename-empty   use empty blobs as rename source\n    --[no-]follow         continue listing the history of a file beyond renames\n    -l <n>                prevent rename/copy detection if the number of rename/copy targets exceeds given limit\n\nDiff algorithm options\n    --minimal             produce the smallest possible diff\n    -w, --ignore-all-space\n                          ignore whitespace when comparing lines\n    -b, --ignore-space-change\n                          ignore changes in amount of whitespace\n    --ignore-space-at-eol ignore changes in whitespace at EOL\n    --ignore-cr-at-eol    ignore carrier-return at the end of line\n    --ignore-blank-lines  ignore changes whose lines are all blank\n    -I, --[no-]ignore-matching-lines <regex>\n                          ignore changes whose all lines match <regex>\n    --[no-]indent-heuristic\n                          heuristic to shift diff hunk boundaries for easy reading\n    --patience            generate diff using the \"patience diff\" algorithm\n    --histogram           generate diff using the \"histogram diff\" algorithm\n    --diff-algorithm <algorithm>\n                          choose a diff algorithm\n    --anchored <text>     generate diff using the \"anchored diff\" algorithm\n    --word-diff[=<mode>]  show word diff, using <mode> to delimit changed words\n    --word-diff-regex <regex>\n                          use <regex> to decide what a word is\n    --color-words[=<regex>]\n                          equivalent to --word-diff=color --word-diff-regex=<regex>\n    --[no-]color-moved[=<mode>]\n                          moved lines of code are colored differently\n    --[no-]color-moved-ws <mode>\n                          how white spaces are ignored in --color-moved\n\nOther diff options\n    --[no-]relative[=<prefix>]\n                          when run from subdir, exclude changes outside and show relative paths\n    -a, --[no-]text       treat all files as text\n    -R                    swap two inputs, reverse the diff\n    --[no-]exit-code      exit with 1 if there were differences, 0 otherwise\n    --[no-]quiet          disable all output of the program\n    --[no-]ext-diff       allow an external diff helper to be executed\n    --[no-]textconv       run external text conversion filters when comparing binary files\n    --ignore-submodules[=<when>]\n                          ignore changes to submodules in the diff generation\n    --submodule[=<format>]\n                          specify how differences in submodules are shown\n    --ita-invisible-in-index\n                          hide 'git add -N' entries from the index\n    --ita-visible-in-index\n                          treat 'git add -N' entries as real in the index\n    -S <string>           look for differences that change the number of occurrences of the specified string\n    -G <regex>            look for differences that change the number of occurrences of the specified regex\n    --pickaxe-all         show all changes in the changeset with -S or -G\n    --pickaxe-regex       treat <string> in -S as extended POSIX regular expression\n    -O <file>             control the order in which files appear in the output\n    --rotate-to <path>    show the change in the specified path first\n    --skip-to <path>      skip the output to the specified path\n    --find-object <object-id>\n                          look for differences that change the number of occurrences of the specified object\n    --diff-filter [(A|C|D|M|R|T|U|X|B)...[*]]\n                          select files by diff type\n    --output <file>       output to a specific file\n'"
        },
        "execution_time": 0.2056901454925537,
        "is_functional_test": false
      },
      {
        "case_name": "Compare Commits with Maximum Length Path",
        "purpose": "验证包含最大长度路径的仓库是否能正常执行diff操作。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\this_is_a_very_long_file_name_that_tests_the_boundary_conditions_of_the_tool.txt",
          "commit_range": "HEAD~1..HEAD"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Invalid repository path: D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\this_is_a_very_long_file_name_that_tests_the_boundary_conditions_of_the_tool.txt"
        },
        "execution_time": 0.00400090217590332,
        "is_functional_test": true
      },
      {
        "case_name": "Compare Commits Using Invalid Commit Hash",
        "purpose": "验证当提供无效的commit hash时，工具是否能优雅地处理Git命令失败的情况。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_range": "invalidhash123..invalidhash456"
        },
        "response": {
          "error": "ToolException: Error executing tool git_diff: Cmd('git') failed due to: exit code(128)\n  cmdline: git diff invalidhash123..invalidhash456\n  stderr: 'fatal: ambiguous argument 'invalidhash123..invalidhash456': unknown revision or path not in the working tree.\nUse '--' to separate paths from revisions, like this:\n'git <command> [<revision>...] -- [<file>...]''"
        },
        "execution_time": 0.22310256958007812,
        "is_functional_test": false
      }
    ],
    "git_show": [
      {
        "case_name": "Show Details of a Valid Commit",
        "purpose": "验证工具能够正确显示指定有效提交的详细信息。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "a5b2226638e1261d27b580631c4014916ac86bee"
        },
        "response": {
          "error": "Tool call 'git_show' was cancelled."
        },
        "execution_time": 50.014379024505615,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Show Details with Invalid Path",
        "purpose": "验证当提供的路径无效时，工具是否能抛出ValueError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "commit_hash": "a5b2226638e1261d27b580631c4014916ac86bee"
        },
        "response": {
          "error": "McpError: Connection closed"
        },
        "execution_time": 0.11491513252258301,
        "is_functional_test": false
      },
      {
        "case_name": "Show Details with Non-Existent Commit Hash",
        "purpose": "测试使用不存在的提交哈希值是否会触发GitCommandError错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "invalid_commit_hash_123456"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0020046234130859375,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit Details from Root Directory Repository",
        "purpose": "验证在系统根目录下展示Git提交详情的行为（边界情况）。",
        "args": {
          "path": "D:\\",
          "commit_hash": "a5b2226638e1261d27b580631c4014916ac86bee"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0009965896606445312,
        "is_functional_test": true
      },
      {
        "case_name": "Show Commit Details with Special Characters in Path",
        "purpose": "验证包含特殊字符的路径是否能够被正确处理以展示提交详情。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\test@files#123",
          "commit_hash": "a5b2226638e1261d27b580631c4014916ac86bee"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.001001119613647461,
        "is_functional_test": true
      },
      {
        "case_name": "Show Commit from Hidden Git Repository",
        "purpose": "验证工具是否能在隐藏目录中正确展示Git提交详情。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\.hidden_test_dir",
          "commit_hash": "a5b2226638e1261d27b580631c4014916ac86bee"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.002002716064453125,
        "is_functional_test": true
      },
      {
        "case_name": "Show Commit in Read-Only Directory",
        "purpose": "测试工具在没有写权限的目录中尝试展示提交详情时是否能优雅地处理错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonly_dir",
          "commit_hash": "a5b2226638e1261d27b580631c4014916ac86bee"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0040035247802734375,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit Using Empty Commit Hash",
        "purpose": "验证空提交哈希参数是否会被正确识别并抛出相应的参数验证错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": ""
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0029959678649902344,
        "is_functional_test": false
      }
    ],
    "git_reset": [
      {
        "case_name": "Unstage All Changes in Valid Repository",
        "purpose": "验证在已初始化的Git仓库中，不指定具体文件路径时能否成功取消暂存所有更改。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.001007080078125,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage Specific File in Valid Repository",
        "purpose": "验证在已初始化的Git仓库中，能否成功取消暂存指定的单个文件。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nature.jpeg"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0019981861114501953,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Unstage in Non-Existent Repository",
        "purpose": "验证当提供的仓库路径不存在时，工具是否能正确抛出ValueError异常。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0010035037994384766,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage with Empty Path Parameter",
        "purpose": "验证空路径参数是否会被正确识别并抛出相应的参数验证错误。",
        "args": {
          "path": ""
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0030007362365722656,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage File with Special Characters in Path",
        "purpose": "验证包含特殊字符的文件路径是否能够被正确处理以执行取消暂存操作。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special@#$_filename test.txt"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.000997781753540039,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage File in Hidden Directory",
        "purpose": "验证工具是否能在隐藏目录中的Git仓库中成功取消暂存指定文件。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\.hidden_test_dir",
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\.hidden_test_dir\\.hidden_new_file.txt"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.002001047134399414,
        "is_functional_test": true
      },
      {
        "case_name": "Unstage in Read-Only Directory",
        "purpose": "测试工具在没有写权限的目录中尝试取消暂存更改时是否能优雅地处理错误。",
        "args": {
          "path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\readonly_dir"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0019986629486083984,
        "is_functional_test": false
      },
      {
        "case_name": "Unstage on Drive Root with Limited Permissions",
        "purpose": "测试在受限制的根驱动器路径上取消暂存的安全性行为。",
        "args": {
          "path": "C:\\"
        },
        "response": {
          "error": "ClosedResourceError: "
        },
        "execution_time": 0.0020024776458740234,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 96
}