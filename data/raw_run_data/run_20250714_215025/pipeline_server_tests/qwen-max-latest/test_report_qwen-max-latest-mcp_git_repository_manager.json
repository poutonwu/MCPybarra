{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "qwen-max-latest-mcp_git_repository_manager",
  "server_path": "workspace/pipeline-output-servers/qwen-max-latest/mcp_git_repository_manager/refined/server.py",
  "timestamp": "2025-07-14T21:57:29.038079",
  "tools": [
    {
      "name": "git_init",
      "description": "\n            Initializes a new Git repository in the specified directory.\n\n            Args:\n                repo_path (str): The path where the new Git repository should be initialized.\n\n            Returns:\n                A string confirming the successful initialization of the Git repository.\n\n            Example:\n                git_init(repo_path=\"/path/to/new/repo\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "title": "Repo Path",
            "type": "string"
          }
        },
        "required": [
          "repo_path"
        ],
        "title": "git_initArguments",
        "type": "object"
      }
    },
    {
      "name": "git_status",
      "description": "\n            Checks the status of the working tree in the specified Git repository.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n\n            Returns:\n                A string containing the status information of the repository.\n\n            Example:\n                git_status(repo_path=\"/path/to/existing/repo\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          }
        },
        "title": "git_statusArguments",
        "type": "object"
      }
    },
    {
      "name": "git_add",
      "description": "\n            Adds files to the staging area of the specified Git repository.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                file_pattern (str): The pattern or specific file(s) to add to the staging area.\n\n            Returns:\n                A string confirming the successful addition of files to the staging area.\n\n            Example:\n                git_add(repo_path=\"/path/to/existing/repo\", file_pattern=\"*.py\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "file_pattern": {
            "default": "*",
            "title": "File Pattern",
            "type": "string"
          }
        },
        "title": "git_addArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_unstaged",
      "description": "\n            Shows changes in the working tree not yet staged for the next commit.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n\n            Returns:\n                A string containing the diff of unstaged changes.\n\n            Example:\n                git_diff_unstaged(repo_path=\"/path/to/existing/repo\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          }
        },
        "title": "git_diff_unstagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff_staged",
      "description": "\n            Shows changes between the staging area and the latest commit.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n\n            Returns:\n                A string containing the diff of staged changes.\n\n            Example:\n                git_diff_staged(repo_path=\"/path/to/existing/repo\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          }
        },
        "title": "git_diff_stagedArguments",
        "type": "object"
      }
    },
    {
      "name": "git_diff",
      "description": "\n            Compares differences between two branches or commits.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                source_ref (str): The source branch or commit hash.\n                target_ref (str): The target branch or commit hash.\n\n            Returns:\n                A string containing the diff between the specified references.\n\n            Example:\n                git_diff(repo_path=\"/path/to/existing/repo\", source_ref=\"main\", target_ref=\"feature-branch\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "source_ref": {
            "default": "main",
            "title": "Source Ref",
            "type": "string"
          },
          "target_ref": {
            "default": "feature-branch",
            "title": "Target Ref",
            "type": "string"
          }
        },
        "title": "git_diffArguments",
        "type": "object"
      }
    },
    {
      "name": "git_commit",
      "description": "\n            Records changes to the repository by creating a new commit.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                message (str): The commit message describing the changes.\n\n            Returns:\n                A string confirming the successful creation of a new commit.\n\n            Example:\n                git_commit(repo_path=\"/path/to/existing/repo\", message=\"Add new feature\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "message": {
            "default": "Commit changes",
            "title": "Message",
            "type": "string"
          }
        },
        "title": "git_commitArguments",
        "type": "object"
      }
    },
    {
      "name": "git_reset",
      "description": "\n            Removes files from the staging area without altering the working directory.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                file_pattern (str): The pattern or specific file(s) to unstage.\n\n            Returns:\n                A string confirming the successful unstaging of files.\n\n            Example:\n                git_reset(repo_path=\"/path/to/existing/repo\", file_pattern=\"*.py\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "file_pattern": {
            "default": "*",
            "title": "File Pattern",
            "type": "string"
          }
        },
        "title": "git_resetArguments",
        "type": "object"
      }
    },
    {
      "name": "git_log",
      "description": "\n            Displays the commit history of the specified Git repository.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n\n            Returns:\n                A string containing the commit history.\n\n            Example:\n                git_log(repo_path=\"/path/to/existing/repo\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          }
        },
        "title": "git_logArguments",
        "type": "object"
      }
    },
    {
      "name": "git_create_branch",
      "description": "\n            Creates a new branch in the specified Git repository.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                branch_name (str): The name of the new branch to create.\n\n            Returns:\n                A string confirming the successful creation of the new branch.\n\n            Example:\n                git_create_branch(repo_path=\"/path/to/existing/repo\", branch_name=\"new-feature\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "branch_name": {
            "default": "new-feature",
            "title": "Branch Name",
            "type": "string"
          }
        },
        "title": "git_create_branchArguments",
        "type": "object"
      }
    },
    {
      "name": "git_checkout",
      "description": "\n            Switches the current working branch to the specified branch.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                branch_name (str): The name of the branch to switch to.\n\n            Returns:\n                A string confirming the successful checkout of the specified branch.\n\n            Example:\n                git_checkout(repo_path=\"/path/to/existing/repo\", branch_name=\"feature-branch\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "branch_name": {
            "default": "feature-branch",
            "title": "Branch Name",
            "type": "string"
          }
        },
        "title": "git_checkoutArguments",
        "type": "object"
      }
    },
    {
      "name": "git_show",
      "description": "\n            Displays detailed information about a specific commit.\n\n            Args:\n                repo_path (str): The path to the Git repository. If None, uses the previously initialized repo.\n                commit_hash (str): The hash of the commit to display details for.\n\n            Returns:\n                A string containing the detailed information about the specified commit.\n\n            Example:\n                git_show(repo_path=\"/path/to/existing/repo\", commit_hash=\"a1b2c3d4\")\n            ",
      "args_schema": {
        "properties": {
          "repo_path": {
            "default": null,
            "title": "Repo Path",
            "type": "string"
          },
          "commit_hash": {
            "default": "a1b2c3d4",
            "title": "Commit Hash",
            "type": "string"
          }
        },
        "title": "git_showArguments",
        "type": "object"
      }
    },
    {
      "name": "text_write_file",
      "description": "\n            Writes content to a specified file. If the file exists, it will be overwritten.\n\n            Args:\n                file_path (str): The path to the file that will be created or overwritten.\n                content (str): The content to write into the file.\n\n            Returns:\n                A success message indicating the file was written.\n\n            Raises:\n                ValueError: If any of the inputs are invalid.\n\n            Example:\n                text_write_file(file_path=\"/tmp/test.txt\", content=\"Hello World\")\n            ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "content"
        ],
        "title": "text_write_fileArguments",
        "type": "object"
      }
    },
    {
      "name": "text_append_to_file",
      "description": "\n            Appends content to a specified file. If the file does not exist, it will be created.\n\n            Args:\n                file_path (str): The path to the file that will be appended to.\n                content (str): The content to append to the file.\n\n            Returns:\n                A success message indicating the file was appended to.\n\n            Raises:\n                ValueError: If any of the inputs are invalid.\n\n            Example:\n                text_append_to_file(file_path=\"/tmp/test.txt\", content=\"\nAdditional line\")\n            ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "content": {
            "title": "Content",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "content"
        ],
        "title": "text_append_to_fileArguments",
        "type": "object"
      }
    },
    {
      "name": "text_extract_regex",
      "description": "\n            Extracts the first match of a regular expression pattern from the given text.\n\n            Args:\n                text (str): The text to search within.\n                pattern (str): The regular expression pattern to search for.\n\n            Returns:\n                A string containing the matched group, or an error if no match is found.\n\n            Raises:\n                ValueError: If any of the inputs are invalid or no match is found.\n\n            Example:\n                text_extract_regex(text=\"Commit: a1b2c3d4\", pattern=\"commit (\\w+)\")\n            ",
      "args_schema": {
        "properties": {
          "text": {
            "title": "Text",
            "type": "string"
          },
          "pattern": {
            "title": "Pattern",
            "type": "string"
          }
        },
        "required": [
          "text",
          "pattern"
        ],
        "title": "text_extract_regexArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "git_init": [
      {
        "case_name": "Initialize Git Repository in Valid Directory",
        "purpose": "Verify that git_init successfully initializes a new Git repository in an existing valid directory.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Initialized Git repository at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\"}"
        },
        "execution_time": 0.16062688827514648,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository in Nonexistent Directory",
        "purpose": "Test how git_init handles attempting to initialize a repo in a directory that does not exist.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Initialized Git repository at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\nonexistent_dir\"}"
        },
        "execution_time": 0.1939983367919922,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository in Read-Only Directory",
        "purpose": "Check if git_init can handle trying to create a Git repository in a read-only directory properly.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Initialized Git repository at D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\"}"
        },
        "execution_time": 0.14886927604675293,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository with Special Characters in Path",
        "purpose": "Ensure git_init works correctly when the path contains special characters.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special!@#%&()_file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') not found due to: NotADirectoryError('[WinError 267] \\u76ee\\u5f55\\u540d\\u79f0\\u65e0\\u6548\\u3002')\\n  cmdline: git init\"}"
        },
        "execution_time": 0.00500035285949707,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository with Long Path Name",
        "purpose": "Test git_init behavior when the path exceeds typical Windows maximum path length limits.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_destination_path_this_is_an_extremely_long_file_name_that_exceeds_windows_max_path_length_limit_and_should_trigger_an_error_or_be_handled_properly.docx"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') not found due to: NotADirectoryError('[WinError 267] \\u76ee\\u5f55\\u540d\\u79f0\\u65e0\\u6548\\u3002')\\n  cmdline: git init\"}"
        },
        "execution_time": 0.00500035285949707,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository on Empty Directory",
        "purpose": "Confirm that git_init can initialize a Git repository in an empty directory without issues.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') not found due to: NotADirectoryError('[WinError 267] \\u76ee\\u5f55\\u540d\\u79f0\\u65e0\\u6548\\u3002')\\n  cmdline: git init\"}"
        },
        "execution_time": 0.007997989654541016,
        "is_functional_test": true
      },
      {
        "case_name": "Initialize Git Repository on File Instead of Directory",
        "purpose": "Verify that git_init fails gracefully when a file is provided instead of a directory path.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\sample1.pdf"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') not found due to: NotADirectoryError('[WinError 267] \\u76ee\\u5f55\\u540d\\u79f0\\u65e0\\u6548\\u3002')\\n  cmdline: git init\"}"
        },
        "execution_time": 0.004999876022338867,
        "is_functional_test": false
      },
      {
        "case_name": "Initialize Git Repository with Null or Empty Path",
        "purpose": "Test how git_init responds when an empty or null path is passed as input.",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"repo_path must be a non-empty string.\"}"
        },
        "execution_time": 0.007004261016845703,
        "is_functional_test": false
      }
    ],
    "git_status": [
      {
        "case_name": "Check Git Status in Initialized Repository",
        "purpose": "Verify that git_status successfully retrieves the status of an already initialized Git repository.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"On branch master\\n\\nNo commits yet\\n\\nUntracked files:\\n  (use \\\"git add <file>...\\\" to include in what will be committed)\\n\\t68078d40e08a19b806665fee_1745325376_auto_driving_system.csv\\n\\tapp.ico\\n\\tcopied_special!@#%&()_file.docx\\n\\tcropped_large_image_performance_test.jpg\\n\\tcs.csv\\n\\tempty_content_file.txt\\n\\tincludeempty.csv\\n\\tinspector.zip\\n\\tmodules.xml\\n\\tnew_document_copy.docx\\n\\tnew_document_copy.txt\\n\\tnew_document_saved.docx\\n\\tnew_test_file.txt\\n\\tnonexistent_dir/\\n\\tnonname.html\\n\\tpaper1.pdf\\n\\tpresent.html\\n\\tre2.doc\\n\\treadonly_dir/\\n\\tsample1.pdf\\n\\tscreenshots/\\n\\tspecial!@#%&()_file.txt\\n\\tspecial!@#%&()_saved.docx\\n\\tspreadsheet.csv\\n\\tswe.pptx\\n\\ttmp.csv\\n\\tvery_long_destination_path_this_is_an_extremely_long_file_name_that_exceeds_windows_max_path_length_limit_and_should_trigger_an_error_or_be_handled_properly.docx\\n\\twhole_framework.pdf\\n\\txue.jpg\\n\\t~$ample1.pdf\\n\\t~$w_document_copy.docx\\n\\t~$w_document_saved.docx\\n\\nnothing added to commit but untracked files present (use \\\"git add\\\" to track)\"}"
        },
        "execution_time": 0.15200233459472656,
        "is_functional_test": true
      },
      {
        "case_name": "Check Git Status Using Default Path",
        "purpose": "Ensure git_status works correctly when no repo_path is provided and uses the previously initialized repository.",
        "args": {},
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"On branch master\\n\\nNo commits yet\\n\\nUntracked files:\\n  (use \\\"git add <file>...\\\" to include in what will be committed)\\n\\tattempted_new_file.docx\\n\\tattempted_new_file.txt\\n\\tconverted_image.png\\n\\textracted_readonly.pdf\\n\\tlocked_file.docx\\n\\treadonly_screenshot.png\\n\\treadonly_test.jpg\\n\\treadonly_test_copy.jpg\\n\\t~$cked_file.docx\\n\\nnothing added to commit but untracked files present (use \\\"git add\\\" to track)\"}"
        },
        "execution_time": 0.16504859924316406,
        "is_functional_test": true
      },
      {
        "case_name": "Check Git Status with Special Characters in Path",
        "purpose": "Test if git_status handles paths containing special characters gracefully.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special!@#%&()_file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special!@#%&()_file.txt\"}"
        },
        "execution_time": 0.002999544143676758,
        "is_functional_test": false
      },
      {
        "case_name": "Check Git Status on Nonexistent Directory",
        "purpose": "Validate that git_status fails appropriately when attempting to check status on a non-existent directory.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testSystem\\\\nonexistent_dir\"}"
        },
        "execution_time": 0.004000663757324219,
        "is_functional_test": false
      },
      {
        "case_name": "Check Git Status on Read-Only Directory",
        "purpose": "Ensure git_status properly handles attempts to check the status of a read-only directory.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"On branch master\\n\\nNo commits yet\\n\\nUntracked files:\\n  (use \\\"git add <file>...\\\" to include in what will be committed)\\n\\tattempted_new_file.docx\\n\\tattempted_new_file.txt\\n\\tconverted_image.png\\n\\textracted_readonly.pdf\\n\\tlocked_file.docx\\n\\treadonly_screenshot.png\\n\\treadonly_test.jpg\\n\\treadonly_test_copy.jpg\\n\\t~$cked_file.docx\\n\\nnothing added to commit but untracked files present (use \\\"git add\\\" to track)\"}"
        },
        "execution_time": 0.18677663803100586,
        "is_functional_test": false
      },
      {
        "case_name": "Check Git Status with Long Path Name",
        "purpose": "Test git_status behavior when the path exceeds typical Windows maximum path length limits.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_destination_path_this_is_an_extremely_long_file_name_that_exceeds_windows_max_path_length_limit_and_should_trigger_an_error_or_be_handled_properly.docx"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_destination_path_this_is_an_extremely_long_file_name_that_exceeds_windows_max_path_length_limit_and_should_trigger_an_error_or_be_handled_properly.docx\"}"
        },
        "execution_time": 0.004002571105957031,
        "is_functional_test": false
      },
      {
        "case_name": "Check Git Status on File Instead of Directory",
        "purpose": "Verify that git_status fails gracefully when a file is provided instead of a directory path.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\sample1.pdf"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\sample1.pdf\"}"
        },
        "execution_time": 0.004001617431640625,
        "is_functional_test": false
      },
      {
        "case_name": "Check Git Status with Null or Empty Path",
        "purpose": "Test how git_status responds when an empty or null path is passed as input.",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"On branch master\\n\\nNo commits yet\\n\\nUntracked files:\\n  (use \\\"git add <file>...\\\" to include in what will be committed)\\n\\tattempted_new_file.docx\\n\\tattempted_new_file.txt\\n\\tconverted_image.png\\n\\textracted_readonly.pdf\\n\\tlocked_file.docx\\n\\treadonly_screenshot.png\\n\\treadonly_test.jpg\\n\\treadonly_test_copy.jpg\\n\\t~$cked_file.docx\\n\\nnothing added to commit but untracked files present (use \\\"git add\\\" to track)\"}"
        },
        "execution_time": 0.15750527381896973,
        "is_functional_test": false
      }
    ],
    "git_add": [
      {
        "case_name": "Add All Files to Staging Area Using Default Repo Path",
        "purpose": "Verify git_add successfully adds all files to the staging area using the default repository path after initialization.",
        "args": {
          "file_pattern": "*"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Added * to staging area.\"}"
        },
        "execution_time": 0.20720601081848145,
        "is_functional_test": true
      },
      {
        "case_name": "Add Specific File Type to Staging Area",
        "purpose": "Test git_add functionality when adding a specific file type (e.g., .txt) from the specified repo path.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_pattern": "*.txt"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Added *.txt to staging area.\"}"
        },
        "execution_time": 0.012002944946289062,
        "is_functional_test": true
      },
      {
        "case_name": "Add Single File by Exact Name",
        "purpose": "Ensure git_add can add a single file by its exact name to the staging area.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_pattern": "empty_content_file.txt"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Added empty_content_file.txt to staging area.\"}"
        },
        "execution_time": 0.004998445510864258,
        "is_functional_test": true
      },
      {
        "case_name": "Add Files in Read-Only Directory",
        "purpose": "Check if git_add handles adding files located in a read-only directory correctly.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "file_pattern": "*"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Added * to staging area.\"}"
        },
        "execution_time": 0.23013854026794434,
        "is_functional_test": true
      },
      {
        "case_name": "Add Files with Special Characters in File Pattern",
        "purpose": "Validate that git_add properly handles file patterns containing special characters like !@#%&()_",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_pattern": "*special!@#%&()_file*"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Added *special!@#%&()_file* to staging area.\"}"
        },
        "execution_time": 0.029999732971191406,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Add with Null or Empty Repository Path",
        "purpose": "Test how git_add responds when an empty or null repo_path is passed as input.",
        "args": {
          "repo_path": "",
          "file_pattern": "*.docx"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Added *.docx to staging area.\"}"
        },
        "execution_time": 0.01800394058227539,
        "is_functional_test": false
      },
      {
        "case_name": "Add Files in Nonexistent Directory",
        "purpose": "Verify that git_add fails gracefully when attempting to add files from a non-existent directory.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testSystem\\nonexistent_dir",
          "file_pattern": "*"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testSystem\\\\nonexistent_dir\"}"
        },
        "execution_time": 0.024996519088745117,
        "is_functional_test": false
      },
      {
        "case_name": "Add Files with Long Path Name",
        "purpose": "Test git_add behavior when the file path exceeds typical Windows maximum path length limits.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_destination_path_this_is_an_extremely_long_file_name_that_exceeds_windows_max_path_length_limit_and_should_trigger_an_error_or_be_handled_properly.docx",
          "file_pattern": "*"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_destination_path_this_is_an_extremely_long_file_name_that_exceeds_windows_max_path_length_limit_and_should_trigger_an_error_or_be_handled_properly.docx\"}"
        },
        "execution_time": 0.010001659393310547,
        "is_functional_test": false
      }
    ],
    "git_diff_unstaged": [
      {
        "case_name": "Show Unstaged Changes in Initialized Repository",
        "purpose": "Verify that git_diff_unstaged correctly shows unstaged changes in an initialized Git repository using the default repo path.",
        "args": {},
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"diff --git a/attempted_new_file.docx b/attempted_new_file.docx\\nindex e8e783a..ed8b726 100644\\n--- a/attempted_new_file.docx\\n+++ b/attempted_new_file.docx\\n@@ -1,4 +1,430 @@\\n-First Cell UpdatedNew Value\\n+\\udcd0\\udccf\\u0011\\u0871\\u001a\\udce1\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000>\\u0000\\u0003\\u0000\\udcfe\\udcff\\t\\u0000\\u0006\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0013\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0010\\u0000\\u0000\\u0002\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000\\udcfe\\udcff\\udcff\\udcff\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0007\\u0000\\u0000\\u0000\\b\\u0000\\u0000\\u0000\\t\\u0000\\u0000\\u0000\\n+\\u0000\\u0000\\u0000\\u000b\\u0000\\u0000\\u0000\\f\\u0000\\u0000\\u0000\\r\\u0000\\u0000\\u0000\\u000e\\u0000\\u0000\\u0000\\u000f\\u0000\\u0000\\u0000\\u0010\\u0000\\u0000\\u0000\\u0011\\u0000\\u0000\\u0000\\u0012\\u0000\\u0000\\u0000\\u0013\\u0000\\u0000\\u0000\\u0014\\u0000\\u0000\\u0000\\u0015\\u0000\\u0000\\u0000\\u0016\\u0000\\u0000\\u0000\\u0017\\u0000\\u0000\\u0000\\u0018\\u0000\\u0000\\u0000\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcf...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计509556字符，剩余508156字符"
        },
        "execution_time": 2.621305227279663,
        "is_functional_test": true
      },
      {
        "case_name": "Show Unstaged Changes with Valid Repo Path",
        "purpose": "Test that git_diff_unstaged returns unstaged changes when a valid repo_path is provided.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\"}"
        },
        "execution_time": 0.1877298355102539,
        "is_functional_test": true
      },
      {
        "case_name": "Show Unstaged Changes on Read-Only Directory",
        "purpose": "Ensure git_diff_unstaged handles attempts to show unstaged changes in a read-only directory gracefully.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"diff --git a/attempted_new_file.docx b/attempted_new_file.docx\\nindex e8e783a..ed8b726 100644\\n--- a/attempted_new_file.docx\\n+++ b/attempted_new_file.docx\\n@@ -1,4 +1,430 @@\\n-First Cell UpdatedNew Value\\n+\\udcd0\\udccf\\u0011\\u0871\\u001a\\udce1\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000>\\u0000\\u0003\\u0000\\udcfe\\udcff\\t\\u0000\\u0006\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0013\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0010\\u0000\\u0000\\u0002\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000\\udcfe\\udcff\\udcff\\udcff\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0007\\u0000\\u0000\\u0000\\b\\u0000\\u0000\\u0000\\t\\u0000\\u0000\\u0000\\n+\\u0000\\u0000\\u0000\\u000b\\u0000\\u0000\\u0000\\f\\u0000\\u0000\\u0000\\r\\u0000\\u0000\\u0000\\u000e\\u0000\\u0000\\u0000\\u000f\\u0000\\u0000\\u0000\\u0010\\u0000\\u0000\\u0000\\u0011\\u0000\\u0000\\u0000\\u0012\\u0000\\u0000\\u0000\\u0013\\u0000\\u0000\\u0000\\u0014\\u0000\\u0000\\u0000\\u0015\\u0000\\u0000\\u0000\\u0016\\u0000\\u0000\\u0000\\u0017\\u0000\\u0000\\u0000\\u0018\\u0000\\u0000\\u0000\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcf...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计509556字符，剩余508156字符"
        },
        "execution_time": 2.213412046432495,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Changes with Special Characters in Path",
        "purpose": "Check if git_diff_unstaged can handle paths containing special characters without errors.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special!@#%&()_file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special!@#%&()_file.txt\"}"
        },
        "execution_time": 0.003998756408691406,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Changes in Nonexistent Directory",
        "purpose": "Validate that git_diff_unstaged fails appropriately when attempting to check unstaged changes in a non-existent directory.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testSystem\\\\nonexistent_dir\"}"
        },
        "execution_time": 0.003994464874267578,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Changes Using Null or Empty Path",
        "purpose": "Test how git_diff_unstaged responds when an empty or null path is passed as input.",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"diff --git a/attempted_new_file.docx b/attempted_new_file.docx\\nindex e8e783a..ed8b726 100644\\n--- a/attempted_new_file.docx\\n+++ b/attempted_new_file.docx\\n@@ -1,4 +1,430 @@\\n-First Cell UpdatedNew Value\\n+\\udcd0\\udccf\\u0011\\u0871\\u001a\\udce1\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000>\\u0000\\u0003\\u0000\\udcfe\\udcff\\t\\u0000\\u0006\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0013\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0010\\u0000\\u0000\\u0002\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000\\udcfe\\udcff\\udcff\\udcff\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0007\\u0000\\u0000\\u0000\\b\\u0000\\u0000\\u0000\\t\\u0000\\u0000\\u0000\\n+\\u0000\\u0000\\u0000\\u000b\\u0000\\u0000\\u0000\\f\\u0000\\u0000\\u0000\\r\\u0000\\u0000\\u0000\\u000e\\u0000\\u0000\\u0000\\u000f\\u0000\\u0000\\u0000\\u0010\\u0000\\u0000\\u0000\\u0011\\u0000\\u0000\\u0000\\u0012\\u0000\\u0000\\u0000\\u0013\\u0000\\u0000\\u0000\\u0014\\u0000\\u0000\\u0000\\u0015\\u0000\\u0000\\u0000\\u0016\\u0000\\u0000\\u0000\\u0017\\u0000\\u0000\\u0000\\u0018\\u0000\\u0000\\u0000\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcff\\udcf...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计509556字符，剩余508156字符"
        },
        "execution_time": 2.3636996746063232,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Changes on File Instead of Directory",
        "purpose": "Verify that git_diff_unstaged fails gracefully when a file is provided instead of a directory path.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\sample1.pdf"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\sample1.pdf\"}"
        },
        "execution_time": 0.003954172134399414,
        "is_functional_test": false
      },
      {
        "case_name": "Show Unstaged Changes with Long Path Name",
        "purpose": "Test git_diff_unstaged behavior when the path exceeds typical Windows maximum path length limits.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_destination_path_this_is_an_extremely_long_file_name_that_exceeds_windows_max_path_length_limit_and_should_trigger_an_error_or_be_handled_properly.docx"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_destination_path_this_is_an_extremely_long_file_name_that_exceeds_windows_max_path_length_limit_and_should_trigger_an_error_or_be_handled_properly.docx\"}"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      }
    ],
    "git_diff_staged": [
      {
        "case_name": "Show Staged Changes in Initialized Repository Using Default Path",
        "purpose": "Verify git_diff_staged successfully shows staged changes when using the default repository path (previously initialized repo).",
        "args": {},
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff HEAD\\n  stderr: 'fatal: ambiguous argument 'HEAD': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.14102792739868164,
        "is_functional_test": true
      },
      {
        "case_name": "Show Staged Changes in Valid Repository Path",
        "purpose": "Verify git_diff_staged successfully shows staged changes in a valid Git repository path.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff HEAD\\n  stderr: 'fatal: ambiguous argument 'HEAD': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.13251876831054688,
        "is_functional_test": true
      },
      {
        "case_name": "Show Staged Changes with No Staged Files",
        "purpose": "Verify git_diff_staged returns an empty or appropriate response when there are no staged files.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff HEAD\\n  stderr: 'fatal: ambiguous argument 'HEAD': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.18762540817260742,
        "is_functional_test": true
      },
      {
        "case_name": "Show Staged Changes in Read-Only Directory",
        "purpose": "Test if git_diff_staged handles reading staged changes from a read-only directory gracefully.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff HEAD\\n  stderr: 'fatal: ambiguous argument 'HEAD': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.15969562530517578,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes with Special Characters in Path",
        "purpose": "Test if git_diff_staged handles paths containing special characters gracefully.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special!@#%&()_file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special!@#%&()_file.txt\"}"
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes on Nonexistent Directory",
        "purpose": "Validate that git_diff_staged fails appropriately when attempting to check diff in a non-existent directory.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testSystem\\\\nonexistent_dir\"}"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes on File Instead of Directory",
        "purpose": "Verify that git_diff_staged fails gracefully when a file is provided instead of a directory path.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\sample1.pdf"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\sample1.pdf\"}"
        },
        "execution_time": 0.008000373840332031,
        "is_functional_test": false
      },
      {
        "case_name": "Show Staged Changes with Null or Empty Path",
        "purpose": "Test how git_diff_staged responds when an empty or null path is passed as input.",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff HEAD\\n  stderr: 'fatal: ambiguous argument 'HEAD': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.2760002613067627,
        "is_functional_test": false
      }
    ],
    "git_diff": [
      {
        "case_name": "Basic Diff Between Two Branches Using Default Repo",
        "purpose": "Verify git_diff successfully compares differences between two branches using the previously initialized repository.",
        "args": {
          "source_ref": "main",
          "target_ref": "feature-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff main..feature-branch\\n  stderr: 'fatal: ambiguous argument 'main..feature-branch': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.16399931907653809,
        "is_functional_test": true
      },
      {
        "case_name": "Diff Between Branch and Commit in Valid Repo",
        "purpose": "Test git_diff functionality when comparing a branch and a specific commit hash in a valid repo.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source_ref": "main",
          "target_ref": "abc1234"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff main..abc1234\\n  stderr: 'fatal: ambiguous argument 'main..abc1234': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.16700029373168945,
        "is_functional_test": true
      },
      {
        "case_name": "Diff Between Two Commits in Valid Repo",
        "purpose": "Ensure git_diff works when comparing two specific commit hashes in a valid repository.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source_ref": "abc1234",
          "target_ref": "def5678"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff abc1234..def5678\\n  stderr: 'fatal: ambiguous argument 'abc1234..def5678': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.22403860092163086,
        "is_functional_test": true
      },
      {
        "case_name": "Diff With Invalid Repository Path",
        "purpose": "Validate that git_diff fails gracefully when an invalid repository path is provided.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_repo",
          "source_ref": "main",
          "target_ref": "feature-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\nonexistent_repo\"}"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": false
      },
      {
        "case_name": "Diff With Read-Only Repository",
        "purpose": "Check if git_diff handles read-only repository paths properly.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "source_ref": "main",
          "target_ref": "feature-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff main..feature-branch\\n  stderr: 'fatal: ambiguous argument 'main..feature-branch': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.20470476150512695,
        "is_functional_test": false
      },
      {
        "case_name": "Diff With Special Characters in Ref Names",
        "purpose": "Test git_diff behavior when branch names contain special characters.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source_ref": "feature/branch!@#",
          "target_ref": "release/1.0"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff feature/branch!@#..release/1.0\\n  stderr: 'fatal: ambiguous argument 'feature/branch!@#..release/1.0': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.16264104843139648,
        "is_functional_test": true
      },
      {
        "case_name": "Diff With Empty Ref Names",
        "purpose": "Ensure git_diff fails gracefully when source or target ref names are empty or null.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source_ref": "",
          "target_ref": "feature-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"source_ref must be a non-empty string.\"}"
        },
        "execution_time": 0.0029997825622558594,
        "is_functional_test": false
      },
      {
        "case_name": "Diff With Long Branch Names",
        "purpose": "Test git_diff behavior when branch names are excessively long.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "source_ref": "very_long_branch_name_that_exceeds_typical_length_limits_and_may_cause_issues",
          "target_ref": "main"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git diff very_long_branch_name_that_exceeds_typical_length_limits_and_may_cause_issues..main\\n  stderr: 'fatal: ambiguous argument 'very_long_branch_name_that_exceeds_typical_length_limits_and_may_cause_issues..main': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.17600035667419434,
        "is_functional_test": false
      }
    ],
    "git_commit": [
      {
        "case_name": "Commit Changes in Initialized Repository with Default Path",
        "purpose": "Verify that git_commit successfully creates a commit in an already initialized repository using the default path.",
        "args": {
          "message": "Commit changes"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Created new commit: c2882c85ad869b1ad06ecddc574a4ead2911a5aa\"}"
        },
        "execution_time": 0.3199491500854492,
        "is_functional_test": true
      },
      {
        "case_name": "Commit Changes in Specified Valid Repository",
        "purpose": "Ensure git_commit works correctly when providing a valid repo_path and custom commit message.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Add new feature"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Created new commit: 2772519f336d9c0f0f43d9f4c6b29e26d0e5107e\"}"
        },
        "execution_time": 0.23339200019836426,
        "is_functional_test": true
      },
      {
        "case_name": "Commit with Empty Message",
        "purpose": "Test if git_commit handles empty commit messages gracefully.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"message must be a non-empty string.\"}"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": false
      },
      {
        "case_name": "Commit in Read-Only Directory",
        "purpose": "Check how git_commit behaves when attempting to commit in a read-only directory.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "message": "Attempt commit in read-only dir"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Created new commit: 921d66c4852c22cf1347a85a5db2c5d300a36b9c\"}"
        },
        "execution_time": 0.3280801773071289,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Special Characters in Message",
        "purpose": "Verify that git_commit accepts commit messages containing special characters.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "Fix bug #123 - Update logic @release"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Created new commit: 8831a1d3556de393460ed70b2b523201e8ea0217\"}"
        },
        "execution_time": 0.2776973247528076,
        "is_functional_test": true
      },
      {
        "case_name": "Commit in Nonexistent Directory",
        "purpose": "Ensure git_commit fails gracefully when trying to commit in a non-existent directory.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "message": "Commit attempt in invalid path"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Created new commit: 91e6a2b035f3c2490f8fd1ddd5c79041ecb3bf2c\"}"
        },
        "execution_time": 0.28424763679504395,
        "is_functional_test": false
      },
      {
        "case_name": "Commit with Long Commit Message",
        "purpose": "Test git_commit behavior with an extremely long commit message.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "message": "This is an extremely long commit message that exceeds typical length limits and may cause issues in some systems. This is only for testing purposes to ensure the tool can handle large inputs gracefully without crashing or truncating unexpectedly."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Created new commit: 4d53493436bd3b621488590c56a203751aa1fd8d\"}"
        },
        "execution_time": 0.2702474594116211,
        "is_functional_test": false
      },
      {
        "case_name": "Commit Without Initializing Repository First",
        "purpose": "Validate that git_commit fails properly when no Git repository has been initialized.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_file.txt",
          "message": "Commit without init"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_file.txt\"}"
        },
        "execution_time": 0.0040111541748046875,
        "is_functional_test": false
      }
    ],
    "git_reset": [
      {
        "case_name": "Reset Specific File Pattern in Valid Repo",
        "purpose": "Verify git_reset successfully unstages files matching a specific pattern in an existing repository.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_pattern": "*.csv"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Unstaged *.csv.\"}"
        },
        "execution_time": 0.22117185592651367,
        "is_functional_test": true
      },
      {
        "case_name": "Reset All Files Using Default Pattern",
        "purpose": "Test git_reset with default file_pattern '*' to unstage all staged files in the repo.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Unstaged *.\"}"
        },
        "execution_time": 0.1456923484802246,
        "is_functional_test": true
      },
      {
        "case_name": "Reset Without Specifying Repository Path",
        "purpose": "Ensure git_reset works when repo_path is not provided, using previously initialized repo context.",
        "args": {
          "file_pattern": "*.txt"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Unstaged *.txt.\"}"
        },
        "execution_time": 0.14600014686584473,
        "is_functional_test": true
      },
      {
        "case_name": "Reset on Nonexistent File Pattern",
        "purpose": "Validate git_reset gracefully handles patterns that match no staged files.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_pattern": "*.xyz"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Unstaged *.xyz.\"}"
        },
        "execution_time": 0.1667187213897705,
        "is_functional_test": true
      },
      {
        "case_name": "Reset with Special Characters in File Pattern",
        "purpose": "Test git_reset behavior when file_pattern contains special characters like !@#%&()_",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_pattern": "*special!@#%&()_*.docx"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Unstaged *special!@#%&()_*.docx.\"}"
        },
        "execution_time": 0.2090146541595459,
        "is_functional_test": true
      },
      {
        "case_name": "Reset with Null or Empty File Pattern",
        "purpose": "Check how git_reset responds when file_pattern is null or empty.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_pattern": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"file_pattern must be a non-empty string.\"}"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": false
      },
      {
        "case_name": "Reset in Read-Only Directory Context",
        "purpose": "Ensure git_reset behaves correctly when operating within a read-only directory structure.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "file_pattern": "*.jpg"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Unstaged *.jpg.\"}"
        },
        "execution_time": 0.28896427154541016,
        "is_functional_test": false
      },
      {
        "case_name": "Reset with Long File Path Pattern",
        "purpose": "Test git_reset behavior when file_pattern matches long path names exceeding typical Windows limits.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "file_pattern": "*very_long_destination_path*"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Unstaged *very_long_destination_path*.\"}"
        },
        "execution_time": 0.2146773338317871,
        "is_functional_test": false
      }
    ],
    "git_log": [
      {
        "case_name": "Display Commit History Using Default Path",
        "purpose": "Verify that git_log successfully displays commit history when no repo_path is provided and uses the previously initialized repository.",
        "args": {},
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"commit 921d66c4852c22cf1347a85a5db2c5d300a36b9c\\nAuthor: pouchine <1291980381@qq.com>\\nDate:   Mon Jul 14 22:00:08 2025 +0800\\n\\n    Attempt commit in read-only dir\\n\\ncommit c2882c85ad869b1ad06ecddc574a4ead2911a5aa\\nAuthor: pouchine <1291980381@qq.com>\\nDate:   Mon Jul 14 22:00:07 2025 +0800\\n\\n    Commit changes\"}"
        },
        "execution_time": 0.2268683910369873,
        "is_functional_test": true
      },
      {
        "case_name": "Display Commit History in Initialized Repository",
        "purpose": "Verify that git_log successfully retrieves commit history from a valid, already initialized Git repository.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"commit 4d53493436bd3b621488590c56a203751aa1fd8d\\nAuthor: pouchine <1291980381@qq.com>\\nDate:   Mon Jul 14 22:00:09 2025 +0800\\n\\n    This is an extremely long commit message that exceeds typical length limits and may cause issues in some systems. This is only for testing purposes to ensure the tool can handle large inputs gracefully without crashing or truncating unexpectedly.\\n\\ncommit 8831a1d3556de393460ed70b2b523201e8ea0217\\nAuthor: pouchine <1291980381@qq.com>\\nDate:   Mon Jul 14 22:00:08 2025 +0800\\n\\n    Fix bug #123 - Update logic @release\\n\\ncommit 2772519f336d9c0f0f43d9f4c6b29e26d0e5107e\\nAuthor: pouchine <1291980381@qq.com>\\nDate:   Mon Jul 14 22:00:07 2025 +0800\\n\\n    Add new feature\"}"
        },
        "execution_time": 0.17808985710144043,
        "is_functional_test": true
      },
      {
        "case_name": "Display Commit History on Read-Only Directory",
        "purpose": "Ensure git_log properly handles attempts to retrieve commit history from a read-only directory.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"commit 921d66c4852c22cf1347a85a5db2c5d300a36b9c\\nAuthor: pouchine <1291980381@qq.com>\\nDate:   Mon Jul 14 22:00:08 2025 +0800\\n\\n    Attempt commit in read-only dir\\n\\ncommit c2882c85ad869b1ad06ecddc574a4ead2911a5aa\\nAuthor: pouchine <1291980381@qq.com>\\nDate:   Mon Jul 14 22:00:07 2025 +0800\\n\\n    Commit changes\"}"
        },
        "execution_time": 0.22684621810913086,
        "is_functional_test": false
      },
      {
        "case_name": "Display Commit History with Special Characters in Path",
        "purpose": "Test if git_log handles paths containing special characters gracefully.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special!@#%&()_file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special!@#%&()_file.txt\"}"
        },
        "execution_time": 0.003997087478637695,
        "is_functional_test": false
      },
      {
        "case_name": "Display Commit History on Nonexistent Directory",
        "purpose": "Validate that git_log fails appropriately when attempting to display history on a non-existent directory.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testSystem\\nonexistent_dir"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testSystem\\\\nonexistent_dir\"}"
        },
        "execution_time": 0.003000497817993164,
        "is_functional_test": false
      },
      {
        "case_name": "Display Commit History with Long Path Name",
        "purpose": "Test git_log behavior when the path exceeds typical Windows maximum path length limits.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_destination_path_this_is_an_extremely_long_file_name_that_exceeds_windows_max_path_length_limit_and_should_trigger_an_error_or_be_handled_properly.docx"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_destination_path_this_is_an_extremely_long_file_name_that_exceeds_windows_max_path_length_limit_and_should_trigger_an_error_or_be_handled_properly.docx\"}"
        },
        "execution_time": 0.00701141357421875,
        "is_functional_test": false
      },
      {
        "case_name": "Display Commit History on File Instead of Directory",
        "purpose": "Verify that git_log fails gracefully when a file is provided instead of a directory path.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\sample1.pdf"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\sample1.pdf\"}"
        },
        "execution_time": 0.0059909820556640625,
        "is_functional_test": false
      },
      {
        "case_name": "Display Commit History with Null or Empty Path",
        "purpose": "Test how git_log responds when an empty or null path is passed as input.",
        "args": {
          "repo_path": ""
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"commit 921d66c4852c22cf1347a85a5db2c5d300a36b9c\\nAuthor: pouchine <1291980381@qq.com>\\nDate:   Mon Jul 14 22:00:08 2025 +0800\\n\\n    Attempt commit in read-only dir\\n\\ncommit c2882c85ad869b1ad06ecddc574a4ead2911a5aa\\nAuthor: pouchine <1291980381@qq.com>\\nDate:   Mon Jul 14 22:00:07 2025 +0800\\n\\n    Commit changes\"}"
        },
        "execution_time": 0.28539109230041504,
        "is_functional_test": false
      }
    ],
    "git_create_branch": [
      {
        "case_name": "Create New Branch in Initialized Repository",
        "purpose": "Verify that git_create_branch successfully creates a new branch in an already initialized Git repository using default repo path.",
        "args": {
          "branch_name": "new-feature"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Created new branch: new-feature\"}"
        },
        "execution_time": 0.23454046249389648,
        "is_functional_test": true
      },
      {
        "case_name": "Create New Branch with Custom Repo Path",
        "purpose": "Ensure git_create_branch can create a new branch when a specific repo_path is provided.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "bugfix"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Created new branch: bugfix\"}"
        },
        "execution_time": 0.16562247276306152,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to Create Branch in Nonexistent Directory",
        "purpose": "Test how git_create_branch handles attempts to create a branch in a non-existent directory.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\nonexistent_dir",
          "branch_name": "patch"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Created new branch: patch\"}"
        },
        "execution_time": 0.16354918479919434,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Empty Branch Name",
        "purpose": "Verify git_create_branch fails gracefully when branch_name is empty or null.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"branch_name must be a non-empty string.\"}"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Special Characters in Name",
        "purpose": "Check if git_create_branch properly handles special characters in the branch name.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature!@#_test"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Created new branch: feature!@#_test\"}"
        },
        "execution_time": 0.19237494468688965,
        "is_functional_test": true
      },
      {
        "case_name": "Create Branch in Read-Only Directory",
        "purpose": "Test git_create_branch behavior when attempting to create a branch in a read-only directory.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "branch_name": "read_only_branch"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Created new branch: read_only_branch\"}"
        },
        "execution_time": 0.21192383766174316,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch with Long Branch Name",
        "purpose": "Validate git_create_branch behavior when branch name exceeds typical length limits.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "this_is_an_extremely_long_branch_name_that_exceeds_typical_length_limits_and_may_cause_issues"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Created new branch: this_is_an_extremely_long_branch_name_that_exceeds_typical_length_limits_and_may_cause_issues\"}"
        },
        "execution_time": 0.21311593055725098,
        "is_functional_test": false
      },
      {
        "case_name": "Create Branch Using Default Repo and Default Branch Name",
        "purpose": "Confirm git_create_branch works correctly with both default parameters: default repo and default branch name.",
        "args": {},
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Created new branch: new-feature\"}"
        },
        "execution_time": 0.2938046455383301,
        "is_functional_test": true
      }
    ],
    "git_checkout": [
      {
        "case_name": "Checkout to Valid Branch Using Default Repository",
        "purpose": "Verify that git_checkout successfully switches to a valid branch using the default repository path.",
        "args": {
          "branch_name": "master"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Checked out to branch: master\"}"
        },
        "execution_time": 0.21852397918701172,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout to Valid Branch in Specified Repository",
        "purpose": "Verify that git_checkout successfully switches to a valid branch in a specified repository path.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "feature!@#_test"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Checked out to branch: feature!@#_test\"}"
        },
        "execution_time": 0.24498295783996582,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout to Nonexistent Branch",
        "purpose": "Test how git_checkout handles attempting to switch to a branch that does not exist.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "nonexistent_branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(1)\\n  cmdline: git checkout nonexistent_branch\\n  stderr: 'error: pathspec 'nonexistent_branch' did not match any file(s) known to git'\"}"
        },
        "execution_time": 0.25414085388183594,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout with Special Characters in Branch Name",
        "purpose": "Ensure git_checkout works correctly when the branch name contains special characters.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "bugfix!@#%&()_branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(1)\\n  cmdline: git checkout bugfix!@#%&()_branch\\n  stderr: 'error: pathspec 'bugfix!@#%&()_branch' did not match any file(s) known to git'\"}"
        },
        "execution_time": 0.24399948120117188,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout with Empty Branch Name",
        "purpose": "Test how git_checkout responds when an empty branch name is provided.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"branch_name must be a non-empty string.\"}"
        },
        "execution_time": 0.00699615478515625,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout Using Read-Only Repository",
        "purpose": "Verify that git_checkout can switch branches in a read-only repository if permissions allow.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "branch_name": "read_only_branch"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Checked out to branch: read_only_branch\"}"
        },
        "execution_time": 0.24512720108032227,
        "is_functional_test": false
      },
      {
        "case_name": "Checkout with Long Branch Name",
        "purpose": "Test git_checkout behavior when the branch name exceeds typical length limits.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "branch_name": "this_is_an_extremely_long_branch_name_that_exceeds_typical_length_limits_and_may_cause_issues"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Checked out to branch: this_is_an_extremely_long_branch_name_that_exceeds_typical_length_limits_and_may_cause_issues\"}"
        },
        "execution_time": 0.24025797843933105,
        "is_functional_test": true
      },
      {
        "case_name": "Checkout in Nonexistent Repository",
        "purpose": "Validate that git_checkout fails gracefully when attempting to checkout in a non-existent repository.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testSystem\\nonexistent_dir",
          "branch_name": "feature-branch"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testSystem\\\\nonexistent_dir\"}"
        },
        "execution_time": 0.004997968673706055,
        "is_functional_test": false
      }
    ],
    "git_show": [
      {
        "case_name": "Show Commit Details with Valid Repo and Hash",
        "purpose": "Verify git_show successfully displays detailed information about a specific commit using a valid repository path and commit hash.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git show a1b2c3d4\\n  stderr: 'fatal: ambiguous argument 'a1b2c3d4': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.2173750400543213,
        "is_functional_test": true
      },
      {
        "case_name": "Show Commit Details Using Default Repository",
        "purpose": "Ensure git_show works correctly when repo_path is not provided, using the previously initialized repository.",
        "args": {
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git show a1b2c3d4\\n  stderr: 'fatal: ambiguous argument 'a1b2c3d4': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.20600080490112305,
        "is_functional_test": true
      },
      {
        "case_name": "Show Commit with Special Characters in Repo Path",
        "purpose": "Test if git_show handles paths containing special characters gracefully.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special!@#%&()_file.txt",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special!@#%&()_file.txt\"}"
        },
        "execution_time": 0.003998517990112305,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit in Nonexistent Directory",
        "purpose": "Validate that git_show fails appropriately when attempting to show a commit in a non-existent directory.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testSystem\\nonexistent_dir",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testSystem\\\\nonexistent_dir\"}"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit with Invalid Commit Hash",
        "purpose": "Check how git_show responds when an invalid or malformed commit hash is provided.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles",
          "commit_hash": "invalid_hash_123"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git show invalid_hash_123\\n  stderr: 'fatal: ambiguous argument 'invalid_hash_123': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.1995072364807129,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit on Read-Only Directory",
        "purpose": "Ensure git_show properly handles attempts to show commit details from a read-only directory.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Cmd('git') failed due to: exit code(128)\\n  cmdline: git show a1b2c3d4\\n  stderr: 'fatal: ambiguous argument 'a1b2c3d4': unknown revision or path not in the working tree.\\nUse '--' to separate paths from revisions, like this:\\n'git <command> [<revision>...] -- [<file>...]''\"}"
        },
        "execution_time": 0.20867919921875,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit with Long Path Name",
        "purpose": "Test git_show behavior when the repo path exceeds typical Windows maximum path length limits.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_destination_path_this_is_an_extremely_long_file_name_that_exceeds_windows_max_path_length_limit_and_should_trigger_an_error_or_be_handled_properly.docx",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_destination_path_this_is_an_extremely_long_file_name_that_exceeds_windows_max_path_length_limit_and_should_trigger_an_error_or_be_handled_properly.docx\"}"
        },
        "execution_time": 0.003998756408691406,
        "is_functional_test": false
      },
      {
        "case_name": "Show Commit When File Provided Instead of Directory",
        "purpose": "Verify that git_show fails gracefully when a file is provided instead of a directory path.",
        "args": {
          "repo_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\sample1.pdf",
          "commit_hash": "a1b2c3d4"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\sample1.pdf\"}"
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": false
      }
    ],
    "text_write_file": [
      {
        "case_name": "Write Content to New File",
        "purpose": "Verify that text_write_file can successfully create a new file and write content to it.",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_output.txt",
          "content": "This is a test content for new file."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Wrote content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_output.txt\"}"
        },
        "execution_time": 0.006999492645263672,
        "is_functional_test": true
      },
      {
        "case_name": "Overwrite Existing File",
        "purpose": "Ensure that text_write_file correctly overwrites an existing file with new content.",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_file.txt",
          "content": "New content replacing the old content."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Wrote content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_content_file.txt\"}"
        },
        "execution_time": 0.005000114440917969,
        "is_functional_test": true
      },
      {
        "case_name": "Write to File with Special Characters in Path",
        "purpose": "Test whether text_write_file handles file paths containing special characters properly.",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special!@#%&()_output.txt",
          "content": "Content written to a file with special characters in path."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Wrote content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special!@#%&()_output.txt\"}"
        },
        "execution_time": 0.009002685546875,
        "is_functional_test": true
      },
      {
        "case_name": "Write to Read-Only File",
        "purpose": "Check if text_write_file fails gracefully when attempting to write to a read-only file.",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\readonly_test.txt",
          "content": "Attempting to write to a read-only file."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Wrote content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\\\\readonly_test.txt\"}"
        },
        "execution_time": 0.015022039413452148,
        "is_functional_test": false
      },
      {
        "case_name": "Write Empty Content to File",
        "purpose": "Validate that text_write_file can handle empty content input correctly.",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_output.txt",
          "content": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"content must be a non-empty string.\"}"
        },
        "execution_time": 0.01599884033203125,
        "is_functional_test": true
      },
      {
        "case_name": "Write to Non-Existent Directory",
        "purpose": "Test how text_write_file behaves when the target directory does not exist.",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testSystem\\nonexistent_dir\\test_output.txt",
          "content": "This should fail because the directory does not exist."
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"[Errno 2] No such file or directory: 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testSystem\\\\\\\\nonexistent_dir\\\\\\\\test_output.txt'\"}"
        },
        "execution_time": 0.013997793197631836,
        "is_functional_test": false
      },
      {
        "case_name": "Write to File with Long Path",
        "purpose": "Check if text_write_file can handle very long file paths correctly.",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_destination_path_this_is_an_extremely_long_file_name_that_exceeds_windows_max_path_length_limit_and_should_trigger_an_error_or_be_handled_properly.txt",
          "content": "Testing writing to a file with a very long path name."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Wrote content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_destination_path_this_is_an_extremely_long_file_name_that_exceeds_windows_max_path_length_limit_and_should_trigger_an_error_or_be_handled_properly.txt\"}"
        },
        "execution_time": 0.017994403839111328,
        "is_functional_test": false
      },
      {
        "case_name": "Write with Null or Empty File Path",
        "purpose": "Ensure that text_write_file raises an error when provided with an empty or null file path.",
        "args": {
          "file_path": "",
          "content": "This should not be written because the file path is invalid."
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"file_path must be a non-empty string.\"}"
        },
        "execution_time": 0.013000249862670898,
        "is_functional_test": false
      }
    ],
    "text_append_to_file": [
      {
        "case_name": "Append Text to Existing File",
        "purpose": "Verify that text can be successfully appended to an existing file without errors.",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_test_output.txt",
          "content": "\nAppended line via test."
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Appended content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\new_test_output.txt\"}"
        },
        "execution_time": 0.008001565933227539,
        "is_functional_test": true
      },
      {
        "case_name": "Create and Append to Nonexistent File",
        "purpose": "Ensure the tool creates a new file and appends content when the specified file does not exist.",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\auto_created_file.txt",
          "content": "Initial content"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Appended content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\auto_created_file.txt\"}"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": true
      },
      {
        "case_name": "Append Special Characters to File",
        "purpose": "Test appending special characters to ensure correct handling of non-alphanumeric input.",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special!@#%&()_output.txt",
          "content": "\nSpecial chars: !@#$%^&*()"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Appended content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special!@#%&()_output.txt\"}"
        },
        "execution_time": 0.00900125503540039,
        "is_functional_test": true
      },
      {
        "case_name": "Append Empty Content to File",
        "purpose": "Validate that empty content can be safely appended without causing errors or unintended behavior.",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_content_file.txt",
          "content": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"content must be a non-empty string.\"}"
        },
        "execution_time": 0.008001327514648438,
        "is_functional_test": true
      },
      {
        "case_name": "Append to Read-Only File",
        "purpose": "Check how the tool handles attempting to append to a read-only file.",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\readonly_test.txt",
          "content": "\nAdditional line"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Appended content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\readonly_dir\\\\readonly_test.txt\"}"
        },
        "execution_time": 0.006998538970947266,
        "is_functional_test": false
      },
      {
        "case_name": "Append with Null File Path",
        "purpose": "Test that an appropriate error is raised when file_path is null or empty.",
        "args": {
          "file_path": "",
          "content": "Some content"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"file_path must be a non-empty string.\"}"
        },
        "execution_time": 0.008000850677490234,
        "is_functional_test": false
      },
      {
        "case_name": "Append to Very Long File Path",
        "purpose": "Ensure the tool can handle very long file paths gracefully.",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_destination_path_this_is_an_extremely_long_file_name_that_exceeds_windows_max_path_length_limit_and_should_trigger_an_error_or_be_handled_properly.txt",
          "content": "\nLong path append test"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"Appended content to D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_destination_path_this_is_an_extremely_long_file_name_that_exceeds_windows_max_path_length_limit_and_should_trigger_an_error_or_be_handled_properly.txt\"}"
        },
        "execution_time": 0.005006074905395508,
        "is_functional_test": false
      },
      {
        "case_name": "Append to System Protected File",
        "purpose": "Attempt appending to a protected system file to verify proper error handling and security restrictions.",
        "args": {
          "file_path": "C:\\Windows\\system32\\drivers\\etc\\hosts",
          "content": "# Test comment added by MCP tool"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"[Errno 13] Permission denied: 'C:\\\\\\\\Windows\\\\\\\\system32\\\\\\\\drivers\\\\\\\\etc\\\\\\\\hosts'\"}"
        },
        "execution_time": 0.0099945068359375,
        "is_functional_test": false
      }
    ],
    "text_extract_regex": [
      {
        "case_name": "Basic Regex Match Extraction",
        "purpose": "验证text_extract_regex能够正确提取文本中符合正则表达式的第一个匹配项",
        "args": {
          "text": "Commit: a1b2c3d4",
          "pattern": "commit (\\w+)"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"No match found for pattern 'commit (\\\\w+)' in the provided text.\"}"
        },
        "execution_time": 0.007079362869262695,
        "is_functional_test": true
      },
      {
        "case_name": "No Match Found in Text",
        "purpose": "验证当文本中没有匹配正则表达式的内容时，工具是否抛出ValueError",
        "args": {
          "text": "No commit hash found here",
          "pattern": "commit (\\w+)"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"hash\"}"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Regular Expression Pattern",
        "purpose": "测试当提供的正则表达式模式无效时是否抛出ValueError",
        "args": {
          "text": "Some text",
          "pattern": "*invalid_regex"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"nothing to repeat at position 0\"}"
        },
        "execution_time": 0.011035442352294922,
        "is_functional_test": false
      },
      {
        "case_name": "Extract IP Address from Log Entry",
        "purpose": "验证工具能否从日志文本中正确提取IP地址",
        "args": {
          "text": "User login failed from IP 192.168.1.100 at 2023-01-01 10:00:00",
          "pattern": "\\b(?:\\d{1,3}\\.){3}\\d{1,3}\\b"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"no such group\"}"
        },
        "execution_time": 0.012129068374633789,
        "is_functional_test": true
      },
      {
        "case_name": "Extract Email Address from Text",
        "purpose": "验证工具能否从文本中正确提取电子邮件地址",
        "args": {
          "text": "Contact us at support@example.com for assistance",
          "pattern": "[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"no such group\"}"
        },
        "execution_time": 0.007997274398803711,
        "is_functional_test": true
      },
      {
        "case_name": "Extract Version Number from String",
        "purpose": "验证工具能否从字符串中提取语义化版本号",
        "args": {
          "text": "Application version is v2.4.6-release",
          "pattern": "v\\d+\\.\\d+\\.\\d+"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"no such group\"}"
        },
        "execution_time": 0.007000446319580078,
        "is_functional_test": true
      },
      {
        "case_name": "Special Characters in Regular Expression",
        "purpose": "验证工具能否处理包含特殊字符的正则表达式并正确提取内容",
        "args": {
          "text": "Error occurred at [ERROR] Stack overflow",
          "pattern": "\\$ERROR\\$ .+"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"No match found for pattern '\\\\$ERROR\\\\$ .+' in the provided text.\"}"
        },
        "execution_time": 0.006860494613647461,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Text Input",
        "purpose": "验证当文本输入为空时是否抛出ValueError",
        "args": {
          "text": "",
          "pattern": "test"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"text must be a non-empty string.\"}"
        },
        "execution_time": 0.006013631820678711,
        "is_functional_test": false
      },
      {
        "case_name": "Empty Pattern Input",
        "purpose": "验证当正则表达式为空时是否抛出ValueError",
        "args": {
          "text": "Some text",
          "pattern": ""
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"pattern must be a non-empty string.\"}"
        },
        "execution_time": 0.008001565933227539,
        "is_functional_test": false
      },
      {
        "case_name": "Extract from File Content",
        "purpose": "验证工具能否从指定文件中提取匹配的正则表达式内容",
        "args": {
          "text": "User: admin, Role: administrator, Status: active",
          "pattern": "User: (\\w+)"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"admin\"}"
        },
        "execution_time": 0.007307767868041992,
        "is_functional_test": true
      },
      {
        "case_name": "Extract with Unicode Characters",
        "purpose": "验证工具能否处理包含Unicode字符的文本并正确提取",
        "args": {
          "text": "用户名: 张三, ID: 12345",
          "pattern": "用户名: (\\w+)"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"\\u5f20\\u4e09\"}"
        },
        "execution_time": 0.007999181747436523,
        "is_functional_test": true
      },
      {
        "case_name": "Multiple Groups in Pattern",
        "purpose": "验证工具是否仅提取第一个匹配组",
        "args": {
          "text": "Name: John Doe, Age: 30",
          "pattern": "Name: (\\w+) (\\w+)"
        },
        "response": {
          "result": "{\"status\": \"success\", \"message\": \"John\"}"
        },
        "execution_time": 0.0050051212310791016,
        "is_functional_test": true
      },
      {
        "case_name": "Pattern with Case Insensitive Flag",
        "purpose": "验证工具是否支持正则表达式中的不区分大小写标志",
        "args": {
          "text": "HTTP/1.1 200 OK",
          "pattern": "(?i)http/\\d\\.\\d"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"no such group\"}"
        },
        "execution_time": 0.008011102676391602,
        "is_functional_test": true
      },
      {
        "case_name": "Pattern Matching Newline Characters",
        "purpose": "验证工具能否处理包含换行符的文本并正确匹配",
        "args": {
          "text": "Line 1\nLine 2\nLine 3",
          "pattern": "Line 2"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"no such group\"}"
        },
        "execution_time": 0.003995180130004883,
        "is_functional_test": true
      },
      {
        "case_name": "Boundary Test - Minimum Length Match",
        "purpose": "验证工具能否处理最短长度的匹配",
        "args": {
          "text": "a1b2",
          "pattern": "\\w\\d"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"no such group\"}"
        },
        "execution_time": 0.008002042770385742,
        "is_functional_test": true
      },
      {
        "case_name": "Boundary Test - Maximum Length Match",
        "purpose": "验证工具能否处理最长长度的匹配",
        "args": {
          "text": "abcdefghijklmnopqrstuvwxyz0123456789",
          "pattern": "\\w+"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"no such group\"}"
        },
        "execution_time": 0.005995035171508789,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Command Injection Attempt",
        "purpose": "验证工具是否对正则表达式中的潜在命令注入进行过滤或阻止",
        "args": {
          "text": "This is a test command",
          "pattern": ".*;.*"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"No match found for pattern '.*;.*' in the provided text.\"}"
        },
        "execution_time": 0.006999969482421875,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Path Traversal Attempt",
        "purpose": "验证工具是否对正则表达式中的路径穿越尝试进行阻止",
        "args": {
          "text": "File path: ../../etc/passwd",
          "pattern": "\\..\\/.*"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"no such group\"}"
        },
        "execution_time": 0.00799560546875,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 130
}