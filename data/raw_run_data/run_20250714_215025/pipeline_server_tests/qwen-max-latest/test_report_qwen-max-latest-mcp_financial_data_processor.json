{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "qwen-max-latest-mcp_financial_data_processor",
  "server_path": "workspace/pipeline-output-servers/qwen-max-latest/mcp_financial_data_processor/refined/server.py",
  "timestamp": "2025-07-14T21:51:45.890746",
  "tools": [
    {
      "name": "get_income_statements",
      "description": "\n    Fetches income statements for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n        report_period: The reporting period (e.g., 'annual', 'quarterly', 'ttm').\n        limit: The maximum number of results to return.\n\n    Returns:\n        A JSON-formatted string containing the income statement data.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_income_statements(stock_code=\"NVDA\", report_period=\"annual\", limit=10)\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          },
          "report_period": {
            "title": "Report Period",
            "type": "string"
          },
          "limit": {
            "title": "Limit",
            "type": "integer"
          }
        },
        "required": [
          "stock_code",
          "report_period",
          "limit"
        ],
        "title": "get_income_statementsArguments",
        "type": "object"
      }
    },
    {
      "name": "get_balance_sheets",
      "description": "\n    Retrieves balance sheets for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n        report_period: The reporting period (e.g., 'annual', 'quarterly', 'ttm').\n        limit: The maximum number of results to return.\n\n    Returns:\n        A JSON-formatted string containing the balance sheet data.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_balance_sheets(stock_code=\"NVDA\", report_period=\"annual\", limit=10)\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          },
          "report_period": {
            "title": "Report Period",
            "type": "string"
          },
          "limit": {
            "title": "Limit",
            "type": "integer"
          }
        },
        "required": [
          "stock_code",
          "report_period",
          "limit"
        ],
        "title": "get_balance_sheetsArguments",
        "type": "object"
      }
    },
    {
      "name": "get_cash_flows",
      "description": "\n    Extracts cash flow statements for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n        report_period: The reporting period (e.g., 'annual', 'quarterly', 'ttm').\n        limit: The maximum number of results to return.\n\n    Returns:\n        A JSON-formatted string containing the cash flow statement data.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_cash_flows(stock_code=\"NVDA\", report_period=\"annual\", limit=10)\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          },
          "report_period": {
            "title": "Report Period",
            "type": "string"
          },
          "limit": {
            "title": "Limit",
            "type": "integer"
          }
        },
        "required": [
          "stock_code",
          "report_period",
          "limit"
        ],
        "title": "get_cash_flowsArguments",
        "type": "object"
      }
    },
    {
      "name": "get_stock_prices",
      "description": "\n    Queries historical stock price data for a specified stock using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n        start_date: The start date of the historical data range (format: YYYY-MM-DD).\n        end_date: The end date of the historical data range (format: YYYY-MM-DD).\n\n    Returns:\n        A JSON-formatted string containing historical stock prices.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_stock_prices(stock_code=\"NVDA\", start_date=\"2023-01-01\", end_date=\"2023-12-31\")\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          },
          "start_date": {
            "title": "Start Date",
            "type": "string"
          },
          "end_date": {
            "title": "End Date",
            "type": "string"
          }
        },
        "required": [
          "stock_code",
          "start_date",
          "end_date"
        ],
        "title": "get_stock_pricesArguments",
        "type": "object"
      }
    },
    {
      "name": "get_market_news",
      "description": "\n    Fetches the latest financial news related to a company or market using the financialdatasets API.\n\n    Args:\n        company_name: The name of the company (e.g., 'NVIDIA').\n\n    Returns:\n        A JSON-formatted string containing the latest financial news articles.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_market_news(company_name=\"NVIDIA\")\n    ",
      "args_schema": {
        "properties": {
          "company_name": {
            "title": "Company Name",
            "type": "string"
          }
        },
        "required": [
          "company_name"
        ],
        "title": "get_market_newsArguments",
        "type": "object"
      }
    },
    {
      "name": "get_company_profile",
      "description": "\n    Retrieves a company profile including industry and location information using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n\n    Returns:\n        A JSON-formatted string containing the company's profile.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_company_profile(stock_code=\"NVDA\")\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          }
        },
        "required": [
          "stock_code"
        ],
        "title": "get_company_profileArguments",
        "type": "object"
      }
    },
    {
      "name": "get_analyst_estimates",
      "description": "\n    Gets analyst estimates such as target prices and earnings forecasts for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n\n    Returns:\n        A JSON-formatted string containing analyst estimates.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_analyst_estimates(stock_code=\"NVDA\")\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          }
        },
        "required": [
          "stock_code"
        ],
        "title": "get_analyst_estimatesArguments",
        "type": "object"
      }
    },
    {
      "name": "get_dividend_history",
      "description": "\n    Retrieves dividend history records for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n\n    Returns:\n        A JSON-formatted string containing the dividend history.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_dividend_history(stock_code=\"NVDA\")\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          }
        },
        "required": [
          "stock_code"
        ],
        "title": "get_dividend_historyArguments",
        "type": "object"
      }
    },
    {
      "name": "get_splits_history",
      "description": "\n    Queries stock split history for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n\n    Returns:\n        A JSON-formatted string containing the stock split history.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_splits_history(stock_code=\"NVDA\")\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          }
        },
        "required": [
          "stock_code"
        ],
        "title": "get_splits_historyArguments",
        "type": "object"
      }
    },
    {
      "name": "get_earnings_history",
      "description": "\n    Fetches historical earnings data, such as EPS, for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n\n    Returns:\n        A JSON-formatted string containing historical earnings data.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_earnings_history(stock_code=\"NVDA\")\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          }
        },
        "required": [
          "stock_code"
        ],
        "title": "get_earnings_historyArguments",
        "type": "object"
      }
    },
    {
      "name": "get_financial_ratios",
      "description": "\n    Gets financial ratios such as P/E and debt-to-equity for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n\n    Returns:\n        A JSON-formatted string containing financial ratios.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_financial_ratios(stock_code=\"NVDA\")\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          }
        },
        "required": [
          "stock_code"
        ],
        "title": "get_financial_ratiosArguments",
        "type": "object"
      }
    },
    {
      "name": "get_ownership_data",
      "description": "\n    Retrieves ownership structure data, such as institutional holding percentages, for a specified company using the financialdatasets API.\n\n    Args:\n        stock_code: The stock code of the company (e.g., 'NVDA').\n\n    Returns:\n        A JSON-formatted string containing ownership structure data.\n\n    Raises:\n        ValueError: If input parameters are invalid or API request fails.\n\n    Example:\n        get_ownership_data(stock_code=\"NVDA\")\n    ",
      "args_schema": {
        "properties": {
          "stock_code": {
            "title": "Stock Code",
            "type": "string"
          }
        },
        "required": [
          "stock_code"
        ],
        "title": "get_ownership_dataArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "get_company_profile": [
      {
        "case_name": "Basic Company Profile Retrieval",
        "purpose": "验证工具能够成功获取一个有效股票代码的公司简介信息。",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_company_profile: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.446042776107788,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "测试当传入格式错误的股票代码（如空字符串）时，工具是否能正确抛出异常。",
        "args": {
          "stock_code": ""
        },
        "response": {
          "error": "ToolException: Error executing tool get_company_profile: Unexpected error fetching company profile: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.003998994827270508,
        "is_functional_test": false
      },
      {
        "case_name": "Nonexistent Stock Code",
        "purpose": "验证工具在提供不存在的股票代码时是否能优雅处理错误。",
        "args": {
          "stock_code": "XYZABC"
        },
        "response": {
          "error": "ToolException: Error executing tool get_company_profile: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.8030657768249512,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Stock Code",
        "purpose": "测试包含特殊字符的股票代码是否被正确校验并返回错误。",
        "args": {
          "stock_code": "NVDA@#"
        },
        "response": {
          "error": "ToolException: Error executing tool get_company_profile: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.8488233089447021,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Maximum Length Stock Code",
        "purpose": "测试最大允许长度的股票代码是否能正常工作或正确拒绝。",
        "args": {
          "stock_code": "ABCDE"
        },
        "response": {
          "error": "ToolException: Error executing tool get_company_profile: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.38080286979675293,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Injection Attempt in Stock Code",
        "purpose": "验证工具是否对可能的注入攻击（如SQL注入、命令注入）有防御机制。",
        "args": {
          "stock_code": "NVDA; DROP TABLE companies"
        },
        "response": {
          "error": "ToolException: Error executing tool get_company_profile: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3789834976196289,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - API Server Down",
        "purpose": "模拟API服务不可用情况下的错误处理行为。",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_company_profile: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.38103532791137695,
        "is_functional_test": false
      },
      {
        "case_name": "Functional Test with Sample Stock Code from Documentation",
        "purpose": "使用文档示例中的股票代码进行功能验证，确保与文档一致。",
        "args": {
          "stock_code": "AAPL"
        },
        "response": {
          "error": "ToolException: Error executing tool get_company_profile: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3875608444213867,
        "is_functional_test": true
      }
    ],
    "get_income_statements": [
      {
        "case_name": "Basic Income Statement Retrieval",
        "purpose": "验证工具能够成功获取一个有效股票代码的年度收入报表数据。",
        "args": {
          "stock_code": "NVDA",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "result": "{\"income_statements\": [{\"ticker\": \"NVDA\", \"report_period\": \"2025-01-26\", \"fiscal_period\": \"2025-FY\", \"period\": \"annual\", \"currency\": \"USD\", \"revenue\": 130497000000.0, \"cost_of_revenue\": 32639000000.0, \"gross_profit\": 97858000000.0, \"operating_expense\": 16405000000.0, \"selling_general_and_administrative_expenses\": 3491000000.0, \"research_and_development\": 12914000000.0, \"operating_income\": 81453000000.0, \"interest_expense\": 247000000.0, \"ebit\": 84273000000.0, \"income_tax_expense\": 11146000000.0, \"net_income_discontinued_operations\": 0.0, \"net_income_non_controlling_interests\": 0.0, \"net_income\": 72880000000.0, \"net_income_common_stock\": 72880000000.0, \"preferred_dividends_impact\": 0.0, \"consolidated_income\": 72880000000.0, \"earnings_per_share\": 2.97, \"earnings_per_share_diluted\": 2.94, \"dividends_per_common_share\": 0.034, \"weighted_average_shares\": 24555000000.0, \"weighted_average_shares_diluted\": 24804000000.0}, {\"ticker\": \"NVDA\", \"report_period\": \"2024-01-28\", \"fiscal_period\": \"2024-FY\", \"period\": \"annual\", \"currency\": \"USD\", \"revenue\": 60922000000.0, \"cost_of_revenue\": 16621000000.0, \"gross_profit\": 44301000000.0, \"operating_expense\": 11329000000.0, \"selling_general_and_administrative_expenses\": 2654000000.0, \"research_and_development\": 8675000000.0, \"operating_income\": 32972000000.0, \"interest_expense\": 257000000.0, \"ebit\": 34075000000.0, \"income_tax_expense\": 4058000000.0, ...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计8956字符，剩余7556字符"
        },
        "execution_time": 1.844233751296997,
        "is_functional_test": true
      },
      {
        "case_name": "Functional Test with Quarterly Report Period",
        "purpose": "验证工具在指定季度报告周期时是否能正常返回结果。",
        "args": {
          "stock_code": "AAPL",
          "report_period": "quarterly",
          "limit": 5
        },
        "response": {
          "result": "{\"income_statements\": [{\"ticker\": \"AAPL\", \"report_period\": \"2025-03-29\", \"fiscal_period\": \"2025-Q2\", \"period\": \"quarterly\", \"currency\": \"USD\", \"revenue\": 95359000000.0, \"cost_of_revenue\": 50492000000.0, \"gross_profit\": 44867000000.0, \"operating_expense\": 15278000000.0, \"selling_general_and_administrative_expenses\": 6728000000.0, \"research_and_development\": 8550000000.0, \"operating_income\": 29589000000.0, \"interest_expense\": 0.0, \"ebit\": 29310000000.0, \"income_tax_expense\": 4530000000.0, \"net_income_discontinued_operations\": 0.0, \"net_income_non_controlling_interests\": 0.0, \"net_income\": 24780000000.0, \"net_income_common_stock\": 24780000000.0, \"preferred_dividends_impact\": 0.0, \"consolidated_income\": 24780000000.0, \"earnings_per_share\": 1.65, \"earnings_per_share_diluted\": 1.65, \"dividends_per_common_share\": 0.25, \"weighted_average_shares\": 14994082000.0, \"weighted_average_shares_diluted\": 15056133000.0}, {\"ticker\": \"AAPL\", \"report_period\": \"2024-12-28\", \"fiscal_period\": \"2025-Q1\", \"period\": \"quarterly\", \"currency\": \"USD\", \"revenue\": 124300000000.0, \"cost_of_revenue\": 66025000000.0, \"gross_profit\": 58275000000.0, \"operating_expense\": 15443000000.0, \"selling_general_and_administrative_expenses\": 7175000000.0, \"research_and_development\": 8268000000.0, \"operating_income\": 42832000000.0, \"interest_expense\": 0.0, \"ebit\": 42584000000.0, \"income_tax_expense\": 6254000000.0, \"net_income_d...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计4492字符，剩余3092字符"
        },
        "execution_time": 1.6022207736968994,
        "is_functional_test": true
      },
      {
        "case_name": "Functional Test with TTM Report Period",
        "purpose": "验证工具在指定TTM（Trailing Twelve Months）周期时是否能正常返回结果。",
        "args": {
          "stock_code": "GOOG",
          "report_period": "ttm",
          "limit": 1
        },
        "response": {
          "result": "{\"income_statements\": [{\"ticker\": \"GOOGL\", \"report_period\": \"2025-03-31\", \"fiscal_period\": \"2025-Q1\", \"period\": \"ttm\", \"currency\": \"USD\", \"revenue\": 359713000000.0, \"cost_of_revenue\": 148955000000.0, \"gross_profit\": 210758000000.0, \"operating_expense\": 93234000000.0, \"selling_general_and_administrative_expenses\": 42255000000.0, \"research_and_development\": 50979000000.0, \"operating_income\": 117524000000.0, \"interest_expense\": 208000000.0, \"ebit\": 133497000000.0, \"income_tax_expense\": 22293000000.0, \"net_income_discontinued_operations\": 0.0, \"net_income_non_controlling_interests\": 0.0, \"net_income\": 110996000000.0, \"net_income_common_stock\": 110996000000.0, \"preferred_dividends_impact\": 0.0, \"consolidated_income\": 110996000000.0, \"earnings_per_share\": 9.06, \"earnings_per_share_diluted\": 8.96, \"dividends_per_common_share\": 0.8, \"weighted_average_shares\": 12190000000.0, \"weighted_average_shares_diluted\": null}]}"
        },
        "execution_time": 1.2008471488952637,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - SQL Injection Attempt in Stock Code",
        "purpose": "验证工具是否对SQL注入攻击有防御机制。",
        "args": {
          "stock_code": "NVDA; DROP TABLE income_statements",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "error": "ToolException: Error executing tool get_income_statements: HTTP error occurred: 400 - {\"error\":\"Invalid TICKER\",\"message\":\"Please provide a valid TICKER.\"}"
        },
        "execution_time": 0.7815370559692383,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "测试当传入格式错误的股票代码（如空字符串）时，工具是否能正确抛出异常。",
        "args": {
          "stock_code": "",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "error": "ToolException: Error executing tool get_income_statements: Unexpected error fetching income statements: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.0030002593994140625,
        "is_functional_test": false
      },
      {
        "case_name": "Nonexistent Stock Code",
        "purpose": "验证工具在提供不存在的股票代码时是否能优雅处理错误。",
        "args": {
          "stock_code": "XYZABC",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "error": "ToolException: Error executing tool get_income_statements: HTTP error occurred: 400 - {\"error\":\"Invalid TICKER\",\"message\":\"Please provide a valid TICKER.\"}"
        },
        "execution_time": 1.158541202545166,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Maximum Limit Value",
        "purpose": "测试最大允许限制值是否会正确返回相应数量的结果。",
        "args": {
          "stock_code": "NVDA",
          "report_period": "annual",
          "limit": 100
        },
        "response": {
          "result": "{\"income_statements\": [{\"ticker\": \"NVDA\", \"report_period\": \"2025-01-26\", \"fiscal_period\": \"2025-FY\", \"period\": \"annual\", \"currency\": \"USD\", \"revenue\": 130497000000.0, \"cost_of_revenue\": 32639000000.0, \"gross_profit\": 97858000000.0, \"operating_expense\": 16405000000.0, \"selling_general_and_administrative_expenses\": 3491000000.0, \"research_and_development\": 12914000000.0, \"operating_income\": 81453000000.0, \"interest_expense\": 247000000.0, \"ebit\": 84273000000.0, \"income_tax_expense\": 11146000000.0, \"net_income_discontinued_operations\": 0.0, \"net_income_non_controlling_interests\": 0.0, \"net_income\": 72880000000.0, \"net_income_common_stock\": 72880000000.0, \"preferred_dividends_impact\": 0.0, \"consolidated_income\": 72880000000.0, \"earnings_per_share\": 2.97, \"earnings_per_share_diluted\": 2.94, \"dividends_per_common_share\": 0.034, \"weighted_average_shares\": 24555000000.0, \"weighted_average_shares_diluted\": 24804000000.0}, {\"ticker\": \"NVDA\", \"report_period\": \"2024-01-28\", \"fiscal_period\": \"2024-FY\", \"period\": \"annual\", \"currency\": \"USD\", \"revenue\": 60922000000.0, \"cost_of_revenue\": 16621000000.0, \"gross_profit\": 44301000000.0, \"operating_expense\": 11329000000.0, \"selling_general_and_administrative_expenses\": 2654000000.0, \"research_and_development\": 8675000000.0, \"operating_income\": 32972000000.0, \"interest_expense\": 257000000.0, \"ebit\": 34075000000.0, \"income_tax_expense\": 4058000000.0, ...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计26407字符，剩余25007字符"
        },
        "execution_time": 1.0461301803588867,
        "is_functional_test": true
      },
      {
        "case_name": "Error Handling - API Server Down",
        "purpose": "模拟API服务不可用情况下的错误处理行为。",
        "args": {
          "stock_code": "NVDA",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "result": "{\"income_statements\": [{\"ticker\": \"NVDA\", \"report_period\": \"2025-01-26\", \"fiscal_period\": \"2025-FY\", \"period\": \"annual\", \"currency\": \"USD\", \"revenue\": 130497000000.0, \"cost_of_revenue\": 32639000000.0, \"gross_profit\": 97858000000.0, \"operating_expense\": 16405000000.0, \"selling_general_and_administrative_expenses\": 3491000000.0, \"research_and_development\": 12914000000.0, \"operating_income\": 81453000000.0, \"interest_expense\": 247000000.0, \"ebit\": 84273000000.0, \"income_tax_expense\": 11146000000.0, \"net_income_discontinued_operations\": 0.0, \"net_income_non_controlling_interests\": 0.0, \"net_income\": 72880000000.0, \"net_income_common_stock\": 72880000000.0, \"preferred_dividends_impact\": 0.0, \"consolidated_income\": 72880000000.0, \"earnings_per_share\": 2.97, \"earnings_per_share_diluted\": 2.94, \"dividends_per_common_share\": 0.034, \"weighted_average_shares\": 24555000000.0, \"weighted_average_shares_diluted\": 24804000000.0}, {\"ticker\": \"NVDA\", \"report_period\": \"2024-01-28\", \"fiscal_period\": \"2024-FY\", \"period\": \"annual\", \"currency\": \"USD\", \"revenue\": 60922000000.0, \"cost_of_revenue\": 16621000000.0, \"gross_profit\": 44301000000.0, \"operating_expense\": 11329000000.0, \"selling_general_and_administrative_expenses\": 2654000000.0, \"research_and_development\": 8675000000.0, \"operating_income\": 32972000000.0, \"interest_expense\": 257000000.0, \"ebit\": 34075000000.0, \"income_tax_expense\": 4058000000.0, ...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计8956字符，剩余7556字符"
        },
        "execution_time": 0.7731313705444336,
        "is_functional_test": false
      }
    ],
    "get_balance_sheets": [
      {
        "case_name": "Basic Balance Sheet Retrieval",
        "purpose": "验证工具能够成功获取一个有效股票代码的资产负债表数据。",
        "args": {
          "stock_code": "NVDA",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "result": "{\"balance_sheets\": [{\"ticker\": \"NVDA\", \"report_period\": \"2025-01-26\", \"fiscal_period\": \"2025-FY\", \"period\": \"annual\", \"currency\": \"USD\", \"total_assets\": 111601000000.0, \"current_assets\": 80126000000.0, \"cash_and_equivalents\": 8589000000.0, \"inventory\": 10080000000.0, \"current_investments\": 34621000000.0, \"trade_and_non_trade_receivables\": 23065000000.0, \"non_current_assets\": 31475000000.0, \"property_plant_and_equipment\": 8076000000.0, \"goodwill_and_intangible_assets\": 5995000000.0, \"investments\": 34621000000.0, \"non_current_investments\": 0.0, \"tax_assets\": 10979000000.0, \"total_liabilities\": 32274000000.0, \"current_liabilities\": 18047000000.0, \"current_debt\": 0.0, \"trade_and_non_trade_payables\": 6310000000.0, \"deferred_revenue\": 0.0, \"deposit_liabilities\": 0.0, \"non_current_liabilities\": 14227000000.0, \"non_current_debt\": 9982000000.0, \"tax_liabilities\": 0.0, \"shareholders_equity\": 79327000000.0, \"retained_earnings\": 68038000000.0, \"accumulated_other_comprehensive_income\": 28000000.0, \"outstanding_shares\": 24490000000.0, \"total_debt\": 9982000000.0}, {\"ticker\": \"NVDA\", \"report_period\": \"2024-01-28\", \"fiscal_period\": \"2024-FY\", \"period\": \"annual\", \"currency\": \"USD\", \"total_assets\": 65728000000.0, \"current_assets\": 44345000000.0, \"cash_and_equivalents\": 7280000000.0, \"inventory\": 5282000000.0, \"current_investments\": 18704000000.0, \"trade_and_non_trade_receivables\": 9999000000.0, \"...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计10395字符，剩余8995字符"
        },
        "execution_time": 1.848963975906372,
        "is_functional_test": true
      },
      {
        "case_name": "Functional Test with Quarterly Report Period",
        "purpose": "验证工具在指定季度报告周期时是否能正常返回结果。",
        "args": {
          "stock_code": "AAPL",
          "report_period": "quarterly",
          "limit": 5
        },
        "response": {
          "result": "{\"balance_sheets\": [{\"ticker\": \"AAPL\", \"report_period\": \"2025-03-29\", \"fiscal_period\": \"2025-Q2\", \"period\": \"quarterly\", \"currency\": \"USD\", \"total_assets\": 331233000000.0, \"current_assets\": 118674000000.0, \"cash_and_equivalents\": 28162000000.0, \"inventory\": 6269000000.0, \"current_investments\": 20336000000.0, \"trade_and_non_trade_receivables\": 49798000000.0, \"non_current_assets\": 212559000000.0, \"property_plant_and_equipment\": 46876000000.0, \"goodwill_and_intangible_assets\": 0.0, \"investments\": 104760000000.0, \"non_current_investments\": 84424000000.0, \"tax_assets\": 0.0, \"total_liabilities\": 264437000000.0, \"current_liabilities\": 144571000000.0, \"current_debt\": 19620000000.0, \"trade_and_non_trade_payables\": 54126000000.0, \"deferred_revenue\": 8976000000.0, \"deposit_liabilities\": 0.0, \"non_current_liabilities\": 119866000000.0, \"non_current_debt\": 78566000000.0, \"tax_liabilities\": 0.0, \"shareholders_equity\": 66796000000.0, \"retained_earnings\": -15552000000.0, \"accumulated_other_comprehensive_income\": -6363000000.0, \"outstanding_shares\": 15022073000.0, \"total_debt\": 98186000000.0}, {\"ticker\": \"AAPL\", \"report_period\": \"2024-12-28\", \"fiscal_period\": \"2025-Q1\", \"period\": \"quarterly\", \"currency\": \"USD\", \"total_assets\": 344085000000.0, \"current_assets\": 133240000000.0, \"cash_and_equivalents\": 30299000000.0, \"inventory\": 6911000000.0, \"current_investments\": 23476000000.0, \"trade_and_non_tr...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计5385字符，剩余3985字符"
        },
        "execution_time": 1.1731233596801758,
        "is_functional_test": true
      },
      {
        "case_name": "Functional Test with TTM Report Period",
        "purpose": "验证工具在指定TTM（Trailing Twelve Months）周期时是否能正常返回结果。",
        "args": {
          "stock_code": "GOOG",
          "report_period": "ttm",
          "limit": 1
        },
        "response": {
          "result": "{\"balance_sheets\": [{\"ticker\": \"GOOGL\", \"report_period\": \"2025-03-31\", \"fiscal_period\": \"2025-Q1\", \"period\": \"ttm\", \"currency\": \"USD\", \"total_assets\": 475374000000.0, \"current_assets\": 162052000000.0, \"cash_and_equivalents\": 23264000000.0, \"inventory\": 0.0, \"current_investments\": 72064000000.0, \"trade_and_non_trade_receivables\": 51000000000.0, \"non_current_assets\": 313322000000.0, \"property_plant_and_equipment\": 198784000000.0, \"goodwill_and_intangible_assets\": 32173000000.0, \"investments\": 123093000000.0, \"non_current_investments\": 51029000000.0, \"tax_assets\": 18386000000.0, \"total_liabilities\": 130107000000.0, \"current_liabilities\": 91654000000.0, \"current_debt\": 0.0, \"trade_and_non_trade_payables\": 8497000000.0, \"deferred_revenue\": 14873000000.0, \"deposit_liabilities\": 0.0, \"non_current_liabilities\": 38453000000.0, \"non_current_debt\": 22564000000.0, \"tax_liabilities\": 9773000000.0, \"shareholders_equity\": 345267000000.0, \"retained_earnings\": 262628000000.0, \"accumulated_other_comprehensive_income\": -4086000000.0, \"outstanding_shares\": 12190000000.0, \"total_debt\": 22564000000.0}]}"
        },
        "execution_time": 0.7560286521911621,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - SQL Injection Attempt in Stock Code",
        "purpose": "验证工具是否对SQL注入攻击有防御机制。",
        "args": {
          "stock_code": "NVDA; DROP TABLE balance_sheets",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "error": "ToolException: Error executing tool get_balance_sheets: HTTP error occurred: 400 - {\"error\":\"Invalid TICKER\",\"message\":\"Please provide a valid TICKER.\"}"
        },
        "execution_time": 1.1686677932739258,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "测试当传入格式错误的股票代码（如空字符串）时，工具是否能正确抛出异常。",
        "args": {
          "stock_code": "",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "error": "ToolException: Error executing tool get_balance_sheets: Unexpected error fetching balance sheets: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.004001140594482422,
        "is_functional_test": false
      },
      {
        "case_name": "Nonexistent Stock Code",
        "purpose": "验证工具在提供不存在的股票代码时是否能优雅处理错误。",
        "args": {
          "stock_code": "XYZABC",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "error": "ToolException: Error executing tool get_balance_sheets: HTTP error occurred: 400 - {\"error\":\"Invalid TICKER\",\"message\":\"Please provide a valid TICKER.\"}"
        },
        "execution_time": 1.1591465473175049,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Maximum Limit Value",
        "purpose": "测试最大允许限制值是否会正确返回相应数量的结果。",
        "args": {
          "stock_code": "NVDA",
          "report_period": "annual",
          "limit": 100
        },
        "response": {
          "result": "{\"balance_sheets\": [{\"ticker\": \"NVDA\", \"report_period\": \"2025-01-26\", \"fiscal_period\": \"2025-FY\", \"period\": \"annual\", \"currency\": \"USD\", \"total_assets\": 111601000000.0, \"current_assets\": 80126000000.0, \"cash_and_equivalents\": 8589000000.0, \"inventory\": 10080000000.0, \"current_investments\": 34621000000.0, \"trade_and_non_trade_receivables\": 23065000000.0, \"non_current_assets\": 31475000000.0, \"property_plant_and_equipment\": 8076000000.0, \"goodwill_and_intangible_assets\": 5995000000.0, \"investments\": 34621000000.0, \"non_current_investments\": 0.0, \"tax_assets\": 10979000000.0, \"total_liabilities\": 32274000000.0, \"current_liabilities\": 18047000000.0, \"current_debt\": 0.0, \"trade_and_non_trade_payables\": 6310000000.0, \"deferred_revenue\": 0.0, \"deposit_liabilities\": 0.0, \"non_current_liabilities\": 14227000000.0, \"non_current_debt\": 9982000000.0, \"tax_liabilities\": 0.0, \"shareholders_equity\": 79327000000.0, \"retained_earnings\": 68038000000.0, \"accumulated_other_comprehensive_income\": 28000000.0, \"outstanding_shares\": 24490000000.0, \"total_debt\": 9982000000.0}, {\"ticker\": \"NVDA\", \"report_period\": \"2024-01-28\", \"fiscal_period\": \"2024-FY\", \"period\": \"annual\", \"currency\": \"USD\", \"total_assets\": 65728000000.0, \"current_assets\": 44345000000.0, \"cash_and_equivalents\": 7280000000.0, \"inventory\": 5282000000.0, \"current_investments\": 18704000000.0, \"trade_and_non_trade_receivables\": 9999000000.0, \"...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计30271字符，剩余28871字符"
        },
        "execution_time": 0.9688830375671387,
        "is_functional_test": true
      },
      {
        "case_name": "Error Handling - API Server Down",
        "purpose": "模拟API服务不可用情况下的错误处理行为。",
        "args": {
          "stock_code": "NVDA",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "result": "{\"balance_sheets\": [{\"ticker\": \"NVDA\", \"report_period\": \"2025-01-26\", \"fiscal_period\": \"2025-FY\", \"period\": \"annual\", \"currency\": \"USD\", \"total_assets\": 111601000000.0, \"current_assets\": 80126000000.0, \"cash_and_equivalents\": 8589000000.0, \"inventory\": 10080000000.0, \"current_investments\": 34621000000.0, \"trade_and_non_trade_receivables\": 23065000000.0, \"non_current_assets\": 31475000000.0, \"property_plant_and_equipment\": 8076000000.0, \"goodwill_and_intangible_assets\": 5995000000.0, \"investments\": 34621000000.0, \"non_current_investments\": 0.0, \"tax_assets\": 10979000000.0, \"total_liabilities\": 32274000000.0, \"current_liabilities\": 18047000000.0, \"current_debt\": 0.0, \"trade_and_non_trade_payables\": 6310000000.0, \"deferred_revenue\": 0.0, \"deposit_liabilities\": 0.0, \"non_current_liabilities\": 14227000000.0, \"non_current_debt\": 9982000000.0, \"tax_liabilities\": 0.0, \"shareholders_equity\": 79327000000.0, \"retained_earnings\": 68038000000.0, \"accumulated_other_comprehensive_income\": 28000000.0, \"outstanding_shares\": 24490000000.0, \"total_debt\": 9982000000.0}, {\"ticker\": \"NVDA\", \"report_period\": \"2024-01-28\", \"fiscal_period\": \"2024-FY\", \"period\": \"annual\", \"currency\": \"USD\", \"total_assets\": 65728000000.0, \"current_assets\": 44345000000.0, \"cash_and_equivalents\": 7280000000.0, \"inventory\": 5282000000.0, \"current_investments\": 18704000000.0, \"trade_and_non_trade_receivables\": 9999000000.0, \"...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计10395字符，剩余8995字符"
        },
        "execution_time": 0.7613260746002197,
        "is_functional_test": false
      }
    ],
    "get_cash_flows": [
      {
        "case_name": "Basic Cash Flow Retrieval",
        "purpose": "验证工具能够成功获取一个有效股票代码的年度现金流量表数据。",
        "args": {
          "stock_code": "NVDA",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "error": "ToolException: Error executing tool get_cash_flows: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.4486443996429443,
        "is_functional_test": true
      },
      {
        "case_name": "Functional Test with Quarterly Report Period",
        "purpose": "验证工具在指定季度报告周期时是否能正常返回结果。",
        "args": {
          "stock_code": "AAPL",
          "report_period": "quarterly",
          "limit": 5
        },
        "response": {
          "error": "ToolException: Error executing tool get_cash_flows: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7829334735870361,
        "is_functional_test": true
      },
      {
        "case_name": "Functional Test with TTM Report Period",
        "purpose": "验证工具在指定TTM（Trailing Twelve Months）周期时是否能正常返回结果。",
        "args": {
          "stock_code": "GOOG",
          "report_period": "ttm",
          "limit": 1
        },
        "response": {
          "error": "ToolException: Error executing tool get_cash_flows: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.8075358867645264,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - SQL Injection Attempt in Stock Code",
        "purpose": "验证工具是否对SQL注入攻击有防御机制。",
        "args": {
          "stock_code": "NVDA; DROP TABLE cash_flows",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "error": "ToolException: Error executing tool get_cash_flows: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.792952299118042,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "测试当传入格式错误的股票代码（如空字符串）时，工具是否能正确抛出异常。",
        "args": {
          "stock_code": "",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "error": "ToolException: Error executing tool get_cash_flows: Unexpected error fetching cash flows: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": false
      },
      {
        "case_name": "Nonexistent Stock Code",
        "purpose": "验证工具在提供不存在的股票代码时是否能优雅处理错误。",
        "args": {
          "stock_code": "XYZABC",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "error": "ToolException: Error executing tool get_cash_flows: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.37542080879211426,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Maximum Limit Value",
        "purpose": "测试最大允许限制值是否会正确返回相应数量的结果。",
        "args": {
          "stock_code": "NVDA",
          "report_period": "annual",
          "limit": 100
        },
        "response": {
          "error": "ToolException: Error executing tool get_cash_flows: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.37103962898254395,
        "is_functional_test": true
      },
      {
        "case_name": "Error Handling - API Server Down",
        "purpose": "模拟API服务不可用情况下的错误处理行为。",
        "args": {
          "stock_code": "NVDA",
          "report_period": "annual",
          "limit": 10
        },
        "response": {
          "error": "ToolException: Error executing tool get_cash_flows: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3683433532714844,
        "is_functional_test": false
      }
    ],
    "get_financial_ratios": [
      {
        "case_name": "Basic Financial Ratios Retrieval",
        "purpose": "验证工具能够成功获取一个有效股票代码的财务比率信息。",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_financial_ratios: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.3432528972625732,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - SQL Injection Attempt in Stock Code",
        "purpose": "验证工具是否对SQL注入攻击有防御机制。",
        "args": {
          "stock_code": "NVDA; DROP TABLE financial_ratios"
        },
        "response": {
          "error": "ToolException: Error executing tool get_financial_ratios: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3668699264526367,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "测试当传入格式错误的股票代码（如空字符串）时，工具是否能正确抛出异常。",
        "args": {
          "stock_code": ""
        },
        "response": {
          "error": "ToolException: Error executing tool get_financial_ratios: Unexpected error fetching financial ratios: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.0029990673065185547,
        "is_functional_test": false
      },
      {
        "case_name": "Nonexistent Stock Code",
        "purpose": "验证工具在提供不存在的股票代码时是否能优雅处理错误。",
        "args": {
          "stock_code": "XYZABC"
        },
        "response": {
          "error": "ToolException: Error executing tool get_financial_ratios: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.4217681884765625,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Stock Code",
        "purpose": "测试包含特殊字符的股票代码是否被正确校验并返回错误。",
        "args": {
          "stock_code": "NVDA@#"
        },
        "response": {
          "error": "ToolException: Error executing tool get_financial_ratios: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3713395595550537,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Maximum Length Stock Code",
        "purpose": "测试最大允许长度的股票代码是否能正常工作或正确拒绝。",
        "args": {
          "stock_code": "ABCDE"
        },
        "response": {
          "error": "ToolException: Error executing tool get_financial_ratios: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7809195518493652,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - API Server Down",
        "purpose": "模拟API服务不可用情况下的错误处理行为。",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_financial_ratios: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.37017083168029785,
        "is_functional_test": false
      },
      {
        "case_name": "Functional Test with Sample Stock Code from Documentation",
        "purpose": "使用文档示例中的股票代码进行功能验证，确保与文档一致。",
        "args": {
          "stock_code": "AAPL"
        },
        "response": {
          "error": "ToolException: Error executing tool get_financial_ratios: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7750537395477295,
        "is_functional_test": true
      }
    ],
    "get_earnings_history": [
      {
        "case_name": "Basic Earnings History Retrieval",
        "purpose": "验证工具能够成功获取一个有效股票代码的历史盈利数据。",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_earnings_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.4952378273010254,
        "is_functional_test": true
      },
      {
        "case_name": "Functional Test with Sample Stock Code from Documentation",
        "purpose": "使用文档示例中的股票代码进行功能验证，确保与文档一致。",
        "args": {
          "stock_code": "AAPL"
        },
        "response": {
          "error": "ToolException: Error executing tool get_earnings_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7731714248657227,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "测试当传入格式错误的股票代码（如空字符串）时，工具是否能正确抛出异常。",
        "args": {
          "stock_code": ""
        },
        "response": {
          "error": "ToolException: Error executing tool get_earnings_history: Unexpected error fetching earnings history: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": false
      },
      {
        "case_name": "Nonexistent Stock Code",
        "purpose": "验证工具在提供不存在的股票代码时是否能优雅处理错误。",
        "args": {
          "stock_code": "XYZABC"
        },
        "response": {
          "error": "ToolException: Error executing tool get_earnings_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.783674955368042,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Stock Code",
        "purpose": "测试包含特殊字符的股票代码是否被正确校验并返回错误。",
        "args": {
          "stock_code": "NVDA@#"
        },
        "response": {
          "error": "ToolException: Error executing tool get_earnings_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.0822973251342773,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - SQL Injection Attempt in Stock Code",
        "purpose": "验证工具是否对SQL注入攻击有防御机制。",
        "args": {
          "stock_code": "NVDA; DROP TABLE earnings"
        },
        "response": {
          "error": "ToolException: Error executing tool get_earnings_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3690919876098633,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Maximum Length Stock Code",
        "purpose": "测试最大允许长度的股票代码是否能正常工作或正确拒绝。",
        "args": {
          "stock_code": "ABCDE"
        },
        "response": {
          "error": "ToolException: Error executing tool get_earnings_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.368114709854126,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - API Server Down",
        "purpose": "模拟API服务不可用情况下的错误处理行为。",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_earnings_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.36887240409851074,
        "is_functional_test": false
      }
    ],
    "get_analyst_estimates": [
      {
        "case_name": "Basic Analyst Estimates Retrieval",
        "purpose": "验证工具能够成功获取一个有效股票代码的分析师预测数据。",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_analyst_estimates: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.362130880355835,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "测试当传入格式错误的股票代码（如空字符串）时，工具是否能正确抛出异常。",
        "args": {
          "stock_code": ""
        },
        "response": {
          "error": "ToolException: Error executing tool get_analyst_estimates: Unexpected error fetching analyst estimates: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.004999637603759766,
        "is_functional_test": false
      },
      {
        "case_name": "Nonexistent Stock Code",
        "purpose": "验证工具在提供不存在的股票代码时是否能优雅处理错误。",
        "args": {
          "stock_code": "XYZABC"
        },
        "response": {
          "error": "ToolException: Error executing tool get_analyst_estimates: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7970187664031982,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Stock Code",
        "purpose": "测试包含特殊字符的股票代码是否被正确校验并返回错误。",
        "args": {
          "stock_code": "NVDA@#"
        },
        "response": {
          "error": "ToolException: Error executing tool get_analyst_estimates: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7896509170532227,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Injection Attempt in Stock Code",
        "purpose": "验证工具是否对可能的注入攻击（如SQL注入、命令注入）有防御机制。",
        "args": {
          "stock_code": "NVDA; DROP TABLE companies"
        },
        "response": {
          "error": "ToolException: Error executing tool get_analyst_estimates: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7746295928955078,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Maximum Length Stock Code",
        "purpose": "测试最大允许长度的股票代码是否能正常工作或正确拒绝。",
        "args": {
          "stock_code": "ABCDE"
        },
        "response": {
          "error": "ToolException: Error executing tool get_analyst_estimates: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3782989978790283,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - API Server Down",
        "purpose": "模拟API服务不可用情况下的错误处理行为。",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_analyst_estimates: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.36391639709472656,
        "is_functional_test": false
      },
      {
        "case_name": "Functional Test with Sample Stock Code from Documentation",
        "purpose": "使用文档示例中的股票代码进行功能验证，确保与文档一致。",
        "args": {
          "stock_code": "AAPL"
        },
        "response": {
          "error": "ToolException: Error executing tool get_analyst_estimates: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3762021064758301,
        "is_functional_test": true
      }
    ],
    "get_stock_prices": [
      {
        "case_name": "Basic Stock Price Retrieval",
        "purpose": "验证工具能够成功获取一个有效股票代码和日期范围的历史股价数据。",
        "args": {
          "stock_code": "NVDA",
          "start_date": "2023-01-01",
          "end_date": "2023-12-31"
        },
        "response": {
          "error": "ToolException: Error executing tool get_stock_prices: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.9275429248809814,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - SQL Injection Attempt in Stock Code",
        "purpose": "验证工具是否对SQL注入攻击有防御机制。",
        "args": {
          "stock_code": "NVDA; DROP TABLE stock_prices",
          "start_date": "2023-01-01",
          "end_date": "2023-12-31"
        },
        "response": {
          "error": "ToolException: Error executing tool get_stock_prices: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.797684907913208,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "测试当传入格式错误的股票代码（如空字符串）时，工具是否能正确抛出异常。",
        "args": {
          "stock_code": "",
          "start_date": "2023-01-01",
          "end_date": "2023-12-31"
        },
        "response": {
          "error": "ToolException: Error executing tool get_stock_prices: Unexpected error fetching stock prices: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.003000020980834961,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Date Format - Start Date",
        "purpose": "测试当传入格式错误的开始日期时，工具是否能正确抛出异常。",
        "args": {
          "stock_code": "NVDA",
          "start_date": "2023/01/01",
          "end_date": "2023-12-31"
        },
        "response": {
          "error": "ToolException: Error executing tool get_stock_prices: Unexpected error fetching stock prices: 'start_date' and 'end_date' must be in format YYYY-MM-DD."
        },
        "execution_time": 0.0029997825622558594,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Date Format - End Date",
        "purpose": "测试当传入格式错误的结束日期时，工具是否能正确抛出异常。",
        "args": {
          "stock_code": "NVDA",
          "start_date": "2023-01-01",
          "end_date": "2023/12/31"
        },
        "response": {
          "error": "ToolException: Error executing tool get_stock_prices: Unexpected error fetching stock prices: 'start_date' and 'end_date' must be in format YYYY-MM-DD."
        },
        "execution_time": 0.007381916046142578,
        "is_functional_test": false
      },
      {
        "case_name": "Nonexistent Stock Code",
        "purpose": "验证工具在提供不存在的股票代码时是否能优雅处理错误。",
        "args": {
          "stock_code": "XYZABC",
          "start_date": "2023-01-01",
          "end_date": "2023-12-31"
        },
        "response": {
          "error": "ToolException: Error executing tool get_stock_prices: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7930164337158203,
        "is_functional_test": false
      },
      {
        "case_name": "Start Date After End Date",
        "purpose": "测试开始日期晚于结束日期时工具是否能正确处理。",
        "args": {
          "stock_code": "NVDA",
          "start_date": "2023-12-31",
          "end_date": "2023-01-01"
        },
        "response": {
          "error": "ToolException: Error executing tool get_stock_prices: Unexpected error fetching stock prices: 'start_date' must be before or equal to 'end_date'."
        },
        "execution_time": 0.0050008296966552734,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Maximum Length Stock Code",
        "purpose": "测试最大允许长度的股票代码是否能正常工作或正确拒绝。",
        "args": {
          "stock_code": "ABCDE",
          "start_date": "2023-01-01",
          "end_date": "2023-12-31"
        },
        "response": {
          "error": "ToolException: Error executing tool get_stock_prices: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.37457823753356934,
        "is_functional_test": false
      }
    ],
    "get_dividend_history": [
      {
        "case_name": "Basic Dividend History Retrieval",
        "purpose": "验证工具能够成功获取一个有效股票代码的股息历史记录。",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_dividend_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.3939852714538574,
        "is_functional_test": true
      },
      {
        "case_name": "Functional Test with Sample Stock Code from Documentation",
        "purpose": "使用文档示例中的股票代码进行功能验证，确保与文档一致。",
        "args": {
          "stock_code": "AAPL"
        },
        "response": {
          "error": "ToolException: Error executing tool get_dividend_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.787395715713501,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "测试当传入格式错误的股票代码（如空字符串）时，工具是否能正确抛出异常。",
        "args": {
          "stock_code": ""
        },
        "response": {
          "error": "ToolException: Error executing tool get_dividend_history: Unexpected error fetching dividend history: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": false
      },
      {
        "case_name": "Nonexistent Stock Code",
        "purpose": "验证工具在提供不存在的股票代码时是否能优雅处理错误。",
        "args": {
          "stock_code": "XYZABC"
        },
        "response": {
          "error": "ToolException: Error executing tool get_dividend_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7910730838775635,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Stock Code",
        "purpose": "测试包含特殊字符的股票代码是否被正确校验并返回错误。",
        "args": {
          "stock_code": "NVDA@#"
        },
        "response": {
          "error": "ToolException: Error executing tool get_dividend_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7988495826721191,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Maximum Length Stock Code",
        "purpose": "测试最大允许长度的股票代码是否能正常工作或正确拒绝。",
        "args": {
          "stock_code": "ABCDE"
        },
        "response": {
          "error": "ToolException: Error executing tool get_dividend_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.37264466285705566,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Injection Attempt in Stock Code",
        "purpose": "验证工具是否对可能的注入攻击（如SQL注入、命令注入）有防御机制。",
        "args": {
          "stock_code": "NVDA; DROP TABLE dividends"
        },
        "response": {
          "error": "ToolException: Error executing tool get_dividend_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3721179962158203,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - API Server Down",
        "purpose": "模拟API服务不可用情况下的错误处理行为。",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_dividend_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3690762519836426,
        "is_functional_test": false
      }
    ],
    "get_splits_history": [
      {
        "case_name": "Basic Splits History Retrieval",
        "purpose": "验证工具能够成功获取一个有效股票代码的股票拆分历史数据。",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_splits_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.903527021408081,
        "is_functional_test": true
      },
      {
        "case_name": "Functional Test with Sample Stock Code from Documentation",
        "purpose": "使用文档示例中的股票代码进行功能验证，确保与文档一致。",
        "args": {
          "stock_code": "AAPL"
        },
        "response": {
          "error": "ToolException: Error executing tool get_splits_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7787458896636963,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - SQL Injection Attempt in Stock Code",
        "purpose": "验证工具是否对SQL注入攻击有防御机制。",
        "args": {
          "stock_code": "NVDA; DROP TABLE splits"
        },
        "response": {
          "error": "ToolException: Error executing tool get_splits_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7767720222473145,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "测试当传入格式错误的股票代码（如空字符串）时，工具是否能正确抛出异常。",
        "args": {
          "stock_code": ""
        },
        "response": {
          "error": "ToolException: Error executing tool get_splits_history: Unexpected error fetching splits history: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.00399327278137207,
        "is_functional_test": false
      },
      {
        "case_name": "Nonexistent Stock Code",
        "purpose": "验证工具在提供不存在的股票代码时是否能优雅处理错误。",
        "args": {
          "stock_code": "XYZABC"
        },
        "response": {
          "error": "ToolException: Error executing tool get_splits_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7849783897399902,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Stock Code",
        "purpose": "测试包含特殊字符的股票代码是否被正确校验并返回错误。",
        "args": {
          "stock_code": "NVDA@#"
        },
        "response": {
          "error": "ToolException: Error executing tool get_splits_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3678619861602783,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Maximum Length Stock Code",
        "purpose": "测试最大允许长度的股票代码是否能正常工作或正确拒绝。",
        "args": {
          "stock_code": "ABCDE"
        },
        "response": {
          "error": "ToolException: Error executing tool get_splits_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.36000871658325195,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - API Server Down",
        "purpose": "模拟API服务不可用情况下的错误处理行为。",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_splits_history: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.36919569969177246,
        "is_functional_test": false
      }
    ],
    "get_ownership_data": [
      {
        "case_name": "Basic Ownership Data Retrieval",
        "purpose": "验证工具能够成功获取一个有效股票代码的公司所有权结构数据。",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_ownership_data: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.3808457851409912,
        "is_functional_test": true
      },
      {
        "case_name": "Functional Test with Sample Stock Code from Documentation",
        "purpose": "使用文档示例中的股票代码进行功能验证，确保与文档一致。",
        "args": {
          "stock_code": "AAPL"
        },
        "response": {
          "error": "ToolException: Error executing tool get_ownership_data: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7945652008056641,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Stock Code Format",
        "purpose": "测试当传入格式错误的股票代码（如空字符串）时，工具是否能正确抛出异常。",
        "args": {
          "stock_code": ""
        },
        "response": {
          "error": "ToolException: Error executing tool get_ownership_data: Unexpected error fetching ownership data: 'stock_code' must be a non-empty string."
        },
        "execution_time": 0.004915714263916016,
        "is_functional_test": false
      },
      {
        "case_name": "Nonexistent Stock Code",
        "purpose": "验证工具在提供不存在的股票代码时是否能优雅处理错误。",
        "args": {
          "stock_code": "XYZABC"
        },
        "response": {
          "error": "ToolException: Error executing tool get_ownership_data: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.37738990783691406,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Stock Code",
        "purpose": "测试包含特殊字符的股票代码是否被正确校验并返回错误。",
        "args": {
          "stock_code": "NVDA@#"
        },
        "response": {
          "error": "ToolException: Error executing tool get_ownership_data: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3755464553833008,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Injection Attempt in Stock Code",
        "purpose": "验证工具是否对可能的注入攻击（如SQL注入、命令注入）有防御机制。",
        "args": {
          "stock_code": "NVDA; DROP TABLE companies"
        },
        "response": {
          "error": "ToolException: Error executing tool get_ownership_data: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7951631546020508,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Maximum Length Stock Code",
        "purpose": "测试最大允许长度的股票代码是否能正常工作或正确拒绝。",
        "args": {
          "stock_code": "ABCDE"
        },
        "response": {
          "error": "ToolException: Error executing tool get_ownership_data: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3707258701324463,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - API Server Down",
        "purpose": "模拟API服务不可用情况下的错误处理行为。",
        "args": {
          "stock_code": "NVDA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_ownership_data: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7915084362030029,
        "is_functional_test": false
      }
    ],
    "get_market_news": [
      {
        "case_name": "Basic Market News Retrieval",
        "purpose": "验证工具能够成功获取指定公司的最新市场新闻信息。",
        "args": {
          "company_name": "NVIDIA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_market_news: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 1.358062744140625,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - SQL Injection Attempt in Company Name",
        "purpose": "验证工具是否对SQL注入攻击有防御机制。",
        "args": {
          "company_name": "NVIDIA; DROP TABLE market_news"
        },
        "response": {
          "error": "ToolException: Error executing tool get_market_news: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7772812843322754,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Company Name Format",
        "purpose": "测试当传入格式错误的公司名称（如空字符串）时，工具是否能正确抛出异常。",
        "args": {
          "company_name": ""
        },
        "response": {
          "error": "ToolException: Error executing tool get_market_news: Unexpected error fetching market news: 'company_name' must be a non-empty string."
        },
        "execution_time": 0.01000070571899414,
        "is_functional_test": false
      },
      {
        "case_name": "Nonexistent Company Name",
        "purpose": "验证工具在提供不存在的公司名称时是否能优雅处理错误。",
        "args": {
          "company_name": "XYZABC"
        },
        "response": {
          "error": "ToolException: Error executing tool get_market_news: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.371767520904541,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Company Name",
        "purpose": "测试包含特殊字符的公司名称是否被正确校验并返回错误。",
        "args": {
          "company_name": "NVIDIA@#"
        },
        "response": {
          "error": "ToolException: Error executing tool get_market_news: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.7950773239135742,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Maximum Length Company Name",
        "purpose": "测试最大允许长度的公司名称是否能正常工作或正确拒绝。",
        "args": {
          "company_name": "ABCDEFGHIJKLMNOPQRSTUVWXY"
        },
        "response": {
          "error": "ToolException: Error executing tool get_market_news: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.37386274337768555,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - API Server Down",
        "purpose": "模拟API服务不可用情况下的错误处理行为。",
        "args": {
          "company_name": "NVIDIA"
        },
        "response": {
          "error": "ToolException: Error executing tool get_market_news: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.37564563751220703,
        "is_functional_test": false
      },
      {
        "case_name": "Functional Test with Sample Company from Documentation",
        "purpose": "使用文档示例中的公司名称进行功能验证，确保与文档一致。",
        "args": {
          "company_name": "AAPL"
        },
        "response": {
          "error": "ToolException: Error executing tool get_market_news: HTTP error occurred: 404 - \n<!doctype html>\n<html lang=\"en\">\n<head>\n  <title>Not Found</title>\n</head>\n<body>\n  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>\n</body>\n</html>\n"
        },
        "execution_time": 0.3727226257324219,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 96
}