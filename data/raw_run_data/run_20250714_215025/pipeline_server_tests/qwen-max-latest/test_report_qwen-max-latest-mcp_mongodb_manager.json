{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "qwen-max-latest-mcp_mongodb_manager",
  "server_path": "workspace/pipeline-output-servers/qwen-max-latest/mcp_mongodb_manager/refined/server.py",
  "timestamp": "2025-07-14T21:54:12.934580",
  "tools": [
    {
      "name": "mcp_list_databases",
      "description": "\n    Lists all available databases in the MongoDB instance.\n\n    Returns:\n        A JSON-formatted string containing a list of database names.\n\n    Example:\n        mcp_list_databases()\n        => '[\"admin\", \"config\", \"local\"]'\n    ",
      "args_schema": {
        "properties": {},
        "title": "mcp_list_databasesArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_list_collections",
      "description": "\n    Lists all collections within a specified database in the MongoDB instance.\n\n    Args:\n        database_name: The name of the database whose collections need to be listed.\n\n    Returns:\n        A JSON-formatted string containing a list of collection names.\n\n    Raises:\n        ValueError: If the database name is invalid.\n        RuntimeError: If an error occurs while listing collections.\n\n    Example:\n        mcp_list_collections(database_name=\"test_db\")\n        => '[\"users\", \"products\"]'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          }
        },
        "required": [
          "database_name"
        ],
        "title": "mcp_list_collectionsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_insert_document",
      "description": "\n    Inserts a new document into a specified collection within a specified database.\n\n    Args:\n        database_name: The name of the target database.\n        collection_name: The name of the target collection.\n        document: The document to insert, represented as a Python dictionary.\n\n    Returns:\n        A JSON-formatted string containing the ID of the newly inserted document.\n\n    Raises:\n        ValueError: If any argument is invalid.\n        RuntimeError: If an error occurs during document insertion.\n\n    Example:\n        mcp_insert_document(\n            database_name=\"test_db\",\n            collection_name=\"users\",\n            document={\"name\": \"Alice\", \"age\": 30}\n        )\n        => '\"65a4f8b9d3c5f2e4d8e9f0a1\"'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "document": {
            "title": "Document",
            "type": "object"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "document"
        ],
        "title": "mcp_insert_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_find_documents",
      "description": "\n    Queries documents from a specified collection within a specified database, with optional projection and result limit.\n\n    Args:\n        database_name: The name of the target database.\n        collection_name: The name of the target collection.\n        query: A query filter represented as a Python dictionary. Defaults to None.\n        projection: Specifies fields to include or exclude in the returned documents. Defaults to None.\n        limit: Limits the number of documents returned. Defaults to None.\n\n    Returns:\n        A JSON-formatted string containing a list of matching documents.\n\n    Raises:\n        ValueError: If any argument is invalid.\n        RuntimeError: If an error occurs during querying.\n\n    Example:\n        mcp_find_documents(\n            database_name=\"test_db\",\n            collection_name=\"users\",\n            query={\"age\": {\"$gt\": 25}},\n            projection={\"_id\": 0, \"name\": 1},\n            limit=2\n        )\n        => '[{\"name\": \"Alice\"}, {\"name\": \"Bob\"}]'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "default": null,
            "title": "Query",
            "type": "object"
          },
          "projection": {
            "default": null,
            "title": "Projection",
            "type": "object"
          },
          "limit": {
            "default": null,
            "title": "Limit",
            "type": "integer"
          }
        },
        "required": [
          "database_name",
          "collection_name"
        ],
        "title": "mcp_find_documentsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_update_document",
      "description": "\n    Updates one or multiple documents in a specified collection within a specified database.\n\n    Args:\n        database_name: The name of the target database.\n        collection_name: The name of the target collection.\n        filter_query: A filter to identify the documents to update.\n        update_data: The update operations to apply, represented as a Python dictionary.\n        multi: If True, updates all matching documents; otherwise, updates only the first match.\n\n    Returns:\n        A JSON-formatted string containing the number of documents modified.\n\n    Raises:\n        ValueError: If any argument is invalid.\n        RuntimeError: If an error occurs during updating.\n\n    Example:\n        mcp_update_document(\n            database_name=\"test_db\",\n            collection_name=\"users\",\n            filter_query={\"age\": {\"$lt\": 30}},\n            update_data={\"$set\": {\"status\": \"inactive\"}},\n            multi=True\n        )\n        => '3'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "filter_query": {
            "title": "Filter Query",
            "type": "object"
          },
          "update_data": {
            "title": "Update Data",
            "type": "object"
          },
          "multi": {
            "title": "Multi",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "filter_query",
          "update_data",
          "multi"
        ],
        "title": "mcp_update_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_delete_document",
      "description": "\n    Deletes one or multiple documents from a specified collection within a specified database.\n\n    Args:\n        database_name: The name of the target database.\n        collection_name: The name of the target collection.\n        filter_query: A filter to identify the documents to delete.\n        multi: If True, deletes all matching documents; otherwise, deletes only the first match.\n\n    Returns:\n        A JSON-formatted string containing the number of documents deleted.\n\n    Raises:\n        ValueError: If any argument is invalid.\n        RuntimeError: If an error occurs during deletion.\n\n    Example:\n        mcp_delete_document(\n            database_name=\"test_db\",\n            collection_name=\"users\",\n            filter_query={\"status\": \"inactive\"},\n            multi=True\n        )\n        => '2'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "filter_query": {
            "title": "Filter Query",
            "type": "object"
          },
          "multi": {
            "title": "Multi",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "filter_query",
          "multi"
        ],
        "title": "mcp_delete_documentArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "mcp_list_databases": [
      {
        "case_name": "Basic Database Listing",
        "purpose": "验证工具能够成功列出 MongoDB 实例中的所有数据库，使用默认参数进行基本功能测试。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"new_db\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.0065538883209228516,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Database Response Handling",
        "purpose": "模拟 MongoDB 返回空数据库列表的情况，验证工具是否能正确处理空响应。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"new_db\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.006024837493896484,
        "is_functional_test": true
      },
      {
        "case_name": "Security Check - Unauthorized Access Attempt",
        "purpose": "验证在无权限访问 MongoDB 的情况下，工具是否拒绝执行并安全地处理错误。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"new_db\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.007996559143066406,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - MongoDB Connection Failure",
        "purpose": "模拟 MongoDB 连接失败情况，验证工具是否能优雅地处理连接异常。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"new_db\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.0029997825622558594,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Large Number of Databases",
        "purpose": "模拟存在大量数据库的边界情况，验证工具是否能稳定返回结果。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"new_db\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.005000591278076172,
        "is_functional_test": true
      },
      {
        "case_name": "Error Handling - Invalid JSON Format Return",
        "purpose": "模拟工具返回非标准 JSON 格式时的错误处理能力。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"new_db\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.007144451141357422,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Database Names",
        "purpose": "验证工具是否能正确处理包含特殊字符的数据库名称。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"new_db\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.004006385803222656,
        "is_functional_test": true
      },
      {
        "case_name": "Security Check - Injection Attempt Simulation",
        "purpose": "尝试注入非法参数（如命令注入或特殊符号），验证工具是否忽略或安全处理。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"invalid_database\", \"large_db\", \"local\", \"mcp-test\", \"new_db\", \"offline_db\", \"restricted_db\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.007004737854003906,
        "is_functional_test": false
      }
    ],
    "mcp_list_collections": [
      {
        "case_name": "Basic Collection Listing",
        "purpose": "验证工具能够成功列出指定数据库中的所有集合，使用有效数据库名称进行基本功能测试。",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "[\"a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\", \"new_collection\", \"test_collection\", \"empty_docs\", \"invalid/collection*name\", \"user_profiles\", \"long_key_collection\", \"test_collection'; DROP COLLECTION test_collection;--\", \"large_data\", \"special_chars_collection\", \"binary_data_collection\", \"nonexistent_collection\", \"a_very_long_collection_name_that_exceeds_normal_limits_and_might_cause_issues\", \"users\"]"
        },
        "execution_time": 0.004058361053466797,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Collection Response Handling",
        "purpose": "验证当指定数据库中没有集合时，工具是否能正确返回空列表。",
        "args": {
          "database_name": "empty_db"
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.00600123405456543,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Database Name Handling",
        "purpose": "测试工具在传入无效数据库名称时是否抛出 ValueError。",
        "args": {
          "database_name": ""
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_list_collections: Invalid database name: ''. Must be a non-empty string."
        },
        "execution_time": 0.008002042770385742,
        "is_functional_test": false
      },
      {
        "case_name": "Database Does Not Exist",
        "purpose": "验证工具在尝试列出不存在的数据库集合时是否抛出 RuntimeError。",
        "args": {
          "database_name": "nonexistent_db"
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.007996320724487305,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Database Name",
        "purpose": "测试工具是否能正确处理包含特殊字符的数据库名称。",
        "args": {
          "database_name": "db@#_测试"
        },
        "response": {
          "result": "[\"test_collection\", \"special_chars_collection\", \"new_collection\", \"users\"]"
        },
        "execution_time": 0.0060079097747802734,
        "is_functional_test": true
      },
      {
        "case_name": "Security Check - Injection Attempt",
        "purpose": "验证工具是否安全地处理包含潜在注入风险的数据库名称参数。",
        "args": {
          "database_name": "test_db; DROP TABLE collections"
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_list_collections: Failed to list collections: database names cannot contain the character ' '"
        },
        "execution_time": 0.0058171749114990234,
        "is_functional_test": false
      },
      {
        "case_name": "Connection Failure Handling",
        "purpose": "模拟 MongoDB 连接失败情况，验证工具是否能优雅地处理异常并抛出 RuntimeError。",
        "args": {
          "database_name": "offline_db"
        },
        "response": {
          "result": "[\"users\"]"
        },
        "execution_time": 0.004118204116821289,
        "is_functional_test": false
      }
    ],
    "mcp_insert_document": [
      {
        "case_name": "Basic Document Insertion",
        "purpose": "验证工具能够成功插入文档到指定数据库和集合中，使用默认参数进行基本功能测试。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "document": {
            "name": "Alice",
            "age": 30
          }
        },
        "response": {
          "result": "\"68750c3c7f9826ac764c5a75\""
        },
        "execution_time": 0.012417316436767578,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document into Nonexistent Collection",
        "purpose": "验证工具在目标集合不存在时是否能自动创建集合并插入文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "document": {
            "username": "new_user",
            "email": "new@example.com"
          }
        },
        "response": {
          "result": "\"68750c3c7f9826ac764c5a76\""
        },
        "execution_time": 0.0044863224029541016,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document with Special Characters in Database Name",
        "purpose": "验证工具是否能正确处理包含特殊字符的数据库名称并插入文档。",
        "args": {
          "database_name": "db@#_测试",
          "collection_name": "test_collection",
          "document": {
            "key": "value"
          }
        },
        "response": {
          "result": "\"68750c3c7f9826ac764c5a77\""
        },
        "execution_time": 0.0070018768310546875,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document with Invalid Database Name",
        "purpose": "测试工具在传入空字符串作为数据库名称时是否抛出 ValueError。",
        "args": {
          "database_name": "",
          "collection_name": "users",
          "document": {
            "name": "Bob",
            "age": 25
          }
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_insert_document: Invalid database name: ''. Must be a non-empty string."
        },
        "execution_time": 0.006139993667602539,
        "is_functional_test": false
      },
      {
        "case_name": "Insert Document into Restricted Database",
        "purpose": "模拟无权限访问数据库的情况，验证工具是否拒绝插入操作并安全地处理错误。",
        "args": {
          "database_name": "restricted_db",
          "collection_name": "users",
          "document": {
            "name": "Charlie",
            "role": "guest"
          }
        },
        "response": {
          "result": "\"68750c3c7f9826ac764c5a78\""
        },
        "execution_time": 0.021008014678955078,
        "is_functional_test": false
      },
      {
        "case_name": "Security Check - Injection Attempt in Collection Name",
        "purpose": "尝试注入非法集合名称（如命令注入或特殊符号），验证工具是否忽略或安全处理。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection'; DROP COLLECTION test_collection;--",
          "document": {
            "payload": "malicious attempt"
          }
        },
        "response": {
          "result": "\"68750c3c7f9826ac764c5a79\""
        },
        "execution_time": 0.007062435150146484,
        "is_functional_test": false
      },
      {
        "case_name": "Connection Failure Handling During Insert",
        "purpose": "模拟 MongoDB 连接失败情况，验证工具是否能优雅地处理连接异常。",
        "args": {
          "database_name": "offline_db",
          "collection_name": "users",
          "document": {
            "name": "David",
            "status": "active"
          }
        },
        "response": {
          "result": "\"68750c3c7f9826ac764c5a7a\""
        },
        "execution_time": 0.005561351776123047,
        "is_functional_test": false
      }
    ],
    "mcp_find_documents": [
      {
        "case_name": "Basic Document Query",
        "purpose": "验证工具能够使用默认参数从指定集合中查询文档的基本功能。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users"
        },
        "response": {
          "result": "[{\"_id\": \"6872ad03424cddc98ebe1c0b\", \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6872bc93b11f255c82054b2a\", \"name\": \"John\", \"age\": 35, \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6872bc93b11f255c82054b2c\", \"user@name\": \"Eve\", \"age#\": 28, \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6872bc93b11f255c82054b2d\", \"a_very_long_key_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\": \"value\", \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6872bc93b11f255c82054b2e\", \"name\": \"Invalid\", \"age\": \"thirty\", \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6874f8d7935c390f10319632\", \"name\": \"Alice\", \"age\": 30}, {\"_id\": \"6875002364da856800f5cacb\", \"name\": \"Alice\", \"age\": 30}, {\"_id\": \"687504276a35f1f5a6f322c1\", \"name\": \"Alice\", \"age\": 30}, {\"_id\": \"687504276a35f1f5a6f322c4\", \"user#id\": 1, \"full-name\": \"Frank Lin\"}, {\"_id\": \"687504276a35f1f5a6f322c5\", \"name\": \"\\u5f20\\u4e09\", \"introduction\": \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\\u7a0b\\u5e08\"}, {\"_id\": \"6875087c3c38208f1c3312c6\", \"name\": \"Alice\", \"age\": 30}, {\"_id\": \"68750c3c7f9826ac764c5a75\", \"name\": \"Alice\", \"age\": 30}]"
        },
        "execution_time": 0.004999399185180664,
        "is_functional_test": true
      },
      {
        "case_name": "Filtered Document Query with Simple Condition",
        "purpose": "验证工具能够根据简单查询条件过滤文档并返回结果。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "age": {
              "$gt": 25
            }
          }
        },
        "response": {
          "result": "[{\"_id\": \"6872bc93b11f255c82054b2a\", \"name\": \"John\", \"age\": 35, \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6874f8d7935c390f10319632\", \"name\": \"Alice\", \"age\": 30}, {\"_id\": \"6875002364da856800f5cacb\", \"name\": \"Alice\", \"age\": 30}, {\"_id\": \"687504276a35f1f5a6f322c1\", \"name\": \"Alice\", \"age\": 30}, {\"_id\": \"6875087c3c38208f1c3312c6\", \"name\": \"Alice\", \"age\": 30}, {\"_id\": \"68750c3c7f9826ac764c5a75\", \"name\": \"Alice\", \"age\": 30}]"
        },
        "execution_time": 0.0050008296966552734,
        "is_functional_test": true
      },
      {
        "case_name": "Projection Field Inclusion Test",
        "purpose": "验证工具在指定字段包含的投影条件下是否正确返回指定字段。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "age": {
              "$gt": 25
            }
          },
          "projection": {
            "_id": 0,
            "name": 1
          }
        },
        "response": {
          "result": "[{\"name\": \"John\"}, {\"name\": \"Alice\"}, {\"name\": \"Alice\"}, {\"name\": \"Alice\"}, {\"name\": \"Alice\"}, {\"name\": \"Alice\"}]"
        },
        "execution_time": 0.007990837097167969,
        "is_functional_test": true
      },
      {
        "case_name": "Result Limit Control Test",
        "purpose": "验证工具能通过 limit 参数限制返回的文档数量。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "age": {
              "$gt": 25
            }
          },
          "limit": 2
        },
        "response": {
          "result": "[{\"_id\": \"6872bc93b11f255c82054b2a\", \"name\": \"John\", \"age\": 35, \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6874f8d7935c390f10319632\", \"name\": \"Alice\", \"age\": 30}]"
        },
        "execution_time": 0.003997802734375,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Collection Query Handling",
        "purpose": "验证工具在空集合中执行查询时是否安全地返回空列表。",
        "args": {
          "database_name": "test_db",
          "collection_name": "empty_docs"
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.009001493453979492,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Database Name Handling",
        "purpose": "测试工具在传入无效数据库名称时是否抛出 ValueError。",
        "args": {
          "database_name": "",
          "collection_name": "users"
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_find_documents: Invalid database name: ''. Must be a non-empty string."
        },
        "execution_time": 0.0030024051666259766,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Collection Name",
        "purpose": "验证工具是否能正确处理包含特殊字符的集合名称。",
        "args": {
          "database_name": "test_db",
          "collection_name": "special_chars_collection"
        },
        "response": {
          "result": "[{\"_id\": \"6862968254d99b844f558b8c\", \"title\": \"Document with special chars: !@#$%^&*()_+{}[]|\\\\:\\\"<>?/~`\", \"description\": \"This document has been updated with new special characters: \\n\\r\\t\\\\\\\"'`~!@#$%^&*()-_=+[]{}|;:,.<>/?\"}, {\"_id\": \"68629b068d98df9ef544567e\", \"\\u7528\\u6237\\u540d\": \"\\u5f20\\u4e09\", \"address\": \"\\u5317\\u4eac\\u5e02\\u671d\\u9633\\u533a@123\\u53f7\"}, {\"_id\": \"6863b713e63a60df7d66176f\", \"user@domain\": \"test\", \"key-with-dash\": 456, \"key.with.dot\": true, \"key\": {\"with\": {\"dot\": false}}}, {\"_id\": \"687258207c1609156ee10ee3\", \"user-name\": \"john_doe\", \"email@domain.com\": \"john@example.com\"}, {\"_id\": \"687293902f99e4d325c71fb8\", \"user@name\": \"Alice#123\", \"city/country\": \"Shanghai\\\\China\"}, {\"_id\": \"6875002364da856800f5cacd\", \"user@name\": \"Eve\", \"age!\": 28}]"
        },
        "execution_time": 0.005001544952392578,
        "is_functional_test": true
      },
      {
        "case_name": "Security Check - Injection Attempt in Query",
        "purpose": "尝试注入恶意查询表达式，验证工具是否忽略或安全处理。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "$where": "function() { return true; }"
          }
        },
        "response": {
          "result": "[{\"_id\": \"6872ad03424cddc98ebe1c0b\", \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6872bc93b11f255c82054b2a\", \"name\": \"John\", \"age\": 35, \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6872bc93b11f255c82054b2c\", \"user@name\": \"Eve\", \"age#\": 28, \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6872bc93b11f255c82054b2d\", \"a_very_long_key_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\": \"value\", \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6872bc93b11f255c82054b2e\", \"name\": \"Invalid\", \"age\": \"thirty\", \"last_modified\": \"2023-10-01\"}, {\"_id\": \"6874f8d7935c390f10319632\", \"name\": \"Alice\", \"age\": 30}, {\"_id\": \"6875002364da856800f5cacb\", \"name\": \"Alice\", \"age\": 30}, {\"_id\": \"687504276a35f1f5a6f322c1\", \"name\": \"Alice\", \"age\": 30}, {\"_id\": \"687504276a35f1f5a6f322c4\", \"user#id\": 1, \"full-name\": \"Frank Lin\"}, {\"_id\": \"687504276a35f1f5a6f322c5\", \"name\": \"\\u5f20\\u4e09\", \"introduction\": \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\\u7a0b\\u5e08\"}, {\"_id\": \"6875087c3c38208f1c3312c6\", \"name\": \"Alice\", \"age\": 30}, {\"_id\": \"68750c3c7f9826ac764c5a75\", \"name\": \"Alice\", \"age\": 30}]"
        },
        "execution_time": 0.059995412826538086,
        "is_functional_test": false
      }
    ],
    "mcp_update_document": [
      {
        "case_name": "Basic Document Update",
        "purpose": "验证工具能够成功更新指定数据库和集合中的文档，使用基本匹配条件和更新操作。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "age": {
              "$lt": 30
            }
          },
          "update_data": {
            "$set": {
              "status": "inactive"
            }
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.004000663757324219,
        "is_functional_test": true
      },
      {
        "case_name": "Single Document Update",
        "purpose": "验证工具在 multi=False 时仅更新第一个匹配的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "status": "active"
          },
          "update_data": {
            "$inc": {
              "login_count": 1
            }
          },
          "multi": false
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.012017250061035156,
        "is_functional_test": true
      },
      {
        "case_name": "No Matching Documents",
        "purpose": "验证当 filter_query 不匹配任何文档时，工具是否返回修改数量为0。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "username": "nonexistent_user"
          },
          "update_data": {
            "$set": {
              "email": "new@example.com"
            }
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.003998756408691406,
        "is_functional_test": true
      },
      {
        "case_name": "Update With Special Characters in Field Names",
        "purpose": "验证工具能否处理包含特殊字符的字段名更新操作。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "custom!@#_field": {
              "$exists": true
            }
          },
          "update_data": {
            "$set": {
              "custom!@#_field": "updated_value"
            }
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.006001710891723633,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Database Name Handling",
        "purpose": "测试工具在传入空字符串作为数据库名称时是否抛出 ValueError。",
        "args": {
          "database_name": "",
          "collection_name": "users",
          "filter_query": {
            "age": {
              "$lt": 30
            }
          },
          "update_data": {
            "$set": {
              "status": "inactive"
            }
          },
          "multi": true
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_update_document: Invalid database name: ''. Must be a non-empty string."
        },
        "execution_time": 0.0060024261474609375,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Collection Name Handling",
        "purpose": "测试工具在传入非法集合名称时是否抛出 ValueError。",
        "args": {
          "database_name": "test_db",
          "collection_name": "invalid/collection*name",
          "filter_query": {
            "age": {
              "$lt": 30
            }
          },
          "update_data": {
            "$set": {
              "status": "inactive"
            }
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.004569292068481445,
        "is_functional_test": false
      },
      {
        "case_name": "Security Check - Injection Attempt in Filter Query",
        "purpose": "验证工具是否安全地处理可能包含注入攻击的 filter_query 参数。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "$where": "function() { return true; }"
          },
          "update_data": {
            "$set": {
              "status": "hacked"
            }
          },
          "multi": true
        },
        "response": {
          "result": "12"
        },
        "execution_time": 0.0110015869140625,
        "is_functional_test": false
      }
    ],
    "mcp_delete_document": [
      {
        "case_name": "Basic Document Deletion - Single Match",
        "purpose": "验证工具能够成功删除匹配过滤条件的第一个文档，使用基本参数进行正向测试。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "status": "inactive"
          },
          "multi": false
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.004999399185180664,
        "is_functional_test": true
      },
      {
        "case_name": "Multi Document Deletion - All Matches",
        "purpose": "验证工具在 multi=True 情况下能删除所有匹配的文档，确保批量删除功能正常工作。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "role": "guest"
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.0039997100830078125,
        "is_functional_test": true
      },
      {
        "case_name": "Security Check - Injection Attempt in Filter Query",
        "purpose": "验证工具是否安全地处理包含潜在注入风险的 filter_query 参数。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "$where": "function() { return true; }"
          },
          "multi": false
        },
        "response": {
          "result": "1"
        },
        "execution_time": 0.059580326080322266,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid Database Name",
        "purpose": "测试工具在传入无效数据库名称时是否抛出 ValueError。",
        "args": {
          "database_name": "",
          "collection_name": "users",
          "filter_query": {
            "status": "inactive"
          },
          "multi": false
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_delete_document: Invalid database name: ''. Must be a non-empty string."
        },
        "execution_time": 0.004000425338745117,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Nonexistent Collection",
        "purpose": "验证工具在尝试删除不存在集合中的文档时是否正确处理错误。",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "filter_query": {
            "status": "inactive"
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.00699925422668457,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Delete with Empty Filter",
        "purpose": "验证工具在空 filter_query 下的行为（如删除整个集合）是否符合预期。",
        "args": {
          "database_name": "test_db",
          "collection_name": "temp_data",
          "filter_query": {},
          "multi": true
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_delete_document: Filter query must be a non-empty dictionary."
        },
        "execution_time": 0.005000114440917969,
        "is_functional_test": true
      },
      {
        "case_name": "Special Characters in Collection Name",
        "purpose": "测试工具是否能正确处理包含特殊字符的集合名称。",
        "args": {
          "database_name": "test_db",
          "collection_name": "special!@#%&()_collection",
          "filter_query": {
            "type": "test"
          },
          "multi": true
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.007999897003173828,
        "is_functional_test": true
      },
      {
        "case_name": "Connection Failure Handling",
        "purpose": "模拟 MongoDB 连接失败情况，验证工具是否能优雅地处理异常并抛出 RuntimeError。",
        "args": {
          "database_name": "offline_db",
          "collection_name": "users",
          "filter_query": {
            "status": "inactive"
          },
          "multi": false
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.009999513626098633,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 45
}