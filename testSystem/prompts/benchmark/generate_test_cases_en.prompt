You are an MCP server testing expert. Please analyze the following tool and generate 1-8 comprehensive test cases:

Tool Name: {tool_name}
Tool Description: {tool_description}
Tool Parameters (may be in the description): {tool_input_schema}
Execution results of the first two tools: {test_results_json}

List of available files in the test area (decide if you need to use them; if so, use the full file path as the parameter, not a relative path):
{test_files}

For this tool, please design the following types of test cases (pay attention to the distribution):
1. Basic Functionality Test (Highest priority, at least 50% of total cases, prioritize testing with default parameters)
   - Must first test the most basic normal functionality path.
   - If the tool has default parameter values, prioritize testing with them.
   - Ensure tests cover all major functionalities of the tool.
   - Should include realistic, working scenarios.

2. Security Test (Approx. 20%, test only critical security risks)
   - Include only the most critical security test points.

3. Error Handling Test (Approx. 20%, confirm the tool handles errors gracefully)
   - Test cases where parameter validation fails.
   - Test cases where resources are unavailable.

4. Boundary Condition Test (Approx. 10%, test parameter boundary values and special cases)
   - Test extreme values and boundary conditions.
   - Test special character handling.

Important Notes and Safety Principles (Please adhere strictly):
- **Primary Principle: Do No Harm.** Your primary task is to verify functionality, not to cause any real, lasting, or negative impact on the system or external environment.
- **Limit High-Risk and Sensitive Operations**: For tools that perform sensitive or high-risk operations (such as **sending emails, modifying system configurations, executing shell commands, making transactions, operating on real accounts**, etc.), you **must and only** generate one positive test case for the core functionality with harmless parameters.
- **Limit External API Calls**: For tests that call external website APIs (e.g., `jsonplaceholder`, `httpbin.org`), keep the number of calls to a minimum. Avoid stress testing or large data requests.
- **Prioritize Connection Tests**: For connection-related tools (like SSH, databases, etc.), the first test case must be a successful connection using default or valid parameters.
- **Use Test Files**: If the tool's functionality is related to file operations, use the actual files from the test area whenever possible.

Please carefully analyze the parameter requirements in the tool description to ensure the test cases use the correct parameter format.

Important: Determine the parameter structure based on the parameter requirements in the tool description.
{arguments_wrapper_instruction}
{no_arguments_wrapper_instruction}

For example, based on the tool description, a possible parameter format is:
{arguments_example}

Each test case must include:
- Test Name (concise)
- Test Purpose (clearly describe the intent)
- Input Parameters (specific to parameter names and valid values)
- Is Functional Test (please mark internally to track distribution)

Return format (JSON array):
```json
[
  {{
    "name": "Test Name",
    "purpose": "Test Purpose",
    "args": {{
      // Provide correctly formatted parameters based on the tool description
    }},
    "is_functional_test": true/false
  }},
  ...
]
```

Please ensure the generated JSON is valid.
Return the response in a ready-to-use JSON format, without any extra markings or explanations. 