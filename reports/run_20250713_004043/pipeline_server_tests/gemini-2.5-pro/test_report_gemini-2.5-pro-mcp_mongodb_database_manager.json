{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "gemini-2.5-pro-mcp_mongodb_database_manager",
  "server_path": "workspace/pipeline-output-servers/gemini-2.5-pro/mcp_mongodb_database_manager/refined/server.py",
  "timestamp": "2025-07-13T00:47:00.461087",
  "tools": [
    {
      "name": "mcp_list_databases",
      "description": "\n    Lists the names of all available databases on the MongoDB server.\n\n    Returns:\n        A JSON string representing a list of database names.\n        Example: '[\"admin\", \"config\", \"local\", \"mydatabase\"]'\n    ",
      "args_schema": {
        "properties": {},
        "title": "mcp_list_databasesArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_list_collections",
      "description": "\n    Lists the names of all collections within a specified database.\n\n    Args:\n        database_name (str): The name of the database to inspect.\n\n    Returns:\n        A JSON string representing a list of collection names.\n        Example: '[\"users\", \"products\", \"orders\"]'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          }
        },
        "required": [
          "database_name"
        ],
        "title": "mcp_list_collectionsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_insert_document",
      "description": "\n    Inserts a new document into a specified collection.\n\n    Args:\n        database_name (str): The name of the target database.\n        collection_name (str): The name of the target collection.\n        document (dict): The document to be inserted.\n\n    Returns:\n        A JSON string containing the string representation of the newly inserted document's _id.\n        Example: '{\"inserted_id\": \"64c9a3e6e7e4a4c4de54d7e1\"}'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "document": {
            "title": "Document",
            "type": "object"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "document"
        ],
        "title": "mcp_insert_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_find_documents",
      "description": "\n    Finds documents matching a specific query within a collection.\n\n    Args:\n        database_name (str): The name of the database to query.\n        collection_name (str): The name of the collection to query.\n        query (dict): The MongoDB query filter. Use {} to match all documents.\n        projection (dict, optional): The projection specification. Defaults to None.\n        limit (int, optional): The maximum number of documents to return. Defaults to 100.\n\n    Returns:\n        A JSON string representing a list of documents that match the query.\n        Example: '[{\"_id\": \"64c9a3e6e7e4a4c4de54d7e1\", \"name\": \"John Doe\"}]'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "title": "Query",
            "type": "object"
          },
          "projection": {
            "default": null,
            "title": "Projection",
            "type": "object"
          },
          "limit": {
            "default": 100,
            "title": "Limit",
            "type": "integer"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "query"
        ],
        "title": "mcp_find_documentsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_update_document",
      "description": "\n    Updates one or more documents that match a specified filter.\n\n    Args:\n        database_name (str): The name of the database for the update.\n        collection_name (str): The name of the collection for the update.\n        query (dict): The filter to select the document(s) to update.\n        update (dict): The update operations to be applied (e.g., using '$set').\n        update_many (bool, optional): If True, updates all matching documents. Defaults to False.\n\n    Returns:\n        A JSON string with the count of matched and modified documents.\n        Example: '{\"matched_count\": 1, \"modified_count\": 1}'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "title": "Query",
            "type": "object"
          },
          "update": {
            "title": "Update",
            "type": "object"
          },
          "update_many": {
            "default": false,
            "title": "Update Many",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "query",
          "update"
        ],
        "title": "mcp_update_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_delete_document",
      "description": "\n    Deletes one or more documents that match a specified filter.\n\n    Args:\n        database_name (str): The name of the database from which to delete.\n        collection_name (str): The name of the collection from which to delete.\n        query (dict): The filter to select the document(s) for deletion.\n        delete_many (bool, optional): If True, deletes all matching documents. Defaults to False.\n\n    Returns:\n        A JSON string containing the number of documents deleted.\n        Example: '{\"deleted_count\": 1}'\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "title": "Query",
            "type": "object"
          },
          "delete_many": {
            "default": false,
            "title": "Delete Many",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "query"
        ],
        "title": "mcp_delete_documentArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "mcp_list_databases": [
      {
        "case_name": "List Databases Successfully",
        "purpose": "验证工具可以成功列出MongoDB服务器上的所有数据库名称。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.005947113037109375,
        "is_functional_test": true
      },
      {
        "case_name": "Verify Default Database Inclusion",
        "purpose": "确认默认数据库（如admin、local等）包含在返回的数据库列表中。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.004997730255126953,
        "is_functional_test": true
      },
      {
        "case_name": "Check Empty Database List Handling",
        "purpose": "验证当没有用户创建的数据库时，工具仅返回默认数据库的情况。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.009112834930419922,
        "is_functional_test": true
      },
      {
        "case_name": "Ensure JSON Format Output",
        "purpose": "确保返回结果是符合JSON格式的字符串，并能被正确解析。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.005000591278076172,
        "is_functional_test": true
      },
      {
        "case_name": "Test Tool Without MongoDB Connection",
        "purpose": "测试MongoDB服务不可用时，工具是否能优雅处理连接失败错误。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.006999492645263672,
        "is_functional_test": false
      },
      {
        "case_name": "Unauthorized Access Attempt",
        "purpose": "验证无权限访问MongoDB时工具的安全响应机制。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.00500035285949707,
        "is_functional_test": false
      },
      {
        "case_name": "Test With Corrupted MongoDB Metadata",
        "purpose": "测试当MongoDB元数据损坏时工具的错误处理能力。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.007005929946899414,
        "is_functional_test": false
      },
      {
        "case_name": "Test Large Number of Databases",
        "purpose": "验证工具在存在大量数据库的情况下仍能正常返回结果。",
        "args": {},
        "response": {
          "result": "[\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": true
      }
    ],
    "mcp_list_collections": [
      {
        "case_name": "List Collections Successfully",
        "purpose": "验证工具可以成功列出指定数据库中的所有集合名称。",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "[\"a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\", \"new_collection\", \"test_collection\", \"empty_docs\", \"invalid/collection*name\", \"user_profiles\", \"long_key_collection\", \"test_collection'; DROP COLLECTION test_collection;--\", \"large_data\", \"special_chars_collection\", \"binary_data_collection\", \"nonexistent_collection\", \"a_very_long_collection_name_that_exceeds_normal_limits_and_might_cause_issues\", \"users\"]"
        },
        "execution_time": 0.004999399185180664,
        "is_functional_test": true
      },
      {
        "case_name": "Check Empty Collection Handling",
        "purpose": "验证当指定数据库中没有集合时，工具返回空数组。",
        "args": {
          "database_name": "empty_database"
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.00800466537475586,
        "is_functional_test": true
      },
      {
        "case_name": "Ensure JSON Format Output",
        "purpose": "确保返回结果是符合JSON格式的字符串，并能被正确解析。",
        "args": {
          "database_name": "mcp-test"
        },
        "response": {
          "result": "[\"users\", \"user_profiles\", \"\\u7528\\u6237\\u4fe1\\u606f\", \"test\"]"
        },
        "execution_time": 0.008999109268188477,
        "is_functional_test": true
      },
      {
        "case_name": "Test With Special Characters In Database Name",
        "purpose": "测试数据库名包含特殊字符和Unicode字符时工具是否能正常处理。",
        "args": {
          "database_name": "db@#_\\u6d4b\\u8bd5"
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_list_collections: An unexpected error occurred while listing collections: database names cannot contain the character '\\\\'"
        },
        "execution_time": 0.0029997825622558594,
        "is_functional_test": true
      },
      {
        "case_name": "Unauthorized Access Attempt",
        "purpose": "验证无权限访问数据库时工具的安全响应机制。",
        "args": {
          "database_name": "admin"
        },
        "response": {
          "result": "[\"system.version\", \"system_logs\"]"
        },
        "execution_time": 0.0048007965087890625,
        "is_functional_test": false
      },
      {
        "case_name": "Test Invalid Database Name",
        "purpose": "测试无效或不存在的数据库名称时工具是否能正确处理错误。",
        "args": {
          "database_name": "invalid_db_name"
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.007428169250488281,
        "is_functional_test": false
      },
      {
        "case_name": "Test Tool Without MongoDB Connection",
        "purpose": "测试MongoDB服务不可用时，工具是否能优雅处理连接失败错误。",
        "args": {
          "database_name": "local"
        },
        "response": {
          "result": "[\"startup_log\"]"
        },
        "execution_time": 0.005004167556762695,
        "is_functional_test": false
      },
      {
        "case_name": "Test Large Number of Collections",
        "purpose": "验证工具在存在大量集合的情况下仍能正常返回结果。",
        "args": {
          "database_name": "large_db"
        },
        "response": {
          "result": "[\"large_collection\"]"
        },
        "execution_time": 0.00699925422668457,
        "is_functional_test": true
      }
    ],
    "mcp_insert_document": [
      {
        "case_name": "Insert Document Successfully",
        "purpose": "验证工具可以成功将文档插入到指定的数据库和集合中。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "document": {
            "name": "Test User",
            "age": 30,
            "email": "test@example.com"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"687291c80d1fbb52f4c8c1b2\"}"
        },
        "execution_time": 0.004000663757324219,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document With Empty Fields",
        "purpose": "测试工具是否能处理包含空字段的文档插入操作。",
        "args": {
          "database_name": "test_db",
          "collection_name": "test_collection",
          "document": {
            "name": "",
            "age": null,
            "email": ""
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"687291c80d1fbb52f4c8c1b3\"}"
        },
        "execution_time": 0.003999948501586914,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document Into Nonexistent Collection",
        "purpose": "验证当目标集合不存在时，工具是否能自动创建集合并插入文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "document": {
            "key": "value"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"687291c80d1fbb52f4c8c1b4\"}"
        },
        "execution_time": 0.00800013542175293,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document Into Nonexistent Database",
        "purpose": "测试工具在目标数据库不存在时是否能自动创建数据库和集合并插入文档。",
        "args": {
          "database_name": "does_not_exist_db",
          "collection_name": "new_collection",
          "document": {
            "title": "New Document"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"687291c80d1fbb52f4c8c1b5\"}"
        },
        "execution_time": 0.005651712417602539,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document With Special Characters In Database Name",
        "purpose": "测试数据库名包含特殊字符和Unicode字符时工具是否能正常处理。",
        "args": {
          "database_name": "db@#_\\u6d4b\\u8bd5",
          "collection_name": "test_collection",
          "document": {
            "content": "Special chars test"
          }
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_insert_document: An unexpected error occurred during document insertion: database names cannot contain the character '\\\\'"
        },
        "execution_time": 0.008101224899291992,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document With Invalid Database Name",
        "purpose": "测试无效或不可用的数据库名称时工具是否能正确处理错误。",
        "args": {
          "database_name": "invalid/db*name",
          "collection_name": "test_collection",
          "document": {
            "data": "Invalid database name test"
          }
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_insert_document: An unexpected error occurred during document insertion: database names cannot contain the character '/'"
        },
        "execution_time": 0.008437395095825195,
        "is_functional_test": false
      },
      {
        "case_name": "Unauthorized Insert Attempt",
        "purpose": "验证无权限访问数据库时工具的安全响应机制。",
        "args": {
          "database_name": "admin",
          "collection_name": "system_logs",
          "document": {
            "log": "Unauthorized insert attempt"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"687291c80d1fbb52f4c8c1b6\"}"
        },
        "execution_time": 0.009958982467651367,
        "is_functional_test": false
      },
      {
        "case_name": "Insert Document Without MongoDB Connection",
        "purpose": "测试MongoDB服务不可用时，工具是否能优雅处理连接失败错误。",
        "args": {
          "database_name": "local",
          "collection_name": "startup_log",
          "document": {
            "message": "Testing without MongoDB connection"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"687291c80d1fbb52f4c8c1b7\"}"
        },
        "execution_time": 0.006506681442260742,
        "is_functional_test": false
      }
    ],
    "mcp_find_documents": [
      {
        "case_name": "Basic Document Search With Default Parameters",
        "purpose": "验证使用默认参数时，工具能正确检索集合中的所有文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {}
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.00500035285949707,
        "is_functional_test": true
      },
      {
        "case_name": "Document Search With Custom Query",
        "purpose": "验证使用自定义查询时，工具能正确检索匹配的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "name": "John Doe"
          }
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.007523059844970703,
        "is_functional_test": true
      },
      {
        "case_name": "Document Search With Projection",
        "purpose": "验证使用投影参数时，工具能正确返回指定字段。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {},
          "projection": {
            "name": 1,
            "_id": 0
          }
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.009834766387939453,
        "is_functional_test": true
      },
      {
        "case_name": "Document Search With Limit",
        "purpose": "验证使用限制参数时，工具能正确返回指定数量的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {},
          "limit": 5
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.005510091781616211,
        "is_functional_test": true
      },
      {
        "case_name": "Document Search With Nonexistent Database",
        "purpose": "测试访问不存在的数据库时，工具是否返回错误或空结果。",
        "args": {
          "database_name": "does_not_exist_db",
          "collection_name": "users",
          "query": {}
        },
        "response": {
          "result": "[]"
        },
        "execution_time": 0.008999109268188477,
        "is_functional_test": false
      },
      {
        "case_name": "Document Search With Invalid Collection Name",
        "purpose": "测试集合名称包含特殊字符时，工具是否能正确处理错误。",
        "args": {
          "database_name": "test_db",
          "collection_name": "invalid/collection*name",
          "query": {}
        },
        "response": {
          "result": "[{\"_id\": \"68626d54029e5cd2f7c9b28d\", \"title\": \"\\u6d4b\\u8bd5\\u6587\\u6863\"}, {\"_id\": \"6872568f010f0405cf7c54a2\", \"content\": \"special collection name test\"}, {\"_id\": \"687259cf14abe8d498d2f50b\", \"name\": \"John Doe\", \"age\": 31}]"
        },
        "execution_time": 0.005564212799072266,
        "is_functional_test": false
      },
      {
        "case_name": "Document Search With Large Limit",
        "purpose": "验证工具在请求大量文档时（如10000）是否能正常处理。",
        "args": {
          "database_name": "large_db",
          "collection_name": "large_collection",
          "query": {},
          "limit": 10000
        },
        "response": {
          "result": "[{\"_id\": \"68616ca7c9e50bdcecfe6e7e\", \"content\": \"A very long string that exceeds normal document size limits and may cause performance issues.\", \"metadata\": {\"tags\": [\"large\", \"document\", \"performance\"], \"size\": \"huge\"}, \"data\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}, {\"_id\": \"687259cf14abe8d498d2f50c\", \"data\": \"a_very_long_string_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\"}]"
        },
        "execution_time": 0.009939193725585938,
        "is_functional_test": true
      },
      {
        "case_name": "Unauthorized Access To Restricted Collection",
        "purpose": "验证无权限访问受保护集合时工具的安全响应机制。",
        "args": {
          "database_name": "admin",
          "collection_name": "system.version",
          "query": {}
        },
        "response": {
          "result": "[{\"_id\": \"featureCompatibilityVersion\", \"version\": \"8.0\"}, {\"_id\": \"68626d55029e5cd2f7c9b28f\", \"key\": \"test_key\", \"value\": \"test_value\"}, {\"_id\": \"6863b714e63a60df7d661771\", \"test\": \"unauthorized\"}, {\"_id\": \"687258207c1609156ee10ee5\", \"key\": \"restricted_insert\"}]"
        },
        "execution_time": 0.006651878356933594,
        "is_functional_test": false
      }
    ],
    "mcp_update_document": [
      {
        "case_name": "Update Single Document Successfully",
        "purpose": "验证工具可以成功更新单个匹配的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "user_profiles",
          "query": {
            "username": "john_doe"
          },
          "update": {
            "$set": {
              "email": "john_new@example.com"
            }
          }
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.004999876022338867,
        "is_functional_test": true
      },
      {
        "case_name": "Update Multiple Documents With UpdateMany",
        "purpose": "验证当设置 update_many=True 时，工具可以更新所有匹配的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "user_profiles",
          "query": {
            "status": "inactive"
          },
          "update": {
            "$set": {
              "status": "active"
            }
          },
          "update_many": true
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.0060040950775146484,
        "is_functional_test": true
      },
      {
        "case_name": "Query Matches No Documents",
        "purpose": "测试查询条件不匹配任何文档时的行为，应返回 matched_count=0。",
        "args": {
          "database_name": "test_db",
          "collection_name": "user_profiles",
          "query": {
            "username": "nonexistent_user"
          },
          "update": {
            "$set": {
              "email": "new_email@example.com"
            }
          }
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.007998228073120117,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Database Name Handling",
        "purpose": "测试使用无效数据库名称时是否能正确处理错误。",
        "args": {
          "database_name": "invalid/db*name",
          "collection_name": "user_profiles",
          "query": {
            "username": "john_doe"
          },
          "update": {
            "$set": {
              "email": "john_new@example.com"
            }
          }
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_update_document: An unexpected error occurred during document update: database names cannot contain the character '/'"
        },
        "execution_time": 0.004265308380126953,
        "is_functional_test": false
      },
      {
        "case_name": "Unauthorized Access Attempt During Update",
        "purpose": "验证无权限访问数据库时工具的安全响应机制。",
        "args": {
          "database_name": "admin",
          "collection_name": "system.version",
          "query": {
            "version": "1.0"
          },
          "update": {
            "$set": {
              "version": "2.0"
            }
          }
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.00400090217590332,
        "is_functional_test": false
      },
      {
        "case_name": "Update With Special Characters In Fields",
        "purpose": "测试字段名包含特殊字符和Unicode字符时更新操作是否正常。",
        "args": {
          "database_name": "test_db",
          "collection_name": "special_chars_collection",
          "query": {
            "\\u590d\\u6742\\u5b57\\u6bb5": "test_value"
          },
          "update": {
            "$set": {
              "new_\\u5b57\\u6bb5": "updated_value"
            }
          }
        },
        "response": {
          "result": "{\"matched_count\": 0, \"modified_count\": 0}"
        },
        "execution_time": 0.004001140594482422,
        "is_functional_test": true
      },
      {
        "case_name": "Test Tool Without MongoDB Connection",
        "purpose": "测试MongoDB服务不可用时，工具是否能优雅处理连接失败错误。",
        "args": {
          "database_name": "local",
          "collection_name": "startup_log",
          "query": {},
          "update": {}
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_update_document: An unexpected error occurred during document update: update cannot be empty"
        },
        "execution_time": 0.006288766860961914,
        "is_functional_test": false
      }
    ],
    "mcp_delete_document": [
      {
        "case_name": "Delete Single Document Successfully",
        "purpose": "验证工具可以成功删除一个匹配查询条件的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "username": "test_user"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.004999876022338867,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Multiple Documents Successfully",
        "purpose": "验证当delete_many参数为True时，工具可以删除所有匹配查询条件的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "user_profiles",
          "query": {
            "status": "inactive"
          },
          "delete_many": true
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.00800013542175293,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt Delete Without Matching Documents",
        "purpose": "验证在没有匹配文档的情况下，工具不会报错且返回0删除数。",
        "args": {
          "database_name": "mcp-test",
          "collection_name": "nonexistent_collection",
          "query": {
            "id": "nonexistent_id"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.0044918060302734375,
        "is_functional_test": true
      },
      {
        "case_name": "Delete With Special Characters In Database Name",
        "purpose": "测试数据库名包含特殊字符和Unicode字符时工具是否能正常处理。",
        "args": {
          "database_name": "db@#_\\u6d4b\\u8bd5",
          "collection_name": "special_chars_collection",
          "query": {
            "key": "value"
          }
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_delete_document: An unexpected error occurred during document deletion: database names cannot contain the character '\\\\'"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": true
      },
      {
        "case_name": "Unauthorized Access Attempt During Deletion",
        "purpose": "验证无权限访问数据库时工具的安全响应机制。",
        "args": {
          "database_name": "admin",
          "collection_name": "system.version",
          "query": {
            "version": "1.0"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.007000446319580078,
        "is_functional_test": false
      },
      {
        "case_name": "Delete From Non-Existent Database",
        "purpose": "测试尝试从不存在的数据库中删除文档时工具是否能正确处理错误。",
        "args": {
          "database_name": "does_not_exist_db",
          "collection_name": "users",
          "query": {
            "username": "test_user"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.003823518753051758,
        "is_functional_test": false
      },
      {
        "case_name": "Delete From Non-Existent Collection",
        "purpose": "测试尝试从不存在的集合中删除文档时工具是否能正确处理错误。",
        "args": {
          "database_name": "test_db",
          "collection_name": "invalid_collection",
          "query": {
            "id": "123"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.003004312515258789,
        "is_functional_test": false
      },
      {
        "case_name": "Delete With Corrupted Query Structure",
        "purpose": "测试使用格式错误或不合法的查询结构时工具的错误处理能力。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "$invalid_operator": {
              "username": "test_user"
            }
          }
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_delete_document: An unexpected error occurred during document deletion: unknown top level operator: $invalid_operator. If you have a field name that starts with a '$' symbol, consider using $getField or $setField., full error: {'index': 0, 'code': 2, 'errmsg': \"unknown top level operator: $invalid_operator. If you have a field name that starts with a '$' symbol, consider using $getField or $setField.\"}"
        },
        "execution_time": 0.0049974918365478516,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 47
}