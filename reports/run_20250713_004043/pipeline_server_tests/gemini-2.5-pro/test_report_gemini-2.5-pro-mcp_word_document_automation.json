{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "gemini-2.5-pro-mcp_word_document_automation",
  "server_path": "workspace/pipeline-output-servers/gemini-2.5-pro/mcp_word_document_automation/refined/server.py",
  "timestamp": "2025-07-13T00:43:46.237151",
  "tools": [
    {
      "name": "create_document",
      "description": "\n    Creates a new, empty Word document (.docx) and sets its core metadata properties.\n\n    Args:\n        file_path (str): The full path where the new Word document will be saved (e.g., \"C:/docs/mydocument.docx\").\n        title (str, optional): The title of the document.\n        author (str, optional): The author's name.\n        subject (str, optional): The subject of the document.\n        keywords (str, optional): Comma-separated keywords for the document.\n\n    Returns:\n        dict: A dictionary confirming the action, e.g., {\"status\": \"success\", \"file_path\": \"C:/docs/mydocument.docx\"}.\n\n    Example:\n        create_document(file_path=\"mydocument.docx\", title=\"My Doc\", author=\"John Doe\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "title": {
            "default": null,
            "title": "Title",
            "type": "string"
          },
          "author": {
            "default": null,
            "title": "Author",
            "type": "string"
          },
          "subject": {
            "default": null,
            "title": "Subject",
            "type": "string"
          },
          "keywords": {
            "default": null,
            "title": "Keywords",
            "type": "string"
          }
        },
        "required": [
          "file_path"
        ],
        "title": "create_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "get_document_text",
      "description": "\n    Extracts and returns all text content from an existing Word document.\n\n    Args:\n        file_path (str): The path to the Word document to be read.\n\n    Returns:\n        str: The complete text content of the document, with paragraphs separated by newline characters.\n\n    Example:\n        get_document_text(file_path=\"mydocument.docx\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          }
        },
        "required": [
          "file_path"
        ],
        "title": "get_document_textArguments",
        "type": "object"
      }
    },
    {
      "name": "add_paragraph",
      "description": "\n    Adds a new paragraph of text to the end of a specified Word document.\n\n    Args:\n        file_path (str): The path to the Word document.\n        text (str): The text content to be added as a new paragraph.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        add_paragraph(file_path=\"mydocument.docx\", text=\"This is a new paragraph.\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "text": {
            "title": "Text",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "text"
        ],
        "title": "add_paragraphArguments",
        "type": "object"
      }
    },
    {
      "name": "add_heading",
      "description": "\n    Adds a heading to the end of a Word document with a specified level.\n\n    Args:\n        file_path (str): The path to the Word document.\n        text (str): The text of the heading.\n        level (int): The heading level, from 0 (Title) to 9. Level 1 is a main heading.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        add_heading(file_path=\"mydocument.docx\", text=\"Chapter 1\", level=1)\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "text": {
            "title": "Text",
            "type": "string"
          },
          "level": {
            "title": "Level",
            "type": "integer"
          }
        },
        "required": [
          "file_path",
          "text",
          "level"
        ],
        "title": "add_headingArguments",
        "type": "object"
      }
    },
    {
      "name": "create_custom_style",
      "description": "\n    Creates a new custom paragraph style within the document.\n\n    Args:\n        file_path (str): The path to the Word document.\n        style_name (str): The name for the new custom style.\n        font_name (str, optional): The font name (e.g., \"Calibri\", \"Times New Roman\").\n        font_size_pt (int, optional): The font size in points (e.g., 12).\n        bold (bool, optional): Whether the text should be bold. Defaults to False.\n        italic (bool, optional): Whether the text should be italic. Defaults to False.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        create_custom_style(file_path=\"mydocument.docx\", style_name=\"MyStyle\", font_name=\"Arial\", font_size_pt=14, bold=True)\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "style_name": {
            "title": "Style Name",
            "type": "string"
          },
          "font_name": {
            "default": "Calibri",
            "title": "Font Name",
            "type": "string"
          },
          "font_size_pt": {
            "default": 12,
            "title": "Font Size Pt",
            "type": "integer"
          },
          "bold": {
            "default": false,
            "title": "Bold",
            "type": "boolean"
          },
          "italic": {
            "default": false,
            "title": "Italic",
            "type": "boolean"
          }
        },
        "required": [
          "file_path",
          "style_name"
        ],
        "title": "create_custom_styleArguments",
        "type": "object"
      }
    },
    {
      "name": "format_text",
      "description": "\n    Finds the first occurrence of a specific text string in the document and applies bold and/or italic formatting to it.\n    This is a simplified implementation. It formats the entire run containing the text, not just the text itself.\n\n    Args:\n        file_path (str): The path to the Word document.\n        search_text (str): The text to find and format.\n        bold (bool, optional): Apply bold formatting. Defaults to False.\n        italic (bool, optional): Apply italic formatting. Defaults to False.\n\n    Returns:\n        dict: A dictionary indicating success or failure.\n\n    Example:\n        format_text(file_path=\"mydocument.docx\", search_text=\"important\", bold=True)\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "search_text": {
            "title": "Search Text",
            "type": "string"
          },
          "bold": {
            "default": false,
            "title": "Bold",
            "type": "boolean"
          },
          "italic": {
            "default": false,
            "title": "Italic",
            "type": "boolean"
          }
        },
        "required": [
          "file_path",
          "search_text"
        ],
        "title": "format_textArguments",
        "type": "object"
      }
    },
    {
      "name": "protect_document",
      "description": "\n    Sets write protection on a Word document. Note: This is not supported by the current library.\n\n    Args:\n        file_path (str): The path to the Word document.\n        password (str): The password required to disable protection.\n\n    Returns:\n        dict: A dictionary confirming the attempt.\n\n    Example:\n        protect_document(file_path=\"mydocument.docx\", password=\"password123\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "password": {
            "title": "Password",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "password"
        ],
        "title": "protect_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "add_footnote_to_document",
      "description": "\n    Adds a footnote to a specific paragraph. Note: This is not directly supported by the current library.\n\n    Args:\n        file_path (str): The path to the Word document.\n        paragraph_index (int): The 0-based index of the paragraph for the footnote.\n        footnote_text (str): The text content of the footnote.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        add_footnote_to_document(file_path=\"mydocument.docx\", paragraph_index=0, footnote_text=\"This is a footnote.\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "paragraph_index": {
            "title": "Paragraph Index",
            "type": "integer"
          },
          "footnote_text": {
            "title": "Footnote Text",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "paragraph_index",
          "footnote_text"
        ],
        "title": "add_footnote_to_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "get_paragraph_text_from_document",
      "description": "\n    Retrieves the text from a single, specific paragraph based on its index.\n\n    Args:\n        file_path (str): The path to the Word document.\n        paragraph_index (int): The 0-based index of the paragraph to retrieve.\n\n    Returns:\n        str: The text content of the specified paragraph or an error message.\n\n    Example:\n        get_paragraph_text_from_document(file_path=\"mydocument.docx\", paragraph_index=0)\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "paragraph_index": {
            "title": "Paragraph Index",
            "type": "integer"
          }
        },
        "required": [
          "file_path",
          "paragraph_index"
        ],
        "title": "get_paragraph_text_from_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "find_text_in_document",
      "description": "\n    Searches the document for a text string and returns the indices of all paragraphs containing the text.\n\n    Args:\n        file_path (str): The path to the Word document.\n        search_text (str): The text to search for.\n\n    Returns:\n        list: A list of integer indices for each paragraph where the text was found, or a list containing an error dictionary.\n\n    Example:\n        find_text_in_document(file_path=\"mydocument.docx\", search_text=\"hello\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "search_text": {
            "title": "Search Text",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "search_text"
        ],
        "title": "find_text_in_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "add_table",
      "description": "\n    Adds a table with a specified number of rows and columns to the end of the document.\n\n    Args:\n        file_path (str): The path to the Word document.\n        rows (int): The number of rows in the table.\n        cols (int): The number of columns in the table.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        add_table(file_path=\"mydocument.docx\", rows=3, cols=4)\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "rows": {
            "title": "Rows",
            "type": "integer"
          },
          "cols": {
            "title": "Cols",
            "type": "integer"
          }
        },
        "required": [
          "file_path",
          "rows",
          "cols"
        ],
        "title": "add_tableArguments",
        "type": "object"
      }
    },
    {
      "name": "add_image",
      "description": "\n    Adds an image from a local path to the end of the document.\n\n    Args:\n        doc_file_path (str): The path to the Word document.\n        image_file_path (str): The path to the image file to be inserted.\n        width_inches (float, optional): The width of the image in inches.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        add_image(doc_file_path=\"mydocument.docx\", image_file_path=\"myimage.png\", width_inches=2.5)\n    ",
      "args_schema": {
        "properties": {
          "doc_file_path": {
            "title": "Doc File Path",
            "type": "string"
          },
          "image_file_path": {
            "title": "Image File Path",
            "type": "string"
          },
          "width_inches": {
            "default": null,
            "title": "Width Inches",
            "type": "number"
          }
        },
        "required": [
          "doc_file_path",
          "image_file_path"
        ],
        "title": "add_imageArguments",
        "type": "object"
      }
    },
    {
      "name": "add_page_break",
      "description": "\n    Inserts a page break at the end of the document.\n\n    Args:\n        file_path (str): The path to the Word document.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        add_page_break(file_path=\"mydocument.docx\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          }
        },
        "required": [
          "file_path"
        ],
        "title": "add_page_breakArguments",
        "type": "object"
      }
    },
    {
      "name": "add_footer",
      "description": "\n    Adds or replaces the footer for the default section of the document.\n\n    Args:\n        file_path (str): The path to the Word document.\n        footer_text (str): The text to place in the footer.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        add_footer(file_path=\"mydocument.docx\", footer_text=\"Copyright 2024\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "footer_text": {
            "title": "Footer Text",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "footer_text"
        ],
        "title": "add_footerArguments",
        "type": "object"
      }
    },
    {
      "name": "add_header",
      "description": "\n    Adds or replaces the header for the default section of the document.\n\n    Args:\n        file_path (str): The path to the Word document.\n        header_text (str): The text to place in the header.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        add_header(file_path=\"mydocument.docx\", header_text=\"My Document Header\")\n    ",
      "args_schema": {
        "properties": {
          "file_path": {
            "title": "File Path",
            "type": "string"
          },
          "header_text": {
            "title": "Header Text",
            "type": "string"
          }
        },
        "required": [
          "file_path",
          "header_text"
        ],
        "title": "add_headerArguments",
        "type": "object"
      }
    },
    {
      "name": "convert_to_pdf",
      "description": "\n    Converts a Word document to a PDF file.\n\n    Args:\n        docx_path (str): The path to the source Word document.\n        pdf_path (str): The path where the output PDF file will be saved.\n\n    Returns:\n        dict: A dictionary confirming the action.\n\n    Example:\n        convert_to_pdf(docx_path=\"mydocument.docx\", pdf_path=\"mydocument.pdf\")\n    ",
      "args_schema": {
        "properties": {
          "docx_path": {
            "title": "Docx Path",
            "type": "string"
          },
          "pdf_path": {
            "title": "Pdf Path",
            "type": "string"
          }
        },
        "required": [
          "docx_path",
          "pdf_path"
        ],
        "title": "convert_to_pdfArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "create_document": [
      {
        "case_name": "Create document with minimal required parameters",
        "purpose": "验证使用最小必要参数创建空Word文档的基本功能",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_document.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\test_document.docx\"\n}"
        },
        "execution_time": 0.01952075958251953,
        "is_functional_test": true
      },
      {
        "case_name": "Create document with all metadata fields",
        "purpose": "验证可以成功设置标题、作者、主题和关键词等元数据字段",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_document.docx",
          "title": "Test Document Title",
          "author": "Jane Smith",
          "subject": "Document Subject",
          "keywords": "test,document,automation"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\metadata_document.docx\"\n}"
        },
        "execution_time": 0.02595210075378418,
        "is_functional_test": true
      },
      {
        "case_name": "Create document in a deeply nested directory path",
        "purpose": "测试工具能否处理超长文件路径的创建操作",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\deeply\\nested\\path\\that\\exceeds\\normal\\length_limit\\longpath_document.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"[Errno 2] No such file or directory: 'D:\\\\\\\\devWorkspace\\\\\\\\MCPServer-Generator\\\\\\\\testSystem\\\\\\\\testFiles\\\\\\\\deeply\\\\\\\\nested\\\\\\\\path\\\\\\\\that\\\\\\\\exceeds\\\\\\\\normal\\\\\\\\length_limit\\\\\\\\longpath_document.docx'\"\n}"
        },
        "execution_time": 0.010999441146850586,
        "is_functional_test": true
      },
      {
        "case_name": "Create document with special characters in file name",
        "purpose": "验证是否支持包含特殊字符的文件名",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_@#￥%——&×.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special_@#￥%——&×.docx\"\n}"
        },
        "execution_time": 0.03327798843383789,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to create document in non-writable directory",
        "purpose": "验证工具在目标目录不可写时能否正确处理错误",
        "args": {
          "file_path": "C:\\Windows\\System32\\locked_directory\\unwritable_document.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"[Errno 2] No such file or directory: 'C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\locked_directory\\\\\\\\unwritable_document.docx'\"\n}"
        },
        "execution_time": 0.010002374649047852,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to create document with invalid file extension",
        "purpose": "验证工具是否能检测并拒绝非法扩展名",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_extension.txt"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"File path must be a non-empty string ending with .docx\"\n}"
        },
        "execution_time": 0.00400853157043457,
        "is_functional_test": false
      },
      {
        "case_name": "Create document with malicious content in metadata",
        "purpose": "验证元数据字段是否安全处理潜在恶意输入",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\malicious_metadata.docx",
          "title": "<script>alert('xss')</script>",
          "author": "John Doe; rm -rf /",
          "keywords": "exploit,attack,security"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\malicious_metadata.docx\"\n}"
        },
        "execution_time": 0.0224912166595459,
        "is_functional_test": false
      },
      {
        "case_name": "Create document with empty metadata fields",
        "purpose": "验证工具在所有可选参数为空时的行为是否符合预期",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_metadata.docx",
          "title": "",
          "author": "",
          "subject": "",
          "keywords": ""
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_metadata.docx\"\n}"
        },
        "execution_time": 0.021002769470214844,
        "is_functional_test": true
      }
    ],
    "get_document_text": [
      {
        "case_name": "Read text from a standard document",
        "purpose": "验证从标准Word文档中读取文本内容的基本功能",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_document.docx"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.01251077651977539,
        "is_functional_test": true
      },
      {
        "case_name": "Read text from a document with metadata",
        "purpose": "验证工具能否正确提取包含元数据的文档中的文本内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_document.docx"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.012009382247924805,
        "is_functional_test": true
      },
      {
        "case_name": "Read text from a document with special characters in content",
        "purpose": "验证工具能否正确处理包含特殊字符的文档内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_char_content.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"File path must point to a .docx file.\"}"
        },
        "execution_time": 0.001999378204345703,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to read text from a non-existent file",
        "purpose": "验证工具在文件不存在时是否能正确返回错误信息",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_document.docx"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_document.docx\"}"
        },
        "execution_time": 0.003010272979736328,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to read text from a non-docx file",
        "purpose": "验证工具是否拒绝非.docx扩展名的文件",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"File path must point to a .docx file.\"}"
        },
        "execution_time": 0.0049991607666015625,
        "is_functional_test": false
      },
      {
        "case_name": "Read text from a deeply nested document path",
        "purpose": "测试工具能否处理超长路径的文档读取操作",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_file_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems.docx"
        },
        "response": {
          "result": "This is a test paragraph.\n\nThis is a paragraph with special characters: !@#$%^&*()_+{}[]|\\:;\"',./<>?\nA very long paragraph consisting of repeated text to simulate large input. This will be repeated multiple times to ensure the tool can handle long paragraphs without errors. This will be repeated multiple times to ensure the tool can handle long paragraphs without errors.\n<script>alert('malicious');</script>\nA\nMain Title\nChapter 1\n\nHeading with !@#$%^&*()_+{}[]|\\:;\"',./<>?\nMaximum Level Heading\n<script>alert('malicious');</script>\nInvalid Level Heading\nA\n\n\n\n\n\n\n\n"
        },
        "execution_time": 0.03204822540283203,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to read text from a restricted access directory",
        "purpose": "验证工具在目标目录不可读时能否正确处理错误",
        "args": {
          "file_path": "C:\\Windows\\System32\\config\\systemprofile\\restricted_document.docx"
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"The specified file does not exist: C:\\\\Windows\\\\System32\\\\config\\\\systemprofile\\\\restricted_document.docx\"}"
        },
        "execution_time": 0.0029985904693603516,
        "is_functional_test": false
      },
      {
        "case_name": "Read empty document with no text content",
        "purpose": "验证工具对空文档的处理是否符合预期，应返回空字符串",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_metadata.docx"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.011548042297363281,
        "is_functional_test": true
      }
    ],
    "add_paragraph": [
      {
        "case_name": "Add paragraph to an empty document",
        "purpose": "验证向一个空文档中添加段落的基本功能是否正常工作",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_metadata.docx",
          "text": "This is a new paragraph added to the empty document."
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Paragraph added.\"\n}"
        },
        "execution_time": 0.01999974250793457,
        "is_functional_test": true
      },
      {
        "case_name": "Add paragraph to a standard document with existing content",
        "purpose": "验证在已有内容的文档末尾正确添加新段落的功能",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_document.docx",
          "text": "This is another paragraph appended to the end of the document."
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Paragraph added.\"\n}"
        },
        "execution_time": 0.02482295036315918,
        "is_functional_test": true
      },
      {
        "case_name": "Add paragraph containing special characters",
        "purpose": "验证工具能否安全地处理包含特殊字符的文本内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_document.docx",
          "text": "This paragraph contains special characters: !@#$%^&*()_+{}[]|\\:;\"',./<>?"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Paragraph added.\"\n}"
        },
        "execution_time": 0.02312302589416504,
        "is_functional_test": true
      },
      {
        "case_name": "Add very long paragraph to test performance and handling",
        "purpose": "测试添加超长段落时工具的性能和稳定性",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_@#￥%——&×.docx",
          "text": "A very long paragraph consisting of repeated text to simulate large input. This will be repeated multiple times to ensure the tool can handle long paragraphs without errors. This will be repeated multiple times to ensure the tool can handle long paragraphs without errors."
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Paragraph added.\"\n}"
        },
        "execution_time": 0.02239990234375,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to add paragraph to non-existent file",
        "purpose": "验证工具在目标文件不存在时是否能正确返回错误信息",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_document.docx",
          "text": "This should not be added as the file does not exist."
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_document.docx\"\n}"
        },
        "execution_time": 0.006518840789794922,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to add paragraph to a non-docx file",
        "purpose": "验证工具是否拒绝向非.docx扩展名的文件添加段落",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "text": "This should not be added as the file is not a .docx document."
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"File path must point to a .docx file.\"\n}"
        },
        "execution_time": 0.0026416778564453125,
        "is_functional_test": false
      },
      {
        "case_name": "Add paragraph with potentially malicious content",
        "purpose": "验证工具是否安全处理可能含有恶意脚本的内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\malicious_metadata.docx",
          "text": "<script>alert('malicious');</script>"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Paragraph added.\"\n}"
        },
        "execution_time": 0.03245282173156738,
        "is_functional_test": false
      },
      {
        "case_name": "Add paragraph to a document in a deeply nested path",
        "purpose": "测试工具能否处理超长路径的文档追加操作",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_file_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems.docx",
          "text": "Appending a new paragraph to a document located at a very deep directory structure."
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Paragraph added.\"\n}"
        },
        "execution_time": 0.0280001163482666,
        "is_functional_test": true
      }
    ],
    "get_paragraph_text_from_document": [
      {
        "case_name": "Retrieve text from first paragraph of a standard document",
        "purpose": "验证从标准Word文档中读取第一个段落的基本功能",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_document.docx",
          "paragraph_index": 0
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\test_document.docx\"}"
        },
        "execution_time": 0.005000114440917969,
        "is_functional_test": true
      },
      {
        "case_name": "Retrieve text from a specific paragraph in a document with metadata",
        "purpose": "验证从包含元数据的文档中读取特定段落内容的功能",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_document.docx",
          "paragraph_index": 2
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"Paragraph index out of bounds.\"}"
        },
        "execution_time": 0.010088682174682617,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to retrieve text from a non-existent paragraph index",
        "purpose": "验证工具在指定段落索引不存在时能否正确处理错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_document.docx",
          "paragraph_index": 999
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\test_document.docx\"}"
        },
        "execution_time": 0.00400233268737793,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to retrieve text from a document with invalid file extension",
        "purpose": "验证工具是否拒绝非.docx扩展名的文件",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "paragraph_index": 0
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\existing_file.txt\"}"
        },
        "execution_time": 0.002999544143676758,
        "is_functional_test": false
      },
      {
        "case_name": "Retrieve text from a document with special characters in paragraph",
        "purpose": "验证工具能否正确处理包含特殊字符的段落内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer\\Generator\\testSystem\\testFiles\\very_long_file_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems.docx",
          "paragraph_index": 1
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer\\\\Generator\\\\testSystem\\\\testFiles\\\\very_long_file_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems.docx\"}"
        },
        "execution_time": 0.004506826400756836,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to read text from a non-existent file",
        "purpose": "验证工具在文件不存在时是否能正确返回错误信息",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_document.docx",
          "paragraph_index": 0
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_document.docx\"}"
        },
        "execution_time": 0.005005836486816406,
        "is_functional_test": false
      },
      {
        "case_name": "Retrieve text from a deeply nested document path",
        "purpose": "测试工具能否处理超长路径的文档读取操作",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer\\Generator\\testSystem\\testFiles\\very_long_file_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems.docx",
          "paragraph_index": 3
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer\\\\Generator\\\\testSystem\\\\testFiles\\\\very_long_file_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems.docx\"}"
        },
        "execution_time": 0.005009651184082031,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to retrieve text from a restricted access directory",
        "purpose": "验证工具在目标目录不可读时能否正确处理错误",
        "args": {
          "file_path": "C:\\Windows\\System32\\config\\systemprofile\\restricted_document.docx",
          "paragraph_index": 0
        },
        "response": {
          "result": "{\"status\": \"error\", \"message\": \"The specified file does not exist: C:\\\\Windows\\\\System32\\\\config\\\\systemprofile\\\\restricted_document.docx\"}"
        },
        "execution_time": 0.0035059452056884766,
        "is_functional_test": false
      }
    ],
    "find_text_in_document": [
      {
        "case_name": "Basic text search in document with existing content",
        "purpose": "验证工具能否在包含目标文本的文档中正确返回段落索引",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_document.docx",
          "search_text": "Document Subject"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.027012109756469727,
        "is_functional_test": true
      },
      {
        "case_name": "Search for non-existent text in a valid document",
        "purpose": "验证当搜索文本不存在于文档中时是否返回空列表",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_metadata.docx",
          "search_text": "nonexistenttext"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.015128374099731445,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to search in a non-docx file",
        "purpose": "验证工具是否拒绝非.docx扩展名的文件路径",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_mskanji.csv",
          "search_text": "test"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"File path must point to a .docx file.\"\n}"
        },
        "execution_time": 0.009003162384033203,
        "is_functional_test": false
      },
      {
        "case_name": "Search with empty search text",
        "purpose": "测试空搜索文本的边界条件，期望返回错误或空结果",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_document.docx",
          "search_text": ""
        },
        "response": {
          "result": "0"
        },
        "execution_time": 0.022003889083862305,
        "is_functional_test": false
      },
      {
        "case_name": "Search in a deeply nested path document",
        "purpose": "验证工具对超长路径的文档搜索能力",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_file_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems.docx",
          "search_text": "paragraph"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_file_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems.docx\"\n}"
        },
        "execution_time": 0.006001472473144531,
        "is_functional_test": true
      },
      {
        "case_name": "Search in a restricted access directory",
        "purpose": "验证工具在无权限访问文件时是否能正确处理错误",
        "args": {
          "file_path": "C:\\Windows\\System32\\config\\systemprofile\\restricted_document.docx",
          "search_text": "test"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: C:\\\\Windows\\\\System32\\\\config\\\\systemprofile\\\\restricted_document.docx\"\n}"
        },
        "execution_time": 0.008009910583496094,
        "is_functional_test": false
      },
      {
        "case_name": "Search with special characters in search text",
        "purpose": "验证工具是否支持特殊字符作为搜索内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\malicious_metadata.docx",
          "search_text": "<script>alert('xss')</script>"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.013511419296264648,
        "is_functional_test": true
      },
      {
        "case_name": "Search in an empty document",
        "purpose": "验证工具对空文档的搜索行为是否符合预期",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_metadata.docx",
          "search_text": "anytext"
        },
        "response": {
          "result": ""
        },
        "execution_time": 0.029872655868530273,
        "is_functional_test": true
      }
    ],
    "add_heading": [
      {
        "case_name": "Add heading with minimal required parameters",
        "purpose": "验证使用最小必要参数向Word文档末尾添加标题的基本功能",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_metadata.docx",
          "text": "Main Heading",
          "level": 1
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Heading added.\"\n}"
        },
        "execution_time": 0.02120494842529297,
        "is_functional_test": true
      },
      {
        "case_name": "Add heading with level 0 (Title)",
        "purpose": "验证工具支持添加级别为0（Title）的标题",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_metadata.docx",
          "text": "Document Title",
          "level": 0
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Heading added.\"\n}"
        },
        "execution_time": 0.025509119033813477,
        "is_functional_test": true
      },
      {
        "case_name": "Add heading with maximum allowed level 9",
        "purpose": "验证工具支持添加最大允许级别9的标题",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_metadata.docx",
          "text": "Sub-sub-sub Heading Level 9",
          "level": 9
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Heading added.\"\n}"
        },
        "execution_time": 0.025244474411010742,
        "is_functional_test": true
      },
      {
        "case_name": "Add heading with special characters in text",
        "purpose": "验证标题文本中包含特殊字符时能否正确处理",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_metadata.docx",
          "text": "Heading with !@#$%^&*()_+{}[]|\\:;\"',./<>?",
          "level": 2
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Heading added.\"\n}"
        },
        "execution_time": 0.03208661079406738,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to add heading to non-existent file",
        "purpose": "验证工具在目标文件不存在时能否正确处理错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_document.docx",
          "text": "Invalid File Heading",
          "level": 1
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_document.docx\"\n}"
        },
        "execution_time": 0.0019521713256835938,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to add heading with invalid level below 0",
        "purpose": "验证工具是否能检测并拒绝小于0的无效标题级别",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_metadata.docx",
          "text": "Negative Level Heading",
          "level": -1
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Heading level must be an integer between 0 and 9.\"\n}"
        },
        "execution_time": 0.0019998550415039062,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to add heading with invalid level above 9",
        "purpose": "验证工具是否能检测并拒绝大于9的无效标题级别",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_metadata.docx",
          "text": "Too High Level Heading",
          "level": 10
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Heading level must be an integer between 0 and 9.\"\n}"
        },
        "execution_time": 0.0019998550415039062,
        "is_functional_test": false
      },
      {
        "case_name": "Add heading with malicious content in text",
        "purpose": "验证工具是否安全地处理潜在恶意输入内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_metadata.docx",
          "text": "<script>alert('malicious');</script>",
          "level": 3
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Heading added.\"\n}"
        },
        "execution_time": 0.022251129150390625,
        "is_functional_test": false
      }
    ],
    "add_table": [
      {
        "case_name": "Add table with minimal required parameters",
        "purpose": "验证使用最小必要参数在文档末尾添加表格的基本功能",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_metadata.docx",
          "rows": 3,
          "cols": 4
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Table added.\"\n}"
        },
        "execution_time": 0.019973039627075195,
        "is_functional_test": true
      },
      {
        "case_name": "Add table to a document with existing metadata",
        "purpose": "验证在包含元数据的文档中正确添加表格的功能",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_document.docx",
          "rows": 5,
          "cols": 2
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Table added.\"\n}"
        },
        "execution_time": 0.02400350570678711,
        "is_functional_test": true
      },
      {
        "case_name": "Add table with zero rows",
        "purpose": "验证工具是否拒绝行数为零的非法输入",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_metadata.docx",
          "rows": 0,
          "cols": 4
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Rows and columns must be positive integers.\"\n}"
        },
        "execution_time": 0.0029990673065185547,
        "is_functional_test": false
      },
      {
        "case_name": "Add table with zero columns",
        "purpose": "验证工具是否拒绝列数为零的非法输入",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_metadata.docx",
          "rows": 3,
          "cols": 0
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Rows and columns must be positive integers.\"\n}"
        },
        "execution_time": 0.0029990673065185547,
        "is_functional_test": false
      },
      {
        "case_name": "Add table to non-existent file",
        "purpose": "验证工具能否正确处理目标文件不存在的情况",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_document.docx",
          "rows": 2,
          "cols": 2
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_document.docx\"\n}"
        },
        "execution_time": 0.0020008087158203125,
        "is_functional_test": false
      },
      {
        "case_name": "Add table with special characters in cell content",
        "purpose": "验证表格内容是否能安全处理特殊字符（如脚本注入）",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\malicious_metadata.docx",
          "rows": 1,
          "cols": 1
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Table added.\"\n}"
        },
        "execution_time": 0.0240018367767334,
        "is_functional_test": false
      },
      {
        "case_name": "Add very large table",
        "purpose": "测试工具对极限大小表格的支持能力",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_metadata.docx",
          "rows": 100,
          "cols": 100
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Table added.\"\n}"
        },
        "execution_time": 0.061008453369140625,
        "is_functional_test": true
      },
      {
        "case_name": "Add table to read-only directory",
        "purpose": "验证工具在目标目录不可写时能否正确处理错误",
        "args": {
          "file_path": "C:\\Windows\\System32\\locked_directory\\readonly_document.docx",
          "rows": 3,
          "cols": 4
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: C:\\\\Windows\\\\System32\\\\locked_directory\\\\readonly_document.docx\"\n}"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": false
      }
    ],
    "add_image": [
      {
        "case_name": "Add image with minimal required parameters",
        "purpose": "验证使用最小必要参数向文档中插入图片的基本功能",
        "args": {
          "doc_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_metadata.docx",
          "image_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"An unexpected error occurred: \"\n}"
        },
        "execution_time": 0.025229454040527344,
        "is_functional_test": true
      },
      {
        "case_name": "Add image with specified width in inches",
        "purpose": "验证可以成功设置插入图片的宽度（以英寸为单位）",
        "args": {
          "doc_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_document.docx",
          "image_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\xue.jpg",
          "width_inches": 3.5
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Image added.\"\n}"
        },
        "execution_time": 0.11496663093566895,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to add image to non-existent document",
        "purpose": "验证工具在目标文档不存在时能否正确处理错误",
        "args": {
          "doc_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_document.docx",
          "image_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_document.docx\"\n}"
        },
        "execution_time": 0.0029990673065185547,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to add invalid file as image",
        "purpose": "验证工具是否拒绝非法或非图像文件作为图片插入",
        "args": {
          "doc_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_metadata.docx",
          "image_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_mskanji.csv"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified image file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\test_mskanji.csv\"\n}"
        },
        "execution_time": 0.0030012130737304688,
        "is_functional_test": false
      },
      {
        "case_name": "Add image with special characters in file paths",
        "purpose": "验证工具是否支持包含特殊字符的文档和图片路径",
        "args": {
          "doc_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_@#￥%——&×.docx",
          "image_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\new_icons\\icon_new_directory_icon.png",
          "width_inches": 2.0
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special_@#￥%——&×.docx\"\n}"
        },
        "execution_time": 0.0029985904693603516,
        "is_functional_test": true
      },
      {
        "case_name": "Add image to a document in a deeply nested directory",
        "purpose": "测试工具能否处理超长路径文档中的图片插入操作",
        "args": {
          "doc_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\deeply\\nested\\path\\that\\exceeds\\normal\\length_limit\\longpath_document.docx",
          "image_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\hit.png"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\deeply\\\\nested\\\\path\\\\that\\\\exceeds\\\\normal\\\\length_limit\\\\longpath_document.docx\"\n}"
        },
        "execution_time": 0.004111528396606445,
        "is_functional_test": false
      },
      {
        "case_name": "Add very large image file",
        "purpose": "验证工具能否处理大尺寸图片文件的插入",
        "args": {
          "doc_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_metadata.docx",
          "image_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_large_image.jpg"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified image file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_large_image.jpg\"\n}"
        },
        "execution_time": 0.005006313323974609,
        "is_functional_test": false
      },
      {
        "case_name": "Add image with malicious content in path",
        "purpose": "验证工具是否安全处理潜在恶意文件路径输入",
        "args": {
          "doc_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\malicious_metadata.docx",
          "image_file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\..\\malicious_image.png"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified image file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\..\\\\malicious_image.png\"\n}"
        },
        "execution_time": 0.003489971160888672,
        "is_functional_test": false
      }
    ],
    "add_page_break": [
      {
        "case_name": "Insert page break into a standard document",
        "purpose": "验证在标准Word文档末尾插入分页符的基本功能是否正常",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_document.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\test_document.docx\"\n}"
        },
        "execution_time": 0.004000186920166016,
        "is_functional_test": true
      },
      {
        "case_name": "Insert page break into a document with metadata",
        "purpose": "验证工具能否在包含元数据的文档末尾正确插入分页符",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_document.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Page break added.\"\n}"
        },
        "execution_time": 0.12715387344360352,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to insert page break into non-existent file",
        "purpose": "验证工具在目标文件不存在时能否正确处理错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_document.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_document.docx\"\n}"
        },
        "execution_time": 0.003996849060058594,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to insert page break into non-docx file",
        "purpose": "验证工具是否拒绝对非.docx扩展名的文件执行操作",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"File path must point to a .docx file.\"\n}"
        },
        "execution_time": 0.003000974655151367,
        "is_functional_test": false
      },
      {
        "case_name": "Insert page break into document with special characters in file name",
        "purpose": "验证工具是否支持在含特殊字符的文件名中插入分页符",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_@#￥%——&×.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special_@#￥%——&×.docx\"\n}"
        },
        "execution_time": 0.005514383316040039,
        "is_functional_test": true
      },
      {
        "case_name": "Insert page break into a deeply nested document path",
        "purpose": "测试工具能否处理超长路径的文档并成功插入分页符",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_file_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_file_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems.docx\"\n}"
        },
        "execution_time": 0.0030057430267333984,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to insert page break into read-only directory",
        "purpose": "验证工具在目标目录不可写时能否正确处理错误",
        "args": {
          "file_path": "C:\\Windows\\System32\\locked_directory\\unwritable_document.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: C:\\\\Windows\\\\System32\\\\locked_directory\\\\unwritable_document.docx\"\n}"
        },
        "execution_time": 0.003005504608154297,
        "is_functional_test": false
      },
      {
        "case_name": "Insert page break into empty document",
        "purpose": "验证空文档是否能正常插入分页符而不引发异常",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_metadata.docx"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Page break added.\"\n}"
        },
        "execution_time": 0.04555916786193848,
        "is_functional_test": true
      }
    ],
    "add_footer": [
      {
        "case_name": "Add footer to a standard document",
        "purpose": "验证向标准Word文档添加页脚的基本功能是否正常",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_document.docx",
          "footer_text": "Standard Footer"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\test_document.docx\"\n}"
        },
        "execution_time": 0.0035202503204345703,
        "is_functional_test": true
      },
      {
        "case_name": "Replace existing footer in metadata document",
        "purpose": "验证能否成功替换已有页脚内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_document.docx",
          "footer_text": "New Updated Footer"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Footer updated.\"\n}"
        },
        "execution_time": 0.12157440185546875,
        "is_functional_test": true
      },
      {
        "case_name": "Add footer with special characters",
        "purpose": "验证工具能否正确处理包含特殊字符的页脚文本",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_@#￥%——&×.docx",
          "footer_text": "Footer with !@#$%^&*()_+{}[]|\\:;\"',./<>?"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special_@#￥%——&×.docx\"\n}"
        },
        "execution_time": 0.002999544143676758,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to add footer to non-existent file",
        "purpose": "验证工具在文件不存在时能否正确返回错误信息",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_document.docx",
          "footer_text": "This should fail"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_document.docx\"\n}"
        },
        "execution_time": 0.002000570297241211,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to add footer to non-docx file",
        "purpose": "验证工具是否拒绝非.docx扩展名的文件添加页脚操作",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "footer_text": "Invalid file type footer"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"File path must point to a .docx file.\"\n}"
        },
        "execution_time": 0.0036821365356445312,
        "is_functional_test": false
      },
      {
        "case_name": "Add empty footer to document",
        "purpose": "验证工具能否正确处理空页脚文本的情况",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_metadata.docx",
          "footer_text": ""
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Footer updated.\"\n}"
        },
        "execution_time": 0.07252073287963867,
        "is_functional_test": true
      },
      {
        "case_name": "Add footer to document in restricted access directory",
        "purpose": "验证工具在目标目录不可写时能否正确处理错误",
        "args": {
          "file_path": "C:\\Windows\\System32\\locked_directory\\unwritable_document.docx",
          "footer_text": "Restricted directory footer"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: C:\\\\Windows\\\\System32\\\\locked_directory\\\\unwritable_document.docx\"\n}"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": false
      },
      {
        "case_name": "Add malicious content in footer text",
        "purpose": "验证页脚字段是否安全处理潜在恶意输入",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\malicious_metadata.docx",
          "footer_text": "<script>alert('xss')</script>"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Footer updated.\"\n}"
        },
        "execution_time": 0.02283024787902832,
        "is_functional_test": false
      }
    ],
    "add_header": [
      {
        "case_name": "Add header to a newly created document",
        "purpose": "验证向一个新建文档添加页眉的基本功能是否正常工作",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_document.docx",
          "header_text": "Test Document Header"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\test_document.docx\"\n}"
        },
        "execution_time": 0.0030007362365722656,
        "is_functional_test": true
      },
      {
        "case_name": "Replace existing header in a document with metadata",
        "purpose": "验证工具能否成功替换已有元数据文档的页眉内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_document.docx",
          "header_text": "Updated Metadata Document Header"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Header updated.\"\n}"
        },
        "execution_time": 0.10862302780151367,
        "is_functional_test": true
      },
      {
        "case_name": "Add empty header to an empty metadata document",
        "purpose": "验证在空文档中添加空页眉时的行为是否符合预期",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_metadata.docx",
          "header_text": ""
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Header updated.\"\n}"
        },
        "execution_time": 0.05171370506286621,
        "is_functional_test": true
      },
      {
        "case_name": "Add header containing special characters",
        "purpose": "验证工具是否能正确处理包含特殊字符的页眉文本",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_header_char.docx",
          "header_text": "Header with !@#$%^&*()_+{}[]|\\:;\"',./<>?"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special_header_char.docx\"\n}"
        },
        "execution_time": 0.003001689910888672,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to add header to non-existent file",
        "purpose": "验证工具在文件不存在时能否正确返回错误信息",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_document.docx",
          "header_text": "Nonexistent File Header"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_document.docx\"\n}"
        },
        "execution_time": 0.004555463790893555,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to add header to a non-docx file",
        "purpose": "验证工具是否拒绝为非.docx扩展名的文件添加页眉",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "header_text": "Invalid Extension File Header"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"File path must point to a .docx file.\"\n}"
        },
        "execution_time": 0.002000570297241211,
        "is_functional_test": false
      },
      {
        "case_name": "Add header to document in restricted access directory",
        "purpose": "验证工具在目标目录不可写时能否正确处理错误",
        "args": {
          "file_path": "C:\\Windows\\System32\\locked_directory\\unwritable_document.docx",
          "header_text": "Restricted Directory Header"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: C:\\\\Windows\\\\System32\\\\locked_directory\\\\unwritable_document.docx\"\n}"
        },
        "execution_time": 0.0029985904693603516,
        "is_functional_test": false
      },
      {
        "case_name": "Add header with potentially malicious content",
        "purpose": "验证工具是否安全处理可能包含恶意内容的页眉文本",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\malicious_header.docx",
          "header_text": "<script>alert('xss')</script>"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\malicious_header.docx\"\n}"
        },
        "execution_time": 0.0029997825622558594,
        "is_functional_test": false
      }
    ],
    "create_custom_style": [
      {
        "case_name": "Create custom style with minimal required parameters",
        "purpose": "验证使用最小必要参数创建自定义段落样式的基本功能",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_document.docx",
          "style_name": "MinimalStyle"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\test_document.docx\"\n}"
        },
        "execution_time": 0.006990671157836914,
        "is_functional_test": true
      },
      {
        "case_name": "Create custom style with all optional parameters",
        "purpose": "验证使用所有可选参数创建自定义段落样式的功能",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_document.docx",
          "style_name": "FullFeatureStyle",
          "font_name": "Times New Roman",
          "font_size_pt": 14,
          "bold": true,
          "italic": true
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Style 'FullFeatureStyle' created.\"\n}"
        },
        "execution_time": 0.14937591552734375,
        "is_functional_test": true
      },
      {
        "case_name": "Create custom style with default font and size",
        "purpose": "验证使用默认字体和字号创建自定义段落样式的功能",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_metadata.docx",
          "style_name": "DefaultFontStyle"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Style 'DefaultFontStyle' created.\"\n}"
        },
        "execution_time": 0.048422813415527344,
        "is_functional_test": true
      },
      {
        "case_name": "Create custom style with special characters in style name",
        "purpose": "验证是否支持包含特殊字符的样式名称",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_@#￥%——&×.docx",
          "style_name": "Special@Chars#Style"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special_@#￥%——&×.docx\"\n}"
        },
        "execution_time": 0.0029990673065185547,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to create style in non-existent document",
        "purpose": "验证工具在目标文档不存在时能否正确处理错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_document.docx",
          "style_name": "NonExistentDocStyle"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_document.docx\"\n}"
        },
        "execution_time": 0.0020008087158203125,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to create style in read-only directory",
        "purpose": "验证工具在目标目录只读时能否正确处理错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\readonly_dir\\new_file.docx",
          "style_name": "ReadOnlyDirStyle"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Style 'ReadOnlyDirStyle' created.\"\n}"
        },
        "execution_time": 0.025004863739013672,
        "is_functional_test": false
      },
      {
        "case_name": "Create style with malicious content in style name",
        "purpose": "验证样式名称字段是否安全处理潜在恶意输入",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\malicious_metadata.docx",
          "style_name": "<script>alert('xss')</script>"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"message\": \"Style '<script>alert('xss')</script>' created.\"\n}"
        },
        "execution_time": 0.02352309226989746,
        "is_functional_test": false
      },
      {
        "case_name": "Create style with extreme font size value",
        "purpose": "测试字体大小参数的边界值，确保工具能处理极大或极小的数值",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_document.docx",
          "style_name": "ExtremeFontSizeStyle",
          "font_size_pt": 1638
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\test_document.docx\"\n}"
        },
        "execution_time": 0.003999233245849609,
        "is_functional_test": true
      }
    ],
    "format_text": [
      {
        "case_name": "Apply bold formatting to existing text",
        "purpose": "验证工具能否正确在文档中找到指定文本并应用粗体格式",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_document.docx",
          "search_text": "Document Subject",
          "bold": true
        },
        "response": {
          "result": "{\n  \"status\": \"not_found\",\n  \"message\": \"Text not found.\"\n}"
        },
        "execution_time": 0.016507387161254883,
        "is_functional_test": true
      },
      {
        "case_name": "Apply italic formatting to existing text",
        "purpose": "验证工具能否正确在文档中找到指定文本并应用斜体格式",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_document.docx",
          "search_text": "Jane Smith",
          "italic": true
        },
        "response": {
          "result": "{\n  \"status\": \"not_found\",\n  \"message\": \"Text not found.\"\n}"
        },
        "execution_time": 0.03862714767456055,
        "is_functional_test": true
      },
      {
        "case_name": "Apply both bold and italic formatting",
        "purpose": "验证同时应用粗体和斜体格式的功能是否正常",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_document.docx",
          "search_text": "Test Document Title",
          "bold": true,
          "italic": true
        },
        "response": {
          "result": "{\n  \"status\": \"not_found\",\n  \"message\": \"Text not found.\"\n}"
        },
        "execution_time": 0.021207332611083984,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to format non-existent text",
        "purpose": "验证当搜索文本不存在于文档中时，工具是否能优雅处理错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_document.docx",
          "search_text": "nonexistenttext123",
          "bold": true
        },
        "response": {
          "result": "{\n  \"status\": \"not_found\",\n  \"message\": \"Text not found.\"\n}"
        },
        "execution_time": 0.021921634674072266,
        "is_functional_test": false
      },
      {
        "case_name": "Format text in a document with special characters",
        "purpose": "验证工具能否正确处理包含特殊字符的文档中的文本格式化操作",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special#chars@file!.docx",
          "search_text": "!@#$%^&*()_+{}[]|\\:;\"',./<>?",
          "bold": true
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special#chars@file!.docx\"\n}"
        },
        "execution_time": 0.004517555236816406,
        "is_functional_test": true
      },
      {
        "case_name": "Format text in an empty document",
        "purpose": "验证工具在空文档中尝试格式化操作时的行为是否符合预期",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_metadata.docx",
          "search_text": "important",
          "bold": true
        },
        "response": {
          "result": "{\n  \"status\": \"not_found\",\n  \"message\": \"Text not found.\"\n}"
        },
        "execution_time": 0.026261568069458008,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to format text in a non-docx file",
        "purpose": "验证工具是否拒绝非.docx扩展名的文件进行格式化操作",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "search_text": "important",
          "bold": true
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"File path must point to a .docx file.\"\n}"
        },
        "execution_time": 0.005005836486816406,
        "is_functional_test": false
      },
      {
        "case_name": "Format text with malicious content",
        "purpose": "验证工具是否安全处理潜在恶意输入文本",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\malicious_metadata.docx",
          "search_text": "<script>alert('xss')</script>",
          "bold": true
        },
        "response": {
          "result": "{\n  \"status\": \"not_found\",\n  \"message\": \"Text not found.\"\n}"
        },
        "execution_time": 0.011001110076904297,
        "is_functional_test": false
      }
    ],
    "convert_to_pdf": [
      {
        "case_name": "Convert valid Word document to PDF with standard paths",
        "purpose": "验证将标准Word文档转换为PDF的基本功能是否正常工作",
        "args": {
          "docx_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_document.docx",
          "pdf_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\converted_document.pdf"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\converted_document.pdf\"\n}"
        },
        "execution_time": 0.07000207901000977,
        "is_functional_test": true
      },
      {
        "case_name": "Convert empty Word document to PDF",
        "purpose": "验证工具能否正确处理空的Word文档并生成对应的PDF文件",
        "args": {
          "docx_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_metadata.docx",
          "pdf_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_converted_document.pdf"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\empty_converted_document.pdf\"\n}"
        },
        "execution_time": 0.3468897342681885,
        "is_functional_test": true
      },
      {
        "case_name": "Convert document with special characters in file name",
        "purpose": "验证工具是否支持包含特殊字符的输入和输出文件名",
        "args": {
          "docx_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\special_@#￥%——&×.docx",
          "pdf_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\converted_@#￥%——&×.pdf"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\special_@#￥%——&×.docx\"\n}"
        },
        "execution_time": 0.0029993057250976562,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to convert non-existent Word document",
        "purpose": "验证工具在指定的Word文档不存在时能否正确返回错误信息",
        "args": {
          "docx_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_document.docx",
          "pdf_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\output_nonexistent.pdf"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\nonexistent_document.docx\"\n}"
        },
        "execution_time": 0.003249645233154297,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to convert Word document to a restricted directory",
        "purpose": "验证工具在目标目录不可写时能否正确处理错误",
        "args": {
          "docx_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_document.docx",
          "pdf_path": "C:\\Windows\\System32\\locked_directory\\unwritable_output.pdf"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"[Errno 2] No such file or directory: 'C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\locked_directory\\\\\\\\unwritable_output.pdf'\"\n}"
        },
        "execution_time": 0.023886442184448242,
        "is_functional_test": false
      },
      {
        "case_name": "Convert document with long nested path",
        "purpose": "测试工具能否处理超长路径的Word文档转换操作",
        "args": {
          "docx_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_file_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems.docx",
          "pdf_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\converted_very_long_file_name.pdf"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"The specified file does not exist: D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\very_long_file_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems.docx\"\n}"
        },
        "execution_time": 0.004001140594482422,
        "is_functional_test": true
      },
      {
        "case_name": "Convert document with malicious content in file",
        "purpose": "验证工具是否能安全地处理包含潜在恶意内容的Word文档",
        "args": {
          "docx_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\malicious_metadata.docx",
          "pdf_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\converted_malicious_content.pdf"
        },
        "response": {
          "result": "{\n  \"status\": \"success\",\n  \"file_path\": \"D:\\\\devWorkspace\\\\MCPServer-Generator\\\\testSystem\\\\testFiles\\\\converted_malicious_content.pdf\"\n}"
        },
        "execution_time": 0.029226064682006836,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to use invalid file extension for output",
        "purpose": "验证工具是否拒绝非法扩展名的输出路径",
        "args": {
          "docx_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_document.docx",
          "pdf_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\invalid_extension.txt"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Output path must be a .pdf file.\"\n}"
        },
        "execution_time": 0.004999876022338867,
        "is_functional_test": false
      }
    ],
    "protect_document": [
      {
        "case_name": "Apply write protection with valid password",
        "purpose": "验证使用有效密码对Word文档设置写保护的基本功能",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_document.docx",
          "password": "securePassword123"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Feature not supported by the current environment. 'python-docx' does not support password protection.\"\n}"
        },
        "execution_time": 0.00400233268737793,
        "is_functional_test": true
      },
      {
        "case_name": "Apply write protection to a document with special characters in password",
        "purpose": "验证工具是否能处理包含特殊字符的密码",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\metadata_document.docx",
          "password": "!@#$%^&*()_+{}[]|\\:;\"',./<>?"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Feature not supported by the current environment. 'python-docx' does not support password protection.\"\n}"
        },
        "execution_time": 0.0029973983764648438,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to protect non-existent file",
        "purpose": "验证工具在尝试保护不存在的文件时能否正确返回错误信息",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_document.docx",
          "password": "password123"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Feature not supported by the current environment. 'python-docx' does not support password protection.\"\n}"
        },
        "execution_time": 0.0020003318786621094,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to protect a file with empty password",
        "purpose": "验证工具是否允许空密码进行保护操作",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\empty_metadata.docx",
          "password": ""
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Feature not supported by the current environment. 'python-docx' does not support password protection.\"\n}"
        },
        "execution_time": 0.002001523971557617,
        "is_functional_test": false
      },
      {
        "case_name": "Attempt to protect a file with invalid extension",
        "purpose": "验证工具是否拒绝非.docx扩展名的文件",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\existing_file.txt",
          "password": "password123"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Feature not supported by the current environment. 'python-docx' does not support password protection.\"\n}"
        },
        "execution_time": 0.006005287170410156,
        "is_functional_test": false
      },
      {
        "case_name": "Protect a document located in a deeply nested path",
        "purpose": "测试工具能否处理超长路径文档的写保护操作",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_file_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems.docx",
          "password": "longpathpassword"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Feature not supported by the current environment. 'python-docx' does not support password protection.\"\n}"
        },
        "execution_time": 0.0030448436737060547,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to protect document in a restricted access directory",
        "purpose": "验证工具在目标目录不可写时能否正确处理错误",
        "args": {
          "file_path": "C:\\Windows\\System32\\config\\systemprofile\\restricted_document.docx",
          "password": "adminPass"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Feature not supported by the current environment. 'python-docx' does not support password protection.\"\n}"
        },
        "execution_time": 0.0019991397857666016,
        "is_functional_test": false
      },
      {
        "case_name": "Protect a document with malicious input in password field",
        "purpose": "验证密码字段是否安全处理潜在恶意输入",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\malicious_metadata.docx",
          "password": "'; DROP TABLE users;--"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Feature not supported by the current environment. 'python-docx' does not support password protection.\"\n}"
        },
        "execution_time": 0.00500035285949707,
        "is_functional_test": false
      }
    ],
    "add_footnote_to_document": [
      {
        "case_name": "Add footnote to first paragraph of existing document",
        "purpose": "验证向现有文档的第一个段落添加脚注的基本功能",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_document.docx",
          "paragraph_index": 0,
          "footnote_text": "This is a basic footnote."
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Failed to add footnote due to library limitations. 'python-docx' does not have a direct API for footnotes.\"\n}"
        },
        "execution_time": 0.006000518798828125,
        "is_functional_test": true
      },
      {
        "case_name": "Add footnote to last paragraph of document with multiple paragraphs",
        "purpose": "验证向包含多个段落的文档最后一个段落添加脚注的功能",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\multi_paragraph_document.docx",
          "paragraph_index": 3,
          "footnote_text": "Footnote on the last paragraph."
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Failed to add footnote due to library limitations. 'python-docx' does not have a direct API for footnotes.\"\n}"
        },
        "execution_time": 0.007005214691162109,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to add footnote to non-existent file",
        "purpose": "验证工具在目标文件不存在时能否正确处理错误",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\nonexistent_document.docx",
          "paragraph_index": 0,
          "footnote_text": "This should not be added."
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Failed to add footnote due to library limitations. 'python-docx' does not have a direct API for footnotes.\"\n}"
        },
        "execution_time": 0.010517120361328125,
        "is_functional_test": false
      },
      {
        "case_name": "Add footnote with special characters in text",
        "purpose": "验证工具是否能正确处理包含特殊字符的脚注内容",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_document.docx",
          "paragraph_index": 0,
          "footnote_text": "Special chars: !@#$%^&*()_+{}[]|\\:;\"',./<>?"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Failed to add footnote due to library limitations. 'python-docx' does not have a direct API for footnotes.\"\n}"
        },
        "execution_time": 0.007001638412475586,
        "is_functional_test": true
      },
      {
        "case_name": "Attempt to add footnote to invalid paragraph index",
        "purpose": "验证工具对超出范围的段落索引值的处理能力",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_document.docx",
          "paragraph_index": -1,
          "footnote_text": "This should not be added."
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Failed to add footnote due to library limitations. 'python-docx' does not have a direct API for footnotes.\"\n}"
        },
        "execution_time": 0.0070002079010009766,
        "is_functional_test": false
      },
      {
        "case_name": "Add empty footnote to valid paragraph",
        "purpose": "验证工具是否允许添加空脚注",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_document.docx",
          "paragraph_index": 0,
          "footnote_text": ""
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Failed to add footnote due to library limitations. 'python-docx' does not have a direct API for footnotes.\"\n}"
        },
        "execution_time": 0.0040013790130615234,
        "is_functional_test": true
      },
      {
        "case_name": "Add malicious content via footnote",
        "purpose": "测试脚注内容的安全性，防止注入攻击",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\test_document.docx",
          "paragraph_index": 0,
          "footnote_text": "<script>alert('xss')</script>"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Failed to add footnote due to library limitations. 'python-docx' does not have a direct API for footnotes.\"\n}"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": false
      },
      {
        "case_name": "Add footnote to deeply nested file path document",
        "purpose": "测试工具处理超长路径文件添加脚注的能力",
        "args": {
          "file_path": "D:\\devWorkspace\\MCPServer-Generator\\testSystem\\testFiles\\very_long_file_name_that_tests_the_maximum_allowed_length_of_a_file_path_in_windows_systems.docx",
          "paragraph_index": 2,
          "footnote_text": "Footnote in long path document"
        },
        "response": {
          "result": "{\n  \"status\": \"error\",\n  \"message\": \"Failed to add footnote due to library limitations. 'python-docx' does not have a direct API for footnotes.\"\n}"
        },
        "execution_time": 0.006003141403198242,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 128
}