{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "qwen-plus-mcp_zotero",
  "server_path": "workspace/pipeline-output-servers/qwen-plus/mcp_zotero/refined/server.py",
  "timestamp": "2025-07-13T00:57:48.282977",
  "tools": [
    {
      "name": "get_item_metadata",
      "description": "\n    获取指定 Zotero 条目的详细元数据。\n\n    Args:\n        item_key: 要获取元数据的 Zotero 条目键值，必须是字符串类型且非空。\n\n    Returns:\n        返回包含条目详细元数据的 JSON 字典，包括标题、作者、出版年份等信息。\n\n    Raises:\n        ValueError: 如果 item_key 无效或格式不正确。\n    ",
      "args_schema": {
        "properties": {
          "item_key": {
            "title": "Item Key",
            "type": "string"
          }
        },
        "required": [
          "item_key"
        ],
        "title": "get_item_metadataArguments",
        "type": "object"
      }
    },
    {
      "name": "get_item_fulltext",
      "description": "\n    提取指定 Zotero 条目的全文内容。\n\n    Args:\n        item_key: 要提取全文的 Zotero 条目键值，必须是字符串类型且非空。\n\n    Returns:\n        返回包含条目全文内容的字典，如果条目没有全文内容则返回空字符串。\n    ",
      "args_schema": {
        "properties": {
          "item_key": {
            "title": "Item Key",
            "type": "string"
          }
        },
        "required": [
          "item_key"
        ],
        "title": "get_item_fulltextArguments",
        "type": "object"
      }
    },
    {
      "name": "search_items",
      "description": "\n    在 Zotero 库中执行灵活搜索，支持按标题、创建者、年份或全文搜索。\n\n    Args:\n        query: 搜索查询字符串，必须是字符串类型且非空。\n        search_type: 搜索类型，可选值为 \"title\", \"creator\", \"year\", \"fulltext\"，默认为 \"title\"。\n        page: 当前页码，必须是正整数，默认为1。\n        items_per_page: 每页结果数量，必须是正整数，默认为20。\n\n    Returns:\n        返回格式化的搜索结果列表，每个结果包含条目键值、标题和匹配度评分。\n    ",
      "args_schema": {
        "properties": {
          "query": {
            "title": "Query",
            "type": "string"
          },
          "search_type": {
            "default": "title",
            "title": "Search Type",
            "type": "string"
          },
          "page": {
            "default": 1,
            "title": "Page",
            "type": "integer"
          },
          "items_per_page": {
            "default": 20,
            "title": "Items Per Page",
            "type": "integer"
          }
        },
        "required": [
          "query"
        ],
        "title": "search_itemsArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "search_items": [
      {
        "case_name": "Basic Title Search",
        "purpose": "验证使用默认参数按标题搜索功能是否正常工作",
        "args": {
          "query": "test"
        },
        "response": {
          "result": "{\n  \"results\": [\n    {\n      \"item_key\": \"TCAVDPC4\",\n      \"title\": \"AgentCoder: Multi-Agent-based Code Generation with Iterative Testing and Optimisation\",\n      \"score\": 0\n    },\n    {\n      \"item_key\": \"ASHWF68J\",\n      \"title\": \"Software Testing with Large Language Models: Survey, Landscape, and Vision\",\n      \"score\": 0\n    },\n    {\n      \"item_key\": \"JJS8VNMI\",\n      \"title\": \"Software Testing With Large Language Models: Survey, Landscape, and Vision\",\n      \"score\": 0\n    },\n    {\n      \"item_key\": \"Q78PQR25\",\n      \"title\": \"Automated Unit Test Improvement using Large Language Models at Meta\",\n      \"score\": 0\n    }\n  ],\n  \"total\": 4,\n  \"search_type\": \"title\",\n  \"query\": \"test\",\n  \"page\": 1,\n  \"items_per_page\": 20,\n  \"status\": \"success\",\n  \"code\": 200\n}"
        },
        "execution_time": 4.819228649139404,
        "is_functional_test": true
      },
      {
        "case_name": "Search By Creator",
        "purpose": "验证按创建者搜索功能是否正常工作",
        "args": {
          "query": "xue",
          "search_type": "creator"
        },
        "response": {
          "result": "{\n  \"results\": [],\n  \"total\": 0,\n  \"search_type\": \"creator\",\n  \"query\": \"xue\",\n  \"page\": 1,\n  \"items_per_page\": 20,\n  \"status\": \"success\",\n  \"code\": 200\n}"
        },
        "execution_time": 0.4113147258758545,
        "is_functional_test": true
      },
      {
        "case_name": "Full Text Search",
        "purpose": "验证全文搜索功能是否正常工作",
        "args": {
          "query": "shapes",
          "search_type": "fulltext"
        },
        "response": {
          "result": "{\n  \"results\": [\n    {\n      \"item_key\": \"RW5W5JN2\",\n      \"title\": \"Snapshot\",\n      \"score\": 0\n    },\n    {\n      \"item_key\": \"NZ26PJJX\",\n      \"title\": \"Preprint PDF\",\n      \"score\": 0\n    },\n    {\n      \"item_key\": \"K78DMKPD\",\n      \"title\": \"CODESIM: Multi-Agent Code Generation and Problem Solving through Simulation-Driven Planning and Debugging\",\n      \"score\": 0\n    },\n    {\n      \"item_key\": \"KRR7MFVP\",\n      \"title\": \"Snapshot\",\n      \"score\": 0\n    },\n    {\n      \"item_key\": \"LMA2MAZI\",\n      \"title\": \"Preprint PDF\",\n      \"score\": 0\n    },\n    {\n      \"item_key\": \"2VCDLWBG\",\n      \"title\": \"Self-Organized Agents: A LLM Multi-Agent Framework toward Ultra Large-Scale Code Generation and Optimization\",\n      \"score\": 0\n    },\n    {\n      \"item_key\": \"X6PB95S9\",\n      \"title\": \"Preprint PDF\",\n      \"score\": 0\n    },\n    {\n      \"item_key\": \"6AAK9P4J\",\n      \"title\": \"SWE-bench: Can Language Models Resolve Real-World GitHub Issues?\",\n      \"score\": 0\n    },\n    {\n      \"item_key\": \"SNUTTAER\",\n      \"title\": \"Preprint PDF\",\n      \"score\": 0\n    },\n    {\n      \"item_key\": \"PMJIF2UH\",\n      \"title\": \"Snapshot\",\n      \"score\": 0\n    },\n    {\n      \"item_key\": \"ZMFZ6DR6\",\n      \"title\": \"CodeAgent: Autonomous Communicative Agents for Code Review\",\n      \"score\": 0\n    },\n    {\n      \"item_key\": \"TL6DJ74R\",\n      \"title\": \"Preprint PDF\",\n      \"score\": 0\n    },\n    {\n      \"item_key\": \"RA65N57L\",\n      \"title\": \"Snapshot\",\n      \"score\": 0\n    },\n    {\n      \"item_key\": \"38UU...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计2406字符，剩余906字符"
        },
        "execution_time": 1.105126142501831,
        "is_functional_test": true
      },
      {
        "case_name": "Year Based Search",
        "purpose": "验证按年份搜索功能是否正常工作",
        "args": {
          "query": "2023",
          "search_type": "year"
        },
        "response": {
          "result": "{\n  \"results\": [],\n  \"total\": 0,\n  \"search_type\": \"year\",\n  \"query\": \"2023\",\n  \"page\": 1,\n  \"items_per_page\": 20,\n  \"status\": \"success\",\n  \"code\": 200\n}"
        },
        "execution_time": 0.40559816360473633,
        "is_functional_test": true
      },
      {
        "case_name": "Paginated Search Results",
        "purpose": "验证分页搜索功能是否正常工作",
        "args": {
          "query": "document",
          "page": 2,
          "items_per_page": 10
        },
        "response": {
          "result": "{\n  \"results\": [],\n  \"total\": 0,\n  \"search_type\": \"title\",\n  \"query\": \"document\",\n  \"page\": 2,\n  \"items_per_page\": 10,\n  \"status\": \"success\",\n  \"code\": 200\n}"
        },
        "execution_time": 0.40816593170166016,
        "is_functional_test": true
      },
      {
        "case_name": "Special Characters in Query",
        "purpose": "验证包含特殊字符的搜索查询是否被正确处理",
        "args": {
          "query": "feature@#test!",
          "search_type": "title"
        },
        "response": {
          "result": "{\n  \"results\": [],\n  \"total\": 0,\n  \"search_type\": \"title\",\n  \"query\": \"feature@#test!\",\n  \"page\": 1,\n  \"items_per_page\": 20,\n  \"status\": \"success\",\n  \"code\": 200\n}"
        },
        "execution_time": 0.4049689769744873,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Search Query",
        "purpose": "验证空搜索查询是否被正确拒绝",
        "args": {
          "query": ""
        },
        "response": {
          "result": "{\n  \"error\": \"Invalid input\",\n  \"message\": \"query 必须是非空字符串\",\n  \"code\": 400\n}"
        },
        "execution_time": 0.0047380924224853516,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Search Type",
        "purpose": "验证无效的搜索类型是否被正确拒绝",
        "args": {
          "query": "test",
          "search_type": "invalid_type"
        },
        "response": {
          "result": "{\n  \"error\": \"Invalid parameter\",\n  \"message\": \"search_type 必须是以下之一：title, creator, year, fulltext\",\n  \"code\": 400\n}"
        },
        "execution_time": 0.007512569427490234,
        "is_functional_test": false
      },
      {
        "case_name": "Negative Page Number",
        "purpose": "验证负页码是否被正确拒绝",
        "args": {
          "query": "test",
          "page": -1
        },
        "response": {
          "result": "{\n  \"error\": \"Invalid parameter\",\n  \"message\": \"page 必须是大于等于1的正整数\",\n  \"code\": 400\n}"
        },
        "execution_time": 0.006006479263305664,
        "is_functional_test": false
      },
      {
        "case_name": "Zero Items Per Page",
        "purpose": "验证每页条目数为零是否被正确拒绝",
        "args": {
          "query": "test",
          "items_per_page": 0
        },
        "response": {
          "result": "{\n  \"error\": \"Invalid parameter\",\n  \"message\": \"items_per_page 必须是大于等于1的正整数\",\n  \"code\": 400\n}"
        },
        "execution_time": 0.007999181747436523,
        "is_functional_test": false
      },
      {
        "case_name": "Maximum Page Number",
        "purpose": "验证最大页码是否被正确处理",
        "args": {
          "query": "test",
          "page": 2147483647
        },
        "response": {
          "result": "{\n  \"results\": [],\n  \"total\": 0,\n  \"search_type\": \"title\",\n  \"query\": \"test\",\n  \"page\": 2147483647,\n  \"items_per_page\": 20,\n  \"status\": \"success\",\n  \"code\": 200\n}"
        },
        "execution_time": 0.413679838180542,
        "is_functional_test": true
      },
      {
        "case_name": "Large Items Per Page",
        "purpose": "验证每页条目数设置为较大值是否被正确处理",
        "args": {
          "query": "test",
          "items_per_page": 1000
        },
        "response": {
          "result": "{\n  \"results\": [\n    {\n      \"item_key\": \"TCAVDPC4\",\n      \"title\": \"AgentCoder: Multi-Agent-based Code Generation with Iterative Testing and Optimisation\",\n      \"score\": 0\n    },\n    {\n      \"item_key\": \"ASHWF68J\",\n      \"title\": \"Software Testing with Large Language Models: Survey, Landscape, and Vision\",\n      \"score\": 0\n    },\n    {\n      \"item_key\": \"JJS8VNMI\",\n      \"title\": \"Software Testing With Large Language Models: Survey, Landscape, and Vision\",\n      \"score\": 0\n    },\n    {\n      \"item_key\": \"Q78PQR25\",\n      \"title\": \"Automated Unit Test Improvement using Large Language Models at Meta\",\n      \"score\": 0\n    }\n  ],\n  \"total\": 4,\n  \"search_type\": \"title\",\n  \"query\": \"test\",\n  \"page\": 1,\n  \"items_per_page\": 1000,\n  \"status\": \"success\",\n  \"code\": 200\n}"
        },
        "execution_time": 0.8692269325256348,
        "is_functional_test": true
      },
      {
        "case_name": "SQL Injection Attempt",
        "purpose": "验证搜索功能是否能安全处理潜在SQL注入尝试",
        "args": {
          "query": "test'; DROP TABLE items;--"
        },
        "response": {
          "result": "{\n  \"results\": [],\n  \"total\": 0,\n  \"search_type\": \"title\",\n  \"query\": \"test'; DROP TABLE items;--\",\n  \"page\": 1,\n  \"items_per_page\": 20,\n  \"status\": \"success\",\n  \"code\": 200\n}"
        },
        "execution_time": 0.6528174877166748,
        "is_functional_test": false
      },
      {
        "case_name": "XSS Attempt in Search Query",
        "purpose": "验证搜索功能是否能安全处理潜在XSS攻击尝试",
        "args": {
          "query": "<script>alert('xss')</script>"
        },
        "response": {
          "result": "{\n  \"results\": [],\n  \"total\": 0,\n  \"search_type\": \"title\",\n  \"query\": \"<script>alert('xss')</script>\",\n  \"page\": 1,\n  \"items_per_page\": 20,\n  \"status\": \"success\",\n  \"code\": 200\n}"
        },
        "execution_time": 0.41359424591064453,
        "is_functional_test": false
      }
    ],
    "get_item_metadata": [
      {
        "case_name": "Basic Metadata Retrieval",
        "purpose": "验证使用有效item_key可以成功获取条目元数据",
        "args": {
          "item_key": "TCAVDPC4"
        },
        "response": {
          "result": "{\n  \"metadata\": {\n    \"title\": \"AgentCoder: Multi-Agent-based Code Generation with Iterative Testing and Optimisation\",\n    \"creators\": [\n      {\n        \"name\": \"无创作者\"\n      },\n      {\n        \"name\": \"无创作者\"\n      },\n      {\n        \"name\": \"无创作者\"\n      },\n      {\n        \"name\": \"无创作者\"\n      },\n      {\n        \"name\": \"无创作者\"\n      },\n      {\n        \"name\": \"无创作者\"\n      }\n    ],\n    \"year\": \"2024-05-24\",\n    \"item_type\": \"preprint\",\n    \"tags\": [\n      {\n        \"tag\": \"Computer Science - Computation and Language\",\n        \"type\": 1\n      }\n    ],\n    \"collections\": [\n      \"AUICFZZ4\"\n    ],\n    \"abstract\": \"The advancement of natural language processing (NLP) has been significantly boosted by the development of transformer-based large language models (LLMs). These models have revolutionized NLP tasks, particularly in code generation, aiding developers in creating software with enhanced efficiency. Despite their advancements, challenges in balancing code snippet generation with effective test case generation and execution persist. To address these issues, this paper introduces Multi-Agent Assistant Code Generation (AgentCoder), a novel solution comprising a multi-agent framework with specialized agents: the programmer agent, the test designer agent, and the test executor agent. During the coding procedure, the programmer agent will focus on the code generation and refinement based on the test executor agent's feedback. The test designer agent will generate test cases for th...[截断]，输出已被MCP适配器截断，这是适配器的限制而非工具本身的问题。共计2437字符，剩余937字符"
        },
        "execution_time": 4.07553768157959,
        "is_functional_test": true
      },
      {
        "case_name": "Invalid Item Key Format",
        "purpose": "验证无效格式的item_key是否被正确拒绝",
        "args": {
          "item_key": "12345678"
        },
        "response": {
          "result": "{\n  \"error\": \"Item not found\",\n  \"message\": \"未找到 item_key 为 '12345678' 的 Zotero 条目\",\n  \"code\": 404\n}"
        },
        "execution_time": 0.3716886043548584,
        "is_functional_test": false
      },
      {
        "case_name": "Empty Item Key",
        "purpose": "验证空item_key是否被正确拒绝",
        "args": {
          "item_key": ""
        },
        "response": {
          "result": "{\n  \"error\": \"Invalid input\",\n  \"message\": \"item_key 必须是非空字符串\",\n  \"code\": 400\n}"
        },
        "execution_time": 0.004004955291748047,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Item Key",
        "purpose": "验证包含特殊字符的item_key是否被正确拒绝",
        "args": {
          "item_key": "TC@VDPC4!"
        },
        "response": {
          "result": "{\n  \"error\": \"Item not found\",\n  \"message\": \"未找到 item_key 为 'TC@VDPC4!' 的 Zotero 条目\",\n  \"code\": 404\n}"
        },
        "execution_time": 0.3717632293701172,
        "is_functional_test": false
      },
      {
        "case_name": "Metadata Retrieval for Non-Existent Item",
        "purpose": "验证不存在的item_key是否返回空结果而非报错",
        "args": {
          "item_key": "NONEXIST123"
        },
        "response": {
          "result": "{\n  \"error\": \"Item not found\",\n  \"message\": \"未找到 item_key 为 'NONEXIST123' 的 Zotero 条目\",\n  \"code\": 404\n}"
        },
        "execution_time": 0.3692348003387451,
        "is_functional_test": true
      },
      {
        "case_name": "SQL Injection Attempt in Item Key",
        "purpose": "验证item_key参数是否能安全处理潜在SQL注入尝试",
        "args": {
          "item_key": "TCAVDPC4'; DROP TABLE items;--"
        },
        "response": {
          "result": "{\n  \"error\": \"Item not found\",\n  \"message\": \"未找到 item_key 为 'TCAVDPC4'; DROP TABLE items;--' 的 Zotero 条目\",\n  \"code\": 404\n}"
        },
        "execution_time": 0.3685142993927002,
        "is_functional_test": false
      },
      {
        "case_name": "XSS Attempt in Item Key",
        "purpose": "验证item_key参数是否能安全处理潜在XSS攻击尝试",
        "args": {
          "item_key": "<script>alert('xss')</script>"
        },
        "response": {
          "error": "ToolException: Error executing tool get_item_metadata: 'list' object has no attribute 'get'"
        },
        "execution_time": 1.5323293209075928,
        "is_functional_test": false
      }
    ],
    "get_item_fulltext": [
      {
        "case_name": "Basic Fulltext Extraction",
        "purpose": "验证使用有效item_key可以成功提取条目的全文内容",
        "args": {
          "item_key": "TCAVDPC4"
        },
        "response": {
          "error": "ToolException: Error executing tool get_item_fulltext: "
        },
        "execution_time": 5.0195794105529785,
        "is_functional_test": true
      },
      {
        "case_name": "Fulltext Extraction for Item Without Content",
        "purpose": "验证没有全文内容的条目是否返回空字符串",
        "args": {
          "item_key": "NONEXIST123"
        },
        "response": {
          "result": "{\n  \"fulltext\": \"\",\n  \"message\": \"该条目没有可用的全文内容\",\n  \"code\": 200\n}"
        },
        "execution_time": 4.460855484008789,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Item Key",
        "purpose": "验证空item_key是否被正确拒绝",
        "args": {
          "item_key": ""
        },
        "response": {
          "result": "{\n  \"error\": \"Invalid input\",\n  \"message\": \"item_key 必须是非空字符串\",\n  \"code\": 400\n}"
        },
        "execution_time": 0.007010221481323242,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Item Key Format",
        "purpose": "验证无效格式的item_key是否被正确拒绝",
        "args": {
          "item_key": "12345678"
        },
        "response": {
          "result": "{\n  \"fulltext\": \"\",\n  \"message\": \"该条目没有可用的全文内容\",\n  \"code\": 200\n}"
        },
        "execution_time": 0.37072014808654785,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Item Key",
        "purpose": "验证包含特殊字符的item_key是否被正确处理",
        "args": {
          "item_key": "TC@VDPC4!"
        },
        "response": {
          "result": "{\n  \"error\": \"Server internal error\",\n  \"message\": \"服务器内部错误：可能是无效的附件路径或服务器问题导致无法获取全文。请确认条目是否包含附件，并稍后重试。\",\n  \"code\": 500\n}"
        },
        "execution_time": 0.4228019714355469,
        "is_functional_test": false
      },
      {
        "case_name": "SQL Injection Attempt in Item Key",
        "purpose": "验证item_key参数是否能安全处理潜在SQL注入尝试",
        "args": {
          "item_key": "TCAVDPC4'; DROP TABLE items;--"
        },
        "response": {
          "result": "{\n  \"fulltext\": \"\",\n  \"message\": \"该条目没有可用的全文内容\",\n  \"code\": 200\n}"
        },
        "execution_time": 0.36699461936950684,
        "is_functional_test": false
      },
      {
        "case_name": "XSS Attempt in Item Key",
        "purpose": "验证item_key参数是否能安全处理潜在XSS攻击尝试",
        "args": {
          "item_key": "<script>alert('xss')</script>"
        },
        "response": {
          "result": "{\n  \"fulltext\": \"\",\n  \"message\": \"该条目没有可用的全文内容\",\n  \"code\": 200\n}"
        },
        "execution_time": 0.36490535736083984,
        "is_functional_test": false
      }
    ]
  },
  "total_cases": 28
}