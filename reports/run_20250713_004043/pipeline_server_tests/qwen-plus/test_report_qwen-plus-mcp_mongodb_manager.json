{
  "server_name": "server",
  "parent_dir": "refined",
  "report_name": "qwen-plus-mcp_mongodb_manager",
  "server_path": "workspace/pipeline-output-servers/qwen-plus/mcp_mongodb_manager/refined/server.py",
  "timestamp": "2025-07-13T00:54:36.696848",
  "tools": [
    {
      "name": "mcp_list_databases",
      "description": "\n    Lists all available databases in the connected MongoDB instance.\n\n    Returns:\n        A JSON string containing a list of database names.\n\n    Example:\n        mcp_list_databases()\n        # Returns: {\"databases\": [\"admin\", \"config\", \"local\"]}\n    ",
      "args_schema": {
        "properties": {},
        "title": "mcp_list_databasesArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_list_collections",
      "description": "\n    Lists all collections within a specified database.\n\n    Args:\n        database_name: Name of the database.\n\n    Returns:\n        A JSON string containing a list of collection names within the specified database.\n\n    Example:\n        mcp_list_collections(database_name=\"test_db\")\n        # Returns: {\"collections\": [\"users\", \"products\"]}\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          }
        },
        "required": [
          "database_name"
        ],
        "title": "mcp_list_collectionsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_insert_document",
      "description": "\n    Inserts a new document into a specified database and collection.\n\n    Args:\n        database_name: Name of the database.\n        collection_name: Name of the collection.\n        document: Document data to insert.\n\n    Returns:\n        A JSON string containing the inserted document ID.\n\n    Example:\n        mcp_insert_document(database_name=\"test_db\", collection_name=\"users\", document={\"name\": \"John Doe\", \"age\": 30})\n        # Returns: {\"inserted_id\": \"60c72b2f54b9a1b4e3d5f8a1\"}\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "document": {
            "title": "Document",
            "type": "object"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "document"
        ],
        "title": "mcp_insert_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_find_documents",
      "description": "\n    Finds documents matching a query within a specified database and collection.\n\n    Args:\n        database_name: Name of the database.\n        collection_name: Name of the collection.\n        query: Query criteria.\n        projection: Fields to include or exclude (optional).\n        limit: Maximum number of results to return (optional).\n\n    Returns:\n        A JSON string containing a list of matching documents.\n\n    Example:\n        mcp_find_documents(database_name=\"test_db\", collection_name=\"users\", query={\"age\": {\"$gt\": 25}}, projection={\"name\": 1}, limit=10)\n        # Returns: {\"documents\": [{\"_id\": \"60c72b2f54b9a1b4e3d5f8a1\", \"name\": \"John Doe\"}]}\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "query": {
            "title": "Query",
            "type": "object"
          },
          "projection": {
            "default": null,
            "title": "Projection",
            "type": "object"
          },
          "limit": {
            "default": null,
            "title": "Limit",
            "type": "integer"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "query"
        ],
        "title": "mcp_find_documentsArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_update_document",
      "description": "\n    Updates one or more documents within a specified database and collection.\n\n    Args:\n        database_name: Name of the database.\n        collection_name: Name of the collection.\n        filter_query: Criteria to select documents for update.\n        update_query: Update operations.\n        multi: If True, updates all matching documents; otherwise, only the first match.\n\n    Returns:\n        A JSON string containing the number of documents updated.\n\n    Example:\n        mcp_update_document(database_name=\"test_db\", collection_name=\"users\", filter_query={\"name\": \"John Doe\"}, update_query={\"age\": 31}, multi=True)\n        # Returns: {\"updated_count\": 5}\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "filter_query": {
            "title": "Filter Query",
            "type": "object"
          },
          "update_query": {
            "title": "Update Query",
            "type": "object"
          },
          "multi": {
            "default": false,
            "title": "Multi",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "filter_query",
          "update_query"
        ],
        "title": "mcp_update_documentArguments",
        "type": "object"
      }
    },
    {
      "name": "mcp_delete_document",
      "description": "\n    Deletes one or more documents within a specified database and collection.\n\n    Args:\n        database_name: Name of the database.\n        collection_name: Name of the collection.\n        filter_query: Criteria to select documents for deletion.\n        multi: If True, deletes all matching documents; otherwise, only the first match.\n\n    Returns:\n        A JSON string containing the number of documents deleted.\n\n    Example:\n        mcp_delete_document(database_name=\"test_db\", collection_name=\"users\", filter_query={\"name\": \"John Doe\"}, multi=True)\n        # Returns: {\"deleted_count\": 5}\n    ",
      "args_schema": {
        "properties": {
          "database_name": {
            "title": "Database Name",
            "type": "string"
          },
          "collection_name": {
            "title": "Collection Name",
            "type": "string"
          },
          "filter_query": {
            "title": "Filter Query",
            "type": "object"
          },
          "multi": {
            "default": false,
            "title": "Multi",
            "type": "boolean"
          }
        },
        "required": [
          "database_name",
          "collection_name",
          "filter_query"
        ],
        "title": "mcp_delete_documentArguments",
        "type": "object"
      }
    }
  ],
  "test_results": {
    "mcp_list_databases": [
      {
        "case_name": "List Databases Successfully",
        "purpose": "验证工具能够成功连接到MongoDB实例并列出所有数据库。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]}"
        },
        "execution_time": 0.06747961044311523,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Database List",
        "purpose": "验证当MongoDB实例中没有数据库时，工具是否能正确返回空列表。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]}"
        },
        "execution_time": 0.005997419357299805,
        "is_functional_test": true
      },
      {
        "case_name": "Database Names With Special Characters",
        "purpose": "测试包含特殊字符的数据库名称是否能被正确列出。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]}"
        },
        "execution_time": 0.010003328323364258,
        "is_functional_test": true
      },
      {
        "case_name": "Long Database Name Handling",
        "purpose": "验证工具能否处理包含长名称的数据库。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]}"
        },
        "execution_time": 0.01700878143310547,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Unauthorized Access Attempt",
        "purpose": "模拟未授权访问尝试，确保工具不会暴露敏感数据库信息。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]}"
        },
        "execution_time": 0.030737876892089844,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - No MongoDB Connection",
        "purpose": "验证在无法连接到MongoDB实例时，工具是否能优雅地处理错误。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]}"
        },
        "execution_time": 0.018332958221435547,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid Configuration",
        "purpose": "测试当配置无效或缺失时，工具是否能返回明确的错误信息。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]}"
        },
        "execution_time": 0.006006717681884766,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Maximum Number of Databases",
        "purpose": "测试工具在MongoDB中存在最大数量数据库时的响应能力。",
        "args": {},
        "response": {
          "result": "{\"databases\": [\"admin\", \"config\", \"db@#_\\u6d4b\\u8bd5\", \"does_not_exist_db\", \"large_db\", \"local\", \"mcp-test\", \"test_db\", \"users\", \"\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5\"]}"
        },
        "execution_time": 0.009992122650146484,
        "is_functional_test": false
      }
    ],
    "mcp_list_collections": [
      {
        "case_name": "List Collections Successfully",
        "purpose": "验证工具能够成功连接到指定数据库并列出所有集合。",
        "args": {
          "database_name": "test_db"
        },
        "response": {
          "result": "{\"collections\": [\"a_collection_with_a_very_long_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it\", \"new_collection\", \"test_collection\", \"empty_docs\", \"invalid/collection*name\", \"user_profiles\", \"long_key_collection\", \"test_collection'; DROP COLLECTION test_collection;--\", \"large_data\", \"special_chars_collection\", \"binary_data_collection\", \"nonexistent_collection\", \"a_very_long_collection_name_that_exceeds_normal_limits_and_might_cause_issues\", \"users\"]}"
        },
        "execution_time": 0.008000850677490234,
        "is_functional_test": true
      },
      {
        "case_name": "Empty Collection List",
        "purpose": "验证当指定数据库中没有集合时，工具是否能正确返回空列表。",
        "args": {
          "database_name": "does_not_exist_db"
        },
        "response": {
          "result": "{\"collections\": [\"new_collection\", \"test_collection\"]}"
        },
        "execution_time": 0.007539272308349609,
        "is_functional_test": true
      },
      {
        "case_name": "Collection Names With Special Characters",
        "purpose": "测试包含特殊字符的数据库名称是否能被正确列出其集合。",
        "args": {
          "database_name": "db@#_\\u6d4b\\u8bd5"
        },
        "response": {
          "result": "{\"error\": \"Database 'db@#_\\\\u6d4b\\\\u8bd5' does not exist.\"}"
        },
        "execution_time": 0.011696100234985352,
        "is_functional_test": true
      },
      {
        "case_name": "Long Database Name Handling for Collection Listing",
        "purpose": "验证工具能否处理包含长名称的数据库并列出其集合。",
        "args": {
          "database_name": "\\u667a\\u80fd\\u8f6f\\u4ef6\\u5de5"
        },
        "response": {
          "result": "{\"error\": \"Database '\\\\u667a\\\\u80fd\\\\u8f6f\\\\u4ef6\\\\u5de5' does not exist.\"}"
        },
        "execution_time": 0.006005525588989258,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Unauthorized Access Attempt to Collections",
        "purpose": "模拟未授权访问尝试，确保工具不会暴露敏感数据库中的集合信息。",
        "args": {
          "database_name": "admin"
        },
        "response": {
          "result": "{\"collections\": [\"system.version\", \"system_logs\"]}"
        },
        "execution_time": 0.01236867904663086,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid Database Name",
        "purpose": "测试当提供无效或不存在的数据库名称时，工具是否能返回明确的错误信息。",
        "args": {
          "database_name": "invalid_db_name"
        },
        "response": {
          "result": "{\"error\": \"Database 'invalid_db_name' does not exist.\"}"
        },
        "execution_time": 0.0060002803802490234,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - No MongoDB Connection for Collection Listing",
        "purpose": "验证在无法连接到MongoDB实例时，工具是否能优雅地处理错误而不抛出异常。",
        "args": {
          "database_name": "local"
        },
        "response": {
          "result": "{\"collections\": [\"startup_log\"]}"
        },
        "execution_time": 0.008539676666259766,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Maximum Length Database Name",
        "purpose": "测试工具在使用最大长度数据库名称时是否能正确列出集合。",
        "args": {
          "database_name": "very_long_database_name_that_tests_the_maximum_allowed_length_for_mongodb_systems"
        },
        "response": {
          "result": "{\"error\": \"Database 'very_long_database_name_that_tests_the_maximum_allowed_length_for_mongodb_systems' does not exist.\"}"
        },
        "execution_time": 0.006506443023681641,
        "is_functional_test": true
      }
    ],
    "mcp_insert_document": [
      {
        "case_name": "Insert Document Successfully",
        "purpose": "验证工具能够成功将文档插入到指定的数据库和集合中。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "document": {
            "name": "John Doe",
            "age": 30
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"687293902f99e4d325c71fb6\"}"
        },
        "execution_time": 0.005090951919555664,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document into Non-Existent Database",
        "purpose": "测试当目标数据库不存在时，工具是否能返回明确的错误信息。",
        "args": {
          "database_name": "invalid_db",
          "collection_name": "users",
          "document": {
            "name": "Jane Smith"
          }
        },
        "response": {
          "result": "{\"error\": \"Database 'invalid_db' does not exist.\"}"
        },
        "execution_time": 0.005183696746826172,
        "is_functional_test": false
      },
      {
        "case_name": "Insert Document into Non-Existent Collection",
        "purpose": "验证工具能否在目标集合不存在的情况下自动创建集合并插入文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "new_collection",
          "document": {
            "title": "Test Document",
            "content": "This is a test document."
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"687293902f99e4d325c71fb7\"}"
        },
        "execution_time": 0.008595943450927734,
        "is_functional_test": true
      },
      {
        "case_name": "Insert Document with Special Characters in Fields",
        "purpose": "测试包含特殊字符的字段名和值能否被正确插入。",
        "args": {
          "database_name": "test_db",
          "collection_name": "special_chars_collection",
          "document": {
            "user@name": "Alice#123",
            "city/country": "Shanghai\\China"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"687293902f99e4d325c71fb8\"}"
        },
        "execution_time": 0.0060024261474609375,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Insert into Protected System Collection",
        "purpose": "模拟尝试插入到受保护系统集合（如admin.system.version），确保权限控制有效。",
        "args": {
          "database_name": "admin",
          "collection_name": "system.version",
          "document": {
            "version": "999.999"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"687293902f99e4d325c71fb9\"}"
        },
        "execution_time": 0.008511543273925781,
        "is_functional_test": false
      },
      {
        "case_name": "Error Handling - Invalid Database Name",
        "purpose": "测试提供无效或非法格式的数据库名称时，工具是否能返回错误。",
        "args": {
          "database_name": "db/with/slashes",
          "collection_name": "users",
          "document": {
            "name": "Invalid DB"
          }
        },
        "response": {
          "result": "{\"error\": \"Database 'db/with/slashes' does not exist.\"}"
        },
        "execution_time": 0.003999471664428711,
        "is_functional_test": false
      },
      {
        "case_name": "Boundary Condition - Maximum Length Document Field",
        "purpose": "测试插入包含最大长度字段的文档时工具的行为。",
        "args": {
          "database_name": "test_db",
          "collection_name": "long_key_collection",
          "document": {
            "a_very_long_field_name_that_may_reach_the_limit_of_mongodb_max_key_length_and_test_how_tool_handles_it": "value"
          }
        },
        "response": {
          "result": "{\"inserted_id\": \"687293902f99e4d325c71fba\"}"
        },
        "execution_time": 0.010004997253417969,
        "is_functional_test": true
      }
    ],
    "mcp_find_documents": [
      {
        "case_name": "Basic Document Search",
        "purpose": "验证工具能够使用基本查询条件成功检索文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "age": {
              "$gt": 25
            }
          }
        },
        "response": {
          "result": "{\"documents\": [{\"_id\": \"687293902f99e4d325c71fb6\", \"name\": \"John Doe\", \"age\": 30}]}"
        },
        "execution_time": 0.061994314193725586,
        "is_functional_test": true
      },
      {
        "case_name": "Document Search With Projection",
        "purpose": "验证工具在指定字段投影时能正确返回所需字段。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "age": {
              "$lt": 30
            }
          },
          "projection": {
            "name": 1,
            "_id": 0
          }
        },
        "response": {
          "result": "{\"documents\": []}"
        },
        "execution_time": 0.04594707489013672,
        "is_functional_test": true
      },
      {
        "case_name": "Limit Applied to Query Results",
        "purpose": "验证工具在指定限制数量时能正确返回不超过最大结果数的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {},
          "limit": 5
        },
        "response": {
          "result": "{\"documents\": [{\"_id\": \"687293902f99e4d325c71fb6\", \"name\": \"John Doe\", \"age\": 30}]}"
        },
        "execution_time": 0.028000831604003906,
        "is_functional_test": true
      },
      {
        "case_name": "Search With Empty Query",
        "purpose": "验证工具在空查询条件下能返回集合中的所有文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {}
        },
        "response": {
          "result": "{\"documents\": [{\"_id\": \"687293902f99e4d325c71fb6\", \"name\": \"John Doe\", \"age\": 30}]}"
        },
        "execution_time": 0.03351640701293945,
        "is_functional_test": true
      },
      {
        "case_name": "Security Test - Unauthorized Access Attempt",
        "purpose": "确保未授权用户无法通过非法查询访问敏感数据。",
        "args": {
          "database_name": "admin",
          "collection_name": "system.users",
          "query": {
            "username": {
              "$exists": true
            }
          }
        },
        "response": {
          "result": "{\"error\": \"Collection 'system.users' does not exist in database 'admin'.\"}"
        },
        "execution_time": 0.050110578536987305,
        "is_functional_test": false
      },
      {
        "case_name": "Invalid Database Name Handling",
        "purpose": "测试工具在提供无效数据库名称时是否能返回明确的错误信息。",
        "args": {
          "database_name": "invalid_database",
          "collection_name": "users",
          "query": {
            "age": {
              "$gt": 25
            }
          }
        },
        "response": {
          "result": "{\"error\": \"Database 'invalid_database' does not exist.\"}"
        },
        "execution_time": 0.04051923751831055,
        "is_functional_test": false
      },
      {
        "case_name": "Nonexistent Collection Handling",
        "purpose": "验证工具在指定不存在的集合时能否优雅处理错误。",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "query": {
            "age": {
              "$gt": 25
            }
          }
        },
        "response": {
          "result": "{\"documents\": []}"
        },
        "execution_time": 0.025820493698120117,
        "is_functional_test": false
      },
      {
        "case_name": "Special Characters in Query",
        "purpose": "测试包含特殊字符的查询条件是否能被正确处理。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "query": {
            "username": "user@#_\\u6d4b\\u8bd5"
          }
        },
        "response": {
          "result": "{\"documents\": []}"
        },
        "execution_time": 0.07847332954406738,
        "is_functional_test": true
      }
    ],
    "mcp_update_document": [
      {
        "case_name": "Update Single Document Successfully",
        "purpose": "验证工具能够成功更新单个匹配的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "name": "John Doe"
          },
          "update_query": {
            "age": 31
          },
          "multi": false
        },
        "response": {
          "result": "{\"updated_count\": 1}"
        },
        "execution_time": 0.016000032424926758,
        "is_functional_test": true
      },
      {
        "case_name": "Update Multiple Documents Successfully",
        "purpose": "验证当 multi=True 时，工具能正确更新所有匹配的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "status": "active"
          },
          "update_query": {
            "status": "inactive"
          },
          "multi": true
        },
        "response": {
          "result": "{\"updated_count\": 0}"
        },
        "execution_time": 0.022566795349121094,
        "is_functional_test": true
      },
      {
        "case_name": "Update With Nonexistent Database",
        "purpose": "测试在指定数据库不存在时，工具是否能优雅地处理错误。",
        "args": {
          "database_name": "nonexistent_db",
          "collection_name": "users",
          "filter_query": {
            "name": "John Doe"
          },
          "update_query": {
            "age": 31
          },
          "multi": false
        },
        "response": {
          "result": "{\"error\": \"Database 'nonexistent_db' does not exist.\"}"
        },
        "execution_time": 0.016000986099243164,
        "is_functional_test": false
      },
      {
        "case_name": "Update With Nonexistent Collection",
        "purpose": "测试在指定集合不存在时，工具是否能优雅地处理错误。",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "filter_query": {
            "name": "John Doe"
          },
          "update_query": {
            "age": 31
          },
          "multi": false
        },
        "response": {
          "result": "{\"updated_count\": 0}"
        },
        "execution_time": 0.014123201370239258,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Attempt to Update System Collection",
        "purpose": "验证工具是否能阻止对系统集合（如 admin.system.version）的更新操作。",
        "args": {
          "database_name": "admin",
          "collection_name": "system.version",
          "filter_query": {
            "version": 1
          },
          "update_query": {
            "version": 2
          },
          "multi": false
        },
        "response": {
          "result": "{\"updated_count\": 0}"
        },
        "execution_time": 0.014035701751708984,
        "is_functional_test": false
      },
      {
        "case_name": "Update With Invalid Filter Query",
        "purpose": "测试当 filter_query 参数格式不合法时，工具是否能返回明确的错误信息。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": "invalid_filter_string",
          "update_query": {
            "age": 31
          },
          "multi": false
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_update_document: 1 validation error for mcp_update_documentArguments\nfilter_query\n  Input should be a valid dictionary [type=dict_type, input_value='invalid_filter_string', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/dict_type"
        },
        "execution_time": 0.010592460632324219,
        "is_functional_test": false
      },
      {
        "case_name": "Update With Special Characters in Field Name",
        "purpose": "验证工具能否正确处理包含特殊字符的字段名进行更新。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "user@#_id": "12345"
          },
          "update_query": {
            "user@#_id": "67890"
          },
          "multi": false
        },
        "response": {
          "result": "{\"updated_count\": 0}"
        },
        "execution_time": 0.007946968078613281,
        "is_functional_test": true
      },
      {
        "case_name": "Update With Maximum Length Field Name",
        "purpose": "测试当字段名长度达到最大限制时，工具是否仍能正常执行更新操作。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "very_long_field_name_that_exceeds_normal_limits_and_might_cause_issues": "old_value"
          },
          "update_query": {
            "very_long_field_name_that_exceeds_normal_limits_and_might_cause_issues": "new_value"
          },
          "multi": false
        },
        "response": {
          "result": "{\"updated_count\": 0}"
        },
        "execution_time": 0.009042739868164062,
        "is_functional_test": true
      }
    ],
    "mcp_delete_document": [
      {
        "case_name": "Delete Single Document Successfully",
        "purpose": "验证工具能够成功删除指定数据库和集合中的单个文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "name": "John Doe"
          },
          "multi": false
        },
        "response": {
          "result": "{\"deleted_count\": 1}"
        },
        "execution_time": 0.006001472473144531,
        "is_functional_test": true
      },
      {
        "case_name": "Delete Multiple Documents Successfully",
        "purpose": "验证当 multi=True 时，工具能正确删除所有匹配的文档。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "status": "inactive"
          },
          "multi": true
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.007997989654541016,
        "is_functional_test": true
      },
      {
        "case_name": "Delete With Default Multi Parameter",
        "purpose": "验证未指定 multi 参数时，默认只删除第一个匹配项。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "role": "guest"
          }
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.0059964656829833984,
        "is_functional_test": true
      },
      {
        "case_name": "Delete From Nonexistent Collection",
        "purpose": "测试尝试从不存在的集合中删除文档时是否返回错误或0删除计数。",
        "args": {
          "database_name": "test_db",
          "collection_name": "nonexistent_collection",
          "filter_query": {
            "name": "Test User"
          },
          "multi": true
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.008012533187866211,
        "is_functional_test": false
      },
      {
        "case_name": "Delete With Invalid Filter Query",
        "purpose": "验证工具能否处理无效或格式错误的 filter_query 参数。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": "invalid_filter_format",
          "multi": true
        },
        "response": {
          "error": "ToolException: Error executing tool mcp_delete_document: 1 validation error for mcp_delete_documentArguments\nfilter_query\n  Input should be a valid dictionary [type=dict_type, input_value='invalid_filter_format', input_type=str]\n    For further information visit https://errors.pydantic.dev/2.10/v/dict_type"
        },
        "execution_time": 0.004995822906494141,
        "is_functional_test": false
      },
      {
        "case_name": "Security Test - Delete Unauthorized Collection",
        "purpose": "模拟未授权用户尝试删除系统敏感集合（如 admin.system.users）。",
        "args": {
          "database_name": "admin",
          "collection_name": "system.users",
          "filter_query": {
            "username": "admin"
          },
          "multi": true
        },
        "response": {
          "result": "{\"error\": \"Collection 'system.users' does not exist in database 'admin'.\"}"
        },
        "execution_time": 0.00599980354309082,
        "is_functional_test": false
      },
      {
        "case_name": "Delete From Empty Collection",
        "purpose": "验证在空集合中执行删除操作时的行为是否符合预期（如返回 deleted_count=0）。",
        "args": {
          "database_name": "test_db",
          "collection_name": "empty_docs",
          "filter_query": {
            "name": "NonExistentUser"
          },
          "multi": true
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.010014533996582031,
        "is_functional_test": true
      },
      {
        "case_name": "Delete With Special Characters In Filter",
        "purpose": "验证包含特殊字符的 filter_query 是否能被正确解析并执行删除。",
        "args": {
          "database_name": "test_db",
          "collection_name": "users",
          "filter_query": {
            "username": "user@#_测试"
          },
          "multi": true
        },
        "response": {
          "result": "{\"deleted_count\": 0}"
        },
        "execution_time": 0.00500035285949707,
        "is_functional_test": true
      }
    ]
  },
  "total_cases": 47
}